{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath for performing valid mathematics.\r\n */\r\nlibrary SafeMath {\r\n \r\n  function Mul(uint a, uint b) internal pure returns (uint) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function Div(uint a, uint b) internal pure returns (uint) {\r\n    //assert(b > 0); // Solidity automatically throws when Dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function Sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  } \r\n\r\n  function Add(uint a, uint b) internal pure returns (uint) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  } \r\n}\r\n\r\n/**\r\n* @title Contract that will work with ERC223 tokens.\r\n*/\r\ncontract ERC223ReceivingContract { \r\n    /**\r\n     * @dev Standard ERC223 function that will handle incoming token transfers.\r\n     *\r\n     * @param _from  Token sender address.\r\n     * @param _value Amount of tokens.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n/**\r\n * Contract \"Ownable\"\r\n * Purpose: Defines Owner for contract and provide functionality to transfer ownership to another account\r\n */\r\ncontract Ownable {\r\n\r\n  //owner variable to store contract owner account\r\n  address public owner;\r\n  //add another owner to transfer ownership\r\n  address oldOwner;\r\n\r\n  //Constructor for the contract to store owner's account on deployement\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n    oldOwner = msg.sender;\r\n  }\r\n\r\n  //modifier to check transaction initiator is only owner\r\n  modifier onlyOwner() {\r\n    require (msg.sender == owner || msg.sender == oldOwner);\r\n      _;\r\n  }\r\n\r\n  //ownership can be transferred to provided newOwner. Function can only be initiated by contract owner's account\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require (newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ncontract ERC20 is Ownable {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) public view returns (uint256 value);\r\n    function transfer(address _to, uint256 _value) public returns (bool _success);\r\n    function allowance(address owner, address spender) public view returns (uint256 _value);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool _success);\r\n    function approve(address spender, uint256 value) public returns (bool _success);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n}\r\n\r\ncontract CTV is ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    //The name of the  token\r\n    string public constant name = \"Coin TV\";\r\n    //The token symbol\r\n    string public constant symbol = \"CTV\";\r\n    //To denote the locking on transfer of tokens among token holders\r\n    bool public locked;\r\n    //The precision used in the calculations in contract\r\n    uint8 public constant decimals = 18;\r\n    //maximum number of tokens\r\n    uint256 constant MAXCAP = 29999990e18;\r\n    // maximum number of tokens that can be supplied by referrals\r\n    uint public constant MAX_REFERRAL_TOKENS = 2999999e18;\r\n    //set the softcap of ether received\r\n    uint256 constant SOFTCAP = 70 ether;\r\n    //Refund eligible or not\r\n    // 0: sale not started yet, refunding invalid\r\n    // 1: refund not required\r\n    // 2: softcap not reached, refund required\r\n    // 3: Refund in progress\r\n    // 4: Everyone refunded\r\n    uint256 public refundStatus = 0;\r\n    //the account which will receive all balance\r\n    address public ethCollector;\r\n    //to save total number of ethers received\r\n    uint256 public totalWeiReceived;\r\n    //count tokens earned by referrals\r\n    uint256 public tokensSuppliedFromReferral = 0;\r\n\r\n    //Mapping to relate owner and spender to the tokens allowed to transfer from owner\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    //to manage referrals\r\n    mapping(address => address) public referredBy;\r\n    //Mapping to relate number of  token to the account\r\n    mapping(address => uint256) balances;\r\n\r\n    //Structure for investors; holds received wei amount and Token sent\r\n    struct Investor {\r\n        //wei received during PreSale\r\n        uint weiReceived;\r\n        //Tokens sent during CrowdSale\r\n        uint tokensPurchased;\r\n        //user has been refunded or not\r\n        bool refunded;\r\n        //Uniquely identify an investor(used for iterating)\r\n        uint investorID;\r\n    }\r\n\r\n    //time when the sale starts\r\n    uint256 public startTime;\r\n    //time when the presale ends\r\n    uint256 public endTime;\r\n    //to check the sale status\r\n    bool public saleRunning;\r\n    //investors indexed by their ETH address\r\n    mapping(address => Investor) public investors;\r\n    //investors indexed by their IDs\r\n    mapping (uint256 => address) public investorList;\r\n    //count number of investors\r\n    uint256 public countTotalInvestors;\r\n    //to keep track of how many investors have been refunded\r\n    uint256 countInvestorsRefunded;\r\n\r\n    //events\r\n    event StateChanged(bool);\r\n\r\n    function CTV() public{\r\n        totalSupply = 0;\r\n        startTime = 0;\r\n        endTime = 0;\r\n        saleRunning = false;\r\n        locked = true;\r\n        setEthCollector(0xAf3BBf663769De9eEb6C2b235262Cf704eD4EA4b);\r\n        mintAlreadyBoughtTokens(0x19566f85835e52e78edcfba440aea5e28783050b,66650000000000000000);\r\n        mintAlreadyBoughtTokens(0xcb969c937e724f1d36ea2fb576148d8286399806,666500000000000000000);\r\n        mintAlreadyBoughtTokens(0x43feda65c918642faf6186c8575fdbb582f4ecd5,2932600000000000000000);\r\n        mintAlreadyBoughtTokens(0x0c94e8579ab97dc2dd805bed3fa72af9cbe8e37c,1466300000000000000000);\r\n        mintAlreadyBoughtTokens(0xaddc8429aa246fedc40005ae4c7f340d94cbb05b,733150000000000000000);\r\n        \r\n        mintAlreadyBoughtTokens(0x99ea6d3bd3f4dd4447d0083d906d64cbeadba33a,733150000000000000000);\r\n        mintAlreadyBoughtTokens(0x99f9493b162ac63d2c61514739a701731ac72398,3665750000000000000000);\r\n        mintAlreadyBoughtTokens(0xa7e919d4d655d86382f76eb5e8151e99ecb4a0da,3470694090746885970870);\r\n        mintAlreadyBoughtTokens(0x1aa18bf38d97a1a68a0119d2287041909b4e6680,1626260000000000000000);\r\n        mintAlreadyBoughtTokens(0x90702a5432f97d01770365d52c312f96dc108e90,1466300000000000000000);\r\n        \r\n        mintAlreadyBoughtTokens(0x562ebcdfe25cfb1985f94836cdc23d3a1d32d8b5,733150000000000000000);\r\n        mintAlreadyBoughtTokens(0x437b405657f4ec00a34ce8b212e52b8a78a14b31,2932600000000000000000);\r\n        mintAlreadyBoughtTokens(0x23c36686b733acdd5266e429b5b132d3da607394,733150000000000000000);\r\n        mintAlreadyBoughtTokens(0xaf933e90e7cf328edeece1f043faed2c5856745e,733150000000000000000);\r\n        mintAlreadyBoughtTokens(0x1d3c7bb8a95ad08740fe2726dd183aa85ffc42f8,1466300000000000000000);\r\n        \r\n        mintAlreadyBoughtTokens(0xd01362b2d59276f8d5d353d180a8f30e2282a23e,733150000000000000);\r\n    }\r\n    //To handle ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    modifier onlyUnlocked() { \r\n        require (!locked); \r\n        _; \r\n    }\r\n\r\n    modifier validTimeframe(){\r\n        require(saleRunning && now >=startTime && now < endTime);\r\n        _;\r\n    }\r\n    \r\n    function setEthCollector(address _ethCollector) public onlyOwner{\r\n        require(_ethCollector != address(0));\r\n        ethCollector = _ethCollector;\r\n    }\r\n    \r\n    function startSale() public onlyOwner{\r\n        require(startTime == 0);\r\n        startTime = now;\r\n        endTime = startTime.Add(7 weeks);\r\n        saleRunning = true;\r\n    }\r\n\r\n    //To enable transfer of tokens\r\n    function unlockTransfer() external onlyOwner{\r\n        locked = false;\r\n    }\r\n\r\n    /**\r\n    * @dev Check if the address being passed belongs to a contract\r\n    *\r\n    * @param _address The address which you want to verify\r\n    * @return A bool specifying if the address is that of contract or not\r\n    */\r\n    function isContract(address _address) private view returns(bool _isContract){\r\n        assert(_address != address(0) );\r\n        uint length;\r\n        //inline assembly code to check the length of address\r\n        assembly{\r\n            length := extcodesize(_address)\r\n        }\r\n        if(length > 0){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Check balance of given account address\r\n    *\r\n    * @param _owner The address account whose balance you want to know\r\n    * @return balance of the account\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 _value){\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer sender's token to a given address\r\n    *\r\n    * @param _to The address which you want to transfer to\r\n    * @param _value the amount of tokens to be transferred\r\n    * @return A bool if the transfer was a success or not\r\n    */\r\n    function transfer(address _to, uint _value) onlyUnlocked onlyPayloadSize(2 * 32) public returns(bool _success) {\r\n        require( _to != address(0) );\r\n        bytes memory _empty;\r\n        if((balances[msg.sender] > _value) && _value > 0 && _to != address(0)){\r\n            balances[msg.sender] = balances[msg.sender].Sub(_value);\r\n            balances[_to] = balances[_to].Add(_value);\r\n            if(isContract(_to)){\r\n                ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n                receiver.tokenFallback(msg.sender, _value, _empty);\r\n            }\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens to an address given by sender. To make ERC223 compliant\r\n    *\r\n    * @param _to The address which you want to transfer to\r\n    * @param _value the amount of tokens to be transferred\r\n    * @param _data additional information of account from where to transfer from\r\n    * @return A bool if the transfer was a success or not\r\n    */\r\n    function transfer(address _to, uint _value, bytes _data) onlyUnlocked onlyPayloadSize(3 * 32) public returns(bool _success) {\r\n        if((balances[msg.sender] > _value) && _value > 0 && _to != address(0)){\r\n            balances[msg.sender] = balances[msg.sender].Sub(_value);\r\n            balances[_to] = balances[_to].Add(_value);\r\n            if(isContract(_to)){\r\n                ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n                receiver.tokenFallback(msg.sender, _value, _data);\r\n            }\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another, for ERC20.\r\n    *\r\n    * @param _from The address which you want to send tokens from\r\n    * @param _to The address which you want to transfer to\r\n    * @param _value the amount of tokens to be transferred\r\n    * @return A bool if the transfer was a success or not \r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3*32) public onlyUnlocked returns (bool){\r\n        bytes memory _empty;\r\n        if((_value > 0)\r\n           && (_to != address(0))\r\n       && (_from != address(0))\r\n       && (allowed[_from][msg.sender] > _value )){\r\n           balances[_from] = balances[_from].Sub(_value);\r\n           balances[_to] = balances[_to].Add(_value);\r\n           allowed[_from][msg.sender] = allowed[_from][msg.sender].Sub(_value);\r\n           if(isContract(_to)){\r\n               ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n               receiver.tokenFallback(msg.sender, _value, _empty);\r\n           }\r\n           Transfer(_from, _to, _value);\r\n           return true;\r\n       }\r\n       else{\r\n           return false;\r\n       }\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner has allowed a spender to recieve from owner.\r\n    *\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender to spend.\r\n    */\r\n    function allowance(address _owner, address _spender) public view returns (uint256){\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    *\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool){\r\n        if( (_value > 0) && (_spender != address(0)) && (balances[msg.sender] >= _value)){\r\n            allowed[msg.sender][_spender] = _value;\r\n            Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Calculate number of tokens that will be received in one ether\r\n    * \r\n    */\r\n    function getPrice() public view returns(uint256) {\r\n        uint256 price;\r\n        if(totalSupply <= 1e6*1e18)\r\n            price = 13330;\r\n        else if(totalSupply <= 5e6*1e18)\r\n            price = 12500;\r\n        else if(totalSupply <= 9e6*1e18)\r\n            price = 11760;\r\n        else if(totalSupply <= 13e6*1e18)\r\n            price = 11110;\r\n        else if(totalSupply <= 17e6*1e18)\r\n            price = 10520;\r\n        else if(totalSupply <= 21e6*1e18)\r\n            price = 10000;\r\n        else{\r\n            //zero indicates that no tokens will be allocated when total supply\r\n            //of 21 million tokens is reached\r\n            price = 0;\r\n        }\r\n        return price;\r\n    }\r\n    \r\n    function mintAndTransfer(address beneficiary, uint256 numberOfTokensWithoutDecimal, bytes comment) public onlyOwner {\r\n        uint256 tokensToBeTransferred = numberOfTokensWithoutDecimal*1e18;\r\n        require(totalSupply.Add(tokensToBeTransferred) <= MAXCAP);\r\n        totalSupply = totalSupply.Add(tokensToBeTransferred);\r\n        Transfer(0x0, beneficiary ,tokensToBeTransferred);\r\n    }\r\n    \r\n    function mintAlreadyBoughtTokens(address beneficiary, uint256 tokensBought)internal{\r\n        //Make entry in Investor indexed with address\r\n        Investor storage investorStruct = investors[beneficiary];\r\n        //If it is a new investor, then create a new id\r\n        if(investorStruct.investorID == 0){\r\n            countTotalInvestors++;\r\n            investorStruct.investorID = countTotalInvestors;\r\n            investorList[countTotalInvestors] = beneficiary;\r\n        }\r\n        investorStruct.weiReceived = investorStruct.weiReceived + tokensBought/13330;\r\n        investorStruct.tokensPurchased = investorStruct.tokensPurchased + tokensBought;\r\n        balances[beneficiary] = balances[beneficiary] + tokensBought;\r\n        totalWeiReceived = totalWeiReceived + tokensBought/13330;\r\n        totalSupply = totalSupply + tokensBought;\r\n        \r\n        Transfer(0x0, beneficiary ,tokensBought);\r\n    }\r\n\r\n    /**\r\n    * @dev to enable pause sale for break in ICO and Pre-ICO\r\n    *\r\n    */\r\n    function pauseSale() public onlyOwner{\r\n        assert(saleRunning && startTime > 0 && now <= endTime);\r\n        saleRunning = false;\r\n    }\r\n\r\n    /**\r\n    * @dev to resume paused sale\r\n    *\r\n    */\r\n    function resumeSale() public onlyOwner{\r\n        assert(!saleRunning && startTime > 0 && now <= endTime);\r\n        saleRunning = true;\r\n    }\r\n\r\n    function buyTokens(address beneficiary) internal validTimeframe {\r\n        uint256 tokensBought = msg.value.Mul(getPrice());\r\n        balances[beneficiary] = balances[beneficiary].Add(tokensBought);\r\n        Transfer(0x0, beneficiary ,tokensBought);\r\n        totalSupply = totalSupply.Add(tokensBought);\r\n\r\n        //Make entry in Investor indexed with address\r\n        Investor storage investorStruct = investors[beneficiary];\r\n        //If it is a new investor, then create a new id\r\n        if(investorStruct.investorID == 0){\r\n            countTotalInvestors++;\r\n            investorStruct.investorID = countTotalInvestors;\r\n            investorList[countTotalInvestors] = beneficiary;\r\n        }\r\n        investorStruct.weiReceived = investorStruct.weiReceived.Add(msg.value);\r\n        investorStruct.tokensPurchased = investorStruct.tokensPurchased.Add(tokensBought);\r\n    \r\n        \r\n        //Award referral tokens\r\n        if(referredBy[msg.sender] != address(0) && tokensSuppliedFromReferral.Add(tokensBought/10) < MAX_REFERRAL_TOKENS){\r\n            //give 10% referral tokens\r\n            balances[referredBy[msg.sender]] = balances[referredBy[msg.sender]].Add(tokensBought/10);\r\n            tokensSuppliedFromReferral = tokensSuppliedFromReferral.Add(tokensBought/10);\r\n            totalSupply = totalSupply.Add(tokensBought/10);\r\n            Transfer(0x0, referredBy[msg.sender] ,tokensBought);\r\n        }\r\n        //if referrer was also referred by someone\r\n        if(referredBy[referredBy[msg.sender]] != address(0) && tokensSuppliedFromReferral.Add(tokensBought/100) < MAX_REFERRAL_TOKENS){\r\n            tokensSuppliedFromReferral = tokensSuppliedFromReferral.Add(tokensBought/100);\r\n            //give 1% tokens to 2nd generation referrer\r\n            balances[referredBy[referredBy[msg.sender]]] = balances[referredBy[referredBy[msg.sender]]].Add(tokensBought/100);\r\n            totalSupply = totalSupply.Add(tokensBought/100);\r\n            Transfer(0x0, referredBy[referredBy[msg.sender]] ,tokensBought);\r\n        }\r\n        \r\n        assert(totalSupply <= MAXCAP);\r\n        totalWeiReceived = totalWeiReceived.Add(msg.value);\r\n        ethCollector.transfer(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev This function is used to register a referral.\r\n     * Whoever calls this function, is telling contract,\r\n     * that \"I was referred by referredByAddress\"\r\n     * Whenever I am going to buy tokens, 10% will be awarded to referredByAddress\r\n     * \r\n     * @param referredByAddress The address of person who referred the person calling this function\r\n     */\r\n    function registerReferral (address referredByAddress) public {\r\n        require(msg.sender != referredByAddress && referredByAddress != address(0));\r\n        referredBy[msg.sender] = referredByAddress;\r\n    }\r\n    \r\n    /**\r\n     * @dev Owner is allowed to manually register who was referred by whom\r\n     * @param heWasReferred The address of person who was referred\r\n     * @param I_referred_this_person The person who referred the above address\r\n     */\r\n    function referralRegistration(address heWasReferred, address I_referred_this_person) public onlyOwner {\r\n        require(heWasReferred != address(0) && I_referred_this_person != address(0));\r\n        referredBy[heWasReferred] = I_referred_this_person;\r\n    }\r\n\r\n    /**\r\n    * Finalize the crowdsale\r\n    */\r\n    function finalize() public onlyOwner {\r\n        //Make sure Sale is running\r\n        assert(saleRunning);\r\n        if(MAXCAP.Sub(totalSupply) <= 1 ether || now > endTime){\r\n            //now sale can be finished\r\n            saleRunning = false;\r\n        }\r\n\r\n        //Refund eligible or not\r\n        // 0: sale not started yet, refunding invalid\r\n        // 1: refund not required\r\n        // 2: softcap not reached, refund required\r\n        // 3: Refund in progress\r\n        // 4: Everyone refunded\r\n\r\n        //Checks if the fundraising goal is reached in crowdsale or not\r\n        if (totalWeiReceived < SOFTCAP)\r\n            refundStatus = 2;\r\n        else\r\n            refundStatus = 1;\r\n\r\n        //crowdsale is ended\r\n        saleRunning = false;\r\n        //enable transferring of tokens among token holders\r\n        locked = false;\r\n        //Emit event when crowdsale state changes\r\n        StateChanged(true);\r\n    }\r\n\r\n    /**\r\n    * Refund the investors in case target of crowdsale not achieved\r\n    */\r\n    function refund() public onlyOwner {\r\n        assert(refundStatus == 2 || refundStatus == 3);\r\n        uint batchSize = countInvestorsRefunded.Add(30) < countTotalInvestors ? countInvestorsRefunded.Add(30): countTotalInvestors;\r\n        for(uint i=countInvestorsRefunded.Add(1); i <= batchSize; i++){\r\n            address investorAddress = investorList[i];\r\n            Investor storage investorStruct = investors[investorAddress];\r\n            //If purchase has been made during CrowdSale\r\n            if(investorStruct.tokensPurchased > 0 && investorStruct.tokensPurchased <= balances[investorAddress]){\r\n                //return everything\r\n                investorAddress.transfer(investorStruct.weiReceived);\r\n                //Reduce totalWeiReceived\r\n                totalWeiReceived = totalWeiReceived.Sub(investorStruct.weiReceived);\r\n                //Update totalSupply\r\n                totalSupply = totalSupply.Sub(investorStruct.tokensPurchased);\r\n                // reduce balances\r\n                balances[investorAddress] = balances[investorAddress].Sub(investorStruct.tokensPurchased);\r\n                //set everything to zero after transfer successful\r\n                investorStruct.weiReceived = 0;\r\n                investorStruct.tokensPurchased = 0;\r\n                investorStruct.refunded = true;\r\n            }\r\n        }\r\n        //Update the number of investors that have recieved refund\r\n        countInvestorsRefunded = batchSize;\r\n        if(countInvestorsRefunded == countTotalInvestors){\r\n            refundStatus = 4;\r\n        }\r\n        StateChanged(true);\r\n    }\r\n    \r\n    function extendSale(uint56 numberOfDays) public onlyOwner{\r\n        saleRunning = true;\r\n        endTime = now.Add(numberOfDays*86400);\r\n        StateChanged(true);\r\n    }\r\n\r\n    /**\r\n    * @dev This will receive ether from owner so that the contract has balance while refunding\r\n    *\r\n    */\r\n    function prepareForRefund() public payable {}\r\n\r\n    function () public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * Failsafe drain\r\n    */\r\n    function drain() public onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referredByAddress\",\"type\":\"address\"}],\"name\":\"registerReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countTotalInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSuppliedFromReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"heWasReferred\",\"type\":\"address\"},{\"name\":\"I_referred_this_person\",\"type\":\"address\"}],\"name\":\"referralRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"prepareForRefund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"weiReceived\",\"type\":\"uint256\"},{\"name\":\"tokensPurchased\",\"type\":\"uint256\"},{\"name\":\"refunded\",\"type\":\"bool\"},{\"name\":\"investorID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethCollector\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethCollector\",\"type\":\"address\"}],\"name\":\"setEthCollector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referredBy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"numberOfTokensWithoutDecimal\",\"type\":\"uint256\"},{\"name\":\"comment\",\"type\":\"bytes\"}],\"name\":\"mintAndTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_REFERRAL_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numberOfDays\",\"type\":\"uint56\"}],\"name\":\"extendSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"bool\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CTV","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://97b2f1b2876c1edc77e831c12adff80633af42cd721584e87e3c4c510f49a901"}]}