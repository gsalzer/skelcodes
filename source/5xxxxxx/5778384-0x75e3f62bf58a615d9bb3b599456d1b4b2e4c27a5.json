{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n/// @title Contract class\r\n/// @author Infinigon Group\r\n/// @notice Contract class defines the name of the contract\r\ncontract Contract {\r\n    bytes32 public Name;\r\n\r\n    /// @notice Initializes contract with contract name\r\n    /// @param _contractName The name to be given to the contract\r\n    constructor(bytes32 _contractName) public {\r\n        Name = _contractName;\r\n    }\r\n\r\n    function() public payable { }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Default Token\r\n// ----------------------------------------------------------------------------\r\ncontract DeaultERC20 is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        symbol = \"DFLT\";\r\n        name = \"Default\";\r\n        decimals = 18;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ---------------------------------------------------------allowance---------------\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () public payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// IGCoin\r\n// ----------------------------------------------------------------------------\r\ncontract IGCoin is DeaultERC20 {\r\n    using SafeMath for uint;\r\n\r\n    address public reserveAddress; // wei\r\n    uint256 public ask;\r\n    uint256 public bid;\r\n    uint16 public constant reserveRate = 10;\r\n    bool public initialSaleComplete;\r\n    uint256 constant private ICOAmount = 2e6*1e18; // in aToken\r\n    uint256 constant private ICOask = 1*1e18; // in wei per Token\r\n    uint256 constant private ICObid = 0; // in wei per Token\r\n    uint256 constant private InitialSupply = 1e6 * 1e18; // Number of tokens (aToken) minted when contract created\r\n    uint256 public debugVal;\r\n    uint256 public debugVal2;\r\n    uint256 public debugVal3;\r\n    uint256 public debugVal4;\r\n    uint256 constant private R = 12500000;  // matlab R=1.00000008, this R=1/(1.00000008-1)\r\n    uint256 constant private P = 50; // precision\r\n    uint256 constant private lnR = 12500001; // 1/ln(R)   (matlab R)\r\n    uint256 constant private S = 1e8; // s.t. S*R = integer\r\n    uint256 constant private RS = 8; // 1.00000008*S-S=8\r\n    uint256 constant private lnS = 18; // ln(S) = 18\r\n    \r\n    /* Constants to support ln() */\r\n    uint256 private constant ONE = 1;\r\n    uint32 private constant MAX_WETokenHT = 1000000;\r\n    uint8 private constant MIN_PRECISION = 32;\r\n    uint8 private constant MAX_PRECISION = 127;\r\n    uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\r\n    uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\r\n    uint256 private constant MAX_NUM = 0x1ffffffffffffffffffffffffffffffff;\r\n    uint256 private constant FIXED_3 = 0x07fffffffffffffffffffffffffffffff;\r\n    uint256 private constant LN2_MANTISSA = 0x2c5c85fdf473de6af278ece600fcbda;\r\n    uint8   private constant LN2_EXPONENT = 122;\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n    event FrozenFunds(address target, bool frozen); \r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        symbol = \"IG17\";\r\n        name = \"theTestToken001\";\r\n        decimals = 18;\r\n        initialSaleComplete = false;\r\n        _totalSupply = InitialSupply;  // Keep track of all IG Coins created, ever\r\n        balances[owner] = _totalSupply;  // Give the creator all initial IG coins\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n\r\n        reserveAddress = new Contract(\"Reserve\");  // Create contract to hold reserve\r\n        quoteAsk();\r\n        quoteBid();        \r\n    }\r\n\r\n    /// @notice Deposits '_value' in wei to the reserve address\r\n    /// @param _value The number of wei to be transferred to the \r\n    /// reserve address\r\n    function deposit(uint256 _value) private {\r\n        reserveAddress.transfer(_value);\r\n        balances[reserveAddress] += _value;\r\n    }\r\n  \r\n    /// @notice Withdraws '_value' in wei from the reserve address\r\n    /// @param _value The number of wei to be transferred from the \r\n    /// reserve address    \r\n    function withdraw(uint256 _value) private pure {\r\n        // TODO\r\n         _value = _value;\r\n    }\r\n    \r\n    /// @notice Transfers '_value' in wei to the '_to' address\r\n    /// @param _to The recipient address\r\n    /// @param _value The amount of wei to transfer\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        /* Check if sender has balance and for overflows */\r\n        require(balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]);\r\n        \r\n        /* Check if amount is nonzero */\r\n        require(_value > 0);\r\n\r\n        /* Add and subtract new balances */\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n    \r\n        /* Notify anyone listening that this transfer took place */\r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /// @notice `freeze? Prevent | Allow` `target` from sending \r\n    /// & receiving tokens\r\n    /// @param _target Address to be frozen\r\n    /// @param _freeze either to freeze it or not\r\n    function freezeAccount(address _target, bool _freeze) public onlyOwner {\r\n        frozenAccount[_target] = _freeze;\r\n        emit FrozenFunds(_target, _freeze);\r\n    }    \r\n \r\n    /// @notice Calculates the ask price in wei per aToken based on the \r\n    /// current reserve amount\r\n    /// @return Price of aToken in wei\r\n    function quoteAsk() public returns (uint256) {\r\n        if(initialSaleComplete)\r\n        {\r\n            ask = fracExp(1e18, R, (_totalSupply/1e18)+1, P);\r\n        }\r\n        else\r\n        {\r\n            ask = ICOask;\r\n        }\r\n\r\n        return ask;\r\n    }\r\n    \r\n    /// @notice Calculates the bid price in wei per aToken based on the \r\n    /// current reserve amount\r\n    /// @return Price of aToken in wei    \r\n    function quoteBid() public returns (uint256) {\r\n        if(initialSaleComplete)\r\n        {\r\n            bid = fracExp(1e18, R, (_totalSupply/1e18)-1, P);\r\n        }\r\n        else\r\n        {\r\n            bid = ICObid;\r\n        }\r\n\r\n        return bid;\r\n    }\r\n\r\n    /// @notice Buys aToken in exchnage for wei at the current ask price\r\n    /// @return refunds remainder of wei from purchase   \r\n    function buy() public payable returns (uint256 amount){\r\n        uint256 refund = 0;\r\n        debugVal = 0;\r\n        \r\n        if(initialSaleComplete)\r\n        {\r\n            uint256 units_to_buy = 0;\r\n\r\n            uint256 etherRemaining = msg.value;             // (wei)\r\n            uint256 etherToReserve = 0;                     // (wei)\r\n\r\n            debugVal = fracExp(S, R, (_totalSupply/1e18),P);\r\n            debugVal2 = RS*msg.value;\r\n            debugVal3 = RS*msg.value/1e18 + fracExp(S, R, (_totalSupply/1e18),P);\r\n            debugVal4 = (ln(debugVal3,1)-lnS);//*lnR-1;\r\n            units_to_buy = debugVal4;\r\n\r\n\r\n            reserveAddress.transfer(etherToReserve);        // send the ask amount to the reserve\r\n            mintToken(msg.sender, amount);                  // Mint the coin\r\n            refund = etherRemaining;\r\n            msg.sender.transfer(refund);                    // Issue refund            \r\n        }\r\n        else\r\n        {\r\n            // TODO don't sell more than the ICO amount if one transaction is huge\r\n            ask = ICOask;                                   // ICO sale price (wei/Token)\r\n            amount = 1e18*msg.value / ask;                  // calculates the amount of aToken (1e18*wei/(wei/Token))\r\n            refund = msg.value - (amount*ask/1e18);         // calculate refund (wei)\r\n\r\n            // TODO test for overflow attack\r\n            reserveAddress.transfer(msg.value - refund);    // send the full amount of the sale to reserve\r\n            msg.sender.transfer(refund);                    // Issue refund\r\n            balances[reserveAddress] += msg.value-refund;  // All other addresses hold Token Coin, reserveAddress represents ether\r\n            mintToken(msg.sender, amount);                  // Mint the coin (aToken)\r\n\r\n            if(_totalSupply >= ICOAmount)\r\n            {\r\n                initialSaleComplete = true;\r\n            }             \r\n        }\r\n        \r\n        \r\n        return amount;                                    // ends function and returns\r\n    }\r\n\r\n    /// @notice Sells aToken in exchnage for wei at the current bid \r\n    /// price, reduces resreve\r\n    /// @return Proceeds of wei from sale of aToken\r\n    function sell(uint amount) public returns (uint revenue){\r\n        require(initialSaleComplete);\r\n        require(balances[msg.sender] >= bid);            // checks if the sender has enough to sell\r\n        balances[reserveAddress] += amount;                        // adds the amount to owner's balance\r\n        balances[msg.sender] -= amount;                  // subtracts the amount from seller's balance\r\n        revenue = amount * bid;\r\n        require(msg.sender.send(revenue));                // sends ether to the seller: it's important to do this last to prevent recursion attacks\r\n        emit Transfer(msg.sender, reserveAddress, amount);               // executes an event reflecting on the change\r\n        return revenue;                                   // ends function and returns\r\n    }    \r\n    \r\n    /// @notice Create `mintedAmount` tokens and send it to `target`\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n    function mintToken(address target, uint256 mintedAmount) public {\r\n        balances[target] += mintedAmount;\r\n        _totalSupply += mintedAmount;\r\n        emit Transfer(0, this, mintedAmount);\r\n        emit Transfer(this, target, mintedAmount);\r\n    }    \r\n    \r\n\r\n    /// @notice Compute '_k * (1+1/_q) ^ _n', with precision '_p'\r\n    /// @dev The higher the precision, the higher the gas cost. It should be\r\n    /// something around the log of 'n'. When 'p == n', the\r\n    /// precision is absolute (sans possible integer overflows).\r\n    /// Much smaller values are sufficient to get a great approximation.\r\n    /// @param _k input param k\r\n    /// @param _q input param q\r\n    /// @param _n input param n\r\n    /// @param _p input param p\r\n    /// @return '_k * (1+1/_q) ^ _n'   \r\n    function fracExp(uint256 _k, uint256 _q, uint256 _n, uint256 _p) public pure returns (uint256) {\r\n      uint256 s = 0;\r\n      uint256 N = 1;\r\n      uint256 B = 1;\r\n      for (uint256 i = 0; i < _p; ++i){\r\n        s += _k * N / B / (_q**i);\r\n        N  = N * (_n-i);\r\n        B  = B * (i+1);\r\n      }\r\n      return s;\r\n    }\r\n    \r\n    /// @notice Compute the natural logarithm\r\n    /// @dev This functions assumes that the numerator is larger than or equal \r\n    /// to the denominator, because the output would be negative otherwise.\r\n    /// @param _numerator is a value between 1 and 2 ^ (256 - MAX_PRECISION) - 1\r\n    /// @param _denominator is a value between 1 and 2 ^ (256 - MAX_PRECISION) - 1\r\n    /// @return is a value between 0 and floor(ln(2 ^ (256 - MAX_PRECISION) - 1) * 2 ^ MAX_PRECISION)\r\n    function ln(uint256 _numerator, uint256 _denominator) internal pure returns (uint256) {\r\n        assert(_numerator <= MAX_NUM);\r\n\r\n        uint256 res = 0;\r\n        uint256 x = _numerator * FIXED_1 / _denominator;\r\n\r\n        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\r\n        if (x >= FIXED_2) {\r\n            uint8 count = floorLog2(x / FIXED_1);\r\n            x >>= count; // now x < 2\r\n            res = count * FIXED_1;\r\n        }\r\n\r\n        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\r\n        if (x > FIXED_1) {\r\n            for (uint8 i = MAX_PRECISION; i > 0; --i) {\r\n                x = (x * x) / FIXED_1; // now 1 < x < 4\r\n                if (x >= FIXED_2) {\r\n                    x >>= 1; // now 1 < x < 2\r\n                    res += ONE << (i - 1);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return ((res * LN2_MANTISSA) >> LN2_EXPONENT) / FIXED_3;\r\n    }\r\n\r\n    /// @notice Compute the largest integer smaller than or equal to \r\n    /// the binary logarithm of the input\r\n    /// @param _n Operand of the function\r\n    /// @return Floor(Log2(_n))\r\n    function floorLog2(uint256 _n) internal pure returns (uint8) {\r\n        uint8 res = 0;\r\n\r\n        if (_n < 256) {\r\n            // At most 8 iterations\r\n            while (_n > 1) {\r\n                _n >>= 1;\r\n                res += 1;\r\n            }\r\n        }\r\n        else {\r\n            // Exactly 8 iterations\r\n            for (uint8 s = 128; s > 0; s >>= 1) {\r\n                if (_n >= (ONE << s)) {\r\n                    _n >>= s;\r\n                    res |= s;\r\n                }\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }    \r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"quoteBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debugVal3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debugVal4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ask\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debugVal2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"quoteAsk\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_k\",\"type\":\"uint256\"},{\"name\":\"_q\",\"type\":\"uint256\"},{\"name\":\"_n\",\"type\":\"uint256\"},{\"name\":\"_p\",\"type\":\"uint256\"}],\"name\":\"fracExp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debugVal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"revenue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSaleComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"IGCoin","CompilerVersion":"v0.4.25-nightly.2018.6.12+commit.56a965ea","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6f73fadc39aa7b4b224d137411eaeac5633fa3453fee81f23f4ab2244bf055f5"}]}