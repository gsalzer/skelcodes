{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract B0xAccount is Ownable {\r\n    using SafeMath for uint;\r\n\r\n\tmapping (address => Withdraw[]) public withdrawals;\r\n\r\n    address public receiver1;\r\n    address public receiver2;\r\n\r\n    uint public numerator = 3;\r\n    uint public denominator = 7;\r\n\r\n    struct Withdraw {\r\n        address receiver;\r\n        uint amount;\r\n        uint blockNumber;\r\n        uint blockTimestamp;\r\n    }\r\n\r\n    function() \r\n        public\r\n        payable\r\n    {\r\n        require(msg.value > 0);\r\n        uint toSend = msg.value.mul(numerator).div(denominator);\r\n        require(receiver1.send(toSend));\r\n        require(receiver2.send(toSend));\r\n    }\r\n\r\n    constructor(\r\n        address _receiver1,\r\n        address _receiver2)\r\n        public\r\n    {\r\n        receiver1 = _receiver1;\r\n        receiver2 = _receiver2;\r\n    }\r\n\r\n    function deposit()\r\n        public\r\n        payable\r\n        returns(bool)\r\n    {}\r\n\r\n    function withdraw(\r\n        uint _value)\r\n        public\r\n        returns(bool)\r\n    {\r\n        return (withdrawTo(\r\n            _value,\r\n            msg.sender\r\n        ));\r\n    }\r\n\r\n    function withdrawTo(\r\n        uint _value,\r\n        address _to)\r\n        public\r\n        returns(bool)\r\n    {\r\n        require(\r\n            msg.sender == receiver1 \r\n            || msg.sender == receiver2);\r\n\r\n        uint amount = _value;\r\n        if (amount > address(this).balance) {\r\n            amount = address(this).balance;\r\n        }\r\n\r\n        withdrawals[msg.sender].push(Withdraw({\r\n            receiver: _to,\r\n            amount: amount,\r\n            blockNumber: block.number,\r\n            blockTimestamp: block.timestamp\r\n        }));\r\n\r\n        return (_to.send(amount));\r\n    }\r\n\r\n    function transferToken(\r\n        address _tokenAddress,\r\n        address _to,\r\n        uint _value)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        // bytes4(keccak256(\"transfer(address,uint256)\")) == 0xa9059cbb\r\n        require(_tokenAddress.call(0xa9059cbb, _to, _value));\r\n\r\n        return true;\r\n    }    \r\n\r\n    function setReceiver1(\r\n        address _receiver\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_receiver != address(0) && _receiver != receiver1);\r\n        receiver1 = _receiver;\r\n    }\r\n\r\n    function setReceiver2(\r\n        address _receiver\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_receiver != address(0) && _receiver != receiver2);\r\n        receiver2 = _receiver;\r\n    }\r\n\r\n    function setNumeratorDenominator(\r\n        uint _numerator,\r\n        uint _denominator\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_numerator > 0 && (_numerator*2) <= _denominator);\r\n        numerator = _numerator;\r\n        denominator = _denominator;\r\n    }\r\n\r\n    function getBalance()\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setReceiver1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numerator\",\"type\":\"uint256\"},{\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setNumeratorDenominator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawals\",\"outputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiver2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiver1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setReceiver2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_receiver1\",\"type\":\"address\"},{\"name\":\"_receiver2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"B0xAccount","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ff599af039a5b84c86297245464b9518b04f2e13000000000000000000000000dc63983db369be1596f5f511bd903b716509801a","Library":"","SwarmSource":"bzzr://53505f9cc896fb5bf4eb342b87c912c2a9f1af6c7e2f0654e9fc17d854ab6dc0"}]}