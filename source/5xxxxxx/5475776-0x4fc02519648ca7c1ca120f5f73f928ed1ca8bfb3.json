{"status":"1","message":"OK","result":[{"SourceCode":"//Compatible Solidity Compiler Version\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n\r\n/*\r\nThis TMX Global Token contract is based on the ERC20 token contract standard. Additional\r\nfunctionality has been integrated:\r\n\r\n*/\r\n\r\n\r\ncontract TMXGlobalToken  {\r\n    //TMX Global Official Token Name\r\n    string public name;\r\n    \r\n    //TMX Global Token Official Symbol\r\n\tstring public symbol;\r\n\t\r\n\t//TMX Global Token Decimals\r\n\tuint8 public decimals; \r\n  \r\n  //database to match user Accounts and their respective balances\r\n  mapping(address => uint) _balances;\r\n  mapping(address => mapping( address => uint )) _approvals;\r\n  \r\n  //TMX Global Token Hard cap \r\n  uint public cap_tmx;\r\n  \r\n  //Number of TMX Global Tokens in existence\r\n  uint public _supply;\r\n  \r\n\r\n  event TokenMint(address newTokenHolder, uint amountOfTokens);\r\n  event TokenSwapOver();\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint value );\r\n  event Approval(address indexed owner, address indexed spender, uint value );\r\n  event mintting(address indexed to, uint value );\r\n  event minterTransfered(address indexed prevCommand, address indexed nextCommand);\r\n \r\n //Ethereum address of Authorized Nuru Token Minter\r\naddress public dev;\r\n\r\n//check if hard cap reached before mintting new Tokens\r\nmodifier cap_reached(uint amount) {\r\n    \r\n    if((_supply + amount) > cap_tmx) revert();\r\n    _;\r\n}\r\n\r\n//check if Account is the Authorized Minter\r\nmodifier onlyMinter {\r\n    \r\n      if (msg.sender != dev) revert();\r\n      _;\r\n  }\r\n  \r\n  //initialize Nuru Token\r\n  //pass TMX Global Token Configurations to the Constructor\r\n function TMXGlobalToken(uint cap_token, uint initial_balance, string tokenName, string tokenSymbol, uint8 decimalUnits) public {\r\n    \r\n    cap_tmx = cap_token;\r\n    _supply += initial_balance;\r\n    _balances[msg.sender] = initial_balance;\r\n    \r\n    decimals = decimalUnits;\r\n\tsymbol = tokenSymbol;\r\n\tname = tokenName;\r\n    dev = msg.sender;\r\n    \r\n  }\r\n\r\n//retrieve number of all TMX Global Tokens in existence\r\nfunction totalSupply() public constant returns (uint supply) {\r\n    return _supply;\r\n  }\r\n\r\n//check TMX Global Tokens balance of an Ethereum account\r\nfunction balanceOf(address who) public constant returns (uint value) {\r\n    return _balances[who];\r\n  }\r\n\r\n//check how many TMX Global Tokens a spender is allowed to spend from an owner\r\nfunction allowance(address _owner, address spender) public constant returns (uint _allowance) {\r\n    return _approvals[_owner][spender];\r\n  }\r\n\r\n  // A helper to notify if overflow occurs\r\nfunction safeToAdd(uint a, uint b) internal returns (bool) {\r\n    return (a + b >= a && a + b >= b);\r\n  }\r\n\r\n//transfer an amount of TMX Global Tokens to an Ethereum address\r\nfunction transfer(address to, uint value) public returns (bool ok) {\r\n\r\n    if(_balances[msg.sender] < value) revert();\r\n    \r\n    if(!safeToAdd(_balances[to], value)) revert();\r\n    \r\n\r\n    _balances[msg.sender] -= value;\r\n    _balances[to] += value;\r\n    Transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n//spend TMX Global Tokens from another Ethereum account that approves you as spender\r\nfunction transferFrom(address from, address to, uint value) public returns (bool ok) {\r\n    // if you don't have enough balance, throw\r\n    if(_balances[from] < value) revert();\r\n\r\n    // if you don't have approval, throw\r\n    if(_approvals[from][msg.sender] < value) revert();\r\n    \r\n    if(!safeToAdd(_balances[to], value)) revert();\r\n    \r\n    // transfer and return true\r\n    _approvals[from][msg.sender] -= value;\r\n    _balances[from] -= value;\r\n    _balances[to] += value;\r\n    Transfer(from, to, value);\r\n    return true;\r\n  }\r\n  \r\n  \r\n//allow another Ethereum account to spend TMX Global Tokens from your Account\r\nfunction approve(address spender, uint value)\r\n    public\r\n    returns (bool ok) {\r\n    _approvals[msg.sender][spender] = value;\r\n    Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n//mechanism for TMX Global Tokens Creation\r\n//only minter can create new TMX Global Tokens\r\n//check if TMX Global Token Hard Cap is reached before proceedig - revert if true\r\nfunction mint(address recipient, uint amount) onlyMinter cap_reached(amount) public\r\n  {\r\n        \r\n   _balances[recipient] += amount;  \r\n   _supply += amount;\r\n    \r\n   \r\n    mintting(recipient, amount);\r\n  }\r\n  \r\n //transfer the priviledge of creating new TMX Global Tokens to anothe Ethereum account\r\nfunction transferMintership(address newMinter) public onlyMinter returns(bool)\r\n  {\r\n    dev = newMinter;\r\n    \r\n    minterTransfered(dev, newMinter);\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap_tmx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"transferMintership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"_allowance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"cap_token\",\"type\":\"uint256\"},{\"name\":\"initial_balance\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newTokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"TokenMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenSwapOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mintting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"prevCommand\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"nextCommand\",\"type\":\"address\"}],\"name\":\"minterTransfered\",\"type\":\"event\"}]","ContractName":"TMXGlobalToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000006342fd08f00f6378000000000000000000000000000000000000000000000000108b2a2c2802909400000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000010544d5820476c6f62616c20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003544d580000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://92ac97f9ee723ac712e069812a84283851d710837c5c0fac1600e047e8e7a60e"}]}