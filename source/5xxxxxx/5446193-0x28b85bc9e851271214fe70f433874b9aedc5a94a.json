{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply()public view returns(uint total_Supply);\r\n    function balanceOf(address who)public view returns(uint256);\r\n    function allowance(address owner, address spender)public view returns(uint);\r\n    function transferFrom(address from, address to, uint value)public returns(bool ok);\r\n    function approve(address spender, uint value)public returns(bool ok);\r\n    function transfer(address to, uint value)public returns(bool ok);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract IDMONEY is ERC20\r\n{\r\n    using SafeMath for uint256;\r\n        // Name of the token\r\n        string public constant name = \"IDMONEY\";\r\n\r\n    // Symbol of token\r\n    string public constant symbol = \"IDM\";\r\n    uint8 public constant decimals = 18;\r\n    uint public _totalsupply = 35000000 * 10 ** 18; // 35 Million IDM Coins\r\n    uint256 constant public _price_tokn = 0.00075 ether;\r\n    uint256 no_of_tokens;\r\n    uint256 bonus_token;\r\n    uint256 total_token;\r\n    uint256 tokensold;\r\n    uint256 public total_token_sold;\r\n    bool stopped = false;\r\n \r\n    address public owner;\r\n    address superAdmin = 0x1313d38e988526A43Ab79b69d4C94dD16f4c9936;\r\n    address socialOne = 0x52d4bcF6F328492453fAfEfF9d6Eb73D26766Cff;\r\n    address socialTwo = 0xbFe47a096486B564783f261B324e198ad84Fb8DE;\r\n    address founderOne = 0x5AD7cdD7Cd67Fe7EB17768F04425cf35a91587c9;\r\n    address founderTwo = 0xA90ab8B8Cfa553CC75F9d2C24aE7148E44Cd0ABa;\r\n    address founderThree = 0xd2fdE07Ee7cB86AfBE59F4efb9fFC1528418CC0E;\r\n    address storage1 = 0x5E948d1C6f7C76853E43DbF1F01dcea5263011C5;\r\n    \r\n    mapping(address => uint) balances;\r\n    mapping(address => bool) public refund;              //checks the refund status\r\n    mapping(address => bool) public whitelisted;         //checks the whitelist status of the address\r\n    mapping(address => uint256) public deposited;        //checks the actual ether given by investor\r\n    mapping(address => uint256) public tokensinvestor;   //checks number of tokens for investor\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    uint constant public minimumInvestment = .1 ether; // .1 ether is minimum minimumInvestment\r\n    uint bonus;\r\n    uint c;\r\n    uint256 lefttokens;\r\n\r\n    enum Stages {\r\n        NOTSTARTED,\r\n        ICO,\r\n        PAUSED,\r\n        ENDED\r\n    }\r\n    Stages public stage;\r\n\r\n     modifier atStage(Stages _stage) {\r\n        require (stage == _stage);\r\n            // Contract not in expected state\r\n         _;\r\n    }\r\n    \r\n     modifier onlyOwner() {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n     modifier onlySuperAdmin() {\r\n        require (msg.sender == superAdmin);\r\n        _;\r\n    }\r\n\r\n    function IDMONEY() public\r\n    {\r\n        owner = msg.sender;\r\n        balances[superAdmin] = 2700000 * 10 ** 18;  // 2.7 million given to superAdmin\r\n        balances[socialOne] = 3500000 * 10 ** 18;  // 3.5 million given to socialOne\r\n        balances[socialTwo] = 3500000 * 10 ** 18;  // 3.5 million given to socialTwo\r\n        balances[founderOne] = 2100000 * 10 ** 18; // 2.1 million given to FounderOne\r\n        balances[founderTwo] = 2100000 * 10 ** 18; // 2.1 million given to FounderTwo\r\n        balances[founderThree] = 2100000 * 10 ** 18; //2.1 million given to founderThree\r\n        balances[storage1] = 9000000 * 10 ** 18; // 9 million given to storage1\r\n        stage = Stages.NOTSTARTED;\r\n       emit Transfer(0, superAdmin, balances[superAdmin]);\r\n       emit Transfer(0, socialOne, balances[socialOne]);\r\n       emit Transfer(0, socialTwo, balances[socialTwo]);\r\n       emit Transfer(0, founderOne, balances[founderOne]);\r\n       emit Transfer(0, founderTwo, balances[founderTwo]);\r\n       emit Transfer(0, founderThree, balances[founderThree]);\r\n       emit Transfer(0, storage1, balances[storage1]);\r\n    }\r\n\r\n    function () public payable atStage(Stages.ICO)\r\n    {\r\n        require(msg.value >= minimumInvestment);\r\n        require(!stopped && msg.sender != owner);\r\n\r\n        no_of_tokens = ((msg.value).div(_price_tokn)).mul(10 ** 18);\r\n        tokensold = (tokensold).add(no_of_tokens);\r\n        deposited[msg.sender] = deposited[msg.sender].add(msg.value);\r\n        bonus = bonuscal();\r\n        bonus_token = ((no_of_tokens).mul(bonus)).div(100);  // bonus\r\n        total_token = no_of_tokens + bonus_token;\r\n        total_token_sold = (total_token_sold).add(total_token);\r\n        tokensinvestor[msg.sender] = tokensinvestor[msg.sender].add(total_token);\r\n\r\n\r\n    }\r\n\r\n    //calculation for the bonus for 1 million tokens\r\n    function bonuscal() private returns(uint)\r\n    {\r\n       \r\n        c = tokensold / 10 ** 23;\r\n        if (c == 0) \r\n        {\r\n           return  90;\r\n\r\n        }\r\n         return (90 - (c * 10));\r\n    }\r\n\r\n    function start_ICO() external onlyOwner atStage(Stages.NOTSTARTED)\r\n    {\r\n        stage = Stages.ICO;\r\n        stopped = false;\r\n        balances[address(this)] = 10000000 * 10 ** 18; // 10 million to smart contract initially\r\n      emit Transfer(0, address(this), balances[address(this)]);\r\n    }\r\n\r\n\r\n    function enablerefund(address refundaddress) external onlyOwner\r\n    {\r\n        require(!whitelisted[refundaddress]);\r\n        refund[refundaddress] = true;\r\n    }\r\n\r\n    //refund of the Non whitelisted\r\n    function claimrefund(address investor) public\r\n    {\r\n        require(refund[investor]);\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        tokensinvestor[investor] = 0;\r\n        // Refunded(investor, depositedValue);\r\n    }\r\n\r\n    // called by the owner, pause ICO\r\n    function PauseICO() external onlyOwner atStage(Stages.ICO) {\r\n        stopped = true;\r\n        stage = Stages.PAUSED;\r\n    }\r\n\r\n    // called by the owner , resumes ICO\r\n    function releaseICO() external onlyOwner atStage(Stages.PAUSED)\r\n    {\r\n        stopped = false;\r\n        stage = Stages.ICO;\r\n    }\r\n\r\n\r\n    function setWhiteListAddresses(address _investor) external onlyOwner{\r\n        whitelisted[_investor] = true;\r\n    }\r\n\r\n    //Investor can claim his tokens within two weeks of ICO end using this function\r\n    //It can be also used to claim on behalf of any investor\r\n    function claimTokensICO(address receiver) public\r\n    // isValidPayload\r\n    {\r\n        //   if (receiver == 0)\r\n        //   receiver = msg.sender;\r\n        require(whitelisted[receiver]);\r\n        require(tokensinvestor[receiver] > 0);\r\n        uint256 tokensclaim = tokensinvestor[receiver];\r\n        balances[address(this)] = (balances[address(this)]).sub(tokensclaim);\r\n        balances[receiver] = (balances[receiver]).add(tokensclaim);\r\n        tokensinvestor[receiver] = 0;\r\n      emit  Transfer(address(this), receiver, balances[receiver]);\r\n    }\r\n\r\n    function end_ICO() external onlySuperAdmin atStage(Stages.ICO)\r\n    {\r\n        stage = Stages.ENDED;\r\n        lefttokens = balances[address(this)];\r\n        balances[superAdmin]=(balances[superAdmin]).add(lefttokens);\r\n        balances[address(this)] = 0;\r\n       emit Transfer(address(this), superAdmin, lefttokens);\r\n\r\n    }\r\n\r\n    // what is the total supply of the ech tokens\r\n    function totalSupply() public view returns(uint256 total_Supply) {\r\n        total_Supply = _totalsupply;\r\n    }\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner)public view returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(address _from, address _to, uint256 _amount)public returns(bool success) {\r\n        require(_to != 0x0);\r\n        require(_amount >= 0);\r\n        balances[_from] = (balances[_from]).sub(_amount);\r\n        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n      emit  Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount)public returns(bool success) {\r\n        require(_spender != 0x0);\r\n        allowed[msg.sender][_spender] = _amount;\r\n      emit  Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)public view returns(uint256 remaining) {\r\n        require(_owner != 0x0 && _spender != 0x0);\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _amount)public returns(bool success) {\r\n        require(_to != 0x0);\r\n        require(balances[msg.sender] >= _amount && _amount >= 0);\r\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n      emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n \r\n\r\n    //In case the ownership needs to be transferred\r\n    function transferOwnership(address newOwner)public onlySuperAdmin\r\n    {\r\n        require(newOwner != 0x0);\r\n        owner = newOwner;\r\n    }\r\n\r\n\r\n    function drain() external onlyOwner {\r\n         address myAddress = this;\r\n        superAdmin.transfer(myAddress.balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"end_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"claimrefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_price_tokn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"setWhiteListAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensinvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refundaddress\",\"type\":\"address\"}],\"name\":\"enablerefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_token_sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimTokensICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PauseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"IDMONEY","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bc06d78801ad13dcdca8fc0c5c8fe53294334f3b6d798103e152fbfb0632f0ad"}]}