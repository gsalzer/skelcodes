{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract EGCSnakesAndLadders {\r\n\r\n    using SafeMath for uint;\r\n\r\n    struct User {\r\n        uint position;\r\n        uint points;\r\n        uint rolls;\r\n        mapping (uint => uint) history;\r\n    }\r\n\r\n    address public owner;\r\n    uint public total_points;\r\n    mapping (address => User) public users;\r\n\r\n    uint private seed;\r\n    mapping (uint => uint) private ups;\r\n    mapping (uint => uint) private downs;\r\n    mapping (uint => uint) private coins;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        total_points = 0;\r\n        seed = 1;\r\n\r\n        ups[11] = 17;\r\n        ups[25] = 20;\r\n        ups[36] = 7;\r\n        ups[42] = 20;\r\n        ups[53] = 20;\r\n        ups[76] = 7;\r\n        ups[87] = 5;\r\n\r\n        downs[13] = 7;\r\n        downs[23] = 7;\r\n        downs[39] = 20;\r\n        downs[58] = 17;\r\n        downs[67] = 20;\r\n        downs[74] = 20;\r\n        downs[91] = 20;\r\n        downs[98] = 20;\r\n        \r\n        coins[15] = 10;\r\n        coins[38] = 10;\r\n        coins[49] = 10;\r\n        coins[55] = 10;\r\n        coins[79] = 10;\r\n        coins[85] = 10;\r\n        coins[97] = 10;\r\n    }\r\n\r\n    function publicGetExchangeRate() view public returns (uint) {\r\n        return calcExchangeRate();\r\n    }\r\n\r\n    function publicGetUserInfo(address user) view public returns (uint[4]) {\r\n        return [\r\n            users[user].position,\r\n            users[user].points,\r\n            users[user].rolls,\r\n            users[user].points.mul(calcExchangeRate())\r\n        ];\r\n    }\r\n\r\n    function publicGetUserHistory(address user, uint start) view public returns (uint[10]) {\r\n        return [\r\n            users[user].history[start],\r\n            users[user].history[start.add(1)],\r\n            users[user].history[start.add(2)],\r\n            users[user].history[start.add(3)],\r\n            users[user].history[start.add(4)],\r\n            users[user].history[start.add(5)],\r\n            users[user].history[start.add(6)],\r\n            users[user].history[start.add(7)],\r\n            users[user].history[start.add(8)],\r\n            users[user].history[start.add(9)]\r\n        ];\r\n    }\r\n\r\n    function userPlay() public payable {\r\n        require(msg.value == 20 finney);\r\n\r\n        uint random = calcRandomNumber();\r\n\r\n        uint bonus = users[msg.sender].position.div(100);\r\n        bonus = (bonus < 3) ? (bonus.add(1)) : 3;\r\n\r\n        uint points = users[msg.sender].points.add(bonus);\r\n        uint position = users[msg.sender].position.add(random);\r\n        uint total = total_points.sub(users[msg.sender].points);\r\n\r\n        uint position_ups = ups[position % 100];\r\n        uint position_downs = downs[position % 100];\r\n        uint position_coins = coins[position % 100];\r\n\r\n        points = points.add(random);\r\n\r\n        if (position_ups > 0) {\r\n            position = position.add(position_ups);\r\n            points = points.add(position_ups);\r\n        }\r\n        \r\n        if (position_downs > 0) {\r\n            position = position.sub(position_downs);\r\n            points = points.sub(position_downs);\r\n        }\r\n\r\n        if (position_coins > 0) {\r\n            points = points.add(position_coins);\r\n        }\r\n\r\n        if (msg.sender != owner) {\r\n            total = total.add(1);\r\n            users[owner].points = users[owner].points.add(1);\r\n        }\r\n        \r\n        seed = random.mul(uint(blockhash(block.number - 1)) % 20);\r\n        total_points = total.add(points);\r\n\r\n        users[msg.sender].position = position;\r\n        users[msg.sender].points = points;\r\n        users[msg.sender].rolls = users[msg.sender].rolls.add(1);\r\n        users[msg.sender].history[users[msg.sender].rolls] = random;\r\n    }\r\n\r\n    function userWithdraw() public {\r\n        uint amount = users[msg.sender].points.mul(calcExchangeRate());\r\n        require(amount > 0);\r\n\r\n        total_points = total_points.sub(users[msg.sender].points);\r\n        users[msg.sender].position = 0;\r\n        users[msg.sender].points = 0;\r\n        users[msg.sender].rolls = 0;\r\n\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function calcExchangeRate() view private returns (uint) {\r\n        return address(this).balance.div(total_points);\r\n    }\r\n\r\n    function calcRandomNumber() view private returns (uint) {\r\n        return (uint(blockhash(block.number - seed)) ^ uint(msg.sender)) % 6 + 1;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"total_points\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicGetExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"position\",\"type\":\"uint256\"},{\"name\":\"points\",\"type\":\"uint256\"},{\"name\":\"rolls\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"publicGetUserHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userPlay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"publicGetUserInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"EGCSnakesAndLadders","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4552c602751c2b50bda7c13d21b1af7961aeea0c6a6308f4e8722393a48bc7af"}]}