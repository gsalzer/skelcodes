{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\ncontract Admin {\r\n\r\n    address public owner;\r\n    mapping(address => bool) public AdminList;\r\n    uint256 public ClaimAmount = 350000000000000000000;\r\n    uint256 public ClaimedAmount = 0;\r\n\r\n    event AdministratorAdded(address indexed _invoker, address indexed _newAdministrator);\r\n    event AdministratorRemoved(address indexed _invoker, address indexed _removedAdministrator);\r\n    event OwnershipChanged(address indexed _invoker, address indexed _newOwner);\r\n\r\n    function Admin() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier OnlyAdmin() {\r\n        require(msg.sender == owner || AdminList[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier OnlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier AirdropStatus() {\r\n        require(ClaimAmount != 0);\r\n        _;\r\n    }\r\n\r\n    function MakeAdministrator(address AddressToAdd) public returns (bool success) {\r\n\r\n        require(msg.sender == owner);\r\n        require(AddressToAdd != address(0));\r\n        AdminList[AddressToAdd] = true;\r\n        AdministratorAdded(msg.sender, AddressToAdd);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function RemoveAdministrator(address AddressToRemove) public returns (bool success) {\r\n\r\n        require(msg.sender == owner);\r\n        require(AddressToRemove != address(0));\r\n        delete AdminList[AddressToRemove];\r\n        AdministratorRemoved(msg.sender, AddressToRemove);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function ChangeOwner(address AddressToMake) public returns (bool success) {\r\n\r\n        require(msg.sender == owner);\r\n        require(AddressToMake != address(0));\r\n        require(owner != AddressToMake);\r\n        owner = AddressToMake;\r\n        OwnershipChanged(msg.sender, AddressToMake);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function ChangeClaimAmount(uint256 NewAmount) public OnlyAdmin() returns (bool success) {\r\n\r\n        ClaimAmount = NewAmount;\r\n        \r\n        return true;\r\n\r\n    }\r\n\r\n}\r\n\r\ncontract KoveredPay is Admin {\r\n\r\n    bytes4 public symbol = \"KVP\";\r\n    bytes16 public name = \"KoveredPay\";\r\n    uint8 public decimals = 18;\r\n    uint256 constant TotalSupply = 50000000000000000000000000;\r\n\r\n    bool public TransfersEnabled;\r\n    uint256 public TrustlessTransactions_TransactionHeight = 0;\r\n    uint256 public MediatedTransactions_TransactionHeight = 0;\r\n    uint128 public TrustlessTransaction_Protection_Seconds = 259200;\r\n    uint128 public MediatedTransaction_Protection_Seconds = 2620800;\r\n    address public InitialOwnerAddress = address(0);\r\n    address public CoreMediator = address(0);\r\n    uint256 public MediatorFees = 0;\r\n    uint256 public LockInExpiry = 0;\r\n\r\n    mapping(address => uint256) public UserBalances;\r\n    mapping(address => mapping(address => uint256)) public Allowance;\r\n\r\n    struct TrustlessTransaction {\r\n        address _sender;\r\n        address _receiver;\r\n        uint256 _kvp_amount;\r\n        bool _statusModified;\r\n        bool _credited;\r\n        bool _refunded;\r\n        uint256 _time;\r\n    }\r\n\r\n    struct MediatedTransaction {\r\n        address _sender;\r\n        address _receiver;\r\n        bool _mediator;\r\n        uint256 _kvp_amount;\r\n        uint256 _fee_amount;\r\n        bool _satisfaction;\r\n        bool _statusModified;\r\n        bool _credited;\r\n        uint256 _time;\r\n    }\r\n\r\n    mapping(address => bool) public Claims;\r\n    mapping(uint256 => TrustlessTransaction) public TrustlessTransactions_Log;\r\n    mapping(uint256 => MediatedTransaction) public MediatedTransactions_Log;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Trustless_Transfer(uint256 _id, address indexed _from, address indexed _to, uint256 _value);\r\n    event Mediated_Transfer(uint256 _id, address indexed _from, address indexed _to, uint256 _value);\r\n    event TrustlessTransferStatusModified(uint256 _transactionId, bool _newStatus);\r\n    event MediatedTransferStatusModified(uint256 _transactionId, bool _newStatus);\r\n    event TrustlessTransaction_Refunded(uint256 _transactionId, uint256 _amount);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function KoveredPay() public {\r\n\r\n        UserBalances[msg.sender] = TotalSupply;\r\n        CoreMediator = msg.sender;\r\n        InitialOwnerAddress = msg.sender;\r\n        LockInExpiry = add(block.timestamp, 15778463);\r\n        TransfersEnabled = true;\r\n\r\n    }\r\n    \r\n    function AirdropClaim() public AirdropStatus returns (uint256 AmountClaimed) {\r\n        \r\n        require(Claims[msg.sender] == false);\r\n        require(ClaimedAmount < 35000000000000000000000000);   \r\n        require(TransferValidation(owner, msg.sender, ClaimAmount) == true);\r\n        ClaimedAmount = ClaimedAmount + ClaimAmount;\r\n        UserBalances[msg.sender] = add(UserBalances[msg.sender], ClaimAmount);\r\n        UserBalances[owner] = sub(UserBalances[owner], ClaimAmount);\r\n        Claims[msg.sender] = true;\r\n        Transfer(msg.sender, owner, ClaimAmount);\r\n\r\n        return ClaimAmount;\r\n        \r\n    }\r\n\r\n    function AlterMediatorSettings(address _newAddress, uint128 _fees) public OnlyAdmin returns (bool success) {\r\n\r\n        CoreMediator = _newAddress;\r\n        MediatorFees = _fees;\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function ChangeProtectionTime(uint _type, uint128 _seconds) public OnlyAdmin returns (bool success) {\r\n\r\n        if (_type == 1) {\r\n            TrustlessTransaction_Protection_Seconds = _seconds;\r\n        } else {\r\n            MediatedTransaction_Protection_Seconds = _seconds;\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function TransferStatus(bool _newStatus) public OnlyAdmin returns (bool success) {\r\n\r\n        TransfersEnabled = _newStatus;\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function TransferValidation(address sender, address recipient, uint256 amount) private view returns (bool success) {\r\n\r\n        require(TransfersEnabled == true);\r\n        require(amount > 0);\r\n        require(recipient != address(0));\r\n        require(UserBalances[sender] >= amount);\r\n        require(sub(UserBalances[sender], amount) >= 0);\r\n        require(add(UserBalances[recipient], amount) > UserBalances[recipient]);\r\n\r\n        if (sender == InitialOwnerAddress && block.timestamp < LockInExpiry) {\r\n            require(sub(UserBalances[sender], amount) >= 10000000000000000000000000);\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function MultiTransfer(address[] _destinations, uint256[] _values) public returns (uint256) {\r\n\r\n        uint256 i = 0;\r\n\r\n        while (i < _destinations.length) {\r\n            transfer(_destinations[i], _values[i]);\r\n            i += 1;\r\n        }\r\n\r\n        return (i);\r\n\r\n    }\r\n\r\n    function transfer(address receiver, uint256 amount) public returns (bool _status) {\r\n\r\n        require(TransferValidation(msg.sender, receiver, amount));\r\n        UserBalances[msg.sender] = sub(UserBalances[msg.sender], amount);\r\n        UserBalances[receiver] = add(UserBalances[receiver], amount);\r\n        Transfer(msg.sender, receiver, amount);\r\n        return true;\r\n\r\n    }\r\n\r\n    function transferFrom(address _owner, address _receiver, uint256 _amount) public returns (bool _status) {\r\n\r\n        require(TransferValidation(_owner, _receiver, _amount));\r\n        require(sub(Allowance[_owner][msg.sender], _amount) >= 0);\r\n        Allowance[_owner][msg.sender] = sub(Allowance[_owner][msg.sender], _amount);\r\n        UserBalances[_owner] = sub(UserBalances[_owner], _amount);\r\n        UserBalances[_receiver] = add(UserBalances[_receiver], _amount);\r\n        Transfer(_owner, _receiver, _amount);\r\n        return true;\r\n\r\n    }\r\n\r\n    function Send_TrustlessTransaction(address receiver, uint256 amount) public returns (uint256 transferId) {\r\n\r\n        require(TransferValidation(msg.sender, receiver, amount));\r\n        UserBalances[msg.sender] = sub(UserBalances[msg.sender], amount);\r\n        TrustlessTransactions_TransactionHeight = TrustlessTransactions_TransactionHeight + 1;\r\n        TrustlessTransactions_Log[TrustlessTransactions_TransactionHeight] = TrustlessTransaction(msg.sender, receiver, amount, false, false, false, block.timestamp);\r\n        Trustless_Transfer(TrustlessTransactions_TransactionHeight, msg.sender, receiver, amount);\r\n        return TrustlessTransactions_TransactionHeight;\r\n\r\n    }\r\n\r\n    function Send_MediatedTransaction(address receiver, uint256 amount) public returns (uint256 transferId) {\r\n\r\n        require(TransferValidation(msg.sender, receiver, amount));\r\n        UserBalances[msg.sender] = sub(UserBalances[msg.sender], amount);\r\n        MediatedTransactions_TransactionHeight = MediatedTransactions_TransactionHeight + 1;\r\n        MediatedTransactions_Log[MediatedTransactions_TransactionHeight] = MediatedTransaction(msg.sender, receiver, false, amount, 0, false, false, false, block.timestamp);\r\n        Mediated_Transfer(MediatedTransactions_TransactionHeight, msg.sender, receiver, amount);\r\n        return MediatedTransactions_TransactionHeight;\r\n\r\n    }\r\n\r\n    function Appoint_Mediator(uint256 _txid) public returns (bool success) {\r\n\r\n        if (MediatedTransactions_Log[_txid]._sender == msg.sender || MediatedTransactions_Log[_txid]._receiver == msg.sender) {\r\n\r\n            uint256 sent_on = MediatedTransactions_Log[_txid]._time;\r\n            uint256 right_now = block.timestamp;\r\n            uint256 difference = sub(right_now, sent_on);\r\n\r\n            require(MediatedTransactions_Log[_txid]._mediator == false);\r\n            require(MediatedTransactions_Log[_txid]._satisfaction == false);\r\n            require(MediatedTransactions_Log[_txid]._statusModified == false);\r\n            require(difference <= MediatedTransaction_Protection_Seconds);\r\n            require(MediatedTransactions_Log[_txid]._credited == false);\r\n            require(MediatedTransactions_Log[_txid]._kvp_amount >= MediatorFees);\r\n\r\n            MediatedTransactions_Log[_txid]._mediator = true;\r\n            MediatedTransactions_Log[_txid]._fee_amount = MediatorFees;\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function Alter_TrustlessTransaction(uint256 _transactionId, bool _newStatus) public returns (bool _response) {\r\n\r\n        uint256 sent_on = TrustlessTransactions_Log[_transactionId]._time;\r\n        uint256 right_now = block.timestamp;\r\n        uint256 difference = sub(right_now, sent_on);\r\n\r\n        require(TransfersEnabled == true);\r\n        require(TrustlessTransactions_Log[_transactionId]._statusModified == false);\r\n        require(difference <= TrustlessTransaction_Protection_Seconds);\r\n        require(TrustlessTransactions_Log[_transactionId]._sender == msg.sender);\r\n        require(TrustlessTransactions_Log[_transactionId]._refunded == false);\r\n        require(TrustlessTransactions_Log[_transactionId]._credited == false);\r\n\r\n        if (_newStatus == true) {\r\n\r\n            UserBalances[TrustlessTransactions_Log[_transactionId]._receiver] = add(UserBalances[TrustlessTransactions_Log[_transactionId]._receiver], TrustlessTransactions_Log[_transactionId]._kvp_amount);\r\n            TrustlessTransactions_Log[_transactionId]._credited = true;\r\n\r\n        } else {\r\n\r\n            UserBalances[TrustlessTransactions_Log[_transactionId]._sender] = add(UserBalances[TrustlessTransactions_Log[_transactionId]._sender], TrustlessTransactions_Log[_transactionId]._kvp_amount);\r\n\r\n        }\r\n\r\n        TrustlessTransactions_Log[_transactionId]._statusModified = true;\r\n        TrustlessTransferStatusModified(_transactionId, _newStatus);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function Alter_MediatedTransaction(uint256 _transactionId, bool _newStatus) public returns (bool _response) {\r\n\r\n        require(TransfersEnabled == true);\r\n        require(MediatedTransactions_Log[_transactionId]._mediator == true);\r\n        require(MediatedTransactions_Log[_transactionId]._statusModified == false);\r\n        require(CoreMediator == msg.sender);\r\n        require(MediatedTransactions_Log[_transactionId]._credited == false);\r\n\r\n        uint256 newAmount = sub(MediatedTransactions_Log[_transactionId]._kvp_amount, MediatedTransactions_Log[_transactionId]._fee_amount);\r\n\r\n        if (newAmount < 0) {\r\n            newAmount = 0;\r\n        }\r\n\r\n        if (_newStatus == true) {\r\n\r\n            UserBalances[MediatedTransactions_Log[_transactionId]._receiver] = add(UserBalances[MediatedTransactions_Log[_transactionId]._receiver], newAmount);\r\n            MediatedTransactions_Log[_transactionId]._credited = true;\r\n\r\n        } else {\r\n\r\n            UserBalances[MediatedTransactions_Log[_transactionId]._sender] = add(UserBalances[MediatedTransactions_Log[_transactionId]._sender], newAmount);\r\n\r\n        }\r\n\r\n        UserBalances[CoreMediator] = add(UserBalances[CoreMediator], MediatedTransactions_Log[_transactionId]._fee_amount);\r\n\r\n        MediatedTransactions_Log[_transactionId]._statusModified = true;\r\n        MediatedTransferStatusModified(_transactionId, _newStatus);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function Refund_TrustlessTransaction(uint256 _transactionId) public returns (bool _response) {\r\n\r\n        require(TransfersEnabled == true);\r\n        require(TrustlessTransactions_Log[_transactionId]._refunded == false);\r\n        require(TrustlessTransactions_Log[_transactionId]._statusModified == true);\r\n        require(TrustlessTransactions_Log[_transactionId]._credited == true);\r\n        require(TrustlessTransactions_Log[_transactionId]._receiver == msg.sender);\r\n        require(TransferValidation(msg.sender, TrustlessTransactions_Log[_transactionId]._sender, TrustlessTransactions_Log[_transactionId]._kvp_amount));\r\n        require(sub(UserBalances[TrustlessTransactions_Log[_transactionId]._sender], TrustlessTransactions_Log[_transactionId]._kvp_amount) > 0);\r\n        UserBalances[TrustlessTransactions_Log[_transactionId]._sender] = add(UserBalances[TrustlessTransactions_Log[_transactionId]._sender], TrustlessTransactions_Log[_transactionId]._kvp_amount);\r\n        TrustlessTransactions_Log[_transactionId]._refunded = true;\r\n        TrustlessTransaction_Refunded(_transactionId, TrustlessTransactions_Log[_transactionId]._kvp_amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function Update_TrustlessTransaction(uint256 _transactionId) public returns (bool _response) {\r\n\r\n        uint256 sent_on = TrustlessTransactions_Log[_transactionId]._time;\r\n        uint256 right_now = block.timestamp;\r\n        uint256 difference = sub(right_now, sent_on);\r\n\r\n        require(TransfersEnabled == true);\r\n        require(TrustlessTransactions_Log[_transactionId]._statusModified == false);\r\n        require(difference > TrustlessTransaction_Protection_Seconds);\r\n        require(TrustlessTransactions_Log[_transactionId]._refunded == false);\r\n        require(TrustlessTransactions_Log[_transactionId]._credited == false);\r\n\r\n        UserBalances[TrustlessTransactions_Log[_transactionId]._receiver] = add(UserBalances[TrustlessTransactions_Log[_transactionId]._receiver], TrustlessTransactions_Log[_transactionId]._kvp_amount);\r\n        TrustlessTransactions_Log[_transactionId]._credited = true;\r\n        TrustlessTransactions_Log[_transactionId]._statusModified = true;\r\n        TrustlessTransferStatusModified(_transactionId, true);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function Express_Satisfaction_MediatedTransaction(uint256 _transactionId) public returns (bool _response) {\r\n\r\n        require(TransfersEnabled == true);\r\n        require(MediatedTransactions_Log[_transactionId]._sender == msg.sender);\r\n        require(MediatedTransactions_Log[_transactionId]._mediator == false);\r\n        require(MediatedTransactions_Log[_transactionId]._statusModified == false);\r\n        require(MediatedTransactions_Log[_transactionId]._credited == false);\r\n        require(MediatedTransactions_Log[_transactionId]._satisfaction == false);\r\n\r\n        UserBalances[MediatedTransactions_Log[_transactionId]._receiver] = add(UserBalances[MediatedTransactions_Log[_transactionId]._receiver], MediatedTransactions_Log[_transactionId]._kvp_amount);\r\n        MediatedTransactions_Log[_transactionId]._credited = true;\r\n        MediatedTransactions_Log[_transactionId]._statusModified = true;\r\n        MediatedTransactions_Log[_transactionId]._satisfaction = true;\r\n        MediatedTransferStatusModified(_transactionId, true);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function Update_MediatedTransaction(uint256 _transactionId) public returns (bool _response) {\r\n\r\n        uint256 sent_on = MediatedTransactions_Log[_transactionId]._time;\r\n        uint256 right_now = block.timestamp;\r\n        uint256 difference = sub(right_now, sent_on);\r\n\r\n        require(TransfersEnabled == true);\r\n        require(difference > MediatedTransaction_Protection_Seconds);\r\n        require(MediatedTransactions_Log[_transactionId]._mediator == false);\r\n        require(MediatedTransactions_Log[_transactionId]._statusModified == false);\r\n        require(MediatedTransactions_Log[_transactionId]._credited == false);\r\n        require(MediatedTransactions_Log[_transactionId]._satisfaction == false);\r\n\r\n        UserBalances[MediatedTransactions_Log[_transactionId]._sender] = add(UserBalances[MediatedTransactions_Log[_transactionId]._sender], MediatedTransactions_Log[_transactionId]._kvp_amount);\r\n\r\n        MediatedTransactions_Log[_transactionId]._statusModified = true;\r\n        MediatedTransferStatusModified(_transactionId, false);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function View_TrustlessTransaction_Info(uint256 _transactionId) public view returns (\r\n        address _sender,\r\n        address _receiver,\r\n        uint256 _kvp_amount,\r\n        uint256 _time\r\n    ) {\r\n\r\n        return (TrustlessTransactions_Log[_transactionId]._sender, TrustlessTransactions_Log[_transactionId]._receiver, TrustlessTransactions_Log[_transactionId]._kvp_amount, TrustlessTransactions_Log[_transactionId]._time);\r\n\r\n    }\r\n\r\n    function View_MediatedTransaction_Info(uint256 _transactionId) public view returns (\r\n        address _sender,\r\n        address _receiver,\r\n        uint256 _kvp_amount,\r\n        uint256 _fee_amount,\r\n        uint256 _time\r\n    ) {\r\n\r\n        return (MediatedTransactions_Log[_transactionId]._sender, MediatedTransactions_Log[_transactionId]._receiver, MediatedTransactions_Log[_transactionId]._kvp_amount, MediatedTransactions_Log[_transactionId]._fee_amount, MediatedTransactions_Log[_transactionId]._time);\r\n\r\n    }\r\n\r\n    function View_TrustlessTransaction_Status(uint256 _transactionId) public view returns (\r\n        bool _statusModified,\r\n        bool _credited,\r\n        bool _refunded\r\n    ) {\r\n\r\n        return (TrustlessTransactions_Log[_transactionId]._statusModified, TrustlessTransactions_Log[_transactionId]._credited, TrustlessTransactions_Log[_transactionId]._refunded);\r\n\r\n    }\r\n\r\n    function View_MediatedTransaction_Status(uint256 _transactionId) public view returns (\r\n        bool _satisfaction,\r\n        bool _statusModified,\r\n        bool _credited\r\n    ) {\r\n\r\n        return (MediatedTransactions_Log[_transactionId]._satisfaction, MediatedTransactions_Log[_transactionId]._statusModified, MediatedTransactions_Log[_transactionId]._credited);\r\n\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool approved) {\r\n        Allowance[msg.sender][spender] = amount;\r\n        Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _address) public view returns (uint256 balance) {\r\n        return UserBalances[_address];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256 amount_allowed) {\r\n        return Allowance[owner][spender];\r\n    }\r\n\r\n    function totalSupply() public pure returns (uint256 _supply) {\r\n        return TotalSupply;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ClaimedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AdminList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destinations\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"MultiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"approved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"View_TrustlessTransaction_Status\",\"outputs\":[{\"name\":\"_statusModified\",\"type\":\"bool\"},{\"name\":\"_credited\",\"type\":\"bool\"},{\"name\":\"_refunded\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"View_MediatedTransaction_Status\",\"outputs\":[{\"name\":\"_satisfaction\",\"type\":\"bool\"},{\"name\":\"_statusModified\",\"type\":\"bool\"},{\"name\":\"_credited\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"View_MediatedTransaction_Info\",\"outputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_kvp_amount\",\"type\":\"uint256\"},{\"name\":\"_fee_amount\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Send_MediatedTransaction\",\"outputs\":[{\"name\":\"transferId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ClaimAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"Refund_TrustlessTransaction\",\"outputs\":[{\"name\":\"_response\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"AddressToAdd\",\"type\":\"address\"}],\"name\":\"MakeAdministrator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TrustlessTransaction_Protection_Seconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Claims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"AddressToRemove\",\"type\":\"address\"}],\"name\":\"RemoveAdministrator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"AirdropClaim\",\"outputs\":[{\"name\":\"AmountClaimed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"View_TrustlessTransaction_Info\",\"outputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_kvp_amount\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"Update_TrustlessTransaction\",\"outputs\":[{\"name\":\"_response\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MediatedTransactions_Log\",\"outputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_mediator\",\"type\":\"bool\"},{\"name\":\"_kvp_amount\",\"type\":\"uint256\"},{\"name\":\"_fee_amount\",\"type\":\"uint256\"},{\"name\":\"_satisfaction\",\"type\":\"bool\"},{\"name\":\"_statusModified\",\"type\":\"bool\"},{\"name\":\"_credited\",\"type\":\"bool\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"},{\"name\":\"_fees\",\"type\":\"uint128\"}],\"name\":\"AlterMediatorSettings\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"NewAmount\",\"type\":\"uint256\"}],\"name\":\"ChangeClaimAmount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"Update_MediatedTransaction\",\"outputs\":[{\"name\":\"_response\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InitialOwnerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MediatedTransactions_TransactionHeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CoreMediator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"uint256\"},{\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"Alter_TrustlessTransaction\",\"outputs\":[{\"name\":\"_response\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TrustlessTransactions_TransactionHeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"Express_Satisfaction_MediatedTransaction\",\"outputs\":[{\"name\":\"_response\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"TransferStatus\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Send_TrustlessTransaction\",\"outputs\":[{\"name\":\"transferId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MediatedTransaction_Protection_Seconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"_seconds\",\"type\":\"uint128\"}],\"name\":\"ChangeProtectionTime\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"amount_allowed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LockInExpiry\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"uint256\"},{\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"Alter_MediatedTransaction\",\"outputs\":[{\"name\":\"_response\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TransfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"AddressToMake\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TrustlessTransactions_Log\",\"outputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_kvp_amount\",\"type\":\"uint256\"},{\"name\":\"_statusModified\",\"type\":\"bool\"},{\"name\":\"_credited\",\"type\":\"bool\"},{\"name\":\"_refunded\",\"type\":\"bool\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MediatorFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txid\",\"type\":\"uint256\"}],\"name\":\"Appoint_Mediator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Trustless_Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mediated_Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"TrustlessTransferStatusModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"MediatedTransferStatusModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TrustlessTransaction_Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newAdministrator\",\"type\":\"address\"}],\"name\":\"AdministratorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_removedAdministrator\",\"type\":\"address\"}],\"name\":\"AdministratorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipChanged\",\"type\":\"event\"}]","ContractName":"KoveredPay","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://381610db30afbe91ae3d2d99f2968c6282d067f80e17051d8a5769f6dd66a64c"}]}