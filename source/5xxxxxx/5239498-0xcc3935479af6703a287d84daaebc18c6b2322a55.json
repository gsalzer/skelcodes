{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract EtherHellHydrant {\r\n    using SafeMath for uint256;\r\n\r\n    event Bid(\r\n        uint _timestamp,\r\n        address _address,\r\n        uint _amount,\r\n        uint _cappedAmount,\r\n        uint _newRound,\r\n        uint _newPot\r\n    );\r\n\r\n    event Winner(\r\n        uint _timestamp,\r\n        address _address,\r\n        uint _totalPayout,\r\n        uint _round,\r\n        uint _leaderTimestamp\r\n    );\r\n\r\n    event EarningsWithdrawal(\r\n        uint _timestamp,\r\n        address _address,\r\n        uint _amount\r\n    );\r\n\r\n    event DividendsWithdrawal(\r\n        uint _timestamp,\r\n        address _address,\r\n        uint _dividendShares,\r\n        uint _amount,\r\n        uint _newTotalDividendShares,\r\n        uint _newDividendFund\r\n    );\r\n\r\n    // Amount of money distributed per payout as a fraction of the current bid\r\n    uint public constant PAYOUT_FRAC_TOP = 10;\r\n    uint public constant PAYOUT_FRAC_BOT = 100;\r\n\r\n    // Amount of time between payouts\r\n    uint public constant PAYOUT_TIME = 5 minutes;\r\n\r\n    // Maximum fraction of the pot that can be won in one round\r\n    uint public constant MAX_PAYOUT_FRAC_TOP = 1;\r\n    uint public constant MAX_PAYOUT_FRAC_BOT = 10;\r\n\r\n    // Minimum bid as a fraction of the pot\r\n    uint public constant MIN_BID_FRAC_TOP = 1;\r\n    uint public constant MIN_BID_FRAC_BOT = 1000;\r\n\r\n    // Maximum bid as a fraction of the pot\r\n    uint public constant MAX_BID_FRAC_TOP = 1;\r\n    uint public constant MAX_BID_FRAC_BOT = 100;\r\n\r\n    // Fraction of each bid put into the dividend fund\r\n    uint public constant DIVIDEND_FUND_FRAC_TOP = 1;\r\n    uint public constant DIVIDEND_FUND_FRAC_BOT = 2;\r\n\r\n    // Owner of the contract\r\n    address owner;\r\n\r\n    // Mapping from addresses to amounts earned\r\n    mapping(address => uint) public earnings;\r\n\r\n    // Mapping from addresses to dividend shares\r\n    mapping(address => uint) public dividendShares;\r\n\r\n    // Total number of dividend shares\r\n    uint public totalDividendShares;\r\n\r\n    // Value of the dividend fund\r\n    uint public dividendFund;\r\n\r\n    // Current round number\r\n    uint public round;\r\n\r\n    // Value of the pot\r\n    uint public pot;\r\n\r\n    // Address of the current leader\r\n    address public leader;\r\n\r\n    // Time at which the most recent bid was placed\r\n    uint public leaderTimestamp;\r\n\r\n    // Amount of the most recent bid, capped at the maximum bid\r\n    uint public leaderBid;\r\n\r\n    function EtherHellHydrant() public payable {\r\n        require(msg.value > 0);\r\n        owner = msg.sender;\r\n        totalDividendShares = 0;\r\n        dividendFund = 0;\r\n        round = 0;\r\n        pot = msg.value;\r\n        leader = owner;\r\n        leaderTimestamp = now;\r\n        leaderBid = 0;\r\n        Bid(now, msg.sender, 0, 0, round, pot);\r\n    }\r\n\r\n    function bid() public payable {\r\n        uint _maxPayout = pot.mul(MAX_PAYOUT_FRAC_TOP).div(MAX_PAYOUT_FRAC_BOT);\r\n        uint _numPayoutIntervals = now.sub(leaderTimestamp).div(PAYOUT_TIME);\r\n        uint _totalPayout = _numPayoutIntervals.mul(leaderBid).mul(PAYOUT_FRAC_TOP).div(PAYOUT_FRAC_BOT);\r\n        if (_totalPayout > _maxPayout) {\r\n            _totalPayout = _maxPayout;\r\n        }\r\n\r\n        uint _bidAmountToDividendFund = msg.value.mul(DIVIDEND_FUND_FRAC_TOP).div(DIVIDEND_FUND_FRAC_BOT);\r\n        uint _bidAmountToPot = msg.value.sub(_bidAmountToDividendFund);\r\n\r\n        uint _minBidForNewPot = pot.sub(_totalPayout).mul(MIN_BID_FRAC_TOP).div(MIN_BID_FRAC_BOT);\r\n\r\n        if (msg.value < _minBidForNewPot) {\r\n            dividendFund = dividendFund.add(_bidAmountToDividendFund);\r\n            pot = pot.add(_bidAmountToPot);\r\n        } else {\r\n            earnings[leader] = earnings[leader].add(_totalPayout);\r\n            pot = pot.sub(_totalPayout);\r\n\r\n            Winner(now, leader, _totalPayout, round, leaderTimestamp);\r\n\r\n            uint _maxBid = pot.mul(MAX_BID_FRAC_TOP).div(MAX_BID_FRAC_BOT);\r\n\r\n            uint _dividendSharePrice;\r\n            if (totalDividendShares == 0) {\r\n                _dividendSharePrice = _maxBid.mul(DIVIDEND_FUND_FRAC_TOP).div(DIVIDEND_FUND_FRAC_BOT);\r\n            } else {\r\n                _dividendSharePrice = dividendFund.div(totalDividendShares);\r\n            }\r\n\r\n            dividendFund = dividendFund.add(_bidAmountToDividendFund);\r\n            pot = pot.add(_bidAmountToPot);\r\n\r\n            if (msg.value > _maxBid) {\r\n                uint _investment = msg.value.sub(_maxBid).mul(DIVIDEND_FUND_FRAC_TOP).div(DIVIDEND_FUND_FRAC_BOT);\r\n                uint _dividendShares = _investment.div(_dividendSharePrice);\r\n                dividendShares[msg.sender] = dividendShares[msg.sender].add(_dividendShares);\r\n                totalDividendShares = totalDividendShares.add(_dividendShares);\r\n            }\r\n\r\n            round++;\r\n            leader = msg.sender;\r\n            leaderTimestamp = now;\r\n            leaderBid = msg.value;\r\n            if (leaderBid > _maxBid) {\r\n                leaderBid = _maxBid;\r\n            }\r\n\r\n            Bid(now, msg.sender, msg.value, leaderBid, round, pot);\r\n        }\r\n    }\r\n\r\n    function withdrawEarnings() public {\r\n        require(earnings[msg.sender] > 0);\r\n        assert(earnings[msg.sender] <= this.balance);\r\n        uint _amount = earnings[msg.sender];\r\n        earnings[msg.sender] = 0;\r\n        msg.sender.transfer(_amount);\r\n        EarningsWithdrawal(now, msg.sender, _amount);\r\n    }\r\n\r\n    function withdrawDividends() public {\r\n        require(dividendShares[msg.sender] > 0);\r\n        uint _dividendShares = dividendShares[msg.sender];\r\n        assert(_dividendShares <= totalDividendShares);\r\n        uint _amount = dividendFund.mul(_dividendShares).div(totalDividendShares);\r\n        assert(_amount <= this.balance);\r\n        dividendShares[msg.sender] = 0;\r\n        totalDividendShares = totalDividendShares.sub(_dividendShares);\r\n        dividendFund = dividendFund.sub(_amount);\r\n        msg.sender.transfer(_amount);\r\n        DividendsWithdrawal(now, msg.sender, _dividendShares, _amount, totalDividendShares, dividendFund);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PAYOUT_FRAC_BOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BID_FRAC_BOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BID_FRAC_BOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PAYOUT_FRAC_BOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BID_FRAC_TOP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PAYOUT_FRAC_TOP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PAYOUT_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BID_FRAC_TOP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DIVIDEND_FUND_FRAC_BOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PAYOUT_FRAC_TOP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leaderBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividendShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DIVIDEND_FUND_FRAC_TOP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leaderTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dividendShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_cappedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newRound\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newPot\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_leaderTimestamp\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EarningsWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_dividendShares\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newTotalDividendShares\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newDividendFund\",\"type\":\"uint256\"}],\"name\":\"DividendsWithdrawal\",\"type\":\"event\"}]","ContractName":"EtherHellHydrant","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6a3860580e219812c877a6fad79c83b2576e2b2dec7f42f399f44820fa2de25d"}]}