{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\ninterface tokenRecipient{\r\n    function receiveApproval(address _from,uint256 _value,address _token,bytes _extraData) external ;\r\n}\r\ncontract DiverseCurrencyCirculationEcosystem{\r\n    //public var\r\n    address public owner;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    uint256 public sellPrice; //grow to wei not eth!\r\n    uint256 public buyPrice;\r\n    bool public sellOpen;\r\n    bool public buyOpen;\r\n    \r\n    //store token data set\r\n    mapping(address => uint256) public balanceOf;\r\n    //transition limite\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    //freeze account \r\n    mapping(address=>bool) public frozenAccount;\r\n    \r\n    //event for transition\r\n    event Transfer(address indexed from,address indexed to , uint256 value);\r\n    //event for allowance\r\n    event Approval(address indexed owner,address indexed spender,uint256 value);\r\n    //event for freeze/unfreeze Account \r\n    event FrozenFunds(address target,bool freeze);\r\n    //TODO event for sell token , do't need it now\r\n    event SellToken(address seller,uint256 sellPrice, uint256 amount,uint256 getEth);\r\n    //TODO event for buy token , do't need it now \r\n    event BuyToken(address buyer,uint256 buyPrice,uint256 amount,uint256 spendEth);\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    //func constructor\r\n    constructor() public {\r\n        owner = 0xc22F305B804a7AD7684eC4BB07A0553BDf4d51c7;\r\n        name = \"DCEGL\";\r\n        symbol = \"DCEGL\";\r\n        decimals = 18;\r\n        totalSupply = 8600000000 * 10 ** uint256(18);\r\n        \r\n        //init totalSupply to map(db)\r\n        balanceOf[owner] = totalSupply;\r\n    }\r\n    \r\n function () public payable {  \r\n     if(msg.sender!=owner){\r\n         _buy();    \r\n     }\r\n }\r\n \r\n    // public functions\r\n    // 1 Transfer tokens \r\n    function transfer(address _to,uint256 _value) public{\r\n        require(!frozenAccount[msg.sender]);\r\n        if(_to == address(this)){\r\n          _sell(msg.sender,_value);\r\n        }else{\r\n            _transfer(msg.sender,_to,_value);\r\n        }\r\n    }\r\n    \r\n    // 2 Transfer Other's tokens ,who had approve some token to me \r\n    function transferFrom(address _from,address _to,uint256 _value) public returns (bool success){\r\n        //validate the allowance \r\n        require(!frozenAccount[_from]&&!frozenAccount[msg.sender]);\r\n        require(_value<=allowance[_from][msg.sender]);\r\n        //do action :sub allowance and do transfer \r\n        allowance[_from][msg.sender] -= _value;\r\n        if(_to == address(this)){\r\n            _sell(_from,_value);\r\n        }else\r\n        {\r\n            _transfer(_from,_to,_value);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    //A is msg.sender or i \r\n    //B is the person who has approve me to use his token or _from \r\n    //C is the receipient or _to\r\n    \r\n    // 3 set allowance for other address,like B approve A(_spender) to use his token\r\n    function approve(address _spender,uint256 _value) public returns (bool success){\r\n        require(!frozenAccount[msg.sender]);\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    // 4 allowance and notify the receipient/spender \r\n    function approveAndCall(address _spender,uint256 _value,bytes _extraData)\r\n    public returns (bool success){\r\n        require(!frozenAccount[msg.sender]);\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if(approve(_spender,_value)){\r\n            spender.receiveApproval(msg.sender,_value,this,_extraData);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    // onlyOwner function \r\n    // 11 freeze or unfreeze account \r\n    function freezeAccount(address target,bool freeze)  onlyOwner public{\r\n        require(target!=owner);\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target,freeze);\r\n    }\r\n    // 12 transfer contract  Ownership to newOwner and transfer all balanceOf oldOwner to newOwner\r\n    function transferOwnership(address newOwner) onlyOwner public{\r\n        _transfer(owner,newOwner,balanceOf[owner]);\r\n        owner = newOwner;\r\n    }\r\n    // 13 set prices for sellPrice or buyPrice\r\n    function setPrices(uint256 newSellPrice,uint256 newBuyPrice) onlyOwner public{\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n    // 14 open/close user to  buy token \r\n    function setBuyOpen(bool newBuyOpen) onlyOwner public{\r\n        require(buyPrice>0);\r\n        buyOpen = newBuyOpen;\r\n    }\r\n    // 15 open/close user to  sell token \r\n    function setSellOpen(bool newSellOpen) onlyOwner public{\r\n        require(sellPrice>0);\r\n        sellOpen = newSellOpen;\r\n    }\r\n    // 16 transfer eth back to owner \r\n    function transferEth(uint256 amount) onlyOwner public{\r\n        msg.sender.transfer(amount*10**uint256(18));\r\n    }\r\n    \r\n    //internal transfer function\r\n // 1 _transfer\r\n    function _transfer(address _from,address _to, uint256 _value) internal {\r\n        //validate input and other internal limites\r\n        require(_to != 0x0);//check to address\r\n        require(balanceOf[_from] >= _value);//check from address has enough balance \r\n        require(balanceOf[_to] + _value >balanceOf[_to]);//after transfer the balance of _to address is ok ,no overflow\r\n        uint256 previousBalances = balanceOf[_from]+balanceOf[_to];//store it for add asset to power the security\r\n        //do transfer:sub from _from address,and add to the _to address\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        //after transfer: emit transfer event,and add asset for security\r\n        emit Transfer(_from,_to,_value);\r\n        assert(balanceOf[_from]+balanceOf[_to] == previousBalances);\r\n    }\r\n // 2 _buy \r\n    function _buy() internal returns (uint256 amount){\r\n        require(buyOpen);\r\n        require(buyPrice>0);\r\n        require(msg.value>0);\r\n        amount = msg.value / buyPrice;                    // calculates the amount\r\n        _transfer(owner,msg.sender,amount);\r\n        emit BuyToken(msg.sender,buyPrice,amount,msg.value);\r\n        return amount;                                    // ends function and returns\r\n    }\r\n    \r\n    // 3 _sell \r\n    function _sell(address _from,uint256 amount) internal returns (uint256 revenue){\r\n        require(sellOpen);\r\n        require(!frozenAccount[_from]);\r\n        require(amount>0);\r\n        require(sellPrice>0);\r\n        require(_from!=owner);\r\n        _transfer(_from,owner,amount);\r\n        revenue = amount * sellPrice;\r\n        _from.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\r\n        emit SellToken(_from,sellPrice,amount,revenue);\r\n        return revenue;                                   // ends function and returns\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSellOpen\",\"type\":\"bool\"}],\"name\":\"setSellOpen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyOpen\",\"type\":\"bool\"}],\"name\":\"setBuyOpen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"getEth\",\"type\":\"uint256\"}],\"name\":\"SellToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"spendEth\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"}]","ContractName":"DiverseCurrencyCirculationEcosystem","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2e10e33fbc32e13bfa92380adac6036ac112a28fef8b3de86d96c4db1f2b454a"}]}