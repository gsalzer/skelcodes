{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract KingOfTheEthill {\r\n  using SafeMath for uint256;  \r\n  address public owner;\r\n  address public king;\r\n  string public kingsMessage;\r\n  uint256 public bidExpireBlockLength = 12;\r\n  uint256 public nextBidExpireBlockLength;\r\n  uint256 public devFeePercent = 1;\r\n  uint256 public rolloverPercent = 5;\r\n  uint256 public lastBidAmount;\r\n  uint256 public lastBidBlock;\r\n  uint256 public currentRoundNumber;\r\n  uint256 public currentBidNumber;\r\n  uint256 public maxMessageChars = 140;\r\n  mapping(uint256 => address) roundToKing;\r\n  mapping(uint256 => uint256) roundToWinnings;\r\n  mapping(uint256 => uint256) roundToFinalBid;\r\n  mapping(uint256 => string) roundToFinalMessage;\r\n\r\n  event NewKing(\r\n    uint256 indexed roundNumber,\r\n    address kingAddress,\r\n    string kingMessage,\r\n    uint256 bidAmount,\r\n    uint256 indexed bidNumber,\r\n    uint256 indexed bidBlockNumber\r\n  );\r\n\r\n  function KingOfTheEthill () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender);\r\n    _;\r\n  }\r\n  \r\n  function setDevFee (uint256 _n) onlyOwner() public {\r\n\t  require(_n >= 0 && _n <= 10);\r\n    devFeePercent = _n;\r\n  }\r\n\r\n  function setRollover (uint256 _n) onlyOwner() public {\r\n\t  require(_n >= 1 && _n <= 30);\r\n    rolloverPercent = _n;\r\n  }\r\n\r\n  function setNextBidExpireBlockLength (uint256 _n) onlyOwner() public {\r\n\t  require(_n >= 10 && _n <= 10000);\r\n    nextBidExpireBlockLength = _n;\r\n  }\r\n\r\n  function setOwner (address _owner) onlyOwner() public {\r\n    owner = _owner;\r\n  }\r\n\r\n  function bid (uint256 _roundNumber, string _message) payable public {\r\n    require(!isContract(msg.sender));\r\n    require(bytes(_message).length <= maxMessageChars);\r\n    require(msg.value > 0);\r\n    \r\n    if (_roundNumber == currentRoundNumber && !roundExpired()) {\r\n      // bid in active round\r\n      require(msg.value > lastBidAmount);\r\n    }else if (_roundNumber == (currentRoundNumber+1) && roundExpired()) {\r\n      // first bid of new round, process old round\r\n      var lastRoundPotBalance = this.balance.sub(msg.value);\r\n      uint256 devFee = lastRoundPotBalance.mul(devFeePercent).div(100);\r\n      owner.transfer(devFee);\r\n      uint256 winnings = lastRoundPotBalance.sub(devFee).mul(100 - rolloverPercent).div(100);\r\n      king.transfer(winnings);\r\n\r\n      // save previous round data\r\n      roundToKing[currentRoundNumber] = king;\r\n      roundToWinnings[currentRoundNumber] = winnings;\r\n      roundToFinalBid[currentRoundNumber] = lastBidAmount;\r\n      roundToFinalMessage[currentRoundNumber] = kingsMessage;\r\n\r\n      currentBidNumber = 0;\r\n      currentRoundNumber++;\r\n\r\n      if (nextBidExpireBlockLength != 0) {\r\n        bidExpireBlockLength = nextBidExpireBlockLength;\r\n        nextBidExpireBlockLength = 0;\r\n      }\r\n    }else {\r\n      require(false);\r\n    }\r\n\r\n    // new king\r\n    king = msg.sender;\r\n    kingsMessage = _message;\r\n    lastBidAmount = msg.value;\r\n    lastBidBlock = block.number;\r\n\r\n    NewKing(currentRoundNumber, king, kingsMessage, lastBidAmount, currentBidNumber, lastBidBlock);\r\n\r\n    currentBidNumber++;\r\n  }\r\n\r\n  function roundExpired() public view returns (bool) {\r\n    return blocksSinceLastBid() >= bidExpireBlockLength;\r\n  }\r\n\r\n  function blocksRemaining() public view returns (uint256) {\r\n    if (roundExpired()) {\r\n      return 0;\r\n    }else {\r\n      return bidExpireBlockLength - blocksSinceLastBid();\r\n    }\r\n  }\r\n\r\n  function blocksSinceLastBid() public view returns (uint256) {\r\n    return block.number - lastBidBlock;\r\n  }\r\n\r\n  function estimateNextPotSeedAmount() public view returns (uint256) {\r\n      return this.balance.mul(100 - devFeePercent).div(100).mul(rolloverPercent).div(100);\r\n  }\r\n\r\n  function getRoundState() public view returns (bool _currentRoundExpired, uint256 _nextRoundPotSeedAmountEstimate, uint256 _roundNumber, uint256 _bidNumber, address _king, string _kingsMessage, uint256 _lastBidAmount, uint256 _blocksRemaining, uint256 _potAmount, uint256 _blockNumber, uint256 _bidExpireBlockLength) {\r\n    _currentRoundExpired = roundExpired();\r\n    _nextRoundPotSeedAmountEstimate = estimateNextPotSeedAmount();\r\n    _roundNumber = currentRoundNumber;\r\n    _bidNumber = currentBidNumber;\r\n    _king = king;\r\n    _kingsMessage = kingsMessage;\r\n    _lastBidAmount = lastBidAmount;\r\n    _blocksRemaining = blocksRemaining();\r\n    _potAmount = this.balance;\r\n    _blockNumber = block.number;\r\n    _bidExpireBlockLength = bidExpireBlockLength;\r\n  }\r\n\r\n  function getPastRound(uint256 _roundNum) public view returns (address _kingAddress, uint256 _finalBid, uint256 _kingWinnings, string _finalMessage) {\r\n    _kingAddress = roundToKing[_roundNum]; \r\n    _kingWinnings = roundToWinnings[_roundNum];\r\n    _finalBid = roundToFinalBid[_roundNum];\r\n    _finalMessage = roundToFinalMessage[_roundNum];\r\n  }\r\n\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"blocksSinceLastBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMessageChars\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundNumber\",\"type\":\"uint256\"},{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextBidExpireBlockLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"setDevFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bidExpireBlockLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRoundState\",\"outputs\":[{\"name\":\"_currentRoundExpired\",\"type\":\"bool\"},{\"name\":\"_nextRoundPotSeedAmountEstimate\",\"type\":\"uint256\"},{\"name\":\"_roundNumber\",\"type\":\"uint256\"},{\"name\":\"_bidNumber\",\"type\":\"uint256\"},{\"name\":\"_king\",\"type\":\"address\"},{\"name\":\"_kingsMessage\",\"type\":\"string\"},{\"name\":\"_lastBidAmount\",\"type\":\"uint256\"},{\"name\":\"_blocksRemaining\",\"type\":\"uint256\"},{\"name\":\"_potAmount\",\"type\":\"uint256\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"name\":\"_bidExpireBlockLength\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBidNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"estimateNextPotSeedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"setRollover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBidBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rolloverPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoundNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kingsMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundNum\",\"type\":\"uint256\"}],\"name\":\"getPastRound\",\"outputs\":[{\"name\":\"_kingAddress\",\"type\":\"address\"},{\"name\":\"_finalBid\",\"type\":\"uint256\"},{\"name\":\"_kingWinnings\",\"type\":\"uint256\"},{\"name\":\"_finalMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"king\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"setNextBidExpireBlockLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBidAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"roundNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"kingAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"kingMessage\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"bidNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"bidBlockNumber\",\"type\":\"uint256\"}],\"name\":\"NewKing\",\"type\":\"event\"}]","ContractName":"KingOfTheEthill","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f9c9b20173f212df97a3520b456f6283c069c16ae614edf5a8afb5798b9d8a20"}]}