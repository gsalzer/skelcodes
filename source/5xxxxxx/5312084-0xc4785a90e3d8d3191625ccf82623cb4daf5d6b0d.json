{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n/**\r\n* @title ICO SALE CONTRACT\r\n* @dev ERC-20 Token Standard Compliant\r\n*/\r\n\r\n/**\r\n* @title SafeMath by OpenZeppelin\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\n/**\r\n* @title Fiat currency contract\r\n* @dev This contract will return the value of 0.01$ ETH in wei\r\n*/\r\ncontract FiatContract {\r\n \r\n  function EUR(uint _id) constant public returns (uint256);\r\n\r\n}\r\n\r\n/**\r\n* @title DateTime contract\r\n* @dev This contract will return the unix value of any date\r\n*/\r\ncontract DateTimeAPI {\r\n        \r\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) constant public returns (uint timestamp);\r\n\r\n}\r\n\r\n/**\r\n* @title ERC20 Token interface\r\n*/\r\ncontract token {\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n}\r\n\r\n/**\r\n* @title NETRico sale main contract\r\n*/\r\ncontract NETRico {\r\n\r\n    FiatContract price = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591); // MAINNET ADDRESS\r\n\r\n    DateTimeAPI dateTimeContract = DateTimeAPI(0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce);//Main\r\n\r\n    using SafeMath for uint256;\r\n    //This sale have 5 stages\r\n    enum State {\r\n        Stage1,\r\n        Stage2,\r\n        Stage3,\r\n        Stage4,\r\n        Successful\r\n    }\r\n    //public variables\r\n    State public state = State.Stage1; //Set initial stage\r\n    uint256 public startTime = dateTimeContract.toTimestamp(2018,4,1,0); //From Apr 1 2018 00:00\r\n    uint256 public deadline = dateTimeContract.toTimestamp(2019,3,27,0); //Stop Mar 27 2019 00:00\r\n    uint256 public totalRaised; //eth in wei\r\n    uint256 public totalDistributed; //tokens distributed\r\n    uint256 public completedAt; //Time stamp when the sale finish\r\n    token public tokenReward; //Address of the valid token used as reward\r\n    address public creator; //Address of the contract deployer\r\n    string public campaignUrl; //Web site of the campaign\r\n    string public version = '2';\r\n\r\n    //events for log\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(\r\n        address _creator,\r\n        string _url);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n    /**\r\n    * @notice NETRico constructor\r\n    * @param _campaignUrl is the ICO _url\r\n    * @param _addressOfTokenUsedAsReward is the token totalDistributed\r\n    */\r\n    function NETRico (string _campaignUrl, token _addressOfTokenUsedAsReward) public {\r\n        creator = 0xB987B463c7573f0B7b6eD7cc8E5Fab9042272065;\r\n        //creator = msg.sender;\r\n        campaignUrl = _campaignUrl;\r\n        tokenReward = token(_addressOfTokenUsedAsReward);\r\n\r\n        emit LogFunderInitialized(\r\n            creator,\r\n            campaignUrl\r\n            );\r\n    }\r\n\r\n    /**\r\n    * @notice contribution handler\r\n    */\r\n    function contribute() public notFinished payable {\r\n        require(now >= startTime);\r\n\r\n        uint256 tokenBought; //Variable to store amount of tokens bought\r\n        uint256 tokenPrice = price.EUR(0); //1 cent value in wei\r\n\r\n        totalRaised = totalRaised.add(msg.value); //Save the total eth totalRaised (in wei)\r\n\r\n        tokenPrice = tokenPrice.mul(2); //0.02$ EUR value in wei \r\n        tokenPrice = tokenPrice.div(10 ** 8); //Change base 18 to 10\r\n\r\n        tokenBought = msg.value.div(tokenPrice); //Base 18/ Base 10 = Base 8\r\n        tokenBought = tokenBought.mul(10 ** 10); //Base 8 to Base 18\r\n\r\n        require(tokenBought >= 100 * 10 ** 18); //Minimum 100 base tokens \r\n        \r\n        //Bonus calculation\r\n        if (state == State.Stage1){\r\n            tokenBought = tokenBought.mul(2); //+100%\r\n        } else if (state == State.Stage2){\r\n            tokenBought = tokenBought.mul(175);\r\n            tokenBought = tokenBought.div(100); //+75%\r\n        } else if (state == State.Stage3){\r\n            tokenBought = tokenBought.mul(15);\r\n            tokenBought = tokenBought.div(10); //+50%\r\n        } else if (state == State.Stage4){\r\n            tokenBought = tokenBought.mul(125);\r\n            tokenBought = tokenBought.div(100); //+25%\r\n        }\r\n\r\n        totalDistributed = totalDistributed.add(tokenBought); //Save to total tokens distributed\r\n        \r\n        tokenReward.transfer(msg.sender,tokenBought); //Send Tokens\r\n        \r\n        creator.transfer(msg.value); // Send ETH to creator\r\n        emit LogBeneficiaryPaid(creator);\r\n        \r\n        //LOGS\r\n        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        emit  LogContributorsPayout(msg.sender,tokenBought);\r\n\r\n        checkIfFundingCompleteOrExpired();\r\n    }\r\n\r\n    /**\r\n    * @notice check status\r\n    */\r\n    function checkIfFundingCompleteOrExpired() public {\r\n\r\n        if(now > deadline && state != State.Successful){\r\n\r\n            state = State.Successful; //Sale becomes Successful\r\n            completedAt = now; //ICO finished\r\n\r\n            emit LogFundingSuccessful(totalRaised); //we log the finish\r\n\r\n            finished();\r\n        } else if(state == State.Stage3 && now > dateTimeContract.toTimestamp(2018,12,27,0)){\r\n\r\n            state = State.Stage4;\r\n            \r\n        } else if(state == State.Stage2 && now > dateTimeContract.toTimestamp(2018,9,28,0)){\r\n\r\n            state = State.Stage3;\r\n            \r\n        } else if(state == State.Stage1 && now > dateTimeContract.toTimestamp(2018,6,30,0)){\r\n\r\n            state = State.Stage2;\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Function for closure handle\r\n    */\r\n    function finished() public { //When finished eth are transfered to creator\r\n        require(state == State.Successful); //Only when sale finish\r\n        \r\n        uint256 remainder = tokenReward.balanceOf(this); //Remaining tokens on contract\r\n        //Funds send to creator if any\r\n        if(address(this).balance > 0) {\r\n            creator.transfer(address(this).balance);\r\n            emit LogBeneficiaryPaid(creator);\r\n        }\r\n \r\n        tokenReward.transfer(creator,remainder); //remainder tokens send to creator\r\n        emit LogContributorsPayout(creator, remainder);\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice Function to claim any token stuck on contract\r\n    */\r\n    function claimTokens(token _address) public{\r\n        require(state == State.Successful); //Only when sale finish\r\n        require(msg.sender == creator);\r\n\r\n        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\r\n        _address.transfer(creator,remainder); //Transfer tokens to creator\r\n        \r\n    }\r\n\r\n    /**\r\n    * @notice Function to handle eth transfers\r\n    * @dev BEWARE: if a call to this functions doesn't have\r\n    * enought gas, transaction could not be finished\r\n    */\r\n    function() public payable {\r\n        contribute();\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaignUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_campaignUrl\",\"type\":\"string\"},{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"}]","ContractName":"NETRico","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000d788ed3a3437801c3d1b15cf7a756dc76870e5f10000000000000000000000000000000000000000000000000000000000000014687474703a2f2f6e657474657269756d2e636f6d000000000000000000000000","Library":"","SwarmSource":"bzzr://9b853d100cb7331a3205fc70bd617b2e5e19786fb39f8fde755a1c35c9b559a1"}]}