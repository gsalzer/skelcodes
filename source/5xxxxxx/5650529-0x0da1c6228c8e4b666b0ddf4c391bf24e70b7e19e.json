{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract SafeMath {\r\n\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwner(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Lockable is Ownable {\r\n    bool public contractLocked = false;\r\n\r\n    modifier notLocked() {\r\n        require(!contractLocked);\r\n        _;\r\n    }\r\n\r\n    function lockContract() public onlyOwner {\r\n        contractLocked = true;\r\n    }\r\n\r\n    function unlockContract() public onlyOwner {\r\n        contractLocked = false;\r\n    }\r\n}\r\n\r\ncontract FeeCalculator is Ownable, SafeMath {\r\n\r\n    uint public feeNumerator = 0;\r\n\r\n    uint public feeDenominator = 0;\r\n\r\n    uint public minFee = 0;\r\n\r\n    uint public maxFee = 0;\r\n\r\n    function setFee(uint _feeNumerator, uint _feeDenominator, uint _minFee, uint _maxFee) public onlyOwner {\r\n        feeNumerator = _feeNumerator;\r\n        feeDenominator = _feeDenominator;\r\n        minFee = _minFee;\r\n        maxFee = _maxFee;\r\n    }\r\n\r\n    function calculateFee(uint value) public view returns (uint requiredFee) {\r\n        if (feeNumerator == 0 || feeDenominator == 0) return 0;\r\n\r\n        uint fee = safeDiv(safeMul(value, feeNumerator), feeDenominator);\r\n\r\n        if (fee < minFee) return minFee;\r\n\r\n        if (fee > maxFee) return maxFee;\r\n\r\n        return fee;\r\n    }\r\n\r\n    function subtractFee(uint value) internal returns (uint newValue);\r\n}\r\n\r\ncontract EIP20Interface {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool success);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool success);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Mintable is Ownable {\r\n    mapping(address => bool) public minters;\r\n\r\n    modifier onlyMinter {\r\n        require(minters[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    function Mintable() public {\r\n        adjustMinter(msg.sender, true);\r\n    }\r\n\r\n    function adjustMinter(address minter, bool canMint) public onlyOwner {\r\n        minters[minter] = canMint;\r\n    }\r\n\r\n    function mint(address to, uint256 value) public;\r\n\r\n}\r\n\r\ncontract Token is EIP20Interface, Ownable, SafeMath, Mintable, Lockable, FeeCalculator {\r\n\r\n    mapping(address => uint256) public balances;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n    mapping(address => bool) frozenAddresses;\r\n\r\n    string public name;\r\n\r\n    uint8 public decimals;\r\n\r\n    string public symbol;\r\n\r\n    bool public isBurnable;\r\n\r\n    bool public canAnyoneBurn;\r\n\r\n    modifier notFrozen(address target) {\r\n        require(!frozenAddresses[target]);\r\n        _;\r\n    }\r\n\r\n    event AddressFroze(address target, bool isFrozen);\r\n\r\n    function Token(string _name, uint8 _decimals, string _symbol) public {\r\n        name = _name;\r\n        decimals = _decimals;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) notLocked notFrozen(msg.sender) public returns (bool success) {\r\n        return transfer(msg.sender, to, value);\r\n    }\r\n\r\n    function transfer(address from, address to, uint256 value) internal returns (bool success) {\r\n        balances[from] = safeSub(balances[from], value);\r\n        value = subtractFee(value);\r\n        balances[to] = safeAdd(balances[to], value);\r\n\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) notLocked notFrozen(from) public returns (bool success) {\r\n        uint256 allowance = allowed[from][msg.sender];\r\n        balances[from] = safeSub(balances[from], value);\r\n        allowed[from][msg.sender] = safeSub(allowance, value);\r\n        value = subtractFee(value);\r\n        balances[to] = safeAdd(balances[to], value);\r\n\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance) {\r\n        return balances[owner];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) notLocked public returns (bool success) {\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256 remaining) {\r\n        return allowed[owner][spender];\r\n    }\r\n\r\n    function freezeAddress(address target, bool freeze) onlyOwner public {\r\n        if (freeze) {\r\n            frozenAddresses[target] = true;\r\n        } else {\r\n            delete frozenAddresses[target];\r\n        }\r\n        emit AddressFroze(target, freeze);\r\n    }\r\n\r\n    function isAddressFrozen(address target) public view returns (bool frozen){\r\n        return frozenAddresses[target];\r\n    }\r\n\r\n    function mint(address to, uint256 value) public onlyMinter {\r\n        totalSupply = safeAdd(totalSupply, value);\r\n        balances[to] = safeAdd(balances[to], value);\r\n        emit Transfer(0x0, to, value);\r\n    }\r\n\r\n    function subtractFee(uint value) internal returns (uint newValue) {\r\n        uint feeToTake = calculateFee(value);\r\n\r\n        if (feeToTake == 0) return value;\r\n\r\n        balances[this] = safeAdd(balances[this], feeToTake);\r\n\r\n        return value - feeToTake;\r\n    }\r\n\r\n    function withdrawFees(address to) onlyOwner public returns (bool success) {\r\n        return transfer(this, to, balances[this]);\r\n    }\r\n\r\n    function setBurnPolicy(bool _isBurnable, bool _canAnyoneBurn) public {\r\n        isBurnable = _isBurnable;\r\n        canAnyoneBurn = _canAnyoneBurn;\r\n    }\r\n\r\n    function burn(uint256 value) public returns (bool success) {\r\n        require(isBurnable);\r\n\r\n        if (!canAnyoneBurn && msg.sender != owner) {\r\n            return false;\r\n        }\r\n\r\n        balances[msg.sender] = safeSub(balances[msg.sender], value);\r\n        totalSupply = totalSupply - value;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isBurnable\",\"type\":\"bool\"},{\"name\":\"_canAnyoneBurn\",\"type\":\"bool\"}],\"name\":\"setBurnPolicy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"},{\"name\":\"canMint\",\"type\":\"bool\"}],\"name\":\"adjustMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBurnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isAddressFrozen\",\"outputs\":[{\"name\":\"frozen\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"name\":\"requiredFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeNumerator\",\"type\":\"uint256\"},{\"name\":\"_feeDenominator\",\"type\":\"uint256\"},{\"name\":\"_minFee\",\"type\":\"uint256\"},{\"name\":\"_maxFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canAnyoneBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeNumerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isFrozen\",\"type\":\"bool\"}],\"name\":\"AddressFroze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.25-nightly.2018.5.18+commit.4d7b092c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000b426f6c616d61204575726f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044555524200000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://686595cc88ee7f65ddba1e9153d4ac0bd0499e9aed405012dbc978d151e03306"}]}