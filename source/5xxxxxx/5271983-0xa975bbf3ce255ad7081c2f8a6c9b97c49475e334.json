{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        require(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title BurnableCADVToken interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract BurnableCADVToken is ERC20 {\r\n\r\n    uint8 public decimals = 18;\r\n    string public name;\r\n    string public symbol;\r\n    \r\n    /**\r\n     * @dev set the amount of tokens that an owner allowed to a spender.\r\n     *  \r\n     * This function is disabled because using it is risky, so a revert()\r\n     * is always called as the first line of code.\r\n     * Instead of this function, use increaseApproval or decreaseApproval.\r\n     * \r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to increase the allowance by.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_spender != _spender);\r\n        require(_value != _value);\r\n        revert();\r\n    }\r\n    \r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool);\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool);\r\n    function multipleTransfer(address[] _tos, uint256 _value) public returns (bool);\r\n    function burn(uint256 _value) public;\r\n    event Burn(address indexed burner, uint256 value);\r\n    \r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    \r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    \r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    \r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n}\r\n\r\n\r\n/**\r\n * @title Controlled CrowdSale\r\n */\r\ncontract ControlledCrowdSale {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) public deposited;\r\n    mapping (address => bool) public unboundedLimit;\r\n    \r\n    uint256 public maxPerUser = 5 ether;\r\n    uint256 public minPerUser = 1 ether / 1000;\r\n    \r\n    \r\n    modifier controlledDonation() {\r\n        require(msg.value >= minPerUser);\r\n        deposited[msg.sender] = deposited[msg.sender].add(msg.value);\r\n        require(maxPerUser >= deposited[msg.sender] || unboundedLimit[msg.sender]);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title CoinAdvisorCrowdSale\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it to a beneficiary if crowdsale is successful.\r\n */\r\ncontract CoinAdvisorCrowdSale is Ownable, ControlledCrowdSale {\r\n    using SafeMath for uint256;\r\n    enum State { Active, Refunding, Completed }\r\n    \r\n    struct Phase {\r\n        uint expireDate;\r\n        uint256 maxAmount;\r\n        bool maxAmountEnabled;\r\n        uint rate;\r\n        bool locked;\r\n    }\r\n\r\n//=== properties =============================================\r\n    Phase[] public phases;\r\n    uint256 lastActivePhase;\r\n    State state;\r\n    uint256 public goal;\r\n    address public beneficiary;\r\n    BurnableCADVToken public token;\r\n    uint256 public refunduingStartDate;\r\n    \r\n//=== events ==================================================\r\n    event CrowdSaleClosed(string message, address crowdSaleClosed);\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n    event CrowdSaleStarted(string message, address crowdSaleStarted);\r\n\r\n//=== constructor =============================================\r\n    function CoinAdvisorCrowdSale(address _beneficiary, address _token, uint256 _goal, uint256 _refunduingStartDate) public {\r\n        require(_beneficiary != address(0));\r\n        beneficiary = _beneficiary;\r\n        token = BurnableCADVToken(_token);\r\n        phases.push(Phase(0, 0, false, 0, false));\r\n        lastActivePhase = 0;\r\n        goal = _goal * 1 ether;\r\n        state = State.Active;\r\n        refunduingStartDate = _refunduingStartDate;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     *\r\n     */ \r\n    function isPhaseValid(uint256 index) public view returns (bool) {\r\n        return phases[index].expireDate >= now && (!phases[index].maxAmountEnabled || phases[index].maxAmount > minPerUser);\r\n    } \r\n    \r\n    \r\n    /**\r\n     * \r\n     *\r\n     */\r\n    function currentPhaseId() public view returns (uint256) {\r\n        uint256 index = lastActivePhase;\r\n        while(index < phases.length-1 && !isPhaseValid(index)) {\r\n            index = index +1;\r\n        }\r\n        return index;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * \r\n     *\r\n     */\r\n    function addPhases(uint expireDate, uint256 maxAmount, bool maxAmountEnabled, uint rate, bool locked) onlyOwner public {\r\n        phases.push(Phase(expireDate, maxAmount, maxAmountEnabled, rate, locked));\r\n    }\r\n    \r\n    \r\n    /**\r\n     * \r\n     *\r\n     */\r\n    function resetPhases(uint expireDate, uint256 maxAmount, bool maxAmountEnabled, uint rate, bool locked) onlyOwner public {\r\n        require(!phases[currentPhaseId()].locked);\r\n        phases.length = 0;\r\n        lastActivePhase = 0;\r\n        addPhases(expireDate, maxAmount, maxAmountEnabled, rate, locked);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * \r\n     *\r\n     */\r\n    function () controlledDonation public payable {\r\n        require(state != State.Refunding);\r\n        uint256 phaseId = currentPhaseId();\r\n        require(isPhaseValid(phaseId));\r\n        \r\n        if (phases[phaseId].maxAmountEnabled) {\r\n            if (phases[phaseId].maxAmount >= msg.value) {\r\n                phases[phaseId].maxAmount = phases[phaseId].maxAmount.sub(msg.value);\r\n            } else {\r\n                phases[phaseId].maxAmount = 0;\r\n                //throw;\r\n            }\r\n        }\r\n        \r\n        require(token.transfer(msg.sender, msg.value.mul(phases[phaseId].rate)));\r\n        lastActivePhase = phaseId;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * \r\n     *\r\n     */\r\n    function retrieveFounds() onlyOwner public {\r\n        require(state == State.Completed || (state == State.Active && this.balance >= goal));\r\n        state = State.Completed;\r\n        beneficiary.transfer(this.balance);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * \r\n     *\r\n     */\r\n    function startRefunding() public {\r\n        require(state == State.Active);\r\n        require(this.balance < goal);\r\n        require(refunduingStartDate < now);\r\n        state = State.Refunding;\r\n        RefundsEnabled();\r\n    }\r\n    \r\n    \r\n    /**\r\n     * \r\n     *\r\n     */\r\n    function forceRefunding() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        RefundsEnabled();\r\n    }\r\n    \r\n    \r\n    /**\r\n     * \r\n     *\r\n     */\r\n    function refund(address investor) public {\r\n        require(state == State.Refunding);\r\n        require(deposited[investor] > 0);\r\n        \r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        Refunded(investor, depositedValue);\r\n    }\r\n    \r\n    /**\r\n     * \r\n     *\r\n     */\r\n    function burnCadvsLeftInRefunding() onlyOwner public {\r\n        require(state == State.Refunding);\r\n        require(token.balanceOf(this) > 0);\r\n        token.burn(token.balanceOf(this));\r\n    }\r\n    \r\n    /**\r\n     * \r\n     *\r\n     */\r\n    function gameOver() onlyOwner public {\r\n        require(!isPhaseValid(currentPhaseId()));\r\n        require(state == State.Completed || (state == State.Active && this.balance >= goal));\r\n        token.burn(token.balanceOf(this));\r\n        selfdestruct(beneficiary);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * \r\n     *\r\n     */\r\n    function setUnboundedLimit(address _investor, bool _state) onlyOwner public {\r\n        require(_investor != address(0));\r\n        unboundedLimit[_investor] = _state;\r\n    }\r\n\r\n    \r\n    function currentState() public view returns (string) {\r\n        if (state == State.Active) {\r\n            return \"Active\";\r\n        }\r\n        if (state == State.Completed) {\r\n            return \"Completed\";\r\n        }\r\n        if (state == State.Refunding) {\r\n            return \"Refunding\";\r\n        }\r\n    }\r\n    \r\n    \r\n    function tokensOnSale() public view returns (uint256) {\r\n        uint256 i = currentPhaseId();\r\n        if (isPhaseValid(i)) {\r\n            return phases[i].maxAmountEnabled ? phases[i].maxAmount : token.balanceOf(this);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxPerUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refunduingStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phases\",\"outputs\":[{\"name\":\"expireDate\",\"type\":\"uint256\"},{\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"name\":\"maxAmountEnabled\",\"type\":\"bool\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"locked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startRefunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPhaseId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPerUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnCadvsLeftInRefunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isPhaseValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setUnboundedLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"expireDate\",\"type\":\"uint256\"},{\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"name\":\"maxAmountEnabled\",\"type\":\"bool\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"addPhases\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceRefunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"gameOver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"expireDate\",\"type\":\"uint256\"},{\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"name\":\"maxAmountEnabled\",\"type\":\"bool\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"resetPhases\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"retrieveFounds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unboundedLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_goal\",\"type\":\"uint256\"},{\"name\":\"_refunduingStartDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"crowdSaleClosed\",\"type\":\"address\"}],\"name\":\"CrowdSaleClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"crowdSaleStarted\",\"type\":\"address\"}],\"name\":\"CrowdSaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CoinAdvisorCrowdSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008ca057b8f305cac584e3564f4281b69d601ef87c000000000000000000000000aae1b51b120f384d5749b3f36260c543e49db665000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000000000000000000000000000000000005b37fd60","Library":"","SwarmSource":"bzzr://b4dd2a75a4e7e700cbb3890bf22cc4df8c7ef91d386b2b680ba3214a62b61d0e"}]}