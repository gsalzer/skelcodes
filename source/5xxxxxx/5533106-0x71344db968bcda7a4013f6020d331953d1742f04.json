{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary MathUtils {\r\n    using SafeMath for uint256;\r\n\r\n    // Divisor used for representing percentages\r\n    uint256 public constant PERC_DIVISOR = 1000000;\r\n\r\n    /*\r\n     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\r\n     * @param _amount Amount that is supposed to be a percentage\r\n     */\r\n    function validPerc(uint256 _amount) internal pure returns (bool) {\r\n        return _amount <= PERC_DIVISOR;\r\n    }\r\n\r\n    /*\r\n     * @dev Compute percentage of a value with the percentage represented by a fraction\r\n     * @param _amount Amount to take the percentage of\r\n     * @param _fracNum Numerator of fraction representing the percentage\r\n     * @param _fracDenom Denominator of fraction representing the percentage\r\n     */\r\n    function percOf(uint256 _amount, uint256 _fracNum, uint256 _fracDenom) internal pure returns (uint256) {\r\n        return _amount.mul(percPoints(_fracNum, _fracDenom)).div(PERC_DIVISOR);\r\n    }\r\n\r\n    /*\r\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\r\n     * @param _amount Amount to take the percentage of\r\n     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\r\n     */\r\n    function percOf(uint256 _amount, uint256 _fracNum) internal pure returns (uint256) {\r\n        return _amount.mul(_fracNum).div(PERC_DIVISOR);\r\n    }\r\n\r\n    /*\r\n     * @dev Compute percentage representation of a fraction\r\n     * @param _fracNum Numerator of fraction represeting the percentage\r\n     * @param _fracDenom Denominator of fraction represeting the percentage\r\n     */\r\n    function percPoints(uint256 _fracNum, uint256 _fracDenom) internal pure returns (uint256) {\r\n        return _fracNum.mul(PERC_DIVISOR).div(_fracDenom);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\ncontract IController is Pausable {\r\n    event SetContractInfo(bytes32 id, address contractAddress, bytes20 gitCommitHash);\r\n\r\n    function setContractInfo(bytes32 _id, address _contractAddress, bytes20 _gitCommitHash) external;\r\n    function updateController(bytes32 _id, address _controller) external;\r\n    function getContract(bytes32 _id) public view returns (address);\r\n}\r\n\r\ncontract IManager {\r\n    event SetController(address controller);\r\n    event ParameterUpdate(string param);\r\n\r\n    function setController(address _controller) external;\r\n}\r\n\r\ncontract Manager is IManager {\r\n    // Controller that contract is registered with\r\n    IController public controller;\r\n\r\n    // Check if sender is controller\r\n    modifier onlyController() {\r\n        require(msg.sender == address(controller));\r\n        _;\r\n    }\r\n\r\n    // Check if sender is controller owner\r\n    modifier onlyControllerOwner() {\r\n        require(msg.sender == controller.owner());\r\n        _;\r\n    }\r\n\r\n    // Check if controller is not paused\r\n    modifier whenSystemNotPaused() {\r\n        require(!controller.paused());\r\n        _;\r\n    }\r\n\r\n    // Check if controller is paused\r\n    modifier whenSystemPaused() {\r\n        require(controller.paused());\r\n        _;\r\n    }\r\n\r\n    function Manager(address _controller) public {\r\n        controller = IController(_controller);\r\n    }\r\n\r\n    /*\r\n     * @dev Set controller. Only callable by current controller\r\n     * @param _controller Controller contract address\r\n     */\r\n    function setController(address _controller) external onlyController {\r\n        controller = IController(_controller);\r\n\r\n        SetController(_controller);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ManagerProxyTarget\r\n * @dev The base contract that target contracts used by a proxy contract should inherit from\r\n * Note: Both the target contract and the proxy contract (implemented as ManagerProxy) MUST inherit from ManagerProxyTarget in order to guarantee\r\n * that both contracts have the same storage layout. Differing storage layouts in a proxy contract and target contract can\r\n * potentially break the delegate proxy upgradeability mechanism\r\n */\r\ncontract ManagerProxyTarget is Manager {\r\n    // Used to look up target contract address in controller's registry\r\n    bytes32 public targetContractId;\r\n}\r\n\r\n/**\r\n * @title Minter interface\r\n */\r\ncontract IMinter {\r\n    // Events\r\n    event SetCurrentRewardTokens(uint256 currentMintableTokens, uint256 currentInflation);\r\n\r\n    // External functions\r\n    function createReward(uint256 _fracNum, uint256 _fracDenom) external returns (uint256);\r\n    function trustedTransferTokens(address _to, uint256 _amount) external;\r\n    function trustedBurnTokens(uint256 _amount) external;\r\n    function trustedWithdrawETH(address _to, uint256 _amount) external;\r\n    function depositETH() external payable returns (bool);\r\n    function setCurrentRewardTokens() external;\r\n\r\n    // Public functions\r\n    function getController() public view returns (IController);\r\n}\r\n\r\n/*\r\n * @title Interface for BondingManager\r\n */\r\ncontract IBondingManager {\r\n    event TranscoderUpdate(address indexed transcoder, uint256 pendingRewardCut, uint256 pendingFeeShare, uint256 pendingPricePerSegment, bool registered);\r\n    event TranscoderEvicted(address indexed transcoder);\r\n    event TranscoderResigned(address indexed transcoder);\r\n    event TranscoderSlashed(address indexed transcoder, address finder, uint256 penalty, uint256 finderReward);\r\n    event Reward(address indexed transcoder, uint256 amount);\r\n    event Bond(address indexed delegate, address indexed delegator);\r\n    event Unbond(address indexed delegate, address indexed delegator);\r\n    event WithdrawStake(address indexed delegator);\r\n    event WithdrawFees(address indexed delegator);\r\n\r\n    // External functions\r\n    function setActiveTranscoders() external;\r\n    function updateTranscoderWithFees(address _transcoder, uint256 _fees, uint256 _round) external;\r\n    function slashTranscoder(address _transcoder, address _finder, uint256 _slashAmount, uint256 _finderFee) external;\r\n    function electActiveTranscoder(uint256 _maxPricePerSegment, bytes32 _blockHash, uint256 _round) external view returns (address);\r\n\r\n    // Public functions\r\n    function transcoderTotalStake(address _transcoder) public view returns (uint256);\r\n    function activeTranscoderTotalStake(address _transcoder, uint256 _round) public view returns (uint256);\r\n    function isRegisteredTranscoder(address _transcoder) public view returns (bool);\r\n    function getTotalBonded() public view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title RoundsManager interface\r\n */\r\ncontract IRoundsManager {\r\n    // Events\r\n    event NewRound(uint256 round);\r\n\r\n    // External functions\r\n    function initializeRound() external;\r\n\r\n    // Public functions\r\n    function blockNum() public view returns (uint256);\r\n    function blockHash(uint256 _block) public view returns (bytes32);\r\n    function currentRound() public view returns (uint256);\r\n    function currentRoundStartBlock() public view returns (uint256);\r\n    function currentRoundInitialized() public view returns (bool);\r\n    function currentRoundLocked() public view returns (bool);\r\n}\r\n\r\n/**\r\n * @title RoundsManager\r\n * @dev Manages round progression and other blockchain time related operations of the Livepeer protocol\r\n */\r\ncontract RoundsManager is ManagerProxyTarget, IRoundsManager {\r\n    using SafeMath for uint256;\r\n\r\n    // Round length in blocks\r\n    uint256 public roundLength;\r\n    // Lock period of a round as a % of round length\r\n    // Transcoders cannot join the transcoder pool or change their rates during the lock period at the end of a round\r\n    // The lock period provides delegators time to review transcoder information without changes\r\n    // # of blocks in the lock period = (roundLength * roundLockAmount) / PERC_DIVISOR\r\n    uint256 public roundLockAmount;\r\n    // Last initialized round. After first round, this is the last round during which initializeRound() was called\r\n    uint256 public lastInitializedRound;\r\n    // Round in which roundLength was last updated\r\n    uint256 public lastRoundLengthUpdateRound;\r\n    // Start block of the round in which roundLength was last updated\r\n    uint256 public lastRoundLengthUpdateStartBlock;\r\n\r\n    /**\r\n     * @dev RoundsManager constructor. Only invokes constructor of base Manager contract with provided Controller address\r\n     * @param _controller Address of Controller that this contract will be registered with\r\n     */\r\n    function RoundsManager(address _controller) public Manager(_controller) {}\r\n\r\n    /**\r\n     * @dev Set round length. Only callable by the controller owner\r\n     * @param _roundLength Round length in blocks\r\n     */\r\n    function setRoundLength(uint256 _roundLength) external onlyControllerOwner {\r\n        // Round length cannot be 0\r\n        require(_roundLength > 0);\r\n\r\n        if (roundLength == 0) {\r\n            // If first time initializing roundLength, set roundLength before\r\n            // lastRoundLengthUpdateRound and lastRoundLengthUpdateStartBlock\r\n            roundLength = _roundLength;\r\n            lastRoundLengthUpdateRound = currentRound();\r\n            lastRoundLengthUpdateStartBlock = currentRoundStartBlock();\r\n        } else {\r\n            // If updating roundLength, set roundLength after\r\n            // lastRoundLengthUpdateRound and lastRoundLengthUpdateStartBlock\r\n            lastRoundLengthUpdateRound = currentRound();\r\n            lastRoundLengthUpdateStartBlock = currentRoundStartBlock();\r\n            roundLength = _roundLength;\r\n        }\r\n\r\n        ParameterUpdate(\"roundLength\");\r\n    }\r\n\r\n    /**\r\n     * @dev Set round lock amount. Only callable by the controller owner\r\n     * @param _roundLockAmount Round lock amount as a % of the number of blocks in a round\r\n     */\r\n    function setRoundLockAmount(uint256 _roundLockAmount) external onlyControllerOwner {\r\n        // Must be a valid percentage\r\n        require(MathUtils.validPerc(_roundLockAmount));\r\n\r\n        roundLockAmount = _roundLockAmount;\r\n\r\n        ParameterUpdate(\"roundLockAmount\");\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize the current round. Called once at the start of any round\r\n     */\r\n    function initializeRound() external whenSystemNotPaused {\r\n        uint256 currRound = currentRound();\r\n\r\n        // Check if already called for the current round\r\n        require(lastInitializedRound < currRound);\r\n\r\n        // Set current round as initialized\r\n        lastInitializedRound = currRound;\r\n        // Set active transcoders for the round\r\n        bondingManager().setActiveTranscoders();\r\n        // Set mintable rewards for the round\r\n        minter().setCurrentRewardTokens();\r\n\r\n        NewRound(currRound);\r\n    }\r\n\r\n    /**\r\n     * @dev Return current block number\r\n     */\r\n    function blockNum() public view returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n     * @dev Return blockhash for a block\r\n     */\r\n    function blockHash(uint256 _block) public view returns (bytes32) {\r\n        uint256 currentBlock = blockNum();\r\n        // Can only retrieve past block hashes\r\n        require(_block < currentBlock);\r\n        // Can only retrieve hashes for last 256 blocks\r\n        require(currentBlock < 256 || _block >= currentBlock - 256);\r\n\r\n        return block.blockhash(_block);\r\n    }\r\n\r\n    /**\r\n     * @dev Return current round\r\n     */\r\n    function currentRound() public view returns (uint256) {\r\n        // Compute # of rounds since roundLength was last updated\r\n        uint256 roundsSinceUpdate = blockNum().sub(lastRoundLengthUpdateStartBlock).div(roundLength);\r\n        // Current round = round that roundLength was last updated + # of rounds since roundLength was last updated\r\n        return lastRoundLengthUpdateRound.add(roundsSinceUpdate);\r\n    }\r\n\r\n    /**\r\n     * @dev Return start block of current round\r\n     */\r\n    function currentRoundStartBlock() public view returns (uint256) {\r\n        // Compute # of rounds since roundLength was last updated\r\n        uint256 roundsSinceUpdate = blockNum().sub(lastRoundLengthUpdateStartBlock).div(roundLength);\r\n        // Current round start block = start block of round that roundLength was last updated + (# of rounds since roundLenght was last updated * roundLength)\r\n        return lastRoundLengthUpdateStartBlock.add(roundsSinceUpdate.mul(roundLength));\r\n    }\r\n\r\n    /**\r\n     * @dev Check if current round is initialized\r\n     */\r\n    function currentRoundInitialized() public view returns (bool) {\r\n        return lastInitializedRound == currentRound();\r\n    }\r\n\r\n    /**\r\n     * @dev Check if we are in the lock period of the current round\r\n     */\r\n    function currentRoundLocked() public view returns (bool) {\r\n        uint256 lockedBlocks = MathUtils.percOf(roundLength, roundLockAmount);\r\n        return blockNum().sub(currentRoundStartBlock()) >= roundLength.sub(lockedBlocks);\r\n    }\r\n\r\n    /**\r\n     * @dev Return BondingManager interface\r\n     */\r\n    function bondingManager() internal view returns (IBondingManager) {\r\n        return IBondingManager(controller.getContract(keccak256(\"BondingManager\")));\r\n    }\r\n\r\n    /**\r\n     * @dev Return Minter interface\r\n     */\r\n    function minter() internal view returns (IMinter) {\r\n        return IMinter(controller.getContract(keccak256(\"Minter\")));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_roundLockAmount\",\"type\":\"uint256\"}],\"name\":\"setRoundLockAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRoundLengthUpdateRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoundInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetContractId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRoundLengthUpdateStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundLength\",\"type\":\"uint256\"}],\"name\":\"setRoundLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoundLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"blockHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInitializedRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoundStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initializeRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"param\",\"type\":\"string\"}],\"name\":\"ParameterUpdate\",\"type\":\"event\"}]","ContractName":"RoundsManager","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a94e49bdbb0bfdb920ec1e441b1c408ead94c9bc","Library":"","SwarmSource":"bzzr://73efe24a2846267055b758e7e7b2b22e2b6cc52195e6c86371cb66cca91d8a75"}]}