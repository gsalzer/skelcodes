{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\nMockup object \r\n*/\r\ncontract ElementhToken {\r\n    \r\n  bool public mintingFinished = false;\r\n    function mint(address _to, uint256 _amount) public returns (bool) {\r\n    if(_to != address(0)) mintingFinished = false;\r\n    if(_amount != 0) mintingFinished = false;\r\n    return true;\r\n    }\r\n\r\n    function burn(address _to, uint256 _amount) public returns (bool) {\r\n    if(_to != address(0)) mintingFinished = false;\r\n    if(_amount != 0) mintingFinished = false;\r\n    return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    mapping(address => bool)  internal owners;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public{\r\n        owners[msg.sender] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owners[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    function addOwner(address newAllowed) onlyOwner public {\r\n        owners[newAllowed] = true;\r\n    }\r\n\r\n    function removeOwner(address toRemove) onlyOwner public {\r\n        owners[toRemove] = false;\r\n    }\r\n\r\n    function isOwner() public view returns(bool){\r\n        return owners[msg.sender] == true;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive. The contract requires a MintableToken that will be\r\n * minted as contributions arrive, note that the crowdsale contract\r\n * must be owner of the token in order to be able to mint it.\r\n */\r\ncontract PreFund is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) public deposited;\r\n  mapping (address => uint256) public claimed;\r\n\r\n  // The token being sold\r\n  ElementhToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n  event AddDeposit(address indexed beneficiary, uint256 value);\r\n  event LogClaim(address indexed holder, uint256 amount);\r\n\r\n  function setStartTime(uint256 _startTime) public onlyOwner{\r\n    startTime = _startTime;\r\n  }\r\n\r\n  function setEndTime(uint256 _endTime) public onlyOwner{\r\n    endTime = _endTime;\r\n  }\r\n\r\n  function setWallet(address _wallet) public onlyOwner{\r\n    wallet = _wallet;\r\n  }\r\n\r\n  function setRate(uint256 _rate) public onlyOwner{\r\n    rate = _rate;\r\n  }\r\n\r\n\r\n  function PreFund(uint256 _startTime, uint256 _endTime, address _wallet, ElementhToken _token) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n    token = _token;\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  function () external payable {\r\n    deposit(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function deposit(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    deposited[beneficiary] = deposited[beneficiary].add(msg.value);\r\n\r\n    uint256 weiAmount = msg.value;\r\n    AddDeposit(beneficiary, weiAmount);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n\r\n  // send ether to the fund collection wallet\r\n  function forwardFunds() onlyOwner public {\r\n    require(now >= endTime);\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function claimToken () public {\r\n    require (msg.sender != address(0));\r\n    require (now >= endTime);\r\n    require (deposited[msg.sender] != 0);\r\n    \r\n    uint tokens = deposited[msg.sender] * rate;\r\n\r\n    token.mint(msg.sender, tokens);\r\n    deposited[msg.sender] = 0;\r\n    claimed[msg.sender] = tokens;\r\n\r\n    LogClaim(msg.sender, tokens);\r\n  }\r\n  \r\n\r\n  function refundWallet(address _wallet) onlyOwner public {\r\n    refundFunds(_wallet);\r\n  }\r\n\r\n  function claimRefund() public {\r\n  \trequire(now <= endTime);\r\n    refundFunds(msg.sender);\r\n  }\r\n\r\n  function refundFunds(address _wallet) internal {\r\n    require(_wallet != address(0));\r\n    require(deposited[_wallet] != 0);\r\n    uint256 depositedValue = deposited[_wallet];\r\n    deposited[_wallet] = 0;\r\n    _wallet.transfer(depositedValue);\r\n    if(claimed[_wallet] != 0){\r\n    \ttoken.burn(_wallet, claimed[_wallet]);\r\n    \tclaimed[_wallet] = 0;\r\n    }\r\n    Refunded(_wallet, depositedValue);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"toRemove\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAllowed\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forwardFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"refundWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AddDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PreFund","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a86e356000000000000000000000000000000000000000000000000000000005ac021000000000000000000000000004906a90b6a2240d54b477ffc800619708850519f0000000000000000000000004c567c3363cc42c5a42c6d8bf01503fd1d0b91cd","Library":"","SwarmSource":"bzzr://78e062973141263cdefa1c3e384463f294c0c71a1dab010d847e6b87ae34099b"}]}