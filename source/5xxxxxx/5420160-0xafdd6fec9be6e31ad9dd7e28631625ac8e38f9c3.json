{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract EIP20Interface {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed burner, uint256 value);\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public;\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public;\r\n  function approve(address spender, uint256 value) public;\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is\r\n * called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Owanble() public{\r\n    owner = msg.sender;\r\n  }\r\n\r\n  // Modifier onlyOwner prevents function from running\r\n  // if it is called by anyone other than the owner\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // Function transferOwnership allows owner to change ownership.\r\n  // Before the appying changes it checks if the owner\r\n  // called this function and if the address is not 0x0.\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/*\r\n * Haltable\r\n *\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\r\n *\r\n *\r\n * Originally envisioned in FirstBlood ICO contract.\r\n */\r\ncontract Haltable is Ownable {\r\n  bool public halted = false;\r\n\r\n  modifier stopInEmergency {\r\n    require(!halted);\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    require(halted);\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n  }\r\n\r\n}\r\n\r\ncontract TokenSale is Haltable {\r\n    using SafeMath for uint;\r\n\r\n    string public name = \"TokenSale Contract\";\r\n\r\n    // Constants\r\n    EIP20Interface public token;\r\n    address public beneficiary;\r\n    address public reserve;\r\n    uint public price = 0; // in wei\r\n\r\n    // Counters\r\n    uint public tokensSoldTotal = 0; // in wei\r\n    uint public weiRaisedTotal = 0; // in wei\r\n    uint public investorCount = 0;\r\n\r\n    event NewContribution(\r\n        address indexed holder,\r\n        uint256 tokenAmount,\r\n        uint256 etherAmount);\r\n\r\n    function TokenSale(\r\n        ) public {\r\n            \r\n        // Grant owner rights to deployer of a contract\r\n        owner = msg.sender;\r\n        \r\n        // Set token address and initialize constructor\r\n        token = EIP20Interface(address(0x2F7823AaF1ad1dF0D5716E8F18e1764579F4ABe6));\r\n        \r\n        // Set beneficiary address to receive ETH\r\n        beneficiary = address(0xf2b9DA535e8B8eF8aab29956823df7237f1863A3);\r\n        \r\n        // Set reserve address to receive ETH\r\n        reserve = address(0x966c0FD16a4f4292E6E0372e04fbB5c7013AD02e);\r\n        \r\n        // Set price of 1 token\r\n        price = 0.00379 ether;\r\n    }\r\n\r\n    function changeBeneficiary(address _beneficiary) public onlyOwner stopInEmergency {\r\n        beneficiary = _beneficiary;\r\n    }\r\n    \r\n    function changeReserve(address _reserve) public onlyOwner stopInEmergency {\r\n        reserve = _reserve;\r\n    }\r\n    \r\n    function changePrice(uint _price) public onlyOwner stopInEmergency {\r\n        price = _price;\r\n    }\r\n\r\n    function () public payable stopInEmergency {\r\n        \r\n        // require min limit of contribution\r\n        require(msg.value >= price);\r\n        \r\n        // calculate token amount\r\n        uint tokens = msg.value / price;\r\n        \r\n        // throw if you trying to buy over the token exists\r\n        require(token.balanceOf(this) >= tokens);\r\n        \r\n        // recalculate counters\r\n        tokensSoldTotal = tokensSoldTotal.add(tokens);\r\n        if (token.balanceOf(msg.sender) == 0) investorCount++;\r\n        weiRaisedTotal = weiRaisedTotal.add(msg.value);\r\n        \r\n        // transfer bought tokens to the contributor \r\n        token.transfer(msg.sender, tokens);\r\n\r\n        // 100% / 10 = 10%\r\n        uint reservePie = msg.value.div(10);\r\n        \r\n        // 100% - 10% = 90%\r\n        uint beneficiaryPie = msg.value.sub(reservePie);\r\n\r\n        // transfer funds to the reserve address\r\n        reserve.transfer(reservePie);\r\n\r\n        // transfer funds to the beneficiary address\r\n        beneficiary.transfer(beneficiaryPie);\r\n\r\n        emit NewContribution(msg.sender, tokens, msg.value);\r\n    }\r\n    \r\n    \r\n    // Withdraw any accidently sent to the contract ERC20 tokens.\r\n    // Can be performed only by the owner.\r\n    function withdrawERC20Token(address _token) public onlyOwner stopInEmergency {\r\n        ERC20 foreignToken = ERC20(_token);\r\n        foreignToken.transfer(msg.sender, foreignToken.balanceOf(this));\r\n    }\r\n    \r\n    // Withdraw any accidently sent to the contract EIP20 tokens.\r\n    // Can be performed only by the owner.\r\n    function withdrawEIP20Token(address _token) public onlyOwner stopInEmergency {\r\n        EIP20Interface foreignToken = EIP20Interface(_token);\r\n        foreignToken.transfer(msg.sender, foreignToken.balanceOf(this));\r\n    }\r\n    \r\n    // Withdraw all not sold tokens.\r\n    // Can be performed only by the owner.\r\n    function withdrawToken() public onlyOwner stopInEmergency {\r\n        token.transfer(msg.sender, token.balanceOf(this));\r\n    }\r\n    \r\n    // Get the contract token balance\r\n    function tokensRemaining() public constant returns (uint256) {\r\n        return token.balanceOf(this);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawEIP20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Owanble\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaisedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"changeReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"NewContribution\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a3313e307ab850550f5e72c44fd327ba2cb1664e70cc76425837c646d2e36087"}]}