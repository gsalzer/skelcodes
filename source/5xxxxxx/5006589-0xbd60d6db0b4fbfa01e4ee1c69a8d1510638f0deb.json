{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface IERC20 {\r\n\r\nfunction totalSupply() public constant returns (uint256 totalSupply);\r\n//Get the total token supply\r\nfunction balanceOf(address _owner) public constant returns (uint256 balance);\r\n//Get the account balance of another account with address _owner\r\nfunction transfer(address _to, uint256 _value) public returns (bool success);\r\n//Send _value amount of tokens to address _to\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n//Send _value amount of tokens from address _from to address _to\r\n/*The transferFrom method is used for a withdraw workflow, allowing contracts to send \r\ntokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\nfees in sub-currencies; the command should fail unless the _from account has deliberately\r\nauthorized the sender of the message via some mechanism; we propose these standardized APIs for approval: */\r\nfunction approve(address _spender, uint256 _value) public returns (bool success);\r\n/* Allow _spender to withdraw from your account, multiple times, up to the _value amount. \r\nIf this function is called again it overwrites the current allowance with _value. */\r\nfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n//Returns the amount which _spender is still allowed to withdraw from _owner\r\nevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n//Triggered when tokens are transferred.\r\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n//Triggered whenever approve(address _spender, uint256 _value) is called.\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Nickelcoin is IERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    string public constant name = \"Nickelcoin\";  \r\n    string public constant symbol = \"NKL\"; \r\n    uint8 public constant decimals = 8;  \r\n    uint public  _totalSupply = 4000000000000000; \r\n    \r\n   \r\n    mapping (address => uint256) public funds; \r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);  \r\n    \r\n    function Nickelcoin() public {\r\n    funds[0xa33c5838B8169A488344a9ba656420de1db3dc51] = _totalSupply; \r\n    }\r\n     \r\n    function totalSupply() public constant returns (uint256 totalsupply) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return funds[_owner];  \r\n    }\r\n        \r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n   \r\n    require(funds[msg.sender] >= _value && funds[_to].add(_value) >= funds[_to]);\r\n\r\n    \r\n    funds[msg.sender] = funds[msg.sender].sub(_value); \r\n    funds[_to] = funds[_to].add(_value);       \r\n  \r\n    Transfer(msg.sender, _to, _value); \r\n    return true;\r\n    }\r\n\t\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        require (allowed[_from][msg.sender] >= _value);   \r\n        require (_to != 0x0);                            \r\n        require (funds[_from] >= _value);               \r\n        require (funds[_to].add(_value) > funds[_to]); \r\n        funds[_from] = funds[_from].sub(_value);   \r\n        funds[_to] = funds[_to].add(_value);        \r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);                 \r\n        return true;                                      \r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n         allowed[msg.sender][_spender] = _value;    \r\n         Approval (msg.sender, _spender, _value);   \r\n         return true;                               \r\n     }\r\n    \r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];   \r\n    } \r\n    \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalsupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"funds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Nickelcoin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dde7fda6313358e6278ec2775972d95e9051618510bfae048802e572a9a59890"}]}