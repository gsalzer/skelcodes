{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/// @title Starter Kit Contract \r\n/// @author Julia Altenried, Yuriy Kashnikov\r\ncontract StarterKit is Ownable {\r\n\r\n    /**  CONSTANTS **/\r\n    uint256 public constant COPPER_AMOUNT_NDC = 1000 * 10**18;\r\n    uint256 public constant COPPER_AMOUNT_TPT = 1500 * 10**18;\r\n    uint256 public constant COPPER_AMOUNT_SKL = 25 * 10**18;\r\n    uint256 public constant COPPER_AMOUNT_XPER = 12 * 10**2;\r\n\r\n    uint256 public constant BRONZE_AMOUNT_NDC = 2000 * 10**18;\r\n    uint256 public constant BRONZE_AMOUNT_TPT = 4000 * 10**18;\r\n    uint256 public constant BRONZE_AMOUNT_SKL = 50 * 10**18;\r\n    uint256 public constant BRONZE_AMOUNT_XPER = 25 * 10**2;\r\n\r\n    uint256 public constant SILVER_AMOUNT_NDC = 11000 * 10**18;\r\n    uint256 public constant SILVER_AMOUNT_TPT = 33000 * 10**18;\r\n    uint256 public constant SILVER_AMOUNT_SKL = 100 * 10**18;\r\n    uint256 public constant SILVER_AMOUNT_XPER = 50 * 10**2;\r\n\r\n    uint256 public constant GOLD_AMOUNT_NDC = 25000 * 10**18;\r\n    uint256 public constant GOLD_AMOUNT_TPT = 100000 * 10**18;\r\n    uint256 public constant GOLD_AMOUNT_SKL = 200 * 10**18;\r\n    uint256 public constant GOLD_AMOUNT_XPER = 100 * 10**2;\r\n\r\n    uint256 public constant PLATINUM_AMOUNT_NDC = 250000 * 10**18;\r\n    uint256 public constant PLATINUM_AMOUNT_TPT = 1250000 * 10**18;\r\n    uint256 public constant PLATINUM_AMOUNT_SKL = 2000 * 10**18;\r\n    uint256 public constant PLATINUM_AMOUNT_XPER = 500 * 10**2;\r\n\r\n\r\n    /* set of predefined token contract addresses and instances, can be set by owner only */\r\n    ERC20 public tpt;\r\n    ERC20 public ndc;\r\n    ERC20 public skl;\r\n    ERC20 public xper;\r\n\r\n    /* signer address, can be set by owner only */\r\n    address public neverdieSigner;\r\n\r\n    event BuyCopper(\r\n        address indexed to,\r\n        uint256 CopperPrice,\r\n        uint256 value\r\n    );\r\n\r\n    event BuyBronze(\r\n        address indexed to,\r\n        uint256 BronzePrice,\r\n        uint256 value\r\n    );\r\n\r\n    event BuySilver(\r\n        address indexed to,\r\n        uint256 SilverPrice,\r\n        uint256 value\r\n    );\r\n\r\n    event BuyGold(\r\n        address indexed to,\r\n        uint256 GoldPrice,\r\n        uint256 value\r\n    );\r\n\r\n    event BuyPlatinum(\r\n        address indexed to,\r\n        uint256 PlatinumPrice,\r\n        uint256 value\r\n    );\r\n\r\n\r\n    /// @dev handy constructor to initialize StarerKit with a set of proper parameters\r\n    /// @param _tptContractAddress TPT token address \r\n    /// @param _ndcContractAddress NDC token address\r\n    /// @param _signer signer address\r\n    function StarterKit(address _tptContractAddress, address _ndcContractAddress,\r\n                        address _sklContractAddress, address _xperContractAddress,\r\n                        address _signer) public {\r\n        tpt = ERC20(_tptContractAddress);\r\n        ndc = ERC20(_ndcContractAddress);\r\n        skl = ERC20(_sklContractAddress);\r\n        xper = ERC20(_xperContractAddress);\r\n        neverdieSigner = _signer;\r\n    }\r\n\r\n    function setNDCContractAddress(address _to) external onlyOwner {\r\n        ndc = ERC20(_to);\r\n    }\r\n\r\n    function setTPTContractAddress(address _to) external onlyOwner {\r\n        tpt = ERC20(_to);\r\n    }\r\n\r\n    function setSKLContractAddress(address _to) external onlyOwner {\r\n        skl = ERC20(_to);\r\n    }\r\n\r\n    function setXPERContractAddress(address _to) external onlyOwner {\r\n        xper = ERC20(_to);\r\n    }\r\n\r\n    function setSignerAddress(address _to) external onlyOwner {\r\n        neverdieSigner = _to;\r\n    }\r\n\r\n    /// @dev buy Copper with ether\r\n    /// @param _CopperPrice price in Wei\r\n    /// @param _expiration expiration timestamp\r\n    /// @param _v ECDCA signature\r\n    /// @param _r ECDSA signature\r\n    /// @param _s ECDSA signature\r\n    function buyCopper(uint256 _CopperPrice,\r\n                       uint256 _expiration,\r\n                       uint8 _v,\r\n                       bytes32 _r,\r\n                       bytes32 _s\r\n                      ) payable external {\r\n        // Check if the signature did not expire yet by inspecting the timestamp\r\n        require(_expiration >= block.timestamp);\r\n\r\n        // Check if the signature is coming from the neverdie address\r\n        address signer = ecrecover(keccak256(_CopperPrice, _expiration), _v, _r, _s);\r\n        require(signer == neverdieSigner);\r\n\r\n        require(msg.value >= _CopperPrice);\r\n        \r\n        assert(ndc.transfer(msg.sender, COPPER_AMOUNT_NDC) \r\n            && tpt.transfer(msg.sender, COPPER_AMOUNT_TPT)\r\n            && skl.transfer(msg.sender, COPPER_AMOUNT_SKL)\r\n            && xper.transfer(msg.sender, COPPER_AMOUNT_XPER));\r\n           \r\n\r\n        // Emit BuyCopper event\r\n        emit BuyCopper(msg.sender, _CopperPrice, msg.value);\r\n    }\r\n\r\n    /// @dev buy Bronze with ether\r\n    /// @param _BronzePrice price in Wei\r\n    /// @param _expiration expiration timestamp\r\n    /// @param _v ECDCA signature\r\n    /// @param _r ECDSA signature\r\n    /// @param _s ECDSA signature\r\n    function buyBronze(uint256 _BronzePrice,\r\n                       uint256 _expiration,\r\n                       uint8 _v,\r\n                       bytes32 _r,\r\n                       bytes32 _s\r\n                      ) payable external {\r\n        // Check if the signature did not expire yet by inspecting the timestamp\r\n        require(_expiration >= block.timestamp);\r\n\r\n        // Check if the signature is coming from the neverdie address\r\n        address signer = ecrecover(keccak256(_BronzePrice, _expiration), _v, _r, _s);\r\n        require(signer == neverdieSigner);\r\n\r\n        require(msg.value >= _BronzePrice);\r\n        assert(ndc.transfer(msg.sender, BRONZE_AMOUNT_NDC) \r\n            && tpt.transfer(msg.sender, BRONZE_AMOUNT_TPT)\r\n            && skl.transfer(msg.sender, BRONZE_AMOUNT_SKL)\r\n            && xper.transfer(msg.sender, BRONZE_AMOUNT_XPER));\r\n\r\n        // Emit BuyBronze event\r\n        emit BuyBronze(msg.sender, _BronzePrice, msg.value);\r\n    }\r\n\r\n    /// @dev buy Silver with ether\r\n    /// @param _SilverPrice price in Wei\r\n    /// @param _expiration expiration timestamp\r\n    /// @param _v ECDCA signature\r\n    /// @param _r ECDSA signature\r\n    /// @param _s ECDSA signature\r\n    function buySilver(uint256 _SilverPrice,\r\n                       uint256 _expiration,\r\n                       uint8 _v,\r\n                       bytes32 _r,\r\n                       bytes32 _s\r\n                      ) payable external {\r\n        // Check if the signature did not expire yet by inspecting the timestamp\r\n        require(_expiration >= block.timestamp);\r\n\r\n        // Check if the signature is coming from the neverdie address\r\n        address signer = ecrecover(keccak256(_SilverPrice, _expiration), _v, _r, _s);\r\n        require(signer == neverdieSigner);\r\n\r\n        require(msg.value >= _SilverPrice);\r\n        assert(ndc.transfer(msg.sender, SILVER_AMOUNT_NDC) \r\n            && tpt.transfer(msg.sender, SILVER_AMOUNT_TPT)\r\n            && skl.transfer(msg.sender, SILVER_AMOUNT_SKL)\r\n            && xper.transfer(msg.sender, SILVER_AMOUNT_XPER));\r\n\r\n        // Emit BuySilver event\r\n        emit BuySilver(msg.sender, _SilverPrice, msg.value);\r\n    }\r\n\r\n    /// @dev buy Gold with ether\r\n    /// @param _GoldPrice price in Wei\r\n    /// @param _expiration expiration timestamp\r\n    /// @param _v ECDCA signature\r\n    /// @param _r ECDSA signature\r\n    /// @param _s ECDSA signature\r\n    function buyGold(uint256 _GoldPrice,\r\n                       uint256 _expiration,\r\n                       uint8 _v,\r\n                       bytes32 _r,\r\n                       bytes32 _s\r\n                      ) payable external {\r\n        // Check if the signature did not expire yet by inspecting the timestamp\r\n        require(_expiration >= block.timestamp);\r\n\r\n        // Check if the signature is coming from the neverdie address\r\n        address signer = ecrecover(keccak256(_GoldPrice, _expiration), _v, _r, _s);\r\n        require(signer == neverdieSigner);\r\n\r\n        require(msg.value >= _GoldPrice);\r\n        assert(ndc.transfer(msg.sender, GOLD_AMOUNT_NDC) \r\n            && tpt.transfer(msg.sender, GOLD_AMOUNT_TPT)\r\n            && skl.transfer(msg.sender, GOLD_AMOUNT_SKL)\r\n            && xper.transfer(msg.sender, GOLD_AMOUNT_XPER));\r\n\r\n        // Emit BuyGold event\r\n        emit BuyGold(msg.sender, _GoldPrice, msg.value);\r\n    }\r\n\r\n    /// @dev buy Platinum with ether\r\n    /// @param _PlatinumPrice price in Wei\r\n    /// @param _expiration expiration timestamp\r\n    /// @param _v ECDCA signature\r\n    /// @param _r ECDSA signature\r\n    /// @param _s ECDSA signature\r\n    function buyPlatinum(uint256 _PlatinumPrice,\r\n                       uint256 _expiration,\r\n                       uint8 _v,\r\n                       bytes32 _r,\r\n                       bytes32 _s\r\n                      ) payable external {\r\n        // Check if the signature did not expire yet by inspecting the timestamp\r\n        require(_expiration >= block.timestamp);\r\n\r\n        // Check if the signature is coming from the neverdie address\r\n        address signer = ecrecover(keccak256(_PlatinumPrice, _expiration), _v, _r, _s);\r\n        require(signer == neverdieSigner);\r\n\r\n        require(msg.value >= _PlatinumPrice);\r\n        assert(ndc.transfer(msg.sender, PLATINUM_AMOUNT_NDC) \r\n            && tpt.transfer(msg.sender, PLATINUM_AMOUNT_TPT)\r\n            && skl.transfer(msg.sender, PLATINUM_AMOUNT_SKL)\r\n            && xper.transfer(msg.sender, PLATINUM_AMOUNT_XPER));\r\n\r\n        // Emit BuyPlatinum event\r\n        emit BuyPlatinum(msg.sender, _PlatinumPrice, msg.value);\r\n    }\r\n\r\n    /// @dev withdraw all ether\r\n    function withdrawEther() external onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n      uint256 allNDC= ndc.balanceOf(this);\r\n      uint256 allTPT = tpt.balanceOf(this);\r\n      uint256 allSKL = skl.balanceOf(this);\r\n      uint256 allXPER = xper.balanceOf(this);\r\n      if (allNDC > 0) ndc.transfer(msg.sender, allNDC);\r\n      if (allTPT > 0) tpt.transfer(msg.sender, allTPT);\r\n      if (allSKL > 0) skl.transfer(msg.sender, allSKL);\r\n      if (allXPER > 0) xper.transfer(msg.sender, allXPER);\r\n    }\r\n\r\n    /// @dev withdraw token\r\n    /// @param _tokenContract any kind of ERC20 token to withdraw from\r\n    function withdrawToken(address _tokenContract) external onlyOwner {\r\n        ERC20 token = ERC20(_tokenContract);\r\n        uint256 balance = token.balanceOf(this);\r\n        assert(token.transfer(owner, balance));\r\n    }\r\n\r\n    /// @dev kill contract, but before transfer all tokens and ether to owner\r\n    function kill() onlyOwner public {\r\n      withdraw();\r\n      selfdestruct(owner);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setSignerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BRONZE_AMOUNT_TPT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"neverdieSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GOLD_AMOUNT_XPER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CopperPrice\",\"type\":\"uint256\"},{\"name\":\"_expiration\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"buyCopper\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SILVER_AMOUNT_SKL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GOLD_AMOUNT_NDC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setNDCContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLATINUM_AMOUNT_NDC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tpt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ndc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COPPER_AMOUNT_SKL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GOLD_AMOUNT_TPT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLATINUM_AMOUNT_SKL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SILVER_AMOUNT_TPT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_SilverPrice\",\"type\":\"uint256\"},{\"name\":\"_expiration\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"buySilver\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLATINUM_AMOUNT_XPER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setTPTContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COPPER_AMOUNT_XPER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BRONZE_AMOUNT_XPER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SILVER_AMOUNT_NDC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COPPER_AMOUNT_TPT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setXPERContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SILVER_AMOUNT_XPER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLATINUM_AMOUNT_TPT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GOLD_AMOUNT_SKL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COPPER_AMOUNT_NDC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_BronzePrice\",\"type\":\"uint256\"},{\"name\":\"_expiration\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"buyBronze\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BRONZE_AMOUNT_NDC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_PlatinumPrice\",\"type\":\"uint256\"},{\"name\":\"_expiration\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"buyPlatinum\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setSKLContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"skl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BRONZE_AMOUNT_SKL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_GoldPrice\",\"type\":\"uint256\"},{\"name\":\"_expiration\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"buyGold\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tptContractAddress\",\"type\":\"address\"},{\"name\":\"_ndcContractAddress\",\"type\":\"address\"},{\"name\":\"_sklContractAddress\",\"type\":\"address\"},{\"name\":\"_xperContractAddress\",\"type\":\"address\"},{\"name\":\"_signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"CopperPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BuyCopper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"BronzePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BuyBronze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"SilverPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BuySilver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"GoldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BuyGold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"PlatinumPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BuyPlatinum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"StarterKit","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c596bd09d652827b0106292d3e378d5938df4b12000000000000000000000000a54ddc7b3cce7fc8b1e3fa0256d0db80d2c10970000000000000000000000000a7bd9d58d22d5e35ec4a08083141e0340ea2ca93000000000000000000000000d28525ad63f337c86843d720dae921228e44f0ac000000000000000000000000c376324f519fc5f570ec43783cf5d9412f66edf5","Library":"","SwarmSource":"bzzr://e5b63a098ecd78aba0cdb01866c21c6e8f7289a0e75397e1f582db9ceeb9677d"}]}