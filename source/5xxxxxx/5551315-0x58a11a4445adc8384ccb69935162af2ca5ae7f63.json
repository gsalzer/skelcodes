{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Ethervote {\r\n    \r\n    address feeRecieverOne = 0xa03F27587883135DA9565e7EfB523e1657A47a07;\r\n    address feeRecieverTwo = 0x549377418b1b7030381de9aA1319E41C044467c7;\r\n\r\n    address[] playerAddresses;\r\n    \r\n    uint public expiryBlock;\r\n    \r\n    uint public leftSharePrice = 10 finney;\r\n    uint public rightSharePrice = 10 finney;\r\n    \r\n    uint public leftSharePriceRateOfIncrease = 1 finney;\r\n    uint public rightSharePriceRateOfIncrease = 1 finney;\r\n    \r\n    uint public leftVotes = 0;\r\n    uint public rightVotes = 0;\r\n    \r\n    uint public thePot = 0 wei;\r\n    \r\n    bool public betIsSettled = false;\r\n\r\n    struct Player {\r\n        uint leftShares;\r\n        uint rightShares;\r\n        uint excessEther;\r\n        bool hasBetBefore;\r\n    }\r\n    \r\n    mapping(address => Player) players;\r\n    \r\n    \r\n    constructor() public {\r\n        expiryBlock = block.number + 17500;\r\n    }\r\n    \r\n    function bet(bool bettingLeft) public payable {\r\n        \r\n        require(block.number < expiryBlock);\r\n        \r\n        if(!players[msg.sender].hasBetBefore){\r\n            playerAddresses.push(msg.sender);\r\n            players[msg.sender].hasBetBefore = true;\r\n        }\r\n            \r\n            uint amountSent = msg.value;\r\n            \r\n            if(bettingLeft){\r\n                require(amountSent >= leftSharePrice);\r\n                \r\n                while(amountSent >= leftSharePrice){\r\n                    players[msg.sender].leftShares++;\r\n                    leftVotes++;\r\n                    thePot += leftSharePrice;\r\n                    amountSent -= leftSharePrice;\r\n                    \r\n                    if((leftVotes % 15) == 0){//if the number of left votes is a multiple of 15\r\n                        leftSharePrice += leftSharePriceRateOfIncrease;\r\n                        if(leftVotes <= 45){//increase the rate at first, then decrease it to zero.\r\n                            leftSharePriceRateOfIncrease += 1 finney;\r\n                        }else if(leftVotes > 45){\r\n                            if(leftSharePriceRateOfIncrease > 1 finney){\r\n                                leftSharePriceRateOfIncrease -= 1 finney;\r\n                            }else if(leftSharePriceRateOfIncrease <= 1 finney){\r\n                                leftSharePriceRateOfIncrease = 0 finney;\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                }\r\n                if(amountSent > 0){\r\n                    players[msg.sender].excessEther += amountSent;\r\n                }\r\n                \r\n            }\r\n            else{//betting for the right option\r\n                require(amountSent >= rightSharePrice);\r\n                \r\n                while(amountSent >= rightSharePrice){\r\n                    players[msg.sender].rightShares++;\r\n                    rightVotes++;\r\n                    thePot += rightSharePrice;\r\n                    amountSent -= rightSharePrice;\r\n                    \r\n                    if((rightVotes % 15) == 0){//if the number of right votes is a multiple of 15\r\n                        rightSharePrice += rightSharePriceRateOfIncrease;\r\n                        if(rightVotes <= 45){//increase the rate at first, then decrease it to zero.\r\n                            rightSharePriceRateOfIncrease += 1 finney;\r\n                        }else if(rightVotes > 45){\r\n                            if(rightSharePriceRateOfIncrease > 1 finney){\r\n                                rightSharePriceRateOfIncrease -= 1 finney;\r\n                            }else if(rightSharePriceRateOfIncrease <= 1 finney){\r\n                                rightSharePriceRateOfIncrease = 0 finney;\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                }\r\n                if(amountSent > 0){\r\n                    if(msg.sender.send(amountSent) == false)players[msg.sender].excessEther += amountSent;\r\n                }\r\n            }\r\n    }\r\n    \r\n    \r\n    function settleBet() public {\r\n        require(block.number >= expiryBlock);\r\n        require(betIsSettled == false);\r\n\r\n        uint winRewardOne = thePot * 2;\r\n        winRewardOne = winRewardOne / 20;\r\n        if(feeRecieverOne.send(winRewardOne) == false) players[feeRecieverOne].excessEther = winRewardOne;//in case the tx fails, the excess ether function lets you withdraw it manually\r\n\r\n        uint winRewardTwo = thePot * 1;\r\n        winRewardTwo = winRewardTwo / 20;\r\n        if(feeRecieverTwo.send(winRewardTwo) == false) players[feeRecieverTwo].excessEther = winRewardTwo;\r\n\r\n        uint winReward = thePot * 17;\r\n        winReward = winReward / 20;\r\n        \r\n        if(leftVotes > rightVotes){\r\n            winReward = winReward / leftVotes;\r\n            for(uint i=0;i<playerAddresses.length;i++){\r\n                if(players[playerAddresses[i]].leftShares > 0){\r\n                    if(playerAddresses[i].send(players[playerAddresses[i]].leftShares * winReward) == false){\r\n                        //if the send fails\r\n                        players[playerAddresses[i]].excessEther = players[playerAddresses[i]].leftShares * winReward;\r\n                    }\r\n                }\r\n            }\r\n        }else if(rightVotes > leftVotes){\r\n            winReward = winReward / rightVotes;\r\n            for(uint u=0;u<playerAddresses.length;u++){\r\n                if(players[playerAddresses[u]].rightShares > 0){\r\n                    if(playerAddresses[u].send(players[playerAddresses[u]].rightShares * winReward) == false){\r\n                        //if the send fails\r\n                        players[playerAddresses[u]].excessEther = players[playerAddresses[u]].rightShares * winReward;\r\n                    }\r\n                }\r\n            }\r\n        }else if(rightVotes == leftVotes){//split it in a tie\r\n            uint rightWinReward = (winReward / rightVotes) / 2;\r\n            for(uint q=0;q<playerAddresses.length;q++){\r\n                if(players[playerAddresses[q]].rightShares > 0){\r\n                    if(playerAddresses[q].send(players[playerAddresses[q]].rightShares * rightWinReward) == false){\r\n                        //if the send fails\r\n                        players[playerAddresses[q]].excessEther = players[playerAddresses[q]].rightShares * rightWinReward;\r\n                    }\r\n                }\r\n            }\r\n\r\n            uint leftWinReward = winReward / leftVotes;\r\n            for(uint l=0;l<playerAddresses.length;l++){\r\n                if(players[playerAddresses[l]].leftShares > 0){\r\n                    if(playerAddresses[l].send(players[playerAddresses[l]].leftShares * leftWinReward) == false){\r\n                        //if the send fails\r\n                        players[playerAddresses[l]].excessEther = players[playerAddresses[l]].leftShares * leftWinReward;\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        betIsSettled = true;\r\n    }\r\n    \r\n    \r\n    function retrieveExcessEther() public {\r\n        assert(players[msg.sender].excessEther > 0);\r\n        if(msg.sender.send(players[msg.sender].excessEther)){\r\n            players[msg.sender].excessEther = 0;\r\n        }\r\n    }\r\n    \r\n    function viewMyShares(bool left) public view returns(uint){\r\n        if(left)return players[msg.sender].leftShares;\r\n        return players[msg.sender].rightShares;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rightSharePriceRateOfIncrease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"retrieveExcessEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rightSharePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bettingLeft\",\"type\":\"bool\"}],\"name\":\"bet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betIsSettled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"settleBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leftSharePriceRateOfIncrease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rightVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiryBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leftSharePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leftVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"left\",\"type\":\"bool\"}],\"name\":\"viewMyShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Ethervote","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f5b581919e7bc72d29d71241a923c84c5a2bac7a9da4d515c58bc501cd40654e"}]}