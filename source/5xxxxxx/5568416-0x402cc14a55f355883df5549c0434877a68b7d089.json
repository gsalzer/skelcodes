{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary BWUtility {\r\n    \r\n    // -------- UTILITY FUNCTIONS ----------\r\n\r\n\r\n    // Return next higher even _multiple for _amount parameter (e.g used to round up to even finneys).\r\n    function ceil(uint _amount, uint _multiple) pure public returns (uint) {\r\n        return ((_amount + _multiple - 1) / _multiple) * _multiple;\r\n    }\r\n\r\n    // Checks if two coordinates are adjacent:\r\n    // xxx\r\n    // xox\r\n    // xxx\r\n    // All x (_x2, _xy2) are adjacent to o (_x1, _y1) in this ascii image. \r\n    // Adjacency does not wrapp around map edges so if y2 = 255 and y1 = 0 then they are not ajacent\r\n    function isAdjacent(uint8 _x1, uint8 _y1, uint8 _x2, uint8 _y2) pure public returns (bool) {\r\n        return ((_x1 == _x2 &&      (_y2 - _y1 == 1 || _y1 - _y2 == 1))) ||      // Same column\r\n               ((_y1 == _y2 &&      (_x2 - _x1 == 1 || _x1 - _x2 == 1))) ||      // Same row\r\n               ((_x2 - _x1 == 1 &&  (_y2 - _y1 == 1 || _y1 - _y2 == 1))) ||      // Right upper or lower diagonal\r\n               ((_x1 - _x2 == 1 &&  (_y2 - _y1 == 1 || _y1 - _y2 == 1)));        // Left upper or lower diagonal\r\n    }\r\n\r\n    // Converts (x, y) to tileId xy\r\n    function toTileId(uint8 _x, uint8 _y) pure public returns (uint16) {\r\n        return uint16(_x) << 8 | uint16(_y);\r\n    }\r\n\r\n    // Converts _tileId to (x, y)\r\n    function fromTileId(uint16 _tileId) pure public returns (uint8, uint8) {\r\n        uint8 y = uint8(_tileId);\r\n        uint8 x = uint8(_tileId >> 8);\r\n        return (x, y);\r\n    }\r\n    \r\n    function getBoostFromTile(address _claimer, address _attacker, address _defender, uint _blockValue) pure public returns (uint, uint) {\r\n        if (_claimer == _attacker) {\r\n            return (_blockValue, 0);\r\n        } else if (_claimer == _defender) {\r\n            return (0, _blockValue);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_x1\",\"type\":\"uint8\"},{\"name\":\"_y1\",\"type\":\"uint8\"},{\"name\":\"_x2\",\"type\":\"uint8\"},{\"name\":\"_y2\",\"type\":\"uint8\"}],\"name\":\"isAdjacent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint8\"},{\"name\":\"_y\",\"type\":\"uint8\"}],\"name\":\"toTileId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_multiple\",\"type\":\"uint256\"}],\"name\":\"ceil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tileId\",\"type\":\"uint16\"}],\"name\":\"fromTileId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_claimer\",\"type\":\"address\"},{\"name\":\"_attacker\",\"type\":\"address\"},{\"name\":\"_defender\",\"type\":\"address\"},{\"name\":\"_blockValue\",\"type\":\"uint256\"}],\"name\":\"getBoostFromTile\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"BWUtility","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cfac66049abeac72fb354ce7315cf078efd754839ed292dbcdc7d4d0c90bd5b1"}]}