{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ninterface token {\r\n    function promoCode() external returns (bytes16);\r\n    function specialSend(uint amount, address buyer) external;\r\n    function promoEthCommission() external returns (uint);\r\n    function owner() external returns (address);\r\n    function ethPromoHelpers(address input) external returns (address);\r\n    function balanceOf(address who) external returns (uint256);\r\n    function transfer(address receiver, uint amount) external;\r\n}\r\n\r\ncontract UppercaseCheck {\r\n    function areAllUppercase(bytes16 str) internal pure returns (bool) {\r\n    if(str == 0){return false;}\r\n    for (uint j = 0; j < 16; j++) {\r\n    byte char = byte(bytes16(uint(str) * 2 ** (8 * j)));\r\n    if (char != 0 && !((char >= 97) && (char <= 122))){return false;}}return true;}\r\n}\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256){if(a == 0){return 0;}uint256 c = a * b;assert(c / a == b);return c;}\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256){return a / b;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256){assert(b <= a);return a - b;}\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256){uint256 c = a + b;assert(c >= a);return c;}\r\n}\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping(address => uint256) balances;\r\n    mapping(address => address) ethPromoHelpers_;\r\n    mapping(address => address) fishPromoHelpers_;\r\n    \r\n    uint256 totalSupply_;\r\n    function totalSupply() public view returns (uint256) {return totalSupply_;}\r\n    function ethPromoHelpers(address _input) public view returns (address) {return ethPromoHelpers_[_input];}\r\n    function fishPromoHelpers(address _input) public view returns (address) {return fishPromoHelpers_[_input];}\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(ethPromoHelpers(_to) == 0 && fishPromoHelpers(_to) == 0);\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {return balances[_owner];}\r\n}\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(ethPromoHelpers(_to) == 0 && fishPromoHelpers(_to) == 0);\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if(_subtractedValue > oldValue) {\r\n        allowed[msg.sender][_spender] = 0;} \r\n        else {allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);}\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n    address owner_;\r\n    constructor() public {owner_ = msg.sender;}\r\n    modifier onlyOwner() {require(msg.sender == owner_);_;}\r\n    function transferOwnership(address newOwner) public onlyOwner {require(newOwner != address(0));owner_ = newOwner;}\r\n    function owner() public view returns (address) {return owner_;}\r\n}\r\n\r\ncontract Factory is UppercaseCheck, StandardToken{\r\n    \r\n   uint contractCount = 0;\r\n   bytes16[2][] ethReceived;\r\n   mapping(bytes16 => address) promoCodeToContractAddress_;\r\n   mapping(address => uint) contractAddressToIndex;\r\n   \r\n   function returnEthReceived() public view returns (bytes16[2][]){return ethReceived;}\r\n   function promoCodeToContractAddress(bytes16 _input) public view returns (address){return promoCodeToContractAddress_[_input];}\r\n   \r\n   function getPromoCodeForEther(bytes16 PromoCode) external {\r\n       require(areAllUppercase(PromoCode));\r\n       require(promoCodeToContractAddress(PromoCode) == 0);\r\n       address myContract = new PromoContract(PromoCode);\r\n       promoCodeToContractAddress_[PromoCode] = myContract;\r\n       ethPromoHelpers_[myContract] = msg.sender;\r\n   }\r\n   function getPromoCodeForFish(bytes16 PromoCode) external {\r\n       require(areAllUppercase(PromoCode));\r\n       require(promoCodeToContractAddress(PromoCode) == 0);\r\n       address myContract = new PromoContract(PromoCode);\r\n       promoCodeToContractAddress_[PromoCode] = myContract;\r\n       fishPromoHelpers_[myContract] = msg.sender;\r\n   }\r\n}\r\n\r\ncontract Fish is Ownable, Factory{\r\n     \r\n    string public constant name = \"Fish\";\r\n    string public constant symbol = \"FISH\";\r\n    uint8 public constant decimals = 0;\r\n    \r\n    uint unitsOneEthCanBuy_ = 10000;\r\n    uint promoFishCommission_ = 100;\r\n    uint promoEthCommission_ = 40;\r\n    uint promoBonus_ = 20;\r\n    uint sizeBonus_ = 100;\r\n    \r\n    constructor() public{totalSupply_ = 0;}\r\n    function unitsOneEthCanBuy() public view returns (uint) {return unitsOneEthCanBuy_;}\r\n    function promoFishCommission() public view returns (uint) {return promoFishCommission_;}\r\n    function promoEthCommission() public view returns (uint) {return promoEthCommission_;}\r\n    function promoBonus() public view returns (uint) {return promoBonus_;}\r\n    function sizeBonus() public view returns (uint) {return sizeBonus_;}\r\n    function updateUnitsOneEthCanBuy(uint _unitsOneEthCanBuy) external onlyOwner {unitsOneEthCanBuy_ = _unitsOneEthCanBuy;}\r\n    function updatePromoFishCommission(uint _promoFishCommission) external onlyOwner {promoFishCommission_ = _promoFishCommission;}\r\n    function updatePromoEthCommission(uint _promoEthCommission) external onlyOwner {require(_promoEthCommission < 100);promoEthCommission_ = _promoEthCommission;}\r\n    function updatePromoBonus(uint _promoBonus) external onlyOwner{promoBonus_ = _promoBonus;}\r\n    function updateSizeBonus(uint _sizeBonus) external onlyOwner {sizeBonus_ = _sizeBonus;}\r\n\r\n   function() payable public{\r\n        owner().transfer(msg.value);\r\n        if(unitsOneEthCanBuy() == 0){return;}\r\n        uint256 amount =  msg.value.mul(unitsOneEthCanBuy()).mul(msg.value.mul(sizeBonus()).add(10**22)).div(10**40);\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n        totalSupply_ = totalSupply_.add(amount);\r\n        emit Transfer(address(this), msg.sender, amount); \r\n    }\r\n    \r\n   function getLostTokens(address _tokenContractAddress) public {\r\n        if(token(_tokenContractAddress).balanceOf(address(this)) != 0){\r\n        token(_tokenContractAddress).transfer(owner(), token(_tokenContractAddress).balanceOf(address(this)));}\r\n   }\r\n    \r\n   function sendToken(address _to, uint _value) external onlyOwner {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(ethPromoHelpers(_to)==0 && fishPromoHelpers(_to)==0);\r\n        balances[_to] = balances[_to].add(_value);\r\n        totalSupply_ = totalSupply_.add(_value);\r\n        emit Transfer(address(this), _to, _value); \r\n   }\r\n   \r\n   function delToken() external onlyOwner {\r\n        totalSupply_ = totalSupply_.sub(balances[msg.sender]);\r\n        emit Transfer(msg.sender, address(this), balances[msg.sender]); \r\n        balances[msg.sender] = 0;\r\n   }\r\n \r\n    function specialSend(uint amount, address buyer) external {\r\n        require(ethPromoHelpers(msg.sender) != 0 || fishPromoHelpers(msg.sender) != 0);\r\n        if(contractAddressToIndex[msg.sender] == 0){\r\n        ethReceived.push([token(msg.sender).promoCode(),bytes16(amount)]);\r\n        contractCount = contractCount.add(1);\r\n        contractAddressToIndex[msg.sender] = contractCount;}\r\n        else{ethReceived[contractAddressToIndex[msg.sender].sub(1)][1] = bytes16(  uint( ethReceived[contractAddressToIndex[msg.sender].sub(1)][1] ).add(amount));}\r\n        if(unitsOneEthCanBuy() == 0){return;}\r\n        uint amountFishToGive = amount.mul(unitsOneEthCanBuy()).mul(amount.mul(sizeBonus()).add(10**22)).mul(promoBonus().add(100)).div(10**42);\r\n        balances[buyer] = balances[buyer].add(amountFishToGive);\r\n        totalSupply_ = totalSupply_.add(amountFishToGive);\r\n        emit Transfer(address(this), buyer, amountFishToGive); \r\n        if(fishPromoHelpers(msg.sender) != 0 && promoFishCommission() != 0){\r\n        uint256 helperAmount = promoFishCommission().mul(amountFishToGive).div(100);\r\n        balances[fishPromoHelpers_[msg.sender]] = balances[fishPromoHelpers(msg.sender)].add(helperAmount);\r\n        totalSupply_ = totalSupply_.add(helperAmount);\r\n        emit Transfer(address(this), fishPromoHelpers(msg.sender), helperAmount);}  \r\n   }\r\n}\r\n\r\ncontract PromoContract{\r\n    using SafeMath for uint256;\r\n    \r\n    address masterContract = msg.sender;\r\n    bytes16 promoCode_;\r\n    \r\n    constructor(bytes16 _promoCode) public{promoCode_ = _promoCode;}\r\n    function promoCode() public view returns (bytes16){return promoCode_;}\r\n    function() payable public{\r\n        if(token(masterContract).ethPromoHelpers(address(this)) != 0 && token(masterContract).promoEthCommission() != 0){\r\n        uint amountToGive = token(masterContract).promoEthCommission().mul(msg.value).div(100);\r\n        token(masterContract).owner().transfer(msg.value.sub(amountToGive)); \r\n        token(masterContract).ethPromoHelpers(address(this)).transfer(amountToGive);}\r\n        else{token(masterContract).owner().transfer(msg.value);}\r\n        token(masterContract).specialSend(msg.value, msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"PromoCode\",\"type\":\"bytes16\"}],\"name\":\"getPromoCodeForEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"returnEthReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16[2][]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_input\",\"type\":\"bytes16\"}],\"name\":\"promoCodeToContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"PromoCode\",\"type\":\"bytes16\"}],\"name\":\"getPromoCodeForFish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sizeBonus\",\"type\":\"uint256\"}],\"name\":\"updateSizeBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitsOneEthCanBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sizeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_promoEthCommission\",\"type\":\"uint256\"}],\"name\":\"updatePromoEthCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_input\",\"type\":\"address\"}],\"name\":\"fishPromoHelpers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"delToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_promoFishCommission\",\"type\":\"uint256\"}],\"name\":\"updatePromoFishCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoFishCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_input\",\"type\":\"address\"}],\"name\":\"ethPromoHelpers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoEthCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unitsOneEthCanBuy\",\"type\":\"uint256\"}],\"name\":\"updateUnitsOneEthCanBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_promoBonus\",\"type\":\"uint256\"}],\"name\":\"updatePromoBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"specialSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"name\":\"getLostTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Fish","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://80d0e5d6923889fad2c04021d6eaaf7d4f3069b8d0da53856802ba6c663edeb7"}]}