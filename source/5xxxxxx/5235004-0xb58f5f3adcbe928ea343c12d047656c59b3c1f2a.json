{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface UnicornDividendTokenInterface {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function getHolder(uint256) external view returns (address);\r\n    function getHoldersCount() external view returns (uint256);\r\n}\r\n\r\ncontract DividendManager {\r\n    using SafeMath for uint256;\r\n\r\n    /* Our handle to the UnicornToken contract. */\r\n    UnicornDividendTokenInterface unicornDividendToken;\r\n\r\n    /* Handle payments we couldn't make. */\r\n    mapping (address => uint256) public pendingWithdrawals;\r\n\r\n    /* Indicates a payment is now available to a shareholder */\r\n    event WithdrawalAvailable(address indexed holder, uint256 amount);\r\n\r\n    /* Indicates a payment is payed to a shareholder */\r\n    event WithdrawalPayed(address indexed holder, uint256 amount);\r\n\r\n    /* Indicates a dividend payment was made. */\r\n    event DividendPayment(uint256 paymentPerShare);\r\n\r\n    /* Create our contract with references to other contracts as required. */\r\n    function DividendManager(address _unicornDividendToken) public{\r\n        /* Setup access to our other contracts and validate their versions */\r\n        unicornDividendToken = UnicornDividendTokenInterface(_unicornDividendToken);\r\n    }\r\n\r\n    uint256 public retainedEarning = 0;\r\n\r\n\r\n    // Makes a dividend payment - we make it available to all senders then send the change back to the caller.  We don't actually send the payments to everyone to reduce gas cost and also to\r\n    // prevent potentially getting into a situation where we have recipients throwing causing dividend failures and having to consolidate their dividends in a separate process.\r\n\r\n    function () public payable {\r\n        payDividend();\r\n    }\r\n\r\n    function payDividend() public payable {\r\n        retainedEarning = retainedEarning.add(msg.value);\r\n        require(retainedEarning > 0);\r\n\r\n        /* Determine how much to pay each shareholder. */\r\n        uint256 totalSupply = unicornDividendToken.totalSupply();\r\n        uint256 paymentPerShare = retainedEarning.div(totalSupply);\r\n        if (paymentPerShare > 0) {\r\n            uint256 totalPaidOut = 0;\r\n            /* Enum all accounts and send them payment */\r\n            for (uint256 i = 1; i <= unicornDividendToken.getHoldersCount(); i++) {\r\n                address holder = unicornDividendToken.getHolder(i);\r\n                uint256 withdrawal = paymentPerShare * unicornDividendToken.balanceOf(holder);\r\n                pendingWithdrawals[holder] = pendingWithdrawals[holder].add(withdrawal);\r\n                WithdrawalAvailable(holder, withdrawal);\r\n                totalPaidOut = totalPaidOut.add(withdrawal);\r\n            }\r\n            retainedEarning = retainedEarning.sub(totalPaidOut);\r\n        }\r\n        DividendPayment(paymentPerShare);\r\n    }\r\n\r\n    /* Allows a user to request a withdrawal of their dividend in full. */\r\n    function withdrawDividend() public {\r\n        uint amount = pendingWithdrawals[msg.sender];\r\n        require (amount > 0);\r\n        pendingWithdrawals[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n        WithdrawalPayed(msg.sender, amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"payDividend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"retainedEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_unicornDividendToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalAvailable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paymentPerShare\",\"type\":\"uint256\"}],\"name\":\"DividendPayment\",\"type\":\"event\"}]","ContractName":"DividendManager","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c6a5cc090b709ee71080effff3b0dddbd9d9d8e4","Library":"","SwarmSource":"bzzr://39894a694450773307b508ccc9c5bd208b7002ed2d1991cb043f794a4d13f5a4"}]}