{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * New Art\r\n *\r\n * An ERC721 compatible public registry with support for operators.\r\n * Vist https://www.newart.org for more information.\r\n *\r\n * Copyright NEW ART Co., Ltd.\r\n */\r\n\r\n\r\n/**\r\n * Interface for required functionality in the ERC721 standard\r\n * for non-fungible tokens.\r\n *\r\n * Author: Nadav Hollander (nadav at dharma.io)\r\n */\r\ncontract ERC721 {\r\n    // Function\r\n    function totalSupply() public view returns (uint256 _totalSupply);\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n    function ownerOf(uint _tokenId) public view returns (address _owner);\r\n    function approve(address _to, uint _tokenId) public;\r\n    function getApproved(uint _tokenId) public view returns (address _approved);\r\n    function transferFrom(address _from, address _to, uint _tokenId) public;\r\n    function transfer(address _to, uint _tokenId) public;\r\n    function implementsERC721() public view returns (bool _implementsERC721);\r\n\r\n    // Events\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n    // Optional Operator Extension\r\n    event AuthorizedOperator(address indexed _owner, address indexed _operator);\r\n    event RevokedOperator(address indexed _owner, address indexed _operator);\r\n    function authorizeOperator(address _operator) public;\r\n    function revokeOperator(address _operator) public;\r\n    function isOperatorFor(address _operator, address _owner) public constant returns (bool);\r\n}\r\n\r\n/**\r\n * Interface for optional functionality in the ERC721 standard\r\n * for non-fungible tokens.\r\n *\r\n * Author: Nadav Hollander (nadav at dharma.io)\r\n */\r\ncontract DetailedERC721 is ERC721 {\r\n    function name() public view returns (string _name);\r\n    function symbol() public view returns (string _symbol);\r\n    function tokenMetadata(uint _tokenId) public view returns (string _infoUrl);\r\n    function tokenOfOwnerByIndex(address _owner, uint _index) public view returns (uint _tokenId);\r\n}\r\n\r\n/**\r\n * @title NonFungibleToken\r\n *\r\n * Generic implementation for both required and optional functionality in\r\n * the ERC721 standard for non-fungible tokens.\r\n *\r\n * Heavily inspired by Decentraland's generic implementation:\r\n * https://github.com/decentraland/land/blob/master/contracts/BasicNFT.sol\r\n *\r\n * Standard Author: dete\r\n * Implementation Author: Nadav Hollander <nadav at dharma.io>\r\n */\r\ncontract NonFungibleToken is DetailedERC721 {\r\n    string public name;\r\n    string public symbol;\r\n\r\n    uint public numTokensTotal;\r\n\r\n    mapping(uint => address) internal tokenIdToOwner;\r\n    mapping(uint => address) internal tokenIdToApprovedAddress;\r\n    mapping(uint => string) internal tokenIdToMetadata;\r\n    mapping(address => uint[]) internal ownerToTokensOwned;\r\n    mapping(uint => uint) internal tokenIdToOwnerArrayIndex;\r\n    mapping(address => mapping(address => bool)) internal ownerToOperators;\r\n\r\n    modifier onlyExtantToken(uint _tokenId) {\r\n        require(ownerOf(_tokenId) != address(0));\r\n        _;\r\n    }\r\n\r\n    function name()\r\n        public\r\n        view\r\n        returns (string _name)\r\n    {\r\n        return name;\r\n    }\r\n\r\n    function symbol()\r\n        public\r\n        view\r\n        returns (string _symbol)\r\n    {\r\n        return symbol;\r\n    }\r\n\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256 _totalSupply)\r\n    {\r\n        return numTokensTotal;\r\n    }\r\n\r\n    function balanceOf(address _owner)\r\n        public\r\n        view\r\n        returns (uint _balance)\r\n    {\r\n        return ownerToTokensOwned[_owner].length;\r\n    }\r\n\r\n    function ownerOf(uint _tokenId)\r\n        public\r\n        view\r\n        returns (address _owner)\r\n    {\r\n        return _ownerOf(_tokenId);\r\n    }\r\n\r\n    function tokenMetadata(uint _tokenId)\r\n        public\r\n        view\r\n        returns (string _infoUrl)\r\n    {\r\n        return tokenIdToMetadata[_tokenId];\r\n    }\r\n\r\n    function approve(address _to, uint _tokenId)\r\n        public\r\n        onlyExtantToken(_tokenId)\r\n    {\r\n        require(msg.sender == ownerOf(_tokenId) || isOperatorFor(msg.sender, ownerOf(_tokenId)));\r\n        require(msg.sender != _to);\r\n\r\n        if (_getApproved(_tokenId) != address(0) ||\r\n                _to != address(0)) {\r\n            _approve(_to, _tokenId);\r\n            Approval(msg.sender, _to, _tokenId);\r\n        }\r\n    }\r\n\r\n    function authorizeOperator(address _operator) public {\r\n      ownerToOperators[msg.sender][_operator] = true;\r\n      AuthorizedOperator(msg.sender, _operator);\r\n    }\r\n\r\n    function revokeOperator(address _operator) public {\r\n      ownerToOperators[msg.sender][_operator] = false;\r\n      RevokedOperator(msg.sender, _operator);\r\n    }\r\n\r\n    function isOperatorFor(address _operator, address _owner) public constant returns (bool) {\r\n      return ownerToOperators[_owner][_operator];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _tokenId)\r\n        public\r\n        onlyExtantToken(_tokenId)\r\n    {\r\n        require(getApproved(_tokenId) == msg.sender);\r\n        require(ownerOf(_tokenId) == _from);\r\n        require(_to != address(0));\r\n\r\n        _clearApprovalAndTransfer(_from, _to, _tokenId);\r\n\r\n        Approval(_from, 0, _tokenId);\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function transfer(address _to, uint _tokenId)\r\n        public\r\n        onlyExtantToken(_tokenId)\r\n    {\r\n        require(ownerOf(_tokenId) == msg.sender || isOperatorFor(msg.sender, ownerOf(_tokenId)));\r\n        require(_to != address(0));\r\n\r\n        _clearApprovalAndTransfer(msg.sender, _to, _tokenId);\r\n\r\n        Approval(msg.sender, 0, _tokenId);\r\n        Transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint _index)\r\n        public\r\n        view\r\n        returns (uint _tokenId)\r\n    {\r\n        return _getOwnerTokenByIndex(_owner, _index);\r\n    }\r\n\r\n    function getOwnerTokens(address _owner)\r\n        public\r\n        view\r\n        returns (uint[] _tokenIds)\r\n    {\r\n        return _getOwnerTokens(_owner);\r\n    }\r\n\r\n    function implementsERC721()\r\n        public\r\n        view\r\n        returns (bool _implementsERC721)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    function getApproved(uint _tokenId)\r\n        public\r\n        view\r\n        returns (address _approved)\r\n    {\r\n        return _getApproved(_tokenId);\r\n    }\r\n\r\n    function approvedFor(uint _tokenId)\r\n        public\r\n        view\r\n        returns (address _approved)\r\n    {\r\n        return _getApproved(_tokenId);\r\n    }\r\n\r\n    function _clearApprovalAndTransfer(address _from, address _to, uint _tokenId)\r\n        internal\r\n    {\r\n        _clearTokenApproval(_tokenId);\r\n        _removeTokenFromOwnersList(_from, _tokenId);\r\n        _setTokenOwner(_tokenId, _to);\r\n        _addTokenToOwnersList(_to, _tokenId);\r\n    }\r\n\r\n    function _ownerOf(uint _tokenId)\r\n        internal\r\n        view\r\n        returns (address _owner)\r\n    {\r\n        return tokenIdToOwner[_tokenId];\r\n    }\r\n\r\n    function _approve(address _to, uint _tokenId)\r\n        internal\r\n    {\r\n        tokenIdToApprovedAddress[_tokenId] = _to;\r\n    }\r\n\r\n    function _getApproved(uint _tokenId)\r\n        internal\r\n        view\r\n        returns (address _approved)\r\n    {\r\n        return tokenIdToApprovedAddress[_tokenId];\r\n    }\r\n\r\n    function _getOwnerTokens(address _owner)\r\n        internal\r\n        view\r\n        returns (uint[] _tokens)\r\n    {\r\n        return ownerToTokensOwned[_owner];\r\n    }\r\n\r\n    function _getOwnerTokenByIndex(address _owner, uint _index)\r\n        internal\r\n        view\r\n        returns (uint _tokens)\r\n    {\r\n        return ownerToTokensOwned[_owner][_index];\r\n    }\r\n\r\n    function _clearTokenApproval(uint _tokenId)\r\n        internal\r\n    {\r\n        tokenIdToApprovedAddress[_tokenId] = address(0);\r\n    }\r\n\r\n    function _setTokenOwner(uint _tokenId, address _owner)\r\n        internal\r\n    {\r\n        tokenIdToOwner[_tokenId] = _owner;\r\n    }\r\n\r\n    function _addTokenToOwnersList(address _owner, uint _tokenId)\r\n        internal\r\n    {\r\n        ownerToTokensOwned[_owner].push(_tokenId);\r\n        tokenIdToOwnerArrayIndex[_tokenId] = ownerToTokensOwned[_owner].length - 1;\r\n    }\r\n\r\n    function _removeTokenFromOwnersList(address _owner, uint _tokenId)\r\n        internal\r\n    {\r\n        uint length = ownerToTokensOwned[_owner].length;\r\n        uint index = tokenIdToOwnerArrayIndex[_tokenId];\r\n        uint swapToken = ownerToTokensOwned[_owner][length - 1];\r\n\r\n        ownerToTokensOwned[_owner][index] = swapToken;\r\n        tokenIdToOwnerArrayIndex[swapToken] = index;\r\n\r\n        delete ownerToTokensOwned[_owner][length - 1];\r\n        ownerToTokensOwned[_owner].length--;\r\n    }\r\n\r\n    function _insertTokenMetadata(uint _tokenId, string _metadata)\r\n        internal\r\n    {\r\n        tokenIdToMetadata[_tokenId] = _metadata;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title MintableNonFungibleToken\r\n *\r\n * Superset of the ERC721 standard that allows for the minting\r\n * of non-fungible tokens.\r\n */\r\ncontract MintableNonFungibleToken is NonFungibleToken {\r\n    using SafeMath for uint;\r\n\r\n    event Mint(address indexed _to, uint256 indexed _tokenId);\r\n\r\n    modifier onlyNonexistentToken(uint _tokenId) {\r\n        require(tokenIdToOwner[_tokenId] == address(0));\r\n        _;\r\n    }\r\n\r\n    function mint(address _owner, uint256 _tokenId, address _approvedAddress, string _metadata)\r\n        public\r\n        onlyNonexistentToken(_tokenId)\r\n    {\r\n        _setTokenOwner(_tokenId, _owner);\r\n        _addTokenToOwnersList(_owner, _tokenId);\r\n        _approve(_approvedAddress, _tokenId);\r\n        _insertTokenMetadata(_tokenId, _metadata);\r\n\r\n        numTokensTotal = numTokensTotal.add(1);\r\n\r\n        Mint(_owner, _tokenId);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"_approved\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"_implementsERC721\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"_approved\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"_infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_approvedAddress\",\"type\":\"address\"},{\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numTokensTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerTokens\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"}]","ContractName":"MintableNonFungibleToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e20a237af2553f310e5606bed4e36c7a54488f4e2db92562baa5455b8266661f"}]}