{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract LowRiskBag {\r\n  using SafeMath for uint256;\r\n\r\n  address contractOwner;\r\n  uint tokenStartPrice = 0.001 ether;\r\n  uint tokenPrice;\r\n  address tokenOwner;\r\n  uint lastBuyBlock;\r\n  uint newRoundDelay = 40;\r\n  event Transfer(address indexed from, address indexed to, uint256 price);\r\n  event NewRound();\r\n    \r\n\r\n  function LowRiskBag() public {\r\n    contractOwner = msg.sender;\r\n    tokenOwner = address(0);\r\n    lastBuyBlock = block.number; \r\n    tokenPrice = tokenStartPrice;\r\n  }\r\n\r\n  function changeContractOwner(address newOwner) public {\r\n    require(contractOwner == msg.sender);\r\n    contractOwner = newOwner;\r\n  }\r\n  function changeStartPrice(uint price) public {\r\n    require(contractOwner == msg.sender);\r\n    tokenStartPrice = price;\r\n  }\r\n    \r\n  function changeNewRoundDelay(uint delay) public {\r\n    require(contractOwner == msg.sender);\r\n    newRoundDelay = delay;\r\n  }\r\n  \r\n  function buyToken() public payable {\r\n    address currentOwner = tokenOwner;\r\n    uint256 currentPrice = tokenPrice;\r\n\r\n    require(currentOwner != msg.sender);\r\n    require(msg.value >= currentPrice);\r\n    require(currentPrice > 0);\r\n\r\n    uint256 paidTooMuch = msg.value.sub(currentPrice);\r\n    uint256 payment = currentPrice.div(2);\r\n    \r\n    tokenPrice = currentPrice.mul(110).div(50);\r\n    tokenOwner = msg.sender;\r\n    lastBuyBlock = block.number;\r\n\r\n    Transfer(currentOwner, msg.sender, currentPrice);\r\n    if (currentOwner != address(0))\r\n      currentOwner.transfer(payment);\r\n    if (paidTooMuch > 0)\r\n      msg.sender.transfer(paidTooMuch);\r\n  }\r\n\r\n  function getBlocksToNextRound() public view returns(uint) {\r\n    if (lastBuyBlock + newRoundDelay < block.number)\r\n      return 0;\r\n    return lastBuyBlock + newRoundDelay + 1 - block.number;\r\n  }\r\n\r\n  function getCurrentData() public view returns (uint price, uint nextPrice, uint pool, uint nextPool, address owner, bool canFinish) {\r\n    owner = tokenOwner;\r\n    pool = tokenPrice.mul(50).div(110).mul(85).div(100);\r\n    nextPool = tokenPrice.mul(85).div(100);\r\n    price = tokenPrice;\r\n    nextPrice = price.mul(110).div(50);\r\n    if (getBlocksToNextRound() == 0)\r\n      canFinish = true;\r\n    else\r\n      canFinish = false;\r\n  }\r\n\r\n  function finishRound() public {\r\n    require(tokenPrice > tokenStartPrice);\r\n    require(tokenOwner == msg.sender || lastBuyBlock + newRoundDelay < block.number);\r\n    lastBuyBlock = block.number;\r\n    uint payout = tokenPrice.mul(50).div(110).mul(85).div(100); // 85% of last paid price\r\n    address owner = tokenOwner;\r\n    tokenPrice = tokenStartPrice;\r\n    tokenOwner = address(0);\r\n    owner.transfer(payout);\r\n    NewRound();\r\n  }\r\n\r\n  function payout(uint amount) public {\r\n    require(contractOwner == msg.sender);\r\n    uint balance = this.balance;\r\n    if (tokenPrice > tokenStartPrice)\r\n      balance -= tokenPrice.mul(50).div(110).mul(85).div(100); // payout for tokenOwner cant be paid out from contract owner\r\n    if (amount>balance)\r\n      amount = balance;\r\n    contractOwner.transfer(amount);\r\n  }\r\n  \r\n  function getBalance() public view returns(uint balance) {\r\n    balance = this.balance;\r\n    if (tokenPrice > tokenStartPrice)\r\n      balance -= tokenPrice.mul(50).div(110).mul(85).div(100); // payout for tokenOwner cant be paid out from contract owner\r\n      \r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeContractOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentData\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"nextPrice\",\"type\":\"uint256\"},{\"name\":\"pool\",\"type\":\"uint256\"},{\"name\":\"nextPool\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"canFinish\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"changeNewRoundDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"changeStartPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlocksToNextRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NewRound\",\"type\":\"event\"}]","ContractName":"LowRiskBag","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2a700002f2e0c183785bafbcb55ac9d2931f0592e59e1bf15faf7483cf0babc4"}]}