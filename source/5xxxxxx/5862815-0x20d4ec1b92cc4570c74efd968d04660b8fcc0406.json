{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public{\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract HasNoTokens is Ownable {\r\n    event ExtractedTokens(address indexed _token, address indexed _claimer, uint _amount);\r\n\r\n    function extractTokens(address _token, address _claimer) onlyOwner public {\r\n        if (_token == 0x0) {\r\n            _claimer.transfer(this.balance);\r\n            return;\r\n        }\r\n\r\n        ERC20 token = ERC20(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(_claimer, balance);\r\n        ExtractedTokens(_token, _claimer, balance);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n    function totalSupply () view public returns (uint256 supply);\r\n    function balanceOf (address _owner) view public returns (uint256 balance);\r\n    function transfer (address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom (address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve (address _spender, uint256 _value) public returns (bool success);\r\n    function allowance (address _owner, address _spender) view public returns (uint256 remaining);\r\n\r\n    event Transfer (address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval (address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract AbstractToken is Token {\r\n    using SafeMath for uint;\r\n\r\n    function AbstractToken () public payable{\r\n        \r\n    }\r\n\r\n    function balanceOf (address _owner) view public returns (uint256 balance) {\r\n        return accounts[_owner];\r\n    }\r\n\r\n    function transfer (address _to, uint256 _value) public returns (bool success) {\r\n        uint256 fromBalance = accounts[msg.sender];\r\n        if (fromBalance < _value) return false;\r\n        if (_value > 0 && msg.sender != _to) {\r\n            accounts[msg.sender] = fromBalance.sub(_value);\r\n            accounts[_to] = accounts[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transferFrom (address _from, address _to, uint256 _value) public returns (bool success) {\r\n        uint256 spenderAllowance = allowances[_from][msg.sender];\r\n        if (spenderAllowance < _value) return false;\r\n        uint256 fromBalance = accounts[_from];\r\n        if (fromBalance < _value) return false;\r\n\r\n        allowances[_from][msg.sender] = spenderAllowance.sub(_value);\r\n\r\n        if (_value > 0 && _from != _to) {\r\n            accounts[_from] = fromBalance.sub(_value);\r\n            accounts[_to] = accounts[_to].add(_value);\r\n            Transfer(_from, _to, _value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function approve (address _spender, uint256 _value) public returns (bool success) {\r\n        allowances[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance (address _owner, address _spender) view public returns (uint256 remaining) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) accounts;\r\n\r\n    mapping (address => mapping (address => uint256)) private allowances;\r\n}\r\n\r\ncontract AbstractVirtualToken is AbstractToken {\r\n    using SafeMath for uint;\r\n\r\n    uint256 constant MAXIMUM_TOKENS_COUNT = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    uint256 constant BALANCE_MASK = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    uint256 constant MATERIALIZED_FLAG_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    function AbstractVirtualToken () public{\r\n        \r\n    }\r\n\r\n    function totalSupply () view public returns (uint256 supply) {\r\n        return tokensCount;\r\n    }\r\n\r\n    function balanceOf (address _owner) constant public returns (uint256 balance) { \r\n        return (accounts[_owner] & BALANCE_MASK).add(getVirtualBalance(_owner));\r\n    }\r\n\r\n    function transfer (address _to, uint256 _value) public returns (bool success) {\r\n        if (_value > balanceOf(msg.sender)) return false;\r\n        else {\r\n            materializeBalanceIfNeeded(msg.sender, _value);\r\n            return AbstractToken.transfer(_to, _value);\r\n        }\r\n    }\r\n\r\n    function transferFrom (address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (_value > allowance(_from, msg.sender)) return false;\r\n        if (_value > balanceOf(_from)) return false;\r\n        else {\r\n            materializeBalanceIfNeeded(_from, _value);\r\n            return AbstractToken.transferFrom(_from, _to, _value);\r\n        }\r\n    }\r\n\r\n    function virtualBalanceOf (address _owner) internal view returns (uint256 _virtualBalance);\r\n\r\n    function getVirtualBalance (address _owner) private view returns (uint256 _virtualBalance) {\r\n        if (accounts [_owner] & MATERIALIZED_FLAG_MASK != 0) return 0;\r\n        else {\r\n            _virtualBalance = virtualBalanceOf(_owner);\r\n            uint256 maxVirtualBalance = MAXIMUM_TOKENS_COUNT.sub(tokensCount);\r\n            if (_virtualBalance > maxVirtualBalance)\r\n                _virtualBalance = maxVirtualBalance;\r\n        }\r\n    }\r\n\r\n    function materializeBalanceIfNeeded (address _owner, uint256 _value) private {\r\n        uint256 storedBalance = accounts[_owner];\r\n        if (storedBalance & MATERIALIZED_FLAG_MASK == 0) {\r\n            if (_value > storedBalance) {\r\n                uint256 virtualBalance = getVirtualBalance(_owner);\r\n                require (_value.sub(storedBalance) <= virtualBalance);\r\n                accounts[_owner] = MATERIALIZED_FLAG_MASK | storedBalance.add(virtualBalance);\r\n                tokensCount = tokensCount.add(virtualBalance);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 tokensCount;\r\n}\r\n\r\ncontract PornLoversToken is HasNoTokens, AbstractVirtualToken {\r\n    \r\n    uint256 private constant VIRTUAL_THRESHOLD = 0.1 ether;\r\n    uint256 private constant VIRTUAL_COUNT = 91;\r\n\r\n    event LogBonusSet(address indexed _address, uint256 _amount);\r\n\r\n    function virtualBalanceOf(address _owner) internal view returns (uint256) {\r\n        return _owner.balance >= VIRTUAL_THRESHOLD ? VIRTUAL_COUNT : 0;\r\n    }\r\n\r\n    function name() public pure returns (string result) {\r\n        return \"91porn.com\";\r\n    }\r\n\r\n    function symbol() public pure returns (string result) {\r\n        return \"91porn\";\r\n    }\r\n\r\n    function decimals() public pure returns (uint8 result) {\r\n        return 0;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        bool success = super.transfer(_to, _value); \r\n        return success;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        bool success = super.transferFrom(_from, _to, _value);\r\n\r\n        return success;\r\n    }\r\n\r\n    function massNotify(address[] _owners) public onlyOwner {\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            Transfer(address(0), _owners[i], VIRTUAL_COUNT);\r\n        }\r\n    }\r\n\r\n    function kill() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"}],\"name\":\"massNotify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"extractTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogBonusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ExtractedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PornLoversToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8f2c4828255b7a64994f3a3bd3daca5ba759785d88d4027a2a01fc25e3ca5059"}]}