{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n\r\ncontract AccessControl {\r\n    address public creatorAddress;\r\n    uint16 public totalSeraphims = 0;\r\n    mapping (address => bool) public seraphims;\r\n\r\n    bool public isMaintenanceMode = true;\r\n \r\n    modifier onlyCREATOR() {\r\n        require(msg.sender == creatorAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlySERAPHIM() {\r\n        require(seraphims[msg.sender] == true);\r\n        _;\r\n    }\r\n    \r\n    modifier isContractActive {\r\n        require(!isMaintenanceMode);\r\n        _;\r\n    }\r\n    \r\n    // Constructor\r\n    function AccessControl() public {\r\n        creatorAddress = msg.sender;\r\n    }\r\n    \r\n\r\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\r\n        if (seraphims[_newSeraphim] == false) {\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims += 1;\r\n        }\r\n    }\r\n    \r\n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\r\n        if (seraphims[_oldSeraphim] == true) {\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }\r\n    }\r\n\r\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\r\n        isMaintenanceMode = _isMaintaining;\r\n    }\r\n\r\n  \r\n} \r\ncontract SafeMath {\r\n    function safeAdd(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint x, uint y) pure internal returns(uint) {\r\n      assert(x >= y);\r\n      uint z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n    \r\n     \r\n\r\n    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\r\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\r\n        return uint8(genNum % (maxRandom - min + 1)+min);\r\n    }\r\n}\r\n\r\ncontract Enums {\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_OWNER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n\r\n    enum AngelAura { \r\n        Blue, \r\n        Yellow, \r\n        Purple, \r\n        Orange, \r\n        Red, \r\n        Green \r\n    }\r\n}\r\n\r\n\r\ncontract IPetCardData is AccessControl, Enums {\r\n    uint8 public totalPetCardSeries;    \r\n    uint64 public totalPets;\r\n    \r\n    // write\r\n    function createPetCardSeries(uint8 _petCardSeriesId, uint32 _maxTotal) onlyCREATOR public returns(uint8);\r\n    function setPet(uint8 _petCardSeriesId, address _owner, string _name, uint8 _luck, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue) onlySERAPHIM external returns(uint64);\r\n    function setPetAuras(uint64 _petId, uint8 _auraRed, uint8 _auraBlue, uint8 _auraYellow) onlySERAPHIM external;\r\n    function setPetLastTrainingTime(uint64 _petId) onlySERAPHIM external;\r\n    function setPetLastBreedingTime(uint64 _petId) onlySERAPHIM external;\r\n    function addPetIdMapping(address _owner, uint64 _petId) private;\r\n    function transferPet(address _from, address _to, uint64 _petId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerPetTransfer (address _to, uint64 _petId)  public;\r\n    function setPetName(string _name, uint64 _petId) public;\r\n\r\n    // read\r\n    function getPetCardSeries(uint8 _petCardSeriesId) constant public returns(uint8 petCardSeriesId, uint32 currentPetTotal, uint32 maxPetTotal);\r\n    function getPet(uint _petId) constant public returns(uint petId, uint8 petCardSeriesId, string name, uint8 luck, uint16 auraRed, uint16 auraBlue, uint16 auraYellow, uint64 lastTrainingTime, uint64 lastBreedingTime, address owner);\r\n    function getOwnerPetCount(address _owner) constant public returns(uint);\r\n    function getPetByIndex(address _owner, uint _index) constant public returns(uint);\r\n    function getTotalPetCardSeries() constant public returns (uint8);\r\n    function getTotalPets() constant public returns (uint);\r\n}\r\n\r\ncontract RetirePets is AccessControl, SafeMath {\r\n\r\n  \r\n   \r\n    address public petCardDataContract = 0xB340686da996b8B3d486b4D27E38E38500A9E926;\r\n\r\n\r\n   \r\n    // events\r\n   \r\n    event EventNewPet(uint64 petID);\r\n\r\n  \r\n\r\n\r\n\r\n    // write functions\r\n    function DataContacts( address _petCardDataContract) onlyCREATOR external {\r\n        petCardDataContract = _petCardDataContract;\r\n      \r\n    }\r\n    \r\n\r\n       \r\n    function checkPet (uint64  petID) private constant returns (uint8) {\r\n              IPetCardData petCardData = IPetCardData(petCardDataContract);\r\n              \r\n        //check if a pet both exists and is owned by the message sender.\r\n        // This function also returns the petcardSeriesID. \r\n     \r\n        if ((petID <= 0) || (petID > petCardData.getTotalPets())) {return 0;}\r\n        \r\n        address petowner;\r\n        uint8 petcardSeriesID;\r\n     \r\n      (,petcardSeriesID,,,,,,,,petowner) = petCardData.getPet(petID);\r\n    \r\n         if  (petowner != msg.sender)  {return 0;}\r\n        \r\n        return petcardSeriesID;\r\n        \r\n        \r\n}\r\n     function retireWildEasy(uint64 pet1, uint64 pet2, uint64 pet3, uint64 pet4, uint64 pet5, uint64 pet6) public {\r\n            IPetCardData petCardData = IPetCardData(petCardDataContract);\r\n         // Send this function the petIds of 6 of your Wild Easy (2 star pets) to receive 1 3 star pet. \r\n         \r\n         //won't throw an error if you send a level3 pet, but will still recycle. This is to reduce gas costs for everyone. \r\n         if (checkPet(pet1) <5) {revert();}\r\n         if (checkPet(pet2) <5) {revert();}\r\n         if (checkPet(pet3) <5) {revert();}\r\n         if (checkPet(pet4) <5) {revert();}\r\n         if (checkPet(pet5) <5) {revert();}\r\n         if (checkPet(pet6) <5) {revert();}\r\n         \r\n       petCardData.transferPet(msg.sender, address(0), pet1);\r\n       petCardData.transferPet(msg.sender, address(0), pet2);\r\n       petCardData.transferPet(msg.sender, address(0), pet3);\r\n       petCardData.transferPet(msg.sender, address(0), pet4);\r\n       petCardData.transferPet(msg.sender, address(0), pet5);\r\n       petCardData.transferPet(msg.sender, address(0), pet6);\r\n         uint8 _newLuck = getRandomNumber(39,30,msg.sender);\r\n        getNewPetCard(getRandomNumber(12,9,msg.sender), _newLuck);\r\n         \r\n     }\r\n\r\n    function retireWildHard(uint64 pet1, uint64 pet2, uint64 pet3, uint64 pet4, uint64 pet5, uint64 pet6) public {\r\n            IPetCardData petCardData = IPetCardData(petCardDataContract);\r\n         // Send this function the petIds of 6 of your Wild Hard (3 star pets) to receive 1 four star pet. \r\n         \r\n        \r\n         if (checkPet(pet1) <9) {revert();}\r\n         if (checkPet(pet2) <9) {revert();}\r\n         if (checkPet(pet3) <9) {revert();}\r\n         if (checkPet(pet4) <9) {revert();}\r\n         if (checkPet(pet5) <9) {revert();}\r\n         if (checkPet(pet6) <9) {revert();}\r\n         \r\n       petCardData.transferPet(msg.sender, address(0), pet1);\r\n       petCardData.transferPet(msg.sender, address(0), pet2);\r\n       petCardData.transferPet(msg.sender, address(0), pet3);\r\n       petCardData.transferPet(msg.sender, address(0), pet4);\r\n       petCardData.transferPet(msg.sender, address(0), pet5);\r\n       petCardData.transferPet(msg.sender, address(0), pet6);\r\n       uint8 _newLuck = getRandomNumber(49,40,msg.sender);\r\n        getNewPetCard(getRandomNumber(16,13,msg.sender), _newLuck);\r\n         \r\n     }\r\n\r\n\r\n    \r\n   function getNewPetCard(uint8 opponentId, uint8 _luck) private {\r\n        uint16 _auraRed = 0;\r\n        uint16 _auraYellow = 0;\r\n        uint16 _auraBlue = 0;\r\n        \r\n        uint32 _auraColor = getRandomNumber(2,0,msg.sender);\r\n        if (_auraColor == 0) { _auraRed = 14;}\r\n        if (_auraColor == 1) { _auraYellow = 14;}\r\n        if (_auraColor == 2) { _auraBlue = 14;}\r\n        \r\n      \r\n        IPetCardData petCardData = IPetCardData(petCardDataContract);\r\n        uint64 petId = petCardData.setPet(opponentId, msg.sender, 'Rover', _luck, _auraRed, _auraYellow, _auraBlue);\r\n        EventNewPet(petId);\r\n        }\r\n\r\n\r\n \r\n      function kill() onlyCREATOR external {\r\n        selfdestruct(creatorAddress);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"seraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"updateMaintenanceMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"maxRandom\",\"type\":\"uint16\"},{\"name\":\"min\",\"type\":\"uint8\"},{\"name\":\"privateAddress\",\"type\":\"address\"}],\"name\":\"getRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pet1\",\"type\":\"uint64\"},{\"name\":\"pet2\",\"type\":\"uint64\"},{\"name\":\"pet3\",\"type\":\"uint64\"},{\"name\":\"pet4\",\"type\":\"uint64\"},{\"name\":\"pet5\",\"type\":\"uint64\"},{\"name\":\"pet6\",\"type\":\"uint64\"}],\"name\":\"retireWildEasy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintenanceMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldSeraphim\",\"type\":\"address\"}],\"name\":\"removeSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"petCardDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pet1\",\"type\":\"uint64\"},{\"name\":\"pet2\",\"type\":\"uint64\"},{\"name\":\"pet3\",\"type\":\"uint64\"},{\"name\":\"pet4\",\"type\":\"uint64\"},{\"name\":\"pet5\",\"type\":\"uint64\"},{\"name\":\"pet6\",\"type\":\"uint64\"}],\"name\":\"retireWildHard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSeraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_petCardDataContract\",\"type\":\"address\"}],\"name\":\"DataContacts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSeraphim\",\"type\":\"address\"}],\"name\":\"addSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"petID\",\"type\":\"uint64\"}],\"name\":\"EventNewPet\",\"type\":\"event\"}]","ContractName":"RetirePets","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2b370b2128b732d52cf1b56b7183acdb9fa7c67cc747985f5ccda4371083e62d"}]}