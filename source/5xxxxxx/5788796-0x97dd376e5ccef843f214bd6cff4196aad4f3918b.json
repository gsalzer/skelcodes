{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface TokenInterface {\r\n     function totalSupply() external constant returns (uint);\r\n     function balanceOf(address tokenOwner) external constant returns (uint balance);\r\n     function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\r\n     function transfer(address to, uint tokens) external returns (bool success);\r\n     function approve(address spender, uint tokens) external returns (bool success);\r\n     function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n     function burn(uint256 _value) external; \r\n     event Transfer(address indexed from, address indexed to, uint tokens);\r\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n     event Burn(address indexed burner, uint256 value);\r\n}\r\n\r\n contract URUNCrowdsale is Ownable{\r\n  using SafeMath for uint256;\r\n \r\n  // The token being sold\r\n  TokenInterface public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public ratePerWei = 800;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  uint256 public TOKENS_SOLD;\r\n  uint256 public TOKENS_BOUGHT;\r\n  \r\n  uint256 public minimumContributionPhase1;\r\n  uint256 public minimumContributionPhase2;\r\n  uint256 public minimumContributionPhase3;\r\n  uint256 public minimumContributionPhase4;\r\n  uint256 public minimumContributionPhase5;\r\n  uint256 public minimumContributionPhase6;\r\n  \r\n  uint256 public maxTokensToSaleInClosedPreSale;\r\n  \r\n  uint256 public bonusInPhase1;\r\n  uint256 public bonusInPhase2;\r\n  uint256 public bonusInPhase3;\r\n  uint256 public bonusInPhase4;\r\n  uint256 public bonusInPhase5;\r\n  uint256 public bonusInPhase6;\r\n  \r\n  \r\n  bool public isCrowdsalePaused = false;\r\n  \r\n  uint256 public totalDurationInDays = 123 days;\r\n  \r\n  \r\n  struct userInformation {\r\n      address userAddress;\r\n      uint tokensToBeSent;\r\n      uint ethersToBeSent;\r\n      bool isKYCApproved;\r\n      bool recurringBuyer;\r\n  }\r\n  \r\n  event usersAwaitingTokens(address[] users);\r\n  mapping(address=>userInformation) usersBuyingInformation;\r\n  address[] allUsers;\r\n  address[] u;\r\n  userInformation info;\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n   \r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  constructor(uint256 _startTime, address _wallet, address _tokenAddress) public \r\n  {\r\n    require(_wallet != 0x0);\r\n    require(_startTime >=now);\r\n    startTime = _startTime;  \r\n    endTime = startTime + totalDurationInDays;\r\n    require(endTime >= startTime);\r\n   \r\n    owner = _wallet;\r\n    \r\n    bonusInPhase1 = 30;\r\n    bonusInPhase2 = 20;\r\n    bonusInPhase3 = 15;\r\n    bonusInPhase4 = 10;\r\n    bonusInPhase5 = 75;\r\n    bonusInPhase6 = 5;\r\n    \r\n    minimumContributionPhase1 = uint(3).mul(10 ** 17); //0.3 eth is the minimum contribution in presale phase 1\r\n    minimumContributionPhase2 = uint(5).mul(10 ** 16); //0.05 eth is the minimum contribution in presale phase 2\r\n    minimumContributionPhase3 = uint(5).mul(10 ** 16); //0.05 eth is the minimum contribution in presale phase 3\r\n    minimumContributionPhase4 = uint(5).mul(10 ** 16); //0.05 eth is the minimum contribution in presale phase 4\r\n    minimumContributionPhase5 = uint(5).mul(10 ** 16); //0.05 eth is the minimum contribution in presale phase 5\r\n    minimumContributionPhase6 = uint(5).mul(10 ** 16); //0.05 eth is the minimum contribution in presale phase 6\r\n    \r\n    token = TokenInterface(_tokenAddress);\r\n  }\r\n  \r\n  \r\n   // fallback function can be used to buy tokens\r\n   function () public  payable {\r\n     buyTokens(msg.sender);\r\n    }\r\n    \r\n    function determineBonus(uint tokens, uint ethersSent) internal view returns (uint256 bonus) \r\n    {\r\n        uint256 timeElapsed = now - startTime;\r\n        uint256 timeElapsedInDays = timeElapsed.div(1 days);\r\n        \r\n        //phase 1 (16 days)\r\n        if (timeElapsedInDays <16)\r\n        {\r\n            require(ethersSent>=minimumContributionPhase1);\r\n            bonus = tokens.mul(bonusInPhase1); \r\n            bonus = bonus.div(100);\r\n        }\r\n        //phase 2 (31 days)\r\n        else if (timeElapsedInDays >=16 && timeElapsedInDays <47)\r\n        {\r\n            require(ethersSent>=minimumContributionPhase2);\r\n            bonus = tokens.mul(bonusInPhase2); \r\n            bonus = bonus.div(100);\r\n        }\r\n         //phase 3 (15 days)\r\n        else if (timeElapsedInDays >=47 && timeElapsedInDays <62)\r\n        {\r\n            require(ethersSent>=minimumContributionPhase3);\r\n            bonus = tokens.mul(bonusInPhase3); \r\n            bonus = bonus.div(100);\r\n        }\r\n        //(16 days) -- break\r\n        else if (timeElapsedInDays >=62 && timeElapsedInDays <78)\r\n        {\r\n           revert();\r\n        }\r\n        //phase 5 (15 days) \r\n        else if (timeElapsedInDays >=78 && timeElapsedInDays <93)\r\n        {\r\n            require(ethersSent>=minimumContributionPhase4);\r\n            bonus = tokens.mul(bonusInPhase4); \r\n            bonus = bonus.div(100);\r\n        }\r\n        //phase 6 (15 days)\r\n        else if (timeElapsedInDays >=93 && timeElapsedInDays <108)\r\n        {\r\n            require(ethersSent>=minimumContributionPhase5);\r\n            bonus = tokens.mul(bonusInPhase5); \r\n            bonus = bonus.div(10);  //to cater for the 7.5 figure\r\n            bonus = bonus.div(100);\r\n        }\r\n         //phase 7 (15 days) \r\n        else if (timeElapsedInDays >=108 && timeElapsedInDays <123)\r\n        {\r\n            require(ethersSent>=minimumContributionPhase6);\r\n            bonus = tokens.mul(bonusInPhase6); \r\n            bonus = bonus.div(100);\r\n        }\r\n        else \r\n        {\r\n            bonus = 0;\r\n        }\r\n    }\r\n\r\n  // low level token purchase function\r\n  \r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(isCrowdsalePaused == false);\r\n    require(validPurchase());\r\n    uint256 weiAmount = msg.value;\r\n    \r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(ratePerWei);\r\n    uint256 bonus = determineBonus(tokens,weiAmount);\r\n    tokens = tokens.add(bonus);\r\n    \r\n    //if the user is first time buyer, add his entries\r\n    if (usersBuyingInformation[beneficiary].recurringBuyer == false)\r\n    {\r\n        info = userInformation ({ userAddress: beneficiary, tokensToBeSent:tokens, ethersToBeSent:weiAmount, isKYCApproved:false,\r\n                                recurringBuyer:true});\r\n        usersBuyingInformation[beneficiary] = info;\r\n        allUsers.push(beneficiary);\r\n    }\r\n    //if the user is has bought with the same address before too, update his entries\r\n    else \r\n    {\r\n        info = usersBuyingInformation[beneficiary];\r\n        info.tokensToBeSent = info.tokensToBeSent.add(tokens);\r\n        info.ethersToBeSent = info.ethersToBeSent.add(weiAmount);\r\n        usersBuyingInformation[beneficiary] = info;\r\n    }\r\n    TOKENS_BOUGHT = TOKENS_BOUGHT.add(tokens);\r\n    emit TokenPurchase(owner, beneficiary, weiAmount, tokens);\r\n    \r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n  \r\n    /**\r\n    * function to change the end time and start time of the ICO\r\n    * can only be called by owner wallet\r\n    **/\r\n    function changeStartAndEndDate (uint256 startTimeUnixTimestamp, uint256 endTimeUnixTimestamp) public onlyOwner\r\n    {\r\n        require (startTimeUnixTimestamp!=0 && endTimeUnixTimestamp!=0);\r\n        require(endTimeUnixTimestamp>startTimeUnixTimestamp);\r\n        require(endTimeUnixTimestamp.sub(startTimeUnixTimestamp) >=totalDurationInDays);\r\n        startTime = startTimeUnixTimestamp;\r\n        endTime = endTimeUnixTimestamp;\r\n    }\r\n    \r\n    /**\r\n    * function to change the rate of tokens\r\n    * can only be called by owner wallet\r\n    **/\r\n    function setPriceRate(uint256 newPrice) public onlyOwner {\r\n        ratePerWei = newPrice;\r\n    }\r\n    \r\n    /**\r\n     * function to pause the crowdsale \r\n     * can only be called from owner wallet\r\n     **/\r\n    function pauseCrowdsale() public onlyOwner {\r\n        isCrowdsalePaused = true;\r\n    }\r\n\r\n    /**\r\n     * function to resume the crowdsale if it is paused\r\n     * can only be called from owner wallet\r\n     **/ \r\n    function resumeCrowdsale() public onlyOwner {\r\n        isCrowdsalePaused = false;\r\n    }\r\n    \r\n   \r\n     /**\r\n      * function through which owner can take back the tokens from the contract\r\n      **/ \r\n     function takeTokensBack() public onlyOwner\r\n     {\r\n         uint remainingTokensInTheContract = token.balanceOf(address(this));\r\n         token.transfer(owner,remainingTokensInTheContract);\r\n     }\r\n     \r\n     /**\r\n      * function through which owner can transfer the tokens to any address\r\n      * use this which to properly display the tokens that have been sold via ether or other payments\r\n      **/ \r\n     function manualTokenTransfer(address receiver, uint value) public onlyOwner\r\n     {\r\n         token.transfer(receiver,value);\r\n         TOKENS_SOLD = TOKENS_SOLD.add(value);\r\n         TOKENS_BOUGHT = TOKENS_BOUGHT.add(value);\r\n     }\r\n     \r\n     /**\r\n      * function to approve a single user which means the user has passed all KYC checks\r\n      * can only be called by the owner\r\n      **/ \r\n     function approveSingleUser(address user) public onlyOwner {\r\n        usersBuyingInformation[user].isKYCApproved = true;    \r\n     }\r\n     \r\n     /**\r\n      * function to disapprove a single user which means the user has failed the KYC checks\r\n      * can only be called by the owner\r\n      **/\r\n     function disapproveSingleUser(address user) public onlyOwner {\r\n         usersBuyingInformation[user].isKYCApproved = false;  \r\n     }\r\n     \r\n     /**\r\n      * function to approve multiple users at once \r\n      * can only be called by the owner\r\n      **/\r\n     function approveMultipleUsers(address[] users) public onlyOwner {\r\n         \r\n         for (uint i=0;i<users.length;i++)\r\n         {\r\n            usersBuyingInformation[users[i]].isKYCApproved = true;    \r\n         }\r\n     }\r\n     \r\n     /**\r\n      * function to distribute the tokens to approved users\r\n      * can only be called by the owner\r\n      **/\r\n     function distributeTokensToApprovedUsers() public onlyOwner {\r\n        for(uint i=0;i<allUsers.length;i++)\r\n        {\r\n            if (usersBuyingInformation[allUsers[i]].isKYCApproved == true && usersBuyingInformation[allUsers[i]].tokensToBeSent>0)\r\n            {\r\n                address to = allUsers[i];\r\n                uint tokens = usersBuyingInformation[to].tokensToBeSent;\r\n                token.transfer(to,tokens);\r\n                if (usersBuyingInformation[allUsers[i]].ethersToBeSent>0)\r\n                    owner.transfer(usersBuyingInformation[allUsers[i]].ethersToBeSent);\r\n                TOKENS_SOLD = TOKENS_SOLD.add(usersBuyingInformation[allUsers[i]].tokensToBeSent);\r\n                weiRaised = weiRaised.add(usersBuyingInformation[allUsers[i]].ethersToBeSent);\r\n                usersBuyingInformation[allUsers[i]].tokensToBeSent = 0;\r\n                usersBuyingInformation[allUsers[i]].ethersToBeSent = 0;\r\n            }\r\n        }\r\n     }\r\n     \r\n      /**\r\n      * function to distribute the tokens to all users whether approved or unapproved\r\n      * can only be called by the owner\r\n      **/\r\n     function distributeTokensToAllUsers() public onlyOwner {\r\n        for(uint i=0;i<allUsers.length;i++)\r\n        {\r\n            if (usersBuyingInformation[allUsers[i]].tokensToBeSent>0)\r\n            {\r\n                address to = allUsers[i];\r\n                uint tokens = usersBuyingInformation[to].tokensToBeSent;\r\n                token.transfer(to,tokens);\r\n                if (usersBuyingInformation[allUsers[i]].ethersToBeSent>0)\r\n                    owner.transfer(usersBuyingInformation[allUsers[i]].ethersToBeSent);\r\n                TOKENS_SOLD = TOKENS_SOLD.add(usersBuyingInformation[allUsers[i]].tokensToBeSent);\r\n                weiRaised = weiRaised.add(usersBuyingInformation[allUsers[i]].ethersToBeSent);\r\n                usersBuyingInformation[allUsers[i]].tokensToBeSent = 0;\r\n                usersBuyingInformation[allUsers[i]].ethersToBeSent = 0;\r\n            }\r\n        }\r\n     }\r\n     \r\n     /**\r\n      * function to refund a single user in case he hasnt passed the KYC checks\r\n      * can only be called by the owner\r\n      **/\r\n     function refundSingleUser(address user) public onlyOwner {\r\n         require(usersBuyingInformation[user].ethersToBeSent > 0 );\r\n         user.transfer(usersBuyingInformation[user].ethersToBeSent);\r\n         usersBuyingInformation[user].tokensToBeSent = 0;\r\n         usersBuyingInformation[user].ethersToBeSent = 0;\r\n     }\r\n     \r\n     /**\r\n      * function to refund to multiple users in case they havent passed the KYC checks\r\n      * can only be called by the owner\r\n      **/\r\n     function refundMultipleUsers(address[] users) public onlyOwner {\r\n         for (uint i=0;i<users.length;i++)\r\n         {\r\n            require(usersBuyingInformation[users[i]].ethersToBeSent >0);\r\n            users[i].transfer(usersBuyingInformation[users[i]].ethersToBeSent);\r\n            usersBuyingInformation[users[i]].tokensToBeSent = 0;\r\n            usersBuyingInformation[users[i]].ethersToBeSent = 0;\r\n         }\r\n     }\r\n     /**\r\n      * function to transfer out all ethers present in the contract\r\n      * after calling this function all refunds would need to be done manually\r\n      * would use this function as a last resort\r\n      * can only be called by owner wallet\r\n      **/ \r\n     function transferOutAllEthers() public onlyOwner {\r\n         owner.transfer(address(this).balance);\r\n     }\r\n     \r\n     /**\r\n      * function to get the top 150 users who are awaiting the transfer of tokens\r\n      * can only be called by the owner\r\n      * this function would work in read mode\r\n      **/ \r\n     function getUsersAwaitingForTokensTop150(bool fetch) public constant returns (address[150])  {\r\n          address[150] memory awaiting;\r\n         uint k = 0;\r\n         for (uint i=0;i<allUsers.length;i++)\r\n         {\r\n             if (usersBuyingInformation[allUsers[i]].isKYCApproved == true && usersBuyingInformation[allUsers[i]].tokensToBeSent>0)\r\n             {\r\n                 awaiting[k] = allUsers[i];\r\n                 k = k.add(1);\r\n                 if (k==150)\r\n                    return awaiting;\r\n             }\r\n         }\r\n         return awaiting;\r\n     }\r\n     \r\n     /**\r\n      * function to get the users who are awaiting the transfer of tokens\r\n      * can only be called by the owner\r\n      * this function would work in write mode\r\n      **/ \r\n     function getUsersAwaitingForTokens() public onlyOwner returns (address[])  {\r\n         delete u;\r\n         for (uint i=0;i<allUsers.length;i++)\r\n         {\r\n             if (usersBuyingInformation[allUsers[i]].isKYCApproved == true && usersBuyingInformation[allUsers[i]].tokensToBeSent>0)\r\n             {\r\n                 u.push(allUsers[i]);\r\n             }\r\n         }\r\n         emit usersAwaitingTokens(u);\r\n         return u;\r\n     }\r\n     \r\n     /**\r\n      * function to return the information of a single user\r\n      **/ \r\n     function getUserInfo(address userAddress) public constant returns(uint _ethers, uint _tokens, bool _isApproved)\r\n     {\r\n         _ethers = usersBuyingInformation[userAddress].ethersToBeSent;\r\n         _tokens = usersBuyingInformation[userAddress].tokensToBeSent;\r\n         _isApproved = usersBuyingInformation[userAddress].isKYCApproved;\r\n         return(_ethers,_tokens,_isApproved);\r\n         \r\n     }\r\n     \r\n     /**\r\n      * function to clear all payables/receivables of a user\r\n      * can only be called by owner \r\n      **/\r\n      function closeUser(address userAddress) public onlyOwner \r\n      {\r\n          //instead of deleting the user from the system we are just clearing the payables/receivables\r\n          //if this user buys again, his entry would be updated\r\n          uint ethersByTheUser =  usersBuyingInformation[userAddress].ethersToBeSent;\r\n          usersBuyingInformation[userAddress].isKYCApproved = false;\r\n          usersBuyingInformation[userAddress].ethersToBeSent = 0;\r\n          usersBuyingInformation[userAddress].tokensToBeSent = 0;\r\n          usersBuyingInformation[userAddress].recurringBuyer = true;\r\n          owner.transfer(ethersByTheUser);\r\n      } \r\n      \r\n     /**\r\n      * function to get a list of top 150 users that are unapproved\r\n      * can only be called by owner\r\n      * this function would work in read mode\r\n      **/\r\n      function getUnapprovedUsersTop150(bool fetch) public constant returns (address[150]) \r\n      {\r\n         address[150] memory unapprove;\r\n         uint k = 0;\r\n         for (uint i=0;i<allUsers.length;i++)\r\n         {\r\n             if (usersBuyingInformation[allUsers[i]].isKYCApproved == false)\r\n             {\r\n                 unapprove[k] = allUsers[i];\r\n                 k = k.add(1);\r\n                 if (k==150)\r\n                    return unapprove;\r\n             }\r\n         }\r\n         return unapprove;\r\n      } \r\n      \r\n       /**\r\n      * function to get a list of all users that are unapproved\r\n      * can only be called by owner\r\n      * this function would work in write mode\r\n      **/\r\n      function getUnapprovedUsers() public onlyOwner returns (address[]) \r\n      {\r\n         delete u;\r\n         for (uint i=0;i<allUsers.length;i++)\r\n         {\r\n             if (usersBuyingInformation[allUsers[i]].isKYCApproved == false)\r\n             {\r\n                 u.push(allUsers[i]);\r\n             }\r\n         }\r\n         emit usersAwaitingTokens(u);\r\n         return u;\r\n      } \r\n      \r\n      /**\r\n      * function to return all the users\r\n      **/\r\n      function getAllUsers(bool fetch) public constant returns (address[]) \r\n      {\r\n          return allUsers;\r\n      } \r\n      \r\n      /**\r\n       * function to change the address of a user\r\n       * this function would be used in situations where user made the transaction from one wallet\r\n       * but wants to receive tokens in another wallet\r\n       * so owner should be able to update the address\r\n       **/ \r\n      function changeUserEthAddress(address oldEthAddress, address newEthAddress) public onlyOwner \r\n      {\r\n          usersBuyingInformation[newEthAddress] = usersBuyingInformation[oldEthAddress];\r\n          for (uint i=0;i<allUsers.length;i++)\r\n          {\r\n              if (allUsers[i] == oldEthAddress)\r\n                allUsers[i] = newEthAddress;\r\n          }\r\n          delete usersBuyingInformation[oldEthAddress];\r\n      }\r\n      \r\n      /**\r\n       * Add a user that has paid with BTC or other payment methods\r\n       **/ \r\n      function addUser(address userAddr, uint tokens) public onlyOwner \r\n      {\r\n            // if first time buyer, add his details in the mapping\r\n            if (usersBuyingInformation[userAddr].recurringBuyer == false)\r\n            {\r\n                info = userInformation ({ userAddress: userAddr, tokensToBeSent:tokens, ethersToBeSent:0, isKYCApproved:false,\r\n                                recurringBuyer:true});\r\n                usersBuyingInformation[userAddr] = info;\r\n                allUsers.push(userAddr);\r\n            }\r\n            //if recurring buyer, update his mappings\r\n            else \r\n            {\r\n                info = usersBuyingInformation[userAddr];\r\n                info.tokensToBeSent = info.tokensToBeSent.add(tokens);\r\n                usersBuyingInformation[userAddr] = info;\r\n            }\r\n            TOKENS_BOUGHT = TOKENS_BOUGHT.add(tokens);\r\n      }\r\n      \r\n      /**\r\n       * Set the tokens bought\r\n       **/ \r\n      function setTokensBought(uint tokensBought) public onlyOwner \r\n      {\r\n          TOKENS_BOUGHT = tokensBought;\r\n      }\r\n      \r\n      /**\r\n       * Returns the number of tokens who have been sold  \r\n       **/ \r\n      function getTokensBought() public constant returns(uint) \r\n      {\r\n          return TOKENS_BOUGHT;\r\n      }\r\n      \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"startTimeUnixTimestamp\",\"type\":\"uint256\"},{\"name\":\"endTimeUnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"changeStartAndEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusInPhase6\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_SOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDurationInDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumContributionPhase6\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_BOUGHT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusInPhase2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeTokensToAllUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"setTokensBought\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"approveMultipleUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldEthAddress\",\"type\":\"address\"},{\"name\":\"newEthAddress\",\"type\":\"address\"}],\"name\":\"changeUserEthAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeTokensBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusInPhase5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"_ethers\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_isApproved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumContributionPhase5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferOutAllEthers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"refundSingleUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"manualTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeTokensToApprovedUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusInPhase4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumContributionPhase2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"refundMultipleUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusInPhase3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsalePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"closeUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getUsersAwaitingForTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumContributionPhase1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumContributionPhase3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fetch\",\"type\":\"bool\"}],\"name\":\"getUsersAwaitingForTokensTop150\",\"outputs\":[{\"name\":\"\",\"type\":\"address[150]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePerWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"approveSingleUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"disapproveSingleUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokensToSaleInClosedPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fetch\",\"type\":\"bool\"}],\"name\":\"getAllUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddr\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"addUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumContributionPhase4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusInPhase1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fetch\",\"type\":\"bool\"}],\"name\":\"getUnapprovedUsersTop150\",\"outputs\":[{\"name\":\"\",\"type\":\"address[150]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getUnapprovedUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"usersAwaitingTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"URUNCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005b23018000000000000000000000000009162bd9c5bfb9e39e87ce3e39b558a5546710b800000000000000000000000001a9a2b8638451d447f0027179b19e8843963a88","Library":"","SwarmSource":"bzzr://e03d62720fdbb3315ab83539a14a2b2345fb4f16360eead309e8aee97af88ff3"}]}