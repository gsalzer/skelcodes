{"status":"1","message":"OK","result":[{"SourceCode":"/* ==================================================================== */\r\n/* Copyright (c) 2018 The ether.online Project.  All rights reserved.\r\n/* \r\n/* https://ether.online  The first RPG game of blockchain \r\n/*  \r\n/* authors rickhunter.shen@gmail.com   \r\n/*         ssesunding@gmail.com            \r\n/* ==================================================================== */\r\n\r\npragma solidity ^0.4.20;\r\n\r\n/// @title ERC-165 Standard Interface Detection\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\ninterface ERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\ncontract ERC721 is ERC165 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\ninterface ERC721TokenReceiver {\r\n\tfunction onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\r\n}\r\n\r\ncontract AccessAdmin {\r\n    bool public isPaused = false;\r\n    address public addrAdmin;  \r\n\r\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\r\n\r\n    function AccessAdmin() public {\r\n        addrAdmin = msg.sender;\r\n    }  \r\n\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == addrAdmin);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!isPaused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(isPaused);\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address _newAdmin) external onlyAdmin {\r\n        require(_newAdmin != address(0));\r\n        AdminTransferred(addrAdmin, _newAdmin);\r\n        addrAdmin = _newAdmin;\r\n    }\r\n\r\n    function doPause() external onlyAdmin whenNotPaused {\r\n        isPaused = true;\r\n    }\r\n\r\n    function doUnpause() external onlyAdmin whenPaused {\r\n        isPaused = false;\r\n    }\r\n}\r\n\r\ncontract AccessService is AccessAdmin {\r\n    address public addrService;\r\n    address public addrFinance;\r\n\r\n    modifier onlyService() {\r\n        require(msg.sender == addrService);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFinance() {\r\n        require(msg.sender == addrFinance);\r\n        _;\r\n    }\r\n\r\n    function setService(address _newService) external {\r\n        require(msg.sender == addrService || msg.sender == addrAdmin);\r\n        require(_newService != address(0));\r\n        addrService = _newService;\r\n    }\r\n\r\n    function setFinance(address _newFinance) external {\r\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\r\n        require(_newFinance != address(0));\r\n        addrFinance = _newFinance;\r\n    }\r\n\r\n    function withdraw(address _target, uint256 _amount) \r\n        external \r\n    {\r\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\r\n        require(_amount > 0);\r\n        address receiver = _target == address(0) ? addrFinance : _target;\r\n        uint256 balance = this.balance;\r\n        if (_amount < balance) {\r\n            receiver.transfer(_amount);\r\n        } else {\r\n            receiver.transfer(this.balance);\r\n        }      \r\n    }\r\n}\r\n\r\ninterface IDataMining {\r\n    function getRecommender(address _target) external view returns(address);\r\n    function subFreeMineral(address _target) external returns(bool);\r\n}\r\n\r\ninterface IDataEquip {\r\n    function isEquiped(address _target, uint256 _tokenId) external view returns(bool);\r\n    function isEquipedAny2(address _target, uint256 _tokenId1, uint256 _tokenId2) external view returns(bool);\r\n    function isEquipedAny3(address _target, uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool);\r\n}\r\n\r\ncontract Random {\r\n    uint256 _seed;\r\n\r\n    function _rand() internal returns (uint256) {\r\n        _seed = uint256(keccak256(_seed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\r\n        return _seed;\r\n    }\r\n\r\n    function _randBySeed(uint256 _outSeed) internal view returns (uint256) {\r\n        return uint256(keccak256(_outSeed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract WarToken is ERC721, AccessAdmin {\r\n    /// @dev The equipment info\r\n    struct Fashion {\r\n        uint16 protoId;     // 0  Equipment ID\r\n        uint16 quality;     // 1  Rarity: 1 Coarse/2 Good/3 Rare/4 Epic/5 Legendary\r\n        uint16 pos;         // 2  Slots: 1 Weapon/2 Hat/3 Cloth/4 Pant/5 Shoes/9 Pets\r\n        uint16 health;      // 3  Health\r\n        uint16 atkMin;      // 4  Min attack\r\n        uint16 atkMax;      // 5  Max attack\r\n        uint16 defence;     // 6  Defennse\r\n        uint16 crit;        // 7  Critical rate\r\n        uint16 isPercent;   // 8  Attr value type\r\n        uint16 attrExt1;    // 9  future stat 1\r\n        uint16 attrExt2;    // 10 future stat 2\r\n        uint16 attrExt3;    // 11 future stat 3\r\n    }\r\n\r\n    /// @dev All equipments tokenArray (not exceeding 2^32-1)\r\n    Fashion[] public fashionArray;\r\n\r\n    /// @dev Amount of tokens destroyed\r\n    uint256 destroyFashionCount;\r\n\r\n    /// @dev Equipment token ID vs owner address\r\n    mapping (uint256 => address) fashionIdToOwner;\r\n\r\n    /// @dev Equipments owner by the owner (array)\r\n    mapping (address => uint256[]) ownerToFashionArray;\r\n\r\n    /// @dev Equipment token ID search in owner array\r\n    mapping (uint256 => uint256) fashionIdToOwnerIndex;\r\n\r\n    /// @dev The authorized address for each WAR\r\n    mapping (uint256 => address) fashionIdToApprovals;\r\n\r\n    /// @dev The authorized operators for each address\r\n    mapping (address => mapping (address => bool)) operatorToApprovals;\r\n\r\n    /// @dev Trust contract\r\n    mapping (address => bool) actionContracts;\r\n\r\n    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\r\n        actionContracts[_actionAddr] = _useful;\r\n    }\r\n\r\n    function getActionContract(address _actionAddr) external view onlyAdmin returns(bool) {\r\n        return actionContracts[_actionAddr];\r\n    }\r\n\r\n    /// @dev This emits when the approved address for an WAR is changed or reaffirmed.\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /// @dev This emits when the equipment ownership changed \r\n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n\r\n    /// @dev This emits when the equipment created\r\n    event CreateFashion(address indexed owner, uint256 tokenId, uint16 protoId, uint16 quality, uint16 pos, uint16 createType);\r\n\r\n    /// @dev This emits when the equipment's attributes changed\r\n    event ChangeFashion(address indexed owner, uint256 tokenId, uint16 changeType);\r\n\r\n    /// @dev This emits when the equipment destroyed\r\n    event DeleteFashion(address indexed owner, uint256 tokenId, uint16 deleteType);\r\n    \r\n    function WarToken() public {\r\n        addrAdmin = msg.sender;\r\n        fashionArray.length += 1;\r\n    }\r\n\r\n    // modifier\r\n    /// @dev Check if token ID is valid\r\n    modifier isValidToken(uint256 _tokenId) {\r\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\r\n        require(fashionIdToOwner[_tokenId] != address(0)); \r\n        _;\r\n    }\r\n\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        address owner = fashionIdToOwner[_tokenId];\r\n        require(msg.sender == owner || msg.sender == fashionIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender]);\r\n        _;\r\n    }\r\n\r\n    // ERC721\r\n    function supportsInterface(bytes4 _interfaceId) external view returns(bool) {\r\n        // ERC165 || ERC721 || ERC165^ERC721\r\n        return (_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff);\r\n    }\r\n        \r\n    function name() public pure returns(string) {\r\n        return \"WAR Token\";\r\n    }\r\n\r\n    function symbol() public pure returns(string) {\r\n        return \"WAR\";\r\n    }\r\n\r\n    /// @dev Search for token quantity address\r\n    /// @param _owner Address that needs to be searched\r\n    /// @return Returns token quantity\r\n    function balanceOf(address _owner) external view returns(uint256) {\r\n        require(_owner != address(0));\r\n        return ownerToFashionArray[_owner].length;\r\n    }\r\n\r\n    /// @dev Find the owner of an WAR\r\n    /// @param _tokenId The tokenId of WAR\r\n    /// @return Give The address of the owner of this WAR\r\n    function ownerOf(uint256 _tokenId) external view /*isValidToken(_tokenId)*/ returns (address owner) {\r\n        return fashionIdToOwner[_tokenId];\r\n    }\r\n\r\n    /// @dev Transfers the ownership of an WAR from one address to another address\r\n    /// @param _from The current owner of the WAR\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The WAR to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `_to`\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \r\n        external\r\n        whenNotPaused\r\n    {\r\n        _safeTransferFrom(_from, _to, _tokenId, data);\r\n    }\r\n\r\n    /// @dev Transfers the ownership of an WAR from one address to another address\r\n    /// @param _from The current owner of the WAR\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The WAR to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \r\n        external\r\n        whenNotPaused\r\n    {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    /// @dev Transfer ownership of an WAR, '_to' must be a vaild address, or the WAR will lost\r\n    /// @param _from The current owner of the WAR\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The WAR to transfer\r\n    function transferFrom(address _from, address _to, uint256 _tokenId)\r\n        external\r\n        whenNotPaused\r\n        isValidToken(_tokenId)\r\n        canTransfer(_tokenId)\r\n    {\r\n        address owner = fashionIdToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        require(_to != address(0));\r\n        require(owner == _from);\r\n        \r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Set or reaffirm the approved address for an WAR\r\n    /// @param _approved The new approved WAR controller\r\n    /// @param _tokenId The WAR to approve\r\n    function approve(address _approved, uint256 _tokenId)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        address owner = fashionIdToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        require(msg.sender == owner || operatorToApprovals[owner][msg.sender]);\r\n\r\n        fashionIdToApprovals[_tokenId] = _approved;\r\n        Approval(owner, _approved, _tokenId);\r\n    }\r\n\r\n    /// @dev Enable or disable approval for a third party (\"operator\") to manage all your asset.\r\n    /// @param _operator Address to add to the set of authorized operators.\r\n    /// @param _approved True if the operators is approved, false to revoke approval\r\n    function setApprovalForAll(address _operator, bool _approved) \r\n        external \r\n        whenNotPaused\r\n    {\r\n        operatorToApprovals[msg.sender][_operator] = _approved;\r\n        ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    /// @dev Get the approved address for a single WAR\r\n    /// @param _tokenId The WAR to find the approved address for\r\n    /// @return The approved address for this WAR, or the zero address if there is none\r\n    function getApproved(uint256 _tokenId) external view isValidToken(_tokenId) returns (address) {\r\n        return fashionIdToApprovals[_tokenId];\r\n    }\r\n\r\n    /// @dev Query if an address is an authorized operator for another address\r\n    /// @param _owner The address that owns the WARs\r\n    /// @param _operator The address that acts on behalf of the owner\r\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\r\n        return operatorToApprovals[_owner][_operator];\r\n    }\r\n\r\n    /// @dev Count WARs tracked by this contract\r\n    /// @return A count of valid WARs tracked by this contract, where each one of\r\n    ///  them has an assigned and queryable owner not equal to the zero address\r\n    function totalSupply() external view returns (uint256) {\r\n        return fashionArray.length - destroyFashionCount - 1;\r\n    }\r\n\r\n    /// @dev Do the real transfer with out any condition checking\r\n    /// @param _from The old owner of this WAR(If created: 0x0)\r\n    /// @param _to The new owner of this WAR \r\n    /// @param _tokenId The tokenId of the WAR\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        if (_from != address(0)) {\r\n            uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\r\n            uint256[] storage fsArray = ownerToFashionArray[_from];\r\n            require(fsArray[indexFrom] == _tokenId);\r\n\r\n            // If the WAR is not the element of array, change it to with the last\r\n            if (indexFrom != fsArray.length - 1) {\r\n                uint256 lastTokenId = fsArray[fsArray.length - 1];\r\n                fsArray[indexFrom] = lastTokenId; \r\n                fashionIdToOwnerIndex[lastTokenId] = indexFrom;\r\n            }\r\n            fsArray.length -= 1; \r\n            \r\n            if (fashionIdToApprovals[_tokenId] != address(0)) {\r\n                delete fashionIdToApprovals[_tokenId];\r\n            }      \r\n        }\r\n\r\n        // Give the WAR to '_to'\r\n        fashionIdToOwner[_tokenId] = _to;\r\n        ownerToFashionArray[_to].push(_tokenId);\r\n        fashionIdToOwnerIndex[_tokenId] = ownerToFashionArray[_to].length - 1;\r\n        \r\n        Transfer(_from != address(0) ? _from : this, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Actually perform the safeTransferFrom\r\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \r\n        internal\r\n        isValidToken(_tokenId) \r\n        canTransfer(_tokenId)\r\n    {\r\n        address owner = fashionIdToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        require(_to != address(0));\r\n        require(owner == _from);\r\n        \r\n        _transfer(_from, _to, _tokenId);\r\n\r\n        // Do the callback after everything is done to avoid reentrancy attack\r\n        uint256 codeSize;\r\n        assembly { codeSize := extcodesize(_to) }\r\n        if (codeSize == 0) {\r\n            return;\r\n        }\r\n        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\r\n        // bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\")) = 0xf0b9e5ba;\r\n        require(retval == 0xf0b9e5ba);\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------------------------------\r\n\r\n    /// @dev Equipment creation\r\n    /// @param _owner Owner of the equipment created\r\n    /// @param _attrs Attributes of the equipment created\r\n    /// @return Token ID of the equipment created\r\n    function createFashion(address _owner, uint16[9] _attrs, uint16 _createType) \r\n        external \r\n        whenNotPaused\r\n        returns(uint256)\r\n    {\r\n        require(actionContracts[msg.sender]);\r\n        require(_owner != address(0));\r\n\r\n        uint256 newFashionId = fashionArray.length;\r\n        require(newFashionId < 4294967296);\r\n\r\n        fashionArray.length += 1;\r\n        Fashion storage fs = fashionArray[newFashionId];\r\n        fs.protoId = _attrs[0];\r\n        fs.quality = _attrs[1];\r\n        fs.pos = _attrs[2];\r\n        if (_attrs[3] != 0) {\r\n            fs.health = _attrs[3];\r\n        }\r\n        \r\n        if (_attrs[4] != 0) {\r\n            fs.atkMin = _attrs[4];\r\n            fs.atkMax = _attrs[5];\r\n        }\r\n       \r\n        if (_attrs[6] != 0) {\r\n            fs.defence = _attrs[6];\r\n        }\r\n        \r\n        if (_attrs[7] != 0) {\r\n            fs.crit = _attrs[7];\r\n        }\r\n\r\n        if (_attrs[8] != 0) {\r\n            fs.isPercent = _attrs[8];\r\n        }\r\n        \r\n        _transfer(0, _owner, newFashionId);\r\n        CreateFashion(_owner, newFashionId, _attrs[0], _attrs[1], _attrs[2], _createType);\r\n        return newFashionId;\r\n    }\r\n\r\n    /// @dev One specific attribute of the equipment modified\r\n    function _changeAttrByIndex(Fashion storage _fs, uint16 _index, uint16 _val) internal {\r\n        if (_index == 3) {\r\n            _fs.health = _val;\r\n        } else if(_index == 4) {\r\n            _fs.atkMin = _val;\r\n        } else if(_index == 5) {\r\n            _fs.atkMax = _val;\r\n        } else if(_index == 6) {\r\n            _fs.defence = _val;\r\n        } else if(_index == 7) {\r\n            _fs.crit = _val;\r\n        } else if(_index == 9) {\r\n            _fs.attrExt1 = _val;\r\n        } else if(_index == 10) {\r\n            _fs.attrExt2 = _val;\r\n        } else if(_index == 11) {\r\n            _fs.attrExt3 = _val;\r\n        }\r\n    }\r\n\r\n    /// @dev Equiment attributes modified (max 4 stats modified)\r\n    /// @param _tokenId Equipment Token ID\r\n    /// @param _idxArray Stats order that must be modified\r\n    /// @param _params Stat value that must be modified\r\n    /// @param _changeType Modification type such as enhance, socket, etc.\r\n    function changeFashionAttr(uint256 _tokenId, uint16[4] _idxArray, uint16[4] _params, uint16 _changeType) \r\n        external \r\n        whenNotPaused\r\n        isValidToken(_tokenId) \r\n    {\r\n        require(actionContracts[msg.sender]);\r\n\r\n        Fashion storage fs = fashionArray[_tokenId];\r\n        if (_idxArray[0] > 0) {\r\n            _changeAttrByIndex(fs, _idxArray[0], _params[0]);\r\n        }\r\n\r\n        if (_idxArray[1] > 0) {\r\n            _changeAttrByIndex(fs, _idxArray[1], _params[1]);\r\n        }\r\n\r\n        if (_idxArray[2] > 0) {\r\n            _changeAttrByIndex(fs, _idxArray[2], _params[2]);\r\n        }\r\n\r\n        if (_idxArray[3] > 0) {\r\n            _changeAttrByIndex(fs, _idxArray[3], _params[3]);\r\n        }\r\n\r\n        ChangeFashion(fashionIdToOwner[_tokenId], _tokenId, _changeType);\r\n    }\r\n\r\n    /// @dev Equipment destruction\r\n    /// @param _tokenId Equipment Token ID\r\n    /// @param _deleteType Destruction type, such as craft\r\n    function destroyFashion(uint256 _tokenId, uint16 _deleteType)\r\n        external \r\n        whenNotPaused\r\n        isValidToken(_tokenId) \r\n    {\r\n        require(actionContracts[msg.sender]);\r\n\r\n        address _from = fashionIdToOwner[_tokenId];\r\n        uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\r\n        uint256[] storage fsArray = ownerToFashionArray[_from]; \r\n        require(fsArray[indexFrom] == _tokenId);\r\n\r\n        if (indexFrom != fsArray.length - 1) {\r\n            uint256 lastTokenId = fsArray[fsArray.length - 1];\r\n            fsArray[indexFrom] = lastTokenId; \r\n            fashionIdToOwnerIndex[lastTokenId] = indexFrom;\r\n        }\r\n        fsArray.length -= 1; \r\n\r\n        fashionIdToOwner[_tokenId] = address(0);\r\n        delete fashionIdToOwnerIndex[_tokenId];\r\n        destroyFashionCount += 1;\r\n\r\n        Transfer(_from, 0, _tokenId);\r\n\r\n        DeleteFashion(_from, _tokenId, _deleteType);\r\n    }\r\n\r\n    /// @dev Safe transfer by trust contracts\r\n    function safeTransferByContract(uint256 _tokenId, address _to) \r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(actionContracts[msg.sender]);\r\n\r\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\r\n        address owner = fashionIdToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        require(_to != address(0));\r\n        require(owner != _to);\r\n\r\n        _transfer(owner, _to, _tokenId);\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------------------------------\r\n\r\n    /// @dev Get fashion attrs by tokenId\r\n    function getFashion(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint16[12] datas) {\r\n        Fashion storage fs = fashionArray[_tokenId];\r\n        datas[0] = fs.protoId;\r\n        datas[1] = fs.quality;\r\n        datas[2] = fs.pos;\r\n        datas[3] = fs.health;\r\n        datas[4] = fs.atkMin;\r\n        datas[5] = fs.atkMax;\r\n        datas[6] = fs.defence;\r\n        datas[7] = fs.crit;\r\n        datas[8] = fs.isPercent;\r\n        datas[9] = fs.attrExt1;\r\n        datas[10] = fs.attrExt2;\r\n        datas[11] = fs.attrExt3;\r\n    }\r\n\r\n    /// @dev Get tokenIds and flags by owner\r\n    function getOwnFashions(address _owner) external view returns(uint256[] tokens, uint32[] flags) {\r\n        require(_owner != address(0));\r\n        uint256[] storage fsArray = ownerToFashionArray[_owner];\r\n        uint256 length = fsArray.length;\r\n        tokens = new uint256[](length);\r\n        flags = new uint32[](length);\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            tokens[i] = fsArray[i];\r\n            Fashion storage fs = fashionArray[fsArray[i]];\r\n            flags[i] = uint32(uint32(fs.protoId) * 100 + uint32(fs.quality) * 10 + fs.pos);\r\n        }\r\n    }\r\n\r\n    /// @dev WAR token info returned based on Token ID transfered (64 at most)\r\n    function getFashionsAttrs(uint256[] _tokens) external view returns(uint16[] attrs) {\r\n        uint256 length = _tokens.length;\r\n        require(length <= 64);\r\n        attrs = new uint16[](length * 11);\r\n        uint256 tokenId;\r\n        uint256 index;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            tokenId = _tokens[i];\r\n            if (fashionIdToOwner[tokenId] != address(0)) {\r\n                index = i * 11;\r\n                Fashion storage fs = fashionArray[tokenId];\r\n                attrs[index] = fs.health;\r\n                attrs[index + 1] = fs.atkMin;\r\n                attrs[index + 2] = fs.atkMax;\r\n                attrs[index + 3] = fs.defence;\r\n                attrs[index + 4] = fs.crit;\r\n                attrs[index + 5] = fs.isPercent;\r\n                attrs[index + 6] = fs.attrExt1;\r\n                attrs[index + 7] = fs.attrExt2;\r\n                attrs[index + 8] = fs.attrExt3;\r\n            }   \r\n        }\r\n    }\r\n}\r\n\r\ncontract DataEquip is AccessService, IDataEquip {\r\n    event EquipChanged(address indexed _target);\r\n\r\n    /// @dev WarToken(NFT) contract address\r\n    WarToken public tokenContract;\r\n    mapping (address => uint256) public slotWeapon;\r\n    mapping (address => uint256) public slotHat;\r\n    mapping (address => uint256) public slotCloth;\r\n    mapping (address => uint256) public slotPant;\r\n    mapping (address => uint256) public slotShoes;\r\n    mapping (address => uint256) public slotPet;\r\n\r\n    function DataEquip(address _nftAddr) public {\r\n        addrAdmin = msg.sender;\r\n        addrService = msg.sender;\r\n        addrFinance = msg.sender;\r\n\r\n        tokenContract = WarToken(_nftAddr);\r\n    }\r\n\r\n    function _equipUpOne(address _owner, uint256 _tokenId) private {\r\n        require(tokenContract.ownerOf(_tokenId) == _owner);\r\n        uint16[12] memory attrs = tokenContract.getFashion(_tokenId);\r\n        uint16 pos = attrs[2];\r\n        if (pos == 1) {\r\n            if (slotWeapon[_owner] != _tokenId) {\r\n                slotWeapon[_owner] = _tokenId;\r\n            }\r\n        } else if (pos == 2) {\r\n            if (slotHat[_owner] != _tokenId) {\r\n                slotHat[_owner] = _tokenId;\r\n            }\r\n        } else if (pos == 3) {\r\n            if (slotCloth[_owner] != _tokenId) {\r\n                slotCloth[_owner] = _tokenId;\r\n            }\r\n        } else if (pos == 4) {\r\n            if (slotPant[_owner] != _tokenId) {\r\n                slotPant[_owner] = _tokenId;\r\n            }\r\n        } else if (pos == 5) {\r\n            if (slotShoes[_owner] != _tokenId) {\r\n                slotShoes[_owner] = _tokenId;\r\n            }\r\n        } else if (pos == 9) {\r\n            if (slotPet[_owner] != _tokenId) {\r\n                slotPet[_owner] = _tokenId;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _equipDownOne(address _owner, uint16 _index) private {\r\n        if (_index == 0) {\r\n            if (slotWeapon[_owner] != 0) {\r\n                slotWeapon[_owner] = 0;\r\n            }\r\n        } else if (_index == 1) {\r\n            if (slotHat[_owner] != 0) {\r\n                slotHat[_owner] = 0;\r\n            }\r\n        } else if (_index == 2) {\r\n            if (slotCloth[_owner] != 0) {\r\n                slotCloth[_owner] = 0;\r\n            }\r\n        } else if (_index == 3) {\r\n            if (slotPant[_owner] != 0) {\r\n                slotPant[_owner] = 0;\r\n            }\r\n        } else if (_index == 4) {\r\n            if (slotShoes[_owner] != 0) {\r\n                slotShoes[_owner] = 0;\r\n            }\r\n        } else if (_index == 5) {\r\n            if (slotPet[_owner] != 0) {\r\n                slotPet[_owner] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function equipUp(uint256[6] _tokens) \r\n        external \r\n        whenNotPaused\r\n    {\r\n        for (uint16 i = 0; i < 6; ++i) {\r\n            if (_tokens[i] > 0) {\r\n                _equipUpOne(msg.sender, _tokens[i]);\r\n            } else {\r\n                _equipDownOne(msg.sender, i);      // tokenId 0 will be equip down\r\n            }  \r\n        }\r\n        EquipChanged(msg.sender);\r\n    }\r\n\r\n    function equipDown(uint256 _tokenId) \r\n        external\r\n        whenNotPaused \r\n    {\r\n        \r\n    }    \r\n\r\n    function isEquiped(address _target, uint256 _tokenId) external view returns(bool) {\r\n        require(_target != address(0));\r\n        require(_tokenId > 0);\r\n\r\n        if (slotWeapon[_target] == _tokenId) {\r\n            return true;\r\n        }\r\n\r\n        if (slotHat[_target] == _tokenId) {\r\n            return true;\r\n        }\r\n\r\n        if (slotCloth[_target] == _tokenId) {\r\n            return true;\r\n        }\r\n\r\n        if (slotPant[_target] == _tokenId) {\r\n            return true;\r\n        }\r\n\r\n        if (slotShoes[_target] == _tokenId) {\r\n            return true;\r\n        }\r\n\r\n        if (slotPet[_target] == _tokenId) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function isEquipedAny2(address _target, uint256 _tokenId1, uint256 _tokenId2) external view returns(bool) {\r\n        require(_target != address(0));\r\n        require(_tokenId1 > 0);\r\n        require(_tokenId2 > 0);\r\n        \r\n        uint256 equipTokenId = slotWeapon[_target];\r\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\r\n            return true;\r\n        }\r\n\r\n        equipTokenId = slotHat[_target];\r\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\r\n            return true;\r\n        }\r\n\r\n        equipTokenId = slotCloth[_target];\r\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\r\n            return true;\r\n        }\r\n\r\n        equipTokenId = slotPant[_target];\r\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\r\n            return true;\r\n        }\r\n\r\n        equipTokenId = slotShoes[_target];\r\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\r\n            return true;\r\n        }\r\n\r\n        equipTokenId = slotPet[_target];\r\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function isEquipedAny3(address _target, uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool) {\r\n        require(_target != address(0));\r\n        require(_tokenId1 > 0);\r\n        require(_tokenId2 > 0);\r\n        require(_tokenId3 > 0);\r\n        \r\n        uint256 equipTokenId = slotWeapon[_target];\r\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\r\n            return true;\r\n        }\r\n\r\n        equipTokenId = slotHat[_target];\r\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\r\n            return true;\r\n        }\r\n\r\n        equipTokenId = slotCloth[_target];\r\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\r\n            return true;\r\n        }\r\n\r\n        equipTokenId = slotPant[_target];\r\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\r\n            return true;\r\n        }\r\n\r\n        equipTokenId = slotShoes[_target];\r\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\r\n            return true;\r\n        }\r\n\r\n        equipTokenId = slotPet[_target];\r\n        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getEquipTokens(address _target) external view returns(uint256[6] tokens) {\r\n        tokens[0] = slotWeapon[_target];\r\n        tokens[1] = slotHat[_target];\r\n        tokens[2] = slotCloth[_target];\r\n        tokens[3] = slotPant[_target];\r\n        tokens[4] = slotShoes[_target];\r\n        tokens[5] = slotPet[_target];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getEquipTokens\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"slotPant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"slotCloth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"slotPet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"slotHat\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_tokenId1\",\"type\":\"uint256\"},{\"name\":\"_tokenId2\",\"type\":\"uint256\"}],\"name\":\"isEquipedAny2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrFinance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFinance\",\"type\":\"address\"}],\"name\":\"setFinance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256[6]\"}],\"name\":\"equipUp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"slotWeapon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newService\",\"type\":\"address\"}],\"name\":\"setService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrService\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"equipDown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"slotShoes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isEquiped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_tokenId1\",\"type\":\"uint256\"},{\"name\":\"_tokenId2\",\"type\":\"uint256\"},{\"name\":\"_tokenId3\",\"type\":\"uint256\"}],\"name\":\"isEquipedAny3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nftAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"EquipChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"preAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"}]","ContractName":"DataEquip","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000da9c03dfd4d137f926c3cf6953cb951832eb08b2","Library":"","SwarmSource":"bzzr://95da2c5823caf4b306182f57353248ad8c5f7748437de84f9c1f573cae7ccf55"}]}