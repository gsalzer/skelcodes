{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n/**\r\n* @title CNC ICO Contract\r\n* @dev CNC is an ERC-20 Standar Compliant Token\r\n*/\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin (partially)\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title admined\r\n * @notice This contract is administered\r\n */\r\ncontract admined {\r\n    mapping(address => uint8) level;\r\n    //0 normal user\r\n    //1 basic admin\r\n    //2 master admin\r\n\r\n    /**\r\n    * @dev This contructor takes the msg.sender as the first master admin\r\n    */\r\n    constructor() internal {\r\n        level[msg.sender] = 2; //Set initial admin to contract creator\r\n        emit AdminshipUpdated(msg.sender,2);\r\n    }\r\n\r\n    /**\r\n    * @dev This modifier limits function execution to the admin\r\n    */\r\n    modifier onlyAdmin(uint8 _level) { //A modifier to define admin-only functions\r\n        require(level[msg.sender] >= _level );\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice This function transfer the adminship of the contract to _newAdmin\r\n    * @param _newAdmin The new admin of the contract\r\n    */\r\n    function adminshipLevel(address _newAdmin, uint8 _level) onlyAdmin(2) public { //Admin can be set\r\n        require(_newAdmin != address(0));\r\n        level[_newAdmin] = _level;\r\n        emit AdminshipUpdated(_newAdmin,_level);\r\n    }\r\n\r\n    /**\r\n    * @dev Log Events\r\n    */\r\n    event AdminshipUpdated(address _newAdmin, uint8 _level);\r\n\r\n}\r\n\r\ncontract CNCICO is admined {\r\n\r\n    using SafeMath for uint256;\r\n    //This ico have 4 possible states\r\n    enum State {\r\n        PreSale, //PreSale - best value\r\n        MainSale,\r\n        Failed,\r\n        Successful\r\n    }\r\n    //Public variables\r\n\r\n    //Time-state Related\r\n    State public state = State.PreSale; //Set initial stage\r\n    uint256 public PreSaleStart = now; //Once deployed\r\n    uint256 constant public PreSaleDeadline = 1528502399; //Human time (GMT): Friday, 8 June 2018 23:59:59\r\n    uint256 public MainSaleStart = 1528722000; //Human time (GMT): Monday, 11 June 2018 13:00:00\r\n    uint256 public MainSaleDeadline = 1533081599; //Human time (GMT): Tuesday, 31 July 2018 23:59:59\r\n    uint256 public completedAt; //Set when ico finish\r\n\r\n    //Token-eth related\r\n    uint256 public totalRaised; //eth collected in wei\r\n    uint256 public PreSaleDistributed; //presale tokens distributed\r\n    uint256 public PreSaleLimit = 75000000 * (10 ** 18);\r\n    uint256 public totalDistributed; //Whole sale tokens distributed\r\n    ERC20Basic public tokenReward; //Token contract address\r\n    uint256 public softCap = 50000000 * (10 ** 18); //50M Tokens\r\n    uint256 public hardCap = 600000000 * (10 ** 18); // 600M tokens\r\n    bool public claimed;\r\n    //User balances handlers\r\n    mapping (address => uint256) public ethOnContract; //Balance of sent eth per user\r\n    mapping (address => uint256) public tokensSent; //Tokens sent per user\r\n    mapping (address => uint256) public balance; //Tokens pending to send per user\r\n    //Contract details\r\n    address public creator;\r\n    string public version = '1';\r\n\r\n    //Tokens per eth rates\r\n    uint256[2] rates = [50000,28572];\r\n\r\n    //events for log\r\n    event LogFundrisingInitialized(address _creator);\r\n    event LogMainSaleDateSet(uint256 _time);\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n    event LogRefund(address _addr, uint _amount);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFundingFailed(uint _totalRaised);\r\n\r\n    //Modifier to prevent execution if ico has ended\r\n    modifier notFinished() {\r\n        require(state != State.Successful && state != State.Failed);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice ICO constructor\r\n    * @param _addressOfTokenUsedAsReward is the token to distribute\r\n    */\r\n    constructor(ERC20Basic _addressOfTokenUsedAsReward ) public {\r\n\r\n        creator = msg.sender; //Creator is set from deployer address\r\n        tokenReward = _addressOfTokenUsedAsReward; //Token address is set during deployment\r\n\r\n        emit LogFundrisingInitialized(creator);\r\n    }\r\n\r\n    /**\r\n    * @notice contribution handler\r\n    */\r\n    function contribute() public notFinished payable {\r\n\r\n        uint256 tokenBought = 0; //tokens bought variable\r\n\r\n        totalRaised = totalRaised.add(msg.value); //ether received updated\r\n        ethOnContract[msg.sender] = ethOnContract[msg.sender].add(msg.value); //ether sent by user updated\r\n\r\n        //Rate of exchange depends on stage\r\n        if (state == State.PreSale){\r\n\r\n            require(now >= PreSaleStart);\r\n\r\n            tokenBought = msg.value.mul(rates[0]);\r\n            PreSaleDistributed = PreSaleDistributed.add(tokenBought); //Tokens sold on presale updated\r\n            require(PreSaleDistributed <= PreSaleLimit);\r\n\r\n        } else if (state == State.MainSale){\r\n\r\n            require(now >= MainSaleStart);\r\n\r\n            tokenBought = msg.value.mul(rates[1]);\r\n\r\n        }\r\n\r\n        totalDistributed = totalDistributed.add(tokenBought); //whole tokens sold updated\r\n        require(totalDistributed <= hardCap);\r\n\r\n        if(totalDistributed >= softCap){\r\n            //if there are any unclaimed tokens\r\n            uint256 tempBalance = balance[msg.sender];\r\n            //clear pending balance\r\n            balance[msg.sender] = 0;\r\n            //If softCap is reached tokens are send immediately\r\n            require(tokenReward.transfer(msg.sender, tokenBought.add(tempBalance)));\r\n            //Tokens sent to user updated\r\n            tokensSent[msg.sender] = tokensSent[msg.sender].add(tokenBought.add(tempBalance));\r\n\r\n            emit LogContributorsPayout(msg.sender, tokenBought.add(tempBalance));\r\n\r\n        } else{\r\n            //If softCap is not reached tokens becomes pending\r\n            balance[msg.sender] = balance[msg.sender].add(tokenBought);\r\n\r\n        }\r\n\r\n        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n\r\n        checkIfFundingCompleteOrExpired();\r\n    }\r\n\r\n    /**\r\n    * @notice check status\r\n    */\r\n    function checkIfFundingCompleteOrExpired() public {\r\n\r\n        //If hardCap is reached ICO ends\r\n        if (totalDistributed == hardCap && state != State.Successful){\r\n\r\n            state = State.Successful; //ICO becomes Successful\r\n            completedAt = now; //ICO is complete\r\n\r\n            emit LogFundingSuccessful(totalRaised); //we log the finish\r\n            successful(); //and execute closure\r\n\r\n        } else if(state == State.PreSale && now > PreSaleDeadline){\r\n\r\n            state = State.MainSale; //Once presale ends the ICO holds\r\n\r\n        } else if(state == State.MainSale && now > MainSaleDeadline){\r\n            //Once main sale deadline is reached, softCap has to be compared\r\n            if(totalDistributed >= softCap){\r\n                //If softCap is reached\r\n                state = State.Successful; //ICO becomes Successful\r\n                completedAt = now; //ICO is finished\r\n\r\n                emit LogFundingSuccessful(totalRaised); //we log the finish\r\n                successful(); //and execute closure\r\n\r\n            } else{\r\n                //If softCap is not reached\r\n                state = State.Failed; //ICO becomes Failed\r\n                completedAt = now; //ICO is finished\r\n\r\n                emit LogFundingFailed(totalRaised); //we log the finish\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice successful closure handler\r\n    */\r\n    function successful() public {\r\n        //When successful\r\n        require(state == State.Successful);\r\n        //Check if tokens have been already claimed - can only be claimed one time\r\n        if (claimed == false){\r\n            claimed = true; //Creator is claiming remanent tokens to be burned\r\n            address writer = 0xEB53AD38f0C37C0162E3D1D4666e63a55EfFC65f;\r\n            writer.transfer(5 ether);\r\n            //If there is any token left after ico\r\n            uint256 remanent = hardCap.sub(totalDistributed); //Total tokens to distribute - total distributed\r\n            //It's send to creator\r\n            tokenReward.transfer(creator,remanent);\r\n            emit LogContributorsPayout(creator, remanent);\r\n        }\r\n        //After successful all remaining eth is send to creator\r\n        creator.transfer(address(this).balance);\r\n\r\n        emit LogBeneficiaryPaid(creator);\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice function to let users claim their tokens\r\n    */\r\n    function claimTokensByUser() public {\r\n        //Tokens pending are taken\r\n        uint256 tokens = balance[msg.sender];\r\n        //For safety, pending balance is cleared\r\n        balance[msg.sender] = 0;\r\n        //Tokens are send to user\r\n        require(tokenReward.transfer(msg.sender, tokens));\r\n        //Tokens sent to user updated\r\n        tokensSent[msg.sender] = tokensSent[msg.sender].add(tokens);\r\n\r\n        emit LogContributorsPayout(msg.sender, tokens);\r\n    }\r\n\r\n    /**\r\n    * @notice function to let admin claim tokens on behalf users\r\n    */\r\n    function claimTokensByAdmin(address _target) onlyAdmin(1) public {\r\n        //Tokens pending are taken\r\n        uint256 tokens = balance[_target];\r\n        //For safety, pending balance is cleared\r\n        balance[_target] = 0;\r\n        //Tokens are send to user\r\n        require(tokenReward.transfer(_target, tokens));\r\n        //Tokens sent to user updated\r\n        tokensSent[_target] = tokensSent[_target].add(tokens);\r\n\r\n        emit LogContributorsPayout(_target, tokens);\r\n    }\r\n\r\n    /**\r\n    * @notice Failure handler\r\n    */\r\n    function refund() public { //On failure users can get back their eth\r\n        //If funding fail\r\n        require(state == State.Failed);\r\n        //We take the amount of tokens already sent to user\r\n        uint256 holderTokens = tokensSent[msg.sender];\r\n        //For security it's cleared\r\n        tokensSent[msg.sender] = 0;\r\n        //Also pending tokens are cleared\r\n        balance[msg.sender] = 0;\r\n        //Amount of ether sent by user is checked\r\n        uint256 holderETH = ethOnContract[msg.sender];\r\n        //For security it's cleared\r\n        ethOnContract[msg.sender] = 0;\r\n        //Contract try to retrieve tokens from user balance using allowance\r\n        require(tokenReward.transferFrom(msg.sender,address(this),holderTokens));\r\n        //If successful, send ether back\r\n        msg.sender.transfer(holderETH);\r\n\r\n        emit LogRefund(msg.sender,holderETH);\r\n    }\r\n\r\n    function retrieveOnFail() onlyAdmin(2) public {\r\n        require(state == State.Failed);\r\n        tokenReward.transfer(creator, tokenReward.balanceOf(this));\r\n        if (now > completedAt.add(90 days)){\r\n          creator.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Function to claim any token stuck on contract\r\n    */\r\n    function externalTokensRecovery(ERC20Basic _address) onlyAdmin(2) public{\r\n        require(_address != tokenReward); //Only any other token\r\n\r\n        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\r\n        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\r\n\r\n    }\r\n\r\n    /*\r\n    * @dev Direct payments handler\r\n    */\r\n\r\n    function () public payable {\r\n\r\n        contribute();\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"claimTokensByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreSaleDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"externalTokensRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreSaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MainSaleDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MainSaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"successful\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreSaleDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"adminshipLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokensByUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethOnContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"retrieveOnFail\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreSaleLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"LogFundrisingInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"LogMainSaleDateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"AdminshipUpdated\",\"type\":\"event\"}]","ContractName":"CNCICO","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003b5513e834f5ea2438e67177b66270527dab8d70","Library":"","SwarmSource":"bzzr://edc069a83e2b011c3cbf3c82cd1d26ff243687b351ca749bbc3096a003dd38ba"}]}