{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Distribution {\r\n  using SafeMath for uint256;\r\n\r\n  enum State {\r\n    AwaitingTokens,\r\n    DistributingNormally,\r\n    DistributingProRata,\r\n    Done\r\n  }\r\n \r\n  address admin;\r\n  ERC20 tokenContract;\r\n  State public state;\r\n  uint256 actualTotalTokens;\r\n  uint256 tokensTransferred;\r\n\r\n  bytes32[] contributionHashes;\r\n  uint256 expectedTotalTokens;\r\n\r\n  function Distribution(address _admin, ERC20 _tokenContract,\r\n                        bytes32[] _contributionHashes, uint256 _expectedTotalTokens) public {\r\n    expectedTotalTokens = _expectedTotalTokens;\r\n    contributionHashes = _contributionHashes;\r\n    tokenContract = _tokenContract;\r\n    admin = _admin;\r\n\r\n    state = State.AwaitingTokens;\r\n  }\r\n\r\n  function _handleTokensReceived(uint256 totalTokens) internal {\r\n    require(state == State.AwaitingTokens);\r\n    require(totalTokens > 0);\r\n\r\n    tokensTransferred = 0;\r\n    if (totalTokens == expectedTotalTokens) {\r\n      state = State.DistributingNormally;\r\n    } else {\r\n      actualTotalTokens = totalTokens;\r\n      state = State.DistributingProRata;\r\n    }\r\n  }\r\n\r\n  function handleTokensReceived() public {\r\n    _handleTokensReceived(tokenContract.balanceOf(this));\r\n  }\r\n\r\n  function tokenFallback(address /*_from*/, uint _value, bytes /*_data*/) public {\r\n    require(msg.sender == address(tokenContract));\r\n    _handleTokensReceived(_value);\r\n  }\r\n\r\n  function _numTokensForContributor(uint256 contributorExpectedTokens,\r\n                                    uint256 _tokensTransferred, State _state)\r\n      internal view returns (uint256) {\r\n    if (_state == State.DistributingNormally) {\r\n      return contributorExpectedTokens;\r\n    } else if (_state == State.DistributingProRata) {\r\n      uint256 tokens = actualTotalTokens.mul(contributorExpectedTokens) / expectedTotalTokens;\r\n\r\n      uint256 tokensRemaining = actualTotalTokens - _tokensTransferred;\r\n      if (tokens < tokensRemaining) {\r\n        return tokens;\r\n      } else {\r\n        return tokensRemaining;\r\n      }\r\n    } else {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  function doDistributionRange(uint256 start, address[] contributors,\r\n                               uint256[] contributorExpectedTokens) public {\r\n    require(contributors.length == contributorExpectedTokens.length);\r\n\r\n    uint256 tokensTransferredSoFar = tokensTransferred;\r\n    uint256 end = start + contributors.length;\r\n    State _state = state;\r\n    for (uint256 i = start; i < end; ++i) {\r\n      address contributor = contributors[i];\r\n      uint256 expectedTokens = contributorExpectedTokens[i];\r\n      require(contributionHashes[i] == keccak256(contributor, expectedTokens));\r\n      contributionHashes[i] = 0x00000000000000000000000000000000;\r\n\r\n      uint256 numTokens = _numTokensForContributor(expectedTokens, tokensTransferredSoFar, _state);\r\n      tokensTransferredSoFar += numTokens;\r\n      require(tokenContract.transfer(contributor, numTokens));\r\n    }\r\n\r\n    tokensTransferred = tokensTransferredSoFar;\r\n    if (tokensTransferred == actualTotalTokens) {\r\n      state = State.Done;\r\n    }\r\n  }\r\n\r\n  function numTokensForContributor(uint256 contributorExpectedTokens)\r\n      public view returns (uint256) {\r\n    return _numTokensForContributor(contributorExpectedTokens, tokensTransferred, state);\r\n  }\r\n\r\n  function temporaryEscapeHatch(address to, uint256 value, bytes data) public {\r\n    require(msg.sender == admin);\r\n    require(to.call.value(value)(data));\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"contributors\",\"type\":\"address[]\"},{\"name\":\"contributorExpectedTokens\",\"type\":\"uint256[]\"}],\"name\":\"doDistributionRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributorExpectedTokens\",\"type\":\"uint256\"}],\"name\":\"numTokensForContributor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"temporaryEscapeHatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"handleTokensReceived\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_contributionHashes\",\"type\":\"bytes32[]\"},{\"name\":\"_expectedTotalTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Distribution","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d7c02a75d24e5a0f8140488877874cd880dafe150000000000000000000000006b834f43b7f5a1644e0c81caa0246969da23105e00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000ab5cdde54d4851d671c16000000000000000000000000000000000000000000000000000000000000001c398e0c6b63405f00eea99e8e83009e22676ae0b5db323e143963e687b7ecc0ca6f3f33a9b2c047d5e1c401df15c4e91d19f5cdbf3fae6974d5c4fe9979989292b515f89c32fbde307d0c0766149a9af2712525a3c2b0e23704388e69566f973fc4633882552febe49b69516fc06a721617f1dd426657630eff484e2ceb0b2d74cb287aea330ed92517fe9d5a5fa8c6b0b06fe35395bde671a40de716a5fc943192abab11e02d6bdf9b7a87a6b1410f4d08563d58a205f2855b855ed81d260a8de7768dd1c8738ed51b1e1630e2b7a5b55a3721342b0795833b61c83a9e60310bed21eeaef1855a2791add125f5ef10da8c1f76a65e9f7b415920a76809776aae455f423f5fbe4f76ddce1d5779905eaeeba3c984946d468a2a27b4b220b55e48dfa52da016393b6c149519ede2c0eadefed9953e4d4a189c083883700baa492dffcccad1372f3ffa048fa8ba0afe41c9cf01bc0c32e704e6f6ba851dc5f94eb7d7ee56047fb11a5831bb736760877a1659bde8606df4dd7c42c640bbb8fab4bb77c1a260e9acc6532aed15aba27b846a8f71030462611db2bb341bb0e2a43482b6abd4a2e6da0fda4edf7cf52529fc0eeb110b900f7cdf01101c39833bde05340f37491ec0a5802d17dcd7b1531f2f45f5f12d4ace1042672dca3d84a2372bf1d8a6cdc71522b0f30a6f1a3a4fc69e89d7c5946973bd025ec0fbef99ce32e90f82134a2e03ec019b2f3182b8f132c889c9de72a5bcce8267bc3db7ac5e6fd9a58f4e6c8968863ea54846aaf2f0b4e2a74f2b763315a2dd66544a803efbeee1476a28aa0980073f060c5b2a2e4619c725eb106b9d37f3edc4688339ef1e17b359d3f42368eeafcd6ab086c78e2ef63631dc161e1dbc56b9b0495a7893801b0abd122784ceae302b845fb94b190d0aeb75e495fea3e10d8a03b58aff337e45e8af731b5b2358799a09b9a1a836c202a760f491121b1b94af813ba75c1c29ebf0fa61e40bb7c25704a8d61efe549a88205dc2d15215cfd63557e04a5de987c4e56581f97b0a5b6112631228edb04a4e767680698fc81c36877ab174fc4846988d328618fa372c217f2377587aa022b22ee308a3e97fee8fdc32fb106a2f457763dcb7a47f2f47d0abf3a29507dd8ac13dec0f867c7734a4ddad4ae01c4774d7a67c69ae9631c829ada73f1570e31cb82d95d6d8d94431e53f805171ee8034e473a3b2fe2a1672aa47ecf5bc992401052156c866a24069453b2277e2d34fe0d860bd","Library":"","SwarmSource":"bzzr://7a60945007f3e7e534c9af8e29b16d41a46f8496aff5394e7bde6cef7689bbe0"}]}