{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary strUtils {\r\n    /* Converts given number to base58, limited by _maxLength symbols */\r\n    function toBase58(uint256 _value, uint8 _maxLength) internal pure returns (string) {\r\n        string memory letters = \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\";\r\n        bytes memory alphabet = bytes(letters);\r\n        uint8 base = 58;\r\n        uint8 len = 0;\r\n        uint256 remainder = 0;\r\n        bool needBreak = false;\r\n        bytes memory bytesReversed = bytes(new string(_maxLength));\r\n\r\n        for (uint8 i = 0; i < _maxLength; i++) {\r\n            if(_value < base){\r\n                needBreak = true;\r\n            }\r\n            remainder = _value % base;\r\n            _value = uint256(_value / base);\r\n            bytesReversed[i] = alphabet[remainder];\r\n            len++;\r\n            if(needBreak){\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Reverse\r\n        bytes memory result = bytes(new string(len));\r\n        for (i = 0; i < len; i++) {\r\n            result[i] = bytesReversed[len - i - 1];\r\n        }\r\n        return string(result);\r\n    }\r\n\r\n    /* Concatenates two strings */\r\n    function concat(string _s1, string _s2) internal pure returns (string) {\r\n        bytes memory bs1 = bytes(_s1);\r\n        bytes memory bs2 = bytes(_s2);\r\n        string memory s3 = new string(bs1.length + bs2.length);\r\n        bytes memory bs3 = bytes(s3);\r\n\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < bs1.length; i++) {\r\n            bs3[j++] = bs1[i];\r\n        }\r\n        for (i = 0; i < bs2.length; i++) {\r\n            bs3[j++] = bs2[i];\r\n        }\r\n\r\n        return string(bs3);\r\n    }\r\n\r\n}\r\n\r\ncontract EthTxt {\r\n\r\n  event NewText(string text, string code, address submitter, uint timestamp);\r\n\r\n  struct StoredText {\r\n      string text;\r\n      address submitter;\r\n      uint timestamp;\r\n  }\r\n\r\n  uint storedTextCount = 0;\r\n\r\n  // change this to 0 for testnet / ropsten\r\n  uint blockoffset = 4000000;\r\n\r\n  mapping (string => StoredText) texts;\r\n\r\n  // this is the constructor\r\n  function EthTxt() public {\r\n      // do nothing here\r\n  }\r\n\r\n  function archiveText(string _text) public {\r\n    // make sure _text is not an empty string\r\n    require(bytes(_text).length != 0);\r\n\r\n    var code = _generateShortLink();\r\n    // make sure code doesnt exist in map\r\n    require(bytes(getText(code)).length == 0);\r\n\r\n    // add text to map\r\n    texts[code] = StoredText(_text, msg.sender, now);\r\n    NewText(_text, code, msg.sender, now);\r\n    storedTextCount = storedTextCount + 1;\r\n  }\r\n\r\n  function getText(string _code) public view returns (string) {\r\n    return texts[_code].text;\r\n  }\r\n\r\n  function getTextCount() public view returns (uint) {\r\n    return storedTextCount;\r\n  }\r\n\r\n  // Generates a shortlink code\r\n  function _generateShortLink() private view returns (string) {\r\n      var s1 = strUtils.toBase58(uint256(msg.sender), 2);\r\n      var s2 = strUtils.toBase58(block.number - blockoffset, 11);\r\n\r\n      var s = strUtils.concat(s1, s2);\r\n      return s;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"getText\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"archiveText\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTextCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"text\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"code\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewText\",\"type\":\"event\"}]","ContractName":"EthTxt","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4d32bacfb5914a17beac960c718b9ea19c570527ff852138d55c661317fb97c1"}]}