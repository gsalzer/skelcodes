{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19; // solhint-disable-line\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Srini Vasan \r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n}\r\n\r\ncontract CryptonToken is ERC721 {\r\n\r\n  /*** EVENTS ***/\r\n\r\n  /// @dev The Birth event is fired whenever a new crypton comes into existence.\r\n  event Birth(uint256 tokenId, string name, address owner, bool isProtected, uint8 category);\r\n\r\n  /// @dev The TokenSold event is fired whenever a token is sold.\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\r\n\r\n  /// @dev Transfer event as defined in current draft of ERC721. \r\n  ///  ownership is assigned, including births.\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  /// @dev the PaymentTransferredToPreviousOwner event is fired when the previous owner of the Crypton is paid after a purchase.\r\n  event PaymentTransferredToPreviousOwner(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\r\n\r\n  // @dev CryptonIsProtected is fired when the Crypton is protected from snatching - i.e. owner is allowed to set the selling price for the crypton\r\n  event CryptonIsProtected(uint256 tokenId);\r\n\r\n    // @dev The markup was changed\r\n    event MarkupChanged(string name, uint256 newMarkup);\r\n    \r\n    //@dev Selling price of protected Crypton changed\r\n    event ProtectedCryptonSellingPriceChanged(uint256 tokenId, uint256 newSellingPrice);\r\n    \r\n    // Owner protected their Crypton\r\n    event OwnerProtectedCrypton(uint256 _tokenId, uint256 newSellingPrice);\r\n\r\n    //Contract paused event\r\n    event ContractIsPaused(bool paused);\r\n\r\n  /*** CONSTANTS ***/\r\n\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant NAME = \"Cryptons\"; // solhint-disable-line\r\n  string public constant SYMBOL = \"CRYPTON\"; // solhint-disable-line\r\n\r\n  uint256 private startingPrice = 0.1 ether;\r\n  uint256 private defaultMarkup = 2 ether;\r\n  uint256 private FIRST_STEP_LIMIT =  1.0 ether;\r\n  uint16 private FIRST_STEP_MULTIPLIER = 200; // double the value\r\n  uint16 private SECOND_STEP_MULTIPLIER = 120; // increment value by 20%\r\n  uint16 private XPROMO_MULTIPLIER = 500; // 5 times the value\r\n  uint16 private CRYPTON_CUT = 6; // our cut\r\n  uint16 private NET_PRICE_PERCENT = 100 - CRYPTON_CUT; // Net price paid out after cut\r\n\r\n  // I could have used enums - but preferered the more specific uint8 \r\n  uint8 private constant PROMO = 1;\r\n  uint8 private constant STANDARD = 2;\r\n  uint8 private constant RESERVED = 7;\r\n  uint8 private constant XPROMO = 10; // First transaction, contract sets sell price to 5x\r\n  \r\n  /*** STORAGE ***/\r\n\r\n  /// @dev A mapping from crypton IDs to the address that owns them. All cryptons have\r\n  ///  some valid owner address.\r\n  mapping (uint256 => address) public cryptonIndexToOwner;\r\n\r\n  mapping (uint256 => bool) public cryptonIndexToProtected;\r\n\r\n  // @dev A mapping from owner address to count of tokens that address owns.\r\n  //  Used internally inside balanceOf() to resolve ownership count.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  /// @dev A mapping from CryptonIDs to an address that has been approved to call\r\n  ///  transferFrom(). Each Crypton can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n  mapping (uint256 => address) public cryptonIndexToApproved;\r\n\r\n  // @dev A mapping from CryptonIDs to the price of the token.\r\n  mapping (uint256 => uint256) private cryptonIndexToPrice;\r\n\r\n\r\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n\r\n  /*** DATATYPES ***/\r\n  struct Crypton {\r\n    string name;\r\n    uint8  category;\r\n    uint256 markup;\r\n  }\r\n\r\n  Crypton[] private cryptons;\r\n\r\n    /// @dev Keeps track whether the contract is paused. When that is true, most actions are blocked.\r\n    bool public paused = false;\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  /// @dev Access modifier for COO-only functionality\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require(\r\n      msg.sender == ceoAddress ||\r\n      msg.sender == cooAddress\r\n    );\r\n    _;\r\n  }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause()\r\n        external\r\n        onlyCLevel\r\n        whenNotPaused\r\n    {\r\n        paused = true;\r\n        emit ContractIsPaused(paused);\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause()\r\n        public\r\n        onlyCEO\r\n        whenPaused\r\n    {\r\n        // can't unpause if contract was forked\r\n        paused = false;\r\n        emit ContractIsPaused(paused);\r\n    }\r\n  /*** CONSTRUCTOR ***/\r\n  constructor() public {\r\n    ceoAddress = msg.sender;\r\n    cooAddress = msg.sender;\r\n  }\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public whenNotPaused {\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    cryptonIndexToApproved[_tokenId] = _to;\r\n\r\n    emit Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  /// @dev Creates a new Crypton with the given name, startingPrice, category and an (optional) owner wallet address\r\n  function createCrypton(\r\n    string _name,                           //Required\r\n    uint8 _category,                        //Required\r\n    uint256 _startingPrice,                 // Optional - defaults to startingPrice\r\n    uint256 _markup,                        // Optional - defaults to defaultMarkup\r\n    address _owner                          // Optional - deafults to contract\r\n    ) public onlyCLevel {\r\n      address cryptonOwner = _owner;\r\n      if (cryptonOwner == address(0)) {\r\n        cryptonOwner = address(this);\r\n      }\r\n      \r\n      if (_category == XPROMO) {    // XPROMO Cryptons - force ownership to contract\r\n          cryptonOwner = address(this);\r\n      }\r\n\r\n      if (_markup <= 0) {\r\n          _markup = defaultMarkup;\r\n      }\r\n        \r\n      if (_category == PROMO) { // PROMO Cryptons - force markup to zero\r\n        _markup = 0;  \r\n      }\r\n\r\n      if (_startingPrice <= 0) {\r\n        _startingPrice = startingPrice;\r\n      }\r\n\r\n\r\n      bool isProtected = (_category == PROMO)?true:false; // PROMO cryptons are protected, others are not - at creation\r\n      \r\n      _createCrypton(_name, cryptonOwner, _startingPrice, _markup, isProtected, _category);\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific crypton.\r\n  /// @param _tokenId The tokenId of the crypton of interest.\r\n  function getCrypton(uint256 _tokenId) public view returns (\r\n    string cryptonName,\r\n    uint8 category,\r\n    uint256 markup,\r\n    uint256 sellingPrice,\r\n    address owner,\r\n    bool isProtected\r\n  ) {\r\n    Crypton storage crypton = cryptons[_tokenId];\r\n    cryptonName = crypton.name;\r\n    sellingPrice = cryptonIndexToPrice[_tokenId];\r\n    owner = cryptonIndexToOwner[_tokenId];\r\n    isProtected = cryptonIndexToProtected[_tokenId];\r\n    category = crypton.category;\r\n    markup = crypton.markup;\r\n  }\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n  /// For querying owner of token\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = cryptonIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  /// @dev This function withdraws the contract owner's cut.\r\n  /// Any amount may be withdrawn as there is no user funds.\r\n  /// User funds are immediately sent to the old owner in `purchase`\r\n  function payout(address _to) public onlyCLevel {\r\n    _payout(_to);\r\n  }\r\n\r\n  /// @dev This function allows the contract owner to adjust the selling price of a protected Crypton\r\n  function setPriceForProtectedCrypton(uint256 _tokenId, uint256 newSellingPrice) public whenNotPaused {\r\n    address oldOwner = cryptonIndexToOwner[_tokenId]; // owner in blockchain\r\n    address newOwner = msg.sender;                    // person requesting change\r\n    require(oldOwner == newOwner); // Only current owner can update the price\r\n    require(cryptonIndexToProtected[_tokenId]); // Make sure Crypton is protected\r\n    require(newSellingPrice > 0);  // Make sure the price is not zero\r\n    cryptonIndexToPrice[_tokenId] = newSellingPrice;\r\n    emit ProtectedCryptonSellingPriceChanged(_tokenId, newSellingPrice);\r\n }\r\n\r\n  /// @dev This function allows the contract owner to buy protection for an unprotected that they already own\r\n  function setProtectionForMyUnprotectedCrypton(uint256 _tokenId, uint256 newSellingPrice) public payable whenNotPaused {\r\n    address oldOwner = cryptonIndexToOwner[_tokenId]; // owner in blockchain\r\n    address newOwner = msg.sender;                    // person requesting change\r\n    uint256 markup = cryptons[_tokenId].markup;\r\n    if (cryptons[_tokenId].category != PROMO) {\r\n      require(markup > 0); // if this is NOT a promotional crypton, the markup should be > zero\r\n    }\r\n    \r\n    require(oldOwner == newOwner); // Only current owner can buy protection for existing crypton\r\n    require(! cryptonIndexToProtected[_tokenId]); // Make sure Crypton is NOT already protected\r\n    require(newSellingPrice > 0);  // Make sure the sellingPrice is more than zero\r\n    require(msg.value >= markup);   // Make sure to collect the markup\r\n    \r\n    cryptonIndexToPrice[_tokenId] = newSellingPrice;\r\n    cryptonIndexToProtected[_tokenId] = true;\r\n    \r\n    emit OwnerProtectedCrypton(_tokenId, newSellingPrice);\r\n }\r\n \r\n  function getMarkup(uint256 _tokenId) public view returns (uint256 markup) {\r\n    return cryptons[_tokenId].markup;\r\n  }\r\n\r\n  /// @dev This function allows the contract owner to adjust the markup value\r\n  function setMarkup(uint256 _tokenId, uint256 newMarkup) public onlyCLevel {\r\n    require(newMarkup >= 0);\r\n    cryptons[_tokenId].markup = newMarkup;\r\n    emit MarkupChanged(cryptons[_tokenId].name, newMarkup);\r\n  }\r\n    \r\n  // Allows someone to send ether and obtain the token\r\n  function purchase(uint256 _tokenId, uint256 newSellingPrice) public payable whenNotPaused {\r\n    address oldOwner = cryptonIndexToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n    bool isAlreadyProtected = cryptonIndexToProtected[_tokenId];\r\n    \r\n    uint256 sellingPrice = cryptonIndexToPrice[_tokenId];\r\n    uint256 markup = cryptons[_tokenId].markup;\r\n    \r\n    if (cryptons[_tokenId].category != PROMO) {\r\n      require(markup > 0); // if this is NOT a promotional crypton, the markup should be > zero\r\n    }\r\n\r\n    // Make sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Make sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice); // this is redundant - as we are checking this below\r\n\r\n    if (newSellingPrice > 0) { // if we are called with a new selling price, then the buyer is paying the markup or purchasing a protected crypton\r\n        uint256 purchasePrice = sellingPrice; //assume it is protected\r\n        if (! cryptonIndexToProtected[_tokenId] ) { // Crypton is not protected,\r\n            purchasePrice = sellingPrice + markup;  // apply markup\r\n        }\r\n\r\n        // If the Crypton is not already protected, make sure that the buyer is paying markup more than the current selling price\r\n        // If the buyer is not paying the markup - then he cannot set the new selling price- bailout\r\n        require(msg.value >= purchasePrice); \r\n\r\n        // Ok - the buyer paid the markup or the crypton was already protected.\r\n        cryptonIndexToPrice[_tokenId] = newSellingPrice;  // Set the selling price that the buyer wants\r\n        cryptonIndexToProtected[_tokenId] = true;         // Set the Crypton to protected\r\n        emit CryptonIsProtected(_tokenId);                // Let the world know\r\n\r\n    } else {\r\n        // Compute next listing price.\r\n        // Handle XPROMO case first...\r\n        if (\r\n          (oldOwner == address(this)) &&                // first transaction only`\r\n          (cryptons[_tokenId].category == XPROMO)      // Only for XPROMO category\r\n          ) \r\n        {\r\n          cryptonIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, XPROMO_MULTIPLIER), NET_PRICE_PERCENT);            \r\n        } else {\r\n          if (sellingPrice < FIRST_STEP_LIMIT) {\r\n            // first stage\r\n            cryptonIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, FIRST_STEP_MULTIPLIER), NET_PRICE_PERCENT);\r\n          } else {\r\n            // second stage\r\n            cryptonIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, SECOND_STEP_MULTIPLIER), NET_PRICE_PERCENT);\r\n          }\r\n        }\r\n\r\n    }\r\n       \r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, NET_PRICE_PERCENT), 100));\r\n    string storage cname = cryptons[_tokenId].name;\r\n\r\n    bool isReservedToken = (cryptons[_tokenId].category == RESERVED);\r\n  \r\n    if (isReservedToken && isAlreadyProtected) {\r\n      oldOwner.transfer(payment); //(1-CRYPTON_CUT/100)\r\n      emit PaymentTransferredToPreviousOwner(_tokenId, sellingPrice, cryptonIndexToPrice[_tokenId], oldOwner, newOwner, cname);\r\n      emit TokenSold(_tokenId, sellingPrice, cryptonIndexToPrice[_tokenId], oldOwner, newOwner, cname);\r\n      return;\r\n    }\r\n\r\n    // Pay seller of the Crypton if they are not this contract or if this is a Reserved token\r\n    if ((oldOwner != address(this)) && !isReservedToken ) // Not a Reserved token and not owned by the contract\r\n    {\r\n      oldOwner.transfer(payment); //(1-CRYPTON_CUT/100)\r\n      emit PaymentTransferredToPreviousOwner(_tokenId, sellingPrice, cryptonIndexToPrice[_tokenId], oldOwner, newOwner, cname);\r\n    }\r\n\r\n    emit TokenSold(_tokenId, sellingPrice, cryptonIndexToPrice[_tokenId], oldOwner, newOwner, cname);\r\n\r\n  }\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    return cryptonIndexToPrice[_tokenId];\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n\r\n    ceoAddress = _newCEO;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\r\n  /// @param _newCOO The address of the new COO\r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n\r\n    cooAddress = _newCOO;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint256 _tokenId) public whenNotPaused {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = cryptonIndexToOwner[_tokenId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  /// @param _owner The owner whose Cryptons we are interested in.\r\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n  ///  expensive (it walks the entire Cryptons array looking for cryptons belonging to owner),\r\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n  ///  not contract-to-contract calls.\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalCryptons = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 cryptonId;\r\n      for (cryptonId = 0; cryptonId <= totalCryptons; cryptonId++) {\r\n        if (cryptonIndexToOwner[cryptonId] == _owner) {\r\n          result[resultIndex] = cryptonId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /// For querying totalSupply of token\r\n  /// @dev Required for ERC-721 compliance.\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return cryptons.length;\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public whenNotPaused {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public whenNotPaused {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return cryptonIndexToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  /// For creating Crypton\r\n  function _createCrypton(string _name, address _owner, uint256 _price, uint256 _markup, bool _isProtected, uint8 _category) private {\r\n    Crypton memory _crypton = Crypton({\r\n      name: _name,\r\n      category: _category,\r\n      markup: _markup\r\n    });\r\n    uint256 newCryptonId = cryptons.push(_crypton) - 1;\r\n\r\n    // It's probably never going to happen, 4 billion tokens are A LOT, but\r\n    // let's just be 100% sure we never let this happen.\r\n    require(newCryptonId == uint256(uint32(newCryptonId)));\r\n\r\n    emit Birth(newCryptonId, _name, _owner, _isProtected, _category);\r\n\r\n    cryptonIndexToPrice[newCryptonId] = _price;\r\n    \r\n    cryptonIndexToProtected[newCryptonId] = _isProtected; // _isProtected is true for promo cryptons - false for others.\r\n\r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transfer(address(0), _owner, newCryptonId);\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == cryptonIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// For paying out balance on contract\r\n  function _payout(address _to) private {\r\n    address myAddress = this;\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(myAddress.balance);\r\n    } else {\r\n      _to.transfer(myAddress.balance);\r\n    }\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific Crypton to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    // Since the number of cryptons is capped to 2^32 we can't overflow this\r\n    ownershipTokenCount[_to]++;\r\n    //transfer ownership\r\n    cryptonIndexToOwner[_tokenId] = _to;\r\n\r\n    // When creating new cryptons _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete cryptonIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n//various getter/setter methods\r\n\r\n  function setFIRST_STEP_LIMIT(uint256 newLimit) public onlyCLevel {\r\n    require(newLimit > 0 && newLimit < 100 ether);\r\n    FIRST_STEP_LIMIT = newLimit;\r\n  }\r\n  function getFIRST_STEP_LIMIT() public view returns (uint256 value) {\r\n    return FIRST_STEP_LIMIT;\r\n  }\r\n\r\n  function setFIRST_STEP_MULTIPLIER(uint16 newValue) public onlyCLevel {\r\n    require(newValue >= 110 && newValue <= 200);\r\n    FIRST_STEP_MULTIPLIER = newValue;\r\n  }\r\n  function getFIRST_STEP_MULTIPLIER() public view returns (uint16 value) {\r\n    return FIRST_STEP_MULTIPLIER;\r\n  }\r\n\r\n  function setSECOND_STEP_MULTIPLIER(uint16 newValue) public onlyCLevel {\r\n    require(newValue >= 110 && newValue <= 200);\r\n    SECOND_STEP_MULTIPLIER = newValue;\r\n  }\r\n  function getSECOND_STEP_MULTIPLIER() public view returns (uint16 value) {\r\n    return SECOND_STEP_MULTIPLIER;\r\n  }\r\n\r\n  function setXPROMO_MULTIPLIER(uint16 newValue) public onlyCLevel {\r\n    require(newValue >= 100 && newValue <= 10000); // between 0 and 100x\r\n    XPROMO_MULTIPLIER = newValue;\r\n  }\r\n  function getXPROMO_MULTIPLIER() public view returns (uint16 value) {\r\n    return XPROMO_MULTIPLIER;\r\n  }\r\n\r\n  function setCRYPTON_CUT(uint16 newValue) public onlyCLevel {\r\n    require(newValue > 0 && newValue < 10);\r\n    CRYPTON_CUT = newValue;\r\n  }\r\n  function getCRYPTON_CUT() public view returns (uint16 value) {\r\n    return CRYPTON_CUT;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCRYPTON_CUT\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cryptonIndexToProtected\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"newSellingPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceForProtectedCrypton\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint16\"}],\"name\":\"setFIRST_STEP_MULTIPLIER\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cryptonIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint16\"}],\"name\":\"setSECOND_STEP_MULTIPLIER\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setFIRST_STEP_LIMIT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"newSellingPrice\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFIRST_STEP_MULTIPLIER\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCrypton\",\"outputs\":[{\"name\":\"cryptonName\",\"type\":\"string\"},{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"markup\",\"type\":\"uint256\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"isProtected\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint16\"}],\"name\":\"setCRYPTON_CUT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cryptonIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFIRST_STEP_LIMIT\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"newSellingPrice\",\"type\":\"uint256\"}],\"name\":\"setProtectionForMyUnprotectedCrypton\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSECOND_STEP_MULTIPLIER\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"newMarkup\",\"type\":\"uint256\"}],\"name\":\"setMarkup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint16\"}],\"name\":\"setXPROMO_MULTIPLIER\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getXPROMO_MULTIPLIER\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_category\",\"type\":\"uint8\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_markup\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createCrypton\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMarkup\",\"outputs\":[{\"name\":\"markup\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isProtected\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"PaymentTransferredToPreviousOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CryptonIsProtected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newMarkup\",\"type\":\"uint256\"}],\"name\":\"MarkupChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newSellingPrice\",\"type\":\"uint256\"}],\"name\":\"ProtectedCryptonSellingPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newSellingPrice\",\"type\":\"uint256\"}],\"name\":\"OwnerProtectedCrypton\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"ContractIsPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CryptonToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0c81aab5fa2e5515f88fcd45621331f17b869063ec6310e598a52fe6faec62cf"}]}