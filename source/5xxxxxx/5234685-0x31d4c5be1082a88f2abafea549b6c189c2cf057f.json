{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts-origin/AetherAccessControl.sol\r\n\r\n/// @title A facet of AetherCore that manages special access privileges.\r\n/// @dev See the AetherCore contract documentation to understand how the various contract facets are arranged.\r\ncontract AetherAccessControl {\r\n    // This facet controls access control for Laputa. There are four roles managed here:\r\n    //\r\n    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\r\n    //         contracts. It is also the only role that can unpause the smart contract. It is initially\r\n    //         set to the address that created the smart contract in the AetherCore constructor.\r\n    //\r\n    //     - The CFO: The CFO can withdraw funds from AetherCore and its auction contracts.\r\n    //\r\n    //     - The COO: The COO can release properties to auction.\r\n    //\r\n    // It should be noted that these roles are distinct without overlap in their access abilities, the\r\n    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any\r\n    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This\r\n    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of\r\n    // convenience. The less we use an address, the less likely it is that we somehow compromise the\r\n    // account.\r\n\r\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\r\n    event ContractUpgrade(address newContract);\r\n\r\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) public onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new CFO\r\n    function setCFO(address _newCFO) public onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) public onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    function withdrawBalance() external onlyCFO {\r\n        cfoAddress.transfer(this.balance);\r\n    }\r\n\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() public onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    function unpause() public onlyCEO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n}\r\n\r\n// File: contracts-origin/AetherBase.sol\r\n\r\n/// @title Base contract for Aether. Holds all common structs, events and base variables.\r\n/// @author Project Aether (https://www.aether.city)\r\n/// @dev See the PropertyCore contract documentation to understand how the various contract facets are arranged.\r\ncontract AetherBase is AetherAccessControl {\r\n    /*** EVENTS ***/\r\n\r\n    /// @dev The Construct event is fired whenever a property updates.\r\n    event Construct (\r\n      address indexed owner,\r\n      uint256 propertyId,\r\n      PropertyClass class,\r\n      uint8 x,\r\n      uint8 y,\r\n      uint8 z,\r\n      uint8 dx,\r\n      uint8 dz,\r\n      string data\r\n    );\r\n\r\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every\r\n    ///  time a property ownership is assigned.\r\n    event Transfer(\r\n      address indexed from,\r\n      address indexed to,\r\n      uint256 indexed tokenId\r\n    );\r\n\r\n    /*** DATA ***/\r\n\r\n    enum PropertyClass { DISTRICT, BUILDING, UNIT }\r\n\r\n    /// @dev The main Property struct. Every property in Aether is represented\r\n    ///  by a variant of this structure.\r\n    struct Property {\r\n        uint32 parent;\r\n        PropertyClass class;\r\n        uint8 x;\r\n        uint8 y;\r\n        uint8 z;\r\n        uint8 dx;\r\n        uint8 dz;\r\n    }\r\n\r\n    /*** STORAGE ***/\r\n\r\n    /// @dev Ensures that property occupies unique part of the universe.\r\n    bool[100][100][100] public world;\r\n\r\n    /// @dev An array containing the Property struct for all properties in existence. The ID\r\n    ///  of each property is actually an index into this array.\r\n    Property[] properties;\r\n\r\n    /// @dev An array containing the district addresses in existence.\r\n    uint256[] districts;\r\n\r\n    /// @dev A measure of world progression.\r\n    uint256 public progress;\r\n\r\n    /// @dev The fee associated with constructing a unit property.\r\n    uint256 public unitCreationFee = 0.05 ether;\r\n\r\n    /// @dev Keeps track whether updating data is paused.\r\n    bool public updateEnabled = true;\r\n\r\n    /// @dev A mapping from property IDs to the address that owns them. All properties have\r\n    ///  some valid owner address, even gen0 properties are created with a non-zero owner.\r\n    mapping (uint256 => address) public propertyIndexToOwner;\r\n\r\n    /// @dev A mapping from property IDs to the data that is stored on them.\r\n    mapping (uint256 => string) public propertyIndexToData;\r\n\r\n    /// @dev A mapping from owner address to count of tokens that address owns.\r\n    ///  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) ownershipTokenCount;\r\n\r\n    /// @dev Mappings between property nodes.\r\n    mapping (uint256 => uint256) public districtToBuildingsCount;\r\n    mapping (uint256 => uint256[]) public districtToBuildings;\r\n    mapping (uint256 => uint256) public buildingToUnitCount;\r\n    mapping (uint256 => uint256[]) public buildingToUnits;\r\n\r\n    /// @dev A mapping from building propertyId to unit construction privacy.\r\n    mapping (uint256 => bool) public buildingIsPublic;\r\n\r\n    /// @dev A mapping from PropertyIDs to an address that has been approved to call\r\n    ///  transferFrom(). Each Property can only have one approved address for transfer\r\n    ///  at any time. A zero value means no approval is outstanding.\r\n    mapping (uint256 => address) public propertyIndexToApproved;\r\n\r\n    /// @dev Assigns ownership of a specific Property to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n      // since the number of properties is capped to 2^32\r\n      // there is no way to overflow this\r\n      ownershipTokenCount[_to]++;\r\n      // transfer ownership\r\n      propertyIndexToOwner[_tokenId] = _to;\r\n      // When creating new properties _from is 0x0, but we can't account that address.\r\n      if (_from != address(0)) {\r\n          ownershipTokenCount[_from]--;\r\n          // clear any previously approved ownership exchange\r\n          delete propertyIndexToApproved[_tokenId];\r\n      }\r\n      // Emit the transfer event.\r\n      Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _createUnit(\r\n      uint256 _parent,\r\n      uint256 _x,\r\n      uint256 _y,\r\n      uint256 _z,\r\n      address _owner\r\n    )\r\n        internal\r\n        returns (uint)\r\n    {\r\n      require(_x == uint256(uint8(_x)));\r\n      require(_y == uint256(uint8(_y)));\r\n      require(_z == uint256(uint8(_z)));\r\n      require(!world[_x][_y][_z]);\r\n      world[_x][_y][_z] = true;\r\n      return _createProperty(\r\n        _parent,\r\n        PropertyClass.UNIT,\r\n        _x,\r\n        _y,\r\n        _z,\r\n        0,\r\n        0,\r\n        _owner\r\n      );\r\n    }\r\n\r\n    function _createBuilding(\r\n      uint256 _parent,\r\n      uint256 _x,\r\n      uint256 _y,\r\n      uint256 _z,\r\n      uint256 _dx,\r\n      uint256 _dz,\r\n      address _owner,\r\n      bool _public\r\n    )\r\n        internal\r\n        returns (uint)\r\n    {\r\n      require(_x == uint256(uint8(_x)));\r\n      require(_y == uint256(uint8(_y)));\r\n      require(_z == uint256(uint8(_z)));\r\n      require(_dx == uint256(uint8(_dx)));\r\n      require(_dz == uint256(uint8(_dz)));\r\n\r\n      // Looping over world space.\r\n      for(uint256 i = 0; i < _dx; i++) {\r\n          for(uint256 j = 0; j <_dz; j++) {\r\n              if (world[_x + i][0][_z + j]) {\r\n                  revert();\r\n              }\r\n              world[_x + i][0][_z + j] = true;\r\n          }\r\n      }\r\n\r\n      uint propertyId = _createProperty(\r\n        _parent,\r\n        PropertyClass.BUILDING,\r\n        _x,\r\n        _y,\r\n        _z,\r\n        _dx,\r\n        _dz,\r\n        _owner\r\n      );\r\n\r\n      districtToBuildingsCount[_parent]++;\r\n      districtToBuildings[_parent].push(propertyId);\r\n      buildingIsPublic[propertyId] = _public;\r\n      return propertyId;\r\n    }\r\n\r\n    function _createDistrict(\r\n      uint256 _x,\r\n      uint256 _z,\r\n      uint256 _dx,\r\n      uint256 _dz\r\n    )\r\n        internal\r\n        returns (uint)\r\n    {\r\n      require(_x == uint256(uint8(_x)));\r\n      require(_z == uint256(uint8(_z)));\r\n      require(_dx == uint256(uint8(_dx)));\r\n      require(_dz == uint256(uint8(_dz)));\r\n\r\n      uint propertyId = _createProperty(\r\n        districts.length,\r\n        PropertyClass.DISTRICT,\r\n        _x,\r\n        0,\r\n        _z,\r\n        _dx,\r\n        _dz,\r\n        cooAddress\r\n      );\r\n\r\n      districts.push(propertyId);\r\n      return propertyId;\r\n\r\n    }\r\n\r\n\r\n    /// @dev An internal method that creates a new property and stores it. This\r\n    ///  method doesn't do any checking and should only be called when the\r\n    ///  input data is known to be valid. Will generate both a Construct event\r\n    ///  and a Transfer event.\r\n    function _createProperty(\r\n        uint256 _parent,\r\n        PropertyClass _class,\r\n        uint256 _x,\r\n        uint256 _y,\r\n        uint256 _z,\r\n        uint256 _dx,\r\n        uint256 _dz,\r\n        address _owner\r\n    )\r\n        internal\r\n        returns (uint)\r\n    {\r\n        require(_x == uint256(uint8(_x)));\r\n        require(_y == uint256(uint8(_y)));\r\n        require(_z == uint256(uint8(_z)));\r\n        require(_dx == uint256(uint8(_dx)));\r\n        require(_dz == uint256(uint8(_dz)));\r\n        require(_parent == uint256(uint32(_parent)));\r\n        require(uint256(_class) <= 3);\r\n\r\n        Property memory _property = Property({\r\n            parent: uint32(_parent),\r\n            class: _class,\r\n            x: uint8(_x),\r\n            y: uint8(_y),\r\n            z: uint8(_z),\r\n            dx: uint8(_dx),\r\n            dz: uint8(_dz)\r\n        });\r\n        uint256 _tokenId = properties.push(_property) - 1;\r\n\r\n        // It's never going to happen, 4 billion properties is A LOT, but\r\n        // let's just be 100% sure we never let this happen.\r\n        require(_tokenId <= 4294967295);\r\n\r\n        Construct(\r\n            _owner,\r\n            _tokenId,\r\n            _property.class,\r\n            _property.x,\r\n            _property.y,\r\n            _property.z,\r\n            _property.dx,\r\n            _property.dz,\r\n            \"\"\r\n        );\r\n\r\n        // This will assign ownership, and also emit the Transfer event as\r\n        // per ERC721 draft\r\n        _transfer(0, _owner, _tokenId);\r\n\r\n        return _tokenId;\r\n    }\r\n\r\n    /// @dev Computing height of a building with respect to city progression.\r\n    function _computeHeight(\r\n      uint256 _x,\r\n      uint256 _z,\r\n      uint256 _height\r\n    ) internal view returns (uint256) {\r\n        uint256 x = _x < 50 ? 50 - _x : _x - 50;\r\n        uint256 z = _z < 50 ? 50 - _z : _z - 50;\r\n        uint256 distance = x > z ? x : z;\r\n        if (distance > progress) {\r\n          return 1;\r\n        }\r\n        uint256 scale = 100 - (distance * 100) / progress ;\r\n        uint256 height = 2 * progress * _height * scale / 10000;\r\n        return height > 0 ? height : 1;\r\n    }\r\n\r\n    /// @dev Convenience function to see if this building has room for a unit.\r\n    function canCreateUnit(uint256 _buildingId)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n      Property storage _property = properties[_buildingId];\r\n      if (_property.class == PropertyClass.BUILDING &&\r\n            (buildingIsPublic[_buildingId] ||\r\n              propertyIndexToOwner[_buildingId] == msg.sender)\r\n      ) {\r\n        uint256 totalVolume = _property.dx * _property.dz *\r\n          (_computeHeight(_property.x, _property.z, _property.y) - 1);\r\n        uint256 totalUnits = buildingToUnitCount[_buildingId];\r\n        return totalUnits < totalVolume;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /// @dev This internal function skips all validation checks. Ensure that\r\n    //   canCreateUnit() is required before calling this method.\r\n    function _createUnitHelper(uint256 _buildingId, address _owner)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // Grab a reference to the property in storage.\r\n        Property storage _property = properties[_buildingId];\r\n        uint256 totalArea = _property.dx * _property.dz;\r\n        uint256 index = buildingToUnitCount[_buildingId];\r\n\r\n        // Calculate next location.\r\n        uint256 y = index / totalArea + 1;\r\n        uint256 intermediate = index % totalArea;\r\n        uint256 z = intermediate / _property.dx;\r\n        uint256 x = intermediate % _property.dx;\r\n\r\n        uint256 unitId = _createUnit(\r\n          _buildingId,\r\n          x + _property.x,\r\n          y,\r\n          z + _property.z,\r\n          _owner\r\n        );\r\n\r\n        buildingToUnitCount[_buildingId]++;\r\n        buildingToUnits[_buildingId].push(unitId);\r\n\r\n        // Return the new unit's ID.\r\n        return unitId;\r\n    }\r\n\r\n    /// @dev Update allows for setting a building privacy.\r\n    function updateBuildingPrivacy(uint _tokenId, bool _public) public {\r\n        require(propertyIndexToOwner[_tokenId] == msg.sender);\r\n        buildingIsPublic[_tokenId] = _public;\r\n    }\r\n\r\n    /// @dev Update allows for setting the data associated to a property.\r\n    function updatePropertyData(uint _tokenId, string _data) public {\r\n        require(updateEnabled);\r\n        address _owner = propertyIndexToOwner[_tokenId];\r\n        require(msg.sender == _owner);\r\n        propertyIndexToData[_tokenId] = _data;\r\n        Property memory _property = properties[_tokenId];\r\n        Construct(\r\n            _owner,\r\n            _tokenId,\r\n            _property.class,\r\n            _property.x,\r\n            _property.y,\r\n            _property.z,\r\n            _property.dx,\r\n            _property.dz,\r\n            _data\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts-origin/ERC721Draft.sol\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    function implementsERC721() public pure returns (bool);\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n// File: contracts-origin/AetherOwnership.sol\r\n\r\n/// @title The facet of the Aether core contract that manages ownership, ERC-721 (draft) compliant.\r\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\r\n///  See the PropertyCore contract documentation to understand how the various contract facets are arranged.\r\ncontract AetherOwnership is AetherBase, ERC721 {\r\n\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public name = \"Aether\";\r\n    string public symbol = \"AETH\";\r\n\r\n    function implementsERC721() public pure returns (bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    // Internal utility functions: These functions all assume that their input arguments\r\n    // are valid. We leave it to public methods to sanitize their inputs and follow\r\n    // the required logic.\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular Property.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _tokenId property id, only valid when > 0\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return propertyIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular Property.\r\n    /// @param _claimant the address we are confirming property is approved for.\r\n    /// @param _tokenId property id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return propertyIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\r\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\r\n    ///  _approve() and transferFrom() are used together for putting Properties on auction, and\r\n    ///  there is no value in spamming the log with Approval events in that case.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        propertyIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    /// @dev Transfers a property owned by this contract to the specified address.\r\n    ///  Used to rescue lost properties. (There is no \"proper\" flow where this contract\r\n    ///  should be the owner of any Property. This function exists for us to reassign\r\n    ///  the ownership of Properties that users may have accidentally sent to our address.)\r\n    /// @param _propertyId - ID of property\r\n    /// @param _recipient - Address to send the property to\r\n    function rescueLostProperty(uint256 _propertyId, address _recipient) public onlyCOO whenNotPaused {\r\n        require(_owns(this, _propertyId));\r\n        _transfer(this, _recipient, _propertyId);\r\n    }\r\n\r\n    /// @notice Returns the number of Properties owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    /// @notice Transfers a Property to another address. If transferring to a smart\r\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\r\n    ///  Laputa specifically) or your Property may be lost forever. Seriously.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the Property to transfer.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // You can only send your own property.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Grant another address the right to transfer a specific Property via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Property that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Emit approval event.\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Transfer a Property owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the Property to be transfered.\r\n    /// @param _to The address that should take ownership of the Property. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the Property to be transferred.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns the total number of Properties currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint) {\r\n        return properties.length;\r\n    }\r\n\r\n    function totalDistrictSupply() public view returns(uint count) {\r\n        return districts.length;\r\n    }\r\n\r\n    /// @notice Returns the address currently assigned ownership of a given Property.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = propertyIndexToOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n\r\n    /// @notice Returns a list of all Property IDs assigned to an address.\r\n    /// @param _owner The owner whose Properties we are interested in.\r\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n    ///  expensive (it walks the entire Kitty array looking for cats belonging to owner),\r\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n    ///  not contract-to-contract calls.\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            // Return an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalProperties = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            // We count on the fact that all properties have IDs starting at 1 and increasing\r\n            // sequentially up to the totalProperties count.\r\n            uint256 tokenId;\r\n\r\n            for (tokenId = 1; tokenId <= totalProperties; tokenId++) {\r\n                if (propertyIndexToOwner[tokenId] == _owner) {\r\n                    result[resultIndex] = tokenId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts-origin/Auction/ClockAuctionBase.sol\r\n\r\n/// @title Auction Core\r\n/// @dev Contains models, variables, and internal methods for the auction.\r\ncontract ClockAuctionBase {\r\n\r\n    // Represents an auction on an NFT\r\n    struct Auction {\r\n        // Current owner of NFT\r\n        address seller;\r\n        // Price (in wei) at beginning of auction\r\n        uint128 startingPrice;\r\n        // Price (in wei) at end of auction\r\n        uint128 endingPrice;\r\n        // Duration (in seconds) of auction\r\n        uint64 duration;\r\n        // Time when auction started\r\n        // NOTE: 0 if this auction has been concluded\r\n        uint64 startedAt;\r\n    }\r\n\r\n    // Reference to contract tracking NFT ownership\r\n    ERC721 public nonFungibleContract;\r\n\r\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint256 public ownerCut;\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping (uint256 => Auction) tokenIdToAuction;\r\n\r\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\r\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\r\n    event AuctionCancelled(uint256 tokenId);\r\n\r\n    /// @dev DON'T give me your money.\r\n    function() external {}\r\n\r\n    // Modifiers to check that inputs can be safely stored with a certain\r\n    // number of bits. We use constants and multiple modifiers to save gas.\r\n    modifier canBeStoredWith64Bits(uint256 _value) {\r\n        require(_value <= 18446744073709551615);\r\n        _;\r\n    }\r\n\r\n    modifier canBeStoredWith128Bits(uint256 _value) {\r\n        require(_value < 340282366920938463463374607431768211455);\r\n        _;\r\n    }\r\n\r\n    /// @dev Returns true if the claimant owns the token.\r\n    /// @param _claimant - Address claiming to own the token.\r\n    /// @param _tokenId - ID of token whose ownership to verify.\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n\r\n    /// @dev Escrows the NFT, assigning ownership to this contract.\r\n    /// Throws if the escrow fails.\r\n    /// @param _owner - Current owner address of token to escrow.\r\n    /// @param _tokenId - ID of token whose approval to verify.\r\n    function _escrow(address _owner, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\r\n    }\r\n\r\n    /// @dev Transfers an NFT owned by this contract to another address.\r\n    /// Returns true if the transfer succeeds.\r\n    /// @param _receiver - Address to transfer NFT to.\r\n    /// @param _tokenId - ID of token to transfer.\r\n    function _transfer(address _receiver, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transfer(_receiver, _tokenId);\r\n    }\r\n\r\n    /// @dev Adds an auction to the list of open auctions. Also fires the\r\n    ///  AuctionCreated event.\r\n    /// @param _tokenId The ID of the token to be put on auction.\r\n    /// @param _auction Auction to add.\r\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\r\n        // Require that all auctions have a duration of\r\n        // at least one minute. (Keeps our math from getting hairy!)\r\n        require(_auction.duration >= 1 minutes);\r\n\r\n        tokenIdToAuction[_tokenId] = _auction;\r\n\r\n        AuctionCreated(\r\n            uint256(_tokenId),\r\n            uint256(_auction.startingPrice),\r\n            uint256(_auction.endingPrice),\r\n            uint256(_auction.duration)\r\n        );\r\n    }\r\n\r\n    /// @dev Cancels an auction unconditionally.\r\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\r\n        _removeAuction(_tokenId);\r\n        _transfer(_seller, _tokenId);\r\n        AuctionCancelled(_tokenId);\r\n    }\r\n\r\n    /// @dev Computes the price and transfers winnings.\r\n    /// Does NOT transfer ownership of token.\r\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n\r\n        // Explicitly check that this auction is currently live.\r\n        // (Because of how Ethereum mappings work, we can't just count\r\n        // on the lookup above failing. An invalid _tokenId will just\r\n        // return an auction object that is all zeros.)\r\n        require(_isOnAuction(auction));\r\n\r\n        // Check that the incoming bid is higher than the current\r\n        // price\r\n        uint256 price = _currentPrice(auction);\r\n        require(_bidAmount >= price);\r\n\r\n        // Grab a reference to the seller before the auction struct\r\n        // gets deleted.\r\n        address seller = auction.seller;\r\n\r\n        // The bid is good! Remove the auction before sending the fees\r\n        // to the sender so we can't have a reentrancy attack.\r\n        _removeAuction(_tokenId);\r\n\r\n        // Transfer proceeds to seller (if there are any!)\r\n        if (price > 0) {\r\n            //  Calculate the auctioneer's cut.\r\n            // (NOTE: _computeCut() is guaranteed to return a\r\n            //  value <= price, so this subtraction can't go negative.)\r\n            uint256 auctioneerCut = _computeCut(price);\r\n            uint256 sellerProceeds = price - auctioneerCut;\r\n\r\n            // NOTE: Doing a transfer() in the middle of a complex\r\n            // method like this is generally discouraged because of\r\n            // reentrancy attacks and DoS attacks if the seller is\r\n            // a contract with an invalid fallback function. We explicitly\r\n            // guard against reentrancy attacks by removing the auction\r\n            // before calling transfer(), and the only thing the seller\r\n            // can DoS is the sale of their own asset! (And if it's an\r\n            // accident, they can call cancelAuction(). )\r\n            seller.transfer(sellerProceeds);\r\n        }\r\n\r\n        // Tell the world!\r\n        AuctionSuccessful(_tokenId, price, msg.sender);\r\n\r\n        return price;\r\n    }\r\n\r\n    /// @dev Removes an auction from the list of open auctions.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n        delete tokenIdToAuction[_tokenId];\r\n    }\r\n\r\n    /// @dev Returns true if the NFT is on auction.\r\n    /// @param _auction - Auction to check.\r\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\r\n        return (_auction.startedAt > 0);\r\n    }\r\n\r\n    /// @dev Returns current price of an NFT on auction. Broken into two\r\n    ///  functions (this one, that computes the duration from the auction\r\n    ///  structure, and the other that does the price computation) so we\r\n    ///  can easily test that the price computation works correctly.\r\n    function _currentPrice(Auction storage _auction)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 secondsPassed = 0;\r\n\r\n        // A bit of insurance against negative values (or wraparound).\r\n        // Probably not necessary (since Ethereum guarnatees that the\r\n        // now variable doesn't ever go backwards).\r\n        if (now > _auction.startedAt) {\r\n            secondsPassed = now - _auction.startedAt;\r\n        }\r\n\r\n        return _computeCurrentPrice(\r\n            _auction.startingPrice,\r\n            _auction.endingPrice,\r\n            _auction.duration,\r\n            secondsPassed\r\n        );\r\n    }\r\n\r\n    /// @dev Computes the current price of an auction. Factored out\r\n    ///  from _currentPrice so we can run extensive unit tests.\r\n    ///  When testing, make this function public and turn on\r\n    ///  `Current price computation` test suite.\r\n    function _computeCurrentPrice(\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        uint256 _secondsPassed\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our public functions carefully cap the maximum values for\r\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\r\n        //  also known to be non-zero (see the require() statement in\r\n        //  _addAuction())\r\n        if (_secondsPassed >= _duration) {\r\n            // We've reached the end of the dynamic pricing portion\r\n            // of the auction, just return the end price.\r\n            return _endingPrice;\r\n        } else {\r\n            // Starting price can be higher than ending price (and often is!), so\r\n            // this delta can be negative.\r\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\r\n\r\n            // This multiplication can't overflow, _secondsPassed will easily fit within\r\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\r\n            // will always fit within 256-bits.\r\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\r\n\r\n            // currentPriceChange can be negative, but if so, will have a magnitude\r\n            // less that _startingPrice. Thus, this result will always end up positive.\r\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\r\n\r\n            return uint256(currentPrice);\r\n        }\r\n    }\r\n\r\n    /// @dev Computes owner's cut of a sale.\r\n    /// @param _price - Sale price of NFT.\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our entry functions carefully cap the maximum values for\r\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\r\n        //  statement in the ClockAuction constructor). The result of this\r\n        //  function is always guaranteed to be <= _price.\r\n        return _price * ownerCut / 10000;\r\n    }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts-origin/Auction/ClockAuction.sol\r\n\r\n/// @title Clock auction for non-fungible tokens.\r\ncontract ClockAuction is Pausable, ClockAuctionBase {\r\n\r\n    /// @dev Constructor creates a reference to the NFT ownership contract\r\n    ///  and verifies the owner cut is in the valid range.\r\n    /// @param _nftAddress - address of a deployed contract implementing\r\n    ///  the Nonfungible Interface.\r\n    /// @param _cut - percent cut the owner takes on each auction, must be\r\n    ///  between 0-10,000.\r\n    function ClockAuction(address _nftAddress, uint256 _cut) public {\r\n        require(_cut <= 10000);\r\n        ownerCut = _cut;\r\n        \r\n        ERC721 candidateContract = ERC721(_nftAddress);\r\n        require(candidateContract.implementsERC721());\r\n        nonFungibleContract = candidateContract;\r\n    }\r\n\r\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\r\n    ///  as well as any Ether sent directly to the contract address.\r\n    ///  Always transfers to the NFT contract, but can be called either by\r\n    ///  the owner or the NFT contract.\r\n    function withdrawBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == nftAddress\r\n        );\r\n        nftAddress.transfer(this.balance);\r\n    }\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of time to move between starting\r\n    ///  price and ending price (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        public\r\n        whenNotPaused\r\n        canBeStoredWith128Bits(_startingPrice)\r\n        canBeStoredWith128Bits(_endingPrice)\r\n        canBeStoredWith64Bits(_duration)\r\n    {\r\n        require(_owns(msg.sender, _tokenId));\r\n        _escrow(msg.sender, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Bids on an open auction, completing the auction and transferring\r\n    ///  ownership of the NFT if enough Ether is supplied.\r\n    /// @param _tokenId - ID of token to bid on.\r\n    function bid(uint256 _tokenId)\r\n        public\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        // _bid will throw if the bid or funds transfer fails\r\n        _bid(_tokenId, msg.value);\r\n        _transfer(msg.sender, _tokenId);\r\n    }\r\n\r\n    /// @dev Cancels an auction that hasn't been won yet.\r\n    ///  Returns the NFT to original owner.\r\n    /// @notice This is a state-modifying function that can\r\n    ///  be called while the contract is paused.\r\n    /// @param _tokenId - ID of token on auction\r\n    function cancelAuction(uint256 _tokenId)\r\n        public\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        address seller = auction.seller;\r\n        require(msg.sender == seller);\r\n        _cancelAuction(_tokenId, seller);\r\n    }\r\n\r\n    /// @dev Cancels an auction when the contract is paused.\r\n    ///  Only the owner may do this, and NFTs are returned to\r\n    ///  the seller. This should only be used in emergencies.\r\n    /// @param _tokenId - ID of the NFT on auction to cancel.\r\n    function cancelAuctionWhenPaused(uint256 _tokenId)\r\n        whenPaused\r\n        onlyOwner\r\n        public\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        _cancelAuction(_tokenId, auction.seller);\r\n    }\r\n\r\n    /// @dev Returns auction info for an NFT on auction.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function getAuction(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns\r\n    (\r\n        address seller,\r\n        uint256 startingPrice,\r\n        uint256 endingPrice,\r\n        uint256 duration,\r\n        uint256 startedAt\r\n    ) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return (\r\n            auction.seller,\r\n            auction.startingPrice,\r\n            auction.endingPrice,\r\n            auction.duration,\r\n            auction.startedAt\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the current price of an auction.\r\n    /// @param _tokenId - ID of the token price we are checking.\r\n    function getCurrentPrice(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return _currentPrice(auction);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts-origin/Auction/AetherClockAuction.sol\r\n\r\n/// @title Clock auction modified for sale of property\r\ncontract AetherClockAuction is ClockAuction {\r\n\r\n    // @dev Sanity check that allows us to ensure that we are pointing to the\r\n    //  right auction in our setSaleAuctionAddress() call.\r\n    bool public isAetherClockAuction = true;\r\n\r\n    // Tracks last 5 sale price of gen0 property sales\r\n    uint256 public saleCount;\r\n    uint256[5] public lastSalePrices;\r\n\r\n    // Delegate constructor\r\n    function AetherClockAuction(address _nftAddr, uint256 _cut) public\r\n      ClockAuction(_nftAddr, _cut) {}\r\n\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of auction (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        public\r\n        canBeStoredWith128Bits(_startingPrice)\r\n        canBeStoredWith128Bits(_endingPrice)\r\n        canBeStoredWith64Bits(_duration)\r\n    {\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Updates lastSalePrice if seller is the nft contract\r\n    /// Otherwise, works the same as default bid method.\r\n    function bid(uint256 _tokenId)\r\n        public\r\n        payable\r\n    {\r\n        // _bid verifies token ID size\r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        uint256 price = _bid(_tokenId, msg.value);\r\n        _transfer(msg.sender, _tokenId);\r\n\r\n        // If not a gen0 auction, exit\r\n        if (seller == address(nonFungibleContract)) {\r\n            // Track gen0 sale prices\r\n            lastSalePrices[saleCount % 5] = price;\r\n            saleCount++;\r\n        }\r\n    }\r\n\r\n    function averageSalePrice() public view returns (uint256) {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            sum += lastSalePrices[i];\r\n        }\r\n        return sum / 5;\r\n    }\r\n}\r\n\r\n// File: contracts-origin/AetherAuction.sol\r\n\r\n/// @title Handles creating auctions for sale and siring of properties.\r\n///  This wrapper of ReverseAuction exists only so that users can create\r\n///  auctions with only one transaction.\r\ncontract AetherAuction is AetherOwnership{\r\n\r\n    /// @dev The address of the ClockAuction contract that handles sales of Aether. This\r\n    ///  same contract handles both peer-to-peer sales as well as the gen0 sales which are\r\n    ///  initiated every 15 minutes.\r\n    AetherClockAuction public saleAuction;\r\n\r\n    /// @dev Sets the reference to the sale auction.\r\n    /// @param _address - Address of sale contract.\r\n    function setSaleAuctionAddress(address _address) public onlyCEO {\r\n        AetherClockAuction candidateContract = AetherClockAuction(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect\r\n        require(candidateContract.isAetherClockAuction());\r\n\r\n        // Set the new contract address\r\n        saleAuction = candidateContract;\r\n    }\r\n\r\n    /// @dev Put a property up for auction.\r\n    ///  Does some ownership trickery to create auctions in one tx.\r\n    function createSaleAuction(\r\n        uint256 _propertyId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If property is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(msg.sender, _propertyId));\r\n        _approve(_propertyId, saleAuction);\r\n        // Sale auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the property.\r\n        saleAuction.createAuction(\r\n            _propertyId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /// @dev Transfers the balance of the sale auction contract\r\n    /// to the AetherCore contract. We use two-step withdrawal to\r\n    /// prevent two transfer calls in the auction bid function.\r\n    function withdrawAuctionBalances() external onlyCOO {\r\n        saleAuction.withdrawBalance();\r\n    }\r\n}\r\n\r\n// File: contracts-origin/AetherConstruct.sol\r\n\r\n// Auction wrapper functions\r\n\r\n\r\n/// @title all functions related to creating property\r\ncontract AetherConstruct is AetherAuction {\r\n\r\n    uint256 public districtLimit = 16;\r\n    uint256 public startingPrice = 1 ether;\r\n    uint256 public auctionDuration = 1 days;\r\n\r\n    /// @dev Units can be contructed within public and owned buildings.\r\n    function createUnit(uint256 _buildingId)\r\n        public\r\n        payable\r\n        returns(uint256)\r\n    {\r\n        require(canCreateUnit(_buildingId));\r\n        require(msg.value >= unitCreationFee);\r\n        if (msg.value > unitCreationFee)\r\n            msg.sender.transfer(msg.value - unitCreationFee);\r\n        uint256 propertyId = _createUnitHelper(_buildingId, msg.sender);\r\n        return propertyId;\r\n    }\r\n\r\n    /// @dev Creation of unit properties. Only callable by COO\r\n    function createUnitOmni(\r\n      uint32 _buildingId,\r\n      address _owner\r\n    )\r\n      public\r\n      onlyCOO\r\n    {\r\n        if (_owner == address(0)) {\r\n             _owner = cooAddress;\r\n        }\r\n        require(canCreateUnit(_buildingId));\r\n        _createUnitHelper(_buildingId, _owner);\r\n    }\r\n\r\n    /// @dev Creation of building properties. Only callable by COO\r\n    function createBuildingOmni(\r\n      uint32 _districtId,\r\n      uint8 _x,\r\n      uint8 _y,\r\n      uint8 _z,\r\n      uint8 _dx,\r\n      uint8 _dz,\r\n      address _owner,\r\n      bool _open\r\n    )\r\n      public\r\n      onlyCOO\r\n    {\r\n        if (_owner == address(0)) {\r\n             _owner = cooAddress;\r\n        }\r\n        _createBuilding(_districtId, _x, _y, _z, _dx, _dz, _owner, _open);\r\n    }\r\n\r\n    /// @dev Creation of district properties, up to a limit. Only callable by COO\r\n    function createDistrictOmni(\r\n      uint8 _x,\r\n      uint8 _z,\r\n      uint8 _dx,\r\n      uint8 _dz\r\n    )\r\n      public\r\n      onlyCOO\r\n    {\r\n      require(districts.length < districtLimit);\r\n      _createDistrict(_x, _z, _dx, _dz);\r\n    }\r\n\r\n\r\n    /// @dev Creates a new property with the given details and\r\n    ///  creates an auction for it. Only callable by COO.\r\n    function createBuildingAuction(\r\n      uint32 _districtId,\r\n      uint8 _x,\r\n      uint8 _y,\r\n      uint8 _z,\r\n      uint8 _dx,\r\n      uint8 _dz,\r\n      bool _open\r\n    ) public onlyCOO {\r\n        uint256 propertyId = _createBuilding(_districtId, _x, _y, _z, _dx, _dz, address(this), _open);\r\n        _approve(propertyId, saleAuction);\r\n\r\n        saleAuction.createAuction(\r\n            propertyId,\r\n            _computeNextPrice(),\r\n            0,\r\n            auctionDuration,\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    /// @dev Updates the minimum payment required for calling createUnit(). Can only\r\n    ///  be called by the COO address.\r\n    function setUnitCreationFee(uint256 _value) public onlyCOO {\r\n        unitCreationFee = _value;\r\n    }\r\n\r\n    /// @dev Update world progression factor allowing for buildings to grow taller\r\n    //   as the city expands. Only callable by COO.\r\n    function setProgress(uint256 _progress) public onlyCOO {\r\n        require(_progress <= 100);\r\n        require(_progress > progress);\r\n        progress = _progress;\r\n    }\r\n\r\n    /// @dev Set property data updates flag. Only callable by COO.\r\n    function setUpdateState(bool _updateEnabled) public onlyCOO {\r\n        updateEnabled = _updateEnabled;\r\n    }\r\n\r\n    /// @dev Computes the next auction starting price, given the average of the past\r\n    ///  5 prices + 50%.\r\n    function _computeNextPrice() internal view returns (uint256) {\r\n        uint256 avePrice = saleAuction.averageSalePrice();\r\n\r\n        // sanity check to ensure we don't overflow arithmetic (this big number is 2^128-1).\r\n        require(avePrice < 340282366920938463463374607431768211455);\r\n\r\n        uint256 nextPrice = avePrice + (avePrice / 2);\r\n\r\n        // We never auction for less than starting price\r\n        if (nextPrice < startingPrice) {\r\n            nextPrice = startingPrice;\r\n        }\r\n\r\n        return nextPrice;\r\n    }\r\n}\r\n\r\n// File: contracts-origin/AetherCore.sol\r\n\r\n/// @title Aether: A city on the Ethereum blockchain.\r\n/// @author Axiom Zen (https://www.axiomzen.co)\r\ncontract AetherCore is AetherConstruct {\r\n\r\n    // This is the main Aether contract. In order to keep our code seperated into logical sections,\r\n    // we've broken it up in two ways.  The auctions are seperate since their logic is somewhat complex\r\n    // and there's always a risk of subtle bugs. By keeping them in their own contracts, we can upgrade\r\n    // them without disrupting the main contract that tracks property ownership.\r\n    //\r\n    // Secondly, we break the core contract into multiple files using inheritence, one for each major\r\n    // facet of functionality of Aether. This allows us to keep related code bundled together while still\r\n    // avoiding a single giant file with everything in it. The breakdown is as follows:\r\n    //\r\n    //      - AetherBase: This is where we define the most fundamental code shared throughout the core\r\n    //             functionality. This includes our main data storage, constants and data types, plus\r\n    //             internal functions for managing these items.\r\n    //\r\n    //      - AetherAccessControl: This contract manages the various addresses and constraints for operations\r\n    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\r\n    //\r\n    //      - AetherOwnership: This provides the methods required for basic non-fungible token\r\n    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\r\n    //\r\n    //      - AetherAuction: Here we have the public methods for auctioning or bidding on property.\r\n    //             The actual auction functionality is handled in two sibling contracts while auction\r\n    //             creation and bidding is mostly mediated through this facet of the core contract.\r\n    //\r\n    //      - AetherConstruct: This final facet contains the functionality we use for creating new gen0 cats.\r\n\r\n    //             the community is new).\r\n\r\n    // Set in case the core contract is broken and an upgrade is required\r\n    address public newContractAddress;\r\n\r\n    /// @notice Creates the main Aether smart contract instance.\r\n    function AetherCore() public {\r\n        // Starts paused.\r\n        paused = true;\r\n\r\n        // the creator of the contract is the initial CEO\r\n        ceoAddress = msg.sender;\r\n\r\n        // the creator of the contract is also the initial COO\r\n        cooAddress = msg.sender;\r\n    }\r\n\r\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n    ///  breaking bug. This method does nothing but keep track of the new contract and\r\n    ///  emit a message indicating that the new address is set. It's up to clients of this\r\n    ///  contract to update to the new contract address in that case. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _v2Address new address\r\n    function setNewAddress(address _v2Address) public onlyCEO whenPaused {\r\n        // See README.md for updgrade plan\r\n        newContractAddress = _v2Address;\r\n        ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    /// @notice No tipping!\r\n    /// @dev Reject all Ether from being sent here, unless it's from one of the\r\n    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\r\n    function() external payable {\r\n        require(\r\n            msg.sender == address(saleAuction)\r\n        );\r\n    }\r\n\r\n    /// @notice Returns all the relevant information about a specific property.\r\n    /// @param _id The ID of the property of interest.\r\n    function getProperty(uint256 _id)\r\n        public\r\n        view\r\n        returns (\r\n        uint32 parent,\r\n        uint8 class,\r\n        uint8 x,\r\n        uint8 y,\r\n        uint8 z,\r\n        uint8 dx,\r\n        uint8 dz,\r\n        uint8 height\r\n    ) {\r\n        Property storage property = properties[_id];\r\n        parent = uint32(property.parent);\r\n        class = uint8(property.class);\r\n\r\n        height = uint8(property.y);\r\n        if (property.class == PropertyClass.BUILDING) {\r\n          y = uint8(_computeHeight(property.x, property.z, property.y));\r\n        } else {\r\n          y = uint8(property.y);\r\n        }\r\n\r\n        x = uint8(property.x);\r\n        z = uint8(property.z);\r\n        dx = uint8(property.dx);\r\n        dz = uint8(property.dz);\r\n    }\r\n\r\n    /// @dev Override unpause so it requires all external contract addresses\r\n    ///  to be set before contract can be unpaused. Also, we can't have\r\n    ///  newContractAddress set either, because then the contract was upgraded.\r\n    function unpause() public onlyCEO whenPaused {\r\n        require(saleAuction != address(0));\r\n        require(newContractAddress == address(0));\r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_public\",\"type\":\"bool\"}],\"name\":\"updateBuildingPrivacy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buildingToUnitCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_updateEnabled\",\"type\":\"bool\"}],\"name\":\"setUpdateState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint8\"},{\"name\":\"_z\",\"type\":\"uint8\"},{\"name\":\"_dx\",\"type\":\"uint8\"},{\"name\":\"_dz\",\"type\":\"uint8\"}],\"name\":\"createDistrictOmni\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_districtId\",\"type\":\"uint32\"},{\"name\":\"_x\",\"type\":\"uint8\"},{\"name\":\"_y\",\"type\":\"uint8\"},{\"name\":\"_z\",\"type\":\"uint8\"},{\"name\":\"_dx\",\"type\":\"uint8\"},{\"name\":\"_dz\",\"type\":\"uint8\"},{\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"createBuildingAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getProperty\",\"outputs\":[{\"name\":\"parent\",\"type\":\"uint32\"},{\"name\":\"class\",\"type\":\"uint8\"},{\"name\":\"x\",\"type\":\"uint8\"},{\"name\":\"y\",\"type\":\"uint8\"},{\"name\":\"z\",\"type\":\"uint8\"},{\"name\":\"dx\",\"type\":\"uint8\"},{\"name\":\"dz\",\"type\":\"uint8\"},{\"name\":\"height\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_propertyId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updateEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"districtToBuildingsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"updatePropertyData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"progress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buildingToUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"propertyIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buildingId\",\"type\":\"uint32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createUnitOmni\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buildingId\",\"type\":\"uint256\"}],\"name\":\"createUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"districtLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUnitCreationFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"districtToBuildings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"world\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buildingId\",\"type\":\"uint256\"}],\"name\":\"canCreateUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"propertyIndexToData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitCreationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buildingIsPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_propertyId\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueLostProperty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"propertyIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_progress\",\"type\":\"uint256\"}],\"name\":\"setProgress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistrictSupply\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_districtId\",\"type\":\"uint32\"},{\"name\":\"_x\",\"type\":\"uint8\"},{\"name\":\"_y\",\"type\":\"uint8\"},{\"name\":\"_z\",\"type\":\"uint8\"},{\"name\":\"_dx\",\"type\":\"uint8\"},{\"name\":\"_dz\",\"type\":\"uint8\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"createBuildingOmni\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"propertyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"class\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"z\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"dx\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"dz\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"}],\"name\":\"Construct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"AetherCore","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://915f094bd33721ea50df1895ad20a891377cb5b76da4cbb39f2ec348486f80d9"}]}