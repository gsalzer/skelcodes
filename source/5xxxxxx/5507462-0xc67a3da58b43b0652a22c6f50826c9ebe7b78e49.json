{"status":"1","message":"OK","result":[{"SourceCode":"// CryptoTorch Source code\r\n// copyright 2018 CryptoTorch <https://cryptotorch.io>\r\n\r\npragma solidity 0.4.19;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title Ownable\r\n *\r\n * Owner rights:\r\n *   - change the name of the contract\r\n *   - change the name of the token\r\n *   - change the Proof of Stake difficulty\r\n *   - pause/unpause the contract\r\n *   - transfer ownership\r\n *\r\n * Owner CANNOT:\r\n *   - withdrawal funds\r\n *   - disable withdrawals\r\n *   - kill the contract\r\n *   - change the price of tokens\r\n*/\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n *\r\n * Pausing the contract will only disable deposits,\r\n * it will not prevent player dividend withdraws or token sales\r\n */\r\ncontract Pausable is Ownable {\r\n    event OnPause();\r\n    event OnUnpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        OnPause();\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        OnUnpause();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title ReentrancyGuard\r\n* Helps contracts guard against reentrancy attacks.\r\n* @author Remco Bloemen <remco@2Ï€.com>\r\n*/\r\ncontract ReentrancyGuard {\r\n    bool private reentrancyLock = false;\r\n\r\n    modifier nonReentrant() {\r\n        require(!reentrancyLock);\r\n        reentrancyLock = true;\r\n        _;\r\n        reentrancyLock = false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * DateTime Contract Interface\r\n * see https://github.com/pipermerriam/ethereum-datetime\r\n * Live Contract Address: 0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce\r\n */\r\ncontract DateTime {\r\n    function getMonth(uint timestamp) public pure returns (uint8);\r\n    function getDay(uint timestamp) public pure returns (uint8);\r\n}\r\n\r\n\r\n/**\r\n * OwnTheDay Contract Interface\r\n */\r\ncontract OwnTheDayContract {\r\n    function ownerOf(uint256 _tokenId) public view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @title CryptoTorchToken\r\n */\r\ncontract CryptoTorchToken {\r\n    function contractBalance() public view returns (uint256);\r\n    function totalSupply() public view returns(uint256);\r\n    function balanceOf(address _playerAddress) public view returns(uint256);\r\n    function dividendsOf(address _playerAddress) public view returns(uint256);\r\n    function profitsOf(address _playerAddress) public view returns(uint256);\r\n    function referralBalanceOf(address _playerAddress) public view returns(uint256);\r\n    function sellPrice() public view returns(uint256);\r\n    function buyPrice() public view returns(uint256);\r\n    function calculateTokensReceived(uint256 _etherToSpend) public view returns(uint256);\r\n    function calculateEtherReceived(uint256 _tokensToSell) public view returns(uint256);\r\n\r\n    function sellFor(address _for, uint256 _amountOfTokens) public;\r\n    function withdrawFor(address _for) public;\r\n    function mint(address _to, uint256 _amountForTokens, address _referredBy) public payable returns(uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title Crypto-Torch Contract\r\n */\r\ncontract CryptoTorch is Pausable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    //\r\n    // Events\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n    event onTorchPassed(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 pricePaid\r\n    );\r\n\r\n    //\r\n    // Types\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n    struct HighPrice {\r\n        uint256 price;\r\n        address owner;\r\n    }\r\n\r\n    struct HighMileage {\r\n        uint256 miles;\r\n        address owner;\r\n    }\r\n\r\n    struct PlayerData {\r\n        string name;\r\n        string note;\r\n        string coords;\r\n        uint256 dividends; // earnings waiting to be paid out\r\n        uint256 profits;   // earnings already paid out\r\n        bool champion;     // ran the torch while owning the day?\r\n    }\r\n\r\n    //\r\n    // Payout Structure\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n    //  Dev Fee               - 5%\r\n    //  Token Pool            - 75%\r\n    //    - Referral                - 10%\r\n    //  Remaining             - 20%\r\n    //    - Day Owner               - 10-25%\r\n    //    - Remaining               - 75-90%\r\n    //        - Last Runner             - 60%\r\n    //        - Second Last Runner      - 30%\r\n    //        - Third Last Runner       - 10%\r\n    //\r\n\r\n    //\r\n    // Player Data\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n    uint8 public constant maxLeaders = 3; // Gold, Silver, Bronze\r\n\r\n    uint256 private _lowestHighPrice;\r\n    uint256 private _lowestHighMiles;\r\n    uint256 public whaleIncreaseLimit = 2 ether;\r\n    uint256 public whaleMax = 20 ether;\r\n\r\n    HighPrice[maxLeaders] private _highestPrices;\r\n    HighMileage[maxLeaders] private _highestMiles;\r\n\r\n    address[maxLeaders] public torchRunners;\r\n    address internal donationsReceiver_;\r\n    mapping (address => PlayerData) private playerData_;\r\n\r\n    DateTime internal DateTimeLib_;\r\n    CryptoTorchToken internal CryptoTorchToken_;\r\n    OwnTheDayContract internal OwnTheDayContract_;\r\n    string[3] internal holidayMap_;\r\n\r\n    //\r\n    // Modifiers\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n    // ensures that the first tokens in the contract will be equally distributed\r\n    // meaning, no divine dump will be possible\r\n    modifier antiWhalePrice(uint256 _amount) {\r\n        require(\r\n            whaleIncreaseLimit == 0 ||\r\n            (\r\n                _amount <= (whaleIncreaseLimit.add(_highestPrices[0].price)) &&\r\n                playerData_[msg.sender].dividends.add(playerData_[msg.sender].profits).add(_amount) <= whaleMax\r\n            )\r\n        );\r\n        _;\r\n    }\r\n\r\n    //\r\n    // Contract Initialization\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n    /**\r\n     * Set the Owner to the First Torch Runner\r\n     */\r\n    function CryptoTorch() public {\r\n        torchRunners[0] = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Initializes the Contract Dependencies as well as the Holiday Mapping for OwnTheDay.io\r\n     */\r\n    function initialize(address _dateTimeAddress, address _tokenAddress, address _otdAddress) public onlyOwner {\r\n        DateTimeLib_ = DateTime(_dateTimeAddress);\r\n        CryptoTorchToken_ = CryptoTorchToken(_tokenAddress);\r\n        OwnTheDayContract_ = OwnTheDayContract(_otdAddress);\r\n        holidayMap_[0] = \"10000110000001100000000000000101100000000011101000000000000011000000000000001001000010000101100010100110000100001000110000\";\r\n        holidayMap_[1] = \"10111000100101000111000000100100000100010001001000100000000010010000000001000000110000000000000100000000010001100001100000\";\r\n        holidayMap_[2] = \"01000000000100000101011000000110000001100000000100000000000011100001000100000000101000000000100000000000000000010011000001\";\r\n    }\r\n\r\n    /**\r\n     * Sets the external contract address of the DateTime Library\r\n     */\r\n    function setDateTimeLib(address _dateTimeAddress) public onlyOwner {\r\n        DateTimeLib_ = DateTime(_dateTimeAddress);\r\n    }\r\n\r\n    /**\r\n     * Sets the external contract address of the Token Contract\r\n     */\r\n    function setTokenContract(address _tokenAddress) public onlyOwner {\r\n        CryptoTorchToken_ = CryptoTorchToken(_tokenAddress);\r\n    }\r\n\r\n    /**\r\n     * Sets the external contract address of OwnTheDay.io\r\n     */\r\n    function setOwnTheDayContract(address _otdAddress) public onlyOwner {\r\n        OwnTheDayContract_ = OwnTheDayContract(_otdAddress);\r\n    }\r\n\r\n    /**\r\n     * Set the Contract Donations Receiver\r\n     */\r\n    function setDonationsReceiver(address _receiver) public onlyOwner {\r\n        donationsReceiver_ = _receiver;\r\n    }\r\n\r\n    /**\r\n     * The Max Price-Paid Limit for Whales during the Anti-Whale Phase\r\n     */\r\n    function setWhaleMax(uint256 _max) public onlyOwner {\r\n        whaleMax = _max;\r\n    }\r\n\r\n    /**\r\n     * The Max Price-Increase Limit for Whales during the Anti-Whale Phase\r\n     */\r\n    function setWhaleIncreaseLimit(uint256 _limit) public onlyOwner {\r\n        whaleIncreaseLimit = _limit;\r\n    }\r\n\r\n    /**\r\n     * Updates the Holiday Mappings in case of updates/changes at OwnTheDay.io\r\n     */\r\n    function updateHolidayState(uint8 _listIndex, string _holidayMap) public onlyOwner {\r\n        require(_listIndex >= 0 && _listIndex < 3);\r\n        holidayMap_[_listIndex] = _holidayMap;\r\n    }\r\n\r\n    //\r\n    // Public Functions\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n    /**\r\n     * Checks if a specific day is a holiday at OwnTheDay.io\r\n     */\r\n    function isHoliday(uint256 _dayIndex) public view returns (bool) {\r\n        require(_dayIndex >= 0 && _dayIndex < 366);\r\n        return (getHolidayByIndex_(_dayIndex) == 1);\r\n    }\r\n\r\n    /**\r\n     * Checks if Today is a holiday at OwnTheDay.io\r\n     */\r\n    function isHolidayToday() public view returns (bool) {\r\n        uint256 _dayIndex = getDayIndex_(now);\r\n        return (getHolidayByIndex_(_dayIndex) == 1);\r\n    }\r\n\r\n    /**\r\n     * Gets the Day-Index of Today at OwnTheDay.io\r\n     */\r\n    function getTodayIndex() public view returns (uint256) {\r\n        return getDayIndex_(now);\r\n    }\r\n\r\n    /**\r\n     * Gets the Owner Name of the Day at OwnTheDay.io\r\n     */\r\n    function getTodayOwnerName() public view returns (string) {\r\n        address dayOwner = OwnTheDayContract_.ownerOf(getTodayIndex());\r\n        return playerData_[dayOwner].name; // Get Name from THIS contract\r\n    }\r\n\r\n    /**\r\n     * Gets the Owner Address of the Day at OwnTheDay.io\r\n     */\r\n    function getTodayOwnerAddress() public view returns (address) {\r\n        return OwnTheDayContract_.ownerOf(getTodayIndex());\r\n    }\r\n\r\n    /**\r\n     * Sets the Nickname for an Account Address\r\n     */\r\n    function setAccountNickname(string _nickname) public whenNotPaused {\r\n        require(msg.sender != address(0));\r\n        require(bytes(_nickname).length > 0);\r\n        playerData_[msg.sender].name = _nickname;\r\n    }\r\n\r\n    /**\r\n     * Gets the Nickname for an Account Address\r\n     */\r\n    function getAccountNickname(address _playerAddress) public view returns (string) {\r\n        return playerData_[_playerAddress].name;\r\n    }\r\n\r\n    /**\r\n     * Sets the Note for an Account Address\r\n     */\r\n    function setAccountNote(string _note) public whenNotPaused {\r\n        require(msg.sender != address(0));\r\n        playerData_[msg.sender].note = _note;\r\n    }\r\n\r\n    /**\r\n     * Gets the Note for an Account Address\r\n     */\r\n    function getAccountNote(address _playerAddress) public view returns (string) {\r\n        return playerData_[_playerAddress].note;\r\n    }\r\n\r\n    /**\r\n     * Sets the Note for an Account Address\r\n     */\r\n    function setAccountCoords(string _coords) public whenNotPaused {\r\n        require(msg.sender != address(0));\r\n        playerData_[msg.sender].coords = _coords;\r\n    }\r\n\r\n    /**\r\n     * Gets the Note for an Account Address\r\n     */\r\n    function getAccountCoords(address _playerAddress) public view returns (string) {\r\n        return playerData_[_playerAddress].coords;\r\n    }\r\n\r\n    /**\r\n     * Gets the Note for an Account Address\r\n     */\r\n    function isChampionAccount(address _playerAddress) public view returns (bool) {\r\n        return playerData_[_playerAddress].champion;\r\n    }\r\n\r\n    /**\r\n     * Take the Torch!\r\n     *  The Purchase Price is Paid to the Previous Torch Holder, and is also used\r\n     *  as the Purchasers Mileage Multiplier\r\n     */\r\n    function takeTheTorch(address _referredBy) public nonReentrant whenNotPaused payable {\r\n        takeTheTorch_(msg.value, msg.sender, _referredBy);\r\n    }\r\n\r\n    /**\r\n     * Do not make payments directly to this contract (unless it is a donation! :)\r\n     *  - payments made directly to the contract do not receive tokens.  Tokens\r\n     *    are only available via \"takeTheTorch()\" or through the Dapp at https://cryptotorch.io\r\n     */\r\n    function() payable public {\r\n        if (msg.value > 0 && donationsReceiver_ != 0x0) {\r\n            donationsReceiver_.transfer(msg.value); // donations?  Thank you!  :)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sell some tokens for Ether\r\n     */\r\n    function sell(uint256 _amountOfTokens) public {\r\n        CryptoTorchToken_.sellFor(msg.sender, _amountOfTokens);\r\n    }\r\n\r\n    /**\r\n     * Withdraw the earned Dividends to Ether\r\n     *  - Includes Torch + Token Dividends and Token Referral Bonuses\r\n     */\r\n    function withdrawDividends() public returns (uint256) {\r\n        CryptoTorchToken_.withdrawFor(msg.sender);\r\n        return withdrawFor_(msg.sender);\r\n    }\r\n\r\n    //\r\n    // Helper Functions\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n    /**\r\n     * View the total balance of this contract\r\n     */\r\n    function torchContractBalance() public view returns (uint256) {\r\n        return this.balance;\r\n    }\r\n\r\n    /**\r\n     * View the total balance of the token contract\r\n     */\r\n    function tokenContractBalance() public view returns (uint256) {\r\n        return CryptoTorchToken_.contractBalance();\r\n    }\r\n\r\n    /**\r\n     * Retrieve the total token supply.\r\n     */\r\n    function totalSupply() public view returns(uint256) {\r\n        return CryptoTorchToken_.totalSupply();\r\n    }\r\n\r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _playerAddress) public view returns(uint256) {\r\n        return CryptoTorchToken_.balanceOf(_playerAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the token dividend balance of any single address.\r\n     */\r\n    function tokenDividendsOf(address _playerAddress) public view returns(uint256) {\r\n        return CryptoTorchToken_.dividendsOf(_playerAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the referral dividend balance of any single address.\r\n     */\r\n    function referralDividendsOf(address _playerAddress) public view returns(uint256) {\r\n        return CryptoTorchToken_.referralBalanceOf(_playerAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function torchDividendsOf(address _playerAddress) public view returns(uint256) {\r\n        return playerData_[_playerAddress].dividends;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function profitsOf(address _playerAddress) public view returns(uint256) {\r\n        return playerData_[_playerAddress].profits.add(CryptoTorchToken_.profitsOf(_playerAddress));\r\n    }\r\n\r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function sellPrice() public view returns(uint256) {\r\n        return CryptoTorchToken_.sellPrice();\r\n    }\r\n\r\n    /**\r\n     * Return the buy price of 1 individual token.\r\n     */\r\n    function buyPrice() public view returns(uint256) {\r\n        return CryptoTorchToken_.buyPrice();\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n     */\r\n    function calculateTokensReceived(uint256 _etherToSpend) public view returns(uint256) {\r\n        uint256 forTokens = _etherToSpend.sub(_etherToSpend.div(4));\r\n        return CryptoTorchToken_.calculateTokensReceived(forTokens);\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n     */\r\n    function calculateEtherReceived(uint256 _tokensToSell) public view returns(uint256) {\r\n        return CryptoTorchToken_.calculateEtherReceived(_tokensToSell);\r\n    }\r\n\r\n    /**\r\n     * Get the Max Price of the Torch during the Anti-Whale Phase\r\n     */\r\n    function getMaxPrice() public view returns (uint256) {\r\n        if (whaleIncreaseLimit == 0) { return 0; }  // no max price\r\n        return whaleIncreaseLimit.add(_highestPrices[0].price);\r\n    }\r\n\r\n    /**\r\n     * Get the Highest Price per each Medal Leader\r\n     */\r\n    function getHighestPriceAt(uint _index) public view returns (uint256) {\r\n        require(_index >= 0 && _index < maxLeaders);\r\n        return _highestPrices[_index].price;\r\n    }\r\n\r\n    /**\r\n     * Get the Highest Price Owner per each Medal Leader\r\n     */\r\n    function getHighestPriceOwnerAt(uint _index) public view returns (address) {\r\n        require(_index >= 0 && _index < maxLeaders);\r\n        return _highestPrices[_index].owner;\r\n    }\r\n\r\n    /**\r\n     * Get the Highest Miles per each Medal Leader\r\n     */\r\n    function getHighestMilesAt(uint _index) public view returns (uint256) {\r\n        require(_index >= 0 && _index < maxLeaders);\r\n        return _highestMiles[_index].miles;\r\n    }\r\n\r\n    /**\r\n     * Get the Highest Miles Owner per each Medal Leader\r\n     */\r\n    function getHighestMilesOwnerAt(uint _index) public view returns (address) {\r\n        require(_index >= 0 && _index < maxLeaders);\r\n        return _highestMiles[_index].owner;\r\n    }\r\n\r\n    //\r\n    // Internal Functions\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n    /**\r\n     * Take the Torch!  And receive KMS Tokens!\r\n     */\r\n    function takeTheTorch_(uint256 _amountPaid, address _takenBy, address _referredBy) internal antiWhalePrice(_amountPaid) returns (uint256) {\r\n        require(_takenBy != address(0));\r\n        require(_amountPaid >= 5 finney);\r\n        require(_takenBy != torchRunners[0]); // Torch must be passed on\r\n        if (_referredBy == address(this)) { _referredBy = address(0); }\r\n\r\n        // Pass the Torch\r\n        address previousLast = torchRunners[2];\r\n        torchRunners[2] = torchRunners[1];\r\n        torchRunners[1] = torchRunners[0];\r\n        torchRunners[0] = _takenBy;\r\n\r\n        // Get the Current Day Owner at OwnTheDay\r\n        address dayOwner = OwnTheDayContract_.ownerOf(getDayIndex_(now));\r\n\r\n        // Calculate Portions\r\n        uint256 forDev = _amountPaid.mul(5).div(100);\r\n        uint256 forTokens = _amountPaid.sub(_amountPaid.div(4));\r\n        uint256 forPayout = _amountPaid.sub(forDev).sub(forTokens);\r\n        uint256 forDayOwner = calculateDayOwnerCut_(forPayout);\r\n        if (dayOwner == _takenBy) {\r\n            forTokens = forTokens.add(forDayOwner);\r\n            forPayout = _amountPaid.sub(forDev).sub(forTokens);\r\n            playerData_[_takenBy].champion = true;\r\n        } else {\r\n            forPayout = forPayout.sub(forDayOwner);\r\n        }\r\n\r\n        // Fire Events\r\n        onTorchPassed(torchRunners[1], _takenBy, _amountPaid);\r\n\r\n        // Grant Mileage Tokens to Torch Holder\r\n        uint256 mintedTokens = CryptoTorchToken_.mint.value(forTokens)(_takenBy, forTokens, _referredBy);\r\n\r\n        // Update LeaderBoards\r\n        updateLeaders_(_takenBy, _amountPaid);\r\n\r\n        // Handle Payouts\r\n        handlePayouts_(forDev, forPayout, forDayOwner, _takenBy, previousLast, dayOwner);\r\n        return mintedTokens;\r\n    }\r\n\r\n    /**\r\n     * Payouts to the last 3 Torch Runners, the Day Owner & Dev\r\n     */\r\n    function handlePayouts_(uint256 _forDev, uint256 _forPayout, uint256 _forDayOwner, address _takenBy, address _previousLast, address _dayOwner) internal {\r\n        uint256[] memory runnerPortions = new uint256[](3);\r\n\r\n        // Determine Runner Portions\r\n        //  Note, torch has already been passed, so torchRunners[0]\r\n        //  is the current torch runner\r\n        if (_previousLast != address(0)) {\r\n            runnerPortions[2] = _forPayout.mul(10).div(100);\r\n        }\r\n        if (torchRunners[2] != address(0)) {\r\n            runnerPortions[1] = _forPayout.mul(30).div(100);\r\n        }\r\n        runnerPortions[0] = _forPayout.sub(runnerPortions[1]).sub(runnerPortions[2]);\r\n\r\n        // Update Player Dividends\r\n        playerData_[_previousLast].dividends = playerData_[_previousLast].dividends.add(runnerPortions[2]);\r\n        playerData_[torchRunners[2]].dividends = playerData_[torchRunners[2]].dividends.add(runnerPortions[1]);\r\n        playerData_[torchRunners[1]].dividends = playerData_[torchRunners[1]].dividends.add(runnerPortions[0]);\r\n\r\n        // Track Profits\r\n        playerData_[owner].profits = playerData_[owner].profits.add(_forDev);\r\n        if (_dayOwner != _takenBy) {\r\n            playerData_[_dayOwner].profits = playerData_[_dayOwner].profits.add(_forDayOwner);\r\n        }\r\n\r\n        // Transfer Funds\r\n        //  - Transfer directly since these accounts are not, or may not be, existing\r\n        //    Torch-Runners and therefore cannot \"exit\" this contract\r\n        owner.transfer(_forDev);\r\n        if (_dayOwner != _takenBy) {\r\n            _dayOwner.transfer(_forDayOwner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Withdraw the earned Torch Dividends to Ether\r\n     *  - Does not touch Token Dividends or Token Referral Bonuses\r\n     */\r\n    function withdrawFor_(address _for) internal returns (uint256) {\r\n        uint256 torchDividends = playerData_[_for].dividends;\r\n        if (playerData_[_for].dividends > 0) {\r\n            playerData_[_for].dividends = 0;\r\n            playerData_[_for].profits = playerData_[_for].profits.add(torchDividends);\r\n            _for.transfer(torchDividends);\r\n        }\r\n        return torchDividends;\r\n    }\r\n\r\n    /**\r\n     * Update the Medal Leader Boards\r\n     */\r\n    function updateLeaders_(address _takenBy, uint256 _amountPaid) internal {\r\n        // Owner can't be leader; conflict of interest\r\n        if (_takenBy == owner || _takenBy == donationsReceiver_) { return; }\r\n\r\n        // Update Highest Prices\r\n        if (_amountPaid > _lowestHighPrice) {\r\n            updateHighestPrices_(_amountPaid, _takenBy);\r\n        }\r\n\r\n        // Update Highest Mileage\r\n        uint256 tokenBalance = CryptoTorchToken_.balanceOf(_takenBy);\r\n        if (tokenBalance > _lowestHighMiles) {\r\n            updateHighestMiles_(tokenBalance, _takenBy);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate the amount of Payout for the Day Owner (Holidays receive extra)\r\n     */\r\n    function calculateDayOwnerCut_(uint256 _price) internal view returns (uint256) {\r\n        if (getHolidayByIndex_(getDayIndex_(now)) == 1) {\r\n            return _price.mul(25).div(100);\r\n        }\r\n        return _price.mul(10).div(100);\r\n    }\r\n\r\n    /**\r\n     * Get the Day-Index of the current Day for Mapping with OwnTheDay.io\r\n     */\r\n    function getDayIndex_(uint timestamp) internal view returns (uint256) {\r\n        uint8 day = DateTimeLib_.getDay(timestamp);\r\n        uint8 month = DateTimeLib_.getMonth(timestamp);\r\n        // OwnTheDay always includes Feb 29\r\n        uint16[12] memory offset = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\r\n        return offset[month-1] + day;\r\n    }\r\n\r\n    /**\r\n     * Determine if Day-Index is a Holiday or not\r\n     */\r\n    function getHolidayByIndex_(uint256 _dayIndex) internal view returns (uint result) {\r\n        if (_dayIndex < 122) {\r\n            return getFromList_(0, _dayIndex);\r\n        }\r\n        if (_dayIndex < 244) {\r\n            return getFromList_(1, _dayIndex-122);\r\n        }\r\n        return getFromList_(2, _dayIndex-244);\r\n    }\r\n    function getFromList_(uint8 _idx, uint256 _dayIndex) internal view returns (uint result) {\r\n        result = parseInt_(uint(bytes(holidayMap_[_idx])[_dayIndex]));\r\n    }\r\n    function parseInt_(uint c) internal pure returns (uint result) {\r\n        if (c >= 48 && c <= 57) {\r\n            result = result * 10 + (c - 48);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the Medal Leaderboard for the Highest Price\r\n     */\r\n    function updateHighestPrices_(uint256 _price, address _owner) internal {\r\n        uint256 newPos = maxLeaders;\r\n        uint256 oldPos = maxLeaders;\r\n        uint256 i;\r\n        HighPrice memory tmp;\r\n\r\n        // Determine positions\r\n        for (i = maxLeaders-1; i >= 0; i--) {\r\n            if (_price >= _highestPrices[i].price) {\r\n                newPos = i;\r\n            }\r\n            if (_owner == _highestPrices[i].owner) {\r\n                oldPos = i;\r\n            }\r\n            if (i == 0) { break; } // prevent i going below 0\r\n        }\r\n        // Insert or update leader\r\n        if (newPos < maxLeaders) {\r\n            if (oldPos < maxLeaders-1) {\r\n                // update price for existing leader\r\n                _highestPrices[oldPos].price = _price;\r\n                if (newPos != oldPos) {\r\n                    // swap\r\n                    tmp = _highestPrices[newPos];\r\n                    _highestPrices[newPos] = _highestPrices[oldPos];\r\n                    _highestPrices[oldPos] = tmp;\r\n                }\r\n            } else {\r\n                // shift down\r\n                for (i = maxLeaders-1; i > newPos; i--) {\r\n                    _highestPrices[i] = _highestPrices[i-1];\r\n                }\r\n                // insert\r\n                _highestPrices[newPos].price = _price;\r\n                _highestPrices[newPos].owner = _owner;\r\n            }\r\n            // track lowest value\r\n            _lowestHighPrice = _highestPrices[maxLeaders-1].price;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the Medal Leaderboard for the Highest Miles\r\n     */\r\n    function updateHighestMiles_(uint256 _miles, address _owner) internal {\r\n        uint256 newPos = maxLeaders;\r\n        uint256 oldPos = maxLeaders;\r\n        uint256 i;\r\n        HighMileage memory tmp;\r\n\r\n        // Determine positions\r\n        for (i = maxLeaders-1; i >= 0; i--) {\r\n            if (_miles >= _highestMiles[i].miles) {\r\n                newPos = i;\r\n            }\r\n            if (_owner == _highestMiles[i].owner) {\r\n                oldPos = i;\r\n            }\r\n            if (i == 0) { break; } // prevent i going below 0\r\n        }\r\n        // Insert or update leader\r\n        if (newPos < maxLeaders) {\r\n            if (oldPos < maxLeaders-1) {\r\n                // update miles for existing leader\r\n                _highestMiles[oldPos].miles = _miles;\r\n                if (newPos != oldPos) {\r\n                    // swap\r\n                    tmp = _highestMiles[newPos];\r\n                    _highestMiles[newPos] = _highestMiles[oldPos];\r\n                    _highestMiles[oldPos] = tmp;\r\n                }\r\n            } else {\r\n                // shift down\r\n                for (i = maxLeaders-1; i > newPos; i--) {\r\n                    _highestMiles[i] = _highestMiles[i-1];\r\n                }\r\n                // insert\r\n                _highestMiles[newPos].miles = _miles;\r\n                _highestMiles[newPos].owner = _owner;\r\n            }\r\n            // track lowest value\r\n            _lowestHighMiles = _highestMiles[maxLeaders-1].miles;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"profitsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_etherToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTodayIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isHolidayToday\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getHighestMilesAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nickname\",\"type\":\"string\"}],\"name\":\"setAccountNickname\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_note\",\"type\":\"string\"}],\"name\":\"setAccountNote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"isChampionAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTodayOwnerName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getHighestMilesOwnerAt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_dayIndex\",\"type\":\"uint256\"}],\"name\":\"isHoliday\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"torchContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"takeTheTorch\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTodayOwnerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setWhaleIncreaseLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_listIndex\",\"type\":\"uint8\"},{\"name\":\"_holidayMap\",\"type\":\"string\"}],\"name\":\"updateHolidayState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxLeaders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setDonationsReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getHighestPriceOwnerAt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"getAccountCoords\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whaleMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dateTimeAddress\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_otdAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEtherReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setWhaleMax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"referralDividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dateTimeAddress\",\"type\":\"address\"}],\"name\":\"setDateTimeLib\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getHighestPriceAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"getAccountNickname\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"torchDividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_otdAddress\",\"type\":\"address\"}],\"name\":\"setOwnTheDayContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"torchRunners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whaleIncreaseLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"getAccountNote\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coords\",\"type\":\"string\"}],\"name\":\"setAccountCoords\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"tokenDividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pricePaid\",\"type\":\"uint256\"}],\"name\":\"onTorchPassed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OnPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OnUnpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptoTorch","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0dc391f465570cb7f4c887455f37d99e530a30757a4d089b978dc96b12f21114"}]}