{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n// ERC20 token interface is implemented only partially.\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\n\r\ncontract NamiPool {\r\n    using SafeMath for uint256;\r\n    \r\n    function NamiPool(address _escrow, address _namiMultiSigWallet, address _namiAddress) public {\r\n        require(_namiMultiSigWallet != 0x0);\r\n        escrow = _escrow;\r\n        namiMultiSigWallet = _namiMultiSigWallet;\r\n        NamiAddr = _namiAddress;\r\n    }\r\n    \r\n    string public name = \"Nami Pool\";\r\n    \r\n    // escrow has exclusive priveleges to call administrative\r\n    // functions on this contract.\r\n    address public escrow;\r\n\r\n    // Gathered funds can be withdraw only to namimultisigwallet's address.\r\n    address public namiMultiSigWallet;\r\n    \r\n    /// address of Nami token\r\n    address public NamiAddr;\r\n    \r\n    modifier onlyEscrow() {\r\n        require(msg.sender == escrow);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyNami {\r\n        require(msg.sender == NamiAddr);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyNamiMultisig {\r\n        require(msg.sender == namiMultiSigWallet);\r\n        _;\r\n    }\r\n    \r\n    uint public currentRound = 1;\r\n    \r\n    struct ShareHolder {\r\n        uint stake;\r\n        bool isActive;\r\n        bool isWithdrawn;\r\n    }\r\n    \r\n    struct Round {\r\n        bool isOpen;\r\n        uint currentNAC;\r\n        uint finalNAC;\r\n        uint ethBalance;\r\n        bool withdrawable; //for user not in top\r\n        bool topWithdrawable;\r\n        bool isCompleteActive;\r\n        bool isCloseEthPool;\r\n    }\r\n    \r\n    mapping (uint => mapping (address => ShareHolder)) public namiPool;\r\n    mapping (uint => Round) public round;\r\n    \r\n    \r\n    // Events\r\n    event UpdateShareHolder(address indexed ShareHolderAddress, uint indexed RoundIndex, uint Stake, uint Time);\r\n    event Deposit(address sender,uint indexed RoundIndex, uint value);\r\n    event WithdrawPool(uint Amount, uint TimeWithdraw);\r\n    event UpdateActive(address indexed ShareHolderAddress, uint indexed RoundIndex, bool Status, uint Time);\r\n    event Withdraw(address indexed ShareHolderAddress, uint indexed RoundIndex, uint Ether, uint Nac, uint TimeWithdraw);\r\n    event ActivateRound(uint RoundIndex, uint TimeActive);\r\n    \r\n    \r\n    function changeEscrow(address _escrow)\r\n        onlyNamiMultisig\r\n        public\r\n    {\r\n        require(_escrow != 0x0);\r\n        escrow = _escrow;\r\n    }\r\n    \r\n    function withdrawEther(uint _amount) public\r\n        onlyEscrow\r\n    {\r\n        require(namiMultiSigWallet != 0x0);\r\n        // \r\n        if (address(this).balance > 0) {\r\n            namiMultiSigWallet.transfer(_amount);\r\n        }\r\n    }\r\n    \r\n    function withdrawNAC(uint _amount) public\r\n        onlyEscrow\r\n    {\r\n        require(namiMultiSigWallet != 0x0 && _amount != 0);\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n        if (namiToken.balanceOf(this) > 0) {\r\n            namiToken.transfer(namiMultiSigWallet, _amount);\r\n        }\r\n    }\r\n    \r\n    \r\n    /*/\r\n     *  Admin function\r\n    /*/\r\n    \r\n    /*/ process of one round\r\n     * step 1: admin open one round by execute activateRound function\r\n     * step 2: now investor can invest Nac to Nac Pool until round closed\r\n     * step 3: admin close round, now investor cann't invest NAC to Pool\r\n     * step 4: admin activate top investor\r\n     * step 5: all top investor was activated, admin execute closeActive function to close active phrase\r\n     * step 6: admin open withdrawable for investor not in top to withdraw NAC\r\n     * step 7: admin deposit eth to eth pool\r\n     * step 8: close deposit eth to eth pool\r\n     * step 9: admin open withdrawable to investor in top\r\n     * step 10: investor in top now can withdraw NAC and ETH for this round\r\n    /*/\r\n    \r\n    // ------------------------------------------------ \r\n    /*\r\n    * Admin function\r\n    * Open and Close Round\r\n    *\r\n    */\r\n    function activateRound(uint _roundIndex) \r\n        onlyEscrow\r\n        public\r\n    {\r\n        require(round[_roundIndex].isOpen == false && round[_roundIndex].isCloseEthPool == false && round[_roundIndex].isCompleteActive == false);\r\n        round[_roundIndex].isOpen = true;\r\n        currentRound = _roundIndex;\r\n        emit ActivateRound(_roundIndex, now);\r\n    }\r\n    \r\n    function deactivateRound(uint _roundIndex)\r\n        onlyEscrow\r\n        public\r\n    {\r\n        require(round[_roundIndex].isOpen == true);\r\n        round[_roundIndex].isOpen = false;\r\n    }\r\n    \r\n    // ------------------------------------------------ \r\n    // this function add stake of ShareHolder\r\n    // investor can execute this function during round open\r\n    //\r\n    \r\n    function tokenFallbackExchange(address _from, uint _value, uint _price) onlyNami public returns (bool success) {\r\n        // only on currentRound and active user can add stake\r\n        require(round[_price].isOpen == true && _value > 0);\r\n        // add stake\r\n        namiPool[_price][_from].stake = namiPool[_price][_from].stake.add(_value);\r\n        round[_price].currentNAC = round[_price].currentNAC.add(_value);\r\n        emit UpdateShareHolder(_from, _price, namiPool[_price][_from].stake, now);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /*\r\n    *\r\n    * Activate and deactivate user\r\n    * add or sub final Nac to compute stake to withdraw\r\n    */\r\n    function activateUser(address _shareAddress, uint _roundId)\r\n        onlyEscrow\r\n        public\r\n    {\r\n        require(namiPool[_roundId][_shareAddress].isActive == false && namiPool[_roundId][_shareAddress].stake > 0);\r\n        require(round[_roundId].isCompleteActive == false && round[_roundId].isOpen == false);\r\n        namiPool[_roundId][_shareAddress].isActive = true;\r\n        round[_roundId].finalNAC = round[_roundId].finalNAC.add(namiPool[_roundId][_shareAddress].stake);\r\n        emit UpdateActive(_shareAddress, _roundId ,namiPool[_roundId][_shareAddress].isActive, now);\r\n    }\r\n    \r\n    function deactivateUser(address _shareAddress, uint _roundId)\r\n        onlyEscrow\r\n        public\r\n    {\r\n        require(namiPool[_roundId][_shareAddress].isActive == true && namiPool[_roundId][_shareAddress].stake > 0);\r\n        require(round[_roundId].isCompleteActive == false && round[_roundId].isOpen == false);\r\n        namiPool[_roundId][_shareAddress].isActive = false;\r\n        round[_roundId].finalNAC = round[_roundId].finalNAC.sub(namiPool[_roundId][_shareAddress].stake);\r\n        emit UpdateActive(_shareAddress, _roundId ,namiPool[_roundId][_shareAddress].isActive, now);\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------ \r\n    // admin close activate phrase to \r\n    // \r\n    //\r\n    function closeActive(uint _roundId)\r\n        onlyEscrow\r\n        public\r\n    {\r\n        require(round[_roundId].isCompleteActive == false && round[_roundId].isOpen == false);\r\n        round[_roundId].isCompleteActive = true;\r\n    }\r\n    //\r\n    //\r\n    // change Withdrawable for one round after every month\r\n    // for investor not in top\r\n    //\r\n    function changeWithdrawable(uint _roundIndex)\r\n        onlyEscrow\r\n        public\r\n    {\r\n        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false);\r\n        round[_roundIndex].withdrawable = !round[_roundIndex].withdrawable;\r\n    }\r\n    \r\n    \r\n    \r\n    //\r\n    //\r\n    // change Withdrawable for one round after every month\r\n    // for investor in top\r\n    //\r\n    function changeTopWithdrawable(uint _roundIndex)\r\n        onlyEscrow\r\n        public\r\n    {\r\n        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false);\r\n        round[_roundIndex].topWithdrawable = !round[_roundIndex].topWithdrawable;\r\n    }\r\n    \r\n    \r\n    //\r\n    //\r\n    // after month admin deposit ETH to ETH Pool\r\n    // \r\n    //\r\n    function depositEthPool(uint _roundIndex)\r\n        payable public\r\n        onlyEscrow\r\n    {\r\n        require(msg.value > 0 && round[_roundIndex].isCloseEthPool == false && round[_roundIndex].isOpen == false);\r\n        if (msg.value > 0) {\r\n            round[_roundIndex].ethBalance = round[_roundIndex].ethBalance.add(msg.value);\r\n            emit Deposit(msg.sender, _roundIndex, msg.value);\r\n        }\r\n    }\r\n    \r\n    //\r\n    //\r\n    function withdrawEthPool(uint _roundIndex, uint _amount)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(round[_roundIndex].isCloseEthPool == false && round[_roundIndex].isOpen == false);\r\n        require(namiMultiSigWallet != 0x0);\r\n        // \r\n        if (_amount > 0) {\r\n            namiMultiSigWallet.transfer(_amount);\r\n            round[_roundIndex].ethBalance = round[_roundIndex].ethBalance.sub(_amount);\r\n            emit WithdrawPool(_amount, now);\r\n        }\r\n    }\r\n    \r\n    //\r\n    // close phrase deposit ETH to Pool\r\n    // \r\n    function closeEthPool(uint _roundIndex)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(round[_roundIndex].isCloseEthPool == false && round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false);\r\n        round[_roundIndex].isCloseEthPool = true;\r\n    }\r\n    \r\n    //\r\n    //\r\n    // withdraw NAC for investor\r\n    // internal function only can run by this smartcontract\r\n    // \r\n    //\r\n    function _withdrawNAC(address _shareAddress, uint _roundIndex) internal {\r\n        require(namiPool[_roundIndex][_shareAddress].stake > 0);\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n        uint previousBalances = namiToken.balanceOf(this);\r\n        namiToken.transfer(_shareAddress, namiPool[_roundIndex][_shareAddress].stake);\r\n        // update current Nac pool balance\r\n        round[_roundIndex].currentNAC = round[_roundIndex].currentNAC.sub(namiPool[_roundIndex][_shareAddress].stake);\r\n        \r\n        namiPool[_roundIndex][_shareAddress].stake = 0;\r\n        assert(previousBalances > namiToken.balanceOf(this));\r\n    }\r\n    \r\n    \r\n    //\r\n    //\r\n    // withdraw NAC and ETH for top investor\r\n    // \r\n    //\r\n    function withdrawTopForTeam(address _shareAddress, uint _roundIndex)\r\n        onlyEscrow\r\n        public\r\n    {\r\n        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isCloseEthPool == true && round[_roundIndex].isOpen == false);\r\n        require(round[_roundIndex].topWithdrawable);\r\n        if(namiPool[_roundIndex][_shareAddress].isActive == true) {\r\n            require(namiPool[_roundIndex][_shareAddress].isWithdrawn == false);\r\n            assert(round[_roundIndex].finalNAC > namiPool[_roundIndex][_shareAddress].stake);\r\n            \r\n            // compute eth for invester\r\n            uint ethReturn = (round[_roundIndex].ethBalance.mul(namiPool[_roundIndex][_shareAddress].stake)).div(round[_roundIndex].finalNAC);\r\n            _shareAddress.transfer(ethReturn);\r\n            \r\n            // set user withdraw\r\n            namiPool[_roundIndex][_shareAddress].isWithdrawn = true;\r\n            emit Withdraw(_shareAddress, _roundIndex, ethReturn, namiPool[_roundIndex][_shareAddress].stake, now);\r\n            \r\n            // withdraw NAC\r\n            _withdrawNAC(_shareAddress, _roundIndex);\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    //\r\n    //\r\n    // withdraw NAC and ETH for non top investor\r\n    // execute by admin only\r\n    // \r\n    //\r\n    function withdrawNonTopForTeam(address _shareAddress, uint _roundIndex)\r\n        onlyEscrow\r\n        public\r\n    {\r\n        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false);\r\n        require(round[_roundIndex].withdrawable);\r\n        if(namiPool[_roundIndex][_shareAddress].isActive == false) {\r\n            require(namiPool[_roundIndex][_shareAddress].isWithdrawn == false);\r\n            // set state user withdraw\r\n            namiPool[_roundIndex][_shareAddress].isWithdrawn = true;\r\n            emit Withdraw(_shareAddress, _roundIndex, 0, namiPool[_roundIndex][_shareAddress].stake, now);\r\n            //\r\n            _withdrawNAC(_shareAddress, _roundIndex);\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    //\r\n    //\r\n    // withdraw NAC and ETH for top investor\r\n    // execute by investor\r\n    // \r\n    //\r\n    function withdrawTop(uint _roundIndex)\r\n        public\r\n    {\r\n        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isCloseEthPool == true && round[_roundIndex].isOpen == false);\r\n        require(round[_roundIndex].topWithdrawable);\r\n        if(namiPool[_roundIndex][msg.sender].isActive == true) {\r\n            require(namiPool[_roundIndex][msg.sender].isWithdrawn == false);\r\n            uint ethReturn = (round[_roundIndex].ethBalance.mul(namiPool[_roundIndex][msg.sender].stake)).div(round[_roundIndex].finalNAC);\r\n            msg.sender.transfer(ethReturn);\r\n            // set user withdraw\r\n            namiPool[_roundIndex][msg.sender].isWithdrawn = true;\r\n            //\r\n            emit Withdraw(msg.sender, _roundIndex, ethReturn, namiPool[_roundIndex][msg.sender].stake, now);\r\n            _withdrawNAC(msg.sender, _roundIndex);\r\n        }\r\n    }\r\n    \r\n    //\r\n    //\r\n    // withdraw NAC and ETH for non top investor\r\n    // execute by investor\r\n    // \r\n    //\r\n    function withdrawNonTop(uint _roundIndex)\r\n        public\r\n    {\r\n        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false);\r\n        require(round[_roundIndex].withdrawable);\r\n        if(namiPool[_roundIndex][msg.sender].isActive == false) {\r\n            require(namiPool[_roundIndex][msg.sender].isWithdrawn == false);\r\n            namiPool[_roundIndex][msg.sender].isWithdrawn = true;\r\n            //\r\n            emit Withdraw(msg.sender, _roundIndex, 0, namiPool[_roundIndex][msg.sender].stake, now);\r\n            _withdrawNAC(msg.sender, _roundIndex);\r\n        }\r\n    }\r\n    \r\n}\r\n\r\ncontract NamiCrowdSale {\r\n    using SafeMath for uint256;\r\n\r\n    /// NAC Broker Presale Token\r\n    /// @dev Constructor\r\n    function NamiCrowdSale(address _escrow, address _namiMultiSigWallet, address _namiPresale) public {\r\n        require(_namiMultiSigWallet != 0x0);\r\n        escrow = _escrow;\r\n        namiMultiSigWallet = _namiMultiSigWallet;\r\n        namiPresale = _namiPresale;\r\n    }\r\n\r\n\r\n    /*/\r\n     *  Constants\r\n    /*/\r\n\r\n    string public name = \"Nami ICO\";\r\n    string public  symbol = \"NAC\";\r\n    uint   public decimals = 18;\r\n\r\n    bool public TRANSFERABLE = false; // default not transferable\r\n\r\n    uint public constant TOKEN_SUPPLY_LIMIT = 1000000000 * (1 ether / 1 wei);\r\n    \r\n    uint public binary = 0;\r\n\r\n    /*/\r\n     *  Token state\r\n    /*/\r\n\r\n    enum Phase {\r\n        Created,\r\n        Running,\r\n        Paused,\r\n        Migrating,\r\n        Migrated\r\n    }\r\n\r\n    Phase public currentPhase = Phase.Created;\r\n    uint public totalSupply = 0; // amount of tokens already sold\r\n\r\n    // escrow has exclusive priveleges to call administrative\r\n    // functions on this contract.\r\n    address public escrow;\r\n\r\n    // Gathered funds can be withdraw only to namimultisigwallet's address.\r\n    address public namiMultiSigWallet;\r\n\r\n    // nami presale contract\r\n    address public namiPresale;\r\n\r\n    // Crowdsale manager has exclusive priveleges to burn presale tokens.\r\n    address public crowdsaleManager;\r\n    \r\n    // binary option address\r\n    address public binaryAddress;\r\n    \r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    modifier onlyCrowdsaleManager() {\r\n        require(msg.sender == crowdsaleManager); \r\n        _; \r\n    }\r\n\r\n    modifier onlyEscrow() {\r\n        require(msg.sender == escrow);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyTranferable() {\r\n        require(TRANSFERABLE);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyNamiMultisig() {\r\n        require(msg.sender == namiMultiSigWallet);\r\n        _;\r\n    }\r\n    \r\n    /*/\r\n     *  Events\r\n    /*/\r\n\r\n    event LogBuy(address indexed owner, uint value);\r\n    event LogBurn(address indexed owner, uint value);\r\n    event LogPhaseSwitch(Phase newPhase);\r\n    // Log migrate token\r\n    event LogMigrate(address _from, address _to, uint256 amount);\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /*/\r\n     *  Public functions\r\n    /*/\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    // only escrow can send token (to send token private sale)\r\n    function transferForTeam(address _to, uint256 _value) public\r\n        onlyEscrow\r\n    {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public\r\n        onlyTranferable\r\n    {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n       /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) \r\n        public\r\n        onlyTranferable\r\n        returns (bool success)\r\n    {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        onlyTranferable\r\n        returns (bool success) \r\n    {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        onlyTranferable\r\n        returns (bool success) \r\n    {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // allows transfer token\r\n    function changeTransferable () public\r\n        onlyEscrow\r\n    {\r\n        TRANSFERABLE = !TRANSFERABLE;\r\n    }\r\n    \r\n    // change escrow\r\n    function changeEscrow(address _escrow) public\r\n        onlyNamiMultisig\r\n    {\r\n        require(_escrow != 0x0);\r\n        escrow = _escrow;\r\n    }\r\n    \r\n    // change binary value\r\n    function changeBinary(uint _binary)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        binary = _binary;\r\n    }\r\n    \r\n    // change binary address\r\n    function changeBinaryAddress(address _binaryAddress)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(_binaryAddress != 0x0);\r\n        binaryAddress = _binaryAddress;\r\n    }\r\n    \r\n    /*\r\n    * price in ICO:\r\n    * first week: 1 ETH = 2400 NAC\r\n    * second week: 1 ETH = 23000 NAC\r\n    * 3rd week: 1 ETH = 2200 NAC\r\n    * 4th week: 1 ETH = 2100 NAC\r\n    * 5th week: 1 ETH = 2000 NAC\r\n    * 6th week: 1 ETH = 1900 NAC\r\n    * 7th week: 1 ETH = 1800 NAC\r\n    * 8th week: 1 ETH = 1700 nac\r\n    * time: \r\n    * 1517443200: Thursday, February 1, 2018 12:00:00 AM\r\n    * 1518048000: Thursday, February 8, 2018 12:00:00 AM\r\n    * 1518652800: Thursday, February 15, 2018 12:00:00 AM\r\n    * 1519257600: Thursday, February 22, 2018 12:00:00 AM\r\n    * 1519862400: Thursday, March 1, 2018 12:00:00 AM\r\n    * 1520467200: Thursday, March 8, 2018 12:00:00 AM\r\n    * 1521072000: Thursday, March 15, 2018 12:00:00 AM\r\n    * 1521676800: Thursday, March 22, 2018 12:00:00 AM\r\n    * 1522281600: Thursday, March 29, 2018 12:00:00 AM\r\n    */\r\n    function getPrice() public view returns (uint price) {\r\n        if (now < 1517443200) {\r\n            // presale\r\n            return 3450;\r\n        } else if (1517443200 < now && now <= 1518048000) {\r\n            // 1st week\r\n            return 2400;\r\n        } else if (1518048000 < now && now <= 1518652800) {\r\n            // 2nd week\r\n            return 2300;\r\n        } else if (1518652800 < now && now <= 1519257600) {\r\n            // 3rd week\r\n            return 2200;\r\n        } else if (1519257600 < now && now <= 1519862400) {\r\n            // 4th week\r\n            return 2100;\r\n        } else if (1519862400 < now && now <= 1520467200) {\r\n            // 5th week\r\n            return 2000;\r\n        } else if (1520467200 < now && now <= 1521072000) {\r\n            // 6th week\r\n            return 1900;\r\n        } else if (1521072000 < now && now <= 1521676800) {\r\n            // 7th week\r\n            return 1800;\r\n        } else if (1521676800 < now && now <= 1522281600) {\r\n            // 8th week\r\n            return 1700;\r\n        } else {\r\n            return binary;\r\n        }\r\n    }\r\n\r\n\r\n    function() payable public {\r\n        buy(msg.sender);\r\n    }\r\n    \r\n    \r\n    function buy(address _buyer) payable public {\r\n        // Available only if presale is running.\r\n        require(currentPhase == Phase.Running);\r\n        // require ICO time or binary option\r\n        require(now <= 1522281600 || msg.sender == binaryAddress);\r\n        require(msg.value != 0);\r\n        uint newTokens = msg.value * getPrice();\r\n        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);\r\n        // add new token to buyer\r\n        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);\r\n        // add new token to totalSupply\r\n        totalSupply = totalSupply.add(newTokens);\r\n        emit LogBuy(_buyer,newTokens);\r\n        emit Transfer(this,_buyer,newTokens);\r\n    }\r\n    \r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function burnTokens(address _owner) public\r\n        onlyCrowdsaleManager\r\n    {\r\n        // Available only during migration phase\r\n        require(currentPhase == Phase.Migrating);\r\n\r\n        uint tokens = balanceOf[_owner];\r\n        require(tokens != 0);\r\n        balanceOf[_owner] = 0;\r\n        totalSupply -= tokens;\r\n        emit LogBurn(_owner, tokens);\r\n        emit Transfer(_owner, crowdsaleManager, tokens);\r\n\r\n        // Automatically switch phase when migration is done.\r\n        if (totalSupply == 0) {\r\n            currentPhase = Phase.Migrated;\r\n            emit LogPhaseSwitch(Phase.Migrated);\r\n        }\r\n    }\r\n\r\n\r\n    /*/\r\n     *  Administrative functions\r\n    /*/\r\n    function setPresalePhase(Phase _nextPhase) public\r\n        onlyEscrow\r\n    {\r\n        bool canSwitchPhase\r\n            =  (currentPhase == Phase.Created && _nextPhase == Phase.Running)\r\n            || (currentPhase == Phase.Running && _nextPhase == Phase.Paused)\r\n                // switch to migration phase only if crowdsale manager is set\r\n            || ((currentPhase == Phase.Running || currentPhase == Phase.Paused)\r\n                && _nextPhase == Phase.Migrating\r\n                && crowdsaleManager != 0x0)\r\n            || (currentPhase == Phase.Paused && _nextPhase == Phase.Running)\r\n                // switch to migrated only if everyting is migrated\r\n            || (currentPhase == Phase.Migrating && _nextPhase == Phase.Migrated\r\n                && totalSupply == 0);\r\n\r\n        require(canSwitchPhase);\r\n        currentPhase = _nextPhase;\r\n        emit LogPhaseSwitch(_nextPhase);\r\n    }\r\n\r\n\r\n    function withdrawEther(uint _amount) public\r\n        onlyEscrow\r\n    {\r\n        require(namiMultiSigWallet != 0x0);\r\n        // Available at any phase.\r\n        if (address(this).balance > 0) {\r\n            namiMultiSigWallet.transfer(_amount);\r\n        }\r\n    }\r\n    \r\n    function safeWithdraw(address _withdraw, uint _amount) public\r\n        onlyEscrow\r\n    {\r\n        NamiMultiSigWallet namiWallet = NamiMultiSigWallet(namiMultiSigWallet);\r\n        if (namiWallet.isOwner(_withdraw)) {\r\n            _withdraw.transfer(_amount);\r\n        }\r\n    }\r\n\r\n\r\n    function setCrowdsaleManager(address _mgr) public\r\n        onlyEscrow\r\n    {\r\n        // You can't change crowdsale contract when migration is in progress.\r\n        require(currentPhase != Phase.Migrating);\r\n        crowdsaleManager = _mgr;\r\n    }\r\n\r\n    // internal migrate migration tokens\r\n    function _migrateToken(address _from, address _to)\r\n        internal\r\n    {\r\n        PresaleToken presale = PresaleToken(namiPresale);\r\n        uint256 newToken = presale.balanceOf(_from);\r\n        require(newToken > 0);\r\n        // burn old token\r\n        presale.burnTokens(_from);\r\n        // add new token to _to\r\n        balanceOf[_to] = balanceOf[_to].add(newToken);\r\n        // add new token to totalSupply\r\n        totalSupply = totalSupply.add(newToken);\r\n        emit LogMigrate(_from, _to, newToken);\r\n        emit Transfer(this,_to,newToken);\r\n    }\r\n\r\n    // migate token function for Nami Team\r\n    function migrateToken(address _from, address _to) public\r\n        onlyEscrow\r\n    {\r\n        _migrateToken(_from, _to);\r\n    }\r\n\r\n    // migrate token for investor\r\n    function migrateForInvestor() public {\r\n        _migrateToken(msg.sender, msg.sender);\r\n    }\r\n\r\n    // Nami internal exchange\r\n    \r\n    // event for Nami exchange\r\n    event TransferToBuyer(address indexed _from, address indexed _to, uint _value, address indexed _seller);\r\n    event TransferToExchange(address indexed _from, address indexed _to, uint _value, uint _price);\r\n    \r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the NamiExchange address.\r\n     *      Invokes the `tokenFallbackExchange` function.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallbackExchange` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _price price to sell token.\r\n     */\r\n     \r\n    function transferToExchange(address _to, uint _value, uint _price) public {\r\n        uint codeLength;\r\n        \r\n        assembly {\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(msg.sender,_to,_value);\r\n        if (codeLength > 0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallbackExchange(msg.sender, _value, _price);\r\n            emit TransferToExchange(msg.sender, _to, _value, _price);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the NamiExchange address.\r\n     *      Invokes the `tokenFallbackBuyer` function.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallbackBuyer` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _buyer address of seller.\r\n     */\r\n     \r\n    function transferToBuyer(address _to, uint _value, address _buyer) public {\r\n        uint codeLength;\r\n        \r\n        assembly {\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(msg.sender,_to,_value);\r\n        if (codeLength > 0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallbackBuyer(msg.sender, _value, _buyer);\r\n            emit TransferToBuyer(msg.sender, _to, _value, _buyer);\r\n        }\r\n    }\r\n//-------------------------------------------------------------------------------------------------------\r\n}\r\n\r\n\r\n/*\r\n* Binary option smart contract-------------------------------\r\n*/\r\ncontract BinaryOption {\r\n    /*\r\n     * binary option controled by escrow to buy NAC with good price\r\n     */\r\n    // NamiCrowdSale address\r\n    address public namiCrowdSaleAddr;\r\n    address public escrow;\r\n    \r\n    // namiMultiSigWallet\r\n    address public namiMultiSigWallet;\r\n    \r\n    Session public session;\r\n    uint public timeInvestInMinute = 15;\r\n    uint public timeOneSession = 20;\r\n    uint public sessionId = 1;\r\n    uint public rateWin = 100;\r\n    uint public rateLoss = 20;\r\n    uint public rateFee = 5;\r\n    uint public constant MAX_INVESTOR = 20;\r\n    uint public minimunEth = 10000000000000000; // minimunEth = 0.01 eth\r\n    /**\r\n     * Events for binany option system\r\n     */\r\n    event SessionOpen(uint timeOpen, uint indexed sessionId);\r\n    event InvestClose(uint timeInvestClose, uint priceOpen, uint indexed sessionId);\r\n    event Invest(address indexed investor, bool choose, uint amount, uint timeInvest, uint indexed sessionId);\r\n    event SessionClose(uint timeClose, uint indexed sessionId, uint priceClose, uint nacPrice, uint rateWin, uint rateLoss, uint rateFee);\r\n\r\n    event Deposit(address indexed sender, uint value);\r\n    /// @dev Fallback function allows to deposit ether.\r\n    function() public payable {\r\n        if (msg.value > 0)\r\n            emit Deposit(msg.sender, msg.value);\r\n    }\r\n    // there is only one session available at one timeOpen\r\n    // priceOpen is price of ETH in USD\r\n    // priceClose is price of ETH in USD\r\n    // process of one Session\r\n    // 1st: escrow reset session by run resetSession()\r\n    // 2nd: escrow open session by run openSession() => save timeOpen at this time\r\n    // 3rd: all investor can invest by run invest(), send minimum 0.1 ETH\r\n    // 4th: escrow close invest and insert price open for this Session\r\n    // 5th: escrow close session and send NAC for investor\r\n    struct Session {\r\n        uint priceOpen;\r\n        uint priceClose;\r\n        uint timeOpen;\r\n        bool isReset;\r\n        bool isOpen;\r\n        bool investOpen;\r\n        uint investorCount;\r\n        mapping(uint => address) investor;\r\n        mapping(uint => bool) win;\r\n        mapping(uint => uint) amountInvest;\r\n    }\r\n    \r\n    function BinaryOption(address _namiCrowdSale, address _escrow, address _namiMultiSigWallet) public {\r\n        require(_namiCrowdSale != 0x0 && _escrow != 0x0);\r\n        namiCrowdSaleAddr = _namiCrowdSale;\r\n        escrow = _escrow;\r\n        namiMultiSigWallet = _namiMultiSigWallet;\r\n    }\r\n    \r\n    \r\n    modifier onlyEscrow() {\r\n        require(msg.sender==escrow);\r\n        _;\r\n    }\r\n    \r\n        \r\n    modifier onlyNamiMultisig() {\r\n        require(msg.sender == namiMultiSigWallet);\r\n        _;\r\n    }\r\n    \r\n    // change escrow\r\n    function changeEscrow(address _escrow) public\r\n        onlyNamiMultisig\r\n    {\r\n        require(_escrow != 0x0);\r\n        escrow = _escrow;\r\n    }\r\n    \r\n    // chagne minimunEth\r\n    function changeMinEth(uint _minimunEth) public \r\n        onlyEscrow\r\n    {\r\n        require(_minimunEth != 0);\r\n        minimunEth = _minimunEth;\r\n    }\r\n    \r\n    /// @dev Change time for investor can invest in one session, can only change at time not in session\r\n    /// @param _timeInvest time invest in minutes\r\n    ///---------------------------change time function------------------------------\r\n    function changeTimeInvest(uint _timeInvest)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(!session.isOpen && _timeInvest < timeOneSession);\r\n        timeInvestInMinute = _timeInvest;\r\n    }\r\n\r\n    function changeTimeOneSession(uint _timeOneSession) \r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(!session.isOpen && _timeOneSession > timeInvestInMinute);\r\n        timeOneSession = _timeOneSession;\r\n    }\r\n\r\n    /////------------------------change rate function-------------------------------\r\n    \r\n    function changeRateWin(uint _rateWin)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(!session.isOpen);\r\n        rateWin = _rateWin;\r\n    }\r\n    \r\n    function changeRateLoss(uint _rateLoss)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(!session.isOpen);\r\n        rateLoss = _rateLoss;\r\n    }\r\n    \r\n    function changeRateFee(uint _rateFee)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(!session.isOpen);\r\n        rateFee = _rateFee;\r\n    }\r\n    \r\n    \r\n    /// @dev withdraw ether to nami multisignature wallet, only escrow can call\r\n    /// @param _amount value ether in wei to withdraw\r\n    function withdrawEther(uint _amount) public\r\n        onlyEscrow\r\n    {\r\n        require(namiMultiSigWallet != 0x0);\r\n        // Available at any phase.\r\n        if (address(this).balance > 0) {\r\n            namiMultiSigWallet.transfer(_amount);\r\n        }\r\n    }\r\n    \r\n    /// @dev safe withdraw Ether to one of owner of nami multisignature wallet\r\n    /// @param _withdraw address to withdraw\r\n    function safeWithdraw(address _withdraw, uint _amount) public\r\n        onlyEscrow\r\n    {\r\n        NamiMultiSigWallet namiWallet = NamiMultiSigWallet(namiMultiSigWallet);\r\n        if (namiWallet.isOwner(_withdraw)) {\r\n            _withdraw.transfer(_amount);\r\n        }\r\n    }\r\n    \r\n    // @dev Returns list of owners.\r\n    // @return List of owner addresses.\r\n    // MAX_INVESTOR = 20\r\n    function getInvestors()\r\n        public\r\n        view\r\n        returns (address[20])\r\n    {\r\n        address[20] memory listInvestor;\r\n        for (uint i = 0; i < MAX_INVESTOR; i++) {\r\n            listInvestor[i] = session.investor[i];\r\n        }\r\n        return listInvestor;\r\n    }\r\n    \r\n    function getChooses()\r\n        public\r\n        view\r\n        returns (bool[20])\r\n    {\r\n        bool[20] memory listChooses;\r\n        for (uint i = 0; i < MAX_INVESTOR; i++) {\r\n            listChooses[i] = session.win[i];\r\n        }\r\n        return listChooses;\r\n    }\r\n    \r\n    function getAmount()\r\n        public\r\n        view\r\n        returns (uint[20])\r\n    {\r\n        uint[20] memory listAmount;\r\n        for (uint i = 0; i < MAX_INVESTOR; i++) {\r\n            listAmount[i] = session.amountInvest[i];\r\n        }\r\n        return listAmount;\r\n    }\r\n    \r\n    /// @dev reset all data of previous session, must run before open new session\r\n    // only escrow can call\r\n    function resetSession()\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(!session.isReset && !session.isOpen);\r\n        session.priceOpen = 0;\r\n        session.priceClose = 0;\r\n        session.isReset = true;\r\n        session.isOpen = false;\r\n        session.investOpen = false;\r\n        session.investorCount = 0;\r\n        for (uint i = 0; i < MAX_INVESTOR; i++) {\r\n            session.investor[i] = 0x0;\r\n            session.win[i] = false;\r\n            session.amountInvest[i] = 0;\r\n        }\r\n    }\r\n    \r\n    /// @dev Open new session, only escrow can call\r\n    function openSession ()\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(session.isReset && !session.isOpen);\r\n        session.isReset = false;\r\n        // open invest\r\n        session.investOpen = true;\r\n        session.timeOpen = now;\r\n        session.isOpen = true;\r\n        emit SessionOpen(now, sessionId);\r\n    }\r\n    \r\n    /// @dev Fuction for investor, minimun ether send is 0.1, one address can call one time in one session\r\n    /// @param _choose choise of investor, true is call, false is put\r\n    function invest (bool _choose)\r\n        public\r\n        payable\r\n    {\r\n        require(msg.value >= minimunEth && session.investOpen); // msg.value >= 0.1 ether\r\n        require(now < (session.timeOpen + timeInvestInMinute * 1 minutes));\r\n        require(session.investorCount < MAX_INVESTOR);\r\n        session.investor[session.investorCount] = msg.sender;\r\n        session.win[session.investorCount] = _choose;\r\n        session.amountInvest[session.investorCount] = msg.value;\r\n        session.investorCount += 1;\r\n        emit Invest(msg.sender, _choose, msg.value, now, sessionId);\r\n    }\r\n    \r\n    /// @dev close invest for escrow\r\n    /// @param _priceOpen price ETH in USD\r\n    function closeInvest (uint _priceOpen) \r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(_priceOpen != 0 && session.investOpen);\r\n        require(now > (session.timeOpen + timeInvestInMinute * 1 minutes));\r\n        session.investOpen = false;\r\n        session.priceOpen = _priceOpen;\r\n        emit InvestClose(now, _priceOpen, sessionId);\r\n    }\r\n    \r\n    /// @dev get amount of ether to buy NAC for investor\r\n    /// @param _ether amount ether which investor invest\r\n    /// @param _status true for investor win and false for investor loss\r\n    function getEtherToBuy (uint _ether, bool _status)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        if (_status) {\r\n            return _ether * rateWin / 100;\r\n        } else {\r\n            return _ether * rateLoss / 100;\r\n        }\r\n    }\r\n\r\n    /// @dev close session, only escrow can call\r\n    /// @param _priceClose price of ETH in USD\r\n    function closeSession (uint _priceClose)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(_priceClose != 0 && now > (session.timeOpen + timeOneSession * 1 minutes));\r\n        require(!session.investOpen && session.isOpen);\r\n        session.priceClose = _priceClose;\r\n        bool result = (_priceClose>session.priceOpen)?true:false;\r\n        uint etherToBuy;\r\n        NamiCrowdSale namiContract = NamiCrowdSale(namiCrowdSaleAddr);\r\n        uint price = namiContract.getPrice();\r\n        require(price != 0);\r\n        for (uint i = 0; i < session.investorCount; i++) {\r\n            if (session.win[i]==result) {\r\n                etherToBuy = (session.amountInvest[i] - session.amountInvest[i] * rateFee / 100) * rateWin / 100;\r\n                uint etherReturn = session.amountInvest[i] - session.amountInvest[i] * rateFee / 100;\r\n                (session.investor[i]).transfer(etherReturn);\r\n            } else {\r\n                etherToBuy = (session.amountInvest[i] - session.amountInvest[i] * rateFee / 100) * rateLoss / 100;\r\n            }\r\n            namiContract.buy.value(etherToBuy)(session.investor[i]);\r\n            // reset investor\r\n            session.investor[i] = 0x0;\r\n            session.win[i] = false;\r\n            session.amountInvest[i] = 0;\r\n        }\r\n        session.isOpen = false;\r\n        emit SessionClose(now, sessionId, _priceClose, price, rateWin, rateLoss, rateFee);\r\n        sessionId += 1;\r\n        \r\n        // require(!session.isReset && !session.isOpen);\r\n        // reset state session\r\n        session.priceOpen = 0;\r\n        session.priceClose = 0;\r\n        session.isReset = true;\r\n        session.investOpen = false;\r\n        session.investorCount = 0;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n* Binary option smart contract NAC to ETH-------------------------------\r\n*/\r\ncontract BinaryOptionV2 {\r\n    using SafeMath for uint256;\r\n    /*\r\n     * binary option controled by escrow to buy NAC with good price\r\n     */\r\n    // NamiCrowdSale address\r\n    address public NamiAddr;\r\n    address public escrow;\r\n    \r\n    // namiMultiSigWallet\r\n    address public namiMultiSigWallet;\r\n    \r\n    Session public session;\r\n    uint public timeInvestInMinute = 15;\r\n    uint public timeOneSession = 20;\r\n    uint public sessionId = 1;\r\n    uint public rateWin = 100;\r\n    uint public rateLoss = 0;\r\n    uint public rateFee = 5;\r\n    uint public constant MAX_INVESTOR = 20;\r\n    uint public minNac = 100000000000000000000; // 100 Nac\r\n    uint public totalFci = 0;\r\n    uint public totalNacInPool = 0;\r\n    bool isEmptyPool = true;\r\n    bool public isTradableFciInSession = false;\r\n    /**\r\n     * Events for binany option system\r\n     */\r\n    event SessionOpen(uint timeOpen, uint indexed sessionId);\r\n    event InvestClose(uint timeInvestClose, uint priceOpen, uint indexed sessionId);\r\n    event Invest(address indexed investor, uint choose, uint amount, uint timeInvest, uint indexed sessionId);\r\n    event InvestToPool(address indexed investor, uint amount, uint timeInvest);\r\n    event SessionClose(uint timeClose, uint indexed sessionId, uint priceClose, uint rateWin, uint rateLoss, uint rateFee);\r\n\r\n    event Deposit(address indexed sender, uint value);\r\n    /// @dev Fallback function allows to deposit ether.\r\n    function() public payable {\r\n        if (msg.value > 0)\r\n            emit Deposit(msg.sender, msg.value);\r\n    }\r\n    \r\n    // there is only one session available at one timeOpen\r\n    // priceOpen is price of ETH in USD\r\n    // priceClose is price of ETH in USD\r\n    // process of one Session\r\n    // 1st: escrow reset session by run resetSession()\r\n    // 2nd: escrow open session by run openSession() => save timeOpen at this time\r\n    // 3rd: all investor can invest by run invest(), send minimum 0.1 ETH\r\n    // 4th: escrow close invest and insert price open for this Session\r\n    // 5th: escrow close session and send NAC for investor\r\n    struct Session {\r\n        uint priceOpen;\r\n        uint priceClose;\r\n        uint timeOpen;\r\n        bool isReset;\r\n        bool isOpen;\r\n        bool investOpen;\r\n        uint investorCount;\r\n        mapping(uint => address) investor;\r\n        mapping(uint => uint) win;\r\n        mapping(uint => uint) amountInvest;\r\n    }\r\n    \r\n    // list fci\r\n    mapping(address => uint) public fci;\r\n    \r\n    function BinaryOptionV2(address _namiCrowdSale, address _escrow, address _namiMultiSigWallet) public {\r\n        require(_namiCrowdSale != 0x0 && _escrow != 0x0);\r\n        NamiAddr = _namiCrowdSale;\r\n        escrow = _escrow;\r\n        namiMultiSigWallet = _namiMultiSigWallet;\r\n    }\r\n    \r\n    \r\n    modifier onlyEscrow() {\r\n        require(msg.sender==escrow);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyNami {\r\n        require(msg.sender == NamiAddr);\r\n        _;\r\n    }\r\n    \r\n        \r\n    modifier onlyNamiMultisig() {\r\n        require(msg.sender == namiMultiSigWallet);\r\n        _;\r\n    }\r\n    \r\n    // change escrow\r\n    function changeEscrow(address _escrow) public\r\n        onlyNamiMultisig\r\n    {\r\n        require(_escrow != 0x0);\r\n        escrow = _escrow;\r\n    }\r\n    \r\n    // change minimum nac in one order\r\n    function changeMinNac(uint _minNAC) public\r\n        onlyEscrow\r\n    {\r\n        require(_minNAC != 0);\r\n        minNac = _minNAC;\r\n    }\r\n    \r\n    /// @dev Change time for investor can invest in one session, can only change at time not in session\r\n    /// @param _timeInvest time invest in minutes\r\n    ///---------------------------change time function------------------------------\r\n    function changeTimeInvest(uint _timeInvest)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(!session.isOpen && _timeInvest < timeOneSession);\r\n        timeInvestInMinute = _timeInvest;\r\n    }\r\n\r\n    function changeTimeOneSession(uint _timeOneSession) \r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(!session.isOpen && _timeOneSession > timeInvestInMinute);\r\n        timeOneSession = _timeOneSession;\r\n    }\r\n    \r\n    function changeTradableFciInSession(bool _isTradableFciInPool)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        isTradableFciInSession = _isTradableFciInPool;\r\n    }\r\n\r\n    \r\n    /////------------------------change rate function-------------------------------\r\n    \r\n    function changeRateWin(uint _rateWin)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(!session.isOpen);\r\n        rateWin = _rateWin;\r\n    }\r\n    \r\n    function changeRateLoss(uint _rateLoss)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(!session.isOpen);\r\n        rateLoss = _rateLoss;\r\n    }\r\n    \r\n    function changeRateFee(uint _rateFee)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(!session.isOpen);\r\n        rateFee = _rateFee;\r\n    }\r\n    \r\n    \r\n    /// @dev withdraw ether to nami multisignature wallet, only escrow can call\r\n    /// @param _amount value ether in wei to withdraw\r\n    function withdrawEther(uint _amount) public\r\n        onlyEscrow\r\n    {\r\n        require(namiMultiSigWallet != 0x0);\r\n        // Available at any phase.\r\n        if (address(this).balance > 0) {\r\n            namiMultiSigWallet.transfer(_amount);\r\n        }\r\n    }\r\n    \r\n    \r\n    /// @dev withdraw NAC to nami multisignature wallet, only escrow can call\r\n    /// @param _amount value NAC to withdraw\r\n    function withdrawNac(uint _amount) public\r\n        onlyEscrow\r\n    {\r\n        require(namiMultiSigWallet != 0x0);\r\n        // Available at any phase.\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n        if (namiToken.balanceOf(address(this)) > 0) {\r\n            namiToken.transfer(namiMultiSigWallet, _amount);\r\n        }\r\n    }\r\n    \r\n        \r\n    /// @dev safe withdraw Ether to one of owner of nami multisignature wallet\r\n    /// @param _withdraw address to withdraw\r\n    function safeWithdraw(address _withdraw, uint _amount) public\r\n        onlyEscrow\r\n    {\r\n        NamiMultiSigWallet namiWallet = NamiMultiSigWallet(namiMultiSigWallet);\r\n        if (namiWallet.isOwner(_withdraw)) {\r\n            _withdraw.transfer(_amount);\r\n        }\r\n    }\r\n    \r\n    // @dev Returns list of owners.\r\n    // @return List of owner addresses.\r\n    // MAX_INVESTOR = 20\r\n    function getInvestors()\r\n        public\r\n        view\r\n        returns (address[20])\r\n    {\r\n        address[20] memory listInvestor;\r\n        for (uint i = 0; i < MAX_INVESTOR; i++) {\r\n            listInvestor[i] = session.investor[i];\r\n        }\r\n        return listInvestor;\r\n    }\r\n    \r\n    function getChooses()\r\n        public\r\n        view\r\n        returns (uint[20])\r\n    {\r\n        uint[20] memory listChooses;\r\n        for (uint i = 0; i < MAX_INVESTOR; i++) {\r\n            listChooses[i] = session.win[i];\r\n        }\r\n        return listChooses;\r\n    }\r\n    \r\n    function getAmount()\r\n        public\r\n        view\r\n        returns (uint[20])\r\n    {\r\n        uint[20] memory listAmount;\r\n        for (uint i = 0; i < MAX_INVESTOR; i++) {\r\n            listAmount[i] = session.amountInvest[i];\r\n        }\r\n        return listAmount;\r\n    }\r\n    \r\n    /// @dev reset all data of previous session, must run before open new session\r\n    // only escrow can call\r\n    function resetSession()\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(!session.isReset && !session.isOpen);\r\n        session.priceOpen = 0;\r\n        session.priceClose = 0;\r\n        session.isReset = true;\r\n        session.isOpen = false;\r\n        session.investOpen = false;\r\n        session.investorCount = 0;\r\n        for (uint i = 0; i < MAX_INVESTOR; i++) {\r\n            session.investor[i] = 0x0;\r\n            session.win[i] = 0;\r\n            session.amountInvest[i] = 0;\r\n        }\r\n    }\r\n    \r\n    /// @dev Open new session, only escrow can call\r\n    function openSession ()\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(totalNacInPool > 0);\r\n        require(session.isReset && !session.isOpen);\r\n        session.isReset = false;\r\n        // open invest\r\n        session.investOpen = true;\r\n        session.timeOpen = now;\r\n        session.isOpen = true;\r\n        emit SessionOpen(now, sessionId);\r\n    }\r\n    \r\n    function setPoolStatus()\r\n        public\r\n        onlyEscrow\r\n    {\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n        if(namiToken.balanceOf(address(this)) == 0) {\r\n            isEmptyPool = true;\r\n        } else {\r\n            isEmptyPool = false;\r\n        }\r\n    }\r\n    \r\n    /// @dev Fuction for investor, minimun ether send is 0.1, one address can call one time in one session\r\n    /// @param _choose choise of investor, true is call, false is put\r\n    // function invest (bool _choose)\r\n    //     public\r\n    //     payable\r\n    // {\r\n    //     require(msg.value >= minimunEth && session.investOpen); // msg.value >= 0.1 ether\r\n    //     require(now < (session.timeOpen + timeInvestInMinute * 1 minutes));\r\n    //     require(session.investorCount < MAX_INVESTOR);\r\n    //     session.investor[session.investorCount] = msg.sender;\r\n    //     session.win[session.investorCount] = _choose;\r\n    //     session.amountInvest[session.investorCount] = msg.value;\r\n    //     session.investorCount += 1;\r\n    //     Invest(msg.sender, _choose, msg.value, now, sessionId);\r\n    // }\r\n    \r\n    \r\n    // ------------------------------------------------ \r\n    /// @dev Fuction for investor, minimun ether send is 0.1, one address can call one time in one session\r\n    /// @param _choose choise of investor, true is call, false is put\r\n    \r\n    function tokenFallbackExchange(address _from, uint _value, uint _choose) onlyNami public returns (bool success) {\r\n        if(_choose < 2) {\r\n            require(_value >= minNac && session.investOpen); // msg.value >= 0.1 ether\r\n            require(now < (session.timeOpen + timeInvestInMinute * 1 minutes));\r\n            require(session.investorCount < MAX_INVESTOR);\r\n            //\r\n            session.investor[session.investorCount] = _from;\r\n            session.win[session.investorCount] = _choose;\r\n            session.amountInvest[session.investorCount] = _value;\r\n            session.investorCount += 1;\r\n            emit Invest(_from, _choose, _value, now, sessionId);\r\n        } else {\r\n            require(_choose==2 && _value > 0);\r\n            bool check = (!session.isOpen) || isTradableFciInSession;\r\n            require(check);\r\n            // check pool empty\r\n            if(isEmptyPool==true) {\r\n                fci[_from] = (fci[_from]).add(_value);\r\n                totalNacInPool = totalNacInPool.add(_value);\r\n                totalFci = totalFci.add(_value);\r\n                if(totalNacInPool > 0) {\r\n                    isEmptyPool = false;\r\n                }\r\n            } else {\r\n                uint fciReceive = (_value.mul(totalFci)).div(totalNacInPool);\r\n                // check fci receive\r\n                require(fciReceive > 0);\r\n                fci[_from] = fci[_from].add(fciReceive);\r\n                totalNacInPool = totalNacInPool.add(_value);\r\n                totalFci = totalFci.add(fciReceive);\r\n                if(totalNacInPool > 0) {\r\n                    isEmptyPool = false;\r\n                }\r\n            }\r\n            // add shareHolder\r\n            // uint fciReceive = \r\n            emit InvestToPool(_from, _value, now);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    // sell fci and receive NAC back\r\n    \r\n    function sellFci(uint _amount) public {\r\n        bool check = (!session.isOpen) || isTradableFciInSession;\r\n        require(check && fci[msg.sender] >= _amount);\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n        require(namiToken.balanceOf(address(this)) > 0 && totalNacInPool > 0);\r\n        uint nacReceive = (_amount.mul(totalNacInPool)).div(totalFci);\r\n        \r\n        // check nac receive\r\n        require(nacReceive > 0);\r\n        // cann't sell all fci in pool if session open\r\n        if(totalNacInPool == nacReceive) {\r\n            require(session.isOpen == false);\r\n        }\r\n        fci[msg.sender] = fci[msg.sender].sub(_amount);\r\n        totalFci = totalFci.sub(_amount);\r\n        namiToken.transfer(msg.sender, nacReceive);\r\n        totalNacInPool = totalNacInPool.sub(nacReceive);\r\n        if(totalNacInPool == 0) {\r\n            isEmptyPool = true;\r\n        }\r\n    }\r\n    \r\n    /// @dev close invest for escrow\r\n    /// @param _priceOpen price ETH in USD\r\n    function closeInvest (uint _priceOpen) \r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(_priceOpen != 0 && session.investOpen);\r\n        require(now > (session.timeOpen + timeInvestInMinute * 1 minutes));\r\n        session.investOpen = false;\r\n        session.priceOpen = _priceOpen;\r\n        emit InvestClose(now, _priceOpen, sessionId);\r\n    }\r\n    \r\n    /// @dev close session, only escrow can call\r\n    /// @param _priceClose price of ETH in USD\r\n    function closeSession (uint _priceClose)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(_priceClose != 0 && now > (session.timeOpen + timeOneSession * 1 minutes));\r\n        require(!session.investOpen && session.isOpen);\r\n        session.priceClose = _priceClose;\r\n        uint result = (_priceClose>session.priceOpen)?1:0;\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n        uint nacReturn;\r\n        uint rate;\r\n        // uint price = namiToken.getPrice();\r\n        // require(price != 0);\r\n        for (uint i = 0; i < session.investorCount; i++) {\r\n            if (session.win[i]==result) {\r\n                rate = (rateWin.mul(rateFee)).div(100);\r\n                require(rate <= 100);\r\n                nacReturn = session.amountInvest[i].add( session.amountInvest[i].mul(100 - rate)  / 100);\r\n                require(namiToken.balanceOf(address(this)) >= nacReturn);\r\n                namiToken.transfer(session.investor[i], nacReturn);\r\n                totalNacInPool = totalNacInPool.sub(nacReturn.sub(session.amountInvest[i]));\r\n            } else {\r\n                if(rateLoss > 0) {\r\n                    rate = (rateLoss.mul(rateFee)).div(100);\r\n                    require(rate <= 100);\r\n                    nacReturn = session.amountInvest[i].add( session.amountInvest[i].mul(100 - rate)  / 100);\r\n                    require(namiToken.balanceOf(address(this)) >= nacReturn);\r\n                    namiToken.transfer(session.investor[i], nacReturn);\r\n                    totalNacInPool = totalNacInPool.add(session.amountInvest[i].sub(nacReturn));\r\n                } else {\r\n                    totalNacInPool = totalNacInPool.add(session.amountInvest[i]);\r\n                }\r\n            }\r\n            // namiToken.buy.value(etherToBuy)(session.investor[i]);\r\n            // reset investor\r\n            session.investor[i] = 0x0;\r\n            session.win[i] = 0;\r\n            session.amountInvest[i] = 0;\r\n        }\r\n        session.isOpen = false;\r\n        emit SessionClose(now, sessionId, _priceClose, rateWin, rateLoss, rateFee);\r\n        sessionId += 1;\r\n        \r\n        // require(!session.isReset && !session.isOpen);\r\n        // reset state session\r\n        session.priceOpen = 0;\r\n        session.priceClose = 0;\r\n        session.isReset = true;\r\n        session.investOpen = false;\r\n        session.investorCount = 0;\r\n    }\r\n}\r\n\r\n\r\ncontract PresaleToken {\r\n    mapping (address => uint256) public balanceOf;\r\n    function burnTokens(address _owner) public;\r\n}\r\n\r\n /*\r\n * Contract that is working with ERC223 tokens\r\n */\r\n \r\n /**\r\n * @title Contract that will work with ERC223 tokens.\r\n */\r\n \r\ncontract ERC223ReceivingContract {\r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public returns (bool success);\r\n    function tokenFallbackBuyer(address _from, uint _value, address _buyer) public returns (bool success);\r\n    function tokenFallbackExchange(address _from, uint _value, uint _price) public returns (bool success);\r\n}\r\n\r\n\r\n /*\r\n * Nami Internal Exchange smartcontract-----------------------------------------------------------------\r\n *\r\n */\r\n\r\ncontract NamiExchange {\r\n    using SafeMath for uint;\r\n    \r\n    function NamiExchange(address _namiAddress) public {\r\n        NamiAddr = _namiAddress;\r\n    }\r\n\r\n    event UpdateBid(address owner, uint price, uint balance);\r\n    event UpdateAsk(address owner, uint price, uint volume);\r\n    event BuyHistory(address indexed buyer, address indexed seller, uint price, uint volume, uint time);\r\n    event SellHistory(address indexed seller, address indexed buyer, uint price, uint volume, uint time);\r\n\r\n    \r\n    mapping(address => OrderBid) public bid;\r\n    mapping(address => OrderAsk) public ask;\r\n    string public name = \"NacExchange\";\r\n    \r\n    /// address of Nami token\r\n    address public NamiAddr;\r\n    \r\n    /// price of Nac = ETH/NAC\r\n    uint public price = 1;\r\n    // struct store order of user\r\n    struct OrderBid {\r\n        uint price;\r\n        uint eth;\r\n    }\r\n    \r\n    struct OrderAsk {\r\n        uint price;\r\n        uint volume;\r\n    }\r\n    \r\n        \r\n    // prevent lost ether\r\n    function() payable public {\r\n        require(msg.data.length != 0);\r\n        require(msg.value == 0);\r\n    }\r\n    \r\n    modifier onlyNami {\r\n        require(msg.sender == NamiAddr);\r\n        _;\r\n    }\r\n    \r\n    /////////////////\r\n    //---------------------------function about bid Order-----------------------------------------------------------\r\n    \r\n    function placeBuyOrder(uint _price) payable public {\r\n        require(_price > 0 && msg.value > 0 && bid[msg.sender].eth == 0);\r\n        if (msg.value > 0) {\r\n            bid[msg.sender].eth = (bid[msg.sender].eth).add(msg.value);\r\n            bid[msg.sender].price = _price;\r\n            emit UpdateBid(msg.sender, _price, bid[msg.sender].eth);\r\n        }\r\n    }\r\n    \r\n    function sellNac(uint _value, address _buyer, uint _price) public returns (bool success) {\r\n        require(_price == bid[_buyer].price && _buyer != msg.sender);\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n        uint ethOfBuyer = bid[_buyer].eth;\r\n        uint maxToken = ethOfBuyer.mul(bid[_buyer].price);\r\n        require(namiToken.allowance(msg.sender, this) >= _value && _value > 0 && ethOfBuyer != 0 && _buyer != 0x0);\r\n        if (_value > maxToken) {\r\n            if (msg.sender.send(ethOfBuyer) && namiToken.transferFrom(msg.sender,_buyer,maxToken)) {\r\n                // update order\r\n                bid[_buyer].eth = 0;\r\n                emit UpdateBid(_buyer, bid[_buyer].price, bid[_buyer].eth);\r\n                emit BuyHistory(_buyer, msg.sender, bid[_buyer].price, maxToken, now);\r\n                return true;\r\n            } else {\r\n                // revert anything\r\n                revert();\r\n            }\r\n        } else {\r\n            uint eth = _value.div(bid[_buyer].price);\r\n            if (msg.sender.send(eth) && namiToken.transferFrom(msg.sender,_buyer,_value)) {\r\n                // update order\r\n                bid[_buyer].eth = (bid[_buyer].eth).sub(eth);\r\n                emit UpdateBid(_buyer, bid[_buyer].price, bid[_buyer].eth);\r\n                emit BuyHistory(_buyer, msg.sender, bid[_buyer].price, _value, now);\r\n                return true;\r\n            } else {\r\n                // revert anything\r\n                revert();\r\n            }\r\n        }\r\n    }\r\n    \r\n    function closeBidOrder() public {\r\n        require(bid[msg.sender].eth > 0 && bid[msg.sender].price > 0);\r\n        // transfer ETH\r\n        msg.sender.transfer(bid[msg.sender].eth);\r\n        // update order\r\n        bid[msg.sender].eth = 0;\r\n        emit UpdateBid(msg.sender, bid[msg.sender].price, bid[msg.sender].eth);\r\n    }\r\n    \r\n\r\n    ////////////////\r\n    //---------------------------function about ask Order-----------------------------------------------------------\r\n    \r\n    // place ask order by send NAC to Nami Exchange contract\r\n    // this function place sell order\r\n    function tokenFallbackExchange(address _from, uint _value, uint _price) onlyNami public returns (bool success) {\r\n        require(_price > 0 && _value > 0 && ask[_from].volume == 0);\r\n        if (_value > 0) {\r\n            ask[_from].volume = (ask[_from].volume).add(_value);\r\n            ask[_from].price = _price;\r\n            emit UpdateAsk(_from, _price, ask[_from].volume);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function closeAskOrder() public {\r\n        require(ask[msg.sender].volume > 0 && ask[msg.sender].price > 0);\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n        uint previousBalances = namiToken.balanceOf(msg.sender);\r\n        // transfer token\r\n        namiToken.transfer(msg.sender, ask[msg.sender].volume);\r\n        // update order\r\n        ask[msg.sender].volume = 0;\r\n        emit UpdateAsk(msg.sender, ask[msg.sender].price, 0);\r\n        // check balance\r\n        assert(previousBalances < namiToken.balanceOf(msg.sender));\r\n    }\r\n    \r\n    function buyNac(address _seller, uint _price) payable public returns (bool success) {\r\n        require(msg.value > 0 && ask[_seller].volume > 0 && ask[_seller].price > 0);\r\n        require(_price == ask[_seller].price && _seller != msg.sender);\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n        uint maxEth = (ask[_seller].volume).div(ask[_seller].price);\r\n        uint previousBalances = namiToken.balanceOf(msg.sender);\r\n        if (msg.value > maxEth) {\r\n            if (_seller.send(maxEth) && msg.sender.send(msg.value.sub(maxEth))) {\r\n                // transfer token\r\n                namiToken.transfer(msg.sender, ask[_seller].volume);\r\n                emit SellHistory(_seller, msg.sender, ask[_seller].price, ask[_seller].volume, now);\r\n                // update order\r\n                ask[_seller].volume = 0;\r\n                emit UpdateAsk(_seller, ask[_seller].price, 0);\r\n                assert(previousBalances < namiToken.balanceOf(msg.sender));\r\n                return true;\r\n            } else {\r\n                // revert anything\r\n                revert();\r\n            }\r\n        } else {\r\n            uint nac = (msg.value).mul(ask[_seller].price);\r\n            if (_seller.send(msg.value)) {\r\n                // transfer token\r\n                namiToken.transfer(msg.sender, nac);\r\n                // update order\r\n                ask[_seller].volume = (ask[_seller].volume).sub(nac);\r\n                emit UpdateAsk(_seller, ask[_seller].price, ask[_seller].volume);\r\n                emit SellHistory(_seller, msg.sender, ask[_seller].price, nac, now);\r\n                assert(previousBalances < namiToken.balanceOf(msg.sender));\r\n                return true;\r\n            } else {\r\n                // revert anything\r\n                revert();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC23 {\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public returns (bool success);\r\n}\r\n\r\n\r\n\r\n/*\r\n* NamiMultiSigWallet smart contract-------------------------------\r\n*/\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\ncontract NamiMultiSigWallet {\r\n\r\n    uint constant public MAX_OWNER_COUNT = 50;\r\n\r\n    event Confirmation(address indexed sender, uint indexed transactionId);\r\n    event Revocation(address indexed sender, uint indexed transactionId);\r\n    event Submission(uint indexed transactionId);\r\n    event Execution(uint indexed transactionId);\r\n    event ExecutionFailure(uint indexed transactionId);\r\n    event Deposit(address indexed sender, uint value);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event RequirementChange(uint required);\r\n\r\n    mapping (uint => Transaction) public transactions;\r\n    mapping (uint => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    address[] public owners;\r\n    uint public required;\r\n    uint public transactionCount;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        bool executed;\r\n    }\r\n\r\n    modifier onlyWallet() {\r\n        require(msg.sender == address(this));\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        require(!isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        require(isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint transactionId) {\r\n        require(transactions[transactionId].destination != 0);\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint transactionId, address owner) {\r\n        require(confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint transactionId, address owner) {\r\n        require(!confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint transactionId) {\r\n        require(!transactions[transactionId].executed);\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != 0);\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint ownerCount, uint _required) {\r\n        require(!(ownerCount > MAX_OWNER_COUNT\r\n            || _required > ownerCount\r\n            || _required == 0\r\n            || ownerCount == 0));\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to deposit ether.\r\n    function() public payable {\r\n        if (msg.value > 0)\r\n            emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    /// @param _owners List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    function NamiMultiSigWallet(address[] _owners, uint _required)\r\n        public\r\n        validRequirement(_owners.length, _required)\r\n    {\r\n        for (uint i = 0; i < _owners.length; i++) {\r\n            require(!(isOwner[_owners[i]] || _owners[i] == 0));\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        owners = _owners;\r\n        required = _required;\r\n    }\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerDoesNotExist(owner)\r\n        notNull(owner)\r\n        validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        emit OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint i=0; i<owners.length - 1; i++) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        owners.length -= 1;\r\n        if (required > owners.length)\r\n            changeRequirement(owners.length);\r\n        emit OwnerRemoval(owner);\r\n    }\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param owner Address of new owner.\r\n    function replaceOwner(address owner, address newOwner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n        ownerDoesNotExist(newOwner)\r\n    {\r\n        for (uint i=0; i<owners.length; i++) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        emit OwnerRemoval(owner);\r\n        emit OwnerAddition(newOwner);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint _required)\r\n        public\r\n        onlyWallet\r\n        validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function submitTransaction(address destination, uint value, bytes data)\r\n        public\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        emit Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        emit Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint transactionId)\r\n        public\r\n        notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            // Transaction tx = transactions[transactionId];\r\n            transactions[transactionId].executed = true;\r\n            // tx.executed = true;\r\n            if (transactions[transactionId].destination.call.value(transactions[transactionId].value)(transactions[transactionId].data)) {\r\n                emit Execution(transactionId);\r\n            } else {\r\n                emit ExecutionFailure(transactionId);\r\n                transactions[transactionId].executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint transactionId)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                return true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function addTransaction(address destination, uint value, bytes data)\r\n        internal\r\n        notNull(destination)\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination, \r\n            value: value,\r\n            data: data,\r\n            executed: false\r\n        });\r\n        transactionCount += 1;\r\n        emit Submission(transactionId);\r\n    }\r\n\r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Number of confirmations.\r\n    function getConfirmationCount(uint transactionId)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns total number of transactions after filers are applied.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Total number of transactions after filters are applied.\r\n    function getTransactionCount(bool pending, bool executed)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i = 0; i < transactionCount; i++) {\r\n            if (pending && !transactions[i].executed || executed && transactions[i].executed)\r\n                count += 1;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n        public\r\n        constant\r\n        returns (address[])\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Returns array of owner addresses.\r\n    function getConfirmations(uint transactionId)\r\n        public\r\n        constant\r\n        returns (address[] _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        }\r\n        _confirmations = new address[](count);\r\n        for (i = 0; i < count; i++) {\r\n            _confirmations[i] = confirmationsTemp[i];\r\n        }\r\n    }\r\n\r\n    /// @dev Returns list of transaction IDs in defined range.\r\n    /// @param from Index start position of transaction array.\r\n    /// @param to Index end position of transaction array.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Returns array of transaction IDs.\r\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\r\n        public\r\n        constant\r\n        returns (uint[] _transactionIds)\r\n    {\r\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i = 0; i < transactionCount; i++) {\r\n            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        }\r\n        _transactionIds = new uint[](to - from);\r\n        for (i = from; i < to; i++) {\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"namiMultiSigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rateFee\",\"type\":\"uint256\"}],\"name\":\"changeRateFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNacInPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNac\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeInvestInMinute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fci\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceOpen\",\"type\":\"uint256\"}],\"name\":\"closeInvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPoolStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdraw\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"session\",\"outputs\":[{\"name\":\"priceOpen\",\"type\":\"uint256\"},{\"name\":\"priceClose\",\"type\":\"uint256\"},{\"name\":\"timeOpen\",\"type\":\"uint256\"},{\"name\":\"isReset\",\"type\":\"bool\"},{\"name\":\"isOpen\",\"type\":\"bool\"},{\"name\":\"investOpen\",\"type\":\"bool\"},{\"name\":\"investorCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeOneSession\",\"type\":\"uint256\"}],\"name\":\"changeTimeOneSession\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minNAC\",\"type\":\"uint256\"}],\"name\":\"changeMinNac\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellFci\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChooses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[20]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NamiAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFci\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeInvest\",\"type\":\"uint256\"}],\"name\":\"changeTimeInvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sessionId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceClose\",\"type\":\"uint256\"}],\"name\":\"closeSession\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minNac\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isTradableFciInPool\",\"type\":\"bool\"}],\"name\":\"changeTradableFciInSession\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"address[20]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTradableFciInSession\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rateLoss\",\"type\":\"uint256\"}],\"name\":\"changeRateLoss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_choose\",\"type\":\"uint256\"}],\"name\":\"tokenFallbackExchange\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[20]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_INVESTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateLoss\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"changeEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rateWin\",\"type\":\"uint256\"}],\"name\":\"changeRateWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openSession\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetSession\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeOneSession\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_namiCrowdSale\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_namiMultiSigWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timeOpen\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"SessionOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timeInvestClose\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceOpen\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"InvestClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"choose\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeInvest\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeInvest\",\"type\":\"uint256\"}],\"name\":\"InvestToPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timeClose\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceClose\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rateWin\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rateLoss\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rateFee\",\"type\":\"uint256\"}],\"name\":\"SessionClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"}]","ContractName":"BinaryOptionV2","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008d80de8a78198396329dfa769ad54d24bf90e7aa000000000000000000000000e4805cb8e842c10eb91d0d25c1c7600466d361a40000000000000000000000004e237f139582708a592a14034b3c1a5b38da45a6","Library":"","SwarmSource":"bzzr://65717ae51e7dc098318091c51f15f75020bfe28f36314930e0dc9d42e8aa33ec"}]}