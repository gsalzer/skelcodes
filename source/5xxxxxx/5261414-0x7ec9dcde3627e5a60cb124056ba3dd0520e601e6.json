{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ninterface iContract {\r\n    function transferOwnership(address _newOwner) external;\r\n    function owner() external view returns (address);\r\n}\r\n\r\ncontract OwnerContract is Ownable {\r\n    iContract public ownedContract;\r\n    address origOwner;\r\n\r\n    /**\r\n     * @dev bind a contract as its owner\r\n     *\r\n     * @param _contract the contract address that will be binded by this Owner Contract\r\n     */\r\n    function setContract(address _contract) public onlyOwner {\r\n        require(_contract != address(0));\r\n        ownedContract = iContract(_contract);\r\n        origOwner = ownedContract.owner();\r\n    }\r\n\r\n    /**\r\n     * @dev change the owner of the contract from this contract address to the original one. \r\n     *\r\n     */\r\n    function transferOwnershipBack() public onlyOwner {\r\n        ownedContract.transferOwnership(origOwner);\r\n        ownedContract = iContract(address(0));\r\n        origOwner = address(0);\r\n    }\r\n}\r\n\r\ninterface iReleaseTokenContract {\r\n    function releaseWithStage(address _target, address _dest) external returns (bool);\r\n    function releaseAccount(address _target) external returns (bool);\r\n    function transferAndFreeze(address _target, uint256 _value, uint256 _frozenEndTime, uint256 _releasePeriod) external returns (bool);\r\n    function freeze(address _target, uint256 _value, uint256 _frozenEndTime, uint256 _releasePeriod) external returns (bool);\r\n    function releaseOldBalanceOf(address _target) external returns (bool);\r\n    function releaseByStage(address _target) external returns (bool);\r\n}\r\n\r\ncontract ReleaseTokenToMulti is OwnerContract {\r\n    using SafeMath for uint256;\r\n    \r\n    iReleaseTokenContract iReleaseContract;\r\n\r\n    /**\r\n     * @dev bind a contract as its owner\r\n     *\r\n     * @param _contract the contract address that will be binded by this Owner Contract\r\n     */\r\n    function setContract(address _contract) onlyOwner public {\r\n        super.setContract(_contract);\r\n        iReleaseContract = iReleaseTokenContract(_contract);\r\n    }\r\n\r\n    /**\r\n     * @dev release the locked tokens owned by a number of accounts\r\n     *\r\n     * @param _targets the accounts list that hold an amount of locked tokens \r\n     */\r\n    function releaseMultiAccounts(address[] _targets) onlyOwner public returns (bool) {\r\n        //require(_tokenAddr != address(0));\r\n        require(_targets.length != 0);\r\n\r\n        bool res = false;\r\n        uint256 i = 0;\r\n        while (i < _targets.length) {\r\n            res = iReleaseContract.releaseAccount(_targets[i]) || res;\r\n            i = i.add(1);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @dev release the locked tokens owned by an account\r\n     *\r\n     * @param _targets the account addresses list that hold amounts of locked tokens\r\n     * @param _dests the secondary addresses list that will hold the released tokens for each target account\r\n     */\r\n    function releaseMultiWithStage(address[] _targets, address[] _dests) onlyOwner public returns (bool) {\r\n        //require(_tokenAddr != address(0));\r\n        require(_targets.length != 0);\r\n        require(_dests.length != 0);\r\n        assert(_targets.length == _dests.length);\r\n        \r\n        bool res = false;\r\n        uint256 i = 0;\r\n        while (i < _targets.length) {\r\n            require(_targets[i] != address(0));\r\n            require(_dests[i] != address(0));\r\n\r\n            res = iReleaseContract.releaseWithStage(_targets[i], _dests[i]) || res; // as long as there is one true transaction, then the result will be true\r\n            i = i.add(1);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n     /**\r\n     * @dev freeze multiple of the accounts\r\n     *\r\n     * @param _targets the owners of some amount of tokens\r\n     * @param _values the amounts of the tokens\r\n     * @param _frozenEndTimes the list of the end time of the lock period, unit is second\r\n     * @param _releasePeriods the list of the locking period, unit is second\r\n     */\r\n    function freezeMulti(address[] _targets, uint256[] _values, uint256[] _frozenEndTimes, uint256[] _releasePeriods) onlyOwner public returns (bool) {\r\n        require(_targets.length != 0);\r\n        require(_values.length != 0);\r\n        require(_frozenEndTimes.length != 0);\r\n        require(_releasePeriods.length != 0);\r\n        require(_targets.length == _values.length && _values.length == _frozenEndTimes.length && _frozenEndTimes.length == _releasePeriods.length);\r\n\r\n        bool res = true;\r\n        for (uint256 i = 0; i < _targets.length; i = i.add(1)) {\r\n            require(_targets[i] != address(0));\r\n            res = iReleaseContract.freeze(_targets[i], _values[i], _frozenEndTimes[i], _releasePeriods[i]) && res; \r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @dev transfer a list of amounts of tokens to a list of accounts, and then freeze the tokens\r\n     *\r\n     * @param _targets the account addresses that will hold a list of amounts of the tokens\r\n     * @param _values the amounts of the tokens which have been transferred\r\n     * @param _frozenEndTimes the end time list of the locked periods, unit is second\r\n     * @param _releasePeriods the list of locking periods, unit is second\r\n     */\r\n    function transferAndFreezeMulti(address[] _targets, uint256[] _values, uint256[] _frozenEndTimes, uint256[] _releasePeriods) onlyOwner public returns (bool) {\r\n        require(_targets.length != 0);\r\n        require(_values.length != 0);\r\n        require(_frozenEndTimes.length != 0);\r\n        require(_releasePeriods.length != 0);\r\n        require(_targets.length == _values.length && _values.length == _frozenEndTimes.length && _frozenEndTimes.length == _releasePeriods.length);\r\n\r\n        bool res = true;\r\n        for (uint256 i = 0; i < _targets.length; i = i.add(1)) {\r\n            require(_targets[i] != address(0));\r\n            res = iReleaseContract.transferAndFreeze(_targets[i], _values[i], _frozenEndTimes[i], _releasePeriods[i]) && res; \r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @dev release the locked tokens owned by multi-accounts, which are the tokens\r\n     * that belong to these accounts before being locked.\r\n     * this need the releasing-to address has already been set.\r\n     *\r\n     * @param _targets the serial of account addresses that hold an amount of locked tokens\r\n     */\r\n    function releaseAllOldBalanceOf(address[] _targets) onlyOwner public returns (bool) {\r\n        require(_targets.length != 0);\r\n        \r\n        bool res = true;\r\n        for (uint256 i = 0; i < _targets.length; i = i.add(1)) {\r\n            require(_targets[i] != address(0));\r\n            res = iReleaseContract.releaseOldBalanceOf(_targets[i]) && res;\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @dev release the locked tokens owned by an account with several stages\r\n     * this need the contract get approval from the account by call approve() in the token contract\r\n     * and also need the releasing-to address has already been set.\r\n     *\r\n     * @param _targets the account address that hold an amount of locked tokens\r\n     */\r\n    function releaseMultiByStage(address[] _targets) onlyOwner public returns (bool) {\r\n        require(_targets.length != 0);\r\n        \r\n        bool res = false;\r\n        for (uint256 i = 0; i < _targets.length; i = i.add(1)) {\r\n            require(_targets[i] != address(0));\r\n            res = iReleaseContract.releaseByStage(_targets[i]) || res;\r\n        }\r\n\r\n        return res;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"transferOwnershipBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"}],\"name\":\"releaseMultiAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_frozenEndTimes\",\"type\":\"uint256[]\"},{\"name\":\"_releasePeriods\",\"type\":\"uint256[]\"}],\"name\":\"freezeMulti\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_frozenEndTimes\",\"type\":\"uint256[]\"},{\"name\":\"_releasePeriods\",\"type\":\"uint256[]\"}],\"name\":\"transferAndFreezeMulti\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_dests\",\"type\":\"address[]\"}],\"name\":\"releaseMultiWithStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"}],\"name\":\"releaseMultiByStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"}],\"name\":\"releaseAllOldBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ReleaseTokenToMulti","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://599d3edc1e5a302e5f8bb5cd41300520fb973d213e3e0ac571615d4a39b434ea"}]}