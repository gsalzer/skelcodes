{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n* @title Random Investor Contract\r\n* @dev The Investor token contract\r\n*/\r\n\r\n\r\n\r\ncontract RNDInvestor {\r\n   \r\n    address public owner; // Token owner address\r\n    mapping (address => uint256) public balances; // balanceOf\r\n    address[] public addresses;\r\n\r\n    mapping (address => uint256) public debited;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    string public standard = 'Random 1.1';\r\n    string public constant name = \"Random Investor Token\";\r\n    string public constant symbol = \"RINVEST\";\r\n    uint   public constant decimals = 0;\r\n    uint   public constant totalSupply = 2500;\r\n    uint   public raised = 0;\r\n\r\n    uint public ownerPrice = 1 ether;\r\n    uint public soldAmount = 0; // current sold amount (for current state)\r\n    bool public buyAllowed = true;\r\n    bool public transferAllowed = false;\r\n    \r\n    State public current_state; // current token state\r\n    \r\n    // States\r\n    enum State {\r\n        Presale,\r\n        ICO,\r\n        Public\r\n    }\r\n\r\n    //\r\n    // Events\r\n    // This generates a publics event on the blockchain that will notify clients\r\n    \r\n    event Sent(address from, address to, uint amount);\r\n    event Buy(address indexed sender, uint eth, uint fbt);\r\n    event Withdraw(address indexed sender, address to, uint eth);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Raised(uint _value);\r\n    event StateSwitch(State newState);\r\n    \r\n    //\r\n    // Modifiers\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyIfAllowed() {\r\n        if(!transferAllowed) { require(msg.sender == owner); }\r\n        _;\r\n    }\r\n\r\n    //\r\n    // Functions\r\n    // \r\n\r\n    // Constructor\r\n    function RNDInvestor() public {\r\n        owner = msg.sender;\r\n        balances[owner] = totalSupply;\r\n    }\r\n\r\n    // fallback function\r\n    function() payable public {\r\n        if(current_state == State.Public) {\r\n            takeEther();\r\n            return;\r\n        }\r\n        \r\n        require(buyAllowed);\r\n        require(msg.value >= ownerPrice);\r\n        require(msg.sender != owner);\r\n        \r\n        uint wei_value = msg.value;\r\n\r\n        // uint tokens = safeMul(wei_value, ownerPrice);\r\n        uint tokens = wei_value / ownerPrice;\r\n        uint cost = tokens * ownerPrice;\r\n        \r\n        if(current_state == State.Presale) {\r\n            tokens = tokens * 2;\r\n        }\r\n        \r\n        uint currentSoldAmount = safeAdd(tokens, soldAmount);\r\n\r\n        if (current_state == State.Presale) {\r\n            require(currentSoldAmount <= 1000);\r\n        }\r\n        \r\n        require(balances[owner] >= tokens);\r\n        \r\n        balances[owner] = safeSub(balances[owner], tokens);\r\n        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\r\n        soldAmount = safeAdd(soldAmount, tokens);\r\n        \r\n        uint extra_ether = safeSub(msg.value, cost); \r\n        if(extra_ether > 0) {\r\n            msg.sender.transfer(extra_ether);\r\n        }\r\n    }\r\n    \r\n    \r\n    function takeEther() payable public {\r\n        if(msg.value > 0) {\r\n            raised += msg.value;\r\n            emit Raised(msg.value);\r\n        } else {\r\n            withdraw();\r\n        }\r\n    }\r\n    \r\n    function setOwnerPrice(uint _newPrice) public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        ownerPrice = _newPrice;\r\n        return true;\r\n    }\r\n    \r\n    function setTokenState(State _nextState) public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        bool canSwitchState\r\n            =  (current_state == State.Presale && _nextState == State.ICO)\r\n            || (current_state == State.Presale && _nextState == State.Public)\r\n            || (current_state == State.ICO && _nextState == State.Public) ;\r\n\r\n        require(canSwitchState);\r\n        \r\n        current_state = _nextState;\r\n\r\n        emit StateSwitch(_nextState);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function setBuyAllowed(bool _allowed) public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        buyAllowed = _allowed;\r\n        return true;\r\n    }\r\n    \r\n    function allowTransfer() public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        transferAllowed = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      if (newOwner != address(0)) {\r\n        owner = newOwner;\r\n      }\r\n    }\r\n\r\n    function safeMul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function safeSub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n    function withdraw() public returns (bool success) {\r\n        uint val = ethBalanceOf(msg.sender);\r\n        if(val > 0) {\r\n            msg.sender.transfer(val);\r\n            debited[msg.sender] += val;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n    function ethBalanceOf(address _investor) public view returns (uint256 balance) {\r\n        uint val = (raised / totalSupply) * balances[_investor];\r\n        if(val >= debited[_investor]) {\r\n            return val - debited[_investor];\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n    function manager_withdraw() onlyOwner public {\r\n        uint summ = 0;\r\n        for(uint i = 0; i < addresses.length; i++) {\r\n            summ += ethBalanceOf(addresses[i]);\r\n        }\r\n        require(summ < address(this).balance);\r\n        msg.sender.transfer(address(this).balance - summ);\r\n    }\r\n\r\n    \r\n    function manual_withdraw() public {\r\n        for(uint i = 0; i < addresses.length; i++) {\r\n            addresses[i].transfer( ethBalanceOf(addresses[i]) );\r\n        }\r\n    }\r\n\r\n\r\n    function checkAddress(address _addr) public\r\n        returns (bool have_addr)\r\n    {\r\n        for(uint i=0; i<addresses.length; i++) {\r\n            if(addresses[i] == _addr) {\r\n                return true;\r\n            }\r\n        }\r\n        addresses.push(_addr);\r\n        return true;\r\n    }\r\n    \r\n\r\n    function destroy() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n\r\n    /**\r\n     * ERC 20 token functions\r\n     *\r\n     * https://github.com/ethereum/EIPs/issues/20\r\n     */\r\n    \r\n    function transfer(address _to, uint256 _value) public\r\n        onlyIfAllowed\r\n        returns (bool success) \r\n    {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            emit Transfer(msg.sender, _to, _value);\r\n            checkAddress(_to);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public\r\n        onlyIfAllowed\r\n        returns (bool success)\r\n    {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            emit Transfer(_from, _to, _value);\r\n            checkAddress(_to);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public\r\n        constant returns (uint256 remaining)\r\n    {\r\n      return allowed[_owner][_spender];\r\n    }\r\n    \r\n    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_nextState\",\"type\":\"uint8\"}],\"name\":\"setTokenState\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkAddress\",\"outputs\":[{\"name\":\"have_addr\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"debited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setBuyAllowed\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"ethBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manual_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setOwnerPrice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manager_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fbt\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Raised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"StateSwitch\",\"type\":\"event\"}]","ContractName":"RNDInvestor","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://957bf50c2cfd8fca1bbadfa313ea8795bf6a0bc88381007d529e98d779cdf84b"}]}