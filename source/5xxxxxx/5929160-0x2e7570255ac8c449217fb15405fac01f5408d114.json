{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  address public ceoWallet;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    ceoWallet = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n// Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\ncontract ERC721 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n}\r\n\r\n\r\ncontract CryptoRomeControl is Ownable {\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function transferWalletOwnership(address newWalletAddress) onlyOwner public {\r\n      require(newWalletAddress != address(0));\r\n      ceoWallet = newWalletAddress;\r\n    }\r\n\r\n    function pause() external onlyOwner whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n    }\r\n}\r\n\r\ncontract Centurions is ERC721, CryptoRomeControl {\r\n\r\n    // Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public constant name = \"CryptoRomeCenturion\";\r\n    string public constant symbol = \"CROMEC\";\r\n\r\n    struct Centurion {\r\n        uint256 level;\r\n        uint256 experience;\r\n        uint256 askingPrice;\r\n    }\r\n\r\n    uint256[50] public expForLevels = [\r\n        0,   // 0\r\n        20,\r\n        50,\r\n        100,\r\n        200,\r\n        400,  // 5\r\n        800,\r\n        1400,\r\n        2100,\r\n        3150,\r\n        4410,  // 10\r\n        5740,\r\n        7460,\r\n        8950,\r\n        10740,\r\n        12880,\r\n        15460,\r\n        18550,\r\n        22260,\r\n        26710,\r\n        32050, // 20\r\n        38500,\r\n        46200,\r\n        55400,\r\n        66500,\r\n        79800,\r\n        95700,\r\n        115000,\r\n        138000,\r\n        166000,\r\n        200000, // 30\r\n        240000,\r\n        290000,\r\n        350000,\r\n        450000,\r\n        580000,\r\n        820000,\r\n        1150000,\r\n        1700000,\r\n        2600000,\r\n        3850000, // 40\r\n        5800000,\r\n        8750000,\r\n        13000000,\r\n        26000000,\r\n        52000000,\r\n        104000000,\r\n        208000000,\r\n        416000000,\r\n        850000000 // 49\r\n    ];\r\n\r\n    Centurion[] internal allCenturionTokens;\r\n\r\n    string internal tokenURIs;\r\n\r\n    // Map of Centurion to the owner\r\n    mapping (uint256 => address) public centurionIndexToOwner;\r\n    mapping (address => uint256) ownershipTokenCount;\r\n    mapping (uint256 => address) centurionIndexToApproved;\r\n\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(centurionIndexToOwner[_tokenId] == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function getCenturion(uint256 _tokenId) external view\r\n        returns (\r\n            uint256 level,\r\n            uint256 experience,\r\n            uint256 askingPrice\r\n        ) {\r\n        Centurion storage centurion = allCenturionTokens[_tokenId];\r\n\r\n        level = centurion.level;\r\n        experience = centurion.experience;\r\n        askingPrice = centurion.askingPrice;\r\n    }\r\n\r\n    function updateTokenUri(uint256 _tokenId, string _tokenURI) public whenNotPaused onlyOwner {\r\n        _setTokenURI(_tokenId, _tokenURI);\r\n    }\r\n\r\n    function createCenturion() public whenNotPaused onlyOwner returns (uint256) {\r\n        uint256 finalId = _createCenturion(msg.sender);\r\n        return finalId;\r\n    }\r\n\r\n    function issueCenturion(address _to) public whenNotPaused onlyOwner returns (uint256) {\r\n        uint256 finalId = _createCenturion(msg.sender);\r\n        _transfer(msg.sender, _to, finalId);\r\n        return finalId;\r\n    }\r\n\r\n    function listCenturion(uint256 _askingPrice) public whenNotPaused onlyOwner returns (uint256) {\r\n        uint256 finalId = _createCenturion(msg.sender);\r\n        allCenturionTokens[finalId].askingPrice = _askingPrice;\r\n        return finalId;\r\n    }\r\n\r\n    function sellCenturion(uint256 _tokenId, uint256 _askingPrice) onlyOwnerOf(_tokenId) whenNotPaused public {\r\n        allCenturionTokens[_tokenId].askingPrice = _askingPrice;\r\n    }\r\n\r\n    function cancelCenturionSale(uint256 _tokenId) onlyOwnerOf(_tokenId) whenNotPaused public {\r\n        allCenturionTokens[_tokenId].askingPrice = 0;\r\n    }\r\n\r\n    function purchaseCenturion(uint256 _tokenId) whenNotPaused public payable {\r\n        require(allCenturionTokens[_tokenId].askingPrice > 0);\r\n        require(msg.value >= allCenturionTokens[_tokenId].askingPrice);\r\n        allCenturionTokens[_tokenId].askingPrice = 0;\r\n        uint256 fee = devFee(msg.value);\r\n        ceoWallet.transfer(fee);\r\n        centurionIndexToOwner[_tokenId].transfer(SafeMath.sub(address(this).balance, fee));\r\n        _transfer(centurionIndexToOwner[_tokenId], msg.sender, _tokenId);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        ownershipTokenCount[_to] = SafeMath.add(ownershipTokenCount[_to], 1);\r\n        centurionIndexToOwner[_tokenId] = _to;\r\n        if (_from != address(0)) {\r\n            // clear any previously approved ownership exchange\r\n            ownershipTokenCount[_from] = SafeMath.sub(ownershipTokenCount[_from], 1);\r\n            delete centurionIndexToApproved[_tokenId];\r\n        }\r\n    }\r\n\r\n    function _createCenturion(address _owner) internal returns (uint) {\r\n        Centurion memory _centurion = Centurion({\r\n            level: 1,\r\n            experience: 0,\r\n            askingPrice: 0\r\n        });\r\n        uint256 newCenturionId = allCenturionTokens.push(_centurion) - 1;\r\n\r\n        // Only 1000 centurions should ever exist (0-999)\r\n        require(newCenturionId < 1000);\r\n        _transfer(0, _owner, newCenturionId);\r\n        return newCenturionId;\r\n    }\r\n\r\n    function devFee(uint256 amount) internal pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount, 3), 100);\r\n    }\r\n\r\n    // Functions for ERC721 Below:\r\n\r\n    // Check is address has approval to transfer centurion.\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return centurionIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n        address owner = centurionIndexToOwner[_tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    function addExperience(uint256 _tokenId, uint256 _exp) public whenNotPaused onlyOwner returns (uint256) {\r\n        require(exists(_tokenId));\r\n        allCenturionTokens[_tokenId].experience = SafeMath.add(allCenturionTokens[_tokenId].experience, _exp);\r\n        for (uint256 i = allCenturionTokens[_tokenId].level; i < 50; i++) {\r\n            if (allCenturionTokens[_tokenId].experience >= expForLevels[i]) {\r\n               allCenturionTokens[_tokenId].level = allCenturionTokens[_tokenId].level + 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return allCenturionTokens[_tokenId].level;\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) public view returns (string) {\r\n        require(exists(_tokenId));\r\n        return tokenURIs;\r\n    }\r\n\r\n    function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n        require(exists(_tokenId));\r\n        tokenURIs = _uri;\r\n    }\r\n\r\n    // Sets a centurion as approved for transfer to another address.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        centurionIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    // Returns the number of Centurions owned by a specific address.\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    // Transfers a Centurion to another address. If transferring to a smart\r\n    // contract ensure that it is aware of ERC-721.\r\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) whenNotPaused {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n\r\n        _transfer(msg.sender, _to, _tokenId);\r\n        emit Transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    //  Permit another address the right to transfer a specific Centurion via\r\n    //  transferFrom().\r\n    function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) whenNotPaused {\r\n        _approve(_tokenId, _to);\r\n\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    // Transfer a Centurion owned by another address, for which the calling address\r\n    // has previously been granted transfer approval by the owner.\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        require(centurionIndexToApproved[_tokenId] == msg.sender);\r\n        address owner = ownerOf(_tokenId);\r\n        _transfer(owner, msg.sender, _tokenId);\r\n        emit Transfer(owner, msg.sender, _tokenId);\r\n  }\r\n\r\n    // 1000 Centurions will ever exist\r\n    function totalSupply() public view returns (uint) {\r\n        return allCenturionTokens.length;\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner)\r\n    {\r\n        owner = centurionIndexToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n\r\n    // List of all Centurion IDs assigned to an address.\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalCenturions = totalSupply();\r\n            uint256 resultIndex = 0;\r\n            uint256 centurionId;\r\n\r\n            for (centurionId = 0; centurionId < totalCenturions; centurionId++) {\r\n                if (centurionIndexToOwner[centurionId] == _owner) {\r\n                    result[resultIndex] = centurionId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelCenturionSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"issueCenturion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expForLevels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_exp\",\"type\":\"uint256\"}],\"name\":\"addExperience\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCenturion\",\"outputs\":[{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"experience\",\"type\":\"uint256\"},{\"name\":\"askingPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createCenturion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseCenturion\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_askingPrice\",\"type\":\"uint256\"}],\"name\":\"sellCenturion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_askingPrice\",\"type\":\"uint256\"}],\"name\":\"listCenturion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWalletAddress\",\"type\":\"address\"}],\"name\":\"transferWalletOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"centurionIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"updateTokenUri\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Centurions","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4bcfbe4759d949bc305b9bf34d6220b6bcf15f921d66bc397b1dfd5e697a446f"}]}