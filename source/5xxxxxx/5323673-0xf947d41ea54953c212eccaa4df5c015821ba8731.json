{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'C4F' Coins4Favors contracts\r\n//\r\n// contracts for C4FEscrow and C4FToken Crowdsale\r\n//\r\n// (c) C4F Ltd Hongkong 2018\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'C4F' FavorEscrow contract\r\n//\r\n// Escrow contract for favor request\r\n// allows to reserve tokens till a favor is completed, cancelled or arbitrated\r\n// handles requester and provider interaction, payout, cancellation and\r\n// arbitration if needed.\r\n//\r\n// (c) C4F Ltd Hongkong 2018\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract C4FEscrow {\r\n\r\n    using SafeMath for uint;\r\n    \r\n    address public owner;\r\n    address public requester;\r\n    address public provider;\r\n\r\n    uint256 public startTime;\r\n    uint256 public closeTime;\r\n    uint256 public deadline;\r\n    \r\n    uint256 public C4FID;\r\n    uint8   public status;\r\n    bool    public requesterLocked;\r\n    bool    public providerLocked;\r\n    bool    public providerCompleted;\r\n    bool    public requesterDisputed;\r\n    bool    public providerDisputed;\r\n    uint8   public arbitrationCosts;\r\n\r\n    event ownerChanged(address oldOwner, address newOwner);   \r\n    event deadlineChanged(uint256 oldDeadline, uint256 newDeadline);\r\n    event favorDisputed(address disputer);\r\n    event favorUndisputed(address undisputer);\r\n    event providerSet(address provider);\r\n    event providerLockSet(bool lockstat);\r\n    event providerCompletedSet(bool completed_status);\r\n    event requesterLockSet(bool lockstat);\r\n    event favorCompleted(address provider, uint256 tokenspaid);\r\n    event favorCancelled(uint256 tokensreturned);\r\n    event tokenOfferChanged(uint256 oldValue, uint256 newValue);\r\n    event escrowArbitrated(address provider, uint256 coinsreturned, uint256 fee);\r\n\r\n// ----------------------------------------------------------------------------\r\n// modifiers used in this contract to restrict function calls\r\n// ----------------------------------------------------------------------------\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }   \r\n\r\n    modifier onlyRequester {\r\n        require(msg.sender == requester);\r\n        _;\r\n    }   \r\n    \r\n    modifier onlyProvider {\r\n        require(msg.sender == provider);\r\n        _;\r\n    }   \r\n\r\n    modifier onlyOwnerOrRequester {\r\n        require((msg.sender == owner) || (msg.sender == requester)) ;\r\n        _;\r\n    }   \r\n    \r\n    modifier onlyOwnerOrProvider {\r\n        require((msg.sender == owner) || (msg.sender == provider)) ;\r\n        _;        \r\n    }\r\n    \r\n    modifier onlyProviderOrRequester {\r\n        require((msg.sender == requester) || (msg.sender == provider)) ;\r\n        _;        \r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Constructor\r\n    // ----------------------------------------------------------------------------\r\n    function C4FEscrow(address newOwner, uint256 ID, address req, uint256 deadl, uint8 arbCostPercent) public {\r\n        owner       = newOwner; // main contract\r\n        C4FID       = ID;\r\n        requester   = req;\r\n        provider    = address(0);\r\n        startTime   = now;\r\n        deadline    = deadl;\r\n        status      = 1;        // 1 = open, 2 = cancelled, 3=closed, 4=arbitrated\r\n        arbitrationCosts    = arbCostPercent;\r\n        requesterLocked     = false;\r\n        providerLocked      = false;\r\n        providerCompleted   = false;\r\n        requesterDisputed   = false;\r\n        providerDisputed    = false;\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // returns the owner of the Escrow contract. This is the main C4F Token contract\r\n    // ----------------------------------------------------------------------------\r\n    function getOwner() public view returns (address ownner) {\r\n        return owner;\r\n    } \r\n    \r\n    function setOwner(address newOwner) public onlyOwner returns (bool success) {\r\n        require(newOwner != address(0));\r\n        ownerChanged(owner,newOwner);\r\n        owner = newOwner;\r\n        return true;\r\n    }\r\n    // ----------------------------------------------------------------------------\r\n    // returns the Requester of the Escrow contract. This is the originator of the favor request\r\n    // ----------------------------------------------------------------------------\r\n    function getRequester() public view returns (address req) {\r\n        return requester;\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // returns the Provider of the Escrow contract. This is the favor provider\r\n    // ----------------------------------------------------------------------------\r\n    function getProvider() public view returns (address prov) {\r\n        return provider;\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // returns the startTime of the Escrow contract which is the time it was created\r\n    // ----------------------------------------------------------------------------\r\n    function getStartTime() public view returns (uint256 st) {\r\n        return startTime;\r\n    }    \r\n\r\n    // ----------------------------------------------------------------------------\r\n    // returns the Deadline of the Escrow contract by which completion is needed\r\n    // Reqeuster can cancel the Escrow 12 hours after deadline expires if favor\r\n    // is not marked as completed by provider\r\n    // ----------------------------------------------------------------------------\r\n    function getDeadline() public view returns (uint256 actDeadline) {\r\n        actDeadline = deadline;\r\n        return actDeadline;\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // adjusts the Deadline of the Escrow contract by which completion is needed\r\n    // Reqeuster can only change this till a provider accepted (locked) the contract\r\n    // ----------------------------------------------------------------------------\r\n    function changeDeadline(uint newDeadline) public onlyRequester returns (bool success) {\r\n        // deadline can only be changed if not locked by provider and not completed\r\n        require ((!providerLocked) && (!providerDisputed) && (!providerCompleted) && (status==1));\r\n        deadlineChanged(newDeadline, deadline);\r\n        deadline = newDeadline;\r\n        return true;\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // returns the status of the Escrow contract\r\n    // ----------------------------------------------------------------------------\r\n    function getStatus() public view returns (uint8 s) {\r\n        return status;\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Initiates dispute of the Escrow contract. Once requester or provider disputeFavor\r\n    // because they cannot agree on completion, the C4F system can arbitrate the Escrow\r\n    // based on the internal juror system.\r\n    // ----------------------------------------------------------------------------\r\n    function disputeFavor() public onlyProviderOrRequester returns (bool success) {\r\n        if(msg.sender == requester) {\r\n            requesterDisputed = true;\r\n        }\r\n        if(msg.sender == provider) {\r\n            providerDisputed = true;\r\n            providerLocked = true;\r\n        }\r\n        favorDisputed(msg.sender);\r\n        return true;\r\n    }\r\n    // ----------------------------------------------------------------------------\r\n    // Allows to take back a dispute on the Escrow if conflict has been resolved\r\n    // ----------------------------------------------------------------------------\r\n    function undisputeFavor() public onlyProviderOrRequester returns (bool success) {\r\n        if(msg.sender == requester) {\r\n            requesterDisputed = false;\r\n        }\r\n        if(msg.sender == provider) {\r\n            providerDisputed = false;\r\n        }\r\n        favorUndisputed(msg.sender);\r\n        return true;\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // allows to set the address of the provider for the Favor\r\n    // this can be done by the requester or the C4F system\r\n    // once the provider accepts, the providerLock flag disables changes to this\r\n    // ----------------------------------------------------------------------------\r\n    function setProvider(address newProvider) public onlyOwnerOrRequester returns (bool success) {\r\n        // can only change provider if not locked by current provider\r\n        require(!providerLocked);\r\n        require(!requesterLocked);\r\n        provider = newProvider;\r\n        providerSet(provider);\r\n        return true;\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // switches the ProviderLock on or off. Once provider lock is switched on, \r\n    // it means the provider has formally accepted the offer and changes are \r\n    // blocked\r\n    // ----------------------------------------------------------------------------\r\n    function setProviderLock(bool lock) public onlyOwnerOrProvider returns (bool res) {\r\n        providerLocked = lock;\r\n        providerLockSet(lock);\r\n        return providerLocked;\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // allows to set Favor to completed from Provider view, indicating that \r\n    // provider sess Favor as delivered\r\n    // ----------------------------------------------------------------------------\r\n    function setProviderCompleted(bool c) public onlyOwnerOrProvider returns (bool res) {\r\n        providerCompleted = c;\r\n        providerCompletedSet(c);\r\n        return c;\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // allows to set requester lock, indicating requester accepted favor provider\r\n    // ----------------------------------------------------------------------------\r\n    function setRequesterLock(bool lock) public onlyOwnerOrRequester returns (bool res) {\r\n        requesterLocked = lock;\r\n        requesterLockSet(lock);\r\n        return requesterLocked;\r\n    }\r\n    \r\n\r\n    function getRequesterLock() public onlyOwnerOrRequester view returns (bool res) {\r\n        res = requesterLocked;\r\n        return res;\r\n    }\r\n\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // allows the C4F system to change the status of an Escrow contract\r\n    // ----------------------------------------------------------------------------\r\n    function setStatus(uint8 newStatus) public onlyOwner returns (uint8 stat) {\r\n        status = newStatus;    \r\n        stat = status;\r\n        return stat;\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // returns the current Token value of the escrow for competing the favor\r\n    // this is the token balance of the escrow contract in the main contract\r\n    // ----------------------------------------------------------------------------\r\n    function getTokenValue() public view returns (uint256 tokens) {\r\n        C4FToken C4F = C4FToken(owner);\r\n        return C4F.balanceOf(address(this));\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // completes the favor Escrow and pays out the tokens minus the commission fee\r\n    // ----------------------------------------------------------------------------\r\n    function completeFavor() public onlyRequester returns (bool success) {\r\n        // check if provider has been set\r\n        require(provider != address(0));\r\n        \r\n        // payout tokens to provider with commission\r\n        uint256 actTokenvalue = getTokenValue();\r\n        C4FToken C4F = C4FToken(owner);\r\n        if(!C4F.transferWithCommission(provider, actTokenvalue)) revert();\r\n        closeTime = now;\r\n        status = 3;\r\n        favorCompleted(provider,actTokenvalue);\r\n        return true;\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // this function cancels a favor request on behalf of the requester\r\n    // only possible as long as no provider accepted the contract or 12 hours\r\n    // after the deadline if the provider did not indicate completion or disputed\r\n    // ----------------------------------------------------------------------------\r\n    function cancelFavor() public onlyRequester returns (bool success) {\r\n        // cannot cancel if locked by provider unless deadline expired by 12 hours and not completed/disputed\r\n        require((!providerLocked) || ((now > deadline.add(12*3600)) && (!providerCompleted) && (!providerDisputed)));\r\n        // cannot cancel after completed or arbitrated\r\n        require(status==1);\r\n        // send tokens back to requester\r\n        uint256 actTokenvalue = getTokenValue();\r\n        C4FToken C4F = C4FToken(owner);\r\n        if(!C4F.transfer(requester,actTokenvalue)) revert();\r\n        closeTime = now;\r\n        status = 2;\r\n        favorCancelled(actTokenvalue);\r\n        return true;\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // allows the favor originator to reduce the token offer\r\n    // This can only be done until a provider has accepted (locked) the favor request\r\n    // ----------------------------------------------------------------------------\r\n    function changeTokenOffer(uint256 newOffer) public onlyRequester returns (bool success) {\r\n        // cannot change if locked by provider\r\n        require((!providerLocked) && (!providerDisputed) && (!providerCompleted));\r\n        // cannot change if cancelled, closed or arbitrated\r\n        require(status==1);\r\n        // only use for reducing tokens (to increase simply transfer tokens to contract)\r\n        uint256 actTokenvalue = getTokenValue();\r\n        require(newOffer < actTokenvalue);\r\n        // cannot set to 0, use cancel to do that\r\n        require(newOffer > 0);\r\n        // pay back tokens to reach new offer level\r\n        C4FToken C4F = C4FToken(owner);\r\n        if(!C4F.transfer(requester, actTokenvalue.sub(newOffer))) revert();\r\n        tokenOfferChanged(actTokenvalue,newOffer);\r\n        return true;\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // arbitration can be done by the C4F system once requester or provider have\r\n    // disputed the favor contract. An independent juror system on the platform \r\n    // will vote on the outcome and define a split of the tokens between the two\r\n    // parties. The jurors get a percentage which is preset in the contratct for\r\n    // the arbitration\r\n    // ----------------------------------------------------------------------------\r\n    function arbitrateC4FContract(uint8 percentReturned) public onlyOwner returns (bool success) {\r\n        // can only arbitrate if one of the two parties has disputed \r\n        require((providerDisputed) || (requesterDisputed));\r\n        // C4F System owner can arbitrate and provide a split of tokens between 0-100%\r\n        uint256 actTokens = getTokenValue();\r\n        \r\n        // calc. arbitration fee based on percent costs\r\n        uint256 arbitrationTokens = actTokens.mul(arbitrationCosts);\r\n        arbitrationTokens = arbitrationTokens.div(100);\r\n        // subtract these from the tokens to be distributed between requester and provider\r\n        actTokens = actTokens.sub(arbitrationTokens);\r\n        \r\n        // now split the tokens up using provided percentage\r\n        uint256 requesterTokens = actTokens.mul(percentReturned);\r\n        requesterTokens = requesterTokens.div(100);\r\n        // actTokens to hold what gets forwarded to provider\r\n        actTokens = actTokens.sub(requesterTokens);\r\n        \r\n        // distribute the Tokens\r\n        C4FToken C4F = C4FToken(owner);\r\n        // arbitration tokens go to commissiontarget of master contract\r\n        address commissionTarget = C4F.getCommissionTarget();\r\n        // requester gets refunded his split\r\n        if(!C4F.transfer(requester, requesterTokens)) revert();\r\n        // provider gets his split of tokens\r\n        if(!C4F.transfer(provider, actTokens)) revert();\r\n        // arbitration fee to system for distribution\r\n        if(!C4F.transfer(commissionTarget, arbitrationTokens)) revert();\r\n        \r\n        // set status & closeTime\r\n        status = 4;\r\n        closeTime = now;\r\n        success = true;\r\n        escrowArbitrated(provider,requesterTokens,arbitrationTokens);\r\n        return success;\r\n    }\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'C4F' 'Coins4Favors FavorCoin contract\r\n//\r\n// Symbol      : C4F\r\n// Name        : FavorCoin\r\n// Total supply: 100,000,000,000.000000000000000000\r\n// Decimals    : 18\r\n//\r\n// includes the crowdsale price, PreICO bonus structure, limits on sellable tokens\r\n// function to pause sale, commission fee transfer and favorcontract management\r\n//\r\n// (c) C4F Ltd Hongkong 2018\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract C4FToken is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint8 public _crowdsalePaused;\r\n    uint public _totalSupply;\r\n    uint public _salesprice;\r\n    uint public _endOfICO;\r\n    uint public _endOfPreICO;\r\n    uint public _beginOfICO;\r\n    uint public _bonusTime1;\r\n    uint public _bonusTime2;\r\n    uint public _bonusRatio1;\r\n    uint public _bonusRatio2;\r\n    uint public _percentSoldInPreICO;\r\n    uint public _maxTokenSoldPreICO;\r\n    uint public _percentSoldInICO;\r\n    uint public _maxTokenSoldICO;\r\n    uint public _total_sold;\r\n    uint public _commission;\r\n    uint8 public _arbitrationPercent;\r\n    address public _commissionTarget;\r\n    uint public _minimumContribution;\r\n    address[]   EscrowAddresses;\r\n    uint public _escrowIndex;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    mapping(address => uint) whitelisted_amount;\r\n    mapping(address => bool) C4FEscrowContracts;\r\n    \r\n    \r\n    event newEscrowCreated(uint ID, address contractAddress, address requester);   \r\n    event ICOStartSet(uint256 starttime);\r\n    event ICOEndSet(uint256 endtime);\r\n    event PreICOEndSet(uint256 endtime);\r\n    event BonusTime1Set(uint256 bonustime);\r\n    event BonusTime2Set(uint256 bonustime);\r\n    event accountWhitelisted(address account, uint256 limit);\r\n    event crowdsalePaused(bool paused);\r\n    event crowdsaleResumed(bool resumed);\r\n    event commissionSet(uint256 commission);\r\n    event commissionTargetSet(address target);\r\n    event arbitrationPctSet(uint8 arbpercent);\r\n    event contractOwnerChanged(address escrowcontract, address newOwner);\r\n    event contractProviderChanged(address C4Fcontract, address provider);\r\n    event contractArbitrated(address C4Fcontract, uint8 percentSplit);\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function C4FToken() public {\r\n        symbol          = \"C4F\";\r\n        name            = \"C4F FavorCoins\";\r\n        decimals        = 18;\r\n        \r\n        _totalSupply    = 100000000000 * 10**uint(decimals);\r\n\r\n        _salesprice     = 2000000;      // C4Fs per 1 Eth\r\n        _minimumContribution = 0.05 * 10**18;    // minimum amount is 0.05 Ether\r\n        \r\n        _endOfICO       = 1532908800;   // end of ICO is 30.07.18\r\n        _beginOfICO     = 1526342400;   // begin is 15.05.18\r\n        _bonusRatio1    = 110;          // 10% Bonus in second week of PreICO\r\n        _bonusRatio2    = 125;          // 25% Bonus in first week of PreICO\r\n        _bonusTime1     = 1527638400;   // prior to 30.05.18 add bonusRatio1\r\n        _bonusTime2     = 1526947200;   // prior to 22.05.18 add bonusRatio2\r\n        _endOfPreICO    = 1527811200;   // Pre ICO ends 01.06.2018\r\n        \r\n        _percentSoldInPreICO = 10;      // we only offer 10% of total Supply during PreICO\r\n        _maxTokenSoldPreICO = _totalSupply.mul(_percentSoldInPreICO);\r\n        _maxTokenSoldPreICO = _maxTokenSoldPreICO.div(100);\r\n        \r\n        _percentSoldInICO   = 60;      // in addition to 10% sold in PreICO, 60% sold in ICO \r\n        _maxTokenSoldICO    = _totalSupply.mul(_percentSoldInPreICO.add(_percentSoldInICO));\r\n        _maxTokenSoldICO    = _maxTokenSoldICO.div(100);\r\n        \r\n        _total_sold         = 0;            // total coins sold \r\n        \r\n        _commission         = 0;            // no comission on transfers \r\n        _commissionTarget   = owner;        // default any commission goes to the owner of the contract\r\n        _arbitrationPercent = 10;           // default costs for arbitration of an escrow contract\r\n                                            // is transferred to escrow contract at time of creation and kept there\r\n        \r\n        _crowdsalePaused    = 0;\r\n\r\n        balances[owner]     = _totalSupply;\r\n        Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // notLocked: ensure no coins are moved by owners prior to end of ICO\r\n    // ------------------------------------------------------------------------\r\n    \r\n    modifier notLocked {\r\n        require((msg.sender == owner) || (now >= _endOfICO));\r\n        _;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // onlyDuringICO: FavorCoins can only be bought via contract during ICO\r\n    // ------------------------------------------------------------------------\r\n    \r\n    modifier onlyDuringICO {\r\n        require((now >= _beginOfICO) && (now <= _endOfICO));\r\n        _;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // notPaused: ability to stop crowdsale if problems occur\r\n    // ------------------------------------------------------------------------\r\n    \r\n    modifier notPaused {\r\n        require(_crowdsalePaused == 0);\r\n        _;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // set ICO and PRE ICO Dates\r\n    // ------------------------------------------------------------------------\r\n\r\n    function setICOStart(uint ICOdate) public onlyOwner returns (bool success) {\r\n        _beginOfICO  = ICOdate;\r\n        ICOStartSet(_beginOfICO);\r\n        return true;\r\n    }\r\n    \r\n    function setICOEnd(uint ICOdate) public onlyOwner returns (bool success) {\r\n        _endOfICO  = ICOdate;\r\n        ICOEndSet(_endOfICO);\r\n        return true;\r\n    }\r\n    \r\n    function setPreICOEnd(uint ICOdate) public onlyOwner returns (bool success) {\r\n        _endOfPreICO = ICOdate;\r\n        PreICOEndSet(_endOfPreICO);\r\n        return true;\r\n    }\r\n    \r\n    function setBonusDate1(uint ICOdate) public onlyOwner returns (bool success) {\r\n        _bonusTime1 = ICOdate;\r\n        BonusTime1Set(_bonusTime1);\r\n        return true;\r\n    }\r\n\r\n    function setBonusDate2(uint ICOdate) public onlyOwner returns (bool success) {\r\n        _bonusTime2 = ICOdate;\r\n        BonusTime2Set(_bonusTime2);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Whitelist address up to maximum spending (AML and KYC)\r\n    // ------------------------------------------------------------------------\r\n    function whitelistAccount(address account, uint limit) public onlyOwner {\r\n        whitelisted_amount[account] = limit*10**18;\r\n        accountWhitelisted(account,limit);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // return maximum remaining whitelisted amount for account \r\n    // ------------------------------------------------------------------------\r\n    function getWhitelistLimit(address account) public constant returns (uint limit) {\r\n        return whitelisted_amount[account];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Pause crowdsale in case of any problems\r\n    // ------------------------------------------------------------------------\r\n    function pauseCrowdsale() public onlyOwner returns (bool success) {\r\n        _crowdsalePaused = 1;\r\n        crowdsalePaused(true);\r\n        return true;\r\n    }\r\n\r\n    function resumeCrowdsale() public onlyOwner returns (bool success) {\r\n        _crowdsalePaused = 0;\r\n        crowdsaleResumed(true);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Commission can be added later to a percentage of the transferred\r\n    // C4F tokens for operating costs of the system. Percentage is capped at 2%\r\n    // ------------------------------------------------------------------------\r\n    function setCommission(uint comm) public onlyOwner returns (bool success) {\r\n        require(comm < 200); // we allow a maximum of 2% commission\r\n        _commission = comm;\r\n        commissionSet(comm);\r\n        return true;\r\n    }\r\n\r\n    function setArbitrationPercentage(uint8 arbitPct) public onlyOwner returns (bool success) {\r\n        require(arbitPct <= 15); // we allow a maximum of 15% arbitration costs\r\n        _arbitrationPercent = arbitPct;\r\n        arbitrationPctSet(_arbitrationPercent);\r\n        return true;\r\n    }\r\n\r\n    function setCommissionTarget(address ct) public onlyOwner returns (bool success) {\r\n        _commissionTarget = ct;\r\n        commissionTargetSet(_commissionTarget);\r\n        return true;\r\n    }\r\n    \r\n    function getCommissionTarget() public view returns (address ct) {\r\n        ct = _commissionTarget;\r\n        return ct;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // - users cannot transfer C4Fs prior to close of ICO\r\n    // - only owner can transfer anytime to do airdrops, etc.\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public notLocked notPaused returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // this function will be used by the C4F app to charge a Commission\r\n    // on transfers later\r\n    // ------------------------------------------------------------------------\r\n    function transferWithCommission(address to, uint tokens) public notLocked notPaused returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        // split tokens using commission Percentage\r\n        uint comTokens = tokens.mul(_commission);\r\n        comTokens = comTokens.div(10000);\r\n        // adjust balances\r\n        balances[to] = balances[to].add(tokens.sub(comTokens));\r\n        balances[_commissionTarget] = balances[_commissionTarget].add(comTokens);\r\n        // trigger events\r\n        Transfer(msg.sender, to, tokens.sub(comTokens));\r\n        Transfer(msg.sender, _commissionTarget, comTokens);\r\n        return true;\r\n    }\r\n\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // TransferInternal handles Transfer of Tokens from Owner during ICO and Pre-ICO\r\n    // ------------------------------------------------------------------------\r\n    function transferInternal(address to, uint tokens) private returns (bool success) {\r\n        balances[owner] = balances[owner].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public notLocked notPaused returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // not possivbe before end of ICO\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public notLocked notPaused returns (bool success) {\r\n        // check allowance is high enough\r\n        require(allowed[from][msg.sender] >= tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[from] = balances[from].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // startEscrow FavorContract\r\n    // starts an escrow contract and transfers the tokens into the contract\r\n    // ------------------------------------------------------------------------\r\n    \r\n    function startFavorEscrow(uint256 ID, uint256 deadl, uint tokens) public notLocked returns (address C4FFavorContractAddr) {\r\n        // check if sufficient coins available\r\n        require(balanceOf(msg.sender) >= tokens);\r\n        // create contract\r\n        address newFavor = new C4FEscrow(address(this), ID, msg.sender, deadl, _arbitrationPercent);\r\n        // add to list of C4FEscrowContratcs\r\n        EscrowAddresses.push(newFavor);\r\n        C4FEscrowContracts[newFavor] = true;\r\n        // transfer tokens to contract\r\n        if(!transfer(newFavor, tokens)) revert();\r\n        C4FFavorContractAddr = newFavor;\r\n        newEscrowCreated(ID, newFavor, msg.sender);\r\n        return C4FFavorContractAddr;\r\n    }\r\n\r\n    function isFavorEscrow(uint id, address c4fes) public view returns (bool res) {\r\n        if(EscrowAddresses[id] == c4fes) {\r\n                res = true;\r\n            } else {\r\n                res = false;\r\n            }\r\n        return res;\r\n    }\r\n    \r\n    function getEscrowCount() public view returns (uint) {\r\n        return EscrowAddresses.length;\r\n    }\r\n    \r\n    function getEscrowAddress(uint ind) public view returns(address esa) {\r\n        require (ind <= EscrowAddresses.length);\r\n        esa = EscrowAddresses[ind];\r\n        return esa;\r\n    }\r\n    \r\n    \r\n    // use this function to allow C4F System to adjust owner of C4FEscrows \r\n    function setC4FContractOwner(address C4Fcontract, address newOwner) public onlyOwner returns (bool success) {\r\n        require(C4FEscrowContracts[C4Fcontract]);\r\n        C4FEscrow c4fec = C4FEscrow(C4Fcontract);\r\n        // call setProvider from there\r\n        if(!c4fec.setOwner(newOwner)) revert();\r\n        contractOwnerChanged(C4Fcontract,newOwner);\r\n        return true;\r\n    }\r\n    \r\n    // use this function to allow C4F System to adjust provider of C4F Favorcontract    \r\n    function setC4FContractProvider(address C4Fcontract, address provider) public onlyOwner returns (bool success) {\r\n        // ensure this is a C4FEscrowContract initiated by C4F system\r\n        require(C4FEscrowContracts[C4Fcontract]);\r\n        C4FEscrow c4fec = C4FEscrow(C4Fcontract);\r\n        // call setProvider from there\r\n        if(!c4fec.setProvider(provider)) revert();\r\n        contractProviderChanged(C4Fcontract, provider);\r\n        return true;\r\n    }\r\n    \r\n    // use this function to allow C4F System to adjust providerLock \r\n    function setC4FContractProviderLock(address C4Fcontract, bool lock) public onlyOwner returns (bool res) {\r\n        // ensure this is a C4FEscrowContract initiated by C4F system\r\n        require(C4FEscrowContracts[C4Fcontract]);\r\n        C4FEscrow c4fec = C4FEscrow(C4Fcontract);\r\n        // call setProviderLock from there\r\n        res = c4fec.setProviderLock(lock);\r\n        return res;\r\n    }\r\n    \r\n    // use this function to allow C4F System to adjust providerCompleted status\r\n    function setC4FContractProviderCompleted(address C4Fcontract, bool completed) public onlyOwner returns (bool res) {\r\n        // ensure this is a C4FEscrowContract initiated by C4F system\r\n        require(C4FEscrowContracts[C4Fcontract]);\r\n        C4FEscrow c4fec = C4FEscrow(C4Fcontract);\r\n        // call setProviderCompleted from there\r\n        res = c4fec.setProviderCompleted(completed);\r\n        return res;\r\n    }\r\n    \r\n        // use this function to allow C4F System to adjust providerLock \r\n    function setC4FContractRequesterLock(address C4Fcontract, bool lock) public onlyOwner returns (bool res) {\r\n        // ensure this is a C4FEscrowContract initiated by C4F system\r\n        require(C4FEscrowContracts[C4Fcontract]);\r\n        C4FEscrow c4fec = C4FEscrow(C4Fcontract);\r\n        // call setRequesterLock from there\r\n        res = c4fec.setRequesterLock(lock);\r\n        return res;\r\n    }\r\n\r\n    function setC4FContractStatus(address C4Fcontract, uint8 newStatus) public onlyOwner returns (uint8 s) {\r\n        // ensure this is a C4FEscrowContract initiated by C4F system\r\n        require(C4FEscrowContracts[C4Fcontract]);\r\n        C4FEscrow c4fec = C4FEscrow(C4Fcontract);\r\n        // call setStatus from there\r\n        s = c4fec.setStatus(newStatus);\r\n        return s;\r\n    }\r\n    \r\n    function arbitrateC4FContract(address C4Fcontract, uint8 percentSplit) public onlyOwner returns (bool success) {\r\n        // ensure this is a C4FEscrowContract initiated by C4F system\r\n        require(C4FEscrowContracts[C4Fcontract]);\r\n        C4FEscrow c4fec = C4FEscrow(C4Fcontract);\r\n        // call arbitration\r\n        if(!c4fec.arbitrateC4FContract(percentSplit)) revert();\r\n        contractArbitrated(C4Fcontract, percentSplit);\r\n        return true;\r\n    }\r\n\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Convert to C4Fs using salesprice and bonus period and forward Eth to owner\r\n    // ------------------------------------------------------------------------\r\n    function () public onlyDuringICO notPaused payable  {\r\n        // check bonus ratio\r\n        uint bonusratio = 100;\r\n        // check for second week bonus\r\n        if(now <= _bonusTime1) {\r\n            bonusratio = _bonusRatio1;    \r\n        }\r\n        // check for first week bonus\r\n        if(now <= _bonusTime2) {\r\n            bonusratio = _bonusRatio2;    \r\n        }\r\n        \r\n        // minimum contribution met ?\r\n        require (msg.value >= _minimumContribution);\r\n        \r\n        // send C4F tokens back to sender based on Ether received\r\n        if (msg.value > 0) {\r\n            \r\n            // check if whitelisted and sufficient contribution left (AML & KYC)\r\n            if(!(whitelisted_amount[msg.sender] >= msg.value)) revert();\r\n            // reduce remaining contribution limit\r\n            whitelisted_amount[msg.sender] = whitelisted_amount[msg.sender].sub(msg.value);\r\n            \r\n            // determine amount of C4Fs \r\n            uint256 token_amount = msg.value.mul(_salesprice);\r\n            token_amount = token_amount.mul(bonusratio);\r\n            token_amount = token_amount.div(100);\r\n            \r\n            uint256 new_total = _total_sold.add(token_amount);\r\n            // check if PreICO volume sold off \r\n            if(now <= _endOfPreICO){\r\n                // check if we are above the limit with this transfer, then bounce\r\n                if(new_total > _maxTokenSoldPreICO) revert();\r\n            }\r\n            \r\n            // check if exceeding total ICO sale tokens\r\n            if(new_total > _maxTokenSoldICO) revert();\r\n            \r\n            // transfer tokens from owner account to sender\r\n            if(!transferInternal(msg.sender, token_amount)) revert();\r\n            _total_sold = new_total;\r\n            // forward received ether to owner account\r\n            if (!owner.send(msg.value)) revert(); // also reverts the transfer.\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"ICOdate\",\"type\":\"uint256\"}],\"name\":\"setICOStart\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEscrowCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_arbitrationPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_bonusTime1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"C4Fcontract\",\"type\":\"address\"},{\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"setC4FContractStatus\",\"outputs\":[{\"name\":\"s\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_percentSoldInICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ind\",\"type\":\"uint256\"}],\"name\":\"getEscrowAddress\",\"outputs\":[{\"name\":\"esa\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ICOdate\",\"type\":\"uint256\"}],\"name\":\"setPreICOEnd\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"C4Fcontract\",\"type\":\"address\"},{\"name\":\"percentSplit\",\"type\":\"uint8\"}],\"name\":\"arbitrateC4FContract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"c4fes\",\"type\":\"address\"}],\"name\":\"isFavorEscrow\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"comm\",\"type\":\"uint256\"}],\"name\":\"setCommission\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ID\",\"type\":\"uint256\"},{\"name\":\"deadl\",\"type\":\"uint256\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"startFavorEscrow\",\"outputs\":[{\"name\":\"C4FFavorContractAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"arbitPct\",\"type\":\"uint8\"}],\"name\":\"setArbitrationPercentage\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"C4Fcontract\",\"type\":\"address\"},{\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"setC4FContractProvider\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getWhitelistLimit\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_crowdsalePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_percentSoldInPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ICOdate\",\"type\":\"uint256\"}],\"name\":\"setBonusDate1\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"C4Fcontract\",\"type\":\"address\"},{\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"setC4FContractProviderLock\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_maxTokenSoldICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_bonusRatio2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"C4Fcontract\",\"type\":\"address\"},{\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"setC4FContractRequesterLock\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_minimumContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_beginOfICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ICOdate\",\"type\":\"uint256\"}],\"name\":\"setICOEnd\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommissionTarget\",\"outputs\":[{\"name\":\"ct\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"whitelistAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_salesprice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_endOfICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_maxTokenSoldPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_escrowIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_total_sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_endOfPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_bonusRatio1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_commissionTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_bonusTime2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ct\",\"type\":\"address\"}],\"name\":\"setCommissionTarget\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferWithCommission\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_commission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"C4Fcontract\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setC4FContractOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"C4Fcontract\",\"type\":\"address\"},{\"name\":\"completed\",\"type\":\"bool\"}],\"name\":\"setC4FContractProviderCompleted\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeCrowdsale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ICOdate\",\"type\":\"uint256\"}],\"name\":\"setBonusDate2\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"newEscrowCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"starttime\",\"type\":\"uint256\"}],\"name\":\"ICOStartSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"ICOEndSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"PreICOEndSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bonustime\",\"type\":\"uint256\"}],\"name\":\"BonusTime1Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bonustime\",\"type\":\"uint256\"}],\"name\":\"BonusTime2Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"accountWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"crowdsalePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"resumed\",\"type\":\"bool\"}],\"name\":\"crowdsaleResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"commissionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"commissionTargetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"arbpercent\",\"type\":\"uint8\"}],\"name\":\"arbitrationPctSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"escrowcontract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"contractOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"C4Fcontract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"contractProviderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"C4Fcontract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"percentSplit\",\"type\":\"uint8\"}],\"name\":\"contractArbitrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"C4FToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1795543a9308e4681dc775fe63d70822c17a6eeb5d2dcfb49b22ba0d5749b1e7"}]}