{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// Code borrowed and modified from https://theethereum.wiki/w/index.php/ERC20_Token_Standard\r\n// Use is just an example for Cisco Live DEVNET class and is provided as is. \r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// ERC Token Standard #20 Interface\r\n\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\ncontract DEVNETCoin is ERC20Interface {\r\n    // add some function to uint to make it safe. \r\n    using SafeMath for uint;\r\n    // information about the coin.\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n    // people that own our coin.\r\n    uint16 userCount;\r\n    address[] public accounts;\r\n    mapping(address => uint256) balances;\r\n    // mapping of who can withdraw from who.\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    mapping(address => uint) pendingWithdrawals;\r\n    address public val;\r\n    address public tom;\r\n    address public chris;\r\n    address public roger;\r\n    address public bryan;\r\n    address public hank;\r\n\r\n    // Constructor when contract is created. \r\n    function DEVNETCoin(address _val, address _tom, address _chris, address _hank, address _roger, address _bryan) public {\r\n      name = \"DEVNET|Coin\";\r\n      symbol = \"DEV\";\r\n      decimals = 18;\r\n      _totalSupply = 24000000 * 10**uint(decimals);\r\n      val = _val;\r\n      tom = _tom;\r\n      chris = _chris;\r\n      hank = _hank;\r\n      bryan = _bryan;\r\n      roger = _roger;\r\n      balances[val] = _totalSupply / 12;\r\n      balances[tom] = _totalSupply / 12;\r\n      balances[chris] = _totalSupply / 12;\r\n      balances[hank] = _totalSupply / 12;\r\n      balances[bryan] = _totalSupply / 12;\r\n      balances[roger] = _totalSupply / 12;\r\n      accounts.push(val);\r\n      accounts.push(tom);\r\n      userCount = 2;\r\n      Transfer(address(0), val, _totalSupply / 12);\r\n      Transfer(address(0), tom, _totalSupply / 12);\r\n      Transfer(address(0), chris, _totalSupply / 12);\r\n      Transfer(address(0), hank, _totalSupply / 12);\r\n      Transfer(address(0), bryan, _totalSupply / 12);\r\n      Transfer(address(0), roger, _totalSupply / 12);\r\n      // 10,500,000,000,000\r\n    }\r\n\r\n    // get item count\r\n    function getAccountQuantity() public constant returns (uint count) {\r\n      return userCount;\r\n    }\r\n\r\n    // get the total supply \r\n    function totalSupply() public constant returns (uint) {\r\n      return _totalSupply - balances[address(0)];\r\n    }\r\n\r\n    // get the token balance for a token owner.\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n      return balances[tokenOwner];\r\n    }\r\n\r\n    // send tokens from one account to another address. \r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n      // notice we use the safemath here \r\n      //tokens = tokens;\r\n      balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n      balances[to] = balances[to].add(tokens);\r\n      Transfer(msg.sender, to, tokens);\r\n      return true;\r\n    }\r\n\r\n    // approve someone to be able to transfer tokens from your account. \r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n      allowed[msg.sender][spender] = tokens;\r\n      Approval(msg.sender, spender, tokens); \r\n      return true;\r\n    }\r\n   \r\n    // called by the person claiming the tokens.   \r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n      balances[from] = balances[from].sub(tokens);\r\n      allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n      balances[to] = balances[to].add(tokens);\r\n      Transfer(from, to, tokens);\r\n      return true;\r\n    }\r\n\r\n    // returns the amount of tokens approved by the owners that can be transferred to \r\n    // the spender's account. \r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n      return allowed[tokenOwner][spender];\r\n    }\r\n \r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n      allowed[msg.sender][spender] = tokens;\r\n      Approval(msg.sender, spender, tokens);\r\n      ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n      return true;\r\n    } \r\n\r\n   \r\n    function buyDEV() public payable {\r\n\r\n        uint tokensRemaining = _totalSupply;\r\n        uint tokensBought = 0;\r\n        require(_totalSupply > 0);\r\n        uint etherReceived = msg.value; \r\n        \r\n        if (tokensRemaining >= etherReceived * 100) {\r\n          tokensBought = etherReceived * 100;\r\n          tokensRemaining -= etherReceived;\r\n        } else {\r\n          tokensBought = tokensRemaining;\r\n          tokensRemaining = 0;\r\n        }\r\n        // make sure sender doesnt already exist.  If they don't, add new.  \r\n\r\n        if (balances[msg.sender] == 0) {\r\n          accounts.push(msg.sender);\r\n          userCount++;\r\n        }\r\n        \r\n        balances[msg.sender] = balances[msg.sender] + tokensBought;\r\n  \r\n      \r\n        Transfer(address(0), msg.sender, tokensBought);\r\n\r\n        pendingWithdrawals[val] += msg.value / 3;\r\n        pendingWithdrawals[chris] += msg.value / 3;\r\n        pendingWithdrawals[tom] += msg.value / 3;\r\n    } \r\n\r\n    // if people want to buy eth then we will send them tokens. \r\n    function () public payable {\r\n      buyDEV();\r\n    }\r\n\r\n    // give all them money to val or tom\r\n    function withdraw() public {\r\n      uint amount  = pendingWithdrawals[msg.sender];\r\n      pendingWithdrawals[msg.sender] = 0;\r\n      msg.sender.transfer(amount);\r\n    }\r\n\r\n    modifier usOnly() {\r\n      require(msg.sender == val || msg.sender == chris || msg.sender == tom);\r\n      _;\r\n    }\r\n    \r\n    function kill() public usOnly {\r\n      selfdestruct(val);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hank\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bryan\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roger\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"val\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyDEV\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chris\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tom\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccountQuantity\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_val\",\"type\":\"address\"},{\"name\":\"_tom\",\"type\":\"address\"},{\"name\":\"_chris\",\"type\":\"address\"},{\"name\":\"_hank\",\"type\":\"address\"},{\"name\":\"_roger\",\"type\":\"address\"},{\"name\":\"_bryan\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DEVNETCoin","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bfaceb2a712a9feeff6c42e7be0212f92b7f23dc0000000000000000000000000c64af3b7daa414ba8c8cb2b7b3c4be5ff8d0cc90000000000000000000000006a94094eb9f9918e4e47d44afc026de8c842a1b100000000000000000000000086fb68117dc31b4e09551e3a1f0dcabaeeb46f240000000000000000000000003cb8e4f1b1676eb530d4cf44972e90b533cb93f80000000000000000000000003ba601155491e3b62f4e44f0bad0f4446320dd26","Library":"","SwarmSource":"bzzr://783c644f30f46e37e879beea26c86ae39eb1885a9f5130aba51ffb7db0bd3d34"}]}