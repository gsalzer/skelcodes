{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * This is the official Ethbet Token smart contract (EBET) - https://ethbet.io/\r\n */\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title EthbetToken\r\n */\r\ncontract EthbetToken is StandardToken {\r\n\r\n  string public constant name = \"Ethbet\";\r\n  string public constant symbol = \"EBET\";\r\n  uint8 public constant decimals = 2; // only two deciminals, token cannot be divided past 1/100th\r\n\r\n  uint256 public constant INITIAL_SUPPLY = 1000000000; // 10 million + 2 decimals\r\n\r\n  /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens.\r\n   */\r\n  function EthbetToken() {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n}\r\n\r\n\r\n// Import newer SafeMath version under new name to avoid conflict with the version included in EthbetToken\r\n\r\n// SafeMath Library https://github.com/OpenZeppelin/zeppelin-solidity/blob/49b42e86963df7192e7024e0e5bd30fa9d7ccbef/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath2 {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ethbet {\r\n  using SafeMath2 for uint256;\r\n\r\n  /*\r\n  * Events\r\n  */\r\n\r\n  event Deposit(address indexed user, uint amount, uint balance);\r\n\r\n  event Withdraw(address indexed user, uint amount, uint balance);\r\n\r\n  event LockedBalance(address indexed user, uint amount);\r\n\r\n  event UnlockedBalance(address indexed user, uint amount);\r\n\r\n  event ExecutedBet(address indexed winner, address indexed loser, uint amount);\r\n\r\n  event RelayAddressChanged(address relay);\r\n\r\n\r\n  /*\r\n   * Storage\r\n   */\r\n  address public relay;\r\n\r\n  EthbetToken public token;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  mapping(address => uint256) lockedBalances;\r\n\r\n  /*\r\n  * Modifiers\r\n  */\r\n\r\n  modifier isRelay() {\r\n    require(msg.sender == relay);\r\n    _;\r\n  }\r\n\r\n  /*\r\n  * Public functions\r\n  */\r\n\r\n  /**\r\n  * @dev Contract constructor\r\n  * @param _relay Relay Address\r\n  * @param _tokenAddress Ethbet Token Address\r\n  */\r\n  function Ethbet(address _relay, address _tokenAddress) public {\r\n    // make sure relay address set\r\n    require(_relay != address(0));\r\n\r\n    relay = _relay;\r\n    token = EthbetToken(_tokenAddress);\r\n  }\r\n\r\n  /**\r\n  * @dev set relay address\r\n  * @param _relay Relay Address\r\n  */\r\n  function setRelay(address _relay) public isRelay {\r\n    // make sure address not null\r\n    require(_relay != address(0));\r\n\r\n    relay = _relay;\r\n\r\n    RelayAddressChanged(_relay);\r\n  }\r\n\r\n  /**\r\n   * @dev deposit EBET tokens into the contract\r\n   * @param _amount Amount to deposit\r\n   */\r\n  function deposit(uint _amount) public {\r\n    require(_amount > 0);\r\n\r\n    // token.approve needs to be called beforehand\r\n    // transfer tokens from the user to the contract\r\n    require(token.transferFrom(msg.sender, this, _amount));\r\n\r\n    // add the tokens to the user's balance\r\n    balances[msg.sender] = balances[msg.sender].add(_amount);\r\n\r\n    Deposit(msg.sender, _amount, balances[msg.sender]);\r\n  }\r\n\r\n  /**\r\n   * @dev withdraw EBET tokens from the contract\r\n   * @param _amount Amount to withdraw\r\n   */\r\n  function withdraw(uint _amount) public {\r\n    require(_amount > 0);\r\n    require(balances[msg.sender] >= _amount);\r\n\r\n    // subtract the tokens from the user's balance\r\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n\r\n    // transfer tokens from the contract to the user\r\n    require(token.transfer(msg.sender, _amount));\r\n\r\n    Withdraw(msg.sender, _amount, balances[msg.sender]);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Lock user balance to be used for bet\r\n   * @param _userAddress User Address\r\n   * @param _amount Amount to be locked\r\n   */\r\n  function lockBalance(address _userAddress, uint _amount) public isRelay {\r\n    require(_amount > 0);\r\n    require(balances[_userAddress] >= _amount);\r\n\r\n    // subtract the tokens from the user's balance\r\n    balances[_userAddress] = balances[_userAddress].sub(_amount);\r\n\r\n    // add the tokens to the user's locked balance\r\n    lockedBalances[_userAddress] = lockedBalances[_userAddress].add(_amount);\r\n\r\n    LockedBalance(_userAddress, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Unlock user balance\r\n   * @param _userAddress User Address\r\n   * @param _amount Amount to be locked\r\n   */\r\n  function unlockBalance(address _userAddress, uint _amount) public isRelay {\r\n    require(_amount > 0);\r\n    require(lockedBalances[_userAddress] >= _amount);\r\n\r\n    // subtract the tokens from the user's locked balance\r\n    lockedBalances[_userAddress] = lockedBalances[_userAddress].sub(_amount);\r\n\r\n    // add the tokens to the user's  balance\r\n    balances[_userAddress] = balances[_userAddress].add(_amount);\r\n\r\n    UnlockedBalance(_userAddress, _amount);\r\n  }\r\n\r\n  /**\r\n  * @dev Get user balance\r\n  * @param _userAddress User Address\r\n  */\r\n  function balanceOf(address _userAddress) constant public returns (uint) {\r\n    return balances[_userAddress];\r\n  }\r\n\r\n  /**\r\n  * @dev Get user locked balance\r\n  * @param _userAddress User Address\r\n  */\r\n  function lockedBalanceOf(address _userAddress) constant public returns (uint) {\r\n    return lockedBalances[_userAddress];\r\n  }\r\n\r\n  /**\r\n   * @dev Execute bet\r\n   * @param _maker Maker Address\r\n   * @param _caller Caller Address\r\n   * @param _makerWon Did the maker win\r\n   * @param _amount amount\r\n   */\r\n  function executeBet(address _maker, address _caller, bool _makerWon, uint _amount) isRelay public {\r\n    //The caller must have enough locked balance\r\n    require(lockedBalances[_caller] >= _amount);\r\n\r\n    //The maker must have enough locked balance\r\n    require(lockedBalances[_maker] >= _amount);\r\n\r\n    // unlock maker balance\r\n    unlockBalance(_caller, _amount);\r\n\r\n    // unlock maker balance\r\n    unlockBalance(_maker, _amount);\r\n\r\n    var winner = _makerWon ? _maker : _caller;\r\n    var loser = _makerWon ? _caller : _maker;\r\n\r\n    // add the tokens to the winner's balance\r\n    balances[winner] = balances[winner].add(_amount);\r\n    // remove the tokens from the loser's  balance\r\n    balances[loser] = balances[loser].sub(_amount);\r\n\r\n    //Log the event\r\n    ExecutedBet(winner, loser, _amount);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlockBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"},{\"name\":\"_caller\",\"type\":\"address\"},{\"name\":\"_makerWon\",\"type\":\"bool\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"executeBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"relay\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"setRelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_relay\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"loser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExecutedBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"relay\",\"type\":\"address\"}],\"name\":\"RelayAddressChanged\",\"type\":\"event\"}]","ContractName":"Ethbet","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ae91c1e00790e87890802004fe41380b3fa343fa0000000000000000000000007d5edcd23daa3fb94317d32ae253ee1af08ba14d","Library":"","SwarmSource":"bzzr://6ae8a3e02507bed9fa11be66c20f0d27b6a3c45efea294c2a17228503b4bf1a3"}]}