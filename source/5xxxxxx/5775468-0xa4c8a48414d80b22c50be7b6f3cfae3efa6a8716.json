{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract PPNAirdrop {\r\n    /**\r\n    * @dev Air drop Public Variables\r\n    */\r\n    address                         public admin;\r\n    PolicyPalNetworkToken           public token;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev   Token Contract Modifier\r\n    * Check if only admin\r\n    *\r\n    */\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev   Token Contract Modifier\r\n    * Check if valid address\r\n    *\r\n    * @param _addr - The address to check\r\n    *\r\n    */\r\n    modifier validAddress(address _addr) {\r\n        require(_addr != address(0x0));\r\n        require(_addr != address(this));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev   Token Contract Modifier\r\n    * Check if the batch transfer amount is\r\n    * equal or more than balance\r\n    * (For single batch amount)\r\n    *\r\n    * @param _recipients - The recipients to send\r\n    * @param _amount - The amount to send\r\n    *\r\n    */\r\n    modifier validBalance(address[] _recipients, uint256 _amount) {\r\n        // Assert balance\r\n        uint256 balance = token.balanceOf(this);\r\n        require(balance > 0);\r\n        require(balance >= _recipients.length.mul(_amount));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev   Token Contract Modifier\r\n    * Check if the batch transfer amount is\r\n    * equal or more than balance\r\n    * (For multiple batch amounts)\r\n    *\r\n    * @param _recipients - The recipients to send\r\n    * @param _amounts - The amounts to send\r\n    *\r\n    */\r\n    modifier validBalanceMultiple(address[] _recipients, uint256[] _amounts) {\r\n        // Assert balance\r\n        uint256 balance = token.balanceOf(this);\r\n        require(balance > 0);\r\n\r\n        uint256 totalAmount;\r\n        for (uint256 i = 0 ; i < _recipients.length ; i++) {\r\n            totalAmount = totalAmount.add(_amounts[i]);\r\n        }\r\n        require(balance >= totalAmount);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Airdrop Contract Constructor\r\n    * @param _token - PPN Token address\r\n    * @param _adminAddr - Address of the Admin\r\n    */\r\n    function PPNAirdrop(\r\n        PolicyPalNetworkToken _token, \r\n        address _adminAddr\r\n    )\r\n        public\r\n        validAddress(_adminAddr)\r\n        validAddress(_token)\r\n    {\r\n        // Assign addresses\r\n        admin = _adminAddr;\r\n        token = _token;\r\n    }\r\n    \r\n    /**\r\n     * @dev TokenDrop Event\r\n     */\r\n    event TokenDrop(address _receiver, uint _amount);\r\n\r\n    /**\r\n     * @dev batch Air Drop by single amount\r\n     * @param _recipients - Address of the recipient\r\n     * @param _amount - Amount to transfer used in this batch\r\n     */\r\n    function batchSingleAmount(address[] _recipients, uint256 _amount) external\r\n        onlyAdmin\r\n        validBalance(_recipients, _amount)\r\n    {\r\n        // Loop through all recipients\r\n        for (uint256 i = 0 ; i < _recipients.length ; i++) {\r\n            address recipient = _recipients[i];\r\n\r\n            // Transfer amount\r\n            assert(token.transfer(recipient, _amount));\r\n\r\n            // TokenDrop event\r\n            TokenDrop(recipient, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev batch Air Drop by multiple amount\r\n     * @param _recipients - Address of the recipient\r\n     * @param _amounts - Amount to transfer used in this batch\r\n     */\r\n    function batchMultipleAmount(address[] _recipients, uint256[] _amounts) external\r\n        onlyAdmin\r\n        validBalanceMultiple(_recipients, _amounts)\r\n    {\r\n        // Loop through all recipients\r\n        for (uint256 i = 0 ; i < _recipients.length ; i++) {\r\n            address recipient = _recipients[i];\r\n            uint256 amount = _amounts[i];\r\n\r\n            // Transfer amount\r\n            assert(token.transfer(recipient, amount));\r\n\r\n            // TokenDrop event\r\n            TokenDrop(recipient, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Air drop single amount\r\n     * @param _recipient - Address of the recipient\r\n     * @param _amount - Amount to drain\r\n     */\r\n    function airdropSingleAmount(address _recipient, uint256 _amount) external\r\n      onlyAdmin\r\n    {\r\n        assert(_amount <= token.balanceOf(this));\r\n        assert(token.transfer(_recipient, _amount));\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract PolicyPalNetworkToken is StandardToken, BurnableToken, Ownable {\r\n    /**\r\n    * @dev Token Contract Constants\r\n    */\r\n    string    public constant name     = \"PolicyPal Network Token\";\r\n    string    public constant symbol   = \"PAL\";\r\n    uint8     public constant decimals = 18;\r\n\r\n    /**\r\n    * @dev Token Contract Public Variables\r\n    */\r\n    address public  tokenSaleContract;\r\n    bool    public  isTokenTransferable = false;\r\n\r\n\r\n    /**\r\n    * @dev   Token Contract Modifier\r\n    *\r\n    * Check if a transfer is allowed\r\n    * Transfers are restricted to token creator & owner(admin) during token sale duration\r\n    * Transfers after token sale is limited by `isTokenTransferable` toggle\r\n    *\r\n    */\r\n    modifier onlyWhenTransferAllowed() {\r\n        require(isTokenTransferable || msg.sender == owner || msg.sender == tokenSaleContract);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Token Contract Modifier\r\n     * @param _to - Address to check if valid\r\n     *\r\n     *  Check if an address is valid\r\n     *  A valid address is as follows,\r\n     *    1. Not zero address\r\n     *    2. Not token address\r\n     *\r\n     */\r\n    modifier isValidDestination(address _to) {\r\n        require(_to != address(0x0));\r\n        require(_to != address(this));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Enable Transfers (Only Owner)\r\n     */\r\n    function toggleTransferable(bool _toggle) external\r\n        onlyOwner\r\n    {\r\n        isTokenTransferable = _toggle;\r\n    }\r\n    \r\n\r\n    /**\r\n    * @dev Token Contract Constructor\r\n    * @param _adminAddr - Address of the Admin\r\n    */\r\n    function PolicyPalNetworkToken(\r\n        uint _tokenTotalAmount,\r\n        address _adminAddr\r\n    ) \r\n        public\r\n        isValidDestination(_adminAddr)\r\n    {\r\n        require(_tokenTotalAmount > 0);\r\n\r\n        totalSupply_ = _tokenTotalAmount;\r\n\r\n        // Mint all token\r\n        balances[msg.sender] = _tokenTotalAmount;\r\n        Transfer(address(0x0), msg.sender, _tokenTotalAmount);\r\n\r\n        // Assign token sale contract to creator\r\n        tokenSaleContract = msg.sender;\r\n\r\n        // Transfer contract ownership to admin\r\n        transferOwnership(_adminAddr);\r\n    }\r\n\r\n    /**\r\n    * @dev Token Contract transfer\r\n    * @param _to - Address to transfer to\r\n    * @param _value - Value to transfer\r\n    * @return bool - Result of transfer\r\n    * \"Overloaded\" Function of ERC20Basic's transfer\r\n    *\r\n    */\r\n    function transfer(address _to, uint256 _value) public\r\n        onlyWhenTransferAllowed\r\n        isValidDestination(_to)\r\n        returns (bool)\r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Token Contract transferFrom\r\n    * @param _from - Address to transfer from\r\n    * @param _to - Address to transfer to\r\n    * @param _value - Value to transfer\r\n    * @return bool - Result of transferFrom\r\n    *\r\n    * \"Overloaded\" Function of ERC20's transferFrom\r\n    * Added with modifiers,\r\n    *    1. onlyWhenTransferAllowed\r\n    *    2. isValidDestination\r\n    *\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public\r\n        onlyWhenTransferAllowed\r\n        isValidDestination(_to)\r\n        returns (bool)\r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Token Contract burn\r\n    * @param _value - Value to burn\r\n    * \"Overloaded\" Function of BurnableToken's burn\r\n    */\r\n    function burn(uint256 _value)\r\n        public\r\n    {\r\n        super.burn(_value);\r\n        Transfer(msg.sender, address(0x0), _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Token Contract Emergency Drain\r\n    * @param _token - Token to drain\r\n    * @param _amount - Amount to drain\r\n    */\r\n    function emergencyERC20Drain(ERC20 _token, uint256 _amount) public\r\n        onlyOwner\r\n    {\r\n        _token.transfer(owner, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"airdropSingleAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchMultipleAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"batchSingleAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_adminAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenDrop\",\"type\":\"event\"}]","ContractName":"PPNAirdrop","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fedae5642668f8636a11987ff386bfd215f942ee0000000000000000000000003aac1359e01e8ab19b74a27dd52f2fb0ca03fab4","Library":"","SwarmSource":"bzzr://4104589ccb5427990b5c78fba8998a0347666d58938d0bd62ed40e4ede674f5b"}]}