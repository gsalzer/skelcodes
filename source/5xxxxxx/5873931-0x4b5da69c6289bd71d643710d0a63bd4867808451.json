{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n/**\r\n* @dev Multiplies two numbers, throws on overflow.\r\n*/\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n    /**\r\n    * @title Ownable\r\n    * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n    * functions, this simplifies the implementation of \"user permissions\".\r\n    */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Lockable is Ownable {\r\n    uint256 public creationTime;\r\n    bool public tokenTransferLocker;\r\n    mapping(address => bool) lockaddress;\r\n\r\n    event Locked(address lockaddress);\r\n    event Unlocked(address lockaddress);\r\n    event TokenTransferLocker(bool _setto);\r\n\r\n    // if Token transfer\r\n    modifier isTokenTransfer {\r\n        // only contract holder can send token during locked period\r\n        if(msg.sender != owner) {\r\n            // if token transfer is not allow\r\n            require(!tokenTransferLocker);\r\n            if(lockaddress[msg.sender]){\r\n                revert();\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    // This modifier check whether the contract should be in a locked\r\n    // or unlocked state, then acts and updates accordingly if\r\n    // necessary\r\n    modifier checkLock {\r\n        if (lockaddress[msg.sender]) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        creationTime = now;\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    function isTokenTransferLocked()\r\n    external\r\n    view\r\n    returns (bool)\r\n    {\r\n        return tokenTransferLocker;\r\n    }\r\n\r\n    function enableTokenTransfer()\r\n    external\r\n    onlyOwner\r\n    {\r\n        delete tokenTransferLocker;\r\n        emit TokenTransferLocker(false);\r\n    }\r\n\r\n    function disableTokenTransfer()\r\n    external\r\n    onlyOwner\r\n    {\r\n        tokenTransferLocker = true;\r\n        emit TokenTransferLocker(true);\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) view external returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract CoolPandaToken is ERC20, Lockable  {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public decimals = 18;\r\n    address public fundWallet = 0x071961b88F848D09C3d988E8814F38cbAE755C44;\r\n    uint256 public tokenPrice;\r\n\r\n    function balanceOf(address _addr) external view returns (uint256) {\r\n        return balances[_addr];\r\n    }\r\n\r\n    function allowance(address _from, address _spender) external view returns (uint256) {\r\n        return allowed[_from][_spender];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n    isTokenTransfer\r\n    public\r\n    returns (bool success) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value)\r\n    isTokenTransfer\r\n    external\r\n    returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n    isTokenTransfer\r\n    public\r\n    returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        isTokenTransfer\r\n        external\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function setFundWallet(address _newAddr) external onlyOwner {\r\n        require(_newAddr != address(0));\r\n        fundWallet = _newAddr;\r\n    }\r\n\r\n    function transferEth() onlyOwner external {\r\n        fundWallet.transfer(address(this).balance);\r\n    }\r\n\r\n    function setTokenPrice(uint256 _newBuyPrice) external onlyOwner {\r\n        tokenPrice = _newBuyPrice;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract PaoToken is CoolPandaToken {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"PAO Token\";\r\n    string public symbol = \"PAO\";\r\n    uint fundRatio = 6;\r\n    uint256 public minBuyETH = 50;\r\n\r\n    JPYC public jpyc;                       //JPYC Address\r\n    uint256 public jypcBonus = 40000;       \r\n\r\n    event JypcBonus(uint256 paoAmount, uint256 jpycAmount);\r\n\r\n    // constructor\r\n    constructor() public {\r\n        totalSupply = 10000000000 * 10 ** uint256(decimals);\r\n        tokenPrice = 50000;\r\n        balances[fundWallet] = totalSupply * fundRatio / 10;\r\n        balances[address(this)] = totalSupply.sub(balances[fundWallet]);\r\n    }\r\n\r\n    // @notice Buy tokens from contract by sending ether\r\n    function () payable public {\r\n        if(fundWallet != msg.sender){\r\n            require (msg.value >= (minBuyETH * 10 ** uint256(decimals)));   // Check if minimum amount \r\n            uint256 amount = msg.value.mul(tokenPrice);                     // calculates the amount\r\n            _buyToken(msg.sender, amount);                                  // makes the transfers\r\n            fundWallet.transfer(msg.value);                              // send ether to the fundWallet\r\n        }\r\n    }\r\n\r\n    function _buyToken(address _to, uint256 _value) isTokenTransfer internal {\r\n        address _from = address(this);\r\n        require (_to != 0x0);                                                   // Prevent transfer to 0x0 address.\r\n        require (balances[_from] >= _value);                                    // Check if the sender has enough\r\n        require (balances[_to].add(_value) >= balances[_to]);                   // Check for overflows\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        //give bonus consume token\r\n        uint256 _jpycAmount = _getJYPCBonus();\r\n        jpyc.giveBonus(_to, _jpycAmount);\r\n\r\n        emit JypcBonus(_value,_jpycAmount);\r\n    }\r\n\r\n    function _getJYPCBonus() internal view returns (uint256 amount){\r\n        return msg.value.mul(jypcBonus); \r\n    }  \r\n\r\n    function setMinBuyEth(uint256 _amount) external onlyOwner{\r\n        minBuyETH = _amount;\r\n    }\r\n\r\n    function setJypcBonus(uint256 _amount) external onlyOwner{\r\n        jypcBonus = _amount;\r\n    }\r\n\r\n    function transferToken() onlyOwner external {\r\n        address _from = address(this);\r\n        uint256 _total = balances[_from];\r\n        balances[_from] = balances[_from].sub(_total);\r\n        balances[fundWallet] = balances[fundWallet].add(_total);\r\n    }\r\n\r\n    function setJpycContactAddress(address _tokenAddress) external onlyOwner {\r\n        jpyc = JPYC(_tokenAddress);\r\n    }\r\n}\r\n\r\ncontract JPYC is CoolPandaToken {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"Japan Yen Coin\";\r\n    uint256 _initialSupply = 10000000000 * 10 ** uint256(decimals);\r\n    string public symbol = \"JPYC\";\r\n    address public paoContactAddress;\r\n\r\n    event Issue(uint256 amount);\r\n\r\n    // constructor\r\n    constructor() public {\r\n        tokenPrice = 47000;           //JPY to ETH (rough number)\r\n        totalSupply = _initialSupply;\r\n        balances[fundWallet] = _initialSupply;\r\n    }\r\n\r\n    function () payable public {\r\n        uint amount = msg.value.mul(tokenPrice);             // calculates the amount\r\n        _giveToken(msg.sender, amount);                          // makes the transfers\r\n        fundWallet.transfer(msg.value);                         // send ether to the public collection wallet\r\n    }\r\n\r\n    function _giveToken(address _to, uint256 _value) isTokenTransfer internal {\r\n        require (_to != 0x0);                                       // Prevent transfer to 0x0 address.\r\n        require(totalSupply.add(_value) >= totalSupply);\r\n        require (balances[_to].add(_value) >= balances[_to]);       // Check for overflows\r\n\r\n        totalSupply = totalSupply.add(_value);\r\n        balances[_to] = balances[_to].add(_value);                  // Add the same to the recipient\r\n        emit Transfer(address(this), _to, _value);\r\n    }\r\n\r\n    function issue(uint256 amount) external onlyOwner {\r\n        _giveToken(fundWallet, amount);\r\n\r\n        emit Issue(amount);\r\n    }\r\n\r\n    function setPaoContactAddress(address _newAddr) external onlyOwner {\r\n        require(_newAddr != address(0));\r\n        paoContactAddress = _newAddr;\r\n    }\r\n\r\n    function giveBonus(address _to, uint256 _value)\r\n    isTokenTransfer\r\n    external\r\n    returns (bool success) {\r\n        require(_to != address(0));\r\n        if(msg.sender == paoContactAddress){\r\n            _giveToken(_to,_value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setJypcBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jypcBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBuyETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jpyc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setFundWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTokenTransferLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinBuyEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTransferLocker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setJpycContactAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paoAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jpycAmount\",\"type\":\"uint256\"}],\"name\":\"JypcBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lockaddress\",\"type\":\"address\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lockaddress\",\"type\":\"address\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_setto\",\"type\":\"bool\"}],\"name\":\"TokenTransferLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PaoToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bcd6fbbf4a67c03dad409de9cd7adddddb58dbcaed72f36ef733097c8f66ac9d"}]}