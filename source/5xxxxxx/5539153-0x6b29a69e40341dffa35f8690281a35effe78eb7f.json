{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  \r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  \r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n  \r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n  \r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  \r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    \r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = true;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused\r\n   * or when the owner is invoking the function.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused || msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n  \r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n  \r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n  \r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n  \r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract LMDA is PausableToken {\r\n    \r\n    string public  name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n\r\n    /**\r\n     * Constructor initializes the name, symbol, decimals and total \r\n     * supply of the token. The owner of the contract which is initially \r\n     * the ICO contract will receive the entire total supply. \r\n     * */\r\n    function LMDA() public {\r\n        name = \"LaMonedaCoin\";\r\n        symbol = \"LMDA\";\r\n        decimals = 18;\r\n        totalSupply = 500000000e18;\r\n        \r\n        balances[owner] = totalSupply;\r\n        Transfer(address(this), owner, totalSupply);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract ICO is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    event AidropInvoked();\r\n    event MainSaleActivated();\r\n    event TokenPurchased(address recipient, uint256 tokens);\r\n    event DeadlineExtended(uint256 daysExtended);\r\n    event DeadlineShortened(uint256 daysShortenedBy);\r\n    event OffChainPurchaseMade(address recipient, uint256 tokensBought);\r\n    event TokenPriceChanged(string stage, uint256 newTokenPrice);\r\n    event ExchangeRateChanged(string stage, uint256 newRate);\r\n    event BonusChanged(string stage, uint256 newBonus);\r\n    event TokensWithdrawn(address to, uint256 LMDA); \r\n    event TokensUnpaused();\r\n    event ICOPaused(uint256 timeStamp);\r\n    event ICOUnpaused(uint256 timeStamp);  \r\n    \r\n    address public receiverOne;\r\n    address public receiverTwo;\r\n    address public receiverThree;\r\n    address public reserveAddress;\r\n    address public teamAddress;\r\n    \r\n    uint256 public endTime;\r\n    uint256 public tokenPriceForPreICO;\r\n    uint256 public rateForPreICO;\r\n    uint256 public tokenPriceForMainICO;\r\n    uint256 public rateForMainICO;\r\n    uint256 public tokenCapForPreICO;\r\n    uint256 public tokenCapForMainICO;\r\n    uint256 public bonusForPreICO;\r\n    uint256 public bonusForMainICO;\r\n    uint256 public tokensSold;\r\n    uint256 public timePaused;\r\n    bool public icoPaused;\r\n    \r\n    \r\n    enum StateOfICO {\r\n        PRE,\r\n        MAIN\r\n    }\r\n    \r\n    StateOfICO public stateOfICO;\r\n    \r\n    LMDA public lmda;\r\n\r\n    mapping (address => uint256) public investmentOf;\r\n    \r\n    \r\n    /**\r\n     * Functions with this modifier can only be called when the ICO \r\n     * is not paused.\r\n     * */\r\n    modifier whenNotPaused {\r\n        require(!icoPaused);\r\n        _;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Constructor functions creates a new instance of the LMDA token \r\n     * and automatically distributes tokens to the reserve and team \r\n     * addresses. The constructor also initializes all of the state \r\n     * variables of the ICO contract. \r\n     * */\r\n    function ICO() public {\r\n        lmda = new LMDA();\r\n        receiverOne = 0x43adebFC525FEcf9b2E91a4931E4a003a1F0d959;   //Pre ICO\r\n        receiverTwo = 0xB447292181296B8c7F421F1182be20640dc8Bb05;   //Pre ICO\r\n        receiverThree = 0x3f68b06E7C0E87828647Dbba0b5beAef3822b7Db; //Main ICO\r\n        reserveAddress = 0x7d05F660124B641b74b146E9aDA60D7D836dcCf5;\r\n        teamAddress = 0xAD942E5085Af6a7A4C31f17ac687F8d5d7C0225C;\r\n        lmda.transfer(reserveAddress, 90000000e18);\r\n        lmda.transfer(teamAddress, 35500000e18);\r\n        stateOfICO = StateOfICO.PRE;\r\n        endTime = now.add(21 days);\r\n        tokenPriceForPreICO = 0.00005 ether;\r\n        rateForPreICO = 20000;\r\n        tokenPriceForMainICO = 0.00007 ether;\r\n        rateForMainICO = 14285; // should be 14,285.7143 \r\n        tokenCapForPreICO = 144000000e18;\r\n        tokenCapForMainICO = 374500000e18; \r\n        bonusForPreICO = 20;\r\n        bonusForMainICO = 15;\r\n        tokensSold = 0;\r\n        icoPaused= false;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * This function allows the owner of the contract to airdrop LMDA tokens \r\n     * to a list of addresses, so long as a list of values is also provided.\r\n     * \r\n     * @param _addrs The list of recipient addresses\r\n     * @param _values The number of tokens each address will receive \r\n     * */\r\n    function airdrop(address[] _addrs, uint256[] _values) public onlyOwner {\r\n        require(lmda.balanceOf(address(this)) >= getSumOfValues(_values));\r\n        require(_addrs.length <= 100 && _addrs.length == _values.length);\r\n        for(uint i = 0; i < _addrs.length; i++) {\r\n            lmda.transfer(_addrs[i], _values[i]);\r\n        }\r\n        AidropInvoked();\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Function is called internally by the airdrop() function to ensure that \r\n     * there are enough tokens remaining to execute the airdrop. \r\n     * \r\n     * @param _values The list of values representing the tokens to be sent\r\n     * @return Returns the sum of all the values\r\n     * */\r\n    function getSumOfValues(uint256[] _values) internal pure returns(uint256 sum) {\r\n        sum = 0;\r\n        for(uint i = 0; i < _values.length; i++) {\r\n            sum = sum.add(_values[i]);\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Function allows the owner to activate the main sale.\r\n     * */\r\n    function activateMainSale() public onlyOwner whenNotPaused {\r\n        require(now >= endTime || tokensSold >= tokenCapForPreICO);\r\n        stateOfICO = StateOfICO.MAIN;\r\n        endTime = now.add(49 days);\r\n        MainSaleActivated();\r\n    }\r\n\r\n\r\n    /**\r\n     * Fallback function invokes the buyToknes() method when ETH is recieved \r\n     * to enable the automatic distribution of tokens to investors.\r\n     * */\r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows investors to buy tokens for themselves or others by explicitly \r\n     * invoking the function using the ABI / JSON Interface of the contract.\r\n     * \r\n     * @param _addr The address of the recipient\r\n     * */\r\n    function buyTokens(address _addr) public payable whenNotPaused {\r\n        require(now <= endTime && _addr != 0x0);\r\n        require(lmda.balanceOf(address(this)) > 0);\r\n        if(stateOfICO == StateOfICO.PRE && tokensSold >= tokenCapForPreICO) {\r\n            revert();\r\n        } else if(stateOfICO == StateOfICO.MAIN && tokensSold >= tokenCapForMainICO) {\r\n            revert();\r\n        }\r\n        uint256 toTransfer = msg.value.mul(getRate().mul(getBonus())).div(100).add(getRate());\r\n        lmda.transfer(_addr, toTransfer);\r\n        tokensSold = tokensSold.add(toTransfer);\r\n        investmentOf[msg.sender] = investmentOf[msg.sender].add(msg.value);\r\n        TokenPurchased(_addr, toTransfer);\r\n        forwardFunds();\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to send tokens to investors who paid with other currencies.\r\n     * \r\n     * @param _recipient The address of the receiver \r\n     * @param _value The total amount of tokens to be sent\r\n     * */\r\n    function processOffChainPurchase(address _recipient, uint256 _value) public onlyOwner {\r\n        require(lmda.balanceOf(address(this)) >= _value);\r\n        require(_value > 0 && _recipient != 0x0);\r\n        lmda.transfer(_recipient, _value);\r\n        tokensSold = tokensSold.add(_value);\r\n        OffChainPurchaseMade(_recipient, _value);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Function is called internally by the buyTokens() function in order to send \r\n     * ETH to owners of the ICO automatically. \r\n     * */\r\n    function forwardFunds() internal {\r\n        if(stateOfICO == StateOfICO.PRE) {\r\n            receiverOne.transfer(msg.value.div(2));\r\n            receiverTwo.transfer(msg.value.div(2));\r\n        } else {\r\n            receiverThree.transfer(msg.value);\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to extend the deadline of the current ICO phase.\r\n     * \r\n     * @param _daysToExtend The number of days to extend the deadline by.\r\n     * */\r\n    function extendDeadline(uint256 _daysToExtend) public onlyOwner {\r\n        endTime = endTime.add(_daysToExtend.mul(1 days));\r\n        DeadlineExtended(_daysToExtend);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to shorten the deadline of the current ICO phase.\r\n     * \r\n     * @param _daysToShortenBy The number of days to shorten the deadline by.\r\n     * */\r\n    function shortenDeadline(uint256 _daysToShortenBy) public onlyOwner {\r\n        if(now.sub(_daysToShortenBy.mul(1 days)) < endTime) {\r\n            endTime = now;\r\n        }\r\n        endTime = endTime.sub(_daysToShortenBy.mul(1 days));\r\n        DeadlineShortened(_daysToShortenBy);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to change the token price of the current phase. \r\n     * This function will automatically calculate the new exchange rate. \r\n     * \r\n     * @param _newTokenPrice The new price of the token.\r\n     * */\r\n    function changeTokenPrice(uint256 _newTokenPrice) public onlyOwner {\r\n        require(_newTokenPrice > 0);\r\n        if(stateOfICO == StateOfICO.PRE) {\r\n            if(tokenPriceForPreICO == _newTokenPrice) { revert(); } \r\n            tokenPriceForPreICO = _newTokenPrice;\r\n            rateForPreICO = uint256(1e18).div(tokenPriceForPreICO);\r\n            TokenPriceChanged(\"Pre ICO\", _newTokenPrice);\r\n        } else {\r\n            if(tokenPriceForMainICO == _newTokenPrice) { revert(); } \r\n            tokenPriceForMainICO = _newTokenPrice;\r\n            rateForMainICO = uint256(1e18).div(tokenPriceForMainICO);\r\n            TokenPriceChanged(\"Main ICO\", _newTokenPrice);\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to change the exchange rate of the current phase.\r\n     * This function will automatically calculate the new token price. \r\n     * \r\n     * @param _newRate The new exchange rate.\r\n     * */\r\n    function changeRateOfToken(uint256 _newRate) public onlyOwner {\r\n        require(_newRate > 0);\r\n        if(stateOfICO == StateOfICO.PRE) {\r\n            if(rateForPreICO == _newRate) { revert(); }\r\n            rateForPreICO = _newRate;\r\n            tokenPriceForPreICO = uint256(1e18).div(rateForPreICO);\r\n            ExchangeRateChanged(\"Pre ICO\", _newRate);\r\n        } else {\r\n            if(rateForMainICO == _newRate) { revert(); }\r\n            rateForMainICO = _newRate;\r\n            rateForMainICO = uint256(1e18).div(rateForMainICO);\r\n            ExchangeRateChanged(\"Main ICO\", _newRate);\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to change the bonus of the current phase.\r\n     * \r\n     * @param _newBonus The new bonus percentage.\r\n     * */\r\n    function changeBonus(uint256 _newBonus) public onlyOwner {\r\n        if(stateOfICO == StateOfICO.PRE) {\r\n            if(bonusForPreICO == _newBonus) { revert(); }\r\n            bonusForPreICO = _newBonus;\r\n            BonusChanged(\"Pre ICO\", _newBonus);\r\n        } else {\r\n            if(bonusForMainICO == _newBonus) { revert(); }\r\n            bonusForMainICO = _newBonus;\r\n            BonusChanged(\"Main ICO\", _newBonus);\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to withdraw all unsold tokens to his wallet. \r\n     * */\r\n    function withdrawUnsoldTokens() public onlyOwner {\r\n        TokensWithdrawn(owner, lmda.balanceOf(address(this)));\r\n        lmda.transfer(owner, lmda.balanceOf(address(this)));\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to unpause the LMDA token.\r\n     * */\r\n    function unpauseToken() public onlyOwner {\r\n        TokensUnpaused();\r\n        lmda.unpause();\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to claim back ownership of the LMDA token contract.\r\n     * */\r\n    function transferTokenOwnership() public onlyOwner {\r\n        lmda.transferOwnership(owner);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to pause the ICO.\r\n     * */\r\n    function pauseICO() public onlyOwner whenNotPaused {\r\n        require(now < endTime);\r\n        timePaused = now;\r\n        icoPaused = true;\r\n        ICOPaused(now);\r\n    }\r\n    \r\n  \r\n    /**\r\n     * Allows the owner to unpause the ICO.\r\n     * */\r\n    function unpauseICO() public onlyOwner {\r\n        endTime = endTime.add(now.sub(timePaused));\r\n        timePaused = 0;\r\n        ICOUnpaused(now);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @return The total amount of tokens that have been sold.\r\n     * */\r\n    function getTokensSold() public view returns(uint256 _tokensSold) {\r\n        _tokensSold = tokensSold;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @return The current bonuse percentage.\r\n     * */\r\n    function getBonus() public view returns(uint256 _bonus) {\r\n        if(stateOfICO == StateOfICO.PRE) { \r\n            _bonus = bonusForPreICO;\r\n        } else {\r\n            _bonus = bonusForMainICO;\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @return The current exchange rate.\r\n     * */\r\n    function getRate() public view returns(uint256 _exchangeRate) {\r\n        if(stateOfICO == StateOfICO.PRE) {\r\n            _exchangeRate = rateForPreICO;\r\n        } else {\r\n            _exchangeRate = rateForMainICO;\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @return The current token price. \r\n     * */\r\n    function getTokenPrice() public view returns(uint256 _tokenPrice) {\r\n        if(stateOfICO == StateOfICO.PRE) {\r\n            _tokenPrice = tokenPriceForPreICO;\r\n        } else {\r\n            _tokenPrice = tokenPriceForMainICO;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"receiverTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stateOfICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_daysToExtend\",\"type\":\"uint256\"}],\"name\":\"extendDeadline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceForPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lmda\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_daysToShortenBy\",\"type\":\"uint256\"}],\"name\":\"shortenDeadline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investmentOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiverThree\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateForPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiverOne\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBonus\",\"type\":\"uint256\"}],\"name\":\"changeBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceForMainICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateMainSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCapForPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCapForMainICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusForPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateForMainICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"processOffChainPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensSold\",\"outputs\":[{\"name\":\"_tokensSold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusForMainICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"changeRateOfToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenPrice\",\"type\":\"uint256\"}],\"name\":\"changeTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AidropInvoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MainSaleActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"daysExtended\",\"type\":\"uint256\"}],\"name\":\"DeadlineExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"daysShortenedBy\",\"type\":\"uint256\"}],\"name\":\"DeadlineShortened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"OffChainPurchaseMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stage\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newTokenPrice\",\"type\":\"uint256\"}],\"name\":\"TokenPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stage\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stage\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newBonus\",\"type\":\"uint256\"}],\"name\":\"BonusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"LMDA\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokensUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"ICOPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"ICOUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4a6211b0f905466650f16dbf7778f6a3703f4c6dc943997a551eacdbb2b7aed7"}]}