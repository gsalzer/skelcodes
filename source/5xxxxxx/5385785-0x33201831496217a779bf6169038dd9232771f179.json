{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract AccessControl {\r\n    address public creatorAddress;\r\n    uint16 public totalSeraphims = 0;\r\n    mapping (address => bool) public seraphims;\r\n\r\n    bool public isMaintenanceMode = true;\r\n \r\n    modifier onlyCREATOR() {\r\n        require(msg.sender == creatorAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlySERAPHIM() {\r\n        require(seraphims[msg.sender] == true);\r\n        _;\r\n    }\r\n    \r\n    modifier isContractActive {\r\n        require(!isMaintenanceMode);\r\n        _;\r\n    }\r\n    \r\n    // Constructor\r\n    function AccessControl() public {\r\n        creatorAddress = msg.sender;\r\n    }\r\n    \r\n\r\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\r\n        if (seraphims[_newSeraphim] == false) {\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims += 1;\r\n        }\r\n    }\r\n    \r\n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\r\n        if (seraphims[_oldSeraphim] == true) {\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }\r\n    }\r\n\r\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\r\n        isMaintenanceMode = _isMaintaining;\r\n    }\r\n\r\n  \r\n} \r\n\r\n\r\ncontract IBattleboardData is AccessControl  {\r\n\r\n  \r\n\r\n      // write functions\r\n  \r\nfunction createBattleboard(uint prize, uint8 restrictions) onlySERAPHIM external returns (uint16);\r\nfunction killMonster(uint16 battleboardId, uint8 monsterId)  onlySERAPHIM external;\r\nfunction createNullTile(uint16 _battleboardId) private ;\r\nfunction createTile(uint16 _battleboardId, uint8 _tileType, uint8 _value, uint8 _position, uint32 _hp, uint16 _petPower, uint64 _angelId, uint64 _petId, address _owner, uint8 _team) onlySERAPHIM external  returns (uint8);\r\nfunction killTile(uint16 battleboardId, uint8 tileId) onlySERAPHIM external ;\r\nfunction addTeamtoBoard(uint16 battleboardId, address owner, uint8 team) onlySERAPHIM external;\r\nfunction setTilePosition (uint16 battleboardId, uint8 tileId, uint8 _positionTo) onlySERAPHIM public ;\r\nfunction setTileHp(uint16 battleboardId, uint8 tileId, uint32 _hp) onlySERAPHIM external ;\r\nfunction addMedalBurned(uint16 battleboardId) onlySERAPHIM external ;\r\nfunction setLastMoveTime(uint16 battleboardId) onlySERAPHIM external ;\r\nfunction iterateTurn(uint16 battleboardId) onlySERAPHIM external ;\r\nfunction killBoard(uint16 battleboardId) onlySERAPHIM external ;\r\nfunction clearAngelsFromBoard(uint16 battleboardId) private;\r\n//Read functions\r\n     \r\nfunction getTileHp(uint16 battleboardId, uint8 tileId) constant external returns (uint32) ;\r\nfunction getMedalsBurned(uint16 battleboardId) constant external returns (uint8) ;\r\nfunction getTeam(uint16 battleboardId, uint8 tileId) external returns (uint8) ;\r\nfunction getMaxFreeTeams() constant public returns (uint8);\r\nfunction getBarrierNum(uint16 battleboardId) public constant returns (uint8) ;\r\nfunction getTileFromBattleboard(uint16 battleboardId, uint8 tileId) public constant returns (uint8 tileType, uint8 value, uint8 id, uint8 position, uint32 hp, uint16 petPower, uint64 angelId, uint64 petId, bool isLive, address owner)   ;\r\nfunction getTileIDByOwner(uint16 battleboardId, address _owner) constant public returns (uint8) ;\r\nfunction getPetbyTileId( uint16 battleboardId, uint8 tileId) constant public returns (uint64) ;\r\nfunction getOwner (uint16 battleboardId, uint8 team,  uint8 ownerNumber) constant external returns (address);\r\nfunction getTileIDbyPosition(uint16 battleboardId, uint8 position) public constant returns (uint8) ;\r\nfunction getPositionFromBattleboard(uint16 battleboardId, uint8 _position) public constant returns (uint8 tileType, uint8 value, uint8 id, uint8 position, uint32 hp, uint32 petPower, uint64 angelId, uint64 petId, bool isLive)  ;\r\nfunction getBattleboard(uint16 id) public constant returns (uint8 turn, bool isLive, uint prize, uint8 numTeams, uint8 numTiles, uint8 createdBarriers, uint8 restrictions, uint lastMoveTime, uint8 numTeams1, uint8 numTeams2, uint8 monster1, uint8 monster2) ;\r\nfunction isBattleboardLive(uint16 battleboardId) constant public returns (bool);\r\nfunction isTileLive(uint16 battleboardId, uint8 tileId) constant  external returns (bool) ;\r\nfunction getLastMoveTime(uint16 battleboardId) constant public returns (uint) ;\r\nfunction getNumTilesFromBoard (uint16 _battleboardId) constant public returns (uint8) ; \r\nfunction angelOnBattleboards(uint64 angelID) external constant returns (bool) ;\r\nfunction getTurn(uint16 battleboardId) constant public returns (address) ;\r\nfunction getNumTeams(uint16 battleboardId, uint8 team) public constant returns (uint8);\r\nfunction getMonsters(uint16 BattleboardId) external constant returns (uint8 monster1, uint8 monster2) ;\r\nfunction getTotalBattleboards() public constant returns (uint16) ;\r\n  \r\n        \r\n \r\n   \r\n}\r\n\r\ncontract BattleboardData is IBattleboardData  {\r\n\r\n    /*** DATA TYPES ***/\r\n       \r\n  \r\n  //Most main pieces on the board are tiles.   \r\n      struct Tile {\r\n        uint8 tileType;\r\n        uint8 value; //speed for angels, otherwise value of other types. \r\n        uint8 id;\r\n        uint8 position;\r\n        uint32 hp;\r\n        uint16 petPower;\r\n        uint8 team; //which team they are on. \r\n        uint64 angelId;\r\n        uint64 petId;\r\n        bool isLive;\r\n        address owner;\r\n        \r\n    }\r\n    \r\n      struct Battleboard {\r\n        uint8 turn; //turn number - turn 0 is the first player who enters the board. \r\n        address[] players;\r\n        bool isLive;\r\n        uint prize;\r\n        uint16 id;\r\n        uint8 numTeams; //number of angel/pet teams on the board, different than TEAM1 vs TEAM2\r\n        uint8 numTiles;\r\n        uint8 createdBarriers;\r\n        uint8 restrictions; //number of which angels can be added. \r\n        uint lastMoveTime;\r\n        address[] team1;\r\n        address[] team2; //addresses of the owners of teams 1 and 2\r\n        uint8 numTeams1;\r\n        uint8 numTeams2;\r\n        uint8 monster1; //tile number of the monster locations. \r\n        uint8 monster2;\r\n        uint8 medalsBurned;\r\n    }\r\n\r\n    //main storage\r\n    Battleboard []  Battleboards;\r\n    \r\n    uint16 public totalBattleboards;\r\n    \r\n    uint8 maxFreeTeams = 6;\r\n    uint8 maxPaidTeams = 4;\r\n    \r\n    //Each angel can only be on one board at a time. \r\n    mapping (uint64 => bool) angelsOnBattleboards; \r\n\r\n    //Map the battleboard ID to an array of all tiles on that board. \r\n    mapping (uint32 => Tile[]) TilesonBoard;\r\n    \r\n    //for each battleboardId(uint16) there is a number with the tileId of the tile. TileId 0 means blank. \r\n    mapping (uint16 => uint8 [64]) positionsTiles;\r\n    \r\n    \r\n    \r\n      // write functions\r\n  \r\n       function createBattleboard(uint prize, uint8 restrictions) onlySERAPHIM external returns (uint16) {\r\n           Battleboard memory battleboard;\r\n           battleboard.restrictions = restrictions;\r\n           battleboard.isLive = false; //will be live once ALL teams are added. \r\n           battleboard.prize = prize;\r\n           battleboard.id = totalBattleboards;\r\n           battleboard.numTeams = 0;\r\n           battleboard.lastMoveTime = now;\r\n           totalBattleboards += 1;\r\n           battleboard.numTiles = 0;\r\n          //set the monster positions\r\n           battleboard.monster1 = getRandomNumber(30,17,1);\r\n           battleboard.monster2 = getRandomNumber(48,31,2); \r\n           Battleboards.push(battleboard);\r\n          createNullTile(totalBattleboards-1);\r\n           return (totalBattleboards - 1);\r\n       }\r\n       \r\n         \r\n      \r\n      function killMonster(uint16 battleboardId, uint8 monsterId)  onlySERAPHIM external{\r\n          if (monsterId == 1) {\r\n              Battleboards[battleboardId].monster1 = 0;\r\n          }\r\n          if (monsterId ==2) {\r\n               Battleboards[battleboardId].monster2 = 0;\r\n          }\r\n      }\r\n        \r\n        function createNullTile(uint16 _battleboardId) private    {\r\n      //We need to create a tile with ID 0 that won't be on the board. This lets us know if any other tile is ID 0 then that means it's a blank tile. \r\n        if ((_battleboardId <0) || (_battleboardId > totalBattleboards)) {revert();}\r\n        Tile memory tile ;\r\n        tile.tileType = 0; \r\n        tile.id = 0;\r\n        tile.isLive = true;\r\n        TilesonBoard[_battleboardId].push(tile);\r\n     \r\n    }\r\n        \r\n        function createTile(uint16 _battleboardId, uint8 _tileType, uint8 _value, uint8 _position, uint32 _hp, uint16 _petPower, uint64 _angelId, uint64 _petId, address _owner, uint8 _team) onlySERAPHIM external  returns (uint8)   {\r\n      //main function to create a tile and add it to the board. \r\n        if ((_battleboardId <0) || (_battleboardId > totalBattleboards)) {revert();}\r\n        if ((angelsOnBattleboards[_angelId] == true) && (_angelId != 0)) {revert();}\r\n        angelsOnBattleboards[_angelId] = true;\r\n        Tile memory tile ;\r\n        tile.tileType = _tileType; \r\n        tile.value = _value;\r\n        tile.position= _position;\r\n        tile.hp = _hp;\r\n        Battleboards[_battleboardId].numTiles +=1;\r\n        tile.id = Battleboards[_battleboardId].numTiles;\r\n        positionsTiles[_battleboardId][_position+1] = tile.id;\r\n        tile.petPower = _petPower;\r\n        tile.angelId = _angelId;\r\n        tile.petId = _petId;\r\n        tile.owner = _owner;\r\n        tile.team = _team;\r\n        tile.isLive = true;\r\n        TilesonBoard[_battleboardId].push(tile);\r\n        return (Battleboards[_battleboardId].numTiles);\r\n    }\r\n     \r\n     function killTile(uint16 battleboardId, uint8 tileId) onlySERAPHIM external {\r\n     \r\n      TilesonBoard[battleboardId][tileId].isLive= false;\r\n      TilesonBoard[battleboardId][tileId].tileType= 0;\r\n      for (uint i =0; i< Battleboards[battleboardId].team1.length; i++) {\r\n          if (Battleboards[battleboardId].team1[i] == TilesonBoard[battleboardId][tileId].owner) {\r\n             //should be safe because a team can't be killed if there are 0 teams to kill. \r\n             Battleboards[battleboardId].numTeams1 -= 1; \r\n          }\r\n      }\r\n      for (i =0; i< Battleboards[battleboardId].team2.length; i++) {\r\n          if (Battleboards[battleboardId].team2[i] == TilesonBoard[battleboardId][tileId].owner) {\r\n             //should be safe because a team can't be killed if there are 0 teams to kill. \r\n             Battleboards[battleboardId].numTeams2 -= 1; \r\n          }\r\n      }\r\n    }\r\n     \r\n     function addTeamtoBoard(uint16 battleboardId, address owner, uint8 team) onlySERAPHIM external {\r\n        \r\n        //Can't add a team if the board is live, or if the board is already full of teams. \r\n         if (Battleboards[battleboardId].isLive == true) {revert();}\r\n         if ((Battleboards[battleboardId].prize == 0) &&(Battleboards[battleboardId].numTeams == maxFreeTeams)) {revert();}\r\n         if ((Battleboards[battleboardId].prize != 0) &&(Battleboards[battleboardId].numTeams == maxPaidTeams)) {revert();}\r\n         \r\n         //only one team per address can be on the board. \r\n         for (uint i =0; i<Battleboards[battleboardId].numTeams; i++) {\r\n             if (Battleboards[battleboardId].players[i] == owner) {revert();}\r\n         }\r\n         Battleboards[battleboardId].numTeams += 1;\r\n         Battleboards[battleboardId].players.push(owner);\r\n         \r\n         if (team == 1) {\r\n         Battleboards[battleboardId].numTeams1 += 1;\r\n         Battleboards[battleboardId].team1.push(owner);\r\n         }\r\n         if (team == 2) {\r\n         Battleboards[battleboardId].numTeams2 += 1;\r\n         Battleboards[battleboardId].team2.push(owner);\r\n         \r\n         //if the board is now full, then go ahead and make it live. \r\n         if ((Battleboards[battleboardId].numTeams1 == 3) && (Battleboards[battleboardId].numTeams2 ==3)) {Battleboards[battleboardId].isLive = true;}\r\n        if ((Battleboards[battleboardId].prize != 0) &&(Battleboards[battleboardId].numTeams == maxPaidTeams)) {Battleboards[battleboardId].isLive = true;}\r\n         }\r\n          \r\n     }\r\n       \r\n        function setTilePosition (uint16 battleboardId, uint8 tileId, uint8 _positionTo) onlySERAPHIM public  {\r\n            TilesonBoard[battleboardId][tileId].position= _positionTo;\r\n            positionsTiles[battleboardId][_positionTo+1] = tileId;\r\n            \r\n        }\r\n        \r\n        function setTileHp(uint16 battleboardId, uint8 tileId, uint32 _hp) onlySERAPHIM external {\r\n            TilesonBoard[battleboardId][tileId].hp = _hp;\r\n        }\r\n        \r\n          function addMedalBurned(uint16 battleboardId) onlySERAPHIM external {\r\n            Battleboards[battleboardId].medalsBurned += 1;\r\n        }\r\n        \r\n        function withdrawEther()  onlyCREATOR external {\r\n   //shouldn't have any eth here but just in case. \r\n    creatorAddress.transfer(this.balance);\r\n}\r\n\r\nfunction setLastMoveTime(uint16 battleboardId) onlySERAPHIM external {\r\n        Battleboards[battleboardId].lastMoveTime = now;\r\n        \r\n        \r\n    }\r\n    \r\n      function iterateTurn(uint16 battleboardId) onlySERAPHIM external {\r\n            if (Battleboards[battleboardId].turn  == (Battleboards[battleboardId].players.length-1)) {\r\n                Battleboards[battleboardId].turn = 0;\r\n            } \r\n            else {Battleboards[battleboardId].turn += 1;}\r\n        }\r\n        \r\n         function killBoard(uint16 battleboardId) onlySERAPHIM external {\r\n           Battleboards[battleboardId].isLive = false;\r\n           clearAngelsFromBoard(battleboardId);\r\n       }\r\n    \r\n    \r\n        function clearAngelsFromBoard(uint16 battleboardId) private {\r\n         //Free up angels to be used on other boards. \r\n         for (uint i = 0; i < Battleboards[battleboardId].numTiles; i++) {\r\n            if (TilesonBoard[battleboardId][i].angelId != 0) {\r\n                angelsOnBattleboards[TilesonBoard[battleboardId][i].angelId] = false;\r\n              }\r\n         } \r\n  \r\n    }\r\n\r\n//Read functions\r\n     \r\n        function getTileHp(uint16 battleboardId, uint8 tileId) constant external returns (uint32) {\r\n            return TilesonBoard[battleboardId][tileId].hp;\r\n        }\r\n        \r\n      \r\n        function getMedalsBurned(uint16 battleboardId) constant external returns (uint8) {\r\n            return Battleboards[battleboardId].medalsBurned;\r\n        }\r\n  \r\n \r\n function getTeam(uint16 battleboardId, uint8 tileId) external returns (uint8) {\r\n     TilesonBoard[battleboardId][tileId].team;\r\n }\r\n        \r\n\r\n\r\nfunction getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\r\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\r\n        return uint8(genNum % (maxRandom - min + 1)+min);\r\n        }\r\n\r\n       \r\n       function getMaxFreeTeams() constant public returns (uint8) {\r\n          return maxFreeTeams;\r\n       }\r\n  \r\n        function getBarrierNum(uint16 battleboardId) public constant returns (uint8) {\r\n            return Battleboards[battleboardId].createdBarriers;\r\n        }\r\n\r\n    // Call to get the specified tile at a certain position of a certain board. \r\n   function getTileFromBattleboard(uint16 battleboardId, uint8 tileId) public constant returns (uint8 tileType, uint8 value, uint8 id, uint8 position, uint32 hp, uint16 petPower, uint64 angelId, uint64 petId, bool isLive, address owner)   {\r\n      \r\n        if ((battleboardId <0) ||  (battleboardId > totalBattleboards)) {revert();}\r\n        Battleboard memory battleboard = Battleboards[battleboardId];\r\n        Tile memory tile;\r\n        if ((tileId <0) || (tileId> battleboard.numTiles)) {revert();}\r\n        tile = TilesonBoard[battleboardId][tileId];\r\n        tileType = tile.tileType; \r\n        value = tile.value;\r\n        id= tile.id;\r\n        position = tile.position;\r\n        hp = tile.hp;\r\n        petPower = tile.petPower;\r\n        angelId = tile.angelId;\r\n        petId = tile.petId;\r\n        owner = tile.owner;\r\n        isLive = tile.isLive;\r\n        \r\n    }\r\n    \r\n    //Each player (address) can only have one tile on each board. \r\n    function getTileIDByOwner(uint16 battleboardId, address _owner) constant public returns (uint8) {\r\n        for (uint8 i = 0; i < Battleboards[battleboardId].numTiles+1; i++) {\r\n            if (TilesonBoard[battleboardId][i].owner == _owner) {\r\n                return TilesonBoard[battleboardId][i].id;\r\n        }\r\n    }\r\n       return 0;\r\n    }\r\n    \r\n    \r\n    \r\n    function getPetbyTileId( uint16 battleboardId, uint8 tileId) constant public returns (uint64) {\r\n       return TilesonBoard[battleboardId][tileId].petId;\r\n    }\r\n    \r\n    function getOwner (uint16 battleboardId, uint8 team,  uint8 ownerNumber) constant external returns (address) {\r\n        \r\n       if (team == 0) {return Battleboards[battleboardId].players[ownerNumber];}\r\n       if (team == 1) {return Battleboards[battleboardId].team1[ownerNumber];}\r\n       if (team == 2) {return Battleboards[battleboardId].team2[ownerNumber];}\r\n       \r\n       \r\n    }\r\n    \r\n\r\n    \r\n      function getTileIDbyPosition(uint16 battleboardId, uint8 position) public constant returns (uint8) {\r\n        return positionsTiles[battleboardId][position+1];\r\n    }\r\n    //If tile is empty, this returns 0\r\n     \r\n        // Call to get the specified tile at a certain position of a certain board. \r\n   function getPositionFromBattleboard(uint16 battleboardId, uint8 _position) public constant returns (uint8 tileType, uint8 value, uint8 id, uint8 position, uint32 hp, uint32 petPower, uint64 angelId, uint64 petId, bool isLive)   {\r\n      \r\n        if ((battleboardId <0) ||  (battleboardId > totalBattleboards)) {revert();}\r\n    \r\n        Tile memory tile;\r\n        uint8 tileId = positionsTiles[battleboardId][_position+1];\r\n        tile = TilesonBoard[battleboardId][tileId];\r\n        tileType = tile.tileType; \r\n        value = tile.value;\r\n        id= tile.id;\r\n        position = tile.position;\r\n        hp = tile.hp;\r\n        petPower = tile.petPower;\r\n        angelId = tile.angelId;\r\n        petId = tile.petId;\r\n        isLive = tile.isLive;\r\n        \r\n    } \r\n     \r\n \r\n    function getBattleboard(uint16 id) public constant returns (uint8 turn, bool isLive, uint prize, uint8 numTeams, uint8 numTiles, uint8 createdBarriers, uint8 restrictions, uint lastMoveTime, uint8 numTeams1, uint8 numTeams2, uint8 monster1, uint8 monster2) {\r\n            \r\n            Battleboard memory battleboard = Battleboards[id];\r\n    \r\n        turn = battleboard.turn;\r\n        isLive = battleboard.isLive;\r\n        prize = battleboard.prize;\r\n        numTeams = battleboard.numTeams;\r\n        numTiles = battleboard.numTiles;\r\n        createdBarriers = battleboard.createdBarriers;\r\n        restrictions = battleboard.restrictions;\r\n        lastMoveTime = battleboard.lastMoveTime;\r\n        numTeams1 = battleboard.numTeams1;\r\n        numTeams2 = battleboard.numTeams2;\r\n        monster1 = battleboard.monster1;\r\n        monster2 = battleboard.monster2;\r\n    }\r\n\r\n    \r\n    \r\n\r\n     \r\n     function isBattleboardLive(uint16 battleboardId) constant public returns (bool) {\r\n         return Battleboards[battleboardId].isLive;\r\n     }\r\n\r\n\r\n     function isTileLive(uint16 battleboardId, uint8 tileId) constant  external returns (bool) {\r\n     \r\n      return TilesonBoard[battleboardId][tileId].isLive;\r\n    }\r\n    \r\n    function getLastMoveTime(uint16 battleboardId) constant public returns (uint) {\r\n        return Battleboards[battleboardId].lastMoveTime;\r\n    }\r\n     \r\n  \r\n        function getNumTilesFromBoard (uint16 _battleboardId) constant public returns (uint8) {\r\n            return Battleboards[_battleboardId].numTiles;\r\n        }\r\n   \r\n        \r\n        //each angel can only be on ONE sponsored battleboard at a time. \r\n        function angelOnBattleboards(uint64 angelID) external constant returns (bool) {\r\n           \r\n            return angelsOnBattleboards[angelID]; \r\n        }\r\n   \r\n        \r\n        function getTurn(uint16 battleboardId) constant public returns (address) {\r\n            return Battleboards[battleboardId].players[Battleboards[battleboardId].turn];\r\n        }\r\n        \r\n      \r\n     \r\n     function getNumTeams(uint16 battleboardId, uint8 team) public constant returns (uint8) {\r\n         if (team == 1) {return Battleboards[battleboardId].numTeams1;}\r\n         if (team == 2) {return Battleboards[battleboardId].numTeams2;}\r\n     }\r\n        \r\n      \r\n    \r\n    function getMonsters(uint16 BattleboardId) external constant returns (uint8 monster1, uint8 monster2) {\r\n        \r\n        monster1 = Battleboards[BattleboardId].monster1;\r\n        monster2 = Battleboards[BattleboardId].monster2;\r\n   \r\n    }\r\n    \r\n    \r\n    function safeMult(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n    \r\n     function SafeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n    /// Read access\r\n     }\r\n   \r\n   \r\n    function getTotalBattleboards() public constant returns (uint16) {\r\n        return totalBattleboards;\r\n    }\r\n      \r\n  \r\n        \r\n   \r\n        \r\n        \r\n        \r\n   \r\n      \r\n        \r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"tileId\",\"type\":\"uint8\"}],\"name\":\"getTileFromBattleboard\",\"outputs\":[{\"name\":\"tileType\",\"type\":\"uint8\"},{\"name\":\"value\",\"type\":\"uint8\"},{\"name\":\"id\",\"type\":\"uint8\"},{\"name\":\"position\",\"type\":\"uint8\"},{\"name\":\"hp\",\"type\":\"uint32\"},{\"name\":\"petPower\",\"type\":\"uint16\"},{\"name\":\"angelId\",\"type\":\"uint64\"},{\"name\":\"petId\",\"type\":\"uint64\"},{\"name\":\"isLive\",\"type\":\"bool\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"}],\"name\":\"addMedalBurned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"}],\"name\":\"setLastMoveTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"seraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"}],\"name\":\"killBoard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"getBattleboard\",\"outputs\":[{\"name\":\"turn\",\"type\":\"uint8\"},{\"name\":\"isLive\",\"type\":\"bool\"},{\"name\":\"prize\",\"type\":\"uint256\"},{\"name\":\"numTeams\",\"type\":\"uint8\"},{\"name\":\"numTiles\",\"type\":\"uint8\"},{\"name\":\"createdBarriers\",\"type\":\"uint8\"},{\"name\":\"restrictions\",\"type\":\"uint8\"},{\"name\":\"lastMoveTime\",\"type\":\"uint256\"},{\"name\":\"numTeams1\",\"type\":\"uint8\"},{\"name\":\"numTeams2\",\"type\":\"uint8\"},{\"name\":\"monster1\",\"type\":\"uint8\"},{\"name\":\"monster2\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"updateMaintenanceMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"tileId\",\"type\":\"uint8\"}],\"name\":\"isTileLive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"maxRandom\",\"type\":\"uint16\"},{\"name\":\"min\",\"type\":\"uint8\"},{\"name\":\"privateAddress\",\"type\":\"address\"}],\"name\":\"getRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"team\",\"type\":\"uint8\"}],\"name\":\"getNumTeams\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_battleboardId\",\"type\":\"uint16\"}],\"name\":\"getNumTilesFromBoard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintenanceMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"tileId\",\"type\":\"uint8\"}],\"name\":\"getTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldSeraphim\",\"type\":\"address\"}],\"name\":\"removeSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxFreeTeams\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"prize\",\"type\":\"uint256\"},{\"name\":\"restrictions\",\"type\":\"uint8\"}],\"name\":\"createBattleboard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"monsterId\",\"type\":\"uint8\"}],\"name\":\"killMonster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"tileId\",\"type\":\"uint8\"},{\"name\":\"_hp\",\"type\":\"uint32\"}],\"name\":\"setTileHp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"}],\"name\":\"getLastMoveTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"}],\"name\":\"getTurn\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"tileId\",\"type\":\"uint8\"}],\"name\":\"killTile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"team\",\"type\":\"uint8\"}],\"name\":\"addTeamtoBoard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTileIDByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"tileId\",\"type\":\"uint8\"},{\"name\":\"_positionTo\",\"type\":\"uint8\"}],\"name\":\"setTilePosition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBattleboards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"team\",\"type\":\"uint8\"},{\"name\":\"ownerNumber\",\"type\":\"uint8\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"}],\"name\":\"getBarrierNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"}],\"name\":\"getMedalsBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBattleboards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"}],\"name\":\"iterateTurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_battleboardId\",\"type\":\"uint16\"},{\"name\":\"_tileType\",\"type\":\"uint8\"},{\"name\":\"_value\",\"type\":\"uint8\"},{\"name\":\"_position\",\"type\":\"uint8\"},{\"name\":\"_hp\",\"type\":\"uint32\"},{\"name\":\"_petPower\",\"type\":\"uint16\"},{\"name\":\"_angelId\",\"type\":\"uint64\"},{\"name\":\"_petId\",\"type\":\"uint64\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"uint8\"}],\"name\":\"createTile\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"position\",\"type\":\"uint8\"}],\"name\":\"getTileIDbyPosition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"angelID\",\"type\":\"uint64\"}],\"name\":\"angelOnBattleboards\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSeraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSeraphim\",\"type\":\"address\"}],\"name\":\"addSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"_position\",\"type\":\"uint8\"}],\"name\":\"getPositionFromBattleboard\",\"outputs\":[{\"name\":\"tileType\",\"type\":\"uint8\"},{\"name\":\"value\",\"type\":\"uint8\"},{\"name\":\"id\",\"type\":\"uint8\"},{\"name\":\"position\",\"type\":\"uint8\"},{\"name\":\"hp\",\"type\":\"uint32\"},{\"name\":\"petPower\",\"type\":\"uint32\"},{\"name\":\"angelId\",\"type\":\"uint64\"},{\"name\":\"petId\",\"type\":\"uint64\"},{\"name\":\"isLive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"tileId\",\"type\":\"uint8\"}],\"name\":\"getTileHp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"BattleboardId\",\"type\":\"uint16\"}],\"name\":\"getMonsters\",\"outputs\":[{\"name\":\"monster1\",\"type\":\"uint8\"},{\"name\":\"monster2\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"}],\"name\":\"isBattleboardLive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"tileId\",\"type\":\"uint8\"}],\"name\":\"getPetbyTileId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BattleboardData","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://76d8d2972b2ff290187b8f9f88d2697b1ae17d568f6dfa122dd965ffa7b882cb"}]}