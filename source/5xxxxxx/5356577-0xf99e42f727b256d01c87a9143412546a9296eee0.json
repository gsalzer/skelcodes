{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract Lending is Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n    uint256 public minContribAmount = 0.1 ether;                          // 0.01 ether\r\n    enum LendingState {AcceptingContributions, AwaitingReturn, ProjectNotFunded, ContributionReturned}\r\n\r\n    mapping(address => Investor) public investors;\r\n    uint256 public fundingStartTime;                                     // Start time of contribution period in UNIX time\r\n    uint256 public fundingEndTime;                                       // End time of contribution period in UNIX time\r\n    uint256 public totalContributed;\r\n    bool public capReached;\r\n    LendingState public state;\r\n    address[] public investorsKeys;\r\n\r\n    uint256 public lendingInterestRatePercentage;\r\n    uint256 public totalLendingAmount;\r\n    uint256 public lendingDays;\r\n    uint256 public initialFiatPerEthRate;\r\n    uint256 public totalLendingFiatAmount;\r\n    address public borrower;\r\n    uint256 public borrowerReturnDate;\r\n    uint256 public borrowerReturnFiatAmount;\r\n    uint256 public borrowerReturnFiatPerEthRate;\r\n    uint256 public borrowerReturnAmount;\r\n\r\n    struct Investor {\r\n        uint amount;\r\n        bool isCompensated;\r\n    }\r\n\r\n    // events\r\n    event onCapReached(uint endTime);\r\n    event onContribution(uint totalContributed, address indexed investor, uint amount, uint investorsCount);\r\n    event onCompensated(address indexed contributor, uint amount);\r\n    event excessContributionReturned(address indexed contributor, uint amount);\r\n    event StateChange(uint state);\r\n\r\n    function Lending(uint _fundingStartTime, uint _fundingEndTime, address _borrower, uint _lendingInterestRatePercentage, uint _totalLendingAmount, uint256 _lendingDays) public {\r\n        fundingStartTime = _fundingStartTime;\r\n        fundingEndTime = _fundingEndTime;\r\n        borrower = _borrower;\r\n        // 115\r\n        lendingInterestRatePercentage = _lendingInterestRatePercentage;\r\n        totalLendingAmount = _totalLendingAmount;\r\n        //90 days for version 0.1\r\n        lendingDays = _lendingDays;\r\n        state = LendingState.AcceptingContributions;\r\n        StateChange(uint(state));\r\n    }\r\n\r\n    function() public payable whenNotPaused {\r\n        if(state == LendingState.AwaitingReturn){\r\n            returnBorroweedEth();\r\n        } else{\r\n            contributeWithAddress(msg.sender);\r\n        }\r\n    }\r\n\r\n    function isContribPeriodRunning() public constant returns(bool){\r\n        return fundingStartTime <= now && fundingEndTime > now && !capReached;\r\n    }\r\n\r\n    // @notice Function to participate in contribution period\r\n    //  Amounts from the same address should be added up\r\n    //  If cap is reached, end time should be modified\r\n    //  Funds should be transferred into multisig wallet\r\n    // @param contributor Address\r\n    function contributeWithAddress(address contributor) public payable whenNotPaused {\r\n        require(msg.value >= minContribAmount);\r\n        require(isContribPeriodRunning());\r\n\r\n        uint contribValue = msg.value;\r\n        uint excessContribValue = 0;\r\n\r\n        uint oldTotalContributed = totalContributed;\r\n\r\n        totalContributed = oldTotalContributed.add(contribValue);\r\n\r\n        uint newTotalContributed = totalContributed;\r\n\r\n        // cap was reached\r\n        if (newTotalContributed >=  totalLendingAmount &&\r\n            oldTotalContributed < totalLendingAmount)\r\n        {\r\n            capReached = true;\r\n            fundingEndTime = now;\r\n            onCapReached(fundingEndTime);\r\n\r\n            // Everything above hard cap will be sent back to contributor\r\n            excessContribValue = newTotalContributed.sub(totalLendingAmount);\r\n            contribValue = contribValue.sub(excessContribValue);\r\n\r\n            totalContributed = totalLendingAmount;\r\n        }\r\n\r\n        if (investors[contributor].amount == 0) {\r\n            investorsKeys.push(contributor);\r\n        }\r\n\r\n        investors[contributor].amount = investors[contributor].amount.add(contribValue);\r\n\r\n        if (excessContribValue > 0) {\r\n            msg.sender.transfer(excessContribValue);\r\n            excessContributionReturned(msg.sender, excessContribValue);\r\n        }\r\n        onContribution(newTotalContributed, contributor, contribValue, investorsKeys.length);\r\n    }\r\n\r\n    function enableReturnContribution() external onlyOwner {\r\n        require(totalContributed < totalLendingAmount);\r\n        require(now > fundingEndTime);\r\n        state = LendingState.ProjectNotFunded;\r\n        StateChange(uint(state));\r\n    }\r\n\r\n    // @notice Function to participate in contribution period\r\n    //  Amounts from the same address should be added up\r\n    //  If cap is reached, end time should be modified\r\n    //  Funds should be transferred into multisig wallet\r\n    // @param contributor Address\r\n    function finishContributionPeriod(uint256 _initialFiatPerEthRate) onlyOwner {\r\n        require(capReached == true);\r\n        initialFiatPerEthRate = _initialFiatPerEthRate;\r\n        borrower.transfer(totalContributed);\r\n        state = LendingState.AwaitingReturn;\r\n        StateChange(uint(state));\r\n        totalLendingFiatAmount = totalLendingAmount.mul(initialFiatPerEthRate);\r\n        borrowerReturnFiatAmount = totalLendingFiatAmount.mul(lendingInterestRatePercentage).div(100);\r\n    }\r\n\r\n    function reclaimContribution(address beneficiary) external {\r\n        require(state == LendingState.ProjectNotFunded);\r\n        uint contribution = investors[beneficiary].amount;\r\n        require(contribution > 0);\r\n        beneficiary.transfer(contribution);\r\n    }\r\n\r\n    function establishBorrowerReturnFiatPerEthRate(uint256 _borrowerReturnFiatPerEthRate) external onlyOwner{\r\n        require(state == LendingState.AwaitingReturn);\r\n        borrowerReturnFiatPerEthRate = _borrowerReturnFiatPerEthRate;\r\n        borrowerReturnAmount = borrowerReturnFiatAmount.div(borrowerReturnFiatPerEthRate);\r\n    }\r\n\r\n    function returnBorroweedEth() payable public {\r\n        require(state == LendingState.AwaitingReturn);\r\n        require(borrowerReturnFiatPerEthRate > 0);\r\n        require(msg.value == borrowerReturnAmount);\r\n        state = LendingState.ContributionReturned;\r\n        StateChange(uint(state));\r\n    }\r\n\r\n    function reclaimContributionWithInterest(address beneficiary) external {\r\n        require(state == LendingState.ContributionReturned);\r\n        uint contribution = investors[beneficiary].amount.mul(initialFiatPerEthRate).mul(lendingInterestRatePercentage).div(borrowerReturnFiatPerEthRate).div(100);\r\n        require(contribution > 0);\r\n        beneficiary.transfer(contribution);\r\n    }\r\n\r\n    function selfKill() external onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLendingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowerReturnFiatAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableReturnContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_initialFiatPerEthRate\",\"type\":\"uint256\"}],\"name\":\"finishContributionPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfKill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingInterestRatePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialFiatPerEthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"isCompensated\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"contributeWithAddress\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrower\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_borrowerReturnFiatPerEthRate\",\"type\":\"uint256\"}],\"name\":\"establishBorrowerReturnFiatPerEthRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"reclaimContributionWithInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowerReturnAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowerReturnDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContribPeriodRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorsKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowerReturnFiatPerEthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLendingFiatAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"reclaimContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnBorroweedEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fundingStartTime\",\"type\":\"uint256\"},{\"name\":\"_fundingEndTime\",\"type\":\"uint256\"},{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_lendingInterestRatePercentage\",\"type\":\"uint256\"},{\"name\":\"_totalLendingAmount\",\"type\":\"uint256\"},{\"name\":\"_lendingDays\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"onCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalContributed\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investorsCount\",\"type\":\"uint256\"}],\"name\":\"onContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onCompensated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"excessContributionReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"StateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Lending","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005abfe8c0000000000000000000000000000000000000000000000000000000005ad25dc00000000000000000000000000623b4224763777bed743403c25e37630cefa34a00000000000000000000000000000000000000000000000000000000000000730000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000000000000000000000000000000000000000003c","Library":"","SwarmSource":"bzzr://29dfe585d0cdfb995a2514ab100532d18fbeb52320fe62d5ee533d23d82d435c"}]}