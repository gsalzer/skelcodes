{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n\r\ncontract SafeMath {\r\n\r\n    function safeAdd(uint a, uint b) public pure returns(uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function safeSub(uint a, uint b) public pure returns(uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract BYSToken is ERC20Interface, Owned, SafeMath {\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public totalSupply;\r\n    address public tokenOwner;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    mapping (address => uint256) public frozenAccountByOwner;\r\n\r\n    uint256 public freeCrawDeadline;\r\n    event FrozenAccount(address target, uint256 deadline);\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        symbol = \"BYS\";\r\n        name = \"Bayesin\";\r\n        decimals = 18;\r\n        totalSupply = 2000000000 * 10 ** 18;  //10bil\r\n        tokenOwner = 0xC92221388BA9418777454e142d4dA4513bdb81A1;\r\n        freeCrawDeadline =  1536681600;\r\n        // block.timestamp + 10 * 1 minutes; // 6-22\r\n        // 1528992000; //6-15\r\n        // now + 5 * 1 minutes;\r\n        // now + 30 * 1 minutes;\r\n        balances[tokenOwner] = totalSupply;\r\n        emit Transfer(address(0), tokenOwner, totalSupply);\r\n    }\r\n\r\n    modifier isOwner\r\n    {\r\n        require(msg.sender == tokenOwner);\r\n        _;\r\n    }\r\n\r\n    modifier afterFrozenDeadline() { \r\n        if (now >= freeCrawDeadline) \r\n        _; \r\n    }\r\n\r\n    function managerAccount(address target, uint256 deadline) public isOwner\r\n    {\r\n        frozenAccountByOwner[target] = deadline;\r\n        emit FrozenAccount(target, deadline);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public view returns (uint) {\r\n        return totalSupply;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account tokenOwner\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address _tokenOwner) public view returns (uint balance) {\r\n        return balances[_tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to to account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address _to, uint _tokens) public afterFrozenDeadline returns (bool success) {\r\n\r\n        require(now > frozenAccountByOwner[msg.sender]);\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _tokens);\r\n        balances[_to] = safeAdd(balances[_to], _tokens);\r\n        emit Transfer(msg.sender, _to, _tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for spender to transferFrom(...) tokens\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces\r\n    // ------------------------------------------------------------------------\r\n    function approve(address _spender, uint _tokens) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _tokens;\r\n        emit Approval(msg.sender, _spender, _tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer tokens from the from account to the to account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the from account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address _from, address _to, uint _tokens) public afterFrozenDeadline returns (bool success) {\r\n\r\n        require(_tokens > 0);\r\n        require(block.timestamp > frozenAccountByOwner[_from]);\r\n\r\n        balances[_from] = safeSub(balances[_from], _tokens);\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _tokens);\r\n        balances[_to] = safeAdd(balances[_to], _tokens);\r\n        emit Transfer(_from, _to, _tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address _tokenOwner, address _spender) public view returns (uint remaining) {\r\n        return allowed[_tokenOwner][_spender];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for spender to transferFrom(...) tokens\r\n    // from the token owner's account. The spender contract function\r\n    // receiveApproval(...) is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address _spender, uint _tokens) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _tokens;\r\n        emit Approval(msg.sender, _spender, _tokens);\r\n        /* ApproveAndCallFallBack(_spender).receiveApproval(msg.sender, _tokens, this, _data); */\r\n        return true;\r\n    }\r\n\r\n    function fundTransfer(address _to, uint256 _amount) internal {\r\n        require(_amount > 0);\r\n        require(balances[tokenOwner] - _amount > 0);\r\n        balances[tokenOwner] = safeSub(balances[tokenOwner], _amount);\r\n        balances[_to] = safeAdd(balances[_to], _amount);\r\n        emit Transfer(tokenOwner, _to, _amount);\r\n    }\r\n}\r\n\r\n\r\ncontract CrowSale is BYSToken {\r\n\r\n    address public beneficiary;//\r\n    uint public minGoal = 0; // \r\n    uint public maxGoal = 0; //\r\n    uint public price = 0; \r\n\r\n    uint public perPrice = 0;           // per price\r\n    uint public perDeadLine = 0;        //\r\n    uint public perAmountRaised = 0;    //\r\n    uint public perTokenAmount = 0;\r\n    uint public perTokenAmountMax = 0;\r\n\r\n    bool public fundingGoalReached = false;\r\n    bool public crowdsaleClosed = false;\r\n    uint256 public totalRaised = 0;\r\n    uint256 public amountRaised = 0; //wei\r\n    uint256 public tokenAmountRasied = 0;\r\n\r\n    uint256 public bonus01 = 0; //50;\r\n    uint public bonus01Start = 0; //safeMul(0 * 1 eth);\r\n    uint public bonus01End = 0; //safeMul(2 * 1 eth);\r\n    uint256 public bonus02 = 0; //100;\r\n    uint public bonus02Start = 0; // safeMul(3 * 1 eth);\r\n    uint public bonus02End = 0; //safeMul(5 * 1 eth);\r\n    uint public bonus = 0;\r\n\r\n    mapping(address => uint256) public fundBalance;\r\n\r\n    /* address tokenOwner; */\r\n\r\n    /* Token tokenReward; */\r\n\r\n    event GoalReached(address _beneficiary, uint _amountRaised);\r\n    event FundTransfer(address _backer, uint _amount, bool _isContribution);\r\n    // *\r\n    // * @param _minGoal\r\n    // * @param _maxGoal\r\n    // * @param _durationInMinutes\r\n    // * @param _tokenName\r\n    // * @param _tokenSymbol\r\n    // * @param uint  _bonus01\r\n    // * @param uint  _bonus01Start\r\n    // * @param uint  _bonus01End\r\n    // * @param uint  _bonus02;\r\n    // * @param uint  _bonus02Start\r\n    // * @param uint  _bonus02End\r\n    // * @param uint256 _crawMount\r\n    constructor() public {\r\n        \r\n        beneficiary = 0xC92221388BA9418777454e142d4dA4513bdb81A1; //metamask 01\r\n        minGoal = 3000 * 1 ether; // 3000 ETH      \r\n        maxGoal = 20000 * 1 ether;  // 20000 ETH\r\n        /* uint public deadline = now + 30 * 1 minutes; */\r\n        price = 7000;\r\n        fundingGoalReached = false;\r\n        crowdsaleClosed = false;\r\n        amountRaised = 0; //wei\r\n        tokenAmountRasied = 0;\r\n\r\n        bonus01 = 40;\r\n        bonus01Start = safeMul(0, 1 ether); // 0 ETH\r\n        bonus01End = safeMul(2000, 1 ether); // 2000 ETH\r\n        bonus02 = 20;\r\n        bonus02Start = safeMul(2000, 1 ether); // 2000 ETH\r\n        bonus02End = safeMul(10000, 1 ether);   // 10000 ETH\r\n\r\n        bonus = 0;\r\n\r\n\r\n        perPrice = 13000;           // per price\r\n        perDeadLine = 1532620800;\r\n        //block.timestamp + 5 * 1 minutes;\r\n        // block.timestamp + 3 * 1 minutes;\r\n        perAmountRaised = 0;    //\r\n        perTokenAmount = 0;\r\n        perTokenAmountMax = 26000000 * 10 ** 18;    // 26000000 * 10 ** 18;\r\n    }\r\n\r\n    function () public payable {\r\n        require(!crowdsaleClosed);\r\n        require(msg.sender != tokenOwner);\r\n\r\n        if (block.timestamp > freeCrawDeadline) {\r\n            crowdsaleClosed = true;\r\n            revert();\r\n        }\r\n\r\n        uint amount = msg.value;        \r\n\r\n        uint256 returnTokenAmount = 0;\r\n        if (block.timestamp < perDeadLine) {\r\n            //private\r\n            if (perTokenAmount >= perTokenAmountMax) {\r\n                revert();                \r\n            }\r\n            perAmountRaised = safeAdd(perAmountRaised, amount);\r\n            returnTokenAmount = safeMul(amount, perPrice);\r\n            perTokenAmount = safeAdd(perTokenAmount, returnTokenAmount);\r\n            \r\n        } else {\r\n            fundBalance[msg.sender] = safeAdd(fundBalance[msg.sender], amount);\r\n            if ((amountRaised >= bonus01Start) && (amountRaised < bonus01End)) {\r\n                bonus = bonus01;\r\n            }else if ((amountRaised >= bonus02Start) && (amountRaised < bonus02End)) {\r\n                bonus = bonus02;\r\n            }else {\r\n                bonus = 0;\r\n            }\r\n\r\n            amountRaised = safeAdd(amountRaised, amount);\r\n            returnTokenAmount = safeMul(amount, price);\r\n            returnTokenAmount = safeAdd(returnTokenAmount,\r\n            safeDiv( safeMul(returnTokenAmount, bonus), 100) );\r\n        }\r\n\r\n        totalRaised = safeAdd(totalRaised, amount);\r\n        tokenAmountRasied = safeAdd(tokenAmountRasied, returnTokenAmount); //wei\r\n\r\n        fundTransfer(msg.sender, returnTokenAmount);\r\n        emit FundTransfer(msg.sender, amount, true);\r\n\r\n        if (amountRaised >= minGoal) {\r\n            fundingGoalReached = true;\r\n        }\r\n\r\n        if (amountRaised >= maxGoal) {\r\n            fundingGoalReached = true;\r\n            crowdsaleClosed = true;\r\n        }\r\n    }\r\n\r\n    modifier afterDeadline() { if ((now >= freeCrawDeadline) || (amountRaised >= maxGoal)) _; }\r\n\r\n    function checkGoalReached() public afterDeadline {\r\n        if (amountRaised >= minGoal) {\r\n            fundingGoalReached = true;\r\n            emit GoalReached(beneficiary, amountRaised);\r\n        }\r\n        crowdsaleClosed = true;\r\n    }\r\n\r\n    function safeWithdrawal() public afterDeadline {\r\n\r\n        if (!fundingGoalReached && beneficiary != msg.sender) {\r\n                \r\n            uint amount = fundBalance[msg.sender];\r\n            if (amount > 0) {\r\n                msg.sender.transfer(amount);\r\n                emit FundTransfer(msg.sender, amount, false);\r\n                fundBalance[msg.sender] = 0;\r\n            }\r\n        }\r\n\r\n        if (fundingGoalReached && beneficiary == msg.sender) {\r\n            \r\n            if (address(this).balance > 0) {\r\n                msg.sender.transfer(address(this).balance);\r\n                emit FundTransfer(beneficiary, address(this).balance, false);\r\n                perAmountRaised = 0;\r\n            } \r\n        }\r\n    }\r\n\r\n    function perSaleWithDrawal() public {\r\n\r\n        require(beneficiary == msg.sender);\r\n        if(perAmountRaised > 0) {\r\n            msg.sender.transfer(perAmountRaised);\r\n            emit FundTransfer(beneficiary, perAmountRaised, false);\r\n            perAmountRaised = 0;\r\n        }\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"bonus02End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAmountRasied\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus01Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeCrawDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"perSaleWithDrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"managerAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perDeadLine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus02Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perAmountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus02\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perTokenAmountMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus01\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccountByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus01End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"FrozenAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CrowSale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3839c3b9dd34ac26e91bbd1802b9fb20f27408ff6561c82e9a8c626115c78fe6"}]}