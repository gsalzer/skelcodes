{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.23;\r\n\r\n/**\r\n * @author Dan Emmons at Loci.io\r\n */  \r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Contactable token\r\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\r\n * contact information.\r\n */\r\ncontract Contactable is Ownable {\r\n\r\n  string public contactInformation;\r\n\r\n  /**\r\n    * @dev Allows the owner to set a string with their contact information.\r\n    * @param info The contact information to attach to the contract.\r\n    */\r\n  function setContactInformation(string info) onlyOwner public {\r\n    contactInformation = info;\r\n  }\r\n}\r\n\r\ncontract LOCIcredits is Ownable, Contactable {    \r\n    using SafeMath for uint256;    \r\n\r\n    StandardToken token; // LOCIcoin deployed contract\r\n    mapping (address => bool) internal allowedOverrideAddresses;\r\n\r\n    mapping (string => LOCIuser) users;    \r\n    string[] userKeys;\r\n    uint256 userCount;        \r\n\r\n    // convenience for accounting\r\n    event UserAdded( string id, uint256 time );\r\n\r\n    // core usage: increaseCredits, reduceCredits, buyCreditsAndSpend, buyCreditsAndSpendAndRecover\r\n    event CreditsAdjusted( string id, uint8 adjustment, uint256 value, uint8 reason, address register );    \r\n\r\n    // special usage: transferCreditsInternally (only required in the event of a user that created multiple accounts)\r\n    event CreditsTransferred( string id, uint256 value, uint8 reason, string beneficiary );\r\n\r\n    modifier onlyOwnerOrOverride() {\r\n        // owner or any addresses listed in the overrides\r\n        // can perform token transfers while inactive\r\n        require(msg.sender == owner || allowedOverrideAddresses[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    struct LOCIuser {        \r\n        uint256 credits;\r\n        bool registered;\r\n        address wallet;\r\n    }\r\n    \r\n    constructor( address _token, string _contactInformation ) public {\r\n        owner = msg.sender;\r\n        token = StandardToken(_token); // LOCIcoin address\r\n        contactInformation = _contactInformation;        \r\n    }    \r\n    \r\n    function increaseCredits( string _id, uint256 _value, uint8 _reason, address _register ) public onlyOwnerOrOverride returns(uint256) {\r\n                \r\n        LOCIuser storage user = users[_id];\r\n\r\n        if( !user.registered ) {\r\n            user.registered = true;\r\n            userKeys.push(_id);\r\n            userCount = userCount.add(1);\r\n            emit UserAdded(_id,now);\r\n        }\r\n\r\n        user.credits = user.credits.add(_value);        \r\n        require( token.transferFrom( _register, address(this), _value ) );\r\n        emit CreditsAdjusted(_id, 1, _value, _reason, _register);\r\n        return user.credits;\r\n    }\r\n\r\n    function reduceCredits( string _id, uint256 _value, uint8 _reason, address _register ) public onlyOwnerOrOverride returns(uint256) {\r\n             \r\n        LOCIuser storage user = users[_id];     \r\n        require( user.registered );\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        user.credits = user.credits.sub(_value);        \r\n        require( user.credits >= 0 );        \r\n        require( token.transfer( _register, _value ) );           \r\n        emit CreditsAdjusted(_id, 2, _value, _reason, _register);        \r\n        \r\n        return user.credits;\r\n    }        \r\n\r\n    function buyCreditsAndSpend( string _id, uint256 _value, uint8 _reason, address _register, uint256 _spend ) public onlyOwnerOrOverride returns(uint256) {\r\n        increaseCredits(_id, _value, _reason, _register);\r\n        return reduceCredits(_id, _spend, _reason, _register );        \r\n    }        \r\n\r\n    function buyCreditsAndSpendAndRecover(string _id, uint256 _value, uint8 _reason, address _register, uint256 _spend, address _recover ) public onlyOwnerOrOverride returns(uint256) {\r\n        buyCreditsAndSpend(_id, _value, _reason, _register, _spend);\r\n        return reduceCredits(_id, getCreditsFor(_id), _reason, _recover);\r\n    }    \r\n\r\n    function transferCreditsInternally( string _id, uint256 _value, uint8 _reason, string _beneficiary ) public onlyOwnerOrOverride returns(uint256) {        \r\n\r\n        LOCIuser storage user = users[_id];   \r\n        require( user.registered );\r\n\r\n        LOCIuser storage beneficiary = users[_beneficiary];\r\n        if( !beneficiary.registered ) {\r\n            beneficiary.registered = true;\r\n            userKeys.push(_beneficiary);\r\n            userCount = userCount.add(1);\r\n            emit UserAdded(_beneficiary,now);\r\n        }\r\n\r\n        require(_value <= user.credits);        \r\n        user.credits = user.credits.sub(_value);\r\n        require( user.credits >= 0 );\r\n        \r\n        beneficiary.credits = beneficiary.credits.add(_value);\r\n        require( beneficiary.credits >= _value );\r\n\r\n        emit CreditsAdjusted(_id, 2, _value, _reason, 0x0);\r\n        emit CreditsAdjusted(_beneficiary, 1, _value, _reason, 0x0);\r\n        emit CreditsTransferred(_id, _value, _reason, _beneficiary );\r\n        \r\n        return user.credits;\r\n    }   \r\n\r\n    function assignUserWallet( string _id, address _wallet ) public onlyOwnerOrOverride returns(uint256) {\r\n        LOCIuser storage user = users[_id];   \r\n        require( user.registered );\r\n        user.wallet = _wallet;\r\n        return user.credits;\r\n    }\r\n\r\n    function withdrawUserSpecifiedFunds( string _id, uint256 _value, uint8 _reason ) public returns(uint256) {\r\n        LOCIuser storage user = users[_id];           \r\n        require( user.registered, \"user is not registered\" );    \r\n        require( user.wallet == msg.sender, \"user.wallet is not msg.sender\" );\r\n        \r\n        user.credits = user.credits.sub(_value);\r\n        require( user.credits >= 0 );               \r\n        require( token.transfer( user.wallet, _value ), \"transfer failed\" );                   \r\n        emit CreditsAdjusted(_id, 2, _value, _reason, user.wallet );        \r\n        \r\n        return user.credits;\r\n    }\r\n\r\n    function getUserWallet( string _id ) public constant returns(address) {\r\n        return users[_id].wallet;\r\n    }\r\n\r\n    function getTotalSupply() public constant returns(uint256) {        \r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function getCreditsFor( string _id ) public constant returns(uint256) {\r\n        return users[_id].credits;\r\n    }\r\n\r\n    function getUserCount() public constant returns(uint256) {\r\n        return userCount;\r\n    }    \r\n\r\n    function getUserKey(uint256 _index) public constant returns(string) {\r\n        require(_index <= userKeys.length-1);\r\n        return userKeys[_index];\r\n    }\r\n\r\n    function getCreditsAtIndex(uint256 _index) public constant returns(uint256) {\r\n        return getCreditsFor(getUserKey(_index));\r\n    }\r\n\r\n    // non-core functionality \r\n    function ownerSetOverride(address _address, bool enable) external onlyOwner {\r\n        allowedOverrideAddresses[_address] = enable;\r\n    }\r\n\r\n    function isAllowedOverrideAddress(address _addr) external constant returns (bool) {\r\n        return allowedOverrideAddresses[_addr];\r\n    }\r\n\r\n    // enable recovery of ether sent to this contract\r\n    function ownerTransferWei(address _beneficiary, uint256 _value) external onlyOwner {\r\n        require(_beneficiary != 0x0);\r\n        require(_beneficiary != address(token));        \r\n\r\n        // if zero requested, send the entire amount, otherwise the amount requested\r\n        uint256 _amount = _value > 0 ? _value : address(this).balance;\r\n\r\n        _beneficiary.transfer(_amount);\r\n    }\r\n\r\n    // enable recovery of LOCIcoin sent to this contract\r\n    function ownerRecoverTokens(address _beneficiary) external onlyOwner {\r\n        require(_beneficiary != 0x0);            \r\n        require(_beneficiary != address(token));        \r\n\r\n        uint256 _tokensRemaining = token.balanceOf(address(this));\r\n        if (_tokensRemaining > 0) {\r\n            token.transfer(_beneficiary, _tokensRemaining);\r\n        }\r\n    }\r\n\r\n    // enable recovery of any other StandardToken sent to this contract\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return StandardToken(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"uint8\"},{\"name\":\"_register\",\"type\":\"address\"}],\"name\":\"increaseCredits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCreditsAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contactInformation\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"uint8\"},{\"name\":\"_register\",\"type\":\"address\"},{\"name\":\"_spend\",\"type\":\"uint256\"}],\"name\":\"buyCreditsAndSpend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerTransferWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"uint8\"},{\"name\":\"_beneficiary\",\"type\":\"string\"}],\"name\":\"transferCreditsInternally\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isAllowedOverrideAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"uint8\"},{\"name\":\"_register\",\"type\":\"address\"}],\"name\":\"reduceCredits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"ownerRecoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"assignUserWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"getCreditsFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"info\",\"type\":\"string\"}],\"name\":\"setContactInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"uint8\"},{\"name\":\"_register\",\"type\":\"address\"},{\"name\":\"_spend\",\"type\":\"uint256\"},{\"name\":\"_recover\",\"type\":\"address\"}],\"name\":\"buyCreditsAndSpendAndRecover\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"uint8\"}],\"name\":\"withdrawUserSpecifiedFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"ownerSetOverride\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserKey\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"getUserWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_contactInformation\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"adjustment\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"register\",\"type\":\"address\"}],\"name\":\"CreditsAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"string\"}],\"name\":\"CreditsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LOCIcredits","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009c23d67aea7b95d80942e3836bcdf7e708a747c2000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000074c6f63692e696f00000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://3b8952da21209c4a19083f4b0a71a7245b1b25ab94699274b617458eeae5ac06"}]}