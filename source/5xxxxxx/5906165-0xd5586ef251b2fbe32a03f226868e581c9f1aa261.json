{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n/**\r\n * Changes by https://www.docademic.com/\r\n */\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\t\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n/**\r\n * Changes by https://www.docademic.com/\r\n */\r\n\r\n/**\r\n * @title MultiOwnable\r\n * @dev The MultiOwnable contract has multiple owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract MultiOwnable {\r\n\t\r\n\taddress[] public owners;\r\n\tmapping(address => bool) public isOwner;\r\n\t\r\n\tevent OwnerAddition(address indexed owner);\r\n\tevent OwnerRemoval(address indexed owner);\r\n\t\r\n\t/**\r\n\t * @dev The MultiOwnable constructor sets the original `owner` of the contract to the sender\r\n\t * account.\r\n\t */\r\n\tfunction MultiOwnable() public {\r\n\t\tisOwner[msg.sender] = true;\r\n\t\towners.push(msg.sender);\r\n\t}\r\n\t\r\n\t/**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(isOwner[msg.sender]);\r\n\t\t_;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Throws if called by an owner.\r\n\t */\r\n\tmodifier ownerDoesNotExist(address _owner) {\r\n\t\trequire(!isOwner[_owner]);\r\n\t\t_;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier ownerExists(address _owner) {\r\n\t\trequire(isOwner[_owner]);\r\n\t\t_;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Throws if called with a null address.\r\n\t */\r\n\tmodifier notNull(address _address) {\r\n\t\trequire(_address != 0);\r\n\t\t_;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Allows to add a new owner. Transaction has to be sent by an owner.\r\n\t * @param _owner Address of new owner.\r\n\t */\r\n\tfunction addOwner(address _owner)\r\n\tpublic\r\n\tonlyOwner\r\n\townerDoesNotExist(_owner)\r\n\tnotNull(_owner)\r\n\t{\r\n\t\tisOwner[_owner] = true;\r\n\t\towners.push(_owner);\r\n\t\temit OwnerAddition(_owner);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n\t * @param _owner Address of owner.\r\n\t */\r\n\tfunction removeOwner(address _owner)\r\n\tpublic\r\n\tonlyOwner\r\n\townerExists(_owner)\r\n\t{\r\n\t\tisOwner[_owner] = false;\r\n\t\tfor (uint i = 0; i < owners.length - 1; i++)\r\n\t\t\tif (owners[i] == _owner) {\r\n\t\t\t\towners[i] = owners[owners.length - 1];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\towners.length -= 1;\r\n\t\temit OwnerRemoval(_owner);\r\n\t}\r\n\t\r\n}\r\n\r\ncontract DestroyableMultiOwner is MultiOwnable {\r\n\t/**\r\n\t * @notice Allows to destroy the contract and return the tokens to the owner.\r\n\t */\r\n\tfunction destroy() public onlyOwner {\r\n\t\tselfdestruct(owners[0]);\r\n\t}\r\n}\r\n\r\ninterface Token {\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n}\r\n\r\ncontract BrokerImp is DestroyableMultiOwner {\r\n\tusing SafeMath for uint256;\r\n\t\r\n\tToken public token;\r\n\tuint256 public commission;\r\n\taddress public broker;\r\n\taddress public pool;\r\n\tuint256 public ethReward;\r\n\tmapping(address => bool) public ethSent;\r\n\t\r\n\tevent CommissionChanged(uint256 _previousCommission, uint256 _commision);\r\n\tevent EthRewardChanged(uint256 _previousEthReward, uint256 _ethReward);\r\n\tevent BrokerChanged(address _previousBroker, address _broker);\r\n\tevent PoolChanged(address _previousPool, address _pool);\r\n\t\r\n\t/**\r\n\t * @dev Constructor.\r\n\t * @param _token The token address\r\n\t * @param _pool The pool of tokens address\r\n\t * @param _commission The percentage of the commission 0-100\r\n\t * @param _broker The broker address\r\n\t * @param _ethReward The eth to send to the beneficiary of the reward only once in wei\r\n\t */\r\n\tfunction BrokerImp(address _token, address _pool, uint256 _commission, address _broker, uint256 _ethReward) public {\r\n\t\trequire(_token != address(0));\r\n\t\ttoken = Token(_token);\r\n\t\tpool = _pool;\r\n\t\tcommission = _commission;\r\n\t\tbroker = _broker;\r\n\t\tethReward = _ethReward;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Allows to fund the contract with ETH.\r\n\t */\r\n\tfunction fund(uint256 amount) payable public {\r\n\t\trequire(msg.value == amount);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Allows the owner make a reward.\r\n\t * @param _beneficiary the beneficiary address\r\n\t * @param _value the tokens reward in wei\r\n\t */\r\n\tfunction reward(address _beneficiary, uint256 _value) public onlyOwner returns (bool) {\r\n\t\tuint256 hundred = uint256(100);\r\n\t\tuint256 beneficiaryPart = hundred.sub(commission);\r\n\t\tuint256 total = (_value.div(beneficiaryPart)).mul(hundred);\r\n\t\tuint256 brokerCommission = total.sub(_value);\r\n\t\tif (!ethSent[_beneficiary]) {\r\n\t\t\t_beneficiary.transfer(ethReward);\r\n\t\t\tethSent[_beneficiary] = true;\r\n\t\t}\r\n\t\treturn (\r\n\t\ttoken.transferFrom(pool, broker, brokerCommission) &&\r\n\t\ttoken.transferFrom(pool, _beneficiary, _value)\r\n\t\t);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Allows the owner to change the commission of the reward.\r\n\t * @param _commission The percentage of the commission 0-100\r\n\t */\r\n\tfunction changeCommission(uint256 _commission) public onlyOwner {\r\n\t\temit CommissionChanged(commission, _commission);\r\n\t\tcommission = _commission;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Allows the owner to withdraw the balance of the tokens.\r\n\t * @param _ethReward The eth reward to send to the beneficiary in wei\r\n\t */\r\n\tfunction changeEthReward(uint256 _ethReward) public onlyOwner {\r\n\t\temit EthRewardChanged(ethReward, _ethReward);\r\n\t\tethReward = _ethReward;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Allows the owner to change the broker.\r\n\t * @param _broker The broker address\r\n\t */\r\n\tfunction changeBroker(address _broker) public onlyOwner {\r\n\t\temit BrokerChanged(broker, _broker);\r\n\t\tbroker = _broker;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Allows the owner to change the pool of tokens.\r\n\t * @param _pool The pool address\r\n\t */\r\n\tfunction changePool(address _pool) public onlyOwner {\r\n\t\temit PoolChanged(pool, _pool);\r\n\t\tpool = _pool;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"changePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethSent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethReward\",\"type\":\"uint256\"}],\"name\":\"changeEthReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_broker\",\"type\":\"address\"}],\"name\":\"changeBroker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"broker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"changeCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_commission\",\"type\":\"uint256\"},{\"name\":\"_broker\",\"type\":\"address\"},{\"name\":\"_ethReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_previousCommission\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_commision\",\"type\":\"uint256\"}],\"name\":\"CommissionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_previousEthReward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ethReward\",\"type\":\"uint256\"}],\"name\":\"EthRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_previousBroker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_broker\",\"type\":\"address\"}],\"name\":\"BrokerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_previousPool\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"PoolChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"}]","ContractName":"BrokerImp","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000905e337c6c8645263d3521205aa37bf4d034e745000000000000000000000000a9958ed59bafcfe2e156748222ca325b753888810000000000000000000000000000000000000000000000000000000000000050000000000000000000000000797726c7c3156b4a479e95b31865ef98d4d468f400000000000000000000000000000000000000000000000000038d7ea4c68000","Library":"","SwarmSource":"bzzr://57eab5c8b2d30b2d7735c02bdcf581ef0d8fb675ae63095b0a913306c5cfa12a"}]}