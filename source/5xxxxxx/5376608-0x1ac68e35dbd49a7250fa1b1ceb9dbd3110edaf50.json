{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// VikkyToken\r\n// Token name: VikkyToken\r\n// Symbol: VIK\r\n// Decimals: 18\r\n// Telegram community: https://t.me/vikkyglobal\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ForeignToken {\r\n    function balanceOf(address _owner) constant public returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface Token { \r\n    function distr(address _to, uint256 _value) external returns (bool);\r\n    function totalSupply() constant external returns (uint256 supply);\r\n    function balanceOf(address _owner) constant external returns (uint256 balance);\r\n}\r\n\r\ncontract VikkyToken is ERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    address owner = msg.sender;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed; \r\n\r\n    mapping (address => bool) public airdropClaimed;\r\n    mapping (address => bool) public refundClaimed;\r\n    mapping (address => bool) public locked;\r\n\r\n    /* Keep track of Ether contributed and tokens received during Crowdsale */\r\n  \r\n    mapping(address => uint) public icoEtherContributed;\r\n    mapping(address => uint) public icoTokensReceived;\r\n\r\n    string public constant name = \"VikkyToken\";\r\n    string public constant symbol = \"VIK\";\r\n    uint public constant decimals = 18;\r\n    \r\n    uint constant E18 = 10**18;\r\n    uint constant E6 = 10**6;\r\n    \r\n    uint public totalSupply = 1000 * E6 * E18;\r\n    uint public totalDistributed = 220 * E6 * E18;   //For team + Founder\r\n    uint public totalRemaining = totalSupply.sub(totalDistributed); //For ICO    \r\n    uint public tokensPerEth = 20000 * E18; \r\n    \r\n    uint public tokensAirdrop = 266 * E18;\r\n    uint public tokensClaimedAirdrop = 0;\r\n    uint public totalDistributedAirdrop = 20 * E6 * E18;   //Airdrop\r\n\r\n    uint public constant MIN_CONTRIBUTION = 1 ether / 100; // 0.01 Ether\r\n    uint public constant MIN_CONTRIBUTION_PRESALE = 1 ether;\r\n    uint public constant MAX_CONTRIBUTION = 100 ether;\r\n    uint public constant MIN_FUNDING_GOAL =  5000 ether; // 5000 ETH\r\n    /* ICO dates */\r\n\r\n    uint public constant DATE_PRESALE_START = 1523862000; // 04/16/2018 @ 7:00am (UTC)\r\n    uint public constant DATE_PRESALE_END   = 1524466800; // 04/23/2018 @ 7:00am (UTC)\r\n\r\n    uint public constant DATE_ICO_START = 1524466860; // 04/23/2018 @ 7:01am (UTC)\r\n    uint public constant DATE_ICO_END   = 1530342000; // 06/30/2018 @ 7:00am (UTC)\r\n\r\n    uint public constant BONUS_PRESALE      = 30;\r\n    uint public constant BONUS_ICO_ROUND1   = 20;\r\n    uint public constant BONUS_ICO_ROUND2   = 10;\r\n    uint public constant BONUS_ICO_ROUND3   = 5;\r\n    \r\n    event TokensPerEthUpdated(uint _tokensPerEth);    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Refund(address indexed _owner, uint _amount, uint _tokens);\r\n    event Distr(address indexed to, uint256 amount);\r\n    event DistrFinished();\r\n    event Airdrop(address indexed _owner, uint _amount, uint _balance);\r\n    event Burn(address indexed burner, uint256 value);\r\n    event LockRemoved(address indexed _participant);\r\n\r\n    bool public distributionFinished = false;\r\n    \r\n    modifier canDistr() {\r\n        require(!distributionFinished);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    \r\n    function VikkyToken () public {\r\n        owner = msg.sender;\r\n        distr(owner, totalDistributed); //Distribute for owner\r\n    }\r\n\r\n    // Information functions ------------\r\n  \r\n    /* What time is it? */\r\n  \r\n    function atNow() public constant returns (uint) {\r\n        return now;\r\n    }\r\n  \r\n     /* Has the minimum threshold been reached? */\r\n  \r\n    function icoThresholdReached() public constant returns (bool thresholdReached) {\r\n        address myAddress = this;\r\n        uint256 etherBalance = myAddress.balance;\r\n        if (etherBalance < MIN_FUNDING_GOAL) return false;\r\n        return true;\r\n    }  \r\n    \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\r\n        distributionFinished = true;\r\n        emit DistrFinished();\r\n        return true;\r\n    }\r\n    \r\n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\r\n        totalDistributed = totalDistributed.add(_amount);\r\n        totalRemaining = totalRemaining.sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        icoTokensReceived[msg.sender] = icoTokensReceived[msg.sender].add(_amount);\r\n            \r\n        // register Ether            \r\n        icoEtherContributed[msg.sender] = icoEtherContributed[msg.sender].add(msg.value);\r\n    \r\n        // locked\r\n        locked[msg.sender] = true;\r\n\r\n        emit Distr(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);        \r\n        \r\n        return true;     \r\n    }\r\n    \r\n    function distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\r\n                \r\n        require(amount <= totalRemaining);\r\n        \r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            require(amount <= totalRemaining);\r\n            distr(addresses[i], amount);\r\n        }\r\n    \r\n        if (totalDistributed >= totalSupply) {\r\n            distributionFinished = true;\r\n        }\r\n    }\r\n    \r\n    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner canDistr public {\r\n        \r\n        require(addresses.length == amounts.length);\r\n        \r\n        for (uint8 i = 0; i < addresses.length; i++) {\r\n            require(amounts[i] <= totalRemaining);\r\n            distr(addresses[i], amounts[i]);\r\n            \r\n            if (totalDistributed >= totalSupply) {\r\n                distributionFinished = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function doAirdrop(address _participant, uint airdrop) internal {\r\n        \r\n        require( airdrop > 0 );\r\n        require(tokensClaimedAirdrop < totalDistributedAirdrop);\r\n\r\n        // update balances and token issue volume\r\n        airdropClaimed[_participant] = true;\r\n        balances[_participant] = balances[_participant].add(airdrop);\r\n        totalDistributed = totalDistributed.add(airdrop);\r\n        totalRemaining = totalRemaining.sub(airdrop);\r\n        tokensClaimedAirdrop   = tokensClaimedAirdrop.add(airdrop);\r\n    \r\n        // log\r\n        emit Airdrop(_participant, airdrop, balances[_participant]);\r\n        emit Transfer(address(0), _participant, airdrop);\r\n    }\r\n\r\n    function adminClaimAirdrop(address _participant, uint airdrop) external {        \r\n        doAirdrop(_participant, airdrop);\r\n    }\r\n\r\n    function adminClaimAirdropMultiple(address[] _addresses, uint airdrop) external {        \r\n        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], airdrop);\r\n    }\r\n\r\n    function systemClaimAirdropMultiple(address[] _addresses) external {\r\n        uint airdrop = tokensAirdrop;\r\n        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], airdrop);\r\n    }\r\n\r\n \r\n    /* Change tokensPerEth before ICO start */\r\n  \r\n    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {\r\n        require( atNow() < DATE_PRESALE_START );\r\n        tokensPerEth = _tokensPerEth;\r\n        emit TokensPerEthUpdated(_tokensPerEth);\r\n    }\r\n    \r\n    function () external payable {\r\n        buyTokens();\r\n     }\r\n    \r\n    function buyTokens() payable canDistr public {\r\n        uint ts = atNow();\r\n        bool isPresale = false;\r\n        bool isIco = false;\r\n        uint tokens = 0;\r\n\r\n        // minimum contribution\r\n        require( msg.value >= MIN_CONTRIBUTION );\r\n\r\n        // one address transfer hard cap\r\n        require( icoEtherContributed[msg.sender].add(msg.value) <= MAX_CONTRIBUTION );\r\n\r\n        // check dates for presale or ICO\r\n        if (ts > DATE_PRESALE_START && ts < DATE_PRESALE_END) isPresale = true;  \r\n        if (ts > DATE_ICO_START && ts < DATE_ICO_END) isIco = true;\r\n        require( isPresale || isIco );\r\n\r\n        // presale cap in Ether\r\n        if (isPresale) require( msg.value >= MIN_CONTRIBUTION_PRESALE);\r\n                \r\n        address investor = msg.sender;\r\n        \r\n        // get baseline number of tokens\r\n        tokens = tokensPerEth.mul(msg.value) / 1 ether;\r\n\r\n        // apply bonuses (none for last week)\r\n        if (isPresale) {\r\n            tokens = tokens.mul(100 + BONUS_PRESALE) / 100;\r\n        } else if (ts < DATE_ICO_START + 7 days) {\r\n            // round 1 bonus\r\n            tokens = tokens.mul(100 + BONUS_ICO_ROUND1) / 100;\r\n        } else if (ts < DATE_ICO_START + 14 days) {\r\n            // round 2 bonus\r\n            tokens = tokens.mul(100 + BONUS_ICO_ROUND2) / 100;\r\n        } else if (ts < DATE_ICO_START + 21 days) {\r\n            // round 3 bonus\r\n            tokens = tokens.mul(100 + BONUS_ICO_ROUND3) / 100;\r\n        }\r\n\r\n        // ICO token volume cap\r\n        require( totalDistributed.add(tokens) <= totalRemaining );\r\n        \r\n        if (tokens > 0) {\r\n            distr(investor, tokens);\r\n        }\r\n        \r\n\r\n        if (totalDistributed >= totalSupply) {\r\n            distributionFinished = true;\r\n        }                \r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // mitigates the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    // Lock functions -------------------\r\n\r\n    /* Manage locked */\r\n\r\n    function removeLock(address _participant) public {        \r\n        locked[_participant] = false;\r\n        emit LockRemoved(_participant);\r\n    }\r\n\r\n    function removeLockMultiple(address[] _participants) public {        \r\n        for (uint i = 0; i < _participants.length; i++) {\r\n            removeLock(_participants[i]);\r\n        }\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n\r\n        require(_to != address(0));\r\n        require(_amount <= balances[msg.sender]);\r\n        require( locked[msg.sender] == false );\r\n        require( locked[_to] == false );\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\r\n\r\n        require(_to != address(0));\r\n        require(_amount <= balances[_from]);\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n        require( locked[msg.sender] == false );\r\n        require( locked[_to] == false );\r\n        \r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        // mitigates the ERC20 spend/approval race condition\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\r\n        ForeignToken t = ForeignToken(tokenAddress);\r\n        uint bal = t.balanceOf(who);\r\n        return bal;\r\n    }\r\n    \r\n    function withdraw() onlyOwner public {\r\n        address myAddress = this;\r\n        uint256 etherBalance = myAddress.balance;\r\n        owner.transfer(etherBalance);\r\n    }\r\n    \r\n    function burn(uint256 _value) onlyOwner public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        totalDistributed = totalDistributed.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n    \r\n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\r\n        ForeignToken token = ForeignToken(_tokenContract);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(owner, amount);\r\n    }\r\n\r\n    // External functions ---------------\r\n\r\n    /* Reclaiming of funds by contributors in case of a failed crowdsale */\r\n    /* (it will fail if account is empty after ownerClawback) */\r\n\r\n    function reclaimFund(address _participant) public {\r\n        uint tokens; // tokens to destroy\r\n        uint amount; // refund amount\r\n\r\n        // ico is finished and was not successful\r\n        require( atNow() > DATE_ICO_END && !icoThresholdReached() );\r\n\r\n        // check if refund has already been claimed\r\n        require( !refundClaimed[_participant] );\r\n\r\n        // check if there is anything to refund\r\n        require( icoEtherContributed[_participant] > 0 );\r\n\r\n        // update variables affected by refund\r\n        tokens = icoTokensReceived[_participant];\r\n        amount = icoEtherContributed[_participant];\r\n\r\n        balances[_participant] = balances[_participant].sub(tokens);\r\n        totalDistributed    = totalDistributed.sub(tokens);\r\n    \r\n        refundClaimed[_participant] = true;\r\n\r\n        _participant.transfer(amount);\r\n\r\n        // log\r\n        emit Transfer(_participant, 0x0, tokens);\r\n        emit Refund(_participant, amount, tokens);\r\n    }\r\n\r\n    function reclaimFundMultiple(address[] _participants) public {        \r\n        for (uint i = 0; i < _participants.length; i++) {\r\n            reclaimFund(_participants[i]);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"DATE_PRESALE_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_PRESALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoEtherContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_FUNDING_GOAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_ICO_ROUND2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"reclaimFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"removeLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"airdrop\",\"type\":\"uint256\"}],\"name\":\"adminClaimAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_ICO_ROUND3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DATE_PRESALE_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensClaimedAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"airdrop\",\"type\":\"uint256\"}],\"name\":\"adminClaimAirdropMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_ICO_ROUND1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"reclaimFundMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DATE_ICO_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"updateTokensPerEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"systemClaimAirdropMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refundClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DATE_ICO_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CONTRIBUTION_PRESALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributedAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoThresholdReached\",\"outputs\":[{\"name\":\"thresholdReached\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"removeLockMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"TokensPerEthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"LockRemoved\",\"type\":\"event\"}]","ContractName":"VikkyToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8c74eaa518a44a1d77422c37206b86f80341062dfa6632d315f7b1ad8a3348b2"}]}