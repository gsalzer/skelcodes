{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n// Make setPrivate payout any pending payouts\r\n\r\n// ERC20 Token Interface\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n// ERC20 Token Implementation\r\ncontract StandardToken is Token {\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\n/*\r\n    PXLProperty is the ERC20 Cryptocurrency & Cryptocollectable\r\n    * It is a StandardToken ERC20 token and inherits all of that\r\n    * It has the Property structure and holds the Properties\r\n    * It governs the regulators (moderators, admins, root, Property DApps and PixelProperty)\r\n    * It has getters and setts for all data storage\r\n    * It selectively allows access to PXL and Properties based on caller access\r\n    \r\n    Moderation is handled inside PXLProperty, not by external DApps. It's up to other apps to respect the flags, however\r\n*/\r\ncontract PXLProperty is StandardToken {\r\n    /* ERC-20 MetaData */\r\n    string public constant name = \"PixelPropertyToken\";\r\n    string public constant symbol = \"PXL\";\r\n    uint256 public constant decimals = 0;\r\n    \r\n    /* Access Level Constants */\r\n    uint8 constant LEVEL_1_MODERATOR = 1;    // 1: Level 1 Moderator - nsfw-flagging power\r\n    uint8 constant LEVEL_2_MODERATOR = 2;    // 2: Level 2 Moderator - ban power + [1]\r\n    uint8 constant LEVEL_1_ADMIN = 3;        // 3: Level 1 Admin - Can manage moderator levels + [1,2]\r\n    uint8 constant LEVEL_2_ADMIN = 4;        // 4: Level 2 Admin - Can manage admin level 1 levels + [1-3]\r\n    uint8 constant LEVEL_1_ROOT = 5;         // 5: Level 1 Root - Can set property DApps level [1-4]\r\n    uint8 constant LEVEL_2_ROOT = 6;         // 6: Level 2 Root - Can set pixelPropertyContract level [1-5]\r\n    uint8 constant LEVEL_3_ROOT = 7;         // 7: Level 3 Root - Can demote/remove root, transfer root, [1-6]\r\n    uint8 constant LEVEL_PROPERTY_DAPPS = 8; // 8: Property DApps - Power over manipulating Property data\r\n    uint8 constant LEVEL_PIXEL_PROPERTY = 9; // 9: PixelProperty - Power over PXL generation & Property ownership\r\n    /* Flags Constants */\r\n    uint8 constant FLAG_NSFW = 1;\r\n    uint8 constant FLAG_BAN = 2;\r\n    \r\n    /* Accesser Addresses & Levels */\r\n    address pixelPropertyContract; // Only contract that has control over PXL creation and Property ownership\r\n    mapping (address => uint8) public regulators; // Mapping of users/contracts to their control levels\r\n    \r\n    // Mapping of PropertyID to Property\r\n    mapping (uint16 => Property) public properties;\r\n    // Property Owner's website\r\n    mapping (address => uint256[2]) public ownerWebsite;\r\n    // Property Owner's hover text\r\n    mapping (address => uint256[2]) public ownerHoverText;\r\n    // Whether migration is occuring or not\r\n    bool inMigrationPeriod;\r\n    // Old PXLProperty Contract from before update we migrate data from\r\n    PXLProperty oldPXLProperty;\r\n    \r\n    /* ### Ownable Property Structure ### */\r\n    struct Property {\r\n        uint8 flag;\r\n        bool isInPrivateMode; //Whether in private mode for owner-only use or free-use mode to be shared\r\n        address owner; //Who owns the Property. If its zero (0), then no owner and known as a \"system-Property\"\r\n        address lastUpdater; //Who last changed the color of the Property\r\n        uint256[5] colors; //10x10 rgb pixel colors per property. colors[0] is the top row, colors[9] is the bottom row\r\n        uint256 salePrice; //PXL price the owner has the Property on sale for. If zero, then its not for sale.\r\n        uint256 lastUpdate; //Timestamp of when it had its color last updated\r\n        uint256 becomePublic; //Timestamp on when to become public\r\n        uint256 earnUntil; //Timestamp on when Property token generation will stop\r\n    }\r\n    \r\n    /* ### Regulation Access Modifiers ### */\r\n    modifier regulatorAccess(uint8 accessLevel) {\r\n        require(accessLevel <= LEVEL_3_ROOT); // Only request moderator, admin or root levels forr regulatorAccess\r\n        require(regulators[msg.sender] >= accessLevel); // Users must meet requirement\r\n        if (accessLevel >= LEVEL_1_ADMIN) { //\r\n            require(regulators[msg.sender] <= LEVEL_3_ROOT); //DApps can't do Admin/Root stuff, but can set nsfw/ban flags\r\n        }\r\n        _;\r\n    }\r\n    \r\n    modifier propertyDAppAccess() {\r\n        require(regulators[msg.sender] == LEVEL_PROPERTY_DAPPS || regulators[msg.sender] == LEVEL_PIXEL_PROPERTY );\r\n        _;\r\n    }\r\n    \r\n    modifier pixelPropertyAccess() {\r\n        require(regulators[msg.sender] == LEVEL_PIXEL_PROPERTY);\r\n        _;\r\n    }\r\n    \r\n    /* ### Constructor ### */\r\n    function PXLProperty(address oldAddress) public {\r\n        inMigrationPeriod = true;\r\n        oldPXLProperty = PXLProperty(oldAddress);\r\n        regulators[msg.sender] = LEVEL_3_ROOT; // Creator set to Level 3 Root\r\n    }\r\n    \r\n    /* ### Moderator, Admin & Root Functions ### */\r\n    // Moderator Flags\r\n    function setPropertyFlag(uint16 propertyID, uint8 flag) public regulatorAccess(flag == FLAG_NSFW ? LEVEL_1_MODERATOR : LEVEL_2_MODERATOR) {\r\n        properties[propertyID].flag = flag;\r\n        if (flag == FLAG_BAN) {\r\n            require(properties[propertyID].isInPrivateMode); //Can't ban an owner's property if a public user caused the NSFW content\r\n            properties[propertyID].colors = [0, 0, 0, 0, 0];\r\n        }\r\n    }\r\n    \r\n    // Setting moderator/admin/root access\r\n    function setRegulatorAccessLevel(address user, uint8 accessLevel) public regulatorAccess(LEVEL_1_ADMIN) {\r\n        if (msg.sender != user) {\r\n            require(regulators[msg.sender] > regulators[user]); // You have to be a higher rank than the user you are changing\r\n        }\r\n        require(regulators[msg.sender] > accessLevel); // You have to be a higher rank than the role you are setting\r\n        regulators[user] = accessLevel;\r\n    }\r\n    \r\n    function setPixelPropertyContract(address newPixelPropertyContract) public regulatorAccess(LEVEL_2_ROOT) {\r\n        require(newPixelPropertyContract != 0);\r\n        if (pixelPropertyContract != 0) {\r\n            regulators[pixelPropertyContract] = 0; //If we already have a pixelPropertyContract, revoke its ownership\r\n        }\r\n        \r\n        pixelPropertyContract = newPixelPropertyContract;\r\n        regulators[newPixelPropertyContract] = LEVEL_PIXEL_PROPERTY;\r\n    }\r\n    \r\n    function setPropertyDAppContract(address propertyDAppContract, bool giveAccess) public regulatorAccess(LEVEL_1_ROOT) {\r\n        require(propertyDAppContract != 0);\r\n        regulators[propertyDAppContract] = giveAccess ? LEVEL_PROPERTY_DAPPS : 0;\r\n    }\r\n    \r\n        \r\n    /* ### Migration Functions Post Update ### */\r\n    //Migrates the owners of Properties\r\n    function migratePropertyOwnership(uint16[10] propertiesToCopy) public regulatorAccess(LEVEL_3_ROOT) {\r\n        require(inMigrationPeriod);\r\n        for(uint16 i = 0; i < 10; i++) {\r\n            if (propertiesToCopy[i] < 10000) {\r\n                if (properties[propertiesToCopy[i]].owner == 0) { //Only migrate if there is no current owner\r\n                    properties[propertiesToCopy[i]].owner = oldPXLProperty.getPropertyOwner(propertiesToCopy[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    //Migrates the PXL balances of users\r\n    function migrateUsers(address[10] usersToMigrate) public regulatorAccess(LEVEL_3_ROOT) {\r\n        require(inMigrationPeriod);\r\n        for(uint16 i = 0; i < 10; i++) {\r\n            if(balances[usersToMigrate[i]] == 0) { //Only migrate if they have no funds to avoid duplicate migrations\r\n                uint256 oldBalance = oldPXLProperty.balanceOf(usersToMigrate[i]);\r\n                if (oldBalance > 0) {\r\n                    balances[usersToMigrate[i]] = oldBalance;\r\n                    totalSupply += oldBalance;\r\n                    Transfer(0, usersToMigrate[i], oldBalance);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    //Perminantly ends migration so it cannot be abused after it is deemed complete\r\n    function endMigrationPeriod() public regulatorAccess(LEVEL_3_ROOT) {\r\n        inMigrationPeriod = false;\r\n    }\r\n    \r\n    /* ### PropertyDapp Functions ### */\r\n    function setPropertyColors(uint16 propertyID, uint256[5] colors) public propertyDAppAccess() {\r\n        for(uint256 i = 0; i < 5; i++) {\r\n            if (properties[propertyID].colors[i] != colors[i]) {\r\n                properties[propertyID].colors[i] = colors[i];\r\n            }\r\n        }\r\n    }\r\n    \r\n    function setPropertyRowColor(uint16 propertyID, uint8 row, uint256 rowColor) public propertyDAppAccess() {\r\n        if (properties[propertyID].colors[row] != rowColor) {\r\n            properties[propertyID].colors[row] = rowColor;\r\n        }\r\n    }\r\n    \r\n    function setOwnerHoverText(address textOwner, uint256[2] hoverText) public propertyDAppAccess() {\r\n        require (textOwner != 0);\r\n        ownerHoverText[textOwner] = hoverText;\r\n    }\r\n    \r\n    function setOwnerLink(address websiteOwner, uint256[2] website) public propertyDAppAccess() {\r\n        require (websiteOwner != 0);\r\n        ownerWebsite[websiteOwner] = website;\r\n    }\r\n    \r\n    /* ### PixelProperty Property Functions ### */\r\n    function setPropertyPrivateMode(uint16 propertyID, bool isInPrivateMode) public pixelPropertyAccess() {\r\n        if (properties[propertyID].isInPrivateMode != isInPrivateMode) {\r\n            properties[propertyID].isInPrivateMode = isInPrivateMode;\r\n        }\r\n    }\r\n    \r\n    function setPropertyOwner(uint16 propertyID, address propertyOwner) public pixelPropertyAccess() {\r\n        if (properties[propertyID].owner != propertyOwner) {\r\n            properties[propertyID].owner = propertyOwner;\r\n        }\r\n    }\r\n    \r\n    function setPropertyLastUpdater(uint16 propertyID, address lastUpdater) public pixelPropertyAccess() {\r\n        if (properties[propertyID].lastUpdater != lastUpdater) {\r\n            properties[propertyID].lastUpdater = lastUpdater;\r\n        }\r\n    }\r\n    \r\n    function setPropertySalePrice(uint16 propertyID, uint256 salePrice) public pixelPropertyAccess() {\r\n        if (properties[propertyID].salePrice != salePrice) {\r\n            properties[propertyID].salePrice = salePrice;\r\n        }\r\n    }\r\n    \r\n    function setPropertyLastUpdate(uint16 propertyID, uint256 lastUpdate) public pixelPropertyAccess() {\r\n        properties[propertyID].lastUpdate = lastUpdate;\r\n    }\r\n    \r\n    function setPropertyBecomePublic(uint16 propertyID, uint256 becomePublic) public pixelPropertyAccess() {\r\n        properties[propertyID].becomePublic = becomePublic;\r\n    }\r\n    \r\n    function setPropertyEarnUntil(uint16 propertyID, uint256 earnUntil) public pixelPropertyAccess() {\r\n        properties[propertyID].earnUntil = earnUntil;\r\n    }\r\n    \r\n    function setPropertyPrivateModeEarnUntilLastUpdateBecomePublic(uint16 propertyID, bool privateMode, uint256 earnUntil, uint256 lastUpdate, uint256 becomePublic) public pixelPropertyAccess() {\r\n        if (properties[propertyID].isInPrivateMode != privateMode) {\r\n            properties[propertyID].isInPrivateMode = privateMode;\r\n        }\r\n        properties[propertyID].earnUntil = earnUntil;\r\n        properties[propertyID].lastUpdate = lastUpdate;\r\n        properties[propertyID].becomePublic = becomePublic;\r\n    }\r\n    \r\n    function setPropertyLastUpdaterLastUpdate(uint16 propertyID, address lastUpdater, uint256 lastUpdate) public pixelPropertyAccess() {\r\n        if (properties[propertyID].lastUpdater != lastUpdater) {\r\n            properties[propertyID].lastUpdater = lastUpdater;\r\n        }\r\n        properties[propertyID].lastUpdate = lastUpdate;\r\n    }\r\n    \r\n    function setPropertyBecomePublicEarnUntil(uint16 propertyID, uint256 becomePublic, uint256 earnUntil) public pixelPropertyAccess() {\r\n        properties[propertyID].becomePublic = becomePublic;\r\n        properties[propertyID].earnUntil = earnUntil;\r\n    }\r\n    \r\n    function setPropertyOwnerSalePricePrivateModeFlag(uint16 propertyID, address owner, uint256 salePrice, bool privateMode, uint8 flag) public pixelPropertyAccess() {\r\n        if (properties[propertyID].owner != owner) {\r\n            properties[propertyID].owner = owner;\r\n        }\r\n        if (properties[propertyID].salePrice != salePrice) {\r\n            properties[propertyID].salePrice = salePrice;\r\n        }\r\n        if (properties[propertyID].isInPrivateMode != privateMode) {\r\n            properties[propertyID].isInPrivateMode = privateMode;\r\n        }\r\n        if (properties[propertyID].flag != flag) {\r\n            properties[propertyID].flag = flag;\r\n        }\r\n    }\r\n    \r\n    function setPropertyOwnerSalePrice(uint16 propertyID, address owner, uint256 salePrice) public pixelPropertyAccess() {\r\n        if (properties[propertyID].owner != owner) {\r\n            properties[propertyID].owner = owner;\r\n        }\r\n        if (properties[propertyID].salePrice != salePrice) {\r\n            properties[propertyID].salePrice = salePrice;\r\n        }\r\n    }\r\n    \r\n    /* ### PixelProperty PXL Functions ### */\r\n    function rewardPXL(address rewardedUser, uint256 amount) public pixelPropertyAccess() {\r\n        require(rewardedUser != 0);\r\n        balances[rewardedUser] += amount;\r\n        totalSupply += amount;\r\n        Transfer(0, rewardedUser, amount);\r\n    }\r\n    \r\n    function burnPXL(address burningUser, uint256 amount) public pixelPropertyAccess() {\r\n        require(burningUser != 0);\r\n        require(balances[burningUser] >= amount);\r\n        balances[burningUser] -= amount;\r\n        totalSupply -= amount;\r\n        Transfer(burningUser, 0, amount);\r\n    }\r\n    \r\n    function burnPXLRewardPXL(address burner, uint256 toBurn, address rewarder, uint256 toReward) public pixelPropertyAccess() {\r\n        require(balances[burner] >= toBurn);\r\n        if (toBurn > 0) {\r\n            balances[burner] -= toBurn;\r\n            totalSupply -= toBurn;\r\n            Transfer(burner, 0, toBurn);\r\n        }\r\n        if (rewarder != 0) {\r\n            balances[rewarder] += toReward;\r\n            totalSupply += toReward;\r\n            Transfer(0, rewarder, toReward);\r\n        }\r\n    } \r\n    \r\n    function burnPXLRewardPXLx2(address burner, uint256 toBurn, address rewarder1, uint256 toReward1, address rewarder2, uint256 toReward2) public pixelPropertyAccess() {\r\n        require(balances[burner] >= toBurn);\r\n        if (toBurn > 0) {\r\n            balances[burner] -= toBurn;\r\n            totalSupply -= toBurn;\r\n            Transfer(burner, 0, toBurn);\r\n        }\r\n        if (rewarder1 != 0) {\r\n            balances[rewarder1] += toReward1;\r\n            totalSupply += toReward1;\r\n            Transfer(0, rewarder1, toReward1);\r\n        }\r\n        if (rewarder2 != 0) {\r\n            balances[rewarder2] += toReward2;\r\n            totalSupply += toReward2;\r\n            Transfer(0, rewarder2, toReward2);\r\n        }\r\n    }\r\n    \r\n    /* ### All Getters/Views ### */\r\n    function getOwnerHoverText(address user) public view returns(uint256[2]) {\r\n        return ownerHoverText[user];\r\n    }\r\n    \r\n    function getOwnerLink(address user) public view returns(uint256[2]) {\r\n        return ownerWebsite[user];\r\n    }\r\n    \r\n    function getPropertyFlag(uint16 propertyID) public view returns(uint8) {\r\n        return properties[propertyID].flag;\r\n    }\r\n    \r\n    function getPropertyPrivateMode(uint16 propertyID) public view returns(bool) {\r\n        return properties[propertyID].isInPrivateMode;\r\n    }\r\n    \r\n    function getPropertyOwner(uint16 propertyID) public view returns(address) {\r\n        return properties[propertyID].owner;\r\n    }\r\n    \r\n    function getPropertyLastUpdater(uint16 propertyID) public view returns(address) {\r\n        return properties[propertyID].lastUpdater;\r\n    }\r\n    \r\n    function getPropertyColors(uint16 propertyID) public view returns(uint256[5]) {\r\n        if (properties[propertyID].colors[0] != 0 || properties[propertyID].colors[1] != 0 || properties[propertyID].colors[2] != 0 || properties[propertyID].colors[3] != 0 || properties[propertyID].colors[4] != 0) {\r\n            return properties[propertyID].colors;\r\n        } else {\r\n            return oldPXLProperty.getPropertyColors(propertyID);\r\n        }\r\n    }\r\n\r\n    function getPropertyColorsOfRow(uint16 propertyID, uint8 rowIndex) public view returns(uint256) {\r\n        require(rowIndex <= 9);\r\n        return getPropertyColors(propertyID)[rowIndex];\r\n    }\r\n    \r\n    function getPropertySalePrice(uint16 propertyID) public view returns(uint256) {\r\n        return properties[propertyID].salePrice;\r\n    }\r\n    \r\n    function getPropertyLastUpdate(uint16 propertyID) public view returns(uint256) {\r\n        return properties[propertyID].lastUpdate;\r\n    }\r\n    \r\n    function getPropertyBecomePublic(uint16 propertyID) public view returns(uint256) {\r\n        return properties[propertyID].becomePublic;\r\n    }\r\n    \r\n    function getPropertyEarnUntil(uint16 propertyID) public view returns(uint256) {\r\n        return properties[propertyID].earnUntil;\r\n    }\r\n    \r\n    function getRegulatorLevel(address user) public view returns(uint8) {\r\n        return regulators[user];\r\n    }\r\n    \r\n    // Gets the (owners address, Ethereum sale price, PXL sale price, last update timestamp, whether its in private mode or not, when it becomes public timestamp, flag) for a Property\r\n    function getPropertyData(uint16 propertyID, uint256 systemSalePriceETH, uint256 systemSalePricePXL) public view returns(address, uint256, uint256, uint256, bool, uint256, uint8) {\r\n        Property memory property = properties[propertyID];\r\n        bool isInPrivateMode = property.isInPrivateMode;\r\n        //If it's in private, but it has expired and should be public, set our bool to be public\r\n        if (isInPrivateMode && property.becomePublic <= now) { \r\n            isInPrivateMode = false;\r\n        }\r\n        if (properties[propertyID].owner == 0) {\r\n            return (0, systemSalePriceETH, systemSalePricePXL, property.lastUpdate, isInPrivateMode, property.becomePublic, property.flag);\r\n        } else {\r\n            return (property.owner, 0, property.salePrice, property.lastUpdate, isInPrivateMode, property.becomePublic, property.flag);\r\n        }\r\n    }\r\n    \r\n    function getPropertyPrivateModeBecomePublic(uint16 propertyID) public view returns (bool, uint256) {\r\n        return (properties[propertyID].isInPrivateMode, properties[propertyID].becomePublic);\r\n    }\r\n    \r\n    function getPropertyLastUpdaterBecomePublic(uint16 propertyID) public view returns (address, uint256) {\r\n        return (properties[propertyID].lastUpdater, properties[propertyID].becomePublic);\r\n    }\r\n    \r\n    function getPropertyOwnerSalePrice(uint16 propertyID) public view returns (address, uint256) {\r\n        return (properties[propertyID].owner, properties[propertyID].salePrice);\r\n    }\r\n    \r\n    function getPropertyPrivateModeLastUpdateEarnUntil(uint16 propertyID) public view returns (bool, uint256, uint256) {\r\n        return (properties[propertyID].isInPrivateMode, properties[propertyID].lastUpdate, properties[propertyID].earnUntil);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burner\",\"type\":\"address\"},{\"name\":\"toBurn\",\"type\":\"uint256\"},{\"name\":\"rewarder1\",\"type\":\"address\"},{\"name\":\"toReward1\",\"type\":\"uint256\"},{\"name\":\"rewarder2\",\"type\":\"address\"},{\"name\":\"toReward2\",\"type\":\"uint256\"}],\"name\":\"burnPXLRewardPXLx2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"lastUpdater\",\"type\":\"address\"},{\"name\":\"lastUpdate\",\"type\":\"uint256\"}],\"name\":\"setPropertyLastUpdaterLastUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyDAppContract\",\"type\":\"address\"},{\"name\":\"giveAccess\",\"type\":\"bool\"}],\"name\":\"setPropertyDAppContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"earnUntil\",\"type\":\"uint256\"}],\"name\":\"setPropertyEarnUntil\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"}],\"name\":\"getPropertySalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"}],\"name\":\"getPropertyPrivateModeLastUpdateEarnUntil\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"}],\"name\":\"getPropertyLastUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rewardedUser\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rewardPXL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burner\",\"type\":\"address\"},{\"name\":\"toBurn\",\"type\":\"uint256\"},{\"name\":\"rewarder\",\"type\":\"address\"},{\"name\":\"toReward\",\"type\":\"uint256\"}],\"name\":\"burnPXLRewardPXL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"}],\"name\":\"getPropertyOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"}],\"name\":\"getPropertyPrivateMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"row\",\"type\":\"uint8\"},{\"name\":\"rowColor\",\"type\":\"uint256\"}],\"name\":\"setPropertyRowColor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"lastUpdate\",\"type\":\"uint256\"}],\"name\":\"setPropertyLastUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"setPropertyOwnerSalePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"isInPrivateMode\",\"type\":\"bool\"}],\"name\":\"setPropertyPrivateMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"textOwner\",\"type\":\"address\"},{\"name\":\"hoverText\",\"type\":\"uint256[2]\"}],\"name\":\"setOwnerHoverText\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"}],\"name\":\"getPropertyLastUpdaterBecomePublic\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"properties\",\"outputs\":[{\"name\":\"flag\",\"type\":\"uint8\"},{\"name\":\"isInPrivateMode\",\"type\":\"bool\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"lastUpdater\",\"type\":\"address\"},{\"name\":\"salePrice\",\"type\":\"uint256\"},{\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"name\":\"becomePublic\",\"type\":\"uint256\"},{\"name\":\"earnUntil\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"setPropertySalePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"websiteOwner\",\"type\":\"address\"},{\"name\":\"website\",\"type\":\"uint256[2]\"}],\"name\":\"setOwnerLink\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"regulators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"privateMode\",\"type\":\"bool\"},{\"name\":\"earnUntil\",\"type\":\"uint256\"},{\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"name\":\"becomePublic\",\"type\":\"uint256\"}],\"name\":\"setPropertyPrivateModeEarnUntilLastUpdateBecomePublic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getOwnerHoverText\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"setPropertyFlag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"accessLevel\",\"type\":\"uint8\"}],\"name\":\"setRegulatorAccessLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"}],\"name\":\"getPropertyFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"}],\"name\":\"getPropertyEarnUntil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertiesToCopy\",\"type\":\"uint16[10]\"}],\"name\":\"migratePropertyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"}],\"name\":\"getPropertyPrivateModeBecomePublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"becomePublic\",\"type\":\"uint256\"}],\"name\":\"setPropertyBecomePublic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"systemSalePriceETH\",\"type\":\"uint256\"},{\"name\":\"systemSalePricePXL\",\"type\":\"uint256\"}],\"name\":\"getPropertyData\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"salePrice\",\"type\":\"uint256\"},{\"name\":\"privateMode\",\"type\":\"bool\"},{\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"setPropertyOwnerSalePricePrivateModeFlag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"}],\"name\":\"getPropertyLastUpdater\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRegulatorLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"lastUpdater\",\"type\":\"address\"}],\"name\":\"setPropertyLastUpdater\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"becomePublic\",\"type\":\"uint256\"},{\"name\":\"earnUntil\",\"type\":\"uint256\"}],\"name\":\"setPropertyBecomePublicEarnUntil\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"rowIndex\",\"type\":\"uint8\"}],\"name\":\"getPropertyColorsOfRow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPixelPropertyContract\",\"type\":\"address\"}],\"name\":\"setPixelPropertyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"}],\"name\":\"getPropertyOwnerSalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"propertyOwner\",\"type\":\"address\"}],\"name\":\"setPropertyOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endMigrationPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerWebsite\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"}],\"name\":\"getPropertyColors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"},{\"name\":\"colors\",\"type\":\"uint256[5]\"}],\"name\":\"setPropertyColors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getOwnerLink\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"usersToMigrate\",\"type\":\"address[10]\"}],\"name\":\"migrateUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burningUser\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnPXL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerHoverText\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"propertyID\",\"type\":\"uint16\"}],\"name\":\"getPropertyBecomePublic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"oldAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PXLProperty","CompilerVersion":"v0.4.24-nightly.2018.5.16+commit.7f965c86","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f07d979303c50a8632848cb154c6b30980218c07","Library":"","SwarmSource":"bzzr://f428c8f87a694106e79f2897c6831eebdce58b9eb554d0290c7ef48d8faf4787"}]}