{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n//credit given to original creator of the cornfarm contract and the original taxman contract\r\n//to view how many of a specific token you have in the contract use the userInventory option in MEW.\r\n//First address box copy paste in your eth address.  Second address box is the contract address of the Ethercraft item you want to check.    \r\n//WorkDone = # of that token you have in the farm contract * 10^18.\r\n\r\n\r\ninterface CornFarm\r\n{\r\n    function buyObject(address _beneficiary) public payable;\r\n}\r\n\r\ninterface Corn\r\n{\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract FreeTaxManFarmer {\r\n    using SafeMath for uint256;\r\n    \r\n    bool private reentrancy_lock = false;\r\n\r\n    struct tokenInv {\r\n      uint256 workDone;\r\n    }\r\n    \r\n    mapping(address => mapping(address => tokenInv)) public userInventory;\r\n    \r\n    modifier nonReentrant() {\r\n        require(!reentrancy_lock);\r\n        reentrancy_lock = true;\r\n        _;\r\n        reentrancy_lock = false;\r\n    }\r\n    \r\n    function pepFarm(address item_shop_address, address token_address, uint256 buy_amount) nonReentrant external {\r\n        for (uint8 i = 0; i < buy_amount; i++) {\r\n            CornFarm(item_shop_address).buyObject(this);\r\n        }\r\n        userInventory[msg.sender][token_address].workDone = userInventory[msg.sender][token_address].workDone.add(uint256(buy_amount * 10**18));\r\n    }\r\n    \r\n    function reapFarm(address token_address) nonReentrant external {\r\n        require(userInventory[msg.sender][token_address].workDone > 0);\r\n        Corn(token_address).transfer(msg.sender, userInventory[msg.sender][token_address].workDone);\r\n        userInventory[msg.sender][token_address].workDone = 0;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"reapFarm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInventory\",\"outputs\":[{\"name\":\"workDone\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"item_shop_address\",\"type\":\"address\"},{\"name\":\"token_address\",\"type\":\"address\"},{\"name\":\"buy_amount\",\"type\":\"uint256\"}],\"name\":\"pepFarm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FreeTaxManFarmer","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://308ceb33d2b3fabba3e85aad8798cc9bb1e7d82f5ed4b4c8644720015782d22e"}]}