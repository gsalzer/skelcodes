{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.20;\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\n \r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface ERC20Interface {\r\n     function totalSupply() external constant returns (uint);\r\n     function balanceOf(address tokenOwner) external constant returns (uint balance);\r\n     function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\r\n     function transfer(address to, uint tokens) external returns (bool success);\r\n     function approve(address spender, uint tokens) external returns (bool success);\r\n     function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n     event Transfer(address indexed from, address indexed to, uint tokens);\r\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract BaapPayCrowdsale is Ownable{\r\n  using SafeMath for uint256;\r\n \r\n  // The token being sold\r\n  ERC20Interface public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public ratePerWei = 4200;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  uint256 TOKENS_SOLD;\r\n  uint256 minimumContribution = 1 * 10 ** 16; //0.01 eth is the minimum contribution\r\n  \r\n  uint256 maxTokensToSaleInPreICOPhase = 3000000;\r\n  uint256 maxTokensToSaleInICOPhase = 83375000;\r\n  uint256 maxTokensToSale = 94000000;\r\n  \r\n  bool isCrowdsalePaused = false;\r\n  \r\n  struct Buyers \r\n  {\r\n      address buyerAddress;\r\n      uint tokenAmount;\r\n  }\r\n   Buyers[] tokenBuyers;\r\n   Buyers buyer;\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n   modifier checkSize(uint numwords) {\r\n        assert(msg.data.length >= (numwords * 32) + 4);\r\n        _;\r\n    }     \r\n    \r\n  function BaapPayCrowdsale(uint256 _startTime, address _wallet, address _tokenToBeUsed) public \r\n  {\r\n    //require(_startTime >=now);\r\n    require(_wallet != 0x0);\r\n\r\n    //startTime = _startTime;  \r\n    startTime = now;\r\n    endTime = startTime + 61 days;\r\n    require(endTime >= startTime);\r\n   \r\n    owner = _wallet;\r\n    \r\n    maxTokensToSaleInPreICOPhase = maxTokensToSaleInPreICOPhase.mul(10**18);\r\n    maxTokensToSaleInICOPhase = maxTokensToSaleInICOPhase.mul(10**18);\r\n    maxTokensToSale = maxTokensToSale.mul(10**18);\r\n    \r\n    token = ERC20Interface(_tokenToBeUsed);\r\n  }\r\n  \r\n  // fallback function can be used to buy tokens\r\n  function () public  payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n    function determineBonus(uint tokens) internal view returns (uint256 bonus) \r\n    {\r\n        uint256 timeElapsed = now - startTime;\r\n        uint256 timeElapsedInDays = timeElapsed.div(1 days);\r\n        if (timeElapsedInDays <20)\r\n        {\r\n            if (TOKENS_SOLD <maxTokensToSaleInPreICOPhase)\r\n            {\r\n                bonus = tokens.mul(20); //20% bonus\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreICOPhase);\r\n            }\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInPreICOPhase && TOKENS_SOLD < maxTokensToSale)\r\n            {\r\n                bonus = tokens.mul(15); //15% bonus\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\r\n            }\r\n            else \r\n            {\r\n                bonus = 0;\r\n            }\r\n        }\r\n        else if (timeElapsedInDays >= 20 && timeElapsedInDays <27)\r\n        {\r\n            revert();  //no sale during this time, so revert this transaction\r\n        }\r\n        else if (timeElapsedInDays >= 27 && timeElapsedInDays<36)\r\n        {\r\n            if (TOKENS_SOLD < maxTokensToSaleInICOPhase)\r\n            {\r\n                bonus = tokens.mul(15); //15% bonus\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInICOPhase);\r\n            }\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInICOPhase && TOKENS_SOLD < maxTokensToSale)\r\n            {\r\n                bonus = tokens.mul(10); //10% bonus\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\r\n            }\r\n        }\r\n        else if (timeElapsedInDays >= 36 && timeElapsedInDays<46)\r\n        {\r\n            if (TOKENS_SOLD < maxTokensToSaleInICOPhase)\r\n            {\r\n                bonus = tokens.mul(10); //10% bonus\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInICOPhase);\r\n            }\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInICOPhase && TOKENS_SOLD < maxTokensToSale)\r\n            {\r\n                bonus = tokens.mul(5); //5% bonus\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\r\n            }\r\n        }\r\n        else if (timeElapsedInDays >= 46 && timeElapsedInDays<56)\r\n        {\r\n            if (TOKENS_SOLD < maxTokensToSaleInICOPhase)\r\n            {\r\n                bonus = tokens.mul(5); //5% bonus\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInICOPhase);\r\n            }\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInICOPhase && TOKENS_SOLD < maxTokensToSale)\r\n            {\r\n                bonus = 0;\r\n            }\r\n        }\r\n        else \r\n        {\r\n            bonus = 0;\r\n        }\r\n    }\r\n\r\n  // low level token purchase function\r\n  \r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(isCrowdsalePaused == false);\r\n    require(validPurchase());\r\n    require(msg.value>= minimumContribution);\r\n    require(TOKENS_SOLD<maxTokensToSale);\r\n   \r\n    uint256 weiAmount = msg.value;\r\n    \r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(ratePerWei);\r\n    uint256 bonus = determineBonus(tokens);\r\n    tokens = tokens.add(bonus);\r\n    require(TOKENS_SOLD.add(tokens)<=maxTokensToSale);\r\n    \r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    \r\n    buyer = Buyers({buyerAddress:beneficiary,tokenAmount:tokens});\r\n    tokenBuyers.push(buyer);\r\n    TokenPurchase(owner, beneficiary, weiAmount, tokens);\r\n    TOKENS_SOLD = TOKENS_SOLD.add(tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  function forwardFunds() internal {\r\n    owner.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n  \r\n   \r\n    function changeEndDate(uint256 endTimeUnixTimestamp) public onlyOwner returns(bool) {\r\n        endTime = endTimeUnixTimestamp;\r\n    }\r\n    \r\n    function changeStartDate(uint256 startTimeUnixTimestamp) public onlyOwner returns(bool) {\r\n        startTime = startTimeUnixTimestamp;\r\n    }\r\n    \r\n    function setPriceRate(uint256 newPrice) public onlyOwner returns (bool) {\r\n        ratePerWei = newPrice;\r\n    }\r\n    \r\n    function changeMinimumContribution(uint256 minContribution) public onlyOwner returns (bool) {\r\n        minimumContribution = minContribution.mul(10 ** 15);\r\n    }\r\n     /**\r\n     * function to pause the crowdsale \r\n     * can only be called from owner wallet\r\n     **/\r\n     \r\n    function pauseCrowdsale() public onlyOwner returns(bool) {\r\n        isCrowdsalePaused = true;\r\n    }\r\n\r\n    /**\r\n     * function to resume the crowdsale if it is paused\r\n     * can only be called from owner wallet\r\n     * if the crowdsale has been stopped, this function would not resume it\r\n     **/ \r\n    function resumeCrowdsale() public onlyOwner returns (bool) {\r\n        isCrowdsalePaused = false;\r\n    }\r\n    \r\n     // ------------------------------------------------------------------------\r\n     // Remaining tokens for sale\r\n     // ------------------------------------------------------------------------\r\n     function remainingTokensForSale() public constant returns (uint) {\r\n         return maxTokensToSale.sub(TOKENS_SOLD);\r\n     }\r\n     \r\n     function showMyTokenBalance() public constant returns (uint) {\r\n         return token.balanceOf(msg.sender);\r\n     }\r\n     \r\n     function pullTokensBack() public onlyOwner {\r\n        token.transfer(owner,token.balanceOf(address(this))); \r\n     }\r\n     \r\n     function sendTokensToBuyers() public onlyOwner {\r\n         require(hasEnded());\r\n         for (uint i=0;i<tokenBuyers.length;i++)\r\n         {\r\n             token.transfer(tokenBuyers[i].buyerAddress,tokenBuyers[i].tokenAmount);\r\n         }\r\n     }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"startTimeUnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"changeStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"endTimeUnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"changeEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendTokensToBuyers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minContribution\",\"type\":\"uint256\"}],\"name\":\"changeMinimumContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePerWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pullTokensBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showMyTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenToBeUsed\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BaapPayCrowdsale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c542b031d4f7f8d476f82dec4e5c8f5bc75119d80000000000000000000000005f7d95329e806befa024982e91b7127393737249","Library":"","SwarmSource":"bzzr://a1564d24463f7733e6e149d50fd1392ec325beaf8cae833cfee45501d8a9f8ee"}]}