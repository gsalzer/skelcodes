{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n\r\nBETA/DRAFT - NOT TESTED !!! - DO NOT USE THIS SOURCE FOR LIVE-REVARD\r\nDraft 0.3 - 06.feb.2018\r\n      0.4 - 08.feb.2018 .... unused\r\n\r\n*/\r\n\r\n/*\r\n\r\nLoveCoin reward contract (DRAFT)\r\n------------------------\r\n\r\nUse case:\r\nToken holders can receive rewards that are bound to a ERC-20 token (see Constructor).\r\nThe Token-creator (or several DApps) can deposit profits to this reward-smart-contract.\r\nThe Token-holder can deposit his tokens in this SC and can later (see Constructor) withdraw \r\nhis tokens plus the reward in ETH. \r\n\r\nFeatures of this Contract:\r\n1) No gas-costs for token creator. Every user is self-responsible for receiving rewards by interacting with\r\n   this smart contract.\r\n2) compatible with any existing ERC-20 token.\r\n\r\n\r\nExample in detail: How a Token-Holder can get rewards in ETH for his tokens?\r\n* Six day's in a week this Reward-SC can receive profits in ETH from (TokenCreator or DApp's).\r\n  In this period the SC can receive ETH and tokens.\r\n  - ETH are received by normal ETH transactions ( function () payable )\r\n  - Tokens are received by 1) calling the approve-function of the ERC-20 token contract,\r\n                           2) calling the confirm_token_deposit() of this smart contract.\r\n \r\n                           \r\n* One day in a week is 'claiming day' for 24 hours. In this period all token deposits should\r\n  have done. By calling (...to be continued)\r\n\r\nwithdraw_token_and_eth()\r\n                     _________________                          ____________\r\n                    /                 \\                        /\r\no------------------o                   o-----------------------0 \r\n\r\n\r\nbool claim_period = true\r\nfunction bool claim_eth_by_address(adr)\r\n(function bool claim_eth_by_id_id_range( int start_id, int stop_id )\r\n\r\n*/\r\n\r\npragma solidity ^0.4.19;\r\n\r\n\r\nlibrary SafeMath {\r\n  //internals\r\n\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  \r\n function safeDiv(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }  \r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n} // library SafeMath\r\n\r\n\r\n\r\n// We need this interface to interact with our ERC20 tokencontract\r\ncontract ERC20Interface \r\n{\r\n         // function totalSupply() public constant returns (uint256);\r\n      function balanceOf(address tokenOwner) public constant returns (uint256 balance);\r\n      function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\r\n      function transfer(address to, uint256 tokens) public returns (bool success);\r\n         // function approve(address spender, uint256 tokens) public returns (bool success);\r\n         // function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n         // event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n         // event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\n// ---\r\n// Main reward class\r\n//\r\ncontract RewardContract\r\n{\r\nusing SafeMath for uint256;              // Make sure to use SafeMath\r\n\r\naddress public owner;                    // The owner of this contract\r\naddress public thisAddress;              // The address of this contract\r\naddress TokenContractAddress;            // The address of the ERC20-Token, rewards are paying for\r\nERC20Interface TokenContract;            // Interface of the ERC20-Token\r\nuint256 public TokenTotal;               // Amount of all deposited tokens\r\nuint256 public CLAIM_INTERVAL_DAYS;      // Interval of claiming_days, f.e. 7 for every thursday, if\r\n                                         // thursday 0:00 is the start date of deploying this contract.\r\n\r\nuint    public NumberAddresses;          // Number of registered addresses     \r\naddress public firstAddress;             // First Address (for chained Account-list)\r\naddress public recently_added_address;   // Recently (the last) added address\r\n\r\nuint    public timestamp_contract_start; // First timestamp of constructor\r\n   \r\nstring  public debug1;    // RAUS\r\nstring  public debug2;    // RAUS\r\nstring  public debug3;    // RAUS\r\naddress public debug4;    // RAUS\r\nuint256 public debug_wei; // RAUS\r\n \r\n \r\n// Stucture for a single account.\r\nstruct Account\r\n{\r\nuint256 id;                // Integer index of this entry in AccountStructs\r\nuint256 amount_eth;        // Amount of ETH \r\nuint256 amount_token;      // Amount of Token\r\naddress prev_address;      // Previous address of added account\r\nuint256 last_claimed_day;  // Remember the used claiming_day of this account\r\n} // struct Account\r\n\r\n// Public mapping of all accounts\r\nmapping(address => Account) public AccountStructs;\r\n\r\n    \r\n\r\n// (FIN)\r\n// ---\r\n// Construktor\r\n// \r\nfunction RewardContract () public\r\n{\r\nowner                    = msg.sender;\r\ntimestamp_contract_start = now;\r\n\r\n// Global initialisation ------------------------------------------------------------\r\n\r\n// Address of TokenContract (Lovcoin)\r\nTokenContractAddress     = 0x26B1FBE292502da2C8fCdcCF9426304d0900b703;\r\n\r\n// Interval to claimday - f.e. every 7 days (\r\n//CLAIM_INTERVAL_DAYS      = 7; \r\nCLAIM_INTERVAL_DAYS      = 2; \r\n\r\n// ----------------------------------------------------------------------------------\r\n\r\nTokenContract            = ERC20Interface(TokenContractAddress); // LOV's is 0x26B1FBE292502da2C8fCdcCF9426304d0900b703\r\nNumberAddresses          = 0; // Solidity uses zero-state default values, only to make it more obvious\r\n\r\n// Address of this contract\r\nthisAddress              = address(this);\r\n\r\n} // Construktor\r\n\r\n\r\n\r\n\r\n// (FIN)\r\n//\r\n// Calculates 'percent' \r\n// (Inspired by https://stackoverflow.com/questions/42738640/division-in-ethereum-solidity)\r\n//\r\nfunction percent(uint numerator, uint denominator, uint precision) public \r\n\r\n  constant returns(uint quotient) {\r\n\r\n         // caution, check safe-to-multiply here\r\n        uint _numerator  = numerator * 10 ** (precision+1);\r\n        // with rounding of last digit\r\n        uint _quotient =  ((_numerator / denominator) + 5) / 10;\r\n        return ( _quotient);\r\n} // function percent\r\n  \r\n\r\n\r\n// (FIN)\r\n//\r\n// calc_wei_rewards\r\n// Calculate the ether (wei) which the token holder may claim.\r\n// This is a stand-alone function without recognizing global variables.\r\n// Here the user can check, how many ETH he may claim for rewards \r\n//\r\nfunction calc_wei_rewards( uint256 amountToken, uint256 TokenTotal, uint256 weiTotal ) public constant returns (uint256)\r\n{\r\nuint256 wei_reward = 0;\r\n\r\nuint precision = 18;\r\nuint faktor = 10 ** precision; // **-operator is exp\r\n\r\nuint percent_big = percent(amountToken, TokenTotal, precision);\r\n\r\nwei_reward = weiTotal * percent_big;\r\n\r\nwei_reward = wei_reward / faktor;\r\n\r\n/*\r\nExample:\r\n1 ETH = 1000000000000000000 WEI (18 Nullen)\r\n\r\namountToken = 256\r\nTokenTotal = 1000\r\n\r\nBeispielwerte: (4 ETH)\r\n4000000000000000000\r\n\r\n\r\n10000000000 - 10 Millarden\r\n50000000\r\n*/\r\n\r\nreturn(wei_reward); \r\n} // calc_wei_rewards\r\n\r\n\r\n\r\n\r\n// (FIN)\r\n// ---\r\n// claim_eth_by_address()\r\n//\r\nfunction claim_eth_by_address() public returns (bool)\r\n{\r\nbool ret;\r\nuint256 wei_rewards;\r\n\r\n\r\nif ( is_claim_period( now ) == true )\r\n   {\r\n   // Calculate current day number since starttime.\r\n   uint seconds_since_start = now - timestamp_contract_start; // 'now' is a keyword in solidity - current timestamp / blocktime\r\n   uint days_since_start    = seconds_since_start / 86400;    // A day has 86400 seconds.\r\n\r\n   // A tokenholder may only claim one time during the claim period.\r\n   if (AccountStructs[msg.sender].last_claimed_day != days_since_start)\r\n      {\r\n       \r\n      wei_rewards = calc_wei_rewards( AccountStructs[msg.sender].amount_token, TokenTotal, this.balance );\r\n      debug_wei = wei_rewards; // DEBUG - RAUS\r\n      \r\n    \r\n    \r\n      // Remember this claiming day\r\n      AccountStructs[msg.sender].last_claimed_day = days_since_start;\r\n   \r\n      // Assign ETH-reward to account \r\n      AccountStructs[msg.sender].amount_eth = AccountStructs[msg.sender].amount_eth.safeAdd( wei_rewards ) ;\r\n\r\n      ret = true;\r\n      } // if (AccountStructs[msg.sender].last_claimed_day != days_since_start)\r\n   \r\n   } // if ( is_claim_period( now ) == true )\r\n   \r\n \r\n \r\nreturn(ret);\r\n} // claim_eth_by_address\r\n\r\n\r\n \r\n\r\n// (FIN)\r\n// VORHER Externer Token-Aufruf: function (allowance)\r\n// -> External call ERC20 Token\r\n// approve(address _spender, uint256 _value)\r\n// approve(0xab98cbeb247331ab72a924bd41ce6a3a64161a4e, 5042 ); // Einzahlung von 5042 Tokens\r\nfunction confirm_token_deposit() public returns (bool)\r\n//function confirm_token_deposit(address msg_sender, uint256 amount_token ) public returns (bool)\r\n{\r\nbool    ret          = false;\r\nuint256 amount_token = 0;   \r\n\r\n\r\n\r\nif ( is_claim_period( now ) == false )\r\n   {\r\n   //\r\n   // if new Account\r\n   //\r\n   if ( AccountStructs[msg.sender].id <= 0 )\r\n      {\r\n      NumberAddresses++;\r\n      if (NumberAddresses == 1) firstAddress  = msg.sender;\r\n      AccountStructs[msg.sender].id           = NumberAddresses; \r\n      AccountStructs[msg.sender].prev_address = recently_added_address;\r\n      recently_added_address                  = msg.sender; \r\n      }\r\n   \r\n   // Check token allowance   \r\n   amount_token = TokenContract.allowance( msg.sender, thisAddress );\r\n\r\n   // Transfer token to this contract\r\n   TokenContract.transfer(thisAddress, amount_token);\r\n   \r\n   // Register the new token\r\n   if (amount_token > 0)\r\n      {      \r\n      TokenTotal = TokenTotal.safeAdd(amount_token);\r\n      AccountStructs[msg.sender].amount_token = AccountStructs[msg.sender].amount_token.safeAdd( amount_token ) ;\r\n      ret = true;\r\n      } \r\n\r\n   \r\n   } // if ( is_claim_period() == true )\r\n   else \r\n       {\r\n       revert();\r\n       }\r\n\r\n\r\n\r\n\r\n\r\nreturn(ret);\r\n} // confirm_token_deposit\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// (FIN)\r\n// ---\r\n// get_account_id\r\n// \r\nfunction get_account_id( address _address ) public constant returns (uint256)\r\n{\r\nuint256 ret = AccountStructs[_address].id;\r\nreturn (ret);\r\n} // get_account_id\r\n\r\n \r\n \r\n// (FIN)  \r\n// ---\r\n// get_account_balance_eth\r\n//  \r\nfunction get_account_balance_eth( address _address ) public constant returns (uint256)\r\n{\r\nuint256 ret = AccountStructs[_address].amount_eth;\r\nreturn (ret);\r\n} // get_account_balance_eth\r\n\r\n\r\n\r\n// (FIN)\r\n// ---\r\n// get_account_balance_token\r\n// \r\nfunction get_account_balance_token( address _address ) public constant returns (uint256)\r\n{\r\nuint256 ret = AccountStructs[_address].amount_token;\r\nreturn (ret);\r\n} // get_account_balance_token\r\n\r\n\r\n\r\n\r\n// (FIN)\r\n// ---\r\n// Payment\r\n//\r\nfunction () payable public\r\n{\r\n/// Nur ausserhalb der Claim-period, ansonsten error\r\n /// better do nothing here?\r\nif ( is_claim_period( now ) == false )\r\n   {\r\n   // do nothing     \r\n   } // if ( is_claim_period() == true )\r\n   else \r\n       {\r\n       revert();\r\n       }\r\n       \r\n} // ()\r\n\r\n\r\n\r\n// (FIN)\r\n// ---\r\n// withdraw_token_and_eth\r\n// Komplette ETH und Token zurueckueberweisen\r\n// Withdraw All or nothing.\r\n// \r\nfunction withdraw_token_and_eth() public returns (bool)\r\n{\r\nbool ret = false;\r\n\r\nif ( is_claim_period( now ) == false )\r\n   {\r\n   uint amount_token = AccountStructs[msg.sender].amount_token;\r\n   uint amount_eth   = AccountStructs[msg.sender].amount_eth;\r\n   \r\n   AccountStructs[msg.sender].amount_token = 0;\r\n   AccountStructs[msg.sender].amount_eth   = 0;\r\n\r\n   // Subtract tokens from total amount\r\n   TokenTotal = TokenTotal.safeSub( amount_token );\r\n      \r\n      \r\n   TokenContract.transfer(msg.sender, amount_token );   \r\n   msg.sender.transfer(amount_eth);\r\n   ret = true;\r\n   } // if...\r\n   \r\nreturn (ret);\r\n} // withdraw_token_and_eth\r\n\r\n\r\n\r\n\r\n\r\n// (FIN)\r\n// is_claim_period - checks if now is the day for claiming\r\n//\r\nfunction is_claim_period( uint timestamp_to_check ) public constant returns (bool)\r\n{\r\nbool check = false;\r\n\r\nuint seconds_since_start = timestamp_to_check - timestamp_contract_start;\r\nuint days_since_start    = seconds_since_start / 86400; // A day has 86400 seconds\r\n\r\nif ( ( days_since_start % CLAIM_INTERVAL_DAYS ) == 0) check = true; \r\n                                  \r\nreturn( check );    \r\n} // is_claim_period\r\n\r\n\r\n\r\n\r\n\r\n// DEBUG - RAUS, wenn das hier live geht!!!\r\n// Kill (owner only)\r\n//\r\nfunction kill () public\r\n{\r\nif (msg.sender != owner) return;\r\n\r\n// Transfer tokens back to owner\r\nuint256 balance = TokenContract.balanceOf(this);\r\nassert(balance > 0);\r\nTokenContract.transfer(owner, balance);\r\n \r\nowner.transfer( this.balance );\r\nselfdestruct(owner);\r\n} // kill\r\n\r\n\r\n} // contract RewardContract","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"},{\"name\":\"precision\",\"type\":\"uint256\"}],\"name\":\"percent\",\"outputs\":[{\"name\":\"quotient\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_token_and_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp_to_check\",\"type\":\"uint256\"}],\"name\":\"is_claim_period\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"get_account_id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirm_token_deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AccountStructs\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"amount_eth\",\"type\":\"uint256\"},{\"name\":\"amount_token\",\"type\":\"uint256\"},{\"name\":\"prev_address\",\"type\":\"address\"},{\"name\":\"last_claimed_day\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recently_added_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim_eth_by_address\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NumberAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amountToken\",\"type\":\"uint256\"},{\"name\":\"TokenTotal\",\"type\":\"uint256\"},{\"name\":\"weiTotal\",\"type\":\"uint256\"}],\"name\":\"calc_wei_rewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debug2\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debug3\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debug1\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CLAIM_INTERVAL_DAYS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debug4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timestamp_contract_start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thisAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"get_account_balance_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debug_wei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"get_account_balance_token\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"RewardContract","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://219cf5c878b2e410a30ff03ec503491b8c5b418e69b9d55716ae63de4363f228"}]}