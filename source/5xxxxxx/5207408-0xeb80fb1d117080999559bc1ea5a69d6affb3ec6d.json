{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n// Aethia CHI sell contract. Not affiliated with the game developers. Use at your own risk.\r\n//\r\n// BUYERS: to protect against scams:\r\n// 1) check the price by clicking on \"Read smart contract\" in etherscan. Two prices are published\r\n//     a) price for 1 Chi in wei (1 wei = 10^-18 ETH), and b) number of Chi you get for 1 ETH\r\n// 2) Make sure you use high enough gas price that your TX confirms within 1 hour, to avoid the scam\r\n//    detailed below*\r\n// 3) Check the hardcoded Chi address below givet to ChiToken() constructor. Make sure this is the real Chi\r\n//    token. Scammers could clone this contract and modify the address to sell you fake tokens.\r\n//\r\n//\r\n// This contract enables trustless exchange of Chi tokens for ETH.\r\n// Anyone can use this contract to sell Chi, as long as it is in an empty state.\r\n// Contract is in an empty state if it has no CHI or ETH in it and is not in cooldown\r\n// The main idea behind the contract is to keep it very simple to use, especially for buyers.\r\n// Sellers need to set allowance and call the setup() function using MEW, which is a little more involved.\r\n// Buyers can use Metamask to send and receive Chi tokens.\r\n//\r\n// You are welcome to clone this contract as much as you want, as long as you dont' try to scam anyone.\r\n//\r\n// To use the contract:\r\n// 1) Call approve on the Chi ERC20 address for this contract. That will allow the contract\r\n//    to hold your Chi tokens in escrow. You can always withdraw you Chi tokens back.\r\n//    You can make this call using MEW. The Chi contract address and ABI are available here:\r\n//    https://etherscan.io/address/0x71e1f8e809dc8911fcac95043bc94929a36505a5#code\r\n// 2) Call setup(chi_amount, price) on this contract, for example by using MEW.\r\n//    This call will take your tokens and hold them in escrow, while at the same time\r\n//    you get the ownership of the contract. While you own the contract (i.e. while the contract\r\n//    holds your tokens or your ETH, nobody else can call setup(). If they do, the call will fail.\r\n//    If you call approve() on the Chi contract, but someone else calls setup() on this contract\r\n//    nothing bad happens. You can either wait for this contract to go into empty state, or find\r\n//    another contract (or publish your own). You will need to call approve() again for the new contract.\r\n// 3) Advertise the contract address so others can buy Chi from it. Buying Chi is simple, the\r\n//    buyer needs to send ETH to the contract address, and the contract sends them CHI. The buyer\r\n//    can verify the price by viewing the contract.\r\n// 4) To claim your funds back (both Chi and ETH resulting from any sales), simply send 0 ETH to\r\n//    the contract. The contract will send you ETH and Chi back, and reset the contract for others to use.\r\n//\r\n// *) There is a cooldown period of 1 hour after the contract is reset, before it can be used again.\r\n//    This is to avoid possible scams where the seller sees a pending TX on the contract, then resets\r\n//    the contract and call setup() is a much higher price. If the seller does that with very high gas price,\r\n//    they could change the price for the buyer's pending TX. A cooldown of 1 hour prevents this attac, as long\r\n//    as the buyer's TX confirms within the hour.\r\n\r\n\r\ninterface ChiToken {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract ChiTrader {\r\n    ChiToken Chi = ChiToken(0x71E1f8E809Dc8911FCAC95043bC94929a36505A5); // hardcoded Chi address to avoid scams.\r\n    address seller;\r\n    uint256 price; // price is in wei, not ether\r\n    uint256 Chi_available; // remaining amount of Chi. This is just a convenience variable for buyers, not really used in the contract.\r\n    uint256 Amount_of_Chi_for_One_ETH; // shows how much Chi you get for 1 ETH. Helps avoid price scams.\r\n    uint256 cooldown_start_time;\r\n\r\n    function ChiTrader() public {\r\n        seller = 0x0;\r\n        price = 0;\r\n        Chi_available = 0;\r\n        Amount_of_Chi_for_One_ETH = 0;\r\n        cooldown_start_time = 0;\r\n    }\r\n\r\n    // convenience is_empty function. Sellers should check this before using the contract\r\n    function is_empty() public view returns (bool) {\r\n        return (now - cooldown_start_time > 1 hours) && (this.balance==0) && (Chi.balanceOf(this) == 0);\r\n    }\r\n    \r\n    // Before calling setup, the sender must call Approve() on the Chi token \r\n    // That sets allowance for this contract to sell the tokens on sender's behalf\r\n    function setup(uint256 chi_amount, uint256 price_in_wei) public {\r\n        require(is_empty()); // must not be in cooldown\r\n        require(Chi.allowance(msg.sender, this) >= chi_amount); // contract needs enough allowance\r\n        require(price_in_wei > 1000); // to avoid mistakes, require price to be more than 1000 wei\r\n        \r\n        price = price_in_wei;\r\n        Chi_available = chi_amount;\r\n        Amount_of_Chi_for_One_ETH = 1 ether / price_in_wei;\r\n        seller = msg.sender;\r\n\r\n        require(Chi.transferFrom(msg.sender, this, chi_amount)); // move Chi to this contract to hold in escrow\r\n    }\r\n\r\n    function() public payable{\r\n        uint256 eth_balance = this.balance;\r\n        uint256 chi_balance = Chi.balanceOf(this);\r\n        if(msg.sender == seller){\r\n            seller = 0x0; // reset seller\r\n            price = 0; // reset price\r\n            Chi_available = 0; // reset available chi\r\n            Amount_of_Chi_for_One_ETH = 0; // reset price\r\n            cooldown_start_time = now; // start cooldown timer\r\n\r\n            if(eth_balance > 0) msg.sender.transfer(eth_balance); // withdraw all ETH\r\n            if(chi_balance > 0) require(Chi.transfer(msg.sender, chi_balance)); // withdraw all Chi\r\n        }        \r\n        else{\r\n            require(msg.value > 0); // must send some ETH to buy Chi\r\n            require(price > 0); // cannot divide by zero\r\n            uint256 num_chi = msg.value / price; // calculate number of Chi tokens for the ETH amount sent\r\n            require(chi_balance >= num_chi); // must have enough Chi in the contract\r\n            Chi_available = chi_balance - num_chi; // recalculate available Chi\r\n\r\n            require(Chi.transfer(msg.sender, num_chi)); // send Chi to buyer\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"chi_amount\",\"type\":\"uint256\"},{\"name\":\"price_in_wei\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"is_empty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"ChiTrader","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://51ac4baee84f2251a267965580c7d82e1388793e867cceaf398132a4230aab1c"}]}