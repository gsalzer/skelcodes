{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n    address public secondOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier bothOwner() {\r\n        require(msg.sender == owner || msg.sender == secondOwner);\r\n        _;\r\n    }\r\n\r\n    function changeSecOwner(address targetAddress) public bothOwner {\r\n        require(targetAddress != address(0));\r\n        secondOwner = targetAddress;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public bothOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) public returns (bool);\r\n    function redeemToken(uint256 _mtcTokens, address _from) public;\r\n}\r\n\r\ncontract addressKeeper is Ownable {\r\n    address public tokenAddress;\r\n    address public boardAddress;\r\n    address public teamAddress;\r\n    function setTokenAdd(address addr) onlyOwner public {\r\n        tokenAddress = addr;\r\n    }\r\n    function setBoardAdd(address addr) onlyOwner public {\r\n        boardAddress = addr;\r\n    }\r\n    function setTeamAdd(address addr) onlyOwner public {\r\n        teamAddress = addr;\r\n    }\r\n}\r\n\r\ncontract MoatFund is addressKeeper {\r\n\r\n    // wei per MTC\r\n    // 1 ETH = 5000 MTC\r\n    // 1 MTC = 200000000000000 wei\r\n    uint256 public mtcRate; // in wei\r\n    bool public mintBool;\r\n    uint256 public minInvest; // minimum investment in wei\r\n\r\n    uint256 public redeemRate;     // When redeeming, 1MTC=fixed ETH\r\n    bool public redeemBool;\r\n\r\n    uint256 public ethRaised;       // ETH deposited in owner's address\r\n    uint256 public ethRedeemed;     // ETH transferred from owner's address\r\n\r\n    // function to start minting MTC\r\n    function startMint(uint256 _rate, bool canMint, uint256 _minWeiInvest) onlyOwner public {\r\n        minInvest = _minWeiInvest;\r\n        mtcRate = _rate;\r\n        mintBool = canMint;\r\n    }\r\n\r\n    // function to redeem ETH from MTC\r\n    function startRedeem(uint256 _rate, bool canRedeem) onlyOwner public {\r\n        redeemRate = _rate;\r\n        redeemBool = canRedeem;\r\n    }\r\n\r\n    function () public payable {\r\n        transferToken();\r\n    }\r\n\r\n    // function called from MoatFund.sol\r\n    function transferToken() public payable {\r\n        if (msg.sender != owner &&\r\n            msg.sender != tokenAddress &&\r\n            msg.sender != boardAddress) {\r\n                require(mintBool);\r\n                require(msg.value >= minInvest);\r\n\r\n                uint256 MTCToken = (msg.value / mtcRate);\r\n                uint256 teamToken = (MTCToken / 20);\r\n\r\n                ethRaised += msg.value;\r\n\r\n                token tokenTransfer = token(tokenAddress);\r\n                tokenTransfer.transfer(msg.sender, MTCToken);\r\n                tokenTransfer.transfer(teamAddress, teamToken);\r\n        }\r\n    }\r\n\r\n    // calculate value of MTC that can be redeemed from the ETH\r\n    function redeem(uint256 _mtcTokens) public {\r\n        if (msg.sender != owner) {\r\n            require(redeemBool);\r\n\r\n            token tokenBalance = token(tokenAddress);\r\n            tokenBalance.redeemToken(_mtcTokens, msg.sender);\r\n\r\n            uint256 weiVal = (_mtcTokens * redeemRate);\r\n            ethRedeemed += weiVal;                                  // adds the value of transferred ETH to the redeemed ETH till now\r\n            // it need to stay last for reentery attack purpose\r\n            msg.sender.transfer(weiVal);                            // transfer the amount of ETH\r\n        }\r\n    }\r\n\r\n    function sendETHtoBoard(uint _wei) onlyOwner public {\r\n        boardAddress.transfer(_wei);\r\n    }\r\n\r\n    function collectERC20(address tokenAddress, uint256 amount) onlyOwner public {\r\n        token tokenTransfer = token(tokenAddress);\r\n        tokenTransfer.transfer(owner, amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collectERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintBool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mtcRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"canMint\",\"type\":\"bool\"},{\"name\":\"_minWeiInvest\",\"type\":\"uint256\"}],\"name\":\"startMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setTokenAdd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemBool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBoardAdd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"canRedeem\",\"type\":\"bool\"}],\"name\":\"startRedeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boardAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"sendETHtoBoard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRedeemed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setTeamAdd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"changeSecOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mtcTokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MoatFund","CompilerVersion":"v0.4.22-nightly.2018.3.8+commit.fbc29f6d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1d4e2381215721bf3dd00db2fdffb0e103ac6119e761ced9bf72d0b82097a614"}]}