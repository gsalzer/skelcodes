{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title StandardToken\r\n * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol\r\n * @dev Standard ERC20 token\r\n */\r\ncontract StandardToken {\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    mapping(address => uint256) internal balances_;\r\n    mapping(address => mapping(address => uint256)) internal allowed_;\r\n\r\n    uint256 internal totalSupply_;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances_[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed_ to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed_[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances_[msg.sender]);\r\n\r\n        balances_[msg.sender] = balances_[msg.sender].sub(_value);\r\n        balances_[_to] = balances_[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances_[_from]);\r\n        require(_value <= allowed_[_from][msg.sender]);\r\n\r\n        balances_[_from] = balances_[_from].sub(_value);\r\n        balances_[_to] = balances_[_to].add(_value);\r\n        allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed_[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title EthTeamContract\r\n * @dev The team token. One token represents a team. EthTeamContract is also a ERC20 standard token.\r\n */\r\ncontract EthTeamContract is StandardToken, Ownable {\r\n    event Buy(address indexed token, address indexed from, uint256 value, uint256 weiValue);\r\n    event Sell(address indexed token, address indexed from, uint256 value, uint256 weiValue);\r\n    event BeginGame(address indexed team1, address indexed team2, uint64 gameTime);\r\n    event EndGame(address indexed team1, address indexed team2, uint8 gameResult);\r\n    event ChangeStatus(address indexed team, uint8 status);\r\n\r\n    /**\r\n    * @dev Token price based on ETH\r\n    */\r\n    uint256 public price;\r\n    /**\r\n    * @dev status=0 buyable & sellable, user can buy or sell the token.\r\n    * status=1 not buyable & not sellable, user cannot buy or sell the token.\r\n    */\r\n    uint8 public status;\r\n    /**\r\n    * @dev The game start time. gameTime=0 means game time is not enabled or not started.\r\n    */\r\n    uint64 public gameTime;\r\n    /**\r\n    * @dev If the time is older than FinishTime (usually one month after game).\r\n    * The owner has permission to transfer the balance to the feeOwner.\r\n    * The user can get back the balance using the website after this time.\r\n    */\r\n    uint64 public finishTime;\r\n    /**\r\n    * @dev The fee owner. The fee will send to this address.\r\n    */\r\n    address public feeOwner;\r\n    /**\r\n    * @dev Game opponent, gameOpponent is also a EthTeamContract.\r\n    */\r\n    address public gameOpponent;\r\n\r\n    /**\r\n    * @dev Team name and team symbol will be ERC20 token name and symbol. Token decimals will be 3.\r\n    * Token total supply will be 0. The initial price will be 1 szabo (1000000000000 Wei)\r\n    */\r\n    function EthTeamContract(\r\n        string _teamName, string _teamSymbol, address _gameOpponent, uint64 _gameTime, uint64 _finishTime, address _feeOwner\r\n    ) public {\r\n        name = _teamName;\r\n        symbol = _teamSymbol;\r\n        decimals = 3;\r\n        totalSupply_ = 0;\r\n        price = 1 szabo;\r\n        gameOpponent = _gameOpponent;\r\n        gameTime = _gameTime;\r\n        finishTime = _finishTime;\r\n        feeOwner = _feeOwner;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Sell Or Transfer the token.\r\n    *\r\n    * Override ERC20 transfer token function. If the _to address is not this EthTeamContract,\r\n    * then call the super transfer function, which will be ERC20 token transfer.\r\n    * Otherwise, the user want to sell the token (EthTeamContract -> ETH).\r\n    * @param _to address The address which you want to transfer/sell to\r\n    * @param _value uint256 the amount of tokens to be transferred/sold\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if (_to != address(this)) {\r\n            return super.transfer(_to, _value);\r\n        }\r\n        require(_value <= balances_[msg.sender] && status == 0);\r\n        // If gameTime is enabled (larger than 1514764800 (2018-01-01))\r\n        if (gameTime > 1514764800) {\r\n            // We will not allowed to sell after game start\r\n            require(gameTime > block.timestamp);\r\n        }\r\n        balances_[msg.sender] = balances_[msg.sender].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        uint256 weiAmount = price.mul(_value);\r\n        msg.sender.transfer(weiAmount);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        emit Sell(_to, msg.sender, _value, weiAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Buy token using ETH\r\n    * User send ETH to this EthTeamContract, then his token balance will be increased based on price.\r\n    * The total supply will also be increased.\r\n    */\r\n    function() payable public {\r\n        require(status == 0 && price > 0);\r\n        // If gameTime is enabled (larger than 1514764800 (2018-01-01))\r\n        if (gameTime > 1514764800) {\r\n            // We will not allowed to buy after game start\r\n            require(gameTime > block.timestamp);\r\n        }\r\n        uint256 amount = msg.value.div(price);\r\n        balances_[msg.sender] = balances_[msg.sender].add(amount);\r\n        totalSupply_ = totalSupply_.add(amount);\r\n        emit Transfer(address(this), msg.sender, amount);\r\n        emit Buy(address(this), msg.sender, amount, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev The the game status.\r\n    *\r\n    * status = 0 buyable & sellable, user can buy or sell the token.\r\n    * status=1 not buyable & not sellable, user cannot buy or sell the token.\r\n    * @param _status The game status.\r\n    */\r\n    function changeStatus(uint8 _status) onlyOwner public {\r\n        require(status != _status);\r\n        status = _status;\r\n        emit ChangeStatus(address(this), _status);\r\n    }\r\n\r\n    /**\r\n    * @dev Change the fee owner.\r\n    *\r\n    * @param _feeOwner The new fee owner.\r\n    */\r\n    function changeFeeOwner(address _feeOwner) onlyOwner public {\r\n        require(_feeOwner != feeOwner && _feeOwner != address(0));\r\n        feeOwner = _feeOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Finish the game\r\n    *\r\n    * If the time is older than FinishTime (usually one month after game).\r\n    * The owner has permission to transfer the balance to the feeOwner.\r\n    * The user can get back the balance using the website after this time.\r\n    */\r\n    function finish() onlyOwner public {\r\n        require(block.timestamp >= finishTime);\r\n        feeOwner.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n    * @dev Start the game\r\n    *\r\n    * Start a new game. Initialize game opponent, game time and status.\r\n    * @param _gameOpponent The game opponent contract address\r\n    * @param _gameTime The game begin time. optional\r\n    */\r\n    function beginGame(address _gameOpponent, uint64 _gameTime) onlyOwner public {\r\n        require(_gameOpponent != address(this));\r\n        // 1514764800 = 2018-01-01\r\n        require(_gameTime == 0 || (_gameTime > 1514764800));\r\n        gameOpponent = _gameOpponent;\r\n        gameTime = _gameTime;\r\n        status = 0;\r\n        emit BeginGame(address(this), _gameOpponent, _gameTime);\r\n    }\r\n\r\n    /**\r\n    * @dev End the game with game final result.\r\n    *\r\n    * The function only allow to be called with the lose team or the draw team with large balance.\r\n    * We have this rule because the lose team or draw team will large balance need transfer balance to opposite side.\r\n    * This function will also change status of opposite team by calling transferFundAndEndGame function.\r\n    * So the function only need to be called one time for the home and away team.\r\n    * The new price will be recalculated based on the new balance and total supply.\r\n    *\r\n    * Balance transfer rule:\r\n    * 1. The rose team will transfer all balance to opposite side.\r\n    * 2. If the game is draw, the balances of two team will go fifty-fifty.\r\n    * 3. If game is canceled, the balance is not touched and the game states will be reset to initial states.\r\n    * 4. The fee will be 5% of each transfer amount.\r\n    * @param _gameOpponent The game opponent contract address\r\n    * @param _gameResult game result. 1=lose, 2=draw, 3=cancel, 4=win (not allow)\r\n    */\r\n    function endGame(address _gameOpponent, uint8 _gameResult) onlyOwner public {\r\n        require(gameOpponent != address(0) && gameOpponent == _gameOpponent);\r\n        uint256 amount = address(this).balance;\r\n        uint256 opAmount = gameOpponent.balance;\r\n        require(_gameResult == 1 || (_gameResult == 2 && amount >= opAmount) || _gameResult == 3);\r\n        EthTeamContract op = EthTeamContract(gameOpponent);\r\n        if (_gameResult == 1) {\r\n            // Lose\r\n            if (amount > 0 && totalSupply_ > 0) {\r\n                uint256 lostAmount = amount;\r\n                // If opponent has supply\r\n                if (op.totalSupply() > 0) {\r\n                    // fee is 5%\r\n                    uint256 feeAmount = lostAmount.div(20);\r\n                    lostAmount = lostAmount.sub(feeAmount);\r\n                    feeOwner.transfer(feeAmount);\r\n                    op.transferFundAndEndGame.value(lostAmount)();\r\n                } else {\r\n                    // If opponent has not supply, then send the lose money to fee owner.\r\n                    feeOwner.transfer(lostAmount);\r\n                    op.transferFundAndEndGame();\r\n                }\r\n            } else {\r\n                op.transferFundAndEndGame();\r\n            }\r\n        } else if (_gameResult == 2) {\r\n            // Draw\r\n            if (amount > opAmount) {\r\n                lostAmount = amount.sub(opAmount).div(2);\r\n                if (op.totalSupply() > 0) {\r\n                    // fee is 5%\r\n                    feeAmount = lostAmount.div(20);\r\n                    lostAmount = lostAmount.sub(feeAmount);\r\n                    feeOwner.transfer(feeAmount);\r\n                    op.transferFundAndEndGame.value(lostAmount)();\r\n                } else {\r\n                    feeOwner.transfer(lostAmount);\r\n                    op.transferFundAndEndGame();\r\n                }\r\n            } else if (amount == opAmount) {\r\n                op.transferFundAndEndGame();\r\n            } else {\r\n                // should not happen\r\n                revert();\r\n            }\r\n        } else if (_gameResult == 3) {\r\n            //canceled\r\n            op.transferFundAndEndGame();\r\n        } else {\r\n            // should not happen\r\n            revert();\r\n        }\r\n        endGameInternal();\r\n        if (totalSupply_ > 0) {\r\n            price = address(this).balance.div(totalSupply_);\r\n        }\r\n        emit EndGame(address(this), _gameOpponent, _gameResult);\r\n    }\r\n\r\n    /**\r\n    * @dev Reset team token states\r\n    *\r\n    */\r\n    function endGameInternal() private {\r\n        gameOpponent = address(0);\r\n        gameTime = 0;\r\n        status = 0;\r\n    }\r\n\r\n    /**\r\n    * @dev Reset team states and recalculate the price.\r\n    *\r\n    * This function will be called by opponent team token after end game.\r\n    * It accepts the ETH transfer and recalculate the new price based on\r\n    * new balance and total supply.\r\n    */\r\n    function transferFundAndEndGame() payable public {\r\n        require(gameOpponent != address(0) && gameOpponent == msg.sender);\r\n        if (msg.value > 0 && totalSupply_ > 0) {\r\n            price = address(this).balance.div(totalSupply_);\r\n        }\r\n        endGameInternal();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_gameOpponent\",\"type\":\"address\"},{\"name\":\"_gameResult\",\"type\":\"uint8\"}],\"name\":\"endGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeOwner\",\"type\":\"address\"}],\"name\":\"changeFeeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"changeStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameOpponent\",\"type\":\"address\"},{\"name\":\"_gameTime\",\"type\":\"uint64\"}],\"name\":\"beginGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferFundAndEndGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameOpponent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_teamName\",\"type\":\"string\"},{\"name\":\"_teamSymbol\",\"type\":\"string\"},{\"name\":\"_gameOpponent\",\"type\":\"address\"},{\"name\":\"_gameTime\",\"type\":\"uint64\"},{\"name\":\"_finishTime\",\"type\":\"uint64\"},{\"name\":\"_feeOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiValue\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiValue\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"team1\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"team2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameTime\",\"type\":\"uint64\"}],\"name\":\"BeginGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"team1\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"team2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameResult\",\"type\":\"uint8\"}],\"name\":\"EndGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"team\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"ChangeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EthTeamContract","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000047920b0ced3cd254e6001690b46f7874118b25f4000000000000000000000000000000000000000000000000000000005b255e30000000000000000000000000000000000000000000000000000000005b743ff00000000000000000000000001158dcb8a5a37e8fd0f7bb6dd8e74538420079ab000000000000000000000000000000000000000000000000000000000000000f544657432d30382d43524f41544941000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034852560000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f2f16ee763d1ac2f491b038cfb87cb39039657cde8bc006a2cccc510cbfe365e"}]}