{"status":"1","message":"OK","result":[{"SourceCode":"// Puzzle \"Fifteen\". \r\n// Numbers can be moved by puzzle owner to the empty place.\r\n// The winner must put the numbers (1-4) in the first row in the correct order.\r\n//\r\n// Start position:\r\n//---------------------\r\n//| 15 | 14 | 13 | 12 |\r\n//---------------------\r\n//| 11 | 10 | 9  | 8  |\r\n//---------------------\r\n//| 7  | 6  | 5  | 4  |\r\n//---------------------\r\n//| 3  | 2  | 1  |    |\r\n//---------------------\r\n//\r\n//site - https://puzzlefifteen.xyz/\r\n\r\npragma solidity ^0.4.21;\r\n\r\ncontract Payments {\r\n\r\n  address public coOwner;\r\n  mapping(address => uint256) public payments; \r\n\r\n  function Payments() public {\r\n    //contract owner\r\n    coOwner = msg.sender;\r\n  }\r\n\r\n  modifier onlyCoOwner() {\r\n    require(msg.sender == coOwner);\r\n    _;\r\n  }\r\n\r\n  function transferCoOwnership(address _newCoOwner) public onlyCoOwner {\r\n    require(_newCoOwner != address(0));\r\n    coOwner = _newCoOwner;\r\n  }  \r\n  \r\n  function PayWins(address _winner) public {\r\n\t require (payments[_winner] > 0 && _winner!=address(0) && this.balance >= payments[_winner]);\r\n\t _winner.transfer(payments[_winner]);\r\n  }\r\n\r\n}\r\n\r\ncontract Fifteen is Payments {\r\n  //puzzleId => row => column => value\r\n  mapping (uint8 => mapping (uint8 => mapping (uint8 => uint8))) public fifteenPuzzles;\r\n  mapping (uint8 => address) public puzzleIdOwner;\r\n  mapping (uint8 => uint256) public puzzleIdPrice;\r\n  uint256 public jackpot = 0;\r\n  \r\n  function initNewGame() public onlyCoOwner payable {\r\n     //set start win pot\r\n\t require (msg.value>0);\r\n\t require (jackpot == 0); \r\n\t jackpot = msg.value;\r\n\t \r\n\t uint8 row;\r\n\t uint8 col;\r\n\t uint8 num;\r\n\t \r\n\t for (uint8 puzzleId=1; puzzleId<=6; puzzleId++) {\r\n\t\tnum=15;\r\n\t\tpuzzleIdOwner[puzzleId] = address(this);\r\n\t\tpuzzleIdPrice[puzzleId] = 0.001 ether;\r\n\t\tfor (row=1; row<=4; row++) {\r\n\t\t\tfor (col=1; col<=4; col++) {\r\n\t\t\t\tfifteenPuzzles[puzzleId][row][col]=num;\r\n\t\t\t\tnum--;\r\n\t\t\t}\r\n\t\t}\r\n\t }\r\n\t \r\n  } \r\n\r\n  function getPuzzle(uint8 _puzzleId) public constant returns(uint8[16] puzzleValues) {    \r\n\t uint8 row;\r\n\t uint8 col;\r\n\t uint8 num = 0;\r\n\t for (row=1; row<=4; row++) {\r\n\t\tfor (col=1; col<=4; col++) {\r\n\t\t\tpuzzleValues[num] = fifteenPuzzles[_puzzleId][row][col];\r\n\t\t\tnum++;\r\n\t\t}\r\n\t }\t\r\n  }\r\n  \r\n  function changePuzzle(uint8 _puzzleId, uint8 _row, uint8 _col, uint8 _torow, uint8 _tocol) public gameNotStopped {  \r\n\t require (msg.sender == puzzleIdOwner[_puzzleId]);\r\n\t require (fifteenPuzzles[_puzzleId][_torow][_tocol] == 0); //free place is number 0\r\n\t require (_row >= 1 && _row <= 4 && _col >= 1 && _col <= 4 && _torow >= 1 && _torow <= 4 && _tocol >= 1 && _tocol <= 4);\r\n\t require ((_row == _torow && (_col-_tocol == 1 || _tocol-_col == 1)) || (_col == _tocol && (_row-_torow == 1 || _torow-_row== 1)));\r\n\t \r\n\t fifteenPuzzles[_puzzleId][_torow][_tocol] = fifteenPuzzles[_puzzleId][_row][_col];\r\n\t fifteenPuzzles[_puzzleId][_row][_col] = 0;\r\n\t \r\n\t if (fifteenPuzzles[_puzzleId][1][1] == 1 && \r\n\t     fifteenPuzzles[_puzzleId][1][2] == 2 && \r\n\t\t fifteenPuzzles[_puzzleId][1][3] == 3 && \r\n\t\t fifteenPuzzles[_puzzleId][1][4] == 4) \r\n\t { // we have the winner - stop game\r\n\t\tmsg.sender.transfer(jackpot);\r\n\t\tjackpot = 0; //stop game\r\n\t }\r\n  }\r\n  \r\n  function buyPuzzle(uint8 _puzzleId) public gameNotStopped payable {\r\n  \r\n    address puzzleOwner = puzzleIdOwner[_puzzleId];\r\n    require(puzzleOwner != msg.sender && msg.sender != address(0));\r\n\r\n    uint256 puzzlePrice = puzzleIdPrice[_puzzleId];\r\n    require(msg.value >= puzzlePrice);\r\n\t\r\n\t//new owner\r\n\tpuzzleIdOwner[_puzzleId] = msg.sender;\r\n\t\r\n\tuint256 oldPrice = uint256(puzzlePrice/2);\r\n\t\r\n\t//new price\r\n\tpuzzleIdPrice[_puzzleId] = uint256(puzzlePrice*2);\t\r\n\r\n\t\r\n\t//profit fee 20% from oldPrice ( or 10% from puzzlePrice )\r\n\tuint256 profitFee = uint256(oldPrice/5); \r\n\t\r\n\tuint256 oldOwnerPayment = uint256(oldPrice + profitFee);\r\n\t\r\n\t//60% from oldPrice ( or 30% from puzzlePrice ) to jackpot\r\n    jackpot += uint256(profitFee*3);\r\n\t\r\n    if (puzzleOwner != address(this)) {\r\n      puzzleOwner.transfer(oldOwnerPayment); \r\n\t  coOwner.transfer(profitFee); \r\n    } else {\r\n      coOwner.transfer(oldOwnerPayment+profitFee); \r\n\t}\r\n\r\n\t//excess pay\r\n    if (msg.value > puzzlePrice) { \r\n\t\tmsg.sender.transfer(msg.value - puzzlePrice);\r\n\t}\r\n  }  \r\n  \r\n  modifier gameNotStopped() {\r\n    require(jackpot > 0);\r\n    _;\r\n  }    \r\n\t\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"puzzleIdPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_puzzleId\",\"type\":\"uint8\"}],\"name\":\"buyPuzzle\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"puzzleIdOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initNewGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"fifteenPuzzles\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_puzzleId\",\"type\":\"uint8\"}],\"name\":\"getPuzzle\",\"outputs\":[{\"name\":\"puzzleValues\",\"type\":\"uint8[16]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"PayWins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCoOwner\",\"type\":\"address\"}],\"name\":\"transferCoOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_puzzleId\",\"type\":\"uint8\"},{\"name\":\"_row\",\"type\":\"uint8\"},{\"name\":\"_col\",\"type\":\"uint8\"},{\"name\":\"_torow\",\"type\":\"uint8\"},{\"name\":\"_tocol\",\"type\":\"uint8\"}],\"name\":\"changePuzzle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Fifteen","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://62b8a18528654db4f97f1a8f82e05171506abe8f7a6902793bccb743437f6a13"}]}