{"status":"1","message":"OK","result":[{"SourceCode":"// WELCOME TO THE EOSBET.IO BUG BOUNTY CONTRACTS!\r\n// GOOD LUCK... YOU'LL NEED IT!\r\n\r\npragma solidity ^0.4.21;\r\n\r\n// <ORACLIZE_API>\r\n/*\r\nCopyright (c) 2015-2016 Oraclize SRL\r\nCopyright (c) 2016 Oraclize LTD\r\n\r\n\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\n\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\n\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\r\n\r\n// This api is currently targeted at 0.4.18, please import oraclizeAPI_pre0.4.sol or oraclizeAPI_0.4 where necessary\r\npragma solidity ^0.4.18;\r\n\r\ncontract OraclizeI {\r\n    address public cbAddress;\r\n    function query(uint _timestamp, string _datasource, string _arg) external payable returns (bytes32 _id);\r\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);\r\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\r\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);\r\n    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);\r\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);\r\n    function getPrice(string _datasource) public returns (uint _dsprice);\r\n    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);\r\n    function setProofType(byte _proofType) external;\r\n    function setCustomGasPrice(uint _gasPrice) external;\r\n    function randomDS_getSessionPubKeyHash() external constant returns(bytes32);\r\n}\r\ncontract OraclizeAddrResolverI {\r\n    function getAddress() public returns (address _addr);\r\n}\r\ncontract usingOraclize {\r\n    uint constant day = 60*60*24;\r\n    uint constant week = 60*60*24*7;\r\n    uint constant month = 60*60*24*30;\r\n    byte constant proofType_NONE = 0x00;\r\n    byte constant proofType_TLSNotary = 0x10;\r\n    byte constant proofType_Android = 0x20;\r\n    byte constant proofType_Ledger = 0x30;\r\n    byte constant proofType_Native = 0xF0;\r\n    byte constant proofStorage_IPFS = 0x01;\r\n    uint8 constant networkID_auto = 0;\r\n    uint8 constant networkID_mainnet = 1;\r\n    uint8 constant networkID_testnet = 2;\r\n    uint8 constant networkID_morden = 2;\r\n    uint8 constant networkID_consensys = 161;\r\n\r\n    OraclizeAddrResolverI OAR;\r\n\r\n    OraclizeI oraclize;\r\n    modifier oraclizeAPI {\r\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))\r\n            oraclize_setNetwork(networkID_auto);\r\n\r\n        if(address(oraclize) != OAR.getAddress())\r\n            oraclize = OraclizeI(OAR.getAddress());\r\n\r\n        _;\r\n    }\r\n    modifier coupon(string code){\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        _;\r\n    }\r\n\r\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\r\n      return oraclize_setNetwork();\r\n      networkID; // silence the warning and remain backwards compatible\r\n    }\r\n    function oraclize_setNetwork() internal returns(bool){\r\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\r\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\r\n            oraclize_setNetworkName(\"eth_mainnet\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\r\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\r\n            oraclize_setNetworkName(\"eth_ropsten3\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet\r\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\r\n            oraclize_setNetworkName(\"eth_kovan\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet\r\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\r\n            oraclize_setNetworkName(\"eth_rinkeby\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge\r\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide\r\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\r\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function __callback(bytes32 myid, string result) public {\r\n        __callback(myid, result, new bytes(0));\r\n    }\r\n    function __callback(bytes32 myid, string result, bytes proof) public {\r\n      return;\r\n      myid; result; proof; // Silence compiler warnings\r\n    }\r\n\r\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource);\r\n    }\r\n\r\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(0, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(timestamp, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN.value(price)(0, datasource, args);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN.value(price)(0, datasource, args);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\r\n        return oraclize.cbAddress();\r\n    }\r\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\r\n        return oraclize.setProofType(proofP);\r\n    }\r\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\r\n        return oraclize.setCustomGasPrice(gasPrice);\r\n    }\r\n\r\n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\r\n        return oraclize.randomDS_getSessionPubKeyHash();\r\n    }\r\n\r\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n    }\r\n\r\n    function parseAddr(string _a) internal pure returns (address){\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n        for (uint i=2; i<2+2*20; i+=2){\r\n            iaddr *= 256;\r\n            b1 = uint160(tmp[i]);\r\n            b2 = uint160(tmp[i+1]);\r\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\r\n            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\r\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\r\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\r\n            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\r\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\r\n            iaddr += (b1*16+b2);\r\n        }\r\n        return address(iaddr);\r\n    }\r\n\r\n    function strCompare(string _a, string _b) internal pure returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    function indexOf(string _haystack, string _needle) internal pure returns (int) {\r\n        bytes memory h = bytes(_haystack);\r\n        bytes memory n = bytes(_needle);\r\n        if(h.length < 1 || n.length < 1 || (n.length > h.length))\r\n            return -1;\r\n        else if(h.length > (2**128 -1))\r\n            return -1;\r\n        else\r\n        {\r\n            uint subindex = 0;\r\n            for (uint i = 0; i < h.length; i ++)\r\n            {\r\n                if (h[i] == n[0])\r\n                {\r\n                    subindex = 1;\r\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\r\n                    {\r\n                        subindex++;\r\n                    }\r\n                    if(subindex == n.length)\r\n                        return int(i);\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal pure returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    // parseInt\r\n    function parseInt(string _a) internal pure returns (uint) {\r\n        return parseInt(_a, 0);\r\n    }\r\n\r\n    // parseInt(parseFloat*10^_b)\r\n    function parseInt(string _a, uint _b) internal pure returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i=0; i<bresult.length; i++){\r\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\r\n                if (decimals){\r\n                   if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                mint *= 10;\r\n                mint += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        if (_b > 0) mint *= 10**_b;\r\n        return mint;\r\n    }\r\n\r\n    function uint2str(uint i) internal pure returns (string){\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint len;\r\n        while (j != 0){\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function stra2cbor(string[] arr) internal pure returns (bytes) {\r\n            uint arrlen = arr.length;\r\n\r\n            // get correct cbor output length\r\n            uint outputlen = 0;\r\n            bytes[] memory elemArray = new bytes[](arrlen);\r\n            for (uint i = 0; i < arrlen; i++) {\r\n                elemArray[i] = (bytes(arr[i]));\r\n                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\r\n            }\r\n            uint ctr = 0;\r\n            uint cborlen = arrlen + 0x80;\r\n            outputlen += byte(cborlen).length;\r\n            bytes memory res = new bytes(outputlen);\r\n\r\n            while (byte(cborlen).length > ctr) {\r\n                res[ctr] = byte(cborlen)[ctr];\r\n                ctr++;\r\n            }\r\n            for (i = 0; i < arrlen; i++) {\r\n                res[ctr] = 0x5F;\r\n                ctr++;\r\n                for (uint x = 0; x < elemArray[i].length; x++) {\r\n                    // if there's a bug with larger strings, this may be the culprit\r\n                    if (x % 23 == 0) {\r\n                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\r\n                        elemcborlen += 0x40;\r\n                        uint lctr = ctr;\r\n                        while (byte(elemcborlen).length > ctr - lctr) {\r\n                            res[ctr] = byte(elemcborlen)[ctr - lctr];\r\n                            ctr++;\r\n                        }\r\n                    }\r\n                    res[ctr] = elemArray[i][x];\r\n                    ctr++;\r\n                }\r\n                res[ctr] = 0xFF;\r\n                ctr++;\r\n            }\r\n            return res;\r\n        }\r\n\r\n    function ba2cbor(bytes[] arr) internal pure returns (bytes) {\r\n            uint arrlen = arr.length;\r\n\r\n            // get correct cbor output length\r\n            uint outputlen = 0;\r\n            bytes[] memory elemArray = new bytes[](arrlen);\r\n            for (uint i = 0; i < arrlen; i++) {\r\n                elemArray[i] = (bytes(arr[i]));\r\n                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\r\n            }\r\n            uint ctr = 0;\r\n            uint cborlen = arrlen + 0x80;\r\n            outputlen += byte(cborlen).length;\r\n            bytes memory res = new bytes(outputlen);\r\n\r\n            while (byte(cborlen).length > ctr) {\r\n                res[ctr] = byte(cborlen)[ctr];\r\n                ctr++;\r\n            }\r\n            for (i = 0; i < arrlen; i++) {\r\n                res[ctr] = 0x5F;\r\n                ctr++;\r\n                for (uint x = 0; x < elemArray[i].length; x++) {\r\n                    // if there's a bug with larger strings, this may be the culprit\r\n                    if (x % 23 == 0) {\r\n                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\r\n                        elemcborlen += 0x40;\r\n                        uint lctr = ctr;\r\n                        while (byte(elemcborlen).length > ctr - lctr) {\r\n                            res[ctr] = byte(elemcborlen)[ctr - lctr];\r\n                            ctr++;\r\n                        }\r\n                    }\r\n                    res[ctr] = elemArray[i][x];\r\n                    ctr++;\r\n                }\r\n                res[ctr] = 0xFF;\r\n                ctr++;\r\n            }\r\n            return res;\r\n        }\r\n\r\n\r\n    string oraclize_network_name;\r\n    function oraclize_setNetworkName(string _network_name) internal {\r\n        oraclize_network_name = _network_name;\r\n    }\r\n\r\n    function oraclize_getNetworkName() internal view returns (string) {\r\n        return oraclize_network_name;\r\n    }\r\n\r\n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\r\n        require((_nbytes > 0) && (_nbytes <= 32));\r\n        // Convert from seconds to ledger timer ticks\r\n        _delay *= 10; \r\n        bytes memory nbytes = new bytes(1);\r\n        nbytes[0] = byte(_nbytes);\r\n        bytes memory unonce = new bytes(32);\r\n        bytes memory sessionKeyHash = new bytes(32);\r\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\r\n        assembly {\r\n            mstore(unonce, 0x20)\r\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\r\n            mstore(sessionKeyHash, 0x20)\r\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\r\n        }\r\n        bytes memory delay = new bytes(32);\r\n        assembly { \r\n            mstore(add(delay, 0x20), _delay) \r\n        }\r\n        \r\n        bytes memory delay_bytes8 = new bytes(8);\r\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\r\n\r\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\r\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\r\n        \r\n        bytes memory delay_bytes8_left = new bytes(8);\r\n        \r\n        assembly {\r\n            let x := mload(add(delay_bytes8, 0x20))\r\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\r\n\r\n        }\r\n        \r\n        oraclize_randomDS_setCommitment(queryId, keccak256(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\r\n        return queryId;\r\n    }\r\n    \r\n    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\r\n        oraclize_randomDS_args[queryId] = commitment;\r\n    }\r\n\r\n    mapping(bytes32=>bytes32) oraclize_randomDS_args;\r\n    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;\r\n\r\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\r\n        bool sigok;\r\n        address signer;\r\n\r\n        bytes32 sigr;\r\n        bytes32 sigs;\r\n\r\n        bytes memory sigr_ = new bytes(32);\r\n        uint offset = 4+(uint(dersig[3]) - 0x20);\r\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\r\n        bytes memory sigs_ = new bytes(32);\r\n        offset += 32 + 2;\r\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\r\n\r\n        assembly {\r\n            sigr := mload(add(sigr_, 32))\r\n            sigs := mload(add(sigs_, 32))\r\n        }\r\n\r\n\r\n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\r\n        if (address(keccak256(pubkey)) == signer) return true;\r\n        else {\r\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\r\n            return (address(keccak256(pubkey)) == signer);\r\n        }\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\r\n        bool sigok;\r\n\r\n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\r\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\r\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\r\n\r\n        bytes memory appkey1_pubkey = new bytes(64);\r\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\r\n\r\n        bytes memory tosign2 = new bytes(1+65+32);\r\n        tosign2[0] = byte(1); //role\r\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\r\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\r\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\r\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\r\n\r\n        if (sigok == false) return false;\r\n\r\n\r\n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\r\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\r\n\r\n        bytes memory tosign3 = new bytes(1+65);\r\n        tosign3[0] = 0xFE;\r\n        copyBytes(proof, 3, 65, tosign3, 1);\r\n\r\n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\r\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\r\n\r\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\r\n\r\n        return sigok;\r\n    }\r\n\r\n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\r\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\r\n        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (_proof[2] == 1));\r\n\r\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\r\n        require(proofVerified);\r\n\r\n        _;\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\r\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\r\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) return 1;\r\n\r\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\r\n        if (proofVerified == false) return 2;\r\n\r\n        return 0;\r\n    }\r\n\r\n    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){\r\n        bool match_ = true;\r\n        \r\n        require(prefix.length == n_random_bytes);\r\n\r\n        for (uint256 i=0; i< n_random_bytes; i++) {\r\n            if (content[i] != prefix[i]) match_ = false;\r\n        }\r\n\r\n        return match_;\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\r\n\r\n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\r\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\r\n        bytes memory keyhash = new bytes(32);\r\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\r\n        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;\r\n\r\n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\r\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\r\n\r\n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)\r\n        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;\r\n\r\n        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\r\n        // This is to verify that the computed args match with the ones specified in the query.\r\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\r\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\r\n\r\n        bytes memory sessionPubkey = new bytes(64);\r\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\r\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\r\n\r\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\r\n        if (oraclize_randomDS_args[queryId] == keccak256(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\r\n            delete oraclize_randomDS_args[queryId];\r\n        } else return false;\r\n\r\n\r\n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\r\n        bytes memory tosign1 = new bytes(32+8+1+32);\r\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\r\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;\r\n\r\n        // verify if sessionPubkeyHash was verified already, if not.. let's do it!\r\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\r\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\r\n        }\r\n\r\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\r\n    }\r\n\r\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\r\n        uint minLength = length + toOffset;\r\n\r\n        // Buffer too small\r\n        require(to.length >= minLength); // Should be a better way?\r\n\r\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\r\n        uint i = 32 + fromOffset;\r\n        uint j = 32 + toOffset;\r\n\r\n        while (i < (32 + fromOffset + length)) {\r\n            assembly {\r\n                let tmp := mload(add(from, i))\r\n                mstore(add(to, j), tmp)\r\n            }\r\n            i += 32;\r\n            j += 32;\r\n        }\r\n\r\n        return to;\r\n    }\r\n\r\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\r\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\r\n        // We do our own memory management here. Solidity uses memory offset\r\n        // 0x40 to store the current end of memory. We write past it (as\r\n        // writes are memory extensions), but don't update the offset so\r\n        // Solidity will reuse it. The memory used here is only needed for\r\n        // this context.\r\n\r\n        // FIXME: inline assembly can't access return values\r\n        bool ret;\r\n        address addr;\r\n\r\n        assembly {\r\n            let size := mload(0x40)\r\n            mstore(size, hash)\r\n            mstore(add(size, 32), v)\r\n            mstore(add(size, 64), r)\r\n            mstore(add(size, 96), s)\r\n\r\n            // NOTE: we can reuse the request memory because we deal with\r\n            //       the return code\r\n            ret := call(3000, 1, 0, size, 128, size, 32)\r\n            addr := mload(size)\r\n        }\r\n\r\n        return (ret, addr);\r\n    }\r\n\r\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        if (sig.length != 65)\r\n          return (false, 0);\r\n\r\n        // The signature format is a compact form of:\r\n        //   {bytes32 r}{bytes32 s}{uint8 v}\r\n        // Compact means, uint8 is not padded to 32 bytes.\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n\r\n            // Here we are loading the last 32 bytes. We exploit the fact that\r\n            // 'mload' will pad with zeroes if we overread.\r\n            // There is no 'mload8' to do this, but that would be nicer.\r\n            v := byte(0, mload(add(sig, 96)))\r\n\r\n            // Alternative solution:\r\n            // 'byte' is not working due to the Solidity parser, so lets\r\n            // use the second best option, 'and'\r\n            // v := and(mload(add(sig, 65)), 255)\r\n        }\r\n\r\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\r\n        // to match the YP range of [27, 28]\r\n        //\r\n        // geth uses [0, 1] and some clients have followed. This might change, see:\r\n        //  https://github.com/ethereum/go-ethereum/issues/2053\r\n        if (v < 27)\r\n          v += 27;\r\n\r\n        if (v != 27 && v != 28)\r\n            return (false, 0);\r\n\r\n        return safer_ecrecover(hash, v, r, s);\r\n    }\r\n\r\n}\r\n// </ORACLIZE_API>\r\n\r\ncontract EOSBetGameInterface {\r\n\tuint256 public DEVELOPERSFUND;\r\n\tuint256 public LIABILITIES;\r\n\tfunction payDevelopersFund(address developer) public;\r\n\tfunction receivePaymentForOraclize() payable public;\r\n\tfunction getMaxWin() public view returns(uint256);\r\n}\r\n\r\ncontract EOSBetBankrollInterface {\r\n\tfunction payEtherToWinner(uint256 amtEther, address winner) public;\r\n\tfunction receiveEtherFromGameAddress() payable public;\r\n\tfunction payOraclize(uint256 amountToPay) public;\r\n\tfunction getBankroll() public view returns(uint256);\r\n}\r\n\r\ncontract ERC20 {\r\n\tfunction totalSupply() constant public returns (uint supply);\r\n\tfunction balanceOf(address _owner) constant public returns (uint balance);\r\n\tfunction transfer(address _to, uint _value) public returns (bool success);\r\n\tfunction transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n\tfunction approve(address _spender, uint _value) public returns (bool success);\r\n\tfunction allowance(address _owner, address _spender) constant public returns (uint remaining);\r\n\tevent Transfer(address indexed _from, address indexed _to, uint _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract EOSBetBankroll is ERC20, EOSBetBankrollInterface {\r\n\r\n\tusing SafeMath for *;\r\n\r\n\t// constants for EOSBet Bankroll\r\n\r\n\taddress public OWNER;\r\n\tuint256 public MAXIMUMINVESTMENTSALLOWED;\r\n\tuint256 public WAITTIMEUNTILWITHDRAWORTRANSFER;\r\n\tuint256 public DEVELOPERSFUND;\r\n\r\n\t// this will be initialized as the trusted game addresses which will forward their ether\r\n\t// to the bankroll contract, and when players win, they will request the bankroll contract \r\n\t// to send these players their winnings.\r\n\t// Feel free to audit these contracts on etherscan...\r\n\tmapping(address => bool) public TRUSTEDADDRESSES;\r\n\r\n\taddress public DICE;\r\n\taddress public SLOTS;\r\n\r\n\t// mapping to log the last time a user contributed to the bankroll \r\n\tmapping(address => uint256) contributionTime;\r\n\r\n\t// constants for ERC20 standard\r\n\tstring public constant name = \"EOSBet Stake Tokens\";\r\n\tstring public constant symbol = \"EOSBETST\";\r\n\tuint8 public constant decimals = 18;\r\n\t// variable total supply\r\n\tuint256 public totalSupply;\r\n\r\n\t// mapping to store tokens\r\n\tmapping(address => uint256) public balances;\r\n\tmapping(address => mapping(address => uint256)) public allowed;\r\n\r\n\t// events\r\n\tevent FundBankroll(address contributor, uint256 etherContributed, uint256 tokensReceived);\r\n\tevent CashOut(address contributor, uint256 etherWithdrawn, uint256 tokensCashedIn);\r\n\tevent FailedSend(address sendTo, uint256 amt);\r\n\r\n\t// checks that an address is a \"trusted address of a legitimate EOSBet game\"\r\n\tmodifier addressInTrustedAddresses(address thisAddress){\r\n\r\n\t\trequire(TRUSTEDADDRESSES[thisAddress]);\r\n\t\t_;\r\n\t}\r\n\r\n\t// initialization function \r\n\tfunction EOSBetBankroll(address dice, address slots) public payable {\r\n\t\t// function is payable, owner of contract MUST \"seed\" contract with some ether, \r\n\t\t// so that the ratios are correct when tokens are being minted\r\n\t\trequire (msg.value > 0);\r\n\r\n\t\tOWNER = msg.sender;\r\n\r\n\t\t// 100 tokens/ether is the inital seed amount, so:\r\n\t\tuint256 initialTokens = msg.value * 100;\r\n\t\tbalances[msg.sender] = initialTokens;\r\n\t\ttotalSupply = initialTokens;\r\n\r\n\t\t// log a mint tokens event\r\n\t\temit Transfer(0x0, msg.sender, initialTokens);\r\n\r\n\t\t// insert given game addresses into the TRUSTEDADDRESSES mapping, and save the addresses as global variables\r\n\t\tTRUSTEDADDRESSES[dice] = true;\r\n\t\tTRUSTEDADDRESSES[slots] = true;\r\n\r\n\t\tDICE = dice;\r\n\t\tSLOTS = slots;\r\n\r\n\t\t////////////////////////////////////////////////\r\n\t\t// CHANGE TO 6 HOURS ON LIVE DEPLOYMENT\r\n\t\t////////////////////////////////////////////////\r\n\t\tWAITTIMEUNTILWITHDRAWORTRANSFER = 0 seconds;\r\n\t\tMAXIMUMINVESTMENTSALLOWED = 500 ether;\r\n\t}\r\n\r\n\t///////////////////////////////////////////////\r\n\t// VIEW FUNCTIONS\r\n\t/////////////////////////////////////////////// \r\n\r\n\tfunction checkWhenContributorCanTransferOrWithdraw(address bankrollerAddress) view public returns(uint256){\r\n\t\treturn contributionTime[bankrollerAddress];\r\n\t}\r\n\r\n\tfunction getBankroll() view public returns(uint256){\r\n\t\t// returns the total balance minus the developers fund, as the amount of active bankroll\r\n\t\treturn SafeMath.sub(address(this).balance, DEVELOPERSFUND);\r\n\t}\r\n\r\n\t///////////////////////////////////////////////\r\n\t// BANKROLL CONTRACT <-> GAME CONTRACTS functions\r\n\t/////////////////////////////////////////////// \r\n\r\n\tfunction payEtherToWinner(uint256 amtEther, address winner) public addressInTrustedAddresses(msg.sender){\r\n\t\t// this function will get called by a game contract when someone wins a game\r\n\t\t// try to send, if it fails, then send the amount to the owner\r\n\t\t// note, this will only happen if someone is calling the betting functions with\r\n\t\t// a contract. They are clearly up to no good, so they can contact us to retreive \r\n\t\t// their ether\r\n\t\t// if the ether cannot be sent to us, the OWNER, that means we are up to no good, \r\n\t\t// and the ether will just be given to the bankrollers as if the player/owner lost \r\n\r\n\t\tif (! winner.send(amtEther)){\r\n\r\n\t\t\temit FailedSend(winner, amtEther);\r\n\r\n\t\t\tif (! OWNER.send(amtEther)){\r\n\r\n\t\t\t\temit FailedSend(OWNER, amtEther);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction receiveEtherFromGameAddress() payable public addressInTrustedAddresses(msg.sender){\r\n\t\t// this function will get called from the game contracts when someone starts a game.\r\n\t}\r\n\r\n\tfunction payOraclize(uint256 amountToPay) public addressInTrustedAddresses(msg.sender){\r\n\t\t// this function will get called when a game contract must pay payOraclize\r\n\t\tEOSBetGameInterface(msg.sender).receivePaymentForOraclize.value(amountToPay)();\r\n\t}\r\n\r\n\t///////////////////////////////////////////////\r\n\t// BANKROLL CONTRACT MAIN FUNCTIONS\r\n\t///////////////////////////////////////////////\r\n\r\n\r\n\t// this function ADDS to the bankroll of EOSBet, and credits the bankroller a proportional\r\n\t// amount of tokens so they may withdraw their tokens later\r\n\t// also if there is only a limited amount of space left in the bankroll, a user can just send as much \r\n\t// ether as they want, because they will be able to contribute up to the maximum, and then get refunded the rest.\r\n\tfunction () public payable {\r\n\r\n\t\t// save in memory for cheap access.\r\n\t\t// this represents the total bankroll balance before the function was called.\r\n\t\tuint256 currentTotalBankroll = SafeMath.sub(getBankroll(), msg.value);\r\n\t\tuint256 maxInvestmentsAllowed = MAXIMUMINVESTMENTSALLOWED;\r\n\r\n\t\trequire(currentTotalBankroll < maxInvestmentsAllowed && msg.value != 0);\r\n\r\n\t\tuint256 currentSupplyOfTokens = totalSupply;\r\n\t\tuint256 contributedEther;\r\n\r\n\t\tbool contributionTakesBankrollOverLimit;\r\n\t\tuint256 ifContributionTakesBankrollOverLimit_Refund;\r\n\r\n\t\tuint256 creditedTokens;\r\n\r\n\t\tif (SafeMath.add(currentTotalBankroll, msg.value) > maxInvestmentsAllowed){\r\n\t\t\t// allow the bankroller to contribute up to the allowed amount of ether, and refund the rest.\r\n\t\t\tcontributionTakesBankrollOverLimit = true;\r\n\t\t\t// set contributed ether as (MAXIMUMINVESTMENTSALLOWED - BANKROLL)\r\n\t\t\tcontributedEther = SafeMath.sub(maxInvestmentsAllowed, currentTotalBankroll);\r\n\t\t\t// refund the rest of the ether, which is (original amount sent - (maximum amount allowed - bankroll))\r\n\t\t\tifContributionTakesBankrollOverLimit_Refund = SafeMath.sub(msg.value, contributedEther);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcontributedEther = msg.value;\r\n\t\t}\r\n        \r\n\t\tif (currentSupplyOfTokens != 0){\r\n\t\t\t// determine the ratio of contribution versus total BANKROLL.\r\n\t\t\tcreditedTokens = SafeMath.mul(contributedEther, currentSupplyOfTokens) / currentTotalBankroll;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// edge case where ALL money was cashed out from bankroll\r\n\t\t\t// so currentSupplyOfTokens == 0\r\n\t\t\t// currentTotalBankroll can == 0 or not, if someone mines/selfdestruct's to the contract\r\n\t\t\t// but either way, give all the bankroll to person who deposits ether\r\n\t\t\tcreditedTokens = SafeMath.mul(contributedEther, 100);\r\n\t\t}\r\n\t\t\r\n\t\t// now update the total supply of tokens and bankroll amount\r\n\t\ttotalSupply = SafeMath.add(currentSupplyOfTokens, creditedTokens);\r\n\r\n\t\t// now credit the user with his amount of contributed tokens \r\n\t\tbalances[msg.sender] = SafeMath.add(balances[msg.sender], creditedTokens);\r\n\r\n\t\t// update his contribution time for stake time locking\r\n\t\tcontributionTime[msg.sender] = block.timestamp;\r\n\r\n\t\t// now look if the attempted contribution would have taken the BANKROLL over the limit, \r\n\t\t// and if true, refund the excess ether.\r\n\t\tif (contributionTakesBankrollOverLimit){\r\n\t\t\tmsg.sender.transfer(ifContributionTakesBankrollOverLimit_Refund);\r\n\t\t}\r\n\r\n\t\t// log an event about funding bankroll\r\n\t\temit FundBankroll(msg.sender, contributedEther, creditedTokens);\r\n\r\n\t\t// log a mint tokens event\r\n\t\temit Transfer(0x0, msg.sender, creditedTokens);\r\n\t}\r\n\r\n\tfunction cashoutEOSBetStakeTokens(uint256 _amountTokens) public {\r\n\t\t// In effect, this function is the OPPOSITE of the un-named payable function above^^^\r\n\t\t// this allows bankrollers to \"cash out\" at any time, and receive the ether that they contributed, PLUS\r\n\t\t// a proportion of any ether that was earned by the smart contact when their ether was \"staking\", However\r\n\t\t// this works in reverse as well. Any net losses of the smart contract will be absorbed by the player in like manner.\r\n\t\t// Of course, due to the constant house edge, a bankroller that leaves their ether in the contract long enough\r\n\t\t// is effectively guaranteed to withdraw more ether than they originally \"staked\"\r\n\r\n\t\t// save in memory for cheap access.\r\n\t\tuint256 tokenBalance = balances[msg.sender];\r\n\t\t// verify that the contributor has enough tokens to cash out this many, and has waited the required time.\r\n\t\trequire(_amountTokens <= tokenBalance \r\n\t\t\t&& contributionTime[msg.sender] + WAITTIMEUNTILWITHDRAWORTRANSFER <= block.timestamp\r\n\t\t\t&& _amountTokens > 0);\r\n\r\n\t\t// save in memory for cheap access.\r\n\t\t// again, represents the total balance of the contract before the function was called.\r\n\t\tuint256 currentTotalBankroll = getBankroll();\r\n\t\tuint256 currentSupplyOfTokens = totalSupply;\r\n\r\n\t\t// calculate the token withdraw ratio based on current supply \r\n\t\tuint256 withdrawEther = SafeMath.mul(_amountTokens, currentTotalBankroll) / currentSupplyOfTokens;\r\n\r\n\t\t// developers take 1% of withdrawls \r\n\t\tuint256 developersCut = withdrawEther / 100;\r\n\t\tuint256 contributorAmount = SafeMath.sub(withdrawEther, developersCut);\r\n\r\n\t\t// now update the total supply of tokens by subtracting the tokens that are being \"cashed in\"\r\n\t\ttotalSupply = SafeMath.sub(currentSupplyOfTokens, _amountTokens);\r\n\r\n\t\t// and update the users supply of tokens \r\n\t\tbalances[msg.sender] = SafeMath.sub(tokenBalance, _amountTokens);\r\n\r\n\t\t// update the developers fund based on this calculated amount \r\n\t\tDEVELOPERSFUND = SafeMath.add(DEVELOPERSFUND, developersCut);\r\n\r\n\t\t// lastly, transfer the ether back to the bankroller. Thanks for your contribution!\r\n\t\tmsg.sender.transfer(contributorAmount);\r\n\r\n\t\t// log an event about cashout\r\n\t\temit CashOut(msg.sender, contributorAmount, _amountTokens);\r\n\r\n\t\t// log a destroy tokens event\r\n\t\temit Transfer(msg.sender, 0x0, _amountTokens);\r\n\t}\r\n\r\n\t// TO CALL THIS FUNCTION EASILY, SEND A 0 ETHER TRANSACTION TO THIS CONTRACT WITH EXTRA DATA: 0x7a09588b\r\n\tfunction cashoutEOSBetStakeTokens_ALL() public {\r\n\r\n\t\t// just forward to cashoutEOSBetStakeTokens with input as the senders entire balance\r\n\t\tcashoutEOSBetStakeTokens(balances[msg.sender]);\r\n\t}\r\n\r\n\t////////////////////\r\n\t// OWNER FUNCTIONS:\r\n\t////////////////////\r\n\t// Please, be aware that the owner ONLY can change:\r\n\t\t// 1. The owner can increase or decrease the target amount for a game. They can then call the updater function to give/receive the ether from the game.\r\n\t\t// 1. The wait time until a user can withdraw or transfer their tokens after purchase through the default function above ^^^\r\n\t\t// 2. The owner can change the maximum amount of investments allowed. This allows for early contributors to guarantee\r\n\t\t// \t\ta certain percentage of the bankroll so that their stake cannot be diluted immediately. However, be aware that the \r\n\t\t//\t\tmaximum amount of investments allowed will be raised over time. This will allow for higher bets by gamblers, resulting\r\n\t\t// \t\tin higher dividends for the bankrollers\r\n\t\t// 3. The owner can freeze payouts to bettors. This will be used in case of an emergency, and the contract will reject all\r\n\t\t//\t\tnew bets as well. This does not mean that bettors will lose their money without recompense. They will be allowed to call the \r\n\t\t// \t\t\"refund\" function in the respective game smart contract once payouts are un-frozen.\r\n\t\t// 4. Finally, the owner can modify and withdraw the developers reward, which will fund future development, including new games, a sexier frontend,\r\n\t\t// \t\tand TRUE DAO governance so that onlyOwner functions don't have to exist anymore ;) and in order to effectively react to changes \r\n\t\t// \t\tin the market (lower the percentage because of increased competition in the blockchain casino space, etc.)\r\n\r\n\tfunction transferOwnership(address newOwner) public {\r\n\t\trequire(msg.sender == OWNER);\r\n\r\n\t\tOWNER = newOwner;\r\n\t}\r\n\r\n\tfunction changeWaitTimeUntilWithdrawOrTransfer(uint256 waitTime) public {\r\n\t\t// waitTime MUST be less than or equal to 10 weeks\r\n\t\trequire (msg.sender == OWNER && waitTime <= 6048000);\r\n\r\n\t\tWAITTIMEUNTILWITHDRAWORTRANSFER = waitTime;\r\n\t}\r\n\r\n\tfunction changeMaximumInvestmentsAllowed(uint256 maxAmount) public {\r\n\t\trequire(msg.sender == OWNER);\r\n\r\n\t\tMAXIMUMINVESTMENTSALLOWED = maxAmount;\r\n\t}\r\n\r\n\r\n\tfunction withdrawDevelopersFund(address receiver) public {\r\n\t\trequire(msg.sender == OWNER);\r\n\r\n\t\t// first get developers fund from each game \r\n        EOSBetGameInterface(DICE).payDevelopersFund(receiver);\r\n\t\tEOSBetGameInterface(SLOTS).payDevelopersFund(receiver);\r\n\r\n\t\t// now send the developers fund from the main contract.\r\n\t\tuint256 developersFund = DEVELOPERSFUND;\r\n\r\n\t\t// set developers fund to zero\r\n\t\tDEVELOPERSFUND = 0;\r\n\r\n\t\t// transfer this amount to the owner!\r\n\t\treceiver.transfer(developersFund);\r\n\t}\r\n\r\n\t// Can be removed after some testing...\r\n\tfunction emergencySelfDestruct() public {\r\n\t\trequire(msg.sender == OWNER);\r\n\r\n\t\tselfdestruct(msg.sender);\r\n\t}\r\n\r\n\t///////////////////////////////\r\n\t// BASIC ERC20 TOKEN OPERATIONS\r\n\t///////////////////////////////\r\n\r\n\tfunction totalSupply() constant public returns(uint){\r\n\t\treturn totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) constant public returns(uint){\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\t// don't allow transfers before the required wait-time\r\n\t// and don't allow transfers to this contract addr, it'll just kill tokens\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success){\r\n\t\tif (balances[msg.sender] >= _value \r\n\t\t\t&& _value > 0 \r\n\t\t\t&& contributionTime[msg.sender] + WAITTIMEUNTILWITHDRAWORTRANSFER <= block.timestamp\r\n\t\t\t&& _to != address(this)){\r\n\r\n\t\t\t// safely subtract\r\n\t\t\tbalances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\r\n\t\t\tbalances[_to] = SafeMath.add(balances[_to], _value);\r\n\r\n\t\t\t// log event \r\n\t\t\temit Transfer(msg.sender, _to, _value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t// don't allow transfers before the required wait-time\r\n\t// and don't allow transfers to the contract addr, it'll just kill tokens\r\n\tfunction transferFrom(address _from, address _to, uint _value) public returns(bool){\r\n\t\tif (allowed[_from][msg.sender] >= _value \r\n\t\t\t&& balances[_from] >= _value \r\n\t\t\t&& _value > 0 \r\n\t\t\t&& contributionTime[_from] + WAITTIMEUNTILWITHDRAWORTRANSFER <= block.timestamp\r\n\t\t\t&& _to != address(this)){\r\n\r\n\t\t\t// safely add to _to and subtract from _from, and subtract from allowed balances.\r\n\t\t\tbalances[_to] = SafeMath.add(balances[_to], _value);\r\n\t   \t\tbalances[_from] = SafeMath.sub(balances[_from], _value);\r\n\t  \t\tallowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\r\n\r\n\t  \t\t// log event\r\n    \t\temit Transfer(_from, _to, _value);\r\n    \t\treturn true;\r\n   \t\t} \r\n    \telse { \r\n    \t\treturn false;\r\n    \t}\r\n\t}\r\n\t\r\n\tfunction approve(address _spender, uint _value) public returns(bool){\r\n\t\tif(_value > 0){\r\n\r\n\t\t\tallowed[msg.sender][_spender] = _value;\r\n\t\t\temit Approval(msg.sender, _spender, _value);\r\n\t\t\t// log event\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction allowance(address _owner, address _spender) constant public returns(uint){\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract EOSBetDice is usingOraclize, EOSBetGameInterface {\r\n\r\n\tusing SafeMath for *;\r\n\r\n\t// events\r\n\tevent BuyRolls(bytes32 indexed oraclizeQueryId);\r\n\tevent LedgerProofFailed(bytes32 indexed oraclizeQueryId);\r\n\tevent Refund(bytes32 indexed oraclizeQueryId, uint256 amount);\r\n\tevent DiceSmallBet(uint16 actualRolls, uint256 data1, uint256 data2, uint256 data3, uint256 data4);\r\n\tevent DiceLargeBet(bytes32 indexed oraclizeQueryId, uint16 actualRolls, uint256 data1, uint256 data2, uint256 data3, uint256 data4);\r\n\r\n\t// game data structure\r\n\tstruct DiceGameData {\r\n\t\taddress player;\r\n\t\tbool paidOut;\r\n\t\tuint256 start;\r\n\t\tuint256 etherReceived;\r\n\t\tuint256 betPerRoll;\r\n\t\tuint16 rolls;\r\n\t\tuint8 rollUnder;\r\n\t}\r\n\r\n\tmapping (bytes32 => DiceGameData) public diceData;\r\n\r\n\t// ether in this contract can be in one of two locations:\r\n\tuint256 public LIABILITIES;\r\n\tuint256 public DEVELOPERSFUND;\r\n\r\n\t// counters for frontend statistics\r\n\tuint256 public AMOUNTWAGERED;\r\n\tuint256 public GAMESPLAYED;\r\n\t\r\n\t// togglable values\r\n\tuint256 public ORACLIZEQUERYMAXTIME;\r\n\tuint256 public MINBET_forORACLIZE;\r\n\tuint256 public MINBET;\r\n\tuint256 public ORACLIZEGASPRICE;\r\n\tuint256 public INITIALGASFORORACLIZE;\r\n\tuint8 public HOUSEEDGE_inTHOUSANDTHPERCENTS; // 1 thousanthpercent == 1/1000, \r\n\tuint8 public MAXWIN_inTHOUSANDTHPERCENTS; // determines the maximum win a user may receive.\r\n\r\n\t// togglable functionality of contract\r\n\tbool public GAMEPAUSED;\r\n\tbool public REFUNDSACTIVE;\r\n\r\n\t// owner of contract\r\n\taddress public OWNER;\r\n\r\n\t// bankroller address\r\n\taddress public BANKROLLER;\r\n\r\n\t// constructor\r\n\tfunction EOSBetDice() public {\r\n\t\t// ledger proof is ALWAYS verified on-chain\r\n\t\toraclize_setProof(proofType_Ledger);\r\n\r\n\t\t// gas prices for oraclize call back, can be changed\r\n\t\toraclize_setCustomGasPrice(10000000000);\r\n\t\tORACLIZEGASPRICE = 10000000000;\r\n\t\tINITIALGASFORORACLIZE = 225000;\r\n\r\n\t\tAMOUNTWAGERED = 0;\r\n\t\tGAMESPLAYED = 0;\r\n\r\n\t\tGAMEPAUSED = false;\r\n\t\tREFUNDSACTIVE = true;\r\n\r\n\t\tORACLIZEQUERYMAXTIME = 6 hours;\r\n\t\tMINBET_forORACLIZE = 350 finney; // 0.35 ether is a limit to prevent an incentive for miners to cheat, any more will be forwarded to oraclize!\r\n\t\tMINBET = 5 finney; // currently this is around $2-2.50 per spin, which is comparable with a very cheap casino\r\n\t\tHOUSEEDGE_inTHOUSANDTHPERCENTS = 5; // 5/1000 == 0.5% house edge\r\n\t\tMAXWIN_inTHOUSANDTHPERCENTS = 35; // 35/1000 == 3.5% of bankroll can be won in a single bet, will be lowered once there is more investors\r\n\t\tOWNER = msg.sender;\r\n\t}\r\n\r\n\t////////////////////////////////////\r\n\t// INTERFACE CONTACT FUNCTIONS\r\n\t////////////////////////////////////\r\n\r\n\tfunction payDevelopersFund(address developer) public {\r\n\t\trequire(msg.sender == BANKROLLER);\r\n\r\n\t\tuint256 devFund = DEVELOPERSFUND;\r\n\r\n\t\tDEVELOPERSFUND = 0;\r\n\r\n\t\tdeveloper.transfer(devFund);\r\n\t}\r\n\r\n\t// just a function to receive eth, only allow the bankroll to use this\r\n\tfunction receivePaymentForOraclize() payable public {\r\n\t\trequire(msg.sender == BANKROLLER);\r\n\t}\r\n\r\n\t////////////////////////////////////\r\n\t// VIEW FUNCTIONS\r\n\t////////////////////////////////////\r\n\r\n\tfunction getMaxWin() public view returns(uint256){\r\n\t\treturn (SafeMath.mul(EOSBetBankrollInterface(BANKROLLER).getBankroll(), MAXWIN_inTHOUSANDTHPERCENTS) / 1000);\r\n\t}\r\n\r\n\t////////////////////////////////////\r\n\t// OWNER ONLY FUNCTIONS\r\n\t////////////////////////////////////\r\n\r\n\t// WARNING!!!!! Can only set this function once!\r\n\tfunction setBankrollerContractOnce(address bankrollAddress) public {\r\n\t\t// require that BANKROLLER address == 0 (address not set yet), and coming from owner.\r\n\t\trequire(msg.sender == OWNER && BANKROLLER == address(0));\r\n\r\n\t\t// check here to make sure that the bankroll contract is legitimate\r\n\t\t// just make sure that calling the bankroll contract getBankroll() returns non-zero\r\n\r\n\t\trequire(EOSBetBankrollInterface(bankrollAddress).getBankroll() != 0);\r\n\r\n\t\tBANKROLLER = bankrollAddress;\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public {\r\n\t\trequire(msg.sender == OWNER);\r\n\r\n\t\tOWNER = newOwner;\r\n\t}\r\n\r\n\tfunction setOraclizeQueryMaxTime(uint256 newTime) public {\r\n\t\trequire(msg.sender == OWNER);\r\n\r\n\t\tORACLIZEQUERYMAXTIME = newTime;\r\n\t}\r\n\r\n\t// store the gas price as a storage variable for easy reference,\r\n\t// and then change the gas price using the proper oraclize function\r\n\tfunction setOraclizeQueryGasPrice(uint256 gasPrice) public {\r\n\t\trequire(msg.sender == OWNER);\r\n\r\n\t\tORACLIZEGASPRICE = gasPrice;\r\n\t\toraclize_setCustomGasPrice(gasPrice);\r\n\t}\r\n\r\n\t// should be ~175,000 to save eth\r\n\tfunction setInitialGasForOraclize(uint256 gasAmt) public {\r\n\t\trequire(msg.sender == OWNER);\r\n\r\n\t\tINITIALGASFORORACLIZE = gasAmt;\r\n\t}\r\n\r\n\tfunction setGamePaused(bool paused) public {\r\n\t\trequire(msg.sender == OWNER);\r\n\r\n\t\tGAMEPAUSED = paused;\r\n\t}\r\n\r\n\tfunction setRefundsActive(bool active) public {\r\n\t\trequire(msg.sender == OWNER);\r\n\r\n\t\tREFUNDSACTIVE = active;\r\n\t}\r\n\r\n\tfunction setHouseEdge(uint8 houseEdgeInThousandthPercents) public {\r\n\t\t// house edge cannot be set > 5%, can be set to zero for promotions\r\n\t\trequire(msg.sender == OWNER && houseEdgeInThousandthPercents <= 50);\r\n\r\n\t\tHOUSEEDGE_inTHOUSANDTHPERCENTS = houseEdgeInThousandthPercents;\r\n\t}\r\n\r\n\t// setting this to 0 would just force all bets through oraclize, and setting to MAX_UINT_256 would never use oraclize \r\n\tfunction setMinBetForOraclize(uint256 minBet) public {\r\n\t\trequire(msg.sender == OWNER);\r\n\r\n\t\tMINBET_forORACLIZE = minBet;\r\n\t}\r\n\r\n\tfunction setMinBet(uint256 minBet) public {\r\n\t\trequire(msg.sender == OWNER && minBet > 1000);\r\n\r\n\t\tMINBET = minBet;\r\n\t}\r\n\r\n\tfunction setMaxWin(uint8 newMaxWinInThousandthPercents) public {\r\n\t\t// cannot set bet limit greater than 5% of total BANKROLL.\r\n\t\trequire(msg.sender == OWNER && newMaxWinInThousandthPercents <= 50);\r\n\r\n\t\tMAXWIN_inTHOUSANDTHPERCENTS = newMaxWinInThousandthPercents;\r\n\t}\r\n\r\n\t// Can be removed after some testing...\r\n\tfunction emergencySelfDestruct() public {\r\n\t\trequire(msg.sender == OWNER);\r\n\r\n\t\tselfdestruct(msg.sender);\r\n\t}\r\n\r\n\t// require that the query time is too slow, bet has not been paid out, and either contract owner or player is calling this function.\r\n\t// this will only be used/can occur on queries that are forwarded to oraclize in the first place. All others will be paid out immediately.\r\n\tfunction refund(bytes32 oraclizeQueryId) public {\r\n\t\t// store data in memory for easy access.\r\n\t\tDiceGameData memory data = diceData[oraclizeQueryId];\r\n\r\n\t\trequire(block.timestamp - data.start >= ORACLIZEQUERYMAXTIME\r\n\t\t\t&& (msg.sender == OWNER || msg.sender == data.player)\r\n\t\t\t&& (!data.paidOut)\r\n\t\t\t&& LIABILITIES >= data.etherReceived\r\n\t\t\t&& data.etherReceived > 0\r\n\t\t\t&& REFUNDSACTIVE);\r\n\r\n\t\t// set paidout == true, so users can't request more refunds, and a super delayed oraclize __callback will just get reverted\r\n\t\tdiceData[oraclizeQueryId].paidOut = true;\r\n\r\n\t\t// subtract etherReceived because the bet is being refunded\r\n\t\tLIABILITIES = SafeMath.sub(LIABILITIES, data.etherReceived);\r\n\r\n\t\t// then transfer the original bet to the player.\r\n\t\tdata.player.transfer(data.etherReceived);\r\n\r\n\t\t// finally, log an event saying that the refund has processed.\r\n\t\temit Refund(oraclizeQueryId, data.etherReceived);\r\n\t}\r\n\r\n\tfunction play(uint256 betPerRoll, uint16 rolls, uint8 rollUnder) public payable {\r\n\r\n\t\trequire(!GAMEPAUSED\r\n\t\t\t\t&& msg.value > 0\r\n\t\t\t\t&& betPerRoll >= MINBET\r\n\t\t\t\t&& rolls > 0\r\n\t\t\t\t&& rolls <= 1024\r\n\t\t\t\t&& betPerRoll <= msg.value\r\n\t\t\t\t&& rollUnder > 1\r\n\t\t\t\t&& rollUnder < 100\r\n\t\t\t\t// make sure that the player cannot win more than the max win (forget about house edge here)\r\n\t\t\t\t&& (SafeMath.mul(betPerRoll, 100) / (rollUnder - 1)) <= getMaxWin());\r\n\r\n\t\t// if bets are relatively small, resolve the bet in-house\r\n\t\tif (betPerRoll < MINBET_forORACLIZE) {\r\n\r\n\t\t\t// randomness will be determined by keccak256(blockhash, nonce)\r\n\t\t\t// store these in memory for cheap access.\r\n\t\t\tbytes32 blockHash = block.blockhash(block.number);\r\n\t\t\tuint8 houseEdgeInThousandthPercents = HOUSEEDGE_inTHOUSANDTHPERCENTS;\r\n\r\n\t\t\t// these are variables that will be modified when the game runs\r\n\t\t\t// keep track of the amount to payout to the player\r\n\t\t\t// this will actually start as the received amount of ether, and will be incremented\r\n\t\t\t// or decremented based on whether each roll is winning or losing.\r\n\t\t\t// when payout gets below the etherReceived/rolls amount, then the loop will terminate.\r\n\t\t\tuint256 etherAvailable = msg.value;\r\n\r\n\t\t\t// these are the logs for the frontend...\r\n\t\t\tuint256[] memory logsData = new uint256[](4);\r\n\r\n\t\t\tuint256 winnings;\r\n\t\t\tuint16 gamesPlayed;\r\n\r\n\t\t\t// get this value outside of the loop for gas costs sake\r\n\t\t\tuint256 hypotheticalWinAmount = SafeMath.mul(SafeMath.mul(betPerRoll, 100), (1000 - houseEdgeInThousandthPercents)) / (rollUnder - 1) / 1000;\r\n\r\n\t\t\twhile (gamesPlayed < rolls && etherAvailable >= betPerRoll){\r\n\t\t\t\t// this roll is keccak256(blockhash, nonce) + 1 so between 1-100 (inclusive)\r\n\r\n\t\t\t\tif (uint8(uint256(keccak256(blockHash, gamesPlayed)) % 100) + 1 < rollUnder){\r\n\t\t\t\t\t// winner!\r\n\t\t\t\t\t// add the winnings to ether avail -> (betPerRoll * probability of hitting this number) * (house edge modifier)\r\n\t\t\t\t\twinnings = hypotheticalWinAmount;\r\n\r\n\t\t\t\t\t// now assemble logs for the front end...\r\n\t\t\t\t\t// game 1 win == 1000000...\r\n\t\t\t\t\t// games 1 & 2 win == 11000000...\r\n\t\t\t\t\t// games 1 & 3 win == 1010000000....\r\n\r\n\t\t\t\t\tif (gamesPlayed <= 255){\r\n\t\t\t\t\t\tlogsData[0] += uint256(2) ** (255 - gamesPlayed);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (gamesPlayed <= 511){\r\n\t\t\t\t\t\tlogsData[1] += uint256(2) ** (511 - gamesPlayed);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (gamesPlayed <= 767){\r\n\t\t\t\t\t\tlogsData[2] += uint256(2) ** (767 - gamesPlayed);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// where i <= 1023\r\n\t\t\t\t\t\tlogsData[3] += uint256(2) ** (1023 - gamesPlayed);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// loser, win 1 wei as a consolation prize :)\r\n\t\t\t\t\twinnings = 1;\r\n\t\t\t\t\t// we don't need to \"place a zero\" on this roll's spot in the logs, because they are init'ed to zero.\r\n\t\t\t\t}\r\n\t\t\t\t// add 1 to gamesPlayed, this is the nonce.\r\n\t\t\t\tgamesPlayed++;\r\n\r\n\t\t\t\t// add the winnings, and subtract the betPerRoll cost.\r\n\t\t\t\tetherAvailable = SafeMath.sub(SafeMath.add(etherAvailable, winnings), betPerRoll);\r\n\t\t\t}\r\n\r\n\t\t\t// update the gamesPlayed with how many games were played \r\n\t\t\tGAMESPLAYED += gamesPlayed;\r\n\t\t\t// update amount wagered with betPerRoll * i (the amount of times the roll loop was executed)\r\n\t\t\tAMOUNTWAGERED = SafeMath.add(AMOUNTWAGERED, SafeMath.mul(betPerRoll, gamesPlayed));\r\n\r\n\t\t\t// every roll, we will transfer 10% of the profit to the developers fund (profit per roll = house edge)\r\n\t\t\t// that is: betPerRoll * (1%) * num rolls * (20%)\r\n\t\t\tuint256 developersCut = SafeMath.mul(SafeMath.mul(betPerRoll, houseEdgeInThousandthPercents), gamesPlayed) / 5000;\r\n\r\n\t\t\t// add to DEVELOPERSFUND\r\n\t\t\tDEVELOPERSFUND = SafeMath.add(DEVELOPERSFUND, developersCut);\r\n\r\n\t\t\t// transfer the (msg.value - developersCut) to the bankroll\r\n\t\t\tEOSBetBankrollInterface(BANKROLLER).receiveEtherFromGameAddress.value(SafeMath.sub(msg.value, developersCut))();\r\n\r\n\t\t\t// now payout ether\r\n\t\t\tEOSBetBankrollInterface(BANKROLLER).payEtherToWinner(etherAvailable, msg.sender);\r\n\r\n\t\t\t// log an event, with the outcome of the dice game, so that the frontend can parse it for the player.\r\n\t\t\temit DiceSmallBet(gamesPlayed, logsData[0], logsData[1], logsData[2], logsData[3]);\r\n\t\t}\r\n\r\n\t\t// // otherwise, we need to save the game data into storage, and call oraclize\r\n\t\t// // to get the miner-interference-proof randomness for us.\r\n\t\t// // when oraclize calls back, we will reinstantiate the game data and resolve \r\n\t\t// // the spins with the random number given by oraclize \r\n\t\telse {\r\n\t\t\t// oraclize_newRandomDSQuery(delay in seconds, bytes of random data, gas for callback function)\r\n\t\t\tbytes32 oraclizeQueryId;\r\n\r\n\t\t\t// equation for gas to oraclize is:\r\n\t\t\t// gas = (some fixed gas amt) + 1005 * rolls\r\n\r\n\t\t\tEOSBetBankrollInterface(BANKROLLER).payOraclize(oraclize_getPrice('random', INITIALGASFORORACLIZE + (uint256(1005) * rolls)));\r\n\r\n\t\t\toraclizeQueryId = oraclize_newRandomDSQuery(0, 30, INITIALGASFORORACLIZE + (uint256(1005) * rolls));\r\n\r\n\t\t\tdiceData[oraclizeQueryId] = DiceGameData({\r\n\t\t\t\tplayer : msg.sender,\r\n\t\t\t\tpaidOut : false,\r\n\t\t\t\tstart : block.timestamp,\r\n\t\t\t\tetherReceived : msg.value,\r\n\t\t\t\tbetPerRoll : betPerRoll,\r\n\t\t\t\trolls : rolls,\r\n\t\t\t\trollUnder : rollUnder\r\n\t\t\t});\r\n\r\n\t\t\t// add the sent value into liabilities. this should NOT go into the bankroll yet\r\n\t\t\t// and must be quarantined here to prevent timing attacks\r\n\t\t\tLIABILITIES = SafeMath.add(LIABILITIES, msg.value);\r\n\r\n\t\t\t// log an event\r\n\t\t\temit BuyRolls(oraclizeQueryId);\r\n\t\t}\r\n\t}\r\n\r\n\t// oraclize callback.\r\n\t// Basically do the instant bet resolution in the play(...) function above, but with the random data \r\n\t// that oraclize returns, instead of getting psuedo-randomness from block.blockhash \r\n\tfunction __callback(bytes32 _queryId, string _result, bytes _proof) public {\r\n\r\n\t\tDiceGameData memory data = diceData[_queryId];\r\n\t\t// only need to check these, as all of the game based checks were already done in the play(...) function \r\n\t\trequire(msg.sender == oraclize_cbAddress() \r\n\t\t\t&& !data.paidOut \r\n\t\t\t&& data.player != address(0) \r\n\t\t\t&& LIABILITIES >= data.etherReceived);\r\n\r\n\t\t// if the proof has failed, immediately refund the player his original bet...\r\n\t\tif (oraclize_randomDS_proofVerify__returnCode(_queryId, _result, _proof) != 0){\r\n\r\n\t\t\tif (REFUNDSACTIVE){\r\n\t\t\t\t// set contract data\r\n\t\t\t\tdiceData[_queryId].paidOut = true;\r\n\r\n\t\t\t\t// if the call fails, then subtract the original value sent from liabilites and amount wagered, and then send it back\r\n\t\t\t\tLIABILITIES = SafeMath.sub(LIABILITIES, data.etherReceived);\r\n\r\n\t\t\t\t// transfer the original bet\r\n\t\t\t\tdata.player.transfer(data.etherReceived);\r\n\r\n\t\t\t\t// log the refund\r\n\t\t\t\temit Refund(_queryId, data.etherReceived);\r\n\t\t\t}\r\n\t\t\t// log the ledger proof fail\r\n\t\t\temit LedgerProofFailed(_queryId);\r\n\t\t\t\r\n\t\t}\r\n\t\t// else, resolve the bet as normal with this miner-proof proven-randomness from oraclize.\r\n\t\telse {\r\n\t\t\t// save these in memory for cheap access\r\n\t\t\tuint8 houseEdgeInThousandthPercents = HOUSEEDGE_inTHOUSANDTHPERCENTS;\r\n\r\n\t\t\t// set the current balance available to the player as etherReceived\r\n\t\t\tuint256 etherAvailable = data.etherReceived;\r\n\r\n\t\t\t// logs for the frontend, as before...\r\n\t\t\tuint256[] memory logsData = new uint256[](4);\r\n\r\n\t\t\t// this loop is highly similar to the one from before. Instead of fully documented, the differences will be pointed out instead.\r\n\t\t\tuint256 winnings;\r\n\t\t\tuint16 gamesPlayed;\r\n\r\n\t\t\t// get this value outside of the loop for gas costs sake\r\n\t\t\tuint256 hypotheticalWinAmount = SafeMath.mul(SafeMath.mul(data.betPerRoll, 100), (1000 - houseEdgeInThousandthPercents)) / (data.rollUnder - 1) / 1000;\r\n\r\n\t\t\twhile (gamesPlayed < data.rolls && etherAvailable >= data.betPerRoll){\r\n\t\t\t\t\r\n\t\t\t\t// now, this roll is keccak256(_result, nonce) + 1 ... this is the main difference from using oraclize.\r\n\r\n\t\t\t\tif (uint8(uint256(keccak256(_result, gamesPlayed)) % 100) + 1 < data.rollUnder){\r\n\r\n\t\t\t\t\t// now, just get the respective fields from data.field unlike before where they were in seperate variables.\r\n\t\t\t\t\twinnings = hypotheticalWinAmount;\r\n\r\n\t\t\t\t\t// assemble logs...\r\n\t\t\t\t\tif (gamesPlayed <= 255){\r\n\t\t\t\t\t\tlogsData[0] += uint256(2) ** (255 - gamesPlayed);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (gamesPlayed <= 511){\r\n\t\t\t\t\t\tlogsData[1] += uint256(2) ** (511 - gamesPlayed);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (gamesPlayed <= 767){\r\n\t\t\t\t\t\tlogsData[2] += uint256(2) ** (767 - gamesPlayed);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlogsData[3] += uint256(2) ** (1023 - gamesPlayed);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//  leave 1 wei as a consolation prize :)\r\n\t\t\t\t\twinnings = 1;\r\n\t\t\t\t}\r\n\t\t\t\tgamesPlayed++;\r\n\t\t\t\t\r\n\t\t\t\tetherAvailable = SafeMath.sub(SafeMath.add(etherAvailable, winnings), data.betPerRoll);\r\n\t\t\t}\r\n\r\n\t\t\t// track that these games were played\r\n\t\t\tGAMESPLAYED += gamesPlayed;\r\n\r\n\t\t\t// and add the amount wagered\r\n\t\t\tAMOUNTWAGERED = SafeMath.add(AMOUNTWAGERED, SafeMath.mul(data.betPerRoll, gamesPlayed));\r\n\r\n\t\t\t// IMPORTANT: we must change the \"paidOut\" to TRUE here to prevent reentrancy/other nasty effects.\r\n\t\t\t// this was not needed with the previous loop/code block, and is used because variables must be written into storage\r\n\t\t\tdiceData[_queryId].paidOut = true;\r\n\r\n\t\t\t// decrease LIABILITIES when the spins are made\r\n\t\t\tLIABILITIES = SafeMath.sub(LIABILITIES, data.etherReceived);\r\n\r\n\t\t\t// get the developers cut, and send the rest of the ether received to the bankroller contract\r\n\t\t\tuint256 developersCut = SafeMath.mul(SafeMath.mul(data.betPerRoll, houseEdgeInThousandthPercents), gamesPlayed) / 5000;\r\n\r\n\t\t\t// add the devs cut to the developers fund.\r\n\t\t\tDEVELOPERSFUND = SafeMath.add(DEVELOPERSFUND, developersCut);\r\n\r\n\t\t\tEOSBetBankrollInterface(BANKROLLER).receiveEtherFromGameAddress.value(SafeMath.sub(data.etherReceived, developersCut))();\r\n\r\n\t\t\t// force the bankroller contract to pay out the player\r\n\t\t\tEOSBetBankrollInterface(BANKROLLER).payEtherToWinner(etherAvailable, data.player);\r\n\r\n\t\t\t// log an event, now with the oraclize query id\r\n\t\t\temit DiceLargeBet(_queryId, gamesPlayed, logsData[0], logsData[1], logsData[2], logsData[3]);\r\n\t\t}\r\n\t}\r\n\r\n// END OF CONTRACT. REPORT ANY BUGS TO DEVELOPMENT@EOSBET.IO\r\n// YES! WE _DO_ HAVE A BUG BOUNTY PROGRAM!\r\n\r\n// THANK YOU FOR READING THIS CONTRACT, HAVE A NICE DAY :)\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setOraclizeQueryMaxTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAXWIN_inTHOUSANDTHPERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOUSEEDGE_inTHOUSANDTHPERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVELOPERSFUND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIABILITIES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"houseEdgeInThousandthPercents\",\"type\":\"uint8\"}],\"name\":\"setHouseEdge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AMOUNTWAGERED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFUNDSACTIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINBET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"diceData\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"paidOut\",\"type\":\"bool\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"etherReceived\",\"type\":\"uint256\"},{\"name\":\"betPerRoll\",\"type\":\"uint256\"},{\"name\":\"rolls\",\"type\":\"uint16\"},{\"name\":\"rollUnder\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxWinInThousandthPercents\",\"type\":\"uint8\"}],\"name\":\"setMaxWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oraclizeQueryId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minBet\",\"type\":\"uint256\"}],\"name\":\"setMinBetForOraclize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ORACLIZEQUERYMAXTIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"developer\",\"type\":\"address\"}],\"name\":\"payDevelopersFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minBet\",\"type\":\"uint256\"}],\"name\":\"setMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"setOraclizeQueryGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receivePaymentForOraclize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"betPerRoll\",\"type\":\"uint256\"},{\"name\":\"rolls\",\"type\":\"uint16\"},{\"name\":\"rollUnder\",\"type\":\"uint8\"}],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINBET_forORACLIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANKROLLER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setGamePaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bankrollAddress\",\"type\":\"address\"}],\"name\":\"setBankrollerContractOnce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ORACLIZEGASPRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIALGASFORORACLIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAMEPAUSED\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencySelfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAMESPLAYED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setRefundsActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gasAmt\",\"type\":\"uint256\"}],\"name\":\"setInitialGasForOraclize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oraclizeQueryId\",\"type\":\"bytes32\"}],\"name\":\"BuyRolls\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oraclizeQueryId\",\"type\":\"bytes32\"}],\"name\":\"LedgerProofFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oraclizeQueryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"actualRolls\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"data1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data3\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data4\",\"type\":\"uint256\"}],\"name\":\"DiceSmallBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oraclizeQueryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"actualRolls\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"data1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data3\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data4\",\"type\":\"uint256\"}],\"name\":\"DiceLargeBet\",\"type\":\"event\"}]","ContractName":"EOSBetDice","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5d40719f40ba5f912b349bc3c0668ce4b04180d1b3f4851f66b7bbbcaec7ac24"}]}