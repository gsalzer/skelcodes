{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        safeassert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        safeassert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        safeassert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n    \r\n    function safeassert(bool assertion) internal {\r\n        require(assertion);\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\ncontract Owner {\r\n    address public owner;\r\n\r\n    function Owner() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address new_owner) onlyOwner public {\r\n        require(new_owner != 0x0);\r\n        owner = new_owner;\r\n    }\r\n}\r\n\r\ncontract EtherIncPrivate is ERC20Interface,Owner,SafeMath {\r\n    string public symbol;\r\n    string public name;\r\n    uint public decimals = 18;\r\n    \r\n    uint256 rate = 2000;\r\n    \r\n    uint256 _totalSupply;\r\n    bool privateIco = true;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    mapping(address => uint256) balances;\r\n    mapping(address => Whitelist) public whitelist;\r\n    mapping(address => uint256) public withdrawable;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    \r\n    \r\n    struct Whitelist {\r\n        uint256 amount;\r\n        address beneficiary;\r\n        bool active;\r\n    }\r\n    \r\n    /**\r\n    * @dev Fix for the ERC20 short address attack.\r\n    */\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4) ;\r\n        _;\r\n    }\r\n    \r\n    function endprivateIco(bool __status) onlyOwner public {\r\n        if(__status){\r\n            privateIco = false;\r\n        }\r\n    }\r\n    \r\n    function totalSupply() constant returns (uint256 __totalSupply) {        \r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function EtherIncPrivate() {\r\n        name = \"EtherInc Private\";\r\n        symbol = \"ETI-P\";\r\n        owner = msg.sender;\r\n        _totalSupply = 0;\r\n    }\r\n    \r\n    function () payable {\r\n        require(privateIco);\r\n        Whitelist storage w = whitelist[msg.sender];\r\n        require(w.active && msg.value >= w.amount);\r\n        uint256 token_amount = safeMul(msg.value, rate);\r\n        _totalSupply = safeAdd(_totalSupply, token_amount);\r\n        balances[msg.sender] = token_amount;\r\n        (w.beneficiary).transfer(msg.value);\r\n        Transfer(address(this), msg.sender, token_amount);\r\n    }\r\n    \r\n    function transfer(\r\n        address _to, uint256 _amount\r\n    ) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && safeAdd(balances[_to], _amount) > balances[_to]) {\r\n            balances[msg.sender] = safeSub(balances[msg.sender], _amount);\r\n            balances[_to] = safeAdd(balances[_to], _amount);\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n        if (balances[_from] >= _amount\r\n        && allowed[_from][msg.sender] >= _amount\r\n        && _amount > 0\r\n        && safeAdd(balances[_to], _amount) > balances[_to]) {\r\n            balances[_from] = safeSub(balances[_from], _amount);\r\n            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _amount);\r\n            balances[_to] = safeAdd(balances[_to], _amount);\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function approve(\r\n        address _spender, uint256 _amount\r\n    ) public returns (bool success) {\r\n        require(balances[msg.sender] >= _amount);\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(\r\n        address _owner, address _spender\r\n    ) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function whitelist_pool(\r\n        address _pool, address _beneficiary, uint _amount\r\n    ) onlyPayloadSize(2 * 32) onlyOwner public returns (bool success) {\r\n        Whitelist storage w = whitelist[_pool];\r\n        // check already whitelisted \r\n        require(!w.active);\r\n        \r\n        w.active = true;\r\n        w.beneficiary = _beneficiary;\r\n        w.amount = _amount * 1 ether;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function withdraw_to_eti() onlyPayloadSize(2 * 32) public returns (bool success) {\r\n        require(privateIco && balances[msg.sender] > 0);\r\n        \r\n        uint256 amount = balances[msg.sender];\r\n        balances[msg.sender] = 0;\r\n        withdrawable[msg.sender] = amount;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"whitelist_pool\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"__totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_to_eti\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"__status\",\"type\":\"bool\"}],\"name\":\"endprivateIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EtherIncPrivate","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0fbc7dd144cadfc93760c81d99fc4589fc75969f98519373bef72a8b451c3553"}]}