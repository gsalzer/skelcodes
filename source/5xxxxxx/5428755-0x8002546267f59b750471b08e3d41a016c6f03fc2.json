{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract GiveMeLambosVitalik{\r\n    Lambo lamboContract = Lambo(0xD0B0F77c2454B28B925B7430A71DF0EBf8a150ac);\r\n\r\n    function gibLambos(uint256 gib) public {\r\n        \r\n        // no hackerz here\r\n        if (lamboContract.balanceOf(address(this)) > 0) {\r\n            lamboContract.burn(lamboContract.balanceOf(address(this)));\r\n        }\r\n        \r\n        for (uint256 numLambos = 0; numLambos < gib; numLambos++) {\r\n            lamboContract.mint(address(0x0));\r\n            lamboContract.transfer(msg.sender, 1);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Lambo {\r\n\r\n    string public name = \"Lambo\";      //  token name\r\n    string public symbol = \"LAMBO\";           //  token symbol\r\n    uint256 public decimals = 18;            //  token digit\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    uint256 public totalSupply = 0;\r\n\r\n    address owner;\r\n\r\n    modifier isOwner {\r\n        assert(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    modifier validAddress {\r\n        assert(0x0 != msg.sender);\r\n        _;\r\n    }\r\n\r\n    function Lambo() public {\r\n        owner = msg.sender;\r\n        mint(owner);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public validAddress returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public validAddress returns (bool success) {\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        require(allowance[_from][msg.sender] >= _value);\r\n        balanceOf[_to] += _value;\r\n        balanceOf[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public validAddress returns (bool success) {\r\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // WTF you want to burn LAMBO!?\r\n    function burn(uint256 _value) public {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[0x0] += _value;\r\n        emit Transfer(msg.sender, 0x0, _value);\r\n    }\r\n    \r\n    function mint(address who) public {\r\n        if (who == 0x0){\r\n            who = msg.sender;\r\n        }\r\n        require(balanceOf[who] == 0);\r\n        _mint(who, 1);\r\n    }\r\n    \r\n    function mintMore(address who) public payable{\r\n        if (who == 0x0){\r\n            who = msg.sender;\r\n        }\r\n        require(msg.value >= (1 finney));\r\n        _mint(who,3);\r\n        owner.transfer(msg.value);\r\n    }\r\n    \r\n    function _mint(address who, uint256 howmuch) internal {\r\n        balanceOf[who] = balanceOf[who] + howmuch * (10 ** decimals);\r\n        totalSupply = totalSupply + howmuch * (10 ** decimals);\r\n        emit Transfer(0x0, who, howmuch * (10 ** decimals));\r\n    }\r\n    \r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"gib\",\"type\":\"uint256\"}],\"name\":\"gibLambos\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GiveMeLambosVitalik","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c0279c382f90538cd552ad4b401edb20865dc4fbeab771ea8e5c2ab03ad7df5f"}]}