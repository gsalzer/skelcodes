{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Vote is Ownable {\r\n    // Candidate registered\r\n    event CandidateRegistered(uint candidateId, string candidateName, string candidateDescription);\r\n    // Vote cast\r\n    event VoteCast(uint candidateId);\r\n\r\n    struct Candidate {\r\n        uint candidateId;\r\n        string candidateName;\r\n        string candidateDescription;\r\n    }\r\n\r\n    uint internal salt;\r\n    string public voteName;\r\n    uint public totalVotes;\r\n\r\n    // mapping of candidate IDs to votes\r\n    mapping (uint => uint) public voteCount;\r\n    // mapping of scerets to vote status\r\n    mapping (bytes32 => bool) internal canVote;\r\n    // counter/mapping of candidates\r\n    uint public nextCandidateId = 1;\r\n    mapping (uint => Candidate) public candidateDirectory;\r\n\r\n    constructor(uint _salt, string _voteName, bytes32[] approvedHashes) public {\r\n        salt = _salt;\r\n        voteName = _voteName;\r\n        totalVotes = approvedHashes.length;\r\n        for (uint i; i < approvedHashes.length; i++) {\r\n            canVote[approvedHashes[i]] = true;\r\n        }\r\n    }\r\n\r\n    // Allows the owner to register new candidates\r\n    function registerCandidate(string candidateName, string candidateDescription) public onlyOwner {\r\n        uint candidateId = nextCandidateId++;\r\n        candidateDirectory[candidateId] = Candidate(candidateId, candidateName, candidateDescription);\r\n        emit CandidateRegistered(candidateId, candidateName, candidateDescription);\r\n    }\r\n\r\n    // get candidate information by id\r\n    function candidateInformation(uint candidateId) public view returns (string name, string description) {\r\n        Candidate storage candidate = candidateDirectory[candidateId];\r\n        return (candidate.candidateName, candidate.candidateDescription);\r\n    }\r\n\r\n    // Users can only vote by providing a secret uint s.t. candidateDirectory[keccak256(uint, salt)] == true\r\n    function castVote(uint secret, uint candidateId) public {\r\n        bytes32 claimedApprovedHash = keccak256(secret, salt); // keccak256(secret) vulnerable to a rainbow table attack\r\n        require(canVote[claimedApprovedHash], \"Provided secret was not correct.\");\r\n        canVote[claimedApprovedHash] = false;\r\n        voteCount[candidateId] += 1;\r\n\r\n        emit VoteCast(candidateId);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidateName\",\"type\":\"string\"},{\"name\":\"candidateDescription\",\"type\":\"string\"}],\"name\":\"registerCandidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidateDirectory\",\"outputs\":[{\"name\":\"candidateId\",\"type\":\"uint256\"},{\"name\":\"candidateName\",\"type\":\"string\"},{\"name\":\"candidateDescription\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secret\",\"type\":\"uint256\"},{\"name\":\"candidateId\",\"type\":\"uint256\"}],\"name\":\"castVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidateId\",\"type\":\"uint256\"}],\"name\":\"candidateInformation\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextCandidateId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_salt\",\"type\":\"uint256\"},{\"name\":\"_voteName\",\"type\":\"string\"},{\"name\":\"approvedHashes\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidateId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"candidateName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"candidateDescription\",\"type\":\"string\"}],\"name\":\"CandidateRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidateId\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Vote","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"a8fba7fce1698e36a85e19b38db5d2806b78216b5aed3b3bab11989cec5a4292000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000a73616d706c65566f746500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a7861444116b553d6afa454eeebd800e4d83d2eecdcca97c939827a9d15e97f2f0af0830c691361f0983bdb3a5c4ccf82d0c8efea2c7cc4a837519e9d4988e6138abf1d934e57bbf995b8aa0a7a280cebbea9512459fa5d90a7fb49cdb08d23b3c2d7c7a5d929f1e9c4fdb4a9af748978ca139cc6761e4553bce7a3a36083b186070dd7e6d489ac18b24ddde161fcf6595858247379de5b85f06311454184b9452a31a61671554924d279ce2e746e31172a27adae06339f114673f4ac5109dc1eccdd96a63ac566de0139fc2b8396e311f85dd8e5161d81875891261bb196e0b7233dddac61d81d0cd0f4f78ee753ee94af819dead14b920e1a8be65a9903085de704d6526830e016743e1ba1d51739c3f68c0e5e1741cd0fd832816a1f957503416b681149c29566d0be95cfe4add63bce01ac305296536767c1ee8e1e4a9c72","Library":"","SwarmSource":"bzzr://fc0b31aebdf322ffc8fdd01bf3fc7feec5ad0226c608229d7ad5b01d608fb390"}]}