{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract owned {\r\n    function owned() public { owner = msg.sender; }\r\n    address public owner;\r\n\r\n    // This contract only defines a modifier but does not use\r\n    // it - it will be used in derived contracts.\r\n    // The function body is inserted where the special symbol\r\n    // \"_;\" in the definition of a modifier appears.\r\n    // This means that if the owner calls this function, the\r\n    // function is executed and otherwise, an exception is\r\n    // thrown.\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public returns (uint256 total);\r\n    function balanceOf(address _owner) public returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) external returns (bool);\r\n}\r\n\r\ncontract AutoWallet is owned {\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n    \r\n    function () external payable {\r\n        // this is the fallback function; it is called whenever the contract receives ether\r\n        // forward that ether onto the contract owner immediately\r\n        owner.transfer(msg.value);\r\n        // and emit the EtherReceived event in case anyone is watching it\r\n        EtherReceived(msg.sender, msg.value);\r\n    }\r\n    \r\n    function sweep() external returns (bool success) {\r\n        // this can be called by anyone (who wants to pay for gas), but that's safe because it will only sweep\r\n        // funds to the owner's account. it sweeps the entire ether balance\r\n        require(this.balance > 0);\r\n        return owner.send(this.balance);\r\n    }\r\n    \r\n    function transferToken(address _tokenContractAddress, address _to, uint256 _amount) external onlyOwner returns (bool success) {\r\n        // this can only be called by the owner. it sends some amount of an ERC-20 token to some address\r\n        ERC20 token = ERC20(_tokenContractAddress);\r\n        return token.transfer(_to, _amount);\r\n    }\r\n    \r\n    function sweepToken(address _tokenContractAddress) external returns (bool success) {\r\n        // like sweep(), this can be called by anyone. it sweeps the full balance of an ERC-20 token to the owner's account\r\n        ERC20 token = ERC20(_tokenContractAddress);\r\n        uint bal = token.balanceOf(this);\r\n        require(bal > 0);\r\n        return token.transfer(owner, bal);\r\n    }\r\n    \r\n    function transferTokenFrom(address _tokenContractAddress, address _from, address _to, uint256 _amount) external onlyOwner returns (bool success) {\r\n        ERC20 token = ERC20(_tokenContractAddress);\r\n        return token.transferFrom(_from, _to, _amount);\r\n    }\r\n    \r\n    function approveTokenTransfer(address _tokenContractAddress, address _spender, uint256 _amount) external onlyOwner returns (bool success) {\r\n        ERC20 token = ERC20(_tokenContractAddress);\r\n        return token.approve(_spender, _amount);\r\n    }\r\n    \r\n    function transferNonFungibleToken(address _tokenContractAddress, address _to, uint256 _tokenId) external onlyOwner {\r\n        // for cryptokitties etc\r\n        ERC721 token = ERC721(_tokenContractAddress);\r\n        token.transfer(_to, _tokenId);\r\n    }\r\n    \r\n    function transferNonFungibleTokenFrom(address _tokenContractAddress, address _from, address _to, uint256 _tokenId) external onlyOwner {\r\n        ERC721 token = ERC721(_tokenContractAddress);\r\n        token.transferFrom(_from, _to, _tokenId);\r\n    }\r\n    \r\n    function transferNonFungibleTokenMulti(address _tokenContractAddress, address _to, uint256[] _tokenIds) external onlyOwner {\r\n        ERC721 token = ERC721(_tokenContractAddress);\r\n        for (uint i = 0; i < _tokenIds.length; i++) {\r\n            token.transfer(_to, _tokenIds[i]);\r\n        }\r\n    }\r\n    \r\n    event EtherReceived(address _sender, uint256 _value);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sweep\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferNonFungibleTokenFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveTokenTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferNonFungibleToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferNonFungibleTokenMulti\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"EtherReceived\",\"type\":\"event\"}]","ContractName":"AutoWallet","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c52f8630959cad38ee2df0e96665886478135e1ac06e855cdebb7004c9aa7bae"}]}