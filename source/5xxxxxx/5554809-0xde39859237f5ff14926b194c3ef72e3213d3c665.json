{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) pure internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) pure internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) pure internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) pure internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) pure internal returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) pure internal returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public; // Some ERC20 doesn't have return\r\n    function transferFrom(address _from, address _to, uint _value) public; // Some ERC20 doesn't have return\r\n    function approve(address _spender, uint _value) public; // Some ERC20 doesn't have return\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract KyberNetworkContract {\r\n\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev makes a trade between src and dest token and send dest token to destAddress\r\n    /// @param src Src token\r\n    /// @param srcAmount amount of src tokens\r\n    /// @param dest   Destination token\r\n    /// @param destAddress Address to send tokens to\r\n    /// @param maxDestAmount A limit on the amount of dest tokens\r\n    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\r\n    /// @param walletId is the wallet ID to send part of the fees\r\n    /// @return amount of actual dest tokens\r\n    function trade(\r\n        ERC20 src,\r\n        uint srcAmount,\r\n        ERC20 dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId\r\n    )\r\n        public\r\n        payable\r\n        returns(uint);\r\n    \r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev best conversion rate for a pair of tokens, if number of reserves have small differences. randomize\r\n    /// @param src Src token\r\n    /// @param dest Destination token\r\n    /* solhint-disable code-complexity */\r\n    function findBestRate(ERC20 src, ERC20 dest, uint srcQty) public view returns(uint, uint);\r\n}\r\n\r\ninterface KULAPTradingProxy {\r\n    // Trade event\r\n    event Trade( ERC20 src, uint srcAmount, ERC20 dest, uint destAmount);\r\n\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev makes a trade between src and dest token and send dest token to destAddress\r\n    /// @param src Src token\r\n    /// @param srcAmount amount of src tokens\r\n    /// @param dest   Destination token\r\n    /// @return amount of actual dest tokens\r\n    function trade(\r\n        ERC20 src,\r\n        uint srcAmount,\r\n        ERC20 dest\r\n    )\r\n        public\r\n        payable\r\n        returns(uint);\r\n    \r\n    function rate(ERC20 src, ERC20 dest, uint srcQty) public view returns(uint, uint);\r\n}\r\n\r\ncontract Dex is Ownable {\r\n    event Trade( ERC20 src, uint srcAmount, ERC20 dest, uint destAmount);\r\n\r\n    using SafeMath for uint256;\r\n    ERC20 public etherERC20 = ERC20(0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n\r\n    address public dexWallet = 0x7ff0F1919424F0D2B6A109E3139ae0f1d836D468; // To receive fee of the DEX network\r\n\r\n    // list of trading proxies\r\n    KULAPTradingProxy[] public tradingProxies;\r\n\r\n    function _tradeEtherToToken(uint256 tradingProxyIndex, uint256 srcAmount, ERC20 dest) private returns(uint256)  {\r\n        // Load trading proxy\r\n        KULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex];\r\n\r\n        // Trade to proxy\r\n        uint256 destAmount = tradingProxy.trade.value(srcAmount)(\r\n            etherERC20,\r\n            srcAmount, \r\n            dest\r\n        );\r\n\r\n        return destAmount;\r\n    }\r\n\r\n    // Receive ETH in case of trade Token -> ETH, will get ETH back from trading proxy\r\n    function () payable {\r\n\r\n    }\r\n\r\n    function _tradeTokenToEther(uint256 tradingProxyIndex, ERC20 src, uint256 amount) private returns(uint256)  {\r\n        // Load trading proxy\r\n        KULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex];\r\n\r\n        // Approve to TradingProxy\r\n        src.approve(tradingProxy, amount);\r\n\r\n        // Trande with kyber\r\n        uint256 destAmount = tradingProxy.trade(\r\n            src, \r\n            amount, \r\n            etherERC20);\r\n        \r\n        return destAmount;\r\n    }\r\n\r\n    // Ex1: trade 0.5 ETH -> EOS\r\n    // 0, \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"500000000000000000\", \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"21003850000000000000\"\r\n    //\r\n    // Ex2: trade 30 EOS -> ETH\r\n    // 0, \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"30000000000000000000\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"740825000000000000\"\r\n    function _trade(uint256 tradingProxyIndex, ERC20 src, uint256 srcAmount, ERC20 dest, uint256 minDestAmount) private returns(uint256)  {\r\n        uint256 destAmount;\r\n\r\n        // Trade ETH -> Any\r\n        if (etherERC20 == src) {\r\n            destAmount = _tradeEtherToToken(tradingProxyIndex, srcAmount, dest);\r\n        \r\n        // Trade Any -> ETH\r\n        } else if (etherERC20 == dest) {\r\n            destAmount = _tradeTokenToEther(tradingProxyIndex, src, srcAmount);\r\n\r\n        // Trade Any -> Any\r\n        } else {\r\n\r\n        }\r\n\r\n        // Throw exception if destination amount doesn't meet user requirement.\r\n        assert(destAmount >= minDestAmount);\r\n\r\n        return destAmount;\r\n    }\r\n\r\n    // Ex1: trade 0.5 ETH -> EOS\r\n    // 0, \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"500000000000000000\", \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"21003850000000000000\"\r\n    //\r\n    // Ex2: trade 30 EOS -> ETH\r\n    // 0, \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"30000000000000000000\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"740825000000000000\"\r\n    function trade(uint256 tradingProxyIndex, ERC20 src, uint256 srcAmount, ERC20 dest, uint256 minDestAmount) payable public returns(uint256)  {\r\n        uint256 destAmount;\r\n\r\n        // Trade ETH -> Any\r\n        if (etherERC20 == src) {\r\n            destAmount = _trade(tradingProxyIndex, src, srcAmount, dest, 1);\r\n\r\n            // Throw exception if destination amount doesn't meet user requirement.\r\n            assert(destAmount >= minDestAmount);\r\n\r\n            // Send back token to sender\r\n            // Some ERC20 Smart contract not return Bool, so we can't check here\r\n            // require(dest.transfer(msg.sender, destAmount));\r\n            dest.transfer(msg.sender, destAmount);\r\n        \r\n        // Trade Any -> ETH\r\n        } else if (etherERC20 == dest) {\r\n            // Transfer token to This address\r\n            src.transferFrom(msg.sender, address(this), srcAmount);\r\n\r\n            destAmount = _trade(tradingProxyIndex, src, srcAmount, dest, 1);\r\n\r\n            // Throw exception if destination amount doesn't meet user requirement.\r\n            assert(destAmount >= minDestAmount);\r\n\r\n            // Send back ether to sender\r\n            // TODO: Check if amount send correctly, because solidty will not raise error when not enough amount\r\n            msg.sender.send(destAmount);\r\n\r\n        // Trade Any -> Any\r\n        } else {\r\n\r\n        }\r\n\r\n        Trade( src, srcAmount, dest, destAmount);\r\n\r\n        return destAmount;\r\n    }\r\n\r\n    // Ex1: trade 50 OMG -> ETH -> EOS\r\n    // Step1: trade 50 OMG -> ETH\r\n    // Step2: trade xx ETH -> EOS\r\n\r\n    // Ex1: trade 0.5 ETH -> EOS\r\n    // 0, \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"500000000000000000\", \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"21003850000000000000\"\r\n    //\r\n    // Ex2: trade 30 EOS -> ETH\r\n    // 0, \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"30000000000000000000\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"740825000000000000\"\r\n    function tradeRoutes(ERC20 src, uint256 srcAmount, ERC20 dest, uint256 minDestAmount, address[] _tradingPaths) payable public returns(uint256)  {\r\n        uint256 destAmount;\r\n\r\n        if (etherERC20 != src) {\r\n            // Transfer token to This address\r\n            src.transferFrom(msg.sender, address(this), srcAmount);\r\n        }\r\n\r\n        uint256 pathSrcAmount = srcAmount;\r\n        for (uint i=0; i < _tradingPaths.length; i+=3) {\r\n            uint256 tradingProxyIndex =         uint256(_tradingPaths[i]);\r\n            ERC20 pathSrc =                     ERC20(_tradingPaths[i+1]);\r\n            ERC20 pathDest =                    ERC20(_tradingPaths[i+2]);\r\n\r\n            destAmount = _trade(tradingProxyIndex, pathSrc, pathSrcAmount, pathDest, 1);\r\n            pathSrcAmount = destAmount;\r\n        }\r\n\r\n        // Throw exception if destination amount doesn't meet user requirement.\r\n        assert(destAmount >= minDestAmount);\r\n\r\n        // Trade Any -> ETH\r\n        if (etherERC20 == dest) {\r\n            // Send back ether to sender\r\n            // TODO: Check if amount send correctly, because solidty will not raise error when not enough amount\r\n            msg.sender.send(destAmount);\r\n        \r\n        // Trade Any -> Token\r\n        } else {\r\n            // Send back token to sender\r\n            // Some ERC20 Smart contract not return Bool, so we can't check here\r\n            // require(dest.transfer(msg.sender, destAmount));\r\n            dest.transfer(msg.sender, destAmount);\r\n        }\r\n\r\n        Trade( src, srcAmount, dest, destAmount);\r\n\r\n        return destAmount;\r\n    }\r\n\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev best conversion rate for a pair of tokens, if number of reserves have small differences. randomize\r\n    /// @param tradingProxyIndex index of trading proxy\r\n    /// @param src Src token\r\n    /// @param dest Destination token\r\n    /// @param srcAmount Srouce amount\r\n    /* solhint-disable code-complexity */\r\n    function rate(uint256 tradingProxyIndex, ERC20 src, ERC20 dest, uint srcAmount) public view returns(uint, uint) {\r\n        // Load trading proxy\r\n        KULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex];\r\n\r\n        return tradingProxy.rate(src, dest, srcAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Function for adding new trading proxy\r\n    * @param _proxyAddress The address of trading proxy.\r\n    * @return index of this proxy.\r\n    */\r\n    function addTradingProxy(\r\n        KULAPTradingProxy _proxyAddress\r\n    ) public onlyOwner returns (uint256) {\r\n\r\n        tradingProxies.push( _proxyAddress );\r\n\r\n        return tradingProxies.length;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tradingProxyIndex\",\"type\":\"uint256\"},{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"minDestAmount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dexWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"minDestAmount\",\"type\":\"uint256\"},{\"name\":\"_tradingPaths\",\"type\":\"address[]\"}],\"name\":\"tradeRoutes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradingProxies\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxyAddress\",\"type\":\"address\"}],\"name\":\"addTradingProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tradingProxyIndex\",\"type\":\"uint256\"},{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmount\",\"type\":\"uint256\"}],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"destAmount\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"}]","ContractName":"Dex","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://11ffbff790987a1b904fe5438ee786a4718a7f126609511330d9ac03933a5a19"}]}