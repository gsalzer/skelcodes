{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  \r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() internal {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract tokenInterface {\r\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance);\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract Library {\r\n    // Notes:\r\n    // - this is limited to a payload length of 253 bytes\r\n    // - the payload should be ASCII as many clients will want to display this to the user\r\n    function createBSMHash(string payload) pure internal returns (bytes32) {\r\n        // \\x18Bitcoin Signed Message:\\n#{message.size.chr}#{message}\r\n        string memory prefix = \"\\x18Bitcoin Signed Message:\\n\";\r\n        return sha256(sha256(prefix, bytes1(bytes(payload).length), payload));\r\n    }\r\n\r\n    function validateBSM(string payload, address key, uint8 v, bytes32 r, bytes32 s) internal pure returns (bool) {\r\n        return key == ecrecover(createBSMHash(payload), v, r, s);\r\n    }\r\n  \r\n\t//bytes32 constant mask4 = 0xffffffff00000000000000000000000000000000000000000000000000000000;\r\n\t//bytes1 constant network = 0x00;\r\n\r\n    /*\r\n\tfunction getBitcoinAddress( bytes32 _xPoint, bytes32 _yPoint ) constant public returns( bytes20 hashedPubKey, bytes4 checkSum, bytes1 network)\t{\r\n\t\thashedPubKey \t= getHashedPublicKey(_xPoint, _yPoint);\r\n \t\tcheckSum \t= getCheckSum(hashedPubKey);\r\n \t\tnetwork \t= network;\r\n\t}*/\r\n\r\n\tfunction btcAddrPubKeyUncompr( bytes32 _xPoint, bytes32 _yPoint) internal pure returns( bytes20 hashedPubKey )\t{\r\n\t\tbytes1 startingByte = 0x04;\r\n \t\treturn ripemd160(sha256(startingByte, _xPoint, _yPoint));\r\n\t}\r\n\t\r\n\tfunction btcAddrPubKeyCompr(bytes32 _x, bytes32 _y) internal pure returns( bytes20 hashedPubKey )\t{\r\n\t    bytes1 _startingByte;\r\n\t    if (uint256(_y) % 2 == 0  ) {\r\n            _startingByte = 0x02;\r\n        } else {\r\n            _startingByte = 0x03;\r\n        }\r\n \t\treturn ripemd160(sha256(_startingByte, _x));\r\n\t}\r\n\t\r\n\tfunction ethAddressPublicKey( bytes32 _xPoint, bytes32 _yPoint) internal pure returns( address ethAddr )\t{\r\n \t\treturn address(keccak256(_xPoint, _yPoint) ); \r\n\t}\r\n\t/*\r\n\tfunction getCheckSum( bytes20 _hashedPubKey ) public pure returns(bytes4 checkSum) {\r\n\t\tvar full = sha256((sha256(network, _hashedPubKey)));\r\n\t\treturn bytes4(full&mask4);\r\n\t}\r\n    */\r\n    function toAsciiString(address x) internal pure returns (string) {\r\n        bytes memory s = new bytes(42);\r\n        s[0] = 0x30;\r\n        s[1] = 0x78;\r\n        for (uint i = 0; i < 20; i++) {\r\n            byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\r\n            byte hi = byte(uint8(b) / 16);\r\n            byte lo = byte(uint8(b) - 16 * uint8(hi));\r\n            s[2+2*i] = char(hi);\r\n            s[2+2*i+1] = char(lo);            \r\n        }\r\n        return string(s);\r\n    }\r\n    \r\n    function char(byte b) internal pure returns (byte c) {\r\n        if (b < 10) return byte(uint8(b) + 0x30);\r\n        else return byte(uint8(b) + 0x57);\r\n    }\r\n    \r\n    /*\r\n    function getBTCAddr(bytes32 _xPoint, bytes32 _yPoint) pure public returns (bytes) {\r\n\t\tbytes20 hashedPubKey = btcAddressPublicKey(_xPoint, _yPoint);\r\n\t\tbytes4 checkSum = getCheckSum(hashedPubKey);\r\n\t\tbytes memory output = new bytes(25);\r\n\t\t\r\n\t\toutput[0] = network[0];\r\n\t\t\r\n\t\tfor (uint8 i = 0; i<20; i++) {\r\n            output[i+1] = hashedPubKey[i];\r\n        }\r\n        \r\n        for ( i = 0; i<4; i++) {\r\n            output[i+1+20] = checkSum[i];\r\n        }\r\n\r\n        return output;\r\n    }\r\n    */\r\n}\r\n\r\ncontract Swap is Ownable, Library {\r\n    using SafeMath for uint256;\r\n    tokenInterface public tokenContract;\r\n\tData public dataContract;\r\n    \r\n    mapping(address => bool) claimed;\r\n\r\n    function Swap(address _tokenAddress) public {\r\n        tokenContract = tokenInterface(_tokenAddress);\r\n    }\r\n\r\n    function claim(address _ethAddrReceiver, bytes32 _x, bytes32 _y, uint8 _v, bytes32 _r, bytes32 _s) public returns(bool) {\r\n        require ( dataContract != address(0) );\r\n        \r\n\t\t/* This code enable swap from BTC address compressed and uncompressed, check before compressed (more common format)\r\n\t\t * and then also uncompressed address format - btc address is calculated in hex format without checksum and prefix\r\n\t\t */\r\n        address btcAddr0x; \r\n\t\tbtcAddr0x = address( btcAddrPubKeyCompr(_x,_y) ); \r\n\t\tif( dataContract.CftBalanceOf( btcAddr0x ) == 0 || claimed[ btcAddr0x ] ) { //check if have balance of if is already claimed\r\n\t\t\tbtcAddr0x = address( btcAddrPubKeyUncompr(_x,_y) ); \r\n\t\t}\r\n\t\t\r\n\t\trequire ( dataContract.CftBalanceOf( btcAddr0x ) != 0 );\r\n        require ( !claimed[ btcAddr0x ] );\r\n\t\t\r\n\t\taddress checkEthAddr0x = address( ethAddressPublicKey(_x,_y) ); //calculate eth address from pubkey for check of ecrecover function to verify sign\r\n        require ( validateBSM( toAsciiString(_ethAddrReceiver), checkEthAddr0x, _v, _r, _s) ); // check if eth address of receiver is signed by owner of privkey\r\n        \r\n        //add 10 number after the dot, 1 satoshi = 10^8 | 1 wei = 10^18\r\n        // the swap is 1:0,5\r\n        uint256 tokenAmount = dataContract.CftBalanceOf(btcAddr0x) * 10**10 / 2; \r\n        \r\n        claimed[btcAddr0x] = true;\r\n        \r\n        tokenContract.transfer(_ethAddrReceiver, tokenAmount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function withdrawTokens(address to, uint256 value) public onlyOwner returns (bool) {\r\n        return tokenContract.transfer(to, value);\r\n    }\r\n    \r\n    function setTokenContract(address _tokenContract) public onlyOwner {\r\n        tokenContract = tokenInterface(_tokenContract);\r\n    }\r\n    \r\n    function setDataContract(address _tokenContract) public onlyOwner {\r\n        dataContract = Data(_tokenContract);\r\n    }\r\n\r\n    function () public payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n\r\ncontract Data {\r\n    mapping(address => uint256) public CftBalanceOf;\r\n       function Data() public {\r\n            }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"setDataContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethAddrReceiver\",\"type\":\"address\"},{\"name\":\"_x\",\"type\":\"bytes32\"},{\"name\":\"_y\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Swap","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c5d350b854a6cff0fc5a38a115a90c774dcae1b9","Library":"","SwarmSource":"bzzr://fa0605735fceffd7dd1e5dd869c2f3eacfc6fa5a1baaa2104e345296eded1368"}]}