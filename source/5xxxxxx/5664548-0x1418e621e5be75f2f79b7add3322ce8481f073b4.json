{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed _from,\r\n        address indexed _to\r\n    );\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract DataeumToken is Owned, ERC20Interface {\r\n    // Adding safe calculation methods to uint256\r\n    using SafeMath for uint256;\r\n\r\n    // Defining balances mapping (ERC20)\r\n    mapping(address => uint256) balances;\r\n\r\n    // Defining allowances mapping (ERC20)\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    // Defining addresses allowed to bypass global freeze\r\n    mapping(address => bool) public freezeBypassing;\r\n\r\n    // Defining addresses that have custom lockups periods\r\n    mapping(address => uint256) public lockupExpirations;\r\n\r\n    // Token Symbol\r\n    string public constant symbol = \"XDT\";\r\n\r\n    // Token Name\r\n    string public constant name = \"Dataeum Token\";\r\n\r\n    // Token Decimals\r\n    uint8 public constant decimals = 18;\r\n\r\n    // Current distributed supply\r\n    uint256 public circulatingSupply = 0;\r\n\r\n    // global freeze one-way toggle\r\n    bool public tradingLive = false;\r\n\r\n    // Total supply of token\r\n    uint256 public totalSupply;\r\n\r\n    /**\r\n     * @notice Event for Lockup period applied to address\r\n     * @param owner Specific lockup address target\r\n     * @param until Timestamp when lockup end (seconds since epoch)\r\n     */\r\n    event LockupApplied(\r\n        address indexed owner,\r\n        uint256 until\r\n    );\r\n\r\n    /**\r\n     * @notice Contract constructor\r\n     * @param _totalSupply Total supply of token wanted\r\n     */\r\n    constructor(uint256 _totalSupply) public {\r\n        totalSupply = _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice distribute tokens to an address\r\n     * @param to Who will receive the token\r\n     * @param tokens How much token will be sent\r\n     */\r\n    function distribute(\r\n        address to,\r\n        uint256 tokens\r\n    )\r\n        public onlyOwner\r\n    {\r\n        uint newCirculatingSupply = circulatingSupply.add(tokens);\r\n        require(newCirculatingSupply <= totalSupply);\r\n        circulatingSupply = newCirculatingSupply;\r\n        balances[to] = balances[to].add(tokens);\r\n\r\n        emit Transfer(address(this), to, tokens);\r\n    }\r\n\r\n    /**\r\n     * @notice Prevents the given wallet to transfer its token for the given duration.\r\n     *      This methods resets the lock duration if one is already in place.\r\n     * @param wallet The wallet address to lock\r\n     * @param duration How much time is the token locked from now (in sec)\r\n     */\r\n    function lockup(\r\n        address wallet,\r\n        uint256 duration\r\n    )\r\n        public onlyOwner\r\n    {\r\n        uint256 lockupExpiration = duration.add(now);\r\n        lockupExpirations[wallet] = lockupExpiration;\r\n        emit LockupApplied(wallet, lockupExpiration);\r\n    }\r\n\r\n    /**\r\n     * @notice choose if an address is allowed to bypass the global freeze\r\n     * @param to Target of the freeze bypass status update\r\n     * @param status New status (if true will bypass)\r\n     */\r\n    function setBypassStatus(\r\n        address to,\r\n        bool status\r\n    )\r\n        public onlyOwner\r\n    {\r\n        freezeBypassing[to] = status;\r\n    }\r\n\r\n    /**\r\n     * @notice One-way toggle to allow trading (remove global freeze)\r\n     */\r\n    function setTradingLive() public onlyOwner {\r\n        tradingLive = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier that checks if the conditions are met for a token to be\r\n     * tradable. To be so, it must :\r\n     *  - Global Freeze must be removed, or, \"from\" must be allowed to bypass it\r\n     *  - \"from\" must not be in a custom lockup period\r\n     * @param from Who to check the status\r\n     */\r\n    modifier tradable(address from) {\r\n        require(\r\n            (tradingLive || freezeBypassing[from]) && //solium-disable-line indentation\r\n            (lockupExpirations[from] <= now)\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the total supply of the token\r\n     * @dev This function is part of the ERC20 standard \r\n     * @return {\"supply\": \"The token supply\"}\r\n     */\r\n    function totalSupply() public view returns (uint256 supply) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the token balance of `owner`\r\n     * @dev This function is part of the ERC20 standard\r\n     * @param owner The wallet to get the balance of\r\n     * @return {\"balance\": \"The balance of `owner`\"}\r\n     */\r\n    function balanceOf(\r\n        address owner\r\n    )\r\n        public view returns (uint256 balance)\r\n    {\r\n        return balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers `amount` from msg.sender to `destination`\r\n     * @dev This function is part of the ERC20 standard\r\n     * @param destination The address that receives the tokens\r\n     * @param amount Token amount to transfer\r\n     * @return {\"success\": \"If the operation completed successfuly\"}\r\n     */\r\n    function transfer(\r\n        address destination,\r\n        uint256 amount\r\n    )\r\n        public tradable(msg.sender) returns (bool success)\r\n    {\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n        balances[destination] = balances[destination].add(amount);\r\n        emit Transfer(msg.sender, destination, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens from an address to another one\r\n     * through an allowance made before\r\n     * @dev This function is part of the ERC20 standard\r\n     * @param from The address that sends the tokens\r\n     * @param to The address that receives the tokens\r\n     * @param tokenAmount Token amount to transfer\r\n     * @return {\"success\": \"If the operation completed successfuly\"}\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenAmount\r\n    )\r\n        public tradable(from) returns (bool success)\r\n    {\r\n        balances[from] = balances[from].sub(tokenAmount);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokenAmount);\r\n        balances[to] = balances[to].add(tokenAmount);\r\n        emit Transfer(from, to, tokenAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Approve an address to send `tokenAmount` tokens to `msg.sender` (make an allowance)\r\n     * @dev This function is part of the ERC20 standard\r\n     * @param spender The allowed address\r\n     * @param tokenAmount The maximum amount allowed to spend\r\n     * @return {\"success\": \"If the operation completed successfuly\"}\r\n     */\r\n    function approve(\r\n        address spender,\r\n        uint256 tokenAmount\r\n    )\r\n        public returns (bool success)\r\n    {\r\n        allowed[msg.sender][spender] = tokenAmount;\r\n        emit Approval(msg.sender, spender, tokenAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the remaining allowance for a spender on a given address\r\n     * @dev This function is part of the ERC20 standard\r\n     * @param tokenOwner The address that owns the tokens\r\n     * @param spender The spender\r\n     * @return {\"remaining\": \"The amount of tokens remaining in the allowance\"}\r\n     */\r\n    function allowance(\r\n        address tokenOwner,\r\n        address spender\r\n    )\r\n        public view returns (uint256 remaining)\r\n    {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Permits to create an approval on a contract and then call a method\r\n     * on the approved contract right away.\r\n     * @param spender The allowed address\r\n     * @param tokenAmount The maximum amount allowed to spend\r\n     * @param data The data sent back as parameter to the contract (bytes array)\r\n     * @return {\"success\": \"If the operation completed successfuly\"}\r\n     */\r\n    function approveAndCall(\r\n        address spender,\r\n        uint256 tokenAmount,\r\n        bytes data\r\n    )\r\n        public tradable(spender) returns (bool success)\r\n    {\r\n        allowed[msg.sender][spender] = tokenAmount;\r\n        emit Approval(msg.sender, spender, tokenAmount);\r\n\r\n        ApproveAndCallFallBack(spender)\r\n            .receiveApproval(msg.sender, tokenAmount, this, data);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Permits to withdraw any ERC20 tokens that have been mistakingly sent to this contract\r\n     * @param tokenAddress The received ERC20 token address\r\n     * @param tokenAmount The amount of ERC20 tokens to withdraw from this contract\r\n     * @return {\"success\": \"If the operation completed successfuly\"}\r\n     */\r\n    function withdrawERC20Token(\r\n        address tokenAddress,\r\n        uint256 tokenAmount\r\n    )\r\n        public onlyOwner returns (bool success)\r\n    {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokenAmount);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @notice Adds two numbers, throws on overflow.\r\n    */\r\n    function add(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal pure returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @notice Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal pure returns (uint256)\r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n\r\n    /**\r\n    * @notice Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal pure returns (uint256 c)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal pure returns (uint256)\r\n    {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingLive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setBypassStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockupExpirations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeBypassing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setTradingLive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"lockup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"until\",\"type\":\"uint256\"}],\"name\":\"LockupApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DataeumToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"0000000000000000000000000000000000000000033b2e3c9fd0803ce8000000","Library":"","SwarmSource":"bzzr://7dcad67aac73cf3f2dae028be0409240be5da921a47727306e25c3c71f51b6d6"}]}