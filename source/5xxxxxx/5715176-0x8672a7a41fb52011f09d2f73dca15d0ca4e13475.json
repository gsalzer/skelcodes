{"status":"1","message":"OK","result":[{"SourceCode":"//visit our site at:\r\n//https://xandar.herokuapp.com/\r\npragma solidity ^0.4.21;\r\n\r\ncontract Zandar {\r\n    uint8 public constant MAINTENANCE_FEE_PERCENT = 5;\r\n    uint8 public constant REFUND_PERCENT = 80;\r\n    \r\n    address admin;\r\n    uint public admin_profit = 0;\r\n    uint public currentActiveGameID = 0;\r\n\r\n    struct Game {\r\n        uint ticketPrice;\r\n        \r\n        uint bettingPhaseStart; //unix time\r\n        uint bettingPhaseEnd;   //unix time\r\n        uint claimingPhaseStart;//unix time\r\n        uint claimingPhaseEnd;  //unix time\r\n    \r\n        mapping(address => uint8) tickets;\r\n        uint8 numTickets;\r\n        uint8 numPrizeClaimed;\r\n        uint8 winningMultiplier;\r\n    \r\n        uint balance; //balance of each game\r\n    }\r\n    \r\n    Game[] public games;\r\n    \r\n    modifier adminOnly() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n    \r\n    function Zandar() public{\r\n        admin = msg.sender;\r\n    }\r\n    \r\n    //fallback function for handling unexpected payment\r\n    //if any ether is sent to the address, credit the admin balance\r\n    function() external payable{\r\n        admin_profit += msg.value;\r\n    }\r\n    \r\n    function createGame(uint _ticketPrice, uint _bettingStartUnixTime,\r\n        uint _bettingPhaseDays, uint _waitingPhaseDays,\r\n        uint _claimingPhaseDays, uint8 _winningMultiplier) adminOnly external{\r\n        \r\n        uint bettingPhaseEnd = _bettingStartUnixTime + _bettingPhaseDays * 1 days;\r\n        uint claimingPhaseStart = bettingPhaseEnd + _waitingPhaseDays * 1 days;\r\n        uint claimingPhaseEnd = claimingPhaseStart + _claimingPhaseDays * 1 days;\r\n\r\n        Game memory g = Game({\r\n            ticketPrice: _ticketPrice,\r\n            bettingPhaseStart: _bettingStartUnixTime,\r\n            bettingPhaseEnd: bettingPhaseEnd,\r\n            claimingPhaseStart: claimingPhaseStart,\r\n            claimingPhaseEnd: claimingPhaseEnd,\r\n            numTickets:0,\r\n            numPrizeClaimed:0,\r\n            balance:0,\r\n            winningMultiplier: _winningMultiplier\r\n        });\r\n\r\n        games.push(g);\r\n    }\r\n\r\n    function setCurrentActiveGameID(uint _id) adminOnly external{\r\n        currentActiveGameID = _id;\r\n    }\r\n    \r\n    function getNumGames() external view returns (uint){\r\n        return games.length;\r\n    }\r\n\r\n    function getNumTicketsPurchased(uint _gameID, address _address) external view returns (uint8){\r\n        return games[_gameID].tickets[_address];\r\n    } \r\n    \r\n    function getContractBalance() external view returns (uint){\r\n        return address(this).balance;\r\n    }\r\n\r\n    function purchaseTicket(uint _gameID) external payable {\r\n        require(msg.value >= games[_gameID].ticketPrice);\r\n        require(now >= games[_gameID].bettingPhaseStart &&\r\n            now < games[_gameID].bettingPhaseEnd);\r\n        games[_gameID].tickets[msg.sender] += 1;\r\n        games[_gameID].numTickets += 1;\r\n        uint admin_fee = games[_gameID].ticketPrice * MAINTENANCE_FEE_PERCENT/100;\r\n        admin_profit += admin_fee;\r\n        games[_gameID].balance += msg.value - admin_fee;\r\n    }        \r\n\r\n    function claimProfit(uint _gameID) external {\r\n        require(now >= games[_gameID].claimingPhaseStart &&\r\n            now < games[_gameID].claimingPhaseEnd);\r\n        require(games[_gameID].tickets[msg.sender]>0);\r\n        require(games[_gameID].numPrizeClaimed <\r\n            games[_gameID].numTickets/games[_gameID].winningMultiplier);\r\n        \r\n        games[_gameID].numPrizeClaimed += 1;\r\n        games[_gameID].tickets[msg.sender] -= 1;\r\n        uint reward = games[_gameID].ticketPrice *\r\n            games[_gameID].winningMultiplier * (100-MAINTENANCE_FEE_PERCENT) / 100;\r\n        msg.sender.transfer(reward);\r\n        games[_gameID].balance -= reward;\r\n    }\r\n    \r\n    // get back the BET before claimingPhase\r\n    function getRefund(uint _gameID) external {\r\n        require(now < games[_gameID].claimingPhaseStart - 1 days);\r\n        require(games[_gameID].tickets[msg.sender]>0);\r\n        games[_gameID].tickets[msg.sender] -= 1;\r\n        games[_gameID].numTickets -= 1;\r\n        uint refund = games[_gameID].ticketPrice * REFUND_PERCENT / 100;\r\n        uint admin_fee = games[_gameID].ticketPrice *\r\n            (100 - REFUND_PERCENT - MAINTENANCE_FEE_PERCENT) / 100;\r\n        admin_profit += admin_fee;\r\n        games[_gameID].balance -= games[_gameID].ticketPrice *\r\n            (100 - MAINTENANCE_FEE_PERCENT) / 100;\r\n        msg.sender.transfer(refund);\r\n    }\r\n\r\n    // call by admin to get maintenance fee\r\n    function getAdminFee() adminOnly external {\r\n        require(admin_profit > 0);\r\n        msg.sender.transfer(admin_profit);\r\n        admin_profit = 0;\r\n    }\r\n    \r\n    // admin can claim unclaimed fund after the claiming phase, if any\r\n    function getUnclaimedEtherIfAny(uint _gameID) adminOnly external {\r\n        require(now >= games[_gameID].claimingPhaseEnd);\r\n        require(games[_gameID].balance > 0);\r\n        msg.sender.transfer(games[_gameID].balance);\r\n        games[_gameID].balance = 0;\r\n    }\r\n\r\n     //transfer ownership of the contract\r\n \tfunction transferOwnership(address _newAdmin) adminOnly external {\r\n    \tadmin = _newAdmin;\r\n \t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"name\":\"bettingPhaseStart\",\"type\":\"uint256\"},{\"name\":\"bettingPhaseEnd\",\"type\":\"uint256\"},{\"name\":\"claimingPhaseStart\",\"type\":\"uint256\"},{\"name\":\"claimingPhaseEnd\",\"type\":\"uint256\"},{\"name\":\"numTickets\",\"type\":\"uint8\"},{\"name\":\"numPrizeClaimed\",\"type\":\"uint8\"},{\"name\":\"winningMultiplier\",\"type\":\"uint8\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin_profit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAdminFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameID\",\"type\":\"uint256\"}],\"name\":\"getUnclaimedEtherIfAny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFUND_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAINTENANCE_FEE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setCurrentActiveGameID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumGames\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentActiveGameID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"name\":\"_bettingStartUnixTime\",\"type\":\"uint256\"},{\"name\":\"_bettingPhaseDays\",\"type\":\"uint256\"},{\"name\":\"_waitingPhaseDays\",\"type\":\"uint256\"},{\"name\":\"_claimingPhaseDays\",\"type\":\"uint256\"},{\"name\":\"_winningMultiplier\",\"type\":\"uint8\"}],\"name\":\"createGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameID\",\"type\":\"uint256\"}],\"name\":\"purchaseTicket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameID\",\"type\":\"uint256\"}],\"name\":\"claimProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameID\",\"type\":\"uint256\"}],\"name\":\"getRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameID\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNumTicketsPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Zandar","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b36cf80971044657b2a2980e5fa8309ce7e30fc2d3efd5b8146d7acc22ef4917"}]}