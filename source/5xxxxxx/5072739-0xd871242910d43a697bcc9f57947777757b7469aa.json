{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n// File: contracts\\infrastructure\\ITokenRetreiver.sol\r\n\r\n/**\r\n * @title Token retrieve interface\r\n *\r\n * Allows tokens to be retrieved from a contract\r\n *\r\n * #created 29/09/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract ITokenRetreiver {\r\n\r\n    /**\r\n     * Extracts tokens from the contract\r\n     *\r\n     * @param _tokenContract The address of ERC20 compatible token\r\n     */\r\n    function retreiveTokens(address _tokenContract);\r\n}\r\n\r\n// File: contracts\\source\\token\\IToken.sol\r\n\r\n/**\r\n * @title ERC20 compatible token interface\r\n *\r\n * Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n * - Short address attack fix\r\n *\r\n * #created 29/09/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract IToken {\r\n\r\n    /**\r\n     * Get the total supply of tokens\r\n     *\r\n     * @return The total supply\r\n     */\r\n    function totalSupply() constant returns (uint);\r\n\r\n\r\n    /**\r\n     * Get balance of `_owner`\r\n     *\r\n     * @param _owner The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _owner) constant returns (uint);\r\n\r\n\r\n    /**\r\n     * Send `_value` token to `_to` from `msg.sender`\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint _value) returns (bool);\r\n\r\n\r\n    /**\r\n     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\r\n\r\n\r\n    /**\r\n     * `msg.sender` approves `_spender` to spend `_value` tokens\r\n     *\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of tokens to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint _value) returns (bool);\r\n\r\n\r\n    /**\r\n     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\r\n     *\r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint);\r\n}\r\n\r\n// File: contracts\\infrastructure\\ownership\\ITransferableOwnership.sol\r\n\r\ncontract ITransferableOwnership {\r\n\r\n    /**\r\n     * Transfer ownership to `_newOwner`\r\n     *\r\n     * @param _newOwner The address of the account that will become the new owner\r\n     */\r\n    function transferOwnership(address _newOwner);\r\n}\r\n\r\n// File: contracts\\infrastructure\\modifier\\Owned.sol\r\n\r\ncontract Owned {\r\n\r\n    // The address of the account that is the current owner\r\n    address internal owner;\r\n\r\n\r\n    /**\r\n     * The publisher is the inital owner\r\n     */\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * Access is restricted to the current owner\r\n     */\r\n    modifier only_owner() {\r\n        require(msg.sender == owner);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts\\infrastructure\\ownership\\IOwnership.sol\r\n\r\ncontract IOwnership {\r\n\r\n    /**\r\n     * Returns true if `_account` is the current owner\r\n     *\r\n     * @param _account The address to test against\r\n     */\r\n    function isOwner(address _account) constant returns (bool);\r\n\r\n\r\n    /**\r\n     * Gets the current owner\r\n     *\r\n     * @return address The current owner\r\n     */\r\n    function getOwner() constant returns (address);\r\n}\r\n\r\n// File: contracts\\infrastructure\\ownership\\Ownership.sol\r\n\r\ncontract Ownership is IOwnership, Owned {\r\n\r\n\r\n    /**\r\n     * Returns true if `_account` is the current owner\r\n     *\r\n     * @param _account The address to test against\r\n     */\r\n    function isOwner(address _account) public constant returns (bool) {\r\n        return _account == owner;\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the current owner\r\n     *\r\n     * @return address The current owner\r\n     */\r\n    function getOwner() public constant returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\n// File: contracts\\infrastructure\\ownership\\TransferableOwnership.sol\r\n\r\ncontract TransferableOwnership is ITransferableOwnership, Ownership {\r\n\r\n\r\n    /**\r\n     * Transfer ownership to `_newOwner`\r\n     *\r\n     * @param _newOwner The address of the account that will become the new owner\r\n     */\r\n    function transferOwnership(address _newOwner) public only_owner {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\source\\token\\IManagedToken.sol\r\n\r\n/**\r\n * @title ManagedToken interface\r\n *\r\n * Adds the following functionallity to the basic ERC20 token\r\n * - Locking\r\n * - Issuing\r\n *\r\n * #created 29/09/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract IManagedToken is IToken {\r\n\r\n    /**\r\n     * Returns true if the token is locked\r\n     *\r\n     * @return Whether the token is locked\r\n     */\r\n    function isLocked() constant returns (bool);\r\n\r\n\r\n    /**\r\n     * Unlocks the token so that the transferring of value is enabled\r\n     *\r\n     * @return Whether the unlocking was successful or not\r\n     */\r\n    function unlock() returns (bool);\r\n\r\n\r\n    /**\r\n     * Issues `_value` new tokens to `_to`\r\n     *\r\n     * @param _to The address to which the tokens will be issued\r\n     * @param _value The amount of new tokens to issue\r\n     * @return Whether the tokens where sucessfully issued or not\r\n     */\r\n    function issue(address _to, uint _value) returns (bool);\r\n}\r\n\r\n// File: contracts\\infrastructure\\modifier\\InputValidator.sol\r\n\r\ncontract InputValidator {\r\n\r\n\r\n    /**\r\n     * ERC20 Short Address Attack fix\r\n     */\r\n    modifier safe_arguments(uint _numArgs) {\r\n        assert(msg.data.length == _numArgs * 32 + 4);\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts\\source\\token\\Token.sol\r\n\r\n/**\r\n * @title ERC20 compatible token\r\n *\r\n * Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n * - Short address attack fix\r\n *\r\n * #created 29/09/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract Token is IToken, InputValidator {\r\n\r\n    // Ethereum token standard\r\n    string public standard = \"Token 0.3\";\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 8;\r\n\r\n    // Token state\r\n    uint internal totalTokenSupply;\r\n\r\n    // Token balances\r\n    mapping (address => uint) internal balances;\r\n\r\n    // Token allowances\r\n    mapping (address => mapping (address => uint)) internal allowed;\r\n\r\n\r\n    // Events\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    /**\r\n     * Construct\r\n     *\r\n     * @param _name The full token name\r\n     * @param _symbol The token symbol (aberration)\r\n     */\r\n    function Token(string _name, string _symbol) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        balances[msg.sender] = 0;\r\n        totalTokenSupply = 0;\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the total token supply\r\n     *\r\n     * @return The total supply\r\n     */\r\n    function totalSupply() public constant returns (uint) {\r\n        return totalTokenSupply;\r\n    }\r\n\r\n\r\n    /**\r\n     * Get balance of `_owner`\r\n     *\r\n     * @param _owner The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _owner) public constant returns (uint) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    /**\r\n     * Send `_value` token to `_to` from `msg.sender`\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint _value) public safe_arguments(2) returns (bool) {\r\n\r\n        // Check if the sender has enough tokens\r\n        require(balances[msg.sender] >= _value);\r\n\r\n        // Check for overflows\r\n        require(balances[_to] + _value >= balances[_to]);\r\n\r\n        // Transfer tokens\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n\r\n        // Notify listeners\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) public safe_arguments(3) returns (bool) {\r\n\r\n        // Check if the sender has enough\r\n        require(balances[_from] >= _value);\r\n\r\n        // Check for overflows\r\n        require(balances[_to] + _value >= balances[_to]);\r\n\r\n        // Check allowance\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        // Transfer tokens\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n\r\n        // Update allowance\r\n        allowed[_from][msg.sender] -= _value;\r\n\r\n        // Notify listeners\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * `msg.sender` approves `_spender` to spend `_value` tokens\r\n     *\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of tokens to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint _value) public safe_arguments(2) returns (bool) {\r\n\r\n        // Update allowance\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        // Notify listeners\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\r\n     *\r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n// File: contracts\\source\\token\\ManagedToken.sol\r\n\r\n/**\r\n * @title ManagedToken\r\n *\r\n * Adds the following functionallity to the basic ERC20 token\r\n * - Locking\r\n * - Issuing\r\n *\r\n * #created 29/09/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract ManagedToken is IManagedToken, Token, TransferableOwnership {\r\n\r\n    // Token state\r\n    bool internal locked;\r\n\r\n\r\n    /**\r\n     * Allow access only when not locked\r\n     */\r\n    modifier only_when_unlocked() {\r\n        require(!locked);\r\n\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Construct\r\n     *\r\n     * @param _name The full token name\r\n     * @param _symbol The token symbol (aberration)\r\n     * @param _locked Whether the token should be locked initially\r\n     */\r\n    function ManagedToken(string _name, string _symbol, bool _locked) Token(_name, _symbol) {\r\n        locked = _locked;\r\n    }\r\n\r\n\r\n    /**\r\n     * Send `_value` token to `_to` from `msg.sender`\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint _value) public only_when_unlocked returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) public only_when_unlocked returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n\r\n    /**\r\n     * `msg.sender` approves `_spender` to spend `_value` tokens\r\n     *\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of tokens to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns true if the token is locked\r\n     *\r\n     * @return Wheter the token is locked\r\n     */\r\n    function isLocked() public constant returns (bool) {\r\n        return locked;\r\n    }\r\n\r\n\r\n    /**\r\n     * Unlocks the token so that the transferring of value is enabled\r\n     *\r\n     * @return Whether the unlocking was successful or not\r\n     */\r\n    function unlock() public only_owner returns (bool)  {\r\n        locked = false;\r\n        return !locked;\r\n    }\r\n\r\n\r\n    /**\r\n     * Issues `_value` new tokens to `_to`\r\n     *\r\n     * @param _to The address to which the tokens will be issued\r\n     * @param _value The amount of new tokens to issue\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function issue(address _to, uint _value) public only_owner safe_arguments(2) returns (bool) {\r\n\r\n        // Check for overflows\r\n        require(balances[_to] + _value >= balances[_to]);\r\n\r\n        // Create tokens\r\n        balances[_to] += _value;\r\n        totalTokenSupply += _value;\r\n\r\n        // Notify listeners\r\n        Transfer(0, this, _value);\r\n        Transfer(this, _to, _value);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts\\source\\NUToken.sol\r\n\r\n/**\r\n * @title NU (NU) token\r\n *\r\n * #created 22/10/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract NUToken is ManagedToken, ITokenRetreiver {\r\n\r\n\r\n    /**\r\n     * Starts with a total supply of zero and the creator starts with\r\n     * zero tokens (just like everyone else)\r\n     */\r\n    function NUToken() ManagedToken(\"NU\", \"NU\", true) {}\r\n\r\n\r\n    /**\r\n     * Failsafe mechanism\r\n     *\r\n     * Allows owner to retreive tokens from the contract\r\n     *\r\n     * @param _tokenContract The address of ERC20 compatible token\r\n     */\r\n    function retreiveTokens(address _tokenContract) public only_owner {\r\n        IToken tokenInstance = IToken(_tokenContract);\r\n        uint tokenBalance = tokenInstance.balanceOf(this);\r\n        if (tokenBalance > 0) {\r\n            tokenInstance.transfer(owner, tokenBalance);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Prevents accidental sending of ether\r\n     */\r\n    function () payable {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"retreiveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"NUToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ff8454f937f77be19391476b978bebd4e7486991e827a0e75a7c497780989cf0"}]}