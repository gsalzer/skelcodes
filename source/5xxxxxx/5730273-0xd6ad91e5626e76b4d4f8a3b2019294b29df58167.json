{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract SafeMath {\r\n    function safeToAdd(uint a, uint b) pure internal returns (bool) {\r\n        return (a + b >= a);\r\n    }\r\n    function safeAdd(uint a, uint b) pure internal returns (uint) {\r\n        require(safeToAdd(a, b));\r\n        return a + b;\r\n    }\r\n\r\n    function safeToSubtract(uint a, uint b) pure internal returns (bool) {\r\n        return (b <= a);\r\n    }\r\n\r\n    function safeSub(uint a, uint b) pure internal returns (uint) {\r\n        require(safeToSubtract(a, b));\r\n        return a - b;\r\n    }\r\n}\r\n\r\ncontract DiceRoll is SafeMath {\r\n\r\n    address public owner;\r\n    uint constant public maxProfitDivisor = 1000000;\r\n    uint constant public houseEdgeDivisor = 1000;\r\n    uint constant public maxNumber = 99;\r\n    uint constant public minNumber = 1;\r\n\r\n    bool public gamePaused;\r\n    bool public recommendPaused;\r\n    bool public jackpotPaused;\r\n\r\n    uint public contractBalance;\r\n    uint public houseEdge;\r\n    uint public maxProfit;\r\n    uint public maxProfitAsPercentOfHouse;\r\n    uint public minBet;\r\n    uint public maxBet;\r\n    uint public jackpotOfHouseEdge;\r\n    uint public minJackpotBet;\r\n    uint public recommendProportion;\r\n    address public jackpotContract;\r\n    \r\n    uint public jackpot;\r\n    uint public totalWeiWon;\r\n    uint public totalWeiWagered;\r\n    uint public totalBets;\r\n\r\n    uint public betId;\r\n    uint public random;\r\n    uint public probability;\r\n    uint public playerProfit;\r\n    uint public playerTempReward;\r\n    uint256 seed;\r\n\r\n    modifier betIsValid(uint _betSize, uint _start, uint _end) {\r\n        require(_betSize >= minBet && _betSize <= maxBet && _start >= minNumber && _end <= maxNumber);\r\n        _;\r\n    }\r\n    \r\n    modifier oddEvenBetIsValid(uint _betSize, uint _oddeven) {\r\n        require(_betSize >= minBet && _betSize <= maxBet && (_oddeven == 1 || _oddeven == 0));\r\n        _;\r\n    }\r\n\r\n    modifier gameIsActive {\r\n        require(!gamePaused);\r\n        _;\r\n    }\r\n    \r\n    modifier recommendAreActive {\r\n        require(!recommendPaused);\r\n        _;\r\n    }\r\n\r\n    modifier jackpotAreActive {\r\n        require(!jackpotPaused);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    event LogResult(uint indexed BetID, address indexed PlayerAddress, uint DiceResult, uint Value, uint Status, uint Start, uint End, uint oddeven, uint BetValue);\r\n    event LogJackpot(uint indexed BetID, address indexed PlayerAddress, uint jackpotValue);\r\n    event LogRecommendProfit(uint indexed BetID, address indexed PlayerAddress, uint Profit);\r\n    event LogOwnerTransfer(address SentToAddress, uint AmountTransferred);\r\n    \r\n\r\n    function() public payable{\r\n        contractBalance = safeAdd(contractBalance, msg.value);\r\n        setMaxProfit();\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        ownerSetHouseEdge(20);\r\n        ownerSetMaxProfitAsPercentOfHouse(100000);\r\n        ownerSetMinBet(0.1 ether);\r\n        ownerSetMaxBet(1 ether);\r\n        ownerSetJackpotOfHouseEdge(500);\r\n        ownerSetRecommendProportion(100);\r\n        ownerSetMinJackpoBet(0.1 ether);\r\n    }\r\n\r\n    function playerRoll(uint start, uint end, address inviter) public payable gameIsActive betIsValid(msg.value, start, end) {\r\n        betId += 1;\r\n        probability = end - start + 1;\r\n        playerProfit = getDiceWinAmount(msg.value, probability);\r\n        if(playerProfit > maxProfit) playerProfit = maxProfit;\r\n        random = rand() % 100 + 1;\r\n        totalBets += 1;\r\n        totalWeiWagered += msg.value;\r\n        if(start <= random && random <= end){\r\n            contractBalance = safeSub(contractBalance, playerProfit); \r\n            totalWeiWon = safeAdd(totalWeiWon, playerProfit);\r\n            playerTempReward = safeAdd(playerProfit, msg.value);\r\n            emit LogResult(betId, msg.sender, random, playerProfit, 1, start, end, 0, msg.value);\r\n            setMaxProfit();\r\n            uint playerHouseEdge = getHouseEdgeAmount(msg.value, probability);\r\n            increaseJackpot(getJackpotFee(playerHouseEdge),betId);\r\n            if(inviter != address(0)){\r\n                emit LogRecommendProfit(betId, msg.sender, playerProfit);\r\n                sendProportion(inviter, playerHouseEdge * recommendProportion / 1000);\r\n            }\r\n            msg.sender.transfer(playerTempReward);\r\n            return;\r\n        }else{\r\n            emit LogResult(betId, msg.sender, random, 0, 0, start, end, 0, msg.value);\r\n            contractBalance = safeAdd(contractBalance, (msg.value-1));                                                                      \r\n            setMaxProfit();          \r\n            msg.sender.transfer(1);\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    function oddEven(uint oddeven, address inviter) public payable gameIsActive oddEvenBetIsValid(msg.value, oddeven) {\r\n        betId += 1;\r\n        probability = 50;\r\n        playerProfit = getDiceWinAmount(msg.value, probability);\r\n        if(playerProfit > maxProfit) playerProfit = maxProfit;\r\n        random = rand() % 100 + 1;\r\n        totalBets += 1;\r\n        totalWeiWagered += msg.value;\r\n        if(random % 2 == oddeven){\r\n            contractBalance = safeSub(contractBalance, playerProfit); \r\n            totalWeiWon = safeAdd(totalWeiWon, playerProfit);\r\n            playerTempReward = safeAdd(playerProfit, msg.value); \r\n            emit LogResult(betId, msg.sender, random, playerProfit, 1, 0, 0, oddeven, msg.value);\r\n            setMaxProfit();\r\n            uint playerHouseEdge = getHouseEdgeAmount(msg.value, probability);\r\n            increaseJackpot(getJackpotFee(playerHouseEdge),betId);\r\n            if(inviter != address(0)){\r\n                emit LogRecommendProfit(betId, msg.sender, playerProfit);\r\n                sendProportion(inviter, playerHouseEdge * recommendProportion / 1000);\r\n            }\r\n            msg.sender.transfer(playerTempReward);  \r\n            return;\r\n        }else{\r\n            emit LogResult(betId, msg.sender, random, playerProfit, 0, 0, 0, oddeven, msg.value); \r\n            contractBalance = safeAdd(contractBalance, (msg.value-1));\r\n            setMaxProfit();         \r\n            msg.sender.transfer(1);\r\n            return;\r\n        }\r\n    }\r\n\r\n    function sendProportion(address inviter, uint amount) internal {\r\n        require(amount < contractBalance);\r\n        inviter.transfer(amount);\r\n    }\r\n\r\n\r\n    function increaseJackpot(uint increaseAmount, uint _betId) internal {\r\n        require (increaseAmount <= contractBalance);\r\n        emit LogJackpot(_betId, msg.sender, increaseAmount);\r\n        jackpot += increaseAmount;\r\n        jackpotContract.transfer(increaseAmount);\r\n        if(msg.value >= minJackpotBet){\r\n            bool result = jackpotContract.call(bytes4(keccak256(\"addPlayer(address)\")),msg.sender);\r\n            require(result);\r\n        }\r\n        \r\n    }\r\n\r\n    function getDiceWinAmount(uint _amount, uint _probability) view internal returns (uint) {\r\n        require(_probability > 0 && _probability < 100);\r\n        return ((_amount * (100 - _probability) / _probability + _amount) * (houseEdgeDivisor - houseEdge) / houseEdgeDivisor) - _amount;\r\n    }\r\n\r\n    function getHouseEdgeAmount(uint _amount, uint _probability) view internal returns (uint) {\r\n        require(_probability > 0 && _probability < 100);\r\n        return (_amount * (100 - _probability) / _probability + _amount) * houseEdge / houseEdgeDivisor;\r\n    }\r\n\r\n    function getJackpotFee(uint houseEdgeAmount) view internal returns (uint) {\r\n        return houseEdgeAmount * jackpotOfHouseEdge / 1000;\r\n    }\r\n\r\n    function rand() internal returns (uint256) {\r\n        seed = uint256(keccak256(msg.sender, blockhash(block.number - 1), block.coinbase, block.difficulty));\r\n        return seed;\r\n    }\r\n\r\n    function OwnerSetPrizePool(address _addr) external onlyOwner {\r\n        require(_addr != address(0));\r\n        jackpotContract = _addr;\r\n    }\r\n\r\n    function ownerUpdateContractBalance(uint newContractBalanceInWei) public onlyOwner{\r\n        contractBalance = newContractBalanceInWei;\r\n    }\r\n\r\n    function ownerSetHouseEdge(uint newHouseEdge) public onlyOwner{\r\n        require(newHouseEdge <= 1000);\r\n        houseEdge = newHouseEdge;\r\n    }\r\n\r\n    function ownerSetMinJackpoBet(uint newVal) public onlyOwner{\r\n        require(newVal <= 10 ether);\r\n        minJackpotBet = newVal;\r\n    }\r\n\r\n    function ownerSetMaxProfitAsPercentOfHouse(uint newMaxProfitAsPercent) public onlyOwner{\r\n        require(newMaxProfitAsPercent <= 100000);\r\n        maxProfitAsPercentOfHouse = newMaxProfitAsPercent;\r\n        setMaxProfit();\r\n    }\r\n\r\n    function ownerSetMinBet(uint newMinimumBet) public onlyOwner{\r\n        minBet = newMinimumBet;\r\n    }\r\n\r\n    function ownerSetMaxBet(uint newMaxBet) public onlyOwner{\r\n        maxBet = newMaxBet;\r\n    }\r\n\r\n    function ownerSetJackpotOfHouseEdge(uint newProportion) public onlyOwner{\r\n        require(newProportion <= 1000);\r\n        jackpotOfHouseEdge = newProportion;\r\n    }\r\n\r\n    function ownerSetRecommendProportion(uint newRecommendProportion) public onlyOwner{\r\n        require(newRecommendProportion <= 1000);\r\n        recommendProportion = newRecommendProportion;\r\n    }\r\n    \r\n    function setMaxProfit() internal {\r\n        maxProfit = (contractBalance * maxProfitAsPercentOfHouse) / maxProfitDivisor;  \r\n    }\r\n    \r\n    function ownerSetjackpotContract(address newJackpotContract) public onlyOwner{\r\n        jackpotContract = newJackpotContract;\r\n    }\r\n\r\n\r\n    function ownerPauseGame(bool newStatus) public onlyOwner{\r\n        gamePaused = newStatus;\r\n    }\r\n\r\n    function ownerPauseJackpot(bool newStatus) public onlyOwner{\r\n        jackpotPaused = newStatus;\r\n    }\r\n\r\n    function ownerPauseRecommend(bool newStatus) public onlyOwner{\r\n        recommendPaused = newStatus;\r\n    }\r\n\r\n    function ownerTransferEther(address sendTo, uint amount) public onlyOwner{        \r\n        contractBalance = safeSub(contractBalance, amount);\t\t\r\n        setMaxProfit();\r\n        sendTo.transfer(amount);\r\n        emit LogOwnerTransfer(sendTo, amount);\r\n    }\r\n\r\n    function ownerChangeOwner(address newOwner) public onlyOwner{\r\n        owner = newOwner;\r\n    }\r\n\r\n    function ownerkill() public onlyOwner{\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiWon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProfitAsPercentOfHouse\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHouseEdge\",\"type\":\"uint256\"}],\"name\":\"ownerSetHouseEdge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newContractBalanceInWei\",\"type\":\"uint256\"}],\"name\":\"ownerUpdateContractBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendProportion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProfitDivisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minJackpotBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"probability\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"ownerSetMinJackpoBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ownerChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxProfitAsPercent\",\"type\":\"uint256\"}],\"name\":\"ownerSetMaxProfitAsPercentOfHouse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"random\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiWagered\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimumBet\",\"type\":\"uint256\"}],\"name\":\"ownerSetMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"ownerPauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sendTo\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerTransferEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotOfHouseEdge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newProportion\",\"type\":\"uint256\"}],\"name\":\"ownerSetJackpotOfHouseEdge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"ownerPauseJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"OwnerSetPrizePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxBet\",\"type\":\"uint256\"}],\"name\":\"ownerSetMaxBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddeven\",\"type\":\"uint256\"},{\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"oddEven\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseEdge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playerTempReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseEdgeDivisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playerProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"ownerPauseRecommend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRecommendProportion\",\"type\":\"uint256\"}],\"name\":\"ownerSetRecommendProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"playerRoll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newJackpotContract\",\"type\":\"address\"}],\"name\":\"ownerSetjackpotContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"BetID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"PlayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"DiceResult\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Status\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"End\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oddeven\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"BetValue\",\"type\":\"uint256\"}],\"name\":\"LogResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"BetID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"PlayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"jackpotValue\",\"type\":\"uint256\"}],\"name\":\"LogJackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"BetID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"PlayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Profit\",\"type\":\"uint256\"}],\"name\":\"LogRecommendProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"SentToAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"AmountTransferred\",\"type\":\"uint256\"}],\"name\":\"LogOwnerTransfer\",\"type\":\"event\"}]","ContractName":"DiceRoll","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6de93cd0184611b9224a14fe3b1954de42d397e7ef40c37bc301fb36e83dc054"}]}