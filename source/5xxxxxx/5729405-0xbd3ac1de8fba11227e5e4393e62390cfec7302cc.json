{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary SafeMath_Time {\r\n    function addTime(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n  \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) external;\r\n    function freezeAccount(address target, bool freeze, uint startTime, uint endTime) external; \r\n}\r\n\r\ninterface marketPrice {\r\n    function getUSDEth() external returns(uint256);\r\n}\r\n\r\ncontract BaseCrowdsale{\r\n    using SafeMath for uint256;\r\n    using SafeMath_Time for uint;\r\n\r\n    token public ctrtToken;\r\n    address public wallet;\r\n    uint256 public weiRaised;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);    \r\n\r\n    function init(address _wallet, address _token) internal {\r\n        require(_wallet != address(0));\r\n        require(_token != address(0));\r\n\r\n        wallet = _wallet;\r\n        ctrtToken = token(_token);\r\n    }        \r\n\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address _beneficiary) public payable {\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount;\r\n        tokens = _getTokenAmount(weiAmount);\r\n\r\n        _preValidatePurchase(_beneficiary, weiAmount, tokens);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        _processPurchase(_beneficiary, weiAmount, tokens);\r\n\r\n        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n\r\n        _updatePurchasingState(_beneficiary, weiAmount, tokens);\r\n\r\n        _forwardFunds();\r\n        _postValidatePurchase(_beneficiary, weiAmount, tokens);\r\n    }\r\n\r\n    function _getTokenAmount(uint256 _tokenAmount) internal view returns (uint256) {\r\n        uint256 Amount = _tokenAmount;\r\n        return Amount;\r\n    }\r\n\r\n    function _updatePurchasingState(address _beneficiary, uint _weiAmount, uint256 _tokenAmount) internal {}\r\n    \r\n    function _preValidatePurchase(address _beneficiary, uint _weiAmount, uint256 _tokenAmount)  internal {\r\n        require(_beneficiary != address(0));\r\n        require(_weiAmount != 0);\r\n    }\r\n\r\n    function _postValidatePurchase(address _beneficiary, uint _weiAmount, uint256 _tokenAmount) internal {        \r\n    }\r\n\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        ctrtToken.transfer(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    function _processPurchase(address _beneficiary, uint _weiAmount, uint256 _tokenAmount) internal {\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    function _forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n}\r\n\r\ncontract AdvanceCrowdsale is BaseCrowdsale, Ownable{\r\n    using SafeMath for uint256;\r\n    uint constant MAX_FUND_SIZE = 3;\r\n\r\n    uint256[MAX_FUND_SIZE] public fundingGoalInToken;\r\n    uint256[MAX_FUND_SIZE] public amountRaisedInToken;\r\n    uint[MAX_FUND_SIZE] public rate;\r\n    uint[MAX_FUND_SIZE] public openingTimeArray;\r\n    uint[MAX_FUND_SIZE] public closingTimeArray;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    uint256 public price;              //USD cent per token\r\n    uint public tokenPerEth;\r\n    uint public minFundInEther = 0;    \r\n    uint public usdPerEth = 0;          //USD cent    \r\n    marketPrice public ctrtMarketPrice;\r\n\r\n    bool[MAX_FUND_SIZE] public isLockUpSale;\r\n    uint[MAX_FUND_SIZE] public lockDurationTime;\r\n\r\n    event Refunding(uint pos, uint256 FundingGoalInToken, uint _rate, uint _openingTime, uint _closingTime,\r\n    bool _isLockUpSale, uint _lockDurationTime);\r\n    event TokenPrice(uint usdPerEth, uint tokenPerEth);\r\n\r\n    function init(\r\n        address _wallet,\r\n        address _token,\r\n        address _marketPriceContract,\r\n        uint _usdPerEth,\r\n        uint _price\r\n    ) public         \r\n    {\r\n        super.init(_wallet, _token);\r\n        price = _price;\r\n        minFundInEther = 1;\r\n        ctrtMarketPrice = marketPrice(_marketPriceContract);\r\n        setUSDPerETH(_usdPerEth);\r\n    }\r\n    \r\n    function setFunding(\r\n        uint pos, uint256 _fundingGoalInToken, uint _rate, uint _openingTime, \r\n        uint _closingTime, bool _isLockUpSale, uint _lockDurationTime)\r\n    public onlyOwner\r\n    {\r\n        require(pos < MAX_FUND_SIZE);\r\n        openingTimeArray[pos] = _openingTime;\r\n        closingTimeArray[pos] = _closingTime;\r\n        rate[pos] = _rate;\r\n        fundingGoalInToken[pos] = _fundingGoalInToken.mul(1 ether);\r\n        amountRaisedInToken[pos] = 0;\r\n\r\n        isLockUpSale[pos] = _isLockUpSale;\r\n        lockDurationTime[pos] = _lockDurationTime.mul(1 minutes);\r\n        \r\n        emit Refunding(pos, _fundingGoalInToken, _rate, _openingTime, _closingTime, _isLockUpSale, _lockDurationTime);\r\n    }\r\n\r\n    function hasClosed() public view returns (bool) {\r\n        for(uint i = 0; i < MAX_FUND_SIZE; ++i)\r\n        {\r\n            if(openingTimeArray[i] <= now && now <= closingTimeArray[i])\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function fundPos() public view returns (uint) {\r\n        for(uint i = 0; i < MAX_FUND_SIZE; ++i)\r\n        {\r\n            if(openingTimeArray[i] <= now && now <= closingTimeArray[i])\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        require(false);\r\n    }\r\n\r\n    function setUSDPerETH(uint _usdPerEth) public onlyOwner{\r\n        require(_usdPerEth != 0);\r\n        usdPerEth = _usdPerEth;\r\n        tokenPerEth = usdPerEth.div(price).mul(1 ether);\r\n\r\n        TokenPrice(usdPerEth, tokenPerEth);\r\n    }\r\n\r\n    function SetUSDPerETH_byContract(uint _usdPerEth) internal {\r\n        require(_usdPerEth != 0);\r\n        usdPerEth = _usdPerEth;\r\n        tokenPerEth = usdPerEth.div(price).mul(1 ether);\r\n\r\n        TokenPrice(usdPerEth, tokenPerEth);\r\n    }\r\n\r\n    function setMarket(address _marketPrice) public onlyOwner{\r\n        ctrtMarketPrice = marketPrice(_marketPrice);\r\n    }\r\n\r\n    function newLockUpAddress(address newAddress) public {\r\n        uint pos = fundPos();\r\n\r\n        ctrtToken.freezeAccount(newAddress, true, block.timestamp, closingTimeArray[pos].addTime(lockDurationTime[pos]));\r\n    }\r\n\r\n    function _preValidatePurchase(address _beneficiary, uint _weiAmount, uint256 _tokenAmount)  internal {\r\n        super._preValidatePurchase(_beneficiary, _weiAmount, _tokenAmount);       \r\n        \r\n        require(hasClosed() == false);\r\n        uint pos = fundPos();\r\n\r\n        require(fundingGoalInToken[pos] >= amountRaisedInToken[pos].add(_tokenAmount));        \r\n        require(minFundInEther <= msg.value);        \r\n    }\r\n     \r\n    function _getTokenAmount(uint256 _tokenAmount) internal view returns (uint256) {\r\n        if(ctrtMarketPrice != address(0))\r\n        {           \r\n            uint256 usd = ctrtMarketPrice.getUSDEth();\r\n    \r\n            if(usd != usdPerEth) {\r\n                SetUSDPerETH_byContract(usd);\r\n            }\r\n        }\r\n        require(usdPerEth != 0);\r\n\r\n        uint256 Amount = _tokenAmount.mul(tokenPerEth).div(1 ether);\r\n        \r\n        require(hasClosed() == false);\r\n        uint pos = fundPos();\r\n\r\n        Amount = Amount.mul(rate[pos].add(100)).div(100);\r\n        return Amount;\r\n    }\r\n\r\n    function _updatePurchasingState(address _beneficiary, uint _weiAmount, uint256 _tokenAmount) internal {        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(msg.value);\r\n        require(hasClosed() == false);\r\n        uint pos = fundPos();\r\n        amountRaisedInToken[pos] = amountRaisedInToken[pos].add(_tokenAmount);\r\n    }\r\n\r\n    function _postValidatePurchase(address _beneficiary, uint _weiAmount, uint256 _tokenAmount) internal {\r\n        uint pos = fundPos();\r\n        if(true == isLockUpSale[pos])\r\n            newLockUpAddress(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_marketPriceContract\",\"type\":\"address\"},{\"name\":\"_usdPerEth\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ctrtMarketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundingGoalInToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isLockUpSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"closingTimeArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openingTimeArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pos\",\"type\":\"uint256\"},{\"name\":\"_fundingGoalInToken\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_isLockUpSale\",\"type\":\"bool\"},{\"name\":\"_lockDurationTime\",\"type\":\"uint256\"}],\"name\":\"setFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountRaisedInToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketPrice\",\"type\":\"address\"}],\"name\":\"setMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockDurationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usdPerEth\",\"type\":\"uint256\"}],\"name\":\"setUSDPerETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFundInEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ctrtToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"newLockUpAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundPos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pos\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"FundingGoalInToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isLockUpSale\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_lockDurationTime\",\"type\":\"uint256\"}],\"name\":\"Refunding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"usdPerEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenPerEth\",\"type\":\"uint256\"}],\"name\":\"TokenPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"AdvanceCrowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e9a0e9175322354e7a5038cf65860e4d9de407b3c888235c585255896c6cb8be"}]}