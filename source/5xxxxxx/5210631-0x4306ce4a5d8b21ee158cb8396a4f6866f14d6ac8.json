{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.9;\r\n\r\n /*\r\n * Contract that is working with ERC223 tokens\r\n */\r\n \r\ncontract ContractReceiver {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n} \r\n\r\n /**\r\n * ERC223 token by Dexaran\r\n *\r\n * https://github.com/Dexaran/ERC223-tokens\r\n */\r\n \r\n \r\n /* https://github.com/LykkeCity/EthereumApiDotNetCore/blob/master/src/ContractBuilder/contracts/token/SafeMath.sol */\r\ncontract SafeMath {\r\n    uint256 constant public MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (x > MAX_UINT256 - y) throw;\r\n        return x + y;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (x < y) throw;\r\n        return x - y;\r\n    }\r\n\r\n    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (y == 0) return 0;\r\n        if (x > MAX_UINT256 / y) throw;\r\n        return x * y;\r\n    }\r\n}\r\n \r\ncontract CoinvestToken is SafeMath {\r\n    \r\n    address public maintainer;\r\n    address public icoContract; // icoContract is needed to allow it to transfer tokens during crowdsale.\r\n    uint256 public lockupEndTime; // lockupEndTime is needed to determine when users may start transferring.\r\n    \r\n    bool public ERC223Transfer_enabled = false;\r\n    bool public Transfer_data_enabled = false;\r\n    bool public Transfer_nodata_enabled = true;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n    event ERC223Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed _from, address indexed _spender, uint indexed _amount);\r\n\r\n    mapping(address => uint) balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n  \r\n\r\n    string public constant symbol = \"COIN\";\r\n    string public constant name = \"Coinvest COIN Token\";\r\n    \r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply = 107142857 * (10 ** 18);\r\n    \r\n    /**\r\n     * @dev Set owner and beginning balance.\r\n     * @param _lockupEndTime The time at which the token may be traded.\r\n    **/\r\n    function CoinvestToken(uint256 _lockupEndTime)\r\n      public\r\n    {\r\n        balances[msg.sender] = totalSupply;\r\n        lockupEndTime = _lockupEndTime;\r\n        maintainer = msg.sender;\r\n    }\r\n  \r\n  \r\n    // Function that is called when a user or another contract wants to transfer funds .\r\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) transferable returns (bool success) {\r\n      \r\n        if(isContract(_to)) {\r\n            if (balanceOf(msg.sender) < _value) throw;\r\n            balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n            balances[_to] = safeAdd(balanceOf(_to), _value);\r\n            assert(_to.call.value(0)(bytes4(sha3(_custom_fallback)), msg.sender, _value, _data));\r\n            if(Transfer_data_enabled)\r\n            {\r\n                Transfer(msg.sender, _to, _value, _data);\r\n            }\r\n            if(Transfer_nodata_enabled)\r\n            {\r\n                Transfer(msg.sender, _to, _value);\r\n            }\r\n            if(ERC223Transfer_enabled)\r\n            {\r\n                ERC223Transfer(msg.sender, _to, _value, _data);\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    function ERC20transfer(address _to, uint _value, bytes _data) transferable returns (bool success) {\r\n        bytes memory empty;\r\n        return transferToAddress(_to, _value, empty);\r\n    }\r\n\r\n    // Function that is called when a user or another contract wants to transfer funds .\r\n    function transfer(address _to, uint _value, bytes _data) transferable returns (bool success) {\r\n        if(isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        }\r\n        else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n  \r\n    // Standard function transfer similar to ERC20 transfer with no _data .\r\n    // Added due to backwards compatibility reasons .\r\n    function transfer(address _to, uint _value) transferable returns (bool success) {\r\n      \r\n        //standard function transfer similar to ERC20 transfer with no _data\r\n        //added due to backwards compatibility reasons\r\n        bytes memory empty;\r\n        if(isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        }\r\n        else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) public returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length>0);\r\n    }\r\n\r\n    //function that is called when transaction target is an address\r\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        if (balanceOf(msg.sender) < _value) throw;\r\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n        if(Transfer_data_enabled)\r\n        {\r\n            Transfer(msg.sender, _to, _value, _data);\r\n        }\r\n        if(Transfer_nodata_enabled)\r\n        {\r\n            Transfer(msg.sender, _to, _value);\r\n        }\r\n        if(ERC223Transfer_enabled)\r\n        {\r\n            ERC223Transfer(msg.sender, _to, _value, _data);\r\n        }\r\n        return true;\r\n    }\r\n  \r\n    //function that is called when transaction target is a contract\r\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        if (balanceOf(msg.sender) < _value) throw;\r\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        if(Transfer_data_enabled)\r\n        {\r\n            Transfer(msg.sender, _to, _value, _data);\r\n        }\r\n        if(Transfer_nodata_enabled)\r\n        {\r\n            Transfer(msg.sender, _to, _value);\r\n        }\r\n        if(ERC223Transfer_enabled)\r\n        {\r\n            ERC223Transfer(msg.sender, _to, _value, _data);\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function totalSupply() constant returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev An allowed address can transfer tokens from another's address.\r\n     * @param _from The owner of the tokens to be transferred.\r\n     * @param _to The address to which the tokens will be transferred.\r\n     * @param _amount The amount of tokens to be transferred.\r\n    **/\r\n    function transferFrom(address _from, address _to, uint _amount)\r\n      external\r\n      transferable\r\n    returns (bool success)\r\n    {\r\n        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount);\r\n\r\n        allowed[_from][msg.sender] -= _amount;\r\n        balances[_from] -= _amount;\r\n        balances[_to] += _amount;\r\n        bytes memory empty;\r\n        \r\n        Transfer(_from, _to, _amount, empty);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approves a wallet to transfer tokens on one's behalf.\r\n     * @param _spender The wallet approved to spend tokens.\r\n     * @param _amount The amount of tokens approved to spend.\r\n    **/\r\n    function approve(address _spender, uint256 _amount) \r\n      external\r\n      transferable // Protect from unlikely maintainer-receiver trickery\r\n    {\r\n        require(balances[msg.sender] >= _amount);\r\n        \r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Allow the owner to take ERC20 tokens off of this contract if they are accidentally sent.\r\n    **/\r\n    function token_escape(address _tokenContract)\r\n      external\r\n      only_maintainer\r\n    {\r\n        CoinvestToken lostToken = CoinvestToken(_tokenContract);\r\n        \r\n        uint256 stuckTokens = lostToken.balanceOf(address(this));\r\n        lostToken.transfer(maintainer, stuckTokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow maintainer to set the ico contract for transferable permissions.\r\n    **/\r\n    function setIcoContract(address _icoContract)\r\n      external\r\n      only_maintainer\r\n    {\r\n        require(icoContract == 0);\r\n        icoContract = _icoContract;\r\n    }\r\n\r\n    /**\r\n     * @dev Allowed amount for a user to spend of another's tokens.\r\n     * @param _owner The owner of the tokens approved to spend.\r\n     * @param _spender The address of the user allowed to spend the tokens.\r\n    **/\r\n    function allowance(address _owner, address _spender) \r\n      external\r\n      constant \r\n    returns (uint256) \r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function adjust_ERC223Transfer(bool _value) only_maintainer\r\n    {\r\n        ERC223Transfer_enabled = _value;\r\n    }\r\n    \r\n    function adjust_Transfer_nodata(bool _value) only_maintainer\r\n    {\r\n        Transfer_nodata_enabled = _value;\r\n    }\r\n    \r\n    function adjust_Transfer_data(bool _value) only_maintainer\r\n    {\r\n        Transfer_data_enabled = _value;\r\n    }\r\n    \r\n    modifier only_maintainer\r\n    {\r\n        assert(msg.sender == maintainer);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Allows the current maintainer to transfer maintenance of the contract to a new maintainer.\r\n     * @param newMaintainer The address to transfer ownership to.\r\n     */\r\n    function transferMaintainer(address newMaintainer) only_maintainer public {\r\n        require(newMaintainer != address(0));\r\n        maintainer = newMaintainer;\r\n    }\r\n    \r\n    modifier transferable\r\n    {\r\n        if (block.timestamp < lockupEndTime) {\r\n            require(msg.sender == maintainer || msg.sender == icoContract);\r\n        }\r\n        _;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"is_contract\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"adjust_Transfer_data\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockupEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Transfer_nodata_enabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"adjust_Transfer_nodata\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC20transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maintainer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"transferMaintainer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Transfer_data_enabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"token_escape\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"adjust_ERC223Transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoContract\",\"type\":\"address\"}],\"name\":\"setIcoContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC223Transfer_enabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_lockupEndTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC223Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CoinvestToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005ac79278","Library":"","SwarmSource":"bzzr://07f81c06e2c2b088387621ccb740b0ff05da868430c857c735731b58545ec13f"}]}