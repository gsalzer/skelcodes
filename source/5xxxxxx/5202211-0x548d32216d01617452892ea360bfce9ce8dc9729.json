{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function takeOwnership(uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner{\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS paused\r\n     */\r\n    modifier whenNotPaused(){\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS NOT paused\r\n     */\r\n    modifier whenPaused{\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract ChemistryBase is Ownable {\r\n    \r\n    struct Element{\r\n        bytes32 symbol;\r\n    }\r\n   \r\n    /*** EVENTS ***/\r\n\r\n    event Create(address owner, uint256 atomicNumber, bytes32 symbol);\r\n    \r\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a element\r\n    ///  ownership is assigned.\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n\r\n    /*** CONSTANTS ***/\r\n    \r\n    // currently known number of elements in periodic table\r\n    uint256 public tableSize = 173;\r\n\r\n    /*** STORAGE ***/\r\n\r\n    /// @dev An array containing the element struct for all Elements in existence. The ID\r\n    ///  of each element is actually an index of this array.\r\n    Element[] public elements;\r\n\r\n    /// @dev A mapping from element IDs to the address that owns them. All elements have\r\n    ///  some valid owner address, even miner elements are created with a non-zero owner.\r\n    mapping (uint256 => address) public elementToOwner;\r\n\r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    //  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) internal ownersTokenCount;\r\n\r\n    /// @dev A mapping from element IDs to an address that has been approved to call\r\n    ///  transferFrom(). Each Element can only have one approved address for transfer\r\n    ///  at any time. A zero value means no approval is outstanding.\r\n    mapping (uint256 => address) public elementToApproved;\r\n    \r\n    mapping (address => bool) public authorized;\r\n    \r\n    mapping (uint256 => uint256) public currentPrice;\r\n    \r\n\tfunction addAuthorization (address _authorized) onlyOwner external {\r\n\t\tauthorized[_authorized] = true;\r\n\t}\r\n\r\n\tfunction removeAuthorization (address _authorized) onlyOwner external {\r\n\t\tdelete authorized[_authorized];\r\n\t}\r\n\t\r\n\tmodifier onlyAuthorized() {\r\n\t\trequire(authorized[msg.sender]);\r\n\t\t_;\r\n\t}\r\n    \r\n    /// @dev Assigns ownership of a specific element to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        // Since the number of elements is capped to 'numberOfElements'(173) we can't overflow this\r\n        ownersTokenCount[_to]++;\r\n        // transfer ownership\r\n        elementToOwner[_tokenId] = _to;\r\n        // When creating new element _from is 0x0, but we can't account that address.\r\n        if (_from != address(0)) {\r\n            ownersTokenCount[_from]--;\r\n            // clear any previously approved ownership exchange\r\n            delete elementToApproved[_tokenId];\r\n        }\r\n        // Emit the transfer event.\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev An internal method that creates a new element and stores it. This\r\n    ///  method doesn't do any checking and should only be called when the\r\n    ///  input data is known to be valid. Will generate both a Arise event\r\n    ///  and a Transfer event.\r\n    function _createElement(bytes32 _symbol, uint256 _price)\r\n        internal\r\n        returns (uint256) {\r\n        \t    \r\n        address owner = address(this);\r\n        Element memory _element = Element({\r\n            symbol : _symbol\r\n        });\r\n        uint256 newElementId = elements.push(_element) - 1;\r\n        \r\n        currentPrice[newElementId] = _price;\r\n        \r\n        // emit the create event\r\n        Create(owner, newElementId, _symbol);\r\n        \r\n        // This will assign ownership, and also emit the Transfer event as\r\n        // per ERC721 draft\r\n        _transfer(0, owner, newElementId);\r\n\r\n        return newElementId;\r\n    }\r\n    \r\n    function setTableSize(uint256 _newSize) external onlyOwner {\r\n        tableSize = _newSize;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner{\r\n        delete authorized[owner];\r\n        authorized[newOwner] = true;\r\n        super.transferOwnership(newOwner);\r\n    }\r\n}\r\n\r\ncontract ElementTokenImpl is ChemistryBase, ERC721 {\r\n\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public constant name = \"CryptoChemistry\";\r\n    string public constant symbol = \"CC\";\r\n\r\n    bytes4 constant InterfaceSignature_ERC165 =\r\n        bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n        bytes4(keccak256('name()')) ^\r\n        bytes4(keccak256('symbol()')) ^\r\n        bytes4(keccak256('totalSupply()')) ^\r\n        bytes4(keccak256('balanceOf(address)')) ^\r\n        bytes4(keccak256('ownerOf(uint256)')) ^\r\n        bytes4(keccak256('approve(address,uint256)')) ^\r\n        bytes4(keccak256('transfer(address,uint256)')) ^\r\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n        bytes4(keccak256('takeOwnership(uint256)')) ^\r\n        bytes4(keccak256('tokensOfOwner(address)'));\r\n\r\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\r\n    ///  ERC-165 and ERC-721.\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\r\n    {\r\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\r\n    }\r\n\r\n    /** @dev Checks if a given address is the current owner of the specified Element tokenId.\r\n     * @param _claimant the address we are validating against.\r\n     * @param _tokenId element id\r\n     */\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return elementToOwner[_tokenId] == _claimant;    \r\n    }\r\n\r\n    function _ownerApproved(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return elementToOwner[_tokenId] == _claimant && elementToApproved[_tokenId] == address(0);    \r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular element.\r\n    /// @param _claimant the address we are confirming element is approved for.\r\n    /// @param _tokenId element id\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return elementToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\r\n    ///  NOTE: _approve() does NOT send the Approval event.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        elementToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    /// @notice Returns the number of tokens owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownersTokenCount[_owner];\r\n    }\r\n\r\n    /// @notice Transfers a element to another address\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the element to transfer.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(address _to, uint256 _tokenId) external {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        require(_to != address(this));\r\n\r\n        // You can only send your own element.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Grant another address the right to transfer a specific element via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the element that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(address _to, uint256 _tokenId) external {\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Emit approval event.\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Transfer a element owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the element to be transfered.\r\n    /// @param _to The address that should take ownership of the element. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the element to be transferred.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(address _from, address _to, uint256 _tokenId)\r\n        external\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        require(_to != address(this));\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns the total number of tokens currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint256) {\r\n        return elements.length;\r\n    }\r\n\r\n    /// @notice Returns the address currently assigned ownership of a given element.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = elementToOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n    }\r\n    \r\n    function takeOwnership(uint256 _tokenId) external {\r\n        address _from = elementToOwner[_tokenId];\r\n        \r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_from != address(0));\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        _transfer(_from, msg.sender, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns a list of all element IDs assigned to an address.\r\n    /// @param _owner The owner whose tokens we are interested in.\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            // Return an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalElements = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            uint256 elementId;\r\n\r\n            for (elementId = 0; elementId < totalElements; elementId++) {\r\n                if (elementToOwner[elementId] == _owner) {\r\n                    result[resultIndex] = elementId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n    \r\n}\r\n\r\ncontract ContractOfSale is ElementTokenImpl {\r\n    using SafeMath for uint256;\r\n    \r\n  \tevent Sold (uint256 elementId, address oldOwner, address newOwner, uint256 price);\r\n  \t\r\n  \tuint256 private constant LIMIT_1 = 20 finney;\r\n  \tuint256 private constant LIMIT_2 = 500 finney;\r\n  \tuint256 private constant LIMIT_3 = 2000 finney;\r\n  \tuint256 private constant LIMIT_4 = 5000 finney;\r\n  \t\r\n  \t/* Buying */\r\n  \tfunction calculateNextPrice (uint256 _price) public pure returns (uint256 _nextPrice) {\r\n\t    if (_price < LIMIT_1) {\r\n\t      return _price.mul(2);//100%\r\n\t    } else if (_price < LIMIT_2) {\r\n\t      return _price.mul(13500).div(10000);//35%\r\n\t    } else if (_price < LIMIT_3) {\r\n\t      return _price.mul(12500).div(10000);//25%\r\n\t    } else if (_price < LIMIT_4) {\r\n\t      return _price.mul(11700).div(10000);//17%\r\n\t    } else {\r\n\t      return _price.mul(11500).div(10000);//15%\r\n\t    }\r\n  \t}\r\n\r\n\tfunction _calculateOwnerCut (uint256 _price) internal pure returns (uint256 _devCut) {\r\n\t\tif (_price < LIMIT_1) {\r\n\t      return _price.mul(1500).div(10000); // 15%\r\n\t    } else if (_price < LIMIT_2) {\r\n\t      return _price.mul(500).div(10000); // 5%\r\n\t    } else if (_price < LIMIT_3) {\r\n\t      return _price.mul(400).div(10000); // 4%\r\n\t    } else if (_price < LIMIT_4) {\r\n\t      return _price.mul(300).div(10000); // 3%\r\n\t    } else {\r\n\t      return _price.mul(200).div(10000); // 2%\r\n\t    }\r\n  \t}\r\n\r\n\tfunction buy (uint256 _itemId) external payable{\r\n        uint256 price = currentPrice[_itemId];\r\n\t    //\r\n        require(currentPrice[_itemId] > 0);\r\n        //\r\n        require(elementToOwner[_itemId] != address(0));\r\n        //\r\n        require(msg.value >= price);\r\n        //\r\n        require(elementToOwner[_itemId] != msg.sender);\r\n        //\r\n        require(msg.sender != address(0));\r\n        \r\n        address oldOwner = elementToOwner[_itemId];\r\n        //\r\n        address newOwner = msg.sender;\r\n        //\r\n        //\r\n        uint256 excess = msg.value.sub(price);\r\n        //\r\n        _transfer(oldOwner, newOwner, _itemId);\r\n        //\r\n        currentPrice[_itemId] = calculateNextPrice(price);\r\n        \r\n        Sold(_itemId, oldOwner, newOwner, price);\r\n\r\n        uint256 ownerCut = _calculateOwnerCut(price);\r\n\r\n        oldOwner.transfer(price.sub(ownerCut));\r\n        if (excess > 0) {\r\n            newOwner.transfer(excess);\r\n        }\r\n    }\r\n    \r\n\tfunction priceOfElement(uint256 _elementId) external view returns (uint256 _price) {\r\n\t\treturn currentPrice[_elementId];\r\n\t}\r\n\r\n\tfunction priceOfElements(uint256[] _elementIds) external view returns (uint256[] _prices) {\r\n\t    uint256 length = _elementIds.length;\r\n\t    _prices = new uint256[](length);\r\n\t    \r\n\t    for(uint256 i = 0; i < length; i++) {\r\n\t        _prices[i] = currentPrice[_elementIds[i]];\r\n\t    }\r\n\t}\r\n\r\n\tfunction nextPriceOfElement(uint256 _itemId) public view returns (uint256 _nextPrice) {\r\n\t\treturn calculateNextPrice(currentPrice[_itemId]);\r\n\t}\r\n\r\n}\r\n\r\ncontract ChemistryCore is ContractOfSale {\r\n    \r\n    function ChemistryCore() public {\r\n        owner = msg.sender;\r\n        authorized[msg.sender] = true;\r\n        \r\n        _createElement(\"0\", 2 ** 255);//philosophers stone is priceless\r\n    }\r\n    \r\n    function addElement(bytes32 _symbol) external onlyAuthorized() {\r\n        uint256 elementId = elements.length + 1;\r\n        \r\n        require(currentPrice[elementId] == 0);\r\n        require(elementToOwner[elementId] == address(0));\r\n        require(elementId <= tableSize + 1);\r\n        \r\n        _createElement(_symbol, 1 finney);\r\n    }\r\n    \r\n    function addElements(bytes32[] _symbols) external onlyAuthorized() {\r\n        uint256 elementId = elements.length + 1;\r\n        \r\n        uint256 length = _symbols.length;\r\n        uint256 size = tableSize + 1;\r\n        for(uint256 i = 0; i < length; i ++) {\r\n            \r\n            require(currentPrice[elementId] == 0);\r\n            require(elementToOwner[elementId] == address(0));\r\n            require(elementId <= size);\r\n            \r\n            _createElement(_symbols[i], 1 finney);\r\n            elementId++;\r\n        }\r\n        \r\n    }\r\n\r\n    function withdrawAll() onlyOwner() external {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function withdrawAmount(uint256 _amount) onlyOwner() external {\r\n        owner.transfer(_amount);\r\n    }\r\n    \r\n    function() external payable {\r\n        require(msg.sender == address(this));\r\n    }\r\n    \r\n    function getElementsFromIndex(uint32 indexFrom, uint32 count) external view returns (bytes32[] memory elementsData) {\r\n        //check length\r\n        uint256 lenght = (elements.length - indexFrom >= count ? count : elements.length - indexFrom);\r\n        \r\n        elementsData = new bytes32[](lenght);\r\n        for(uint256 i = 0; i < lenght; i ++) {\r\n            elementsData[i] = elements[indexFrom + i].symbol;\r\n        }\r\n    }\r\n    \r\n    function getElementOwners(uint256[] _elementIds) external view returns (address[] memory owners) {\r\n        uint256 lenght = _elementIds.length;\r\n        owners = new address[](lenght);\r\n        \r\n        for(uint256 i = 0; i < lenght; i ++) {\r\n            owners[i] = elementToOwner[_elementIds[i]];\r\n        }\r\n    }\r\n    \r\n\tfunction getElementView(uint256 _id) external view returns (string symbol) {\r\n\t\tsymbol = _bytes32ToString(elements[_id].symbol);\r\n    }\r\n\t\r\n\tfunction getElement(uint256 _id) external view returns (bytes32 symbol) {\r\n\t\tsymbol = elements[_id].symbol;\r\n    }\r\n    \r\n    function getElements(uint256[] _elementIds) external view returns (bytes32[] memory elementsData) {\r\n        elementsData = new bytes32[](_elementIds.length);\r\n        for(uint256 i = 0; i < _elementIds.length; i++) {\r\n            elementsData[i] = elements[_elementIds[i]].symbol;\r\n        }\r\n    }\r\n    \r\n    function getElementInfoView(uint256 _itemId) external view returns (address _owner, uint256 _price, uint256 _nextPrice, string _symbol) {\r\n\t    _price = currentPrice[_itemId];\r\n\t\treturn (elementToOwner[_itemId], _price, calculateNextPrice(_price), _bytes32ToString(elements[_itemId].symbol));\r\n\t}\r\n    \r\n    function getElementInfo(uint256 _itemId) external view returns (address _owner, uint256 _price, uint256 _nextPrice, bytes32 _symbol) {\r\n\t    _price = currentPrice[_itemId];\r\n\t\treturn (elementToOwner[_itemId], _price, calculateNextPrice(_price), elements[_itemId].symbol);\r\n\t}\r\n    \r\n    function _bytes32ToString(bytes32 data) internal pure returns (string) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint256(data) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_elementId\",\"type\":\"uint256\"}],\"name\":\"priceOfElement\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbols\",\"type\":\"bytes32[]\"}],\"name\":\"addElements\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"nextPriceOfElement\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"addElement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authorized\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getElement\",\"outputs\":[{\"name\":\"symbol\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_elementIds\",\"type\":\"uint256[]\"}],\"name\":\"getElementOwners\",\"outputs\":[{\"name\":\"owners\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"elementToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_elementIds\",\"type\":\"uint256[]\"}],\"name\":\"getElements\",\"outputs\":[{\"name\":\"elementsData\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_elementIds\",\"type\":\"uint256[]\"}],\"name\":\"priceOfElements\",\"outputs\":[{\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getElementView\",\"outputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authorized\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getElementInfo\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getElementInfoView\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"elementToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"indexFrom\",\"type\":\"uint32\"},{\"name\":\"count\",\"type\":\"uint32\"}],\"name\":\"getElementsFromIndex\",\"outputs\":[{\"name\":\"elementsData\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tableSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateNextPrice\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"elements\",\"outputs\":[{\"name\":\"symbol\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSize\",\"type\":\"uint256\"}],\"name\":\"setTableSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"elementId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atomicNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"bytes32\"}],\"name\":\"Create\",\"type\":\"event\"}]","ContractName":"ChemistryCore","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0be9c02cb501ccfd354664c3a4ccc82dff25dd614b3f299e49bc73aefac9e730"}]}