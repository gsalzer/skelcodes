{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n//Abstract contract for Calling ERC20 contract\r\ncontract AbstractCon {\r\n    function allowance(address _owner, address _spender)  public pure returns (uint256 remaining);\r\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\r\n    function decimals() public returns (uint8);\r\n    //function approve(address _spender, uint256 _value) public returns (bool); //test\r\n    //function transfer(address _to, uint256 _value) public returns (bool); //test\r\n    \r\n}\r\n\r\n//...\r\ncontract EXOTokenSale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"EXO_TOKEN_SALE\";\r\n\r\n    ///////////////////////\r\n    // DATA STRUCTURES  ///\r\n    ///////////////////////\r\n    enum StageName {Pause, PreSale, Sale, Ended, Refund}\r\n    struct StageProperties {\r\n        uint256 planEndDate;\r\n        address tokenKeeper;\r\n    }\r\n    \r\n    StageName public currentStage;\r\n    mapping(uint8   => StageProperties) public campaignStages;\r\n    mapping(address => uint256)         public deposited;\r\n    \r\n    uint256 public weiRaised=0; //All raised ether\r\n    uint256 public token_rate=1600; // decimal part of token per wei (0.3$ if 480$==1ETH)\r\n    uint256 public minimum_token_sell=1000; // !!! token count - without decimals!!!\r\n    uint256 public softCap=1042*10**18;//    500 000$ if 480$==1ETH\r\n    uint256 public hardCap=52083*10**18;//25 000 000$ if 480$==1ETH\r\n    address public wallet ; \r\n    address public ERC20address;\r\n\r\n    ///////////////////////\r\n    /// EVENTS     ///////\r\n    //////////////////////\r\n    event Income(address from, uint256 amount, uint64 timestamp);\r\n    event NewTokenRate(uint256 rate);\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 weivalue, uint256 tokens);\r\n    event FundsWithdraw(address indexed who, uint256 amount , uint64 timestamp);\r\n    event Refunded(address investor, uint256 depositedValue);\r\n    \r\n    //20180501 = 1525132800\r\n    //20180901 = 1535760000\r\n    //20181231 = 1546214400\r\n\r\n    function EXOTokenSale(address _wallet, address _preSaleTokenKeeper , address _SaleTokenKeeper) public {\r\n        //costructor\r\n        require(_wallet != address(0));\r\n        wallet = _wallet;\r\n        campaignStages[uint8(StageName.PreSale)] = StageProperties(1525132800, _preSaleTokenKeeper);\r\n        campaignStages[uint8(StageName.Sale)]    = StageProperties(1535760000, _SaleTokenKeeper);\r\n        currentStage = StageName.Pause;\r\n    }\r\n\r\n    //For disable transfers from incompatible wallet (Coinbase) \r\n    // or from a non ERC-20 compatible wallet\r\n    //it may be purposefully comment this fallback function and recieve\r\n    // Ether  direct through exchangeEtherOnTokens()\r\n    function() public payable {\r\n        exchangeEtherOnTokens(msg.sender);\r\n    }\r\n\r\n        // low level token purchase function\r\n    function exchangeEtherOnTokens(address beneficiary) public payable  {\r\n        emit Income(msg.sender, msg.value, uint64(now));\r\n        require(currentStage == StageName.PreSale || currentStage == StageName.Sale);\r\n        uint256 weiAmount = msg.value; //local\r\n        uint256 tokens = getTokenAmount(weiAmount);\r\n        require(beneficiary != address(0));\r\n        require(token_rate > 0);//implicit enabling sell\r\n        AbstractCon ac = AbstractCon(ERC20address);\r\n        require(tokens >= minimum_token_sell.mul(10 ** uint256(ac.decimals())));\r\n        require(ac.transferFrom(campaignStages[uint8(currentStage)].tokenKeeper, beneficiary, tokens));\r\n        checkCurrentStage();\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        deposited[beneficiary] = deposited[beneficiary].add(weiAmount);\r\n        emit TokenPurchase(msg.sender, beneficiary, msg.value, tokens);\r\n        if (weiRaised >= softCap) \r\n            withdrawETH();\r\n    }\r\n\r\n    //Stage time and conditions control\r\n    function checkCurrentStage() internal {\r\n        if  (campaignStages[uint8(currentStage)].planEndDate <= now) {\r\n            // Allow refund if softCap is not reached during PreSale stage\r\n            if  (currentStage == StageName.PreSale \r\n                 && (weiRaised + msg.value) < softCap\r\n                ) {\r\n                    currentStage = StageName.Refund;\r\n                    return;\r\n            }\r\n            currentStage = StageName.Pause;\r\n        }\r\n        //Finish tokensale campaign when hardCap will reached\r\n        if (currentStage == StageName.Sale \r\n            && (weiRaised + msg.value) >= hardCap\r\n            ) { \r\n               currentStage = StageName.Ended;\r\n        }\r\n    }\r\n\r\n    //for all discount logic\r\n    function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n        return weiAmount.mul(token_rate);\r\n    }\r\n\r\n    function withdrawETH() internal {\r\n        emit FundsWithdraw(wallet, this.balance, uint64(now));\r\n        wallet.transfer(this.balance);// or weiAmount\r\n    }\r\n\r\n    //Set current stage of campaign manually\r\n    function setCurrentStage(StageName _name) external onlyOwner  {\r\n        currentStage = _name;\r\n    }\r\n\r\n    //Manually stages control\r\n    function setStageProperties(\r\n        StageName _name, \r\n        uint256 _planEndDate, \r\n        address _tokenKeeper \r\n        ) external onlyOwner {\r\n        campaignStages[uint8(_name)] = StageProperties(_planEndDate, _tokenKeeper);\r\n    } \r\n\r\n    //set   erc20 address for token process  with check of allowance \r\n    function setERC20address(address newERC20contract)  external onlyOwner {\r\n        require(address(newERC20contract) != 0);\r\n        AbstractCon ac = AbstractCon(newERC20contract);\r\n        require(ac.allowance(campaignStages[uint8(currentStage)].tokenKeeper, address(this))>0);\r\n        ERC20address = newERC20contract;\r\n    }\r\n    \r\n    //refund if not softCapped\r\n    function refund(address investor) external {\r\n        require(currentStage == StageName.Refund);\r\n        require(investor != address(0));\r\n        assert(msg.data.length >= 32 + 4);  //Short Address Attack\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        emit Refunded(investor, depositedValue);\r\n    }\r\n\r\n    function setTokenRate(uint256 newRate) external onlyOwner {\r\n        token_rate = newRate;\r\n        emit NewTokenRate(newRate);\r\n    }\r\n\r\n    function setSoftCap(uint256 _val) external onlyOwner {\r\n        softCap = _val;\r\n    }\r\n\r\n    function setHardCap(uint256 _val) external onlyOwner {\r\n        hardCap = _val;\r\n    }\r\n\r\n\r\n    function setMinimumTokenSell(uint256 newNumber) external onlyOwner {\r\n        minimum_token_sell = newNumber;\r\n    }\r\n\r\n    function setWallet(address _wallet) external onlyOwner {\r\n        wallet = _wallet;\r\n    } \r\n\r\n    function destroy()  external onlyOwner {\r\n      if  (weiRaised >= softCap)\r\n          selfdestruct(owner);\r\n  } \r\n\r\n}              \r\n//***************************************************************\r\n  // Designed by by IBERGroup, email:maxsizmobile@iber.group; \r\n  //     Telegram: https://t.me/msmobile\r\n  //               https://t.me/alexamuek\r\n  // Code released under the MIT License(see git root).\r\n  //// SafeMath and Ownable part of this contract based on \r\n  //// https://github.com/OpenZeppelin/zeppelin-solidity\r\n  ////**************************************************************","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"uint8\"}],\"name\":\"setCurrentStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"uint8\"},{\"name\":\"_planEndDate\",\"type\":\"uint256\"},{\"name\":\"_tokenKeeper\",\"type\":\"address\"}],\"name\":\"setStageProperties\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"campaignStages\",\"outputs\":[{\"name\":\"planEndDate\",\"type\":\"uint256\"},{\"name\":\"tokenKeeper\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newERC20contract\",\"type\":\"address\"}],\"name\":\"setERC20address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"exchangeEtherOnTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum_token_sell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setSoftCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_preSaleTokenKeeper\",\"type\":\"address\"},{\"name\":\"_SaleTokenKeeper\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"Income\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"NewTokenRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weivalue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"FundsWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"depositedValue\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EXOTokenSale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000033133095a5252fed041fe1995a16cb14c968c0f30000000000000000000000005331494ef63cf0e1a61a0f96902c3e0e7f3426940000000000000000000000008446b26a6ff668011dfe8202a6d8046c3df13cd3","Library":"","SwarmSource":"bzzr://447a175b3aded520f02c3805a21d73d2127c66877e30ea915b330d28dce0ed62"}]}