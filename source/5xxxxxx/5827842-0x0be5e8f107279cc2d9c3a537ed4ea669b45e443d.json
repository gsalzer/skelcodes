{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\ncontract POMDA {\r\n/*=================================\r\n=            MODIFIERS            =\r\n=================================*/\r\n// only people with tokens\r\nmodifier onlyBagholders() {\r\nrequire(myTokens() > 0);\r\n_;\r\n}\r\n\r\n// only people with profits\r\nmodifier onlyStronghands() {\r\nrequire(myDividends(true) > 0);\r\n_;\r\n}\r\n\r\n/*==============================\r\n=            EVENTS            =\r\n==============================*/\r\nevent onTokenPurchase(\r\naddress indexed customerAddress,\r\nuint256 incomingEthereum,\r\nuint256 tokensMinted,\r\naddress indexed referredBy\r\n);\r\n\r\nevent onTokenSell(\r\naddress indexed customerAddress,\r\nuint256 tokensBurned,\r\nuint256 ethereumEarned\r\n);\r\n\r\nevent onReinvestment(\r\naddress indexed customerAddress,\r\nuint256 ethereumReinvested,\r\nuint256 tokensMinted\r\n);\r\n\r\nevent onWithdraw(\r\naddress indexed customerAddress,\r\nuint256 ethereumWithdrawn\r\n);\r\n\r\n// ERC20\r\nevent Transfer(\r\naddress indexed from,\r\naddress indexed to,\r\nuint256 tokens\r\n);\r\n\r\n\r\n/*=====================================\r\n=            CONFIGURABLES            =\r\n=====================================*/\r\nstring public name = \"POMDA\";\r\nstring public symbol = \"POMDA\";\r\nuint8 constant public decimals = 18;\r\nuint8 constant internal dividendFee_ = 10;\r\nuint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\r\nuint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\r\nuint256 constant internal magnitude = 2**64;\r\n\r\n// proof of stake (defaults at 100 tokens)\r\nuint256 public stakingRequirement = 100e18;\r\n\r\n// ambassador program\r\nmapping(address => bool) internal ambassadors_;\r\nuint256 constant internal ambassadorMaxPurchase_ = 1 ether;\r\nuint256 constant internal ambassadorQuota_ = 20 ether;\r\n\r\n\r\n\r\n/*================================\r\n=            DATASETS            =\r\n================================*/\r\n// amount of shares for each address (scaled number)\r\nmapping(address => uint256) internal tokenBalanceLedger_;\r\nmapping(address => uint256) internal referralBalance_;\r\nmapping(address => int256) internal payoutsTo_;\r\nuint256 internal tokenSupply_ = 0;\r\nuint256 internal profitPerShare_;\r\n\r\n\r\n\r\n\r\n\r\n/*=======================================\r\n=            PUBLIC FUNCTIONS            =\r\n=======================================*/\r\n/*\r\n* -- APPLICATION ENTRY POINTS --  \r\n*/\r\nfunction POMDA()\r\npublic\r\n{\r\n        \r\n}\r\nfunction buy(address _referredBy)\r\npublic\r\npayable\r\nreturns(uint256)\r\n{\r\npurchaseTokens(msg.value, _referredBy);\r\n}\r\n\r\n/**\r\n* Fallback function to handle ethereum that was send straight to the contract\r\n* Unfortunately we cannot use a referral address this way.\r\n*/\r\nfunction()\r\npayable\r\npublic\r\n{\r\npurchaseTokens(msg.value, 0x0);\r\n}\r\n\r\n/**\r\n* Converts all of caller's dividends to tokens.\r\n*/\r\nfunction reinvest()\r\nonlyStronghands()\r\npublic\r\n{\r\n// fetch dividends\r\nuint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\r\n\r\n// pay out the dividends virtually\r\naddress _customerAddress = msg.sender;\r\npayoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n\r\n// retrieve ref. bonus\r\n_dividends += referralBalance_[_customerAddress];\r\nreferralBalance_[_customerAddress] = 0;\r\n\r\n// dispatch a buy order with the virtualized \"withdrawn dividends\"\r\nuint256 _tokens = purchaseTokens(_dividends, 0x0);\r\n\r\n// fire event\r\nonReinvestment(_customerAddress, _dividends, _tokens);\r\n}\r\n\r\n/**\r\n* Alias of sell() and withdraw().\r\n*/\r\nfunction exit()\r\npublic\r\n{\r\n// get token count for caller & sell them all\r\naddress _customerAddress = msg.sender;\r\nuint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\nif(_tokens > 0) sell(_tokens);\r\n\r\n// lambo delivery service\r\nwithdraw();\r\n}\r\n\r\n/**\r\n* Withdraws all of the callers earnings.\r\n*/\r\nfunction withdraw()\r\nonlyStronghands()\r\npublic\r\n{\r\n// setup data\r\naddress _customerAddress = msg.sender;\r\nuint256 _dividends = myDividends(false); // get ref. bonus later in the code\r\n\r\n// update dividend tracker\r\npayoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n\r\n// add ref. bonus\r\n_dividends += referralBalance_[_customerAddress];\r\nreferralBalance_[_customerAddress] = 0;\r\n\r\n// lambo delivery service\r\n_customerAddress.transfer(_dividends);\r\n\r\n// fire event\r\nonWithdraw(_customerAddress, _dividends);\r\n}\r\n\r\n/**\r\n* Liquifies tokens to ethereum.\r\n*/\r\nfunction sell(uint256 _amountOfTokens)\r\nonlyBagholders()\r\npublic\r\n{\r\n// setup data\r\naddress _customerAddress = msg.sender;\r\n// russian hackers BTFO\r\nrequire(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\nuint256 _tokens = _amountOfTokens;\r\nuint256 _ethereum = tokensToEthereum_(_tokens);\r\nuint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\nuint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n\r\n// burn the sold tokens\r\ntokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\ntokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n\r\n// update dividends tracker\r\nint256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\r\npayoutsTo_[_customerAddress] -= _updatedPayouts;       \r\n\r\n// dividing by zero is a bad idea\r\nif (tokenSupply_ > 0) {\r\n// update the amount of dividends per token\r\nprofitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n}\r\n\r\n// fire event\r\nonTokenSell(_customerAddress, _tokens, _taxedEthereum);\r\n}\r\n\r\n\r\n/**\r\n* Transfer tokens from the caller to a new holder.\r\n* Remember, there's a 10% fee here as well.\r\n*/\r\nfunction transfer(address _toAddress, uint256 _amountOfTokens)\r\nonlyBagholders()\r\npublic\r\nreturns(bool)\r\n{\r\n// setup\r\naddress _customerAddress = msg.sender;\r\n\r\n// make sure we have the requested tokens\r\n// also disables transfers until ambassador phase is over\r\n// ( we dont want whale premines )\r\n//require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n// withdraw all outstanding dividends first\r\nif(myDividends(true) > 0) withdraw();\r\n\r\n// liquify 10% of the tokens that are transfered\r\n// these are dispersed to shareholders\r\nuint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\r\nuint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\nuint256 _dividends = tokensToEthereum_(_tokenFee);\r\n\r\n// burn the fee tokens\r\ntokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n\r\n// exchange tokens\r\ntokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\ntokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\r\n\r\n// update dividend trackers\r\npayoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\npayoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\r\n\r\n// disperse dividends among holders\r\nprofitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n\r\n// fire event\r\nTransfer(_customerAddress, _toAddress, _taxedTokens);\r\n\r\n// ERC20\r\nreturn true;\r\n\r\n}\r\n\r\n\r\n/*----------  HELPERS AND CALCULATORS  ----------*/\r\n/**\r\n* Method to view the current Ethereum stored in the contract\r\n* Example: totalEthereumBalance()\r\n*/\r\nfunction totalEthereumBalance()\r\npublic\r\nview\r\nreturns(uint)\r\n{\r\nreturn this.balance;\r\n}\r\n\r\n/**\r\n* Retrieve the total token supply.\r\n*/\r\nfunction totalSupply()\r\npublic\r\nview\r\nreturns(uint256)\r\n{\r\nreturn tokenSupply_;\r\n}\r\n\r\n/**\r\n* Retrieve the tokens owned by the caller.\r\n*/\r\nfunction myTokens()\r\npublic\r\nview\r\nreturns(uint256)\r\n{\r\naddress _customerAddress = msg.sender;\r\nreturn balanceOf(_customerAddress);\r\n}\r\n\r\n/**\r\n* Retrieve the dividends owned by the caller.\r\n* If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\r\n* The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n* But in the internal calculations, we want them separate. \r\n*/ \r\nfunction myDividends(bool _includeReferralBonus) \r\npublic \r\nview \r\nreturns(uint256)\r\n{\r\naddress _customerAddress = msg.sender;\r\nreturn _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n}\r\n\r\n/**\r\n* Retrieve the token balance of any single address.\r\n*/\r\nfunction balanceOf(address _customerAddress)\r\nview\r\npublic\r\nreturns(uint256)\r\n{\r\nreturn tokenBalanceLedger_[_customerAddress];\r\n}\r\n\r\n/**\r\n* Retrieve the dividend balance of any single address.\r\n*/\r\nfunction dividendsOf(address _customerAddress)\r\nview\r\npublic\r\nreturns(uint256)\r\n{\r\nreturn (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n}\r\n\r\n/**\r\n* Return the buy price of 1 individual token.\r\n*/\r\nfunction sellPrice() \r\npublic \r\nview \r\nreturns(uint256)\r\n{\r\n// our calculation relies on the token supply, so we need supply. Doh.\r\nif(tokenSupply_ == 0){\r\nreturn tokenPriceInitial_ - tokenPriceIncremental_;\r\n} else {\r\nuint256 _ethereum = tokensToEthereum_(1e18);\r\nuint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\r\nuint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\nreturn _taxedEthereum;\r\n}\r\n}\r\n\r\n/**\r\n* Return the sell price of 1 individual token.\r\n*/\r\nfunction buyPrice() \r\npublic \r\nview \r\nreturns(uint256)\r\n{\r\n// our calculation relies on the token supply, so we need supply. Doh.\r\nif(tokenSupply_ == 0){\r\nreturn tokenPriceInitial_ + tokenPriceIncremental_;\r\n} else {\r\nuint256 _ethereum = tokensToEthereum_(1e18);\r\nuint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\r\nuint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\r\nreturn _taxedEthereum;\r\n}\r\n}\r\n\r\n/**\r\n* Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n*/\r\nfunction calculateTokensReceived(uint256 _ethereumToSpend) \r\npublic \r\nview \r\nreturns(uint256)\r\n{\r\nuint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\r\nuint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\nuint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n\r\nreturn _amountOfTokens;\r\n}\r\n\r\n/**\r\n* Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n*/\r\nfunction calculateEthereumReceived(uint256 _tokensToSell) \r\npublic \r\nview \r\nreturns(uint256)\r\n{\r\nrequire(_tokensToSell <= tokenSupply_);\r\nuint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\nuint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\nuint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\nreturn _taxedEthereum;\r\n}\r\n\r\n\r\n/*==========================================\r\n=            INTERNAL FUNCTIONS            =\r\n==========================================*/\r\nfunction purchaseTokens(uint256 _incomingEthereum, address _referredBy)\r\n//    antiEarlyWhale(_incomingEthereum)\r\ninternal\r\nreturns(uint256)\r\n{\r\n// data setup\r\naddress _customerAddress = msg.sender;\r\nuint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\r\nuint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\r\nuint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\nuint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\r\nuint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\nuint256 _fee = _dividends * magnitude;\r\n\r\n// no point in continuing execution if OP is a poorfag russian hacker\r\n// prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\r\n// (or hackers)\r\n// and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\r\nrequire(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n\r\n// is the user referred by a masternode?\r\nif(\r\n// is this a referred purchase?\r\n_referredBy != 0x0000000000000000000000000000000000000000 &&\r\n\r\n// no cheating!\r\n_referredBy != _customerAddress &&\r\n\r\n// does the referrer have at least X whole tokens?\r\n// i.e is the referrer a godly chad masternode\r\ntokenBalanceLedger_[_referredBy] >= stakingRequirement\r\n){\r\n// wealth redistribution\r\nreferralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\r\n} else {\r\n// no ref purchase\r\n// add the referral bonus back to the global dividends cake\r\n_dividends = SafeMath.add(_dividends, _referralBonus);\r\n_fee = _dividends * magnitude;\r\n}\r\n\r\n// we can't give people infinite ethereum\r\nif(tokenSupply_ > 0){\r\n\r\n// add tokens to the pool\r\ntokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n\r\n// take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\nprofitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n\r\n// calculate the amount of tokens the customer receives over his purchase \r\n_fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n\r\n} else {\r\n// add tokens to the pool\r\ntokenSupply_ = _amountOfTokens;\r\n}\r\n\r\n// update circulating supply & the ledger address for the customer\r\ntokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n\r\n// Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\r\n//really i know you think you do but you don't\r\nint256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\r\npayoutsTo_[_customerAddress] += _updatedPayouts;\r\n\r\n// fire event\r\nonTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\r\n\r\nreturn _amountOfTokens;\r\n}\r\n\r\n/**\r\n* Calculate Token price based on an amount of incoming ethereum\r\n* It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n* Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n*/\r\nfunction ethereumToTokens_(uint256 _ethereum)\r\ninternal\r\nview\r\nreturns(uint256)\r\n{\r\nuint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\nuint256 _tokensReceived = \r\n(\r\n(\r\n// underflow attempts BTFO\r\nSafeMath.sub(\r\n(sqrt\r\n(\r\n(_tokenPriceInitial**2)\r\n+\r\n(2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\r\n+\r\n(((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n+\r\n(2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n)\r\n), _tokenPriceInitial\r\n)\r\n)/(tokenPriceIncremental_)\r\n)-(tokenSupply_)\r\n;\r\n\r\nreturn _tokensReceived;\r\n}\r\n\r\n/**\r\n* Calculate token sell value.\r\n* It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n* Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n*/\r\nfunction tokensToEthereum_(uint256 _tokens)\r\ninternal\r\nview\r\nreturns(uint256)\r\n{\r\n\r\nuint256 tokens_ = (_tokens + 1e18);\r\nuint256 _tokenSupply = (tokenSupply_ + 1e18);\r\nuint256 _etherReceived =\r\n(\r\n// underflow attempts BTFO\r\nSafeMath.sub(\r\n(\r\n(\r\n(\r\ntokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\r\n)-tokenPriceIncremental_\r\n)*(tokens_ - 1e18)\r\n),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\r\n)\r\n/1e18);\r\nreturn _etherReceived;\r\n}\r\n\r\n\r\n//This is where all your gas goes, sorry\r\n//Not sorry, you probably only paid 1 gwei\r\nfunction sqrt(uint x) internal pure returns (uint y) {\r\nuint z = (x + 1) / 2;\r\ny = x;\r\nwhile (z < y) {\r\ny = z;\r\nz = (x / z + z) / 2;\r\n}\r\n}\r\n}\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n/**\r\n* @dev Multiplies two numbers, throws on overflow.\r\n*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nassert(c / a == b);\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Integer division of two numbers, truncating the quotient.\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\nuint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\n/**\r\n* @dev Adds two numbers, throws on overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nassert(c >= a);\r\nreturn c;\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"POMDA","CompilerVersion":"v0.4.25-nightly.2018.6.3+commit.ef8fb63b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5c36c9afd44851067d26b0ca1b5b1b5025bef5fbd2149bd8f192d659484be4fa"}]}