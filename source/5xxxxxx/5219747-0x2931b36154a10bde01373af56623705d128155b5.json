{"status":"1","message":"OK","result":[{"SourceCode":"// CryptoDuels.co Copyright (c) 2018. All rights reserved.\r\n\r\npragma solidity ^0.4.20;\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n}\r\ncontract Owned {\r\n    address public ceoAddress;\r\n    address public cooAddress;\r\n    address private newCeoAddress;\r\n    address private newCooAddress;\r\n\r\n    function Owned() public {\r\n        ceoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n    }\r\n    \r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cooAddress\r\n        );\r\n        _;\r\n    }\r\n    function setCEO(address _newCEO) public onlyCEO {\r\n        require(_newCEO != address(0));\r\n        newCeoAddress = _newCEO;\r\n    }\r\n    function setCOO(address _newCOO) public onlyCEO {\r\n        require(_newCOO != address(0));\r\n        newCooAddress = _newCOO;\r\n    }\r\n    function acceptCeoOwnership() public {\r\n        require(msg.sender == newCeoAddress);\r\n        require(address(0) != newCeoAddress);\r\n        ceoAddress = newCeoAddress;\r\n        newCeoAddress = address(0);\r\n    }\r\n    function acceptCooOwnership() public {\r\n        require(msg.sender == newCooAddress);\r\n        require(address(0) != newCooAddress);\r\n        cooAddress = newCooAddress;\r\n        newCooAddress = address(0);\r\n    }\r\n}\r\n\r\ncontract CryptoDuels is Owned {\r\n    using SafeMath for uint;\r\n\r\n    struct PLAYER {\r\n        uint wad; // eth balance\r\n        uint lastJoin;\r\n        uint lastDuel;\r\n        \r\n        uint listPosition;\r\n    }\r\n    \r\n    mapping (address => PLAYER) public player;\r\n    address[] public playerList;\r\n    \r\n    function getPlayerCount() public view returns (uint) {\r\n        return playerList.length;\r\n    }\r\n    \r\n    //================ ADMIN ================\r\n    \r\n    uint public divCut = 20; // 2%\r\n    uint public divAmt = 0;\r\n    \r\n    function adminSetDiv(uint divCut_) public onlyCLevel {\r\n        require(divCut_ < 50); // max total cut = 5% (some of which can be used for events)\r\n        divCut = divCut_;\r\n    }\r\n    \r\n    uint public fatigueBlock = 1; // can't duel too much in too few time\r\n    uint public safeBlock = 1; // new players are safe for a while\r\n    \r\n    uint public blockDuelBegin = 0; // for special event\r\n    uint public blockWithdrawBegin = 0; // for special event\r\n    \r\n    function adminSetDuel(uint fatigueBlock_, uint safeBlock_) public onlyCLevel {\r\n        fatigueBlock = fatigueBlock_;\r\n        safeBlock = safeBlock_;\r\n    }\r\n    \r\n    // for special event\r\n    function adminSetBlock(uint blockDuelBegin_, uint blockWithdrawBegin_) public onlyCLevel {\r\n        require(blockWithdrawBegin_ < block.number + 6000); // at most 1 day\r\n\r\n        blockDuelBegin = blockDuelBegin_;\r\n        blockWithdrawBegin = blockWithdrawBegin_;\r\n    }\r\n    \r\n    function adminPayout(uint wad) public onlyCLevel {\r\n        if ((wad > divAmt) || (wad == 0)) // can only payout dividend, so player's ETHs are safe\r\n            wad = divAmt;\r\n        divAmt = divAmt.sub(wad);\r\n        ceoAddress.transfer(wad);\r\n    }\r\n    \r\n    //================ GAME ================\r\n\r\n    event DEPOSIT(address indexed player, uint wad, uint result);\r\n    event WITHDRAW(address indexed player, uint wad, uint result);\r\n    event DUEL(address indexed player, address opp, bool isWin, uint wad);\r\n    \r\n    function deposit() public payable {\r\n        require(msg.value > 0);\r\n        \r\n        PLAYER storage p = player[msg.sender];\r\n        \r\n        if (p.wad == 0) { // new player?\r\n            p.lastJoin = block.number;\r\n            p.listPosition = playerList.length;\r\n            playerList.push(msg.sender);\r\n        }\r\n        \r\n        p.wad = p.wad.add(msg.value);\r\n        DEPOSIT(msg.sender, msg.value, p.wad);\r\n    }\r\n\r\n    function withdraw(uint wad) public {\r\n        require(block.number >= blockWithdrawBegin);\r\n        \r\n        PLAYER storage p = player[msg.sender];\r\n        \r\n        if (wad == 0)\r\n            wad = p.wad;\r\n        require(wad != 0);\r\n\r\n        p.wad = p.wad.sub(wad);\r\n        msg.sender.transfer(wad); // send ETH\r\n        WITHDRAW(msg.sender, wad, p.wad);\r\n        \r\n        if (p.wad == 0) { // quit game?\r\n            playerList[p.listPosition] = playerList[playerList.length - 1];\r\n            player[playerList[p.listPosition]].listPosition = p.listPosition;\r\n            playerList.length--;\r\n        }\r\n    }\r\n    \r\n    function duel(address opp) public returns (uint, uint) {\r\n        require(block.number >= blockDuelBegin);\r\n        require(block.number >= fatigueBlock + player[msg.sender].lastDuel);\r\n        require(block.number >= safeBlock + player[opp].lastJoin);\r\n        require(!isContract(msg.sender));\r\n\r\n        player[msg.sender].lastDuel = block.number;\r\n        \r\n        uint ethPlayer = player[msg.sender].wad;\r\n        uint ethOpp = player[opp].wad;\r\n        \r\n        require(ethOpp > 0);\r\n        require(ethPlayer > 0);\r\n        \r\n        // this is not a good random number, but good enough for now\r\n        uint fakeRandom = uint(keccak256(block.blockhash(block.number-1), opp, divAmt, block.timestamp));\r\n        \r\n        bool isWin = (fakeRandom % (ethPlayer.add(ethOpp))) < ethPlayer;\r\n        \r\n        // send ETH from loser to winner\r\n        address winner = msg.sender;\r\n        address loser = opp;\r\n        uint amt = ethOpp;\r\n        if (!isWin) {\r\n            winner = opp;\r\n            loser = msg.sender;\r\n            amt = ethPlayer;\r\n        }\r\n\r\n        uint cut = amt.mul(divCut) / 1000;\r\n        uint realAmt = amt.sub(cut);\r\n        divAmt = divAmt.add(cut);\r\n        \r\n        player[winner].wad = player[winner].wad.add(realAmt);    \r\n        player[loser].wad = 0;\r\n        \r\n        // delete loser\r\n        playerList[player[loser].listPosition] = playerList[playerList.length - 1];\r\n        player[playerList[playerList.length - 1]].listPosition = player[loser].listPosition;\r\n        playerList.length--;\r\n        \r\n        DUEL(msg.sender, opp, isWin, amt);\r\n    }\r\n    \r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fatigueBlock_\",\"type\":\"uint256\"},{\"name\":\"safeBlock_\",\"type\":\"uint256\"}],\"name\":\"adminSetDuel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"player\",\"outputs\":[{\"name\":\"wad\",\"type\":\"uint256\"},{\"name\":\"lastJoin\",\"type\":\"uint256\"},{\"name\":\"lastDuel\",\"type\":\"uint256\"},{\"name\":\"listPosition\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blockDuelBegin_\",\"type\":\"uint256\"},{\"name\":\"blockWithdrawBegin_\",\"type\":\"uint256\"}],\"name\":\"adminSetBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"opp\",\"type\":\"address\"}],\"name\":\"duel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptCooOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fatigueBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"adminPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockWithdrawBegin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockDuelBegin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"divCut_\",\"type\":\"uint256\"}],\"name\":\"adminSetDiv\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptCeoOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"DEPOSIT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"WITHDRAW\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"opp\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isWin\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"DUEL\",\"type\":\"event\"}]","ContractName":"CryptoDuels","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5b44c2f8730dac8863e812754be2a63ed3dc9721a0ebcef2f6328e55a07121ed"}]}