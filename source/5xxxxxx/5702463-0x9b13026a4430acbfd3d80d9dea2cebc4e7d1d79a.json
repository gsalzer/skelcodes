{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/// @dev `Owned` is a base level contract that assigns an `owner` that can be\r\n///  later changed\r\ncontract Owned {\r\n\r\n    /// @dev `owner` is the only address that can call a function with this\r\n    /// modifier\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    address public owner;\r\n\r\n    /// @notice The Constructor assigns the message sender to be `owner`\r\n    function Owned() public {owner = msg.sender;}\r\n\r\n    /// @notice `owner` can step down and assign some other address to this role\r\n    /// @param _newOwner The address of the new owner. 0x0 can be used to create\r\n    ///  an unowned neutral vault, however that cannot be undone\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract Callable is Owned {\r\n\r\n    //sender => _allowed\r\n    mapping(address => bool) public callers;\r\n\r\n    //modifiers\r\n    modifier onlyCaller {\r\n        require(callers[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    //management of the repositories\r\n    function updateCaller(address _caller, bool allowed) public onlyOwner {\r\n        callers[_caller] = allowed;\r\n    }\r\n}\r\n\r\ncontract EternalStorage is Callable {\r\n\r\n    mapping(bytes32 => uint) uIntStorage;\r\n    mapping(bytes32 => string) stringStorage;\r\n    mapping(bytes32 => address) addressStorage;\r\n    mapping(bytes32 => bytes) bytesStorage;\r\n    mapping(bytes32 => bool) boolStorage;\r\n    mapping(bytes32 => int) intStorage;\r\n\r\n    // *** Getter Methods ***\r\n    function getUint(bytes32 _key) external view returns (uint) {\r\n        return uIntStorage[_key];\r\n    }\r\n\r\n    function getString(bytes32 _key) external view returns (string) {\r\n        return stringStorage[_key];\r\n    }\r\n\r\n    function getAddress(bytes32 _key) external view returns (address) {\r\n        return addressStorage[_key];\r\n    }\r\n\r\n    function getBytes(bytes32 _key) external view returns (bytes) {\r\n        return bytesStorage[_key];\r\n    }\r\n\r\n    function getBool(bytes32 _key) external view returns (bool) {\r\n        return boolStorage[_key];\r\n    }\r\n\r\n    function getInt(bytes32 _key) external view returns (int) {\r\n        return intStorage[_key];\r\n    }\r\n\r\n    // *** Setter Methods ***\r\n    function setUint(bytes32 _key, uint _value) onlyCaller external {\r\n        uIntStorage[_key] = _value;\r\n    }\r\n\r\n    function setString(bytes32 _key, string _value) onlyCaller external {\r\n        stringStorage[_key] = _value;\r\n    }\r\n\r\n    function setAddress(bytes32 _key, address _value) onlyCaller external {\r\n        addressStorage[_key] = _value;\r\n    }\r\n\r\n    function setBytes(bytes32 _key, bytes _value) onlyCaller external {\r\n        bytesStorage[_key] = _value;\r\n    }\r\n\r\n    function setBool(bytes32 _key, bool _value) onlyCaller external {\r\n        boolStorage[_key] = _value;\r\n    }\r\n\r\n    function setInt(bytes32 _key, int _value) onlyCaller external {\r\n        intStorage[_key] = _value;\r\n    }\r\n\r\n    // *** Delete Methods ***\r\n    function deleteUint(bytes32 _key) onlyCaller external {\r\n        delete uIntStorage[_key];\r\n    }\r\n\r\n    function deleteString(bytes32 _key) onlyCaller external {\r\n        delete stringStorage[_key];\r\n    }\r\n\r\n    function deleteAddress(bytes32 _key) onlyCaller external {\r\n        delete addressStorage[_key];\r\n    }\r\n\r\n    function deleteBytes(bytes32 _key) onlyCaller external {\r\n        delete bytesStorage[_key];\r\n    }\r\n\r\n    function deleteBool(bytes32 _key) onlyCaller external {\r\n        delete boolStorage[_key];\r\n    }\r\n\r\n    function deleteInt(bytes32 _key) onlyCaller external {\r\n        delete intStorage[_key];\r\n    }\r\n}\r\n\r\n/*\r\n * Database Contract\r\n * Davy Van Roy\r\n * Quinten De Swaef\r\n */\r\ncontract FundRepository is Callable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    EternalStorage public db;\r\n\r\n    //platform -> platformId => _funding\r\n    mapping(bytes32 => mapping(string => Funding)) funds;\r\n\r\n    struct Funding {\r\n        address[] funders; //funders that funded tokens\r\n        address[] tokens; //tokens that were funded\r\n        mapping(address => TokenFunding) tokenFunding;\r\n    }\r\n\r\n    struct TokenFunding {\r\n        mapping(address => uint256) balance;\r\n        uint256 totalTokenBalance;\r\n    }\r\n\r\n    constructor(address _eternalStorage) public {\r\n        db = EternalStorage(_eternalStorage);\r\n    }\r\n\r\n    function updateFunders(address _from, bytes32 _platform, string _platformId) public onlyCaller {\r\n        bool existing = db.getBool(keccak256(abi.encodePacked(\"funds.userHasFunded\", _platform, _platformId, _from)));\r\n        if (!existing) {\r\n            uint funderCount = getFunderCount(_platform, _platformId);\r\n            db.setAddress(keccak256(abi.encodePacked(\"funds.funders.address\", _platform, _platformId, funderCount)), _from);\r\n            db.setUint(keccak256(abi.encodePacked(\"funds.funderCount\", _platform, _platformId)), funderCount.add(1));\r\n        }\r\n    }\r\n\r\n    function updateBalances(address _from, bytes32 _platform, string _platformId, address _token, uint256 _value) public onlyCaller {\r\n        if (balance(_platform, _platformId, _token) <= 0) {\r\n            //add to the list of tokens for this platformId\r\n            uint tokenCount = getFundedTokenCount(_platform, _platformId);\r\n            db.setAddress(keccak256(abi.encodePacked(\"funds.token.address\", _platform, _platformId, tokenCount)), _token);\r\n            db.setUint(keccak256(abi.encodePacked(\"funds.tokenCount\", _platform, _platformId)), tokenCount.add(1));\r\n        }\r\n\r\n        //add to the balance of this platformId for this token\r\n        db.setUint(keccak256(abi.encodePacked(\"funds.tokenBalance\", _platform, _platformId, _token)), balance(_platform, _platformId, _token).add(_value));\r\n\r\n        //add to the balance the user has funded for the request\r\n        db.setUint(keccak256(abi.encodePacked(\"funds.amountFundedByUser\", _platform, _platformId, _from, _token)), amountFunded(_platform, _platformId, _from, _token).add(_value));\r\n\r\n        //add the fact that the user has now funded this platformId\r\n        db.setBool(keccak256(abi.encodePacked(\"funds.userHasFunded\", _platform, _platformId, _from)), true);\r\n    }\r\n\r\n    function claimToken(bytes32 platform, string platformId, address _token) public onlyCaller returns (uint256) {\r\n        require(!issueResolved(platform, platformId), \"Can't claim token, issue is already resolved.\");\r\n        uint256 totalTokenBalance = balance(platform, platformId, _token);\r\n        db.deleteUint(keccak256(abi.encodePacked(\"funds.tokenBalance\", platform, platformId, _token)));\r\n        return totalTokenBalance;\r\n    }\r\n\r\n    function finishResolveFund(bytes32 platform, string platformId) public onlyCaller returns (bool) {\r\n        db.setBool(keccak256(abi.encodePacked(\"funds.issueResolved\", platform, platformId)), true);\r\n        db.deleteUint(keccak256(abi.encodePacked(\"funds.funderCount\", platform, platformId)));\r\n        return true;\r\n    }\r\n\r\n    //constants\r\n    function getFundInfo(bytes32 _platform, string _platformId, address _funder, address _token) public view returns (uint256, uint256, uint256) {\r\n        return (\r\n        getFunderCount(_platform, _platformId),\r\n        balance(_platform, _platformId, _token),\r\n        amountFunded(_platform, _platformId, _funder, _token)\r\n        );\r\n    }\r\n\r\n    function issueResolved(bytes32 _platform, string _platformId) public view returns (bool) {\r\n        return db.getBool(keccak256(abi.encodePacked(\"funds.issueResolved\", _platform, _platformId)));\r\n    }\r\n\r\n    function getFundedTokenCount(bytes32 _platform, string _platformId) public view returns (uint256) {\r\n        return db.getUint(keccak256(abi.encodePacked(\"funds.tokenCount\", _platform, _platformId)));\r\n    }\r\n\r\n    function getFundedTokensByIndex(bytes32 _platform, string _platformId, uint _index) public view returns (address) {\r\n        return db.getAddress(keccak256(abi.encodePacked(\"funds.token.address\", _platform, _platformId, _index)));\r\n    }\r\n\r\n    function getFunderCount(bytes32 _platform, string _platformId) public view returns (uint) {\r\n        return db.getUint(keccak256(abi.encodePacked(\"funds.funderCount\", _platform, _platformId)));\r\n    }\r\n\r\n    function getFunderByIndex(bytes32 _platform, string _platformId, uint index) external view returns (address) {\r\n        return db.getAddress(keccak256(abi.encodePacked(\"funds.funders.address\", _platform, _platformId, index)));\r\n    }\r\n\r\n    function amountFunded(bytes32 _platform, string _platformId, address _funder, address _token) public view returns (uint256) {\r\n        return db.getUint(keccak256(abi.encodePacked(\"funds.amountFundedByUser\", _platform, _platformId, _funder, _token)));\r\n    }\r\n\r\n    function balance(bytes32 _platform, string _platformId, address _token) view public returns (uint256) {\r\n        return db.getUint(keccak256(abi.encodePacked(\"funds.tokenBalance\", _platform, _platformId, _token)));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"}],\"name\":\"getFunderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"platform\",\"type\":\"bytes32\"},{\"name\":\"platformId\",\"type\":\"string\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"},{\"name\":\"_funder\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"amountFunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFundedTokensByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"platform\",\"type\":\"bytes32\"},{\"name\":\"platformId\",\"type\":\"string\"}],\"name\":\"finishResolveFund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"db\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunderByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"callers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"}],\"name\":\"updateFunders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"}],\"name\":\"getFundedTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"},{\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"},{\"name\":\"_funder\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getFundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"}],\"name\":\"issueResolved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_eternalStorage\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"FundRepository","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000821d33c50d2d2d1381b5dfca34900bacad909a7","Library":"","SwarmSource":"bzzr://15ce69756396c170f1038bb96e039e691da6ad352cb7ea2da7facc71c224cb4a"}]}