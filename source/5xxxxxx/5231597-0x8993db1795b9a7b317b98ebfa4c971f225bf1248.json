{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n/**\r\n *  Standard Interface for ERC20 Contract\r\n */\r\ncontract IERC20 {\r\n    function totalSupply() public constant returns (uint _totalSupply);\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) constant public returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n/**\r\n * Checking overflows for various operations\r\n */\r\nlibrary SafeMathLib {\r\n\r\n/**\r\n* Issue: Change to internal constant\r\n**/\r\n  function minus(uint a, uint b) internal constant returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n/**\r\n* Issue: Change to internal constant\r\n**/\r\n  function plus(uint a, uint b) internal constant returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @notice The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  /**\r\n   * @notice The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @notice Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n    \r\n}\r\n\r\ncontract HasAddresses {\r\n    address teamAddress = 0xb72D3a827c7a7267C0c8E14A1F4729bF38950887;\r\n    address advisoryPoolAddress = 0x83a330c4A0f7b2bBe1B463F7a5a5eb6EA429E981;\r\n    address companyReserveAddress = 0x6F221CFDdac264146DEBaF88DaaE7Bb811C29fB5;\r\n    address freePoolAddress = 0x108102b4e6F92a7A140C38F3529c7bfFc950081B;\r\n}\r\n\r\n\r\ncontract VestingPeriods{\r\n    uint teamVestingTime = 1557360000;            // GMT: Thursday, 9 May 2019 00:00:00 \r\n    uint advisoryPoolVestingTime = 1541721600;    // Human time (GMT): Friday, 9 November 2018 00:00:00\r\n    uint companyReserveAmountVestingTime = 1541721600;    // Human time (GMT): Friday, 9 November 2018 00:00:00\r\n\r\n}\r\n\r\n\r\ncontract Vestable {\r\n\r\n    uint defaultVestingDate = 1526428800;  // timestamp after which transfers will be enabled,  Wednesday, 16 May 2018 00:00:00\r\n\r\n    mapping(address => uint) vestedAddresses ;    // Addresses vested till date\r\n    bool isVestingOver = false;\r\n\r\n    function addVestingAddress(address vestingAddress, uint maturityTimestamp) internal{\r\n        vestedAddresses[vestingAddress] = maturityTimestamp;\r\n    }\r\n\r\n    function checkVestingTimestamp(address testAddress) public constant returns(uint){\r\n        return vestedAddresses[testAddress];\r\n\r\n    }\r\n\r\n    function checkVestingCondition(address sender) internal returns(bool) {\r\n        uint vestingTimestamp = vestedAddresses[sender];\r\n        if(vestingTimestamp == 0){\r\n            vestingTimestamp = defaultVestingDate;\r\n        }\r\n        return now > vestingTimestamp;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ENKToken Token\r\n * @notice The ERC20 Token.\r\n */\r\ncontract ENKToken is IERC20, Ownable, Vestable, HasAddresses, VestingPeriods {\r\n    \r\n    using SafeMathLib for uint256;\r\n    \r\n    uint256 public constant totalTokenSupply = 1500000000 * 10**18;\r\n\r\n    uint256 public burntTokens;\r\n\r\n    string public constant name = \"Enkidu\";    // Enkidu\r\n    string public constant symbol = \"ENK\";  // ENK\r\n    uint8 public constant decimals = 18;\r\n            \r\n    mapping (address => uint256) public balances;\r\n    //approved[owner][spender]\r\n    mapping(address => mapping(address => uint256)) approved;\r\n    \r\n    function ENKToken() public {\r\n        \r\n        uint256 teamPoolAmount = 420 * 10**6 * 10**18;         // 420 million ENK\r\n        uint256 advisoryPoolAmount = 19 * 10**5 * 10**18;      // 1.9 million ENK\r\n        uint256 companyReserveAmount = 135 * 10**6 * 10**18;   // 135 million ENK\r\n        \r\n        uint256 freePoolAmmount = totalTokenSupply - teamPoolAmount - advisoryPoolAmount;     //   1.5 billion - ( 556.9 million )\r\n        balances[teamAddress] = teamPoolAmount;\r\n        balances[freePoolAddress] = freePoolAmmount;\r\n        balances[advisoryPoolAddress] = advisoryPoolAmount;    \r\n        balances[companyReserveAddress] = companyReserveAmount;\r\n        emit Transfer(address(this), teamAddress, teamPoolAmount);\r\n        emit Transfer(address(this), freePoolAddress, freePoolAmmount);\r\n        emit Transfer(address(this), advisoryPoolAddress, advisoryPoolAmount);\r\n        emit Transfer(address(this), companyReserveAddress, companyReserveAmount);\r\n        addVestingAddress(teamAddress, teamVestingTime);            // GMT: Thursday, 9 May 2019 00:00:00 \r\n        addVestingAddress(advisoryPoolAddress, advisoryPoolVestingTime);    // Human time (GMT): Friday, 9 November 2018 00:00:00\r\n        addVestingAddress(companyReserveAddress, companyReserveAmountVestingTime);    // Human time (GMT): Friday, 9 November 2018 00:00:00\r\n    }\r\n\r\n    function burn(uint256 _value) public {\r\n        require (balances[msg.sender] >= _value);                 // Check if the sender has enough\r\n        balances[msg.sender] = balances[msg.sender].minus(_value);\r\n        burntTokens += _value;\r\n        emit BurnToken(msg.sender, _value);\r\n    } \r\n\r\n    \r\n    function totalSupply() constant public returns (uint256 _totalSupply) {\r\n        return totalTokenSupply - burntTokens;\r\n    }\r\n    \r\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balances[_from] >= _value);                 // Check if the sender has enough\r\n        require (balances[_to] + _value > balances[_to]);   // Check for overflows\r\n        balances[_from] = balances[_from].minus(_value);    // Subtract from the sender\r\n        balances[_to] = balances[_to].plus(_value);         // Add the same to the recipient\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @notice Send `_value` tokens to `_to` from your account\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n        require(checkVestingCondition(msg.sender));\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @notice Send `_value` tokens to `_to` on behalf of `_from`\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(checkVestingCondition(_from));\r\n        require (_value <= approved[_from][msg.sender]);     // Check allowance\r\n        approved[_from][msg.sender] = approved[_from][msg.sender].minus(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @notice Approve `_value` tokens for `_spender`\r\n     * @param _spender The address of the sender\r\n     * @param _value the amount to send\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(checkVestingCondition(_spender));\r\n        if(balances[msg.sender] >= _value) {\r\n            approved[msg.sender][_spender] = _value;\r\n            emit Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n        \r\n    /**\r\n     * @notice Check `_value` tokens allowed to `_spender` by `_owner`\r\n     * @param _owner The address of the Owner\r\n     * @param _spender The address of the Spender\r\n     */\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n        return approved[_owner][_spender];\r\n    }\r\n        \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    event BurnToken(address _owner, uint256 _value);\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"testAddress\",\"type\":\"address\"}],\"name\":\"checkVestingTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burntTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BurnToken\",\"type\":\"event\"}]","ContractName":"ENKToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ce2d266753ac57a19758df671ab1971c67039b13d02bf330586e6eb34dd7373e"}]}