{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * Based on Ownable.sol from https://github.com/OpenZeppelin/zeppelin-solidity/tree/master\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner returns (bool) {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n    OwnershipTransferred(owner, newOwner);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * Based on SafeMath.sol from https://github.com/OpenZeppelin/zeppelin-solidity/tree/master\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\npragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\npragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  \r\n  // mapping of addresses with according balances\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 public totalSupply;\r\n\r\n  /**\r\n  * @dev Gets the totalSupply.\r\n  * @return An uint256 representing the total supply of tokens.\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply;\r\n  } \r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Custom ERC20 token\r\n *\r\n * @dev Implementation and upgraded version of the basic standard token.\r\n */\r\ncontract CustomToken is ERC20, BasicToken, Ownable {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  // boolean if transfers can be done\r\n  bool public enableTransfer = true;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenTransferEnabled() {\r\n    require(enableTransfer);\r\n    _;\r\n  }\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n  event EnableTransfer(address indexed owner, uint256 timestamp);\r\n  event DisableTransfer(address indexed owner, uint256 timestamp);\r\n\r\n  \r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) whenTransferEnabled public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   * The owner can transfer tokens at will. This to implement a reward pool contract in a later phase \r\n   * that will transfer tokens for rewarding.\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) whenTransferEnabled public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n\r\n\r\n    if (msg.sender!=owner) {\r\n      require(_value <= allowed[_from][msg.sender]);\r\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n      balances[_from] = balances[_from].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n    }  else {\r\n      balances[_from] = balances[_from].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n    }\r\n\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) whenTransferEnabled public returns (bool) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n    \r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /* Approves and then calls the receiving contract */\r\n  function approveAndCallAsContract(address _spender, uint256 _value, bytes _extraData) onlyOwner public returns (bool success) {\r\n    // check if the _spender already has some amount approved else use increase approval.\r\n    // maybe not for exchanges\r\n    //require((_value == 0) || (allowed[this][_spender] == 0));\r\n\r\n    allowed[this][_spender] = _value;\r\n    Approval(this, _spender, _value);\r\n\r\n    //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n    //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n    //it is assumed when one does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n    require(_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), this, _value, this, _extraData));\r\n    return true;\r\n  }\r\n\r\n  /* \r\n   * Approves and then calls the receiving contract \r\n   */\r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) whenTransferEnabled public returns (bool success) {\r\n    // check if the _spender already has some amount approved else use increase approval.\r\n    // maybe not for exchanges\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n\r\n    //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n    //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n    //it is assumed when one does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n    require(_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) whenTransferEnabled public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) whenTransferEnabled public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(address _burner, uint256 _value) onlyOwner public returns (bool) {\r\n    require(_value <= balances[_burner]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_burner] = balances[_burner].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    Burn(_burner, _value);\r\n    return true;\r\n  }\r\n   /**\r\n   * @dev called by the owner to enable transfers\r\n   */\r\n  function enableTransfer() onlyOwner public returns (bool) {\r\n    enableTransfer = true;\r\n    EnableTransfer(owner, now);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to disable tranfers\r\n   */\r\n  function disableTransfer() onlyOwner whenTransferEnabled public returns (bool) {\r\n    enableTransfer = false;\r\n    DisableTransfer(owner, now);\r\n    return true;\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Identify token\r\n * @dev ERC20 compliant token, where all tokens are pre-assigned to the token contract.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract Identify is CustomToken {\r\n\r\n  string public constant name = \"IDENTIFY\";\r\n  string public constant symbol = \"IDF\"; \r\n  uint8 public constant decimals = 6;\r\n\r\n  uint256 public constant INITIAL_SUPPLY = 49253333333 * (10 ** uint256(decimals));\r\n\r\n  /**\r\n   * @dev Constructor that gives the token contract all of initial tokens.\r\n   */\r\n  function Identify() public {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[this] = INITIAL_SUPPLY;\r\n    Transfer(0x0, this, INITIAL_SUPPLY);\r\n  }\r\n\r\n}\r\n\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Whitelist contract\r\n * @dev Participants for the presale and public sale must be \r\n * registered in the whitelist. Admins can add and remove \r\n * participants and other admins.\r\n */\r\ncontract Whitelist is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // a boolean to check if the presale is paused\r\n    bool public paused = false;\r\n\r\n    // the amount of participants in the whitelist\r\n    uint256 public participantAmount;\r\n\r\n    // mapping of participants\r\n    mapping (address => bool) public isParticipant;\r\n    \r\n    // mapping of admins\r\n    mapping (address => bool) public isAdmin;\r\n\r\n    event AddParticipant(address _participant);\r\n    event AddAdmin(address _admin, uint256 _timestamp);\r\n    event RemoveParticipant(address _participant);\r\n    event Paused(address _owner, uint256 _timestamp);\r\n    event Resumed(address _owner, uint256 _timestamp);\r\n  \r\n    /**\r\n    * event for claimed tokens logging\r\n    * @param owner where tokens are sent to\r\n    * @param claimtoken is the address of the ERC20 compliant token\r\n    * @param amount amount of tokens sent back\r\n    */\r\n    event ClaimedTokens(address indexed owner, address claimtoken, uint amount);\r\n  \r\n    /**\r\n     * modifier to check if the whitelist is not paused\r\n     */\r\n    modifier notPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * modifier to check the admin or owner runs this function\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(isAdmin[msg.sender] || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * fallback function to send the eth back to the sender\r\n     */\r\n    function () payable public {\r\n        // give ETH back\r\n        msg.sender.transfer(msg.value);\r\n    }\r\n\r\n    /**\r\n     * constructor which adds the owner in the admin list\r\n     */\r\n    function Whitelist() public {\r\n        require(addAdmin(msg.sender));\r\n    }\r\n\r\n    /**\r\n     * @param _participant address of participant\r\n     * @return true if the _participant is in the list\r\n     */\r\n    function isParticipant(address _participant) public view returns (bool) {\r\n        require(address(_participant) != 0);\r\n        return isParticipant[_participant];\r\n    }\r\n\r\n    /**\r\n     * @param _participant address of participant\r\n     * @return true if _participant is added successful\r\n     */\r\n    function addParticipant(address _participant) public notPaused onlyAdmin returns (bool) {\r\n        require(address(_participant) != 0);\r\n        require(isParticipant[_participant] == false);\r\n\r\n        isParticipant[_participant] = true;\r\n        participantAmount++;\r\n        AddParticipant(_participant);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param _participant address of participant\r\n     * @return true if _participant is removed successful\r\n     */\r\n    function removeParticipant(address _participant) public onlyAdmin returns (bool) {\r\n        require(address(_participant) != 0);\r\n        require(isParticipant[_participant]);\r\n        require(msg.sender != _participant);\r\n\r\n        delete isParticipant[_participant];\r\n        participantAmount--;\r\n        RemoveParticipant(_participant);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param _admin address of admin\r\n     * @return true if _admin is added successful\r\n     */\r\n    function addAdmin(address _admin) public onlyAdmin returns (bool) {\r\n        require(address(_admin) != 0);\r\n        require(!isAdmin[_admin]);\r\n\r\n        isAdmin[_admin] = true;\r\n        AddAdmin(_admin, now);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param _admin address of admin\r\n     * @return true if _admin is removed successful\r\n     */\r\n    function removeAdmin(address _admin) public onlyAdmin returns (bool) {\r\n        require(address(_admin) != 0);\r\n        require(isAdmin[_admin]);\r\n        require(msg.sender != _admin);\r\n\r\n        delete isAdmin[_admin];\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Pauses the whitelist if there is any issue\r\n     */\r\n    function pauseWhitelist() public onlyAdmin returns (bool) {\r\n        paused = true;\r\n        Paused(msg.sender,now);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice resumes the whitelist if there is any issue\r\n     */    \r\n    function resumeWhitelist() public onlyAdmin returns (bool) {\r\n        paused = false;\r\n        Resumed(msg.sender,now);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice used to save gas\r\n     */ \r\n    function addMultipleParticipants(address[] _participants ) public onlyAdmin returns (bool) {\r\n        \r\n        for ( uint i = 0; i < _participants.length; i++ ) {\r\n            require(addParticipant(_participants[i]));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice used to save gas. Backup function.\r\n     */ \r\n    function addFiveParticipants(address participant1, address participant2, address participant3, address participant4, address participant5) public onlyAdmin returns (bool) {\r\n        require(addParticipant(participant1));\r\n        require(addParticipant(participant2));\r\n        require(addParticipant(participant3));\r\n        require(addParticipant(participant4));\r\n        require(addParticipant(participant5));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice used to save gas. Backup function.\r\n     */ \r\n    function addTenParticipants(address participant1, address participant2, address participant3, address participant4, address participant5,\r\n     address participant6, address participant7, address participant8, address participant9, address participant10) public onlyAdmin returns (bool) \r\n     {\r\n        require(addParticipant(participant1));\r\n        require(addParticipant(participant2));\r\n        require(addParticipant(participant3));\r\n        require(addParticipant(participant4));\r\n        require(addParticipant(participant5));\r\n        require(addParticipant(participant6));\r\n        require(addParticipant(participant7));\r\n        require(addParticipant(participant8));\r\n        require(addParticipant(participant9));\r\n        require(addParticipant(participant10));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice This method can be used by the owner to extract mistakenly sent tokens to this contract.\r\n    * @param _claimtoken The address of the token contract that you want to recover\r\n    * set to 0 in case you want to extract ether.\r\n    */\r\n    function claimTokens(address _claimtoken) onlyAdmin public returns (bool) {\r\n        if (_claimtoken == 0x0) {\r\n            owner.transfer(this.balance);\r\n            return true;\r\n        }\r\n\r\n        ERC20 claimtoken = ERC20(_claimtoken);\r\n        uint balance = claimtoken.balanceOf(this);\r\n        claimtoken.transfer(owner, balance);\r\n        ClaimedTokens(_claimtoken, owner, balance);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Presale\r\n * @dev Presale is a base contract for managing a token presale.\r\n * Presales have a start and end timestamps, where investors can make\r\n * token purchases and the presale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive. Note that the presale contract\r\n * must be owner of the token in order to be able to mint it.\r\n */\r\ncontract Presale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // token being sold\r\n  Identify public token;\r\n  // address of the token being sold\r\n  address public tokenAddress;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are forwarded\r\n  address public wallet;\r\n\r\n  // whitelist contract\r\n  Whitelist public whitelist;\r\n\r\n  // how many token units a buyer gets per ETH\r\n  uint256 public rate = 420000;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;  \r\n  \r\n  // amount of tokens raised\r\n  uint256 public tokenRaised;\r\n\r\n  // parameters for the presale:\r\n  // maximum of wei the presale wants to raise\r\n  uint256 public capWEI;\r\n  // maximum of tokens the presale wants to raise\r\n  uint256 public capTokens;\r\n  // bonus investors get in the presale - 25%\r\n  uint256 public bonusPercentage = 125;\r\n  // minimum amount of wei an investor needs to send in order to get tokens\r\n  uint256 public minimumWEI;\r\n  // maximum amount of wei an investor can send in order to get tokens\r\n  uint256 public maximumWEI;\r\n  // a boolean to check if the presale is paused\r\n  bool public paused = false;\r\n  // a boolean to check if the presale is finalized\r\n  bool public isFinalized = false;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value WEIs paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  \r\n  /**\r\n   * event for claimed tokens logging\r\n   * @param owner where tokens are sent to\r\n   * @param claimtoken is the address of the ERC20 compliant token\r\n   * @param amount amount of tokens sent back\r\n   */\r\n  event ClaimedTokens(address indexed owner, address claimtoken, uint amount);\r\n  \r\n  /**\r\n   * event for pause logging\r\n   * @param owner who invoked the pause function\r\n   * @param timestamp when the pause function is invoked\r\n   */\r\n  event Paused(address indexed owner, uint256 timestamp);\r\n  \r\n  /**\r\n   * event for resume logging\r\n   * @param owner who invoked the resume function\r\n   * @param timestamp when the resume function is invoked\r\n   */\r\n  event Resumed(address indexed owner, uint256 timestamp);\r\n\r\n  /**\r\n   * modifier to check if a participant is in the whitelist\r\n   */\r\n  modifier isInWhitelist(address beneficiary) {\r\n    // first check if sender is in whitelist\r\n    require(whitelist.isParticipant(beneficiary));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * modifier to check if the presale is not paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n  /**\r\n   * modifier to check if the presale is not finalized\r\n   */\r\n  modifier whenNotFinalized() {\r\n    require(!isFinalized);\r\n    _;\r\n  }\r\n  /**\r\n   * modifier to check only multisigwallet can do this operation\r\n   */\r\n  modifier onlyMultisigWallet() {\r\n    require(msg.sender == wallet);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * constructor for Presale\r\n   * @param _startTime start timestamps where investments are allowed (inclusive)\r\n   * @param _wallet address where funds are forwarded\r\n   * @param _token address of the token being sold\r\n   * @param _whitelist whitelist contract address\r\n   * @param _capETH maximum of ETH the presale wants to raise\r\n   * @param _capTokens maximum amount of tokens the presale wants to raise\r\n   * @param _minimumETH minimum amount of ETH an investor needs to send in order to get tokens\r\n   * @param _maximumETH maximum amount of ETH an investor can send in order to get tokens\r\n   */\r\n  function Presale(uint256 _startTime, address _wallet, address _token, address _whitelist, uint256 _capETH, uint256 _capTokens, uint256 _minimumETH, uint256 _maximumETH) public {\r\n  \r\n    require(_startTime >= now);\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n    require(_whitelist != address(0));\r\n    require(_capETH > 0);\r\n    require(_capTokens > 0);\r\n    require(_minimumETH > 0);\r\n    require(_maximumETH > 0);\r\n\r\n    startTime = _startTime;\r\n    endTime = _startTime.add(19 weeks);\r\n    wallet = _wallet;\r\n    tokenAddress = _token;\r\n    token = Identify(_token);\r\n    whitelist = Whitelist(_whitelist);\r\n    capWEI = _capETH * (10 ** uint256(18));\r\n    capTokens = _capTokens * (10 ** uint256(6));\r\n    minimumWEI = _minimumETH * (10 ** uint256(18));\r\n    maximumWEI = _maximumETH * (10 ** uint256(18));\r\n  }\r\n\r\n  /**\r\n   * fallback function can be used to buy tokens\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) isInWhitelist(beneficiary) whenNotPaused whenNotFinalized public payable returns (bool) {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n    require(!hasEnded());\r\n    require(!isContract(msg.sender));\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = getTokenAmount(weiAmount);\r\n    require(tokenRaised.add(tokens) <= capTokens);\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    tokenRaised = tokenRaised.add(tokens);\r\n\r\n    require(token.transferFrom(tokenAddress, beneficiary, tokens));\r\n    \r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @return true if crowdsale event has ended\r\n   */\r\n  function hasEnded() public view returns (bool) {\r\n    bool capReached = weiRaised >= capWEI;\r\n    bool capTokensReached = tokenRaised >= capTokens;\r\n    bool ended = now > endTime;\r\n    return (capReached || capTokensReached) || ended;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * calculate the amount of tokens a participant gets for a specific weiAmount\r\n   * @return the token amount\r\n   */\r\n  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n    // wei has 18 decimals, our token has 6 decimals -> so need for convertion\r\n    uint256 bonusIntegrated = weiAmount.div(1000000000000).mul(rate).mul(bonusPercentage).div(100);\r\n    return bonusIntegrated;\r\n  }\r\n\r\n  /**\r\n   * send ether to the fund collection wallet\r\n   * @return true if successful\r\n   */\r\n  function forwardFunds() internal returns (bool) {\r\n    wallet.transfer(msg.value);\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @return true if the transaction can buy tokens\r\n   */\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    bool underMaximumWEI = msg.value <= maximumWEI;\r\n    bool withinCap = weiRaised.add(msg.value) <= capWEI;\r\n    bool minimumWEIReached;\r\n    // check to fill in last gap\r\n    if ( capWEI.sub(weiRaised) < minimumWEI) {\r\n      minimumWEIReached = true;\r\n    } else {\r\n      minimumWEIReached = msg.value >= minimumWEI;\r\n    }\r\n    return (withinPeriod && nonZeroPurchase) && (withinCap && (minimumWEIReached && underMaximumWEI));\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the multisigwallet to transfer control of the Identify Token to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnershipToken(address newOwner) onlyMultisigWallet public returns (bool) {\r\n    require(token.transferOwnership(newOwner));\r\n    return true;\r\n  }\r\n\r\n   /**\r\n   * Overwrite method of Ownable\r\n   * @dev Allows the multisigwallet to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyMultisigWallet public returns (bool) {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n    OwnershipTransferred(owner, newOwner);\r\n    return true;\r\n  }\r\n\r\n   /**\r\n   * @dev Finalize the presale.\r\n   */  \r\n   function finalize() onlyMultisigWallet whenNotFinalized public returns (bool) {\r\n    require(hasEnded());\r\n\r\n    // check if cap is reached\r\n    if (!(capWEI == weiRaised)) {\r\n      // calculate remaining tokens\r\n      uint256 remainingTokens = capTokens.sub(tokenRaised);\r\n      // burn remaining tokens\r\n      require(token.burn(tokenAddress, remainingTokens));    \r\n    }\r\n    require(token.transferOwnership(wallet));\r\n    isFinalized = true;\r\n    return true;\r\n  }\r\n\r\n  ////////////////////////\r\n  /// SAFETY FUNCTIONS ///\r\n  ////////////////////////\r\n\r\n  /**\r\n   * @dev Internal function to determine if an address is a contract\r\n   * @param _addr The address being queried\r\n   * @return True if `_addr` is a contract\r\n   */\r\n  function isContract(address _addr) constant internal returns (bool) {\r\n    if (_addr == 0) { \r\n      return false; \r\n    }\r\n    uint256 size;\r\n    assembly {\r\n        size := extcodesize(_addr)\r\n     }\r\n    return (size > 0);\r\n  }\r\n\r\n\r\n  /**\r\n   * @notice This method can be used by the owner to extract mistakenly sent tokens to this contract.\r\n   * @param _claimtoken The address of the token contract that you want to recover\r\n   * set to 0 in case you want to extract ether.\r\n   */\r\n  function claimTokens(address _claimtoken) onlyOwner public returns (bool) {\r\n    if (_claimtoken == 0x0) {\r\n      owner.transfer(this.balance);\r\n      return true;\r\n    }\r\n\r\n    ERC20 claimtoken = ERC20(_claimtoken);\r\n    uint balance = claimtoken.balanceOf(this);\r\n    claimtoken.transfer(owner, balance);\r\n    ClaimedTokens(_claimtoken, owner, balance);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Pauses the presale if there is an issue\r\n   */\r\n  function pausePresale() onlyOwner public returns (bool) {\r\n    paused = true;\r\n    Paused(owner, now);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Resumes the presale\r\n   */  \r\n  function resumePresale() onlyOwner public returns (bool) {\r\n    paused = false;\r\n    Resumed(owner, now);\r\n    return true;\r\n  }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"pausePresale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumWEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumePresale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumWEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capWEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_claimtoken\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"address\"},{\"name\":\"_capETH\",\"type\":\"uint256\"},{\"name\":\"_capTokens\",\"type\":\"uint256\"},{\"name\":\"_minimumETH\",\"type\":\"uint256\"},{\"name\":\"_maximumETH\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"claimtoken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Resumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Presale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005afc5580000000000000000000000000b16c2cd8cdb151fe96d182a7dbec49e07b32d88d00000000000000000000000077e85eef9fd34143c7f042ce29e066602ca51abf00000000000000000000000013959d4985f966cf30036f4f03e0a4bf9dd9953300000000000000000000000000000000000000000000000000000000000021f70000000000000000000000000000000000000000000000000000000110185f40000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000064","Library":"","SwarmSource":"bzzr://013bc9270166f8087f5df2de7f7918440ad6a8024d46c88058019c14af697728"}]}