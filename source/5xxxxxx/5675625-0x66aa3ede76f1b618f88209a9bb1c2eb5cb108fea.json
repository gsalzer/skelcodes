{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n/**\r\n * @title SafeMath by OpenZepelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = 0x6eDABCe168c6A63EB528B4fb83A0767d4e40E3B4;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant public returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant public returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title PoSTokenStandard\r\n * @dev the interface of PoSTokenStandard\r\n */\r\ncontract PoSTokenStandard {\r\n    uint256 public stakeStartTime; //when staking start to count\r\n    uint256 public stakeMinAge; //minimum valid staking time\r\n    uint256 public stakeMaxAge; //maximum valid staking time\r\n    function mint() public returns (bool);\r\n    function coinAge() constant public returns (uint256);\r\n    function annualInterest() constant public returns (uint256);\r\n    event Mint(address indexed _address, uint _reward);\r\n}\r\n\r\n\r\ncontract PallyNetwork is ERC20,PoSTokenStandard,Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"PallyNetwork\";\r\n    string public symbol = \"Pally\";\r\n    uint public decimals = 4;\r\n\r\n    uint public chainStartTime; //chain start time\r\n    uint public stakeStartTime; //stake start time\r\n    uint public stakeMinAge = 3 days; // minimum age for coin age: 3 Days\r\n    uint public stakeMaxAge = 30 days; // stake age of full weight: 30 Days\r\n    uint public baseIntCalc = 10**uint256(decimals - 1); // default 10% annual interest\r\n\r\n    uint public totalSupply; //actual supply\r\n    uint public maxTotalSupply; //maximum supply ever \r\n    uint public totalInitialSupply; //initial supply on deployment\r\n\r\n    //struct to define stake stacks\r\n    struct transferInStruct{\r\n    uint128 amount;\r\n    uint64 time;\r\n    }\r\n\r\n    //HardCodedAddresses\r\n    address GamificationRewards = 0x62874D9863626684ab0c7e8Bd8a977680304771D;\r\n    address AirdropDistribution = 0xCb58865a7DDf4B70354D689d640102F029C05b1f;\r\n    address BlockchainDev = 0xC493640aE532F41E1c3188985913eD3Ca8d31Fb9;\r\n    address MarketingAllocation = 0x609CBCa5674a1Ac2B8aA44214Cd6A4A8256Fd27f;\r\n    address BountyPayments = 0x1d0585571518F705E4fB12fc5C01659b6eDf71E6;\r\n    address PallyFoundation = 0x70F580B083D67949854A3A5cE1D6941504542AA8;\r\n    address TeamSalaries = 0x840Bf950be68260fcAa127111787f98c02a4d329;\r\n    //Mappings\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    mapping(address => transferInStruct[]) transferIns; //mapping to stake stacks\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n\r\n    //modifier to limit the minting to not exceed maximum supply limit\r\n    modifier canPoSMint() {\r\n        require(totalSupply < maxTotalSupply);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n\r\n        uint64 _now = uint64(now);\r\n        \r\n        maxTotalSupply = 7073844 * 10 ** uint256(decimals); // 7.073.844 maximum supply\r\n        totalInitialSupply = 300000 * 10 ** uint256(decimals); // 300k initial supply\r\n        totalSupply = totalInitialSupply;\r\n\r\n        chainStartTime = now; //when contract is deployed\r\n        stakeStartTime = now;\r\n        \r\n        balances[GamificationRewards] = 200000 * 10 ** uint256(decimals);//200k        \r\n        transferIns[GamificationRewards].push(transferInStruct(uint128(balances[GamificationRewards]),_now));\r\n\r\n        balances[AirdropDistribution] = 60000 * 10 ** uint256(decimals); //60k\r\n        transferIns[AirdropDistribution].push(transferInStruct(uint128(balances[AirdropDistribution]),_now));\r\n\r\n        balances[BlockchainDev] =  10000 * 10 ** uint256(decimals);//10k\r\n        transferIns[BlockchainDev].push(transferInStruct(uint128(balances[BlockchainDev]),_now));\r\n\r\n        balances[MarketingAllocation] =  10000 * 10 ** uint256(decimals);//10k\r\n        transferIns[MarketingAllocation].push(transferInStruct(uint128(balances[MarketingAllocation]),_now));\r\n\r\n        balances[BountyPayments] =  5000 * 10 ** uint256(decimals);//5k\r\n        transferIns[BountyPayments].push(transferInStruct(uint128(balances[BountyPayments]),_now));\r\n\r\n        balances[PallyFoundation] =  5000 * 10 ** uint256(decimals);//5k\r\n        transferIns[PallyFoundation].push(transferInStruct(uint128(balances[PallyFoundation]),_now));\r\n\r\n        balances[TeamSalaries] =  10000 * 10 ** uint256(decimals);//10k\r\n        transferIns[TeamSalaries].push(transferInStruct(uint128(balances[TeamSalaries]),_now));\r\n\r\n        //initial logs\r\n        emit Transfer(address(0), GamificationRewards, balances[GamificationRewards]);\r\n        emit Transfer(address(0), AirdropDistribution, balances[AirdropDistribution]);\r\n        emit Transfer(address(0), BlockchainDev, balances[BlockchainDev]);\r\n        emit Transfer(address(0), MarketingAllocation, balances[MarketingAllocation]); \r\n        emit Transfer(address(0), BountyPayments, balances[BountyPayments]);\r\n        emit Transfer(address(0), PallyFoundation, balances[PallyFoundation]);\r\n        emit Transfer(address(0), TeamSalaries, balances[TeamSalaries]);\r\n            }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n\r\n        if(msg.sender == _to || _to == address(0)) return mint(); //if self/zero transfer, trigger stake claim\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        //if there is any stake on stack, delete the stack\r\n        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\r\n        //take actual time\r\n        uint64 _now = uint64(now);\r\n        //reset counter for sender\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\r\n        //add counter to stack for receiver\r\n        transferIns[_to].push(transferInStruct(uint128(_value),_now));\r\n        \r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0)); //empty/zero address send is not allowed\r\n        //check\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        //if there is any stake on stack, delete the stack\r\n        if(transferIns[_from].length > 0) delete transferIns[_from];\r\n        //take actual time\r\n        uint64 _now = uint64(now);\r\n        //reset counter for sender\r\n        transferIns[_from].push(transferInStruct(uint128(balances[_from]),_now));\r\n         //add counter to stack for receiver\r\n        transferIns[_to].push(transferInStruct(uint128(_value),_now));\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    //funtion to claim stake reward\r\n    function mint() canPoSMint public returns (bool) {        \r\n        if(balances[msg.sender] <= 0) return false;//no balance = no stake\r\n        if(transferIns[msg.sender].length <= 0) return false;//no stake = no reward\r\n\r\n        uint reward = getProofOfStakeReward(msg.sender);\r\n\r\n        if(reward <= 0) return false;\r\n\r\n        totalSupply = totalSupply.add(reward); //supply is increased\r\n        balances[msg.sender] = balances[msg.sender].add(reward); //assigned to holder\r\n        delete transferIns[msg.sender]; //stake stack get reset\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\r\n        //Logs\r\n        emit Mint(msg.sender, reward);\r\n        return true;\r\n    }\r\n\r\n    function coinAge() constant public returns (uint myCoinAge) {\r\n        return myCoinAge = getCoinAge(msg.sender,now);\r\n    }\r\n\r\n    function annualInterest() constant public returns(uint interest) {\r\n        uint _now = now;\r\n        interest = 0; // After 10 years no PoS\r\n        // Due to the high interest rate for the first two years, compounding should be taken into account.\r\n        // Effective annual interest rate = (1 + (nominal rate / number of compounding periods)) ^ (number of compounding periods) - 1\r\n        if((_now.sub(stakeStartTime)).div(1 years) == 0) {\r\n            // 1st year effective annual interest rate is 900% when we select the stakeMaxAge (30 days) as the compounding period.\r\n            interest = (2573 * baseIntCalc).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(1 years) <= 10){\r\n            // 2nd to 10th year effective annual interest rate is 10%\r\n            interest = (97 * baseIntCalc).div(100);\r\n        }\r\n    }\r\n\r\n    function getProofOfStakeReward(address _address) public view returns (uint) {\r\n        require( (now >= stakeStartTime) && (stakeStartTime > 0) );\r\n\r\n        uint _now = now;\r\n        uint _coinAge = getCoinAge(_address, _now);\r\n        if(_coinAge == 0) return 0;\r\n\r\n        uint interest = 0; // After 10 years no PoS\r\n        // Due to the high interest rate for the first two years, compounding should be taken into account.\r\n        // Effective annual interest rate = (1 + (nominal rate / number of compounding periods)) ^ (number of compounding periods) - 1\r\n        if((_now.sub(stakeStartTime)).div(1 years) == 0) {\r\n            // 1st year effective annual interest rate is 900% when we select the stakeMaxAge (30 days) as the compounding period.\r\n            interest = (2573 * baseIntCalc).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(1 years) <= 10){\r\n            // 2nd to 10th year effective annual interest rate is 10%\r\n            interest = (97 * baseIntCalc).div(100);\r\n        }\r\n\r\n        return (_coinAge * interest).div(365 * (10**uint256(decimals)));\r\n    }\r\n\r\n    function getCoinAge(address _address, uint _now) internal view returns (uint _coinAge) {\r\n        if(transferIns[_address].length <= 0) return 0;\r\n\r\n        for (uint i = 0; i < transferIns[_address].length; i++){\r\n            if( _now < uint(transferIns[_address][i].time).add(stakeMinAge) ) continue;\r\n\r\n            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\r\n            if( nCoinSeconds > stakeMaxAge ) nCoinSeconds = stakeMaxAge;\r\n\r\n            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\r\n        }\r\n    }\r\n\r\n    function ownerBurnToken(uint _value) onlyOwner public {\r\n        require(_value > 0);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        delete transferIns[msg.sender];\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\r\n\r\n        totalSupply = totalSupply.sub(_value);\r\n\r\n        emit Burn(msg.sender, _value);\r\n    }\r\n\r\n    /* Batch token transfer. Used by contract creator to distribute initial tokens to holders */\r\n    function batchTransfer(address[] _recipients, uint[] _values) onlyOwner public returns (bool) {\r\n        require( _recipients.length > 0 && _recipients.length == _values.length);\r\n\r\n        uint total = 0;\r\n        for(uint i = 0; i < _values.length; i++){\r\n            total = total.add(_values[i]);\r\n        }\r\n        require(total <= balances[msg.sender]);\r\n\r\n        uint64 _now = uint64(now);\r\n        for(uint j = 0; j < _recipients.length; j++){\r\n            balances[_recipients[j]] = balances[_recipients[j]].add(_values[j]);\r\n            transferIns[_recipients[j]].push(transferInStruct(uint128(_values[j]),_now));\r\n            emit Transfer(msg.sender, _recipients[j], _values[j]);\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(total);\r\n        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\r\n        if(balances[msg.sender] > 0) transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getProofOfStakeReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinAge\",\"outputs\":[{\"name\":\"myCoinAge\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseIntCalc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerBurnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInitialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"annualInterest\",\"outputs\":[{\"name\":\"interest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMinAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMaxAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PallyNetwork","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6919a8a1eddc2d21935f216ae60a2be299d1597ee456818d67652d42ca472f62"}]}