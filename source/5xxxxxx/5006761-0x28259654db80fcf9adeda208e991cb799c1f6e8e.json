{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath { //standart library for uint\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0 || b == 0){\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable { //standart contract to identify owner\r\n\r\n  address public owner;\r\n\r\n  address public newOwner;\r\n\r\n  address public techSupport;\r\n\r\n  address public newTechSupport;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier onlyTechSupport() {\r\n    require(msg.sender == techSupport);\r\n    _;\r\n  }\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() public {\r\n    if (msg.sender == newOwner) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n  function transferTechSupport (address _newSupport) public{\r\n    require (msg.sender == owner || msg.sender == techSupport);\r\n    newTechSupport = _newSupport;\r\n  }\r\n\r\n  function acceptSupport() public{\r\n    if(msg.sender == newTechSupport){\r\n      techSupport = newTechSupport;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract CQTToken is Ownable { //ERC - 20 token contract\r\n  using SafeMath for uint;\r\n  // Triggered when tokens are transferred.\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  string public constant symbol = \"CQT\";\r\n  string public constant name = \"Checqit\";\r\n  uint8 public constant decimals = 8;\r\n  uint256 _totalSupply = 1000000000*pow(10,decimals);\r\n\r\n  // Owner of this contract\r\n  address public owner;\r\n\r\n  // Balances for each account\r\n  mapping(address => uint256) balances;\r\n\r\n  // Owner of account approves the transfer of an amount to another account\r\n  mapping(address => mapping (address => uint256)) allowed;\r\n\r\n  function pow(uint256 a, uint256 b) internal pure returns (uint256){ //power function\r\n    return (a**b);\r\n  }\r\n\r\n  function totalSupply() public constant returns (uint256) { //standart ERC-20 function\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address _address) public constant returns (uint256 balance) {//standart ERC-20 function\r\n    return balances[_address];\r\n  }\r\n\r\n  //standart ERC-20 function\r\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n    require(this != _to);\r\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Transfer(msg.sender,_to,_amount);\r\n    return true;\r\n  }\r\n  \r\n  address public crowdsaleContract;\r\n\r\n  bool flag = false;\r\n  //connect to crowdsaleContract, can be use once\r\n  function setCrowdsaleContract (address _address) public{\r\n    require (!flag);\r\n    crowdsaleContract = _address;\r\n    flag = true;\r\n  }\r\n\r\n  //standart ERC-20 function\r\n  function transferFrom( \r\n    address _from,\r\n    address _to,\r\n    uint256 _amount\r\n    )public returns (bool success) {\r\n      require(this != _to);\r\n\r\n      if (balances[_from] >= _amount\r\n       && allowed[_from][msg.sender] >= _amount\r\n       && _amount > 0\r\n       && balances[_to] + _amount > balances[_to]) {\r\n       balances[_from] -= _amount;\r\n       allowed[_from][msg.sender] -= _amount;\r\n       balances[_to] += _amount;\r\n       Transfer(_from, _to, _amount);\r\n    return true;\r\n    } else {\r\n    return false;\r\n    }\r\n  }\r\n  //standart ERC-20 function\r\n  function approve(address _spender, uint256 _amount)public returns (bool success) { \r\n    allowed[msg.sender][_spender] = _amount;\r\n    Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  //standart ERC-20 function\r\n  function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  //Constructor\r\n  function CQTToken(address _owner) public {\r\n    techSupport = msg.sender;\r\n    //testParameter\r\n    // techSupport = 0x8C0F5211A006bB28D4c694dC76632901664230f9;\r\n\r\n    owner = _owner;\r\n    \r\n    balances[this] = _totalSupply;\r\n\r\n    teamBalanceMap[_owner] = true;\r\n    futureExpanstionMap[_owner] = true;\r\n    bountyProgramMap[_owner] = true;\r\n  }\r\n\r\n  //make investor balance = 0\r\n  function burnTokens(address _address) public{\r\n    require(msg.sender == crowdsaleContract);\r\n    Transfer(_address,0,balances[_address]);\r\n    balances[_address] = 0;\r\n  }\r\n\r\n  //burn some tokens in this contract\r\n  function burnSomeTokens(uint _value) public{\r\n    require (msg.sender == crowdsaleContract);\r\n    balances[this] = balances[this].sub(_value);\r\n    Transfer(this,0,_value);\r\n  }\r\n\r\n  // only crowdsaleContract can use this balance \r\n  uint private crowdsaleTokens = (uint)(610000000).mul(pow(10,decimals));\r\n\r\n  function getCrowdsaleTokens() public view returns(uint) {\r\n    return crowdsaleTokens;\r\n  }\r\n  \r\n  // balances for owner's team\r\n  uint public teamBalance = (uint)(250000000).mul(pow(10,decimals));\r\n  uint public futureExpanstion = (uint)(130000000).mul(pow(10,decimals));\r\n  uint public bountyProgram = (uint)(10000000).mul(pow(10,decimals));\r\n\r\n  mapping (address => bool) public teamBalanceMap;\r\n  mapping (address => bool) public futureExpanstionMap;\r\n  mapping (address => bool) public bountyProgramMap;\r\n\r\n  function addInTeamBalanceMap (address _address) public onlyOwner {\r\n    require(!teamBalanceMap[_address]);\r\n    teamBalanceMap[_address] = true;\r\n  }\r\n\r\n  function removeFromTeamBalanceMap (address _address) public onlyOwner {\r\n    require(teamBalanceMap[_address]);\r\n    teamBalanceMap[_address] = false;\r\n  }\r\n  \r\n  function addInFutureExpanstionMap (address _address) public onlyOwner {\r\n    require(!futureExpanstionMap[_address]);\r\n    futureExpanstionMap[_address] = true;\r\n  }\r\n  \r\n  function removeFromFutureExpanstionMap (address _address) public onlyOwner {\r\n    require(futureExpanstionMap[_address]);\r\n    futureExpanstionMap[_address] = false;\r\n  }\r\n\r\n  function addInBountyProgramMap (address _address) public onlyOwner {\r\n    require(!bountyProgramMap[_address]);\r\n    bountyProgramMap[_address] = true;\r\n  }\r\n  \r\n  function removeFromBountyProgramMap (address _address) public onlyOwner {\r\n    require(bountyProgramMap[_address]);\r\n    bountyProgramMap[_address] = false;\r\n  }\r\n  \r\n  function sendTeamBalance (address _address, uint _value) public {\r\n    require(teamBalanceMap[msg.sender]);\r\n    teamBalance = teamBalance.sub(_value);\r\n    balances[this] = balances[this].sub(_value);\r\n    balances[_address] = balances[_address].add(_value);\r\n    Transfer(this,_address,_value);\r\n  }\r\n\r\n  function sendFutureExpanstionBalance (address _address, uint _value) public {\r\n    require(futureExpanstionMap[msg.sender]);\r\n    futureExpanstion = futureExpanstion.sub(_value);\r\n    balances[this] = balances[this].sub(_value);\r\n    balances[_address] = balances[_address].add(_value);\r\n    Transfer(this,_address,_value);\r\n  }  \r\n\r\n  function sendBountyProgramBalance (address _address, uint _value) public {\r\n    require(bountyProgramMap[msg.sender]);\r\n    bountyProgram = bountyProgram.sub(_value);\r\n    balances[this] = balances[this].sub(_value);\r\n    balances[_address] = balances[_address].add(_value);\r\n    Transfer(this,_address,_value);\r\n  }        \r\n\r\n  //crowdsale function\r\n  function sendCrowdsaleTokens(address _address, uint256 _value)  public { \r\n    require (msg.sender == crowdsaleContract);\r\n    crowdsaleTokens = crowdsaleTokens.sub(_value);\r\n    balances[this] = balances[this].sub(_value);\r\n    balances[_address] = balances[_address].add(_value);\r\n    Transfer(this, _address, _value);\r\n  } \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendBountyProgramBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSupport\",\"type\":\"address\"}],\"name\":\"transferTechSupport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addInBountyProgramMap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamBalanceMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnSomeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCrowdsaleContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCrowdsaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendTeamBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromFutureExpanstionMap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptSupport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addInTeamBalanceMap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendCrowdsaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromBountyProgramMap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromTeamBalanceMap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bountyProgramMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addInFutureExpanstionMap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"futureExpanstionMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyProgram\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"futureExpanstion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendFutureExpanstionBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"techSupport\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newTechSupport\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CQTToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001aa749fa7ebf70c77b65c82e09f52ddb7b4d3c90","Library":"","SwarmSource":"bzzr://0b2edde6c0a20e6a15aa34d53c1ee5c8260dff20cfafd85f29db5c0ff94fe7c9"}]}