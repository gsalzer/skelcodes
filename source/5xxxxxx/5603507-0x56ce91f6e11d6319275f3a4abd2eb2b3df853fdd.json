{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract Token {\r\n    string internal _symbol;\r\n    string internal _name;\r\n    uint8 internal _decimals;\r\n    uint internal _totalSupply;\r\n    mapping (address => uint) internal _balanceOf;\r\n    mapping (address => mapping (address => uint)) internal _allowances;\r\n   \r\n    function Token(string symbol, string name, uint8 decimals, uint totalSupply) public {\r\n        _symbol = symbol;\r\n        _name = name;\r\n        _decimals = decimals;\r\n        _totalSupply = totalSupply;\r\n    }\r\n   \r\n    function name() public constant returns (string) {\r\n        return _name;\r\n    }\r\n   \r\n    function symbol() public constant returns (string) {\r\n        return _symbol;\r\n    }\r\n   \r\n    function decimals() public constant returns (uint8) {\r\n        return _decimals;\r\n    }\r\n   \r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n   \r\n    function balanceOf(address _addr) public constant returns (uint);\r\n    function transfer(address _to, uint _value) public returns (bool);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n}\r\n\r\ninterface ERC20 {\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool);\r\n    function approve(address _spender, uint _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external constant returns (uint);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\npragma solidity ^0.4.19;\r\n\r\ninterface ERC223 {\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\ncontract ERC223ReceivingContract {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\npragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n   function isOwner(address _address) internal view returns (bool) {\r\n        return (_address == owner);\r\n    }\r\n   \r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n// create a Flix token with a supply of 100 million\r\n// using the ERC223 protocol\r\ncontract FlixToken is Ownable,Token(\"FLIX\", \"FLIX Token\", 18, 0), ERC20, ERC223 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint;\r\n\r\n    address owner;\r\n\r\n    bool airdrop_funded = false;\r\n    bool crowdsale_funded = false;\r\n    bool bounty_campaign_funded = false;\r\n    bool vest_funded = false;\r\n    bool reserve_funded = false;\r\n\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n   \r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function FlixToken() public {\r\n        owner = msg.sender;\r\n        _balanceOf[owner] = 0;\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _addr) public constant returns (uint) {\r\n        return _balanceOf[_addr];\r\n    }\r\n\r\n\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= _balanceOf[msg.sender]);\r\n   \r\n    bytes memory empty;\r\n\r\n    _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\r\n    _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n   \r\n    emit Transfer(msg.sender, _to, _value);\r\n   \r\n    if(isContract(_to)){\r\n        ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\r\n        _contract.tokenFallback(msg.sender, _value, empty);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n   function transfer(address _to, uint _value, bytes _data) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n        require(_value <= _balanceOf[msg.sender]);\r\n       \r\n        _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\r\n        _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        if(isContract(_to)){\r\n            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\r\n            _contract.tokenFallback(msg.sender, _value, _data);\r\n        }        \r\n        return true;\r\n    }\r\n   \r\n\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint codeSize;\r\n        assembly {\r\n            codeSize := extcodesize(_addr)\r\n        }\r\n        return codeSize > 0;\r\n    }\r\n   \r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= _balanceOf[_from]);\r\n        require(_value <= _allowances[_from][msg.sender]);\r\n\r\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n    _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n    _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n    function approve(address _spender, uint _value) external returns (bool) {\r\n        _allowances[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external constant returns (uint) {\r\n        return _allowances[_owner][_spender];\r\n    }\r\n \r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value,address _who) onlyOwner public {\r\n    require((now <= 1526637600));      \r\n    _burn(_who, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require((now <= 1526637600));\r\n    require(_value <= _balanceOf[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    _balanceOf[_who] = _balanceOf[_who].sub(_value);\r\n    _totalSupply = _totalSupply.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n \r\nfunction mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n    require((now <= 1526637600));\r\n    _totalSupply = _totalSupply.add(_amount);\r\n    _balanceOf[_to] = _balanceOf[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * Mint tokens and allocate to wallet\r\n     Reversible until presale launch\r\n   *\r\n   */\r\n  function mintToContract(bytes32 mintType,address _to) onlyOwner public returns (bool) {\r\n    require((now <= 1526635600));\r\n    require((mintType == \"Crowdsale\") || (mintType == \"Airdrop\") || (mintType == \"BountyCampaign\") || (mintType ==\"Vesting\") || (mintType ==\"Reserved\"));\r\n    uint256 amount = 0;\r\n    if(mintType == \"Crowdsale\"){\r\n        require(!crowdsale_funded);\r\n        amount = 59000000000000000000000000;\r\n        crowdsale_funded = true;\r\n    }\r\n     if(mintType == \"BountyCampaign\"){\r\n        require(!bounty_campaign_funded);\r\n        amount = 2834000000000000000000000;\r\n        bounty_campaign_funded = true;\r\n\r\n    }\r\n    if(mintType == \"Vesting\"){\r\n        require(!vest_funded);\r\n        amount = 18000000000000000000000000;\r\n        vest_funded = true;\r\n    }\r\n    if(mintType == \"Reserved\"){\r\n        require(!reserve_funded);\r\n        amount = 20000000000000000000000000;\r\n        reserve_funded = true;\r\n    }\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balanceOf[_to] = _balanceOf[_to].add(amount);\r\n    emit Mint(_to, amount);\r\n    emit Transfer(address(0), _to, amount);\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mintType\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintToContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FlixToken","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://84372298a0ceb53f191247245f7fec330974a064d663c5098359975223c49d85"}]}