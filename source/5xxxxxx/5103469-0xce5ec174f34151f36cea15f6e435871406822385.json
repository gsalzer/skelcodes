{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\ncontract PharmCoin\r\n{\r\n \r\n /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n   function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n    //using SafeMath for uint256;\r\n    \r\n    uint public _totalSupply = 2000000000.0;\r\n    \r\n    string public constant symbol = \"PHCX\";\r\n    string public constant name = \"PharmCoin\";\r\n    \r\n    //How many decimal places token can be split up into\r\n    uint public constant decimals = 18;\r\n\r\n    //1 ether = 200 PharmCoinTokens\r\n    uint256 public RATE = 200; \r\n\r\n    address public owner;\r\n\r\n \r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256) ) allowed;\r\n\r\n \r\n    function () public payable{\r\n        createTokens();\r\n   }\r\n    \r\n    function PharmCoin() public\r\n    {\r\n     owner = msg.sender;  \r\n     //uint256 initForPreSale =  mul(_totalSupply, RATE); \r\n     balances[owner] = _totalSupply;\r\n    }\r\n    \r\n    function createTokens() public payable{\r\n   \r\n      //Workout tokens to recieve based on rate set\r\n      uint256 tokensToSend =  mul(msg.value, RATE); \r\n\r\n      //Subtract amount from contract \r\n      //balances[owner] = sub(balances[owner], tokensToSend); \r\n      //Add tokens to buyer\r\n      balances[msg.sender] = add(balances[msg.sender], tokensToSend ); \r\n      owner.transfer(msg.value);\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256 totalSupply){\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public constant returns (uint256 balance){\r\n        return balances[_owner];\r\n    }\r\n\t\r\n    //allow user to transfer pharmcoin tokens\r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n    require\r\n    (\r\n        balances[msg.sender] >= _value\r\n        && _value > 0 && _to != address(0)\r\n    );\r\n    balances[msg.sender] = sub(balances[msg.sender] , _value); \r\n    balances[_to] = add(balances[_to], _value); \r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n    }\r\n    \r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n    require(allowed[_from][msg.sender] >= _value\r\n           && balances[_from] >= _value\r\n           && _value > 0 && _to != address(0) );\r\n    balances[_from] =  sub(balances[_from], _value);\r\n    balances[_to] =  add (balances[_to], (_value) );\r\n    allowed[_from][msg.sender] = sub(allowed[_from][msg.sender] , _value );\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n    }\r\n\r\n    //Check user is allowed to spend amount\r\n    function approve(address _spender, uint256 _value) public returns (bool success){\r\n    allowed[msg.sender][_spender] = _value;\r\n    //Log Approval\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining){\r\n    return allowed[_owner][_spender];\r\n    }\r\n\r\n    function setRate(uint256 rate) external returns (bool success)\r\n    {\r\n        require(rate > 0);\r\n        RATE = rate; \r\n        return true;\r\n    }\r\n\r\n    function setSupply(uint256 supply) external returns (bool success)\r\n    {\r\n         //Check value to buy > 0\r\n         require(supply > 0);\r\n        _totalSupply = supply; \r\n        return true;\r\n    }\r\n\r\n  \r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"setSupply\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PharmCoin","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b2bce51bfcacf0c9cdc4e7bef540e4cec825f9cecf83f50cbc7fe22089ef0b52"}]}