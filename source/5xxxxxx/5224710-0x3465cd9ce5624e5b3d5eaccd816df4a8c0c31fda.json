{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract SkinBase is Pausable {\r\n\r\n    struct Skin {\r\n        uint128 appearance;\r\n        uint64 cooldownEndTime;\r\n        uint64 mixingWithId;\r\n    }\r\n\r\n    // All skins, mapping from skin id to skin apprance\r\n    mapping (uint256 => Skin) skins;\r\n\r\n    // Mapping from skin id to owner\r\n    mapping (uint256 => address) public skinIdToOwner;\r\n\r\n    // Whether a skin is on sale\r\n    mapping (uint256 => bool) public isOnSale;\r\n\r\n    // Number of all total valid skins\r\n    // skinId 0 should not correspond to any skin, because skin.mixingWithId==0 indicates not mixing\r\n    uint256 public nextSkinId = 1;  \r\n\r\n    // Number of skins an account owns\r\n    mapping (address => uint256) public numSkinOfAccounts;\r\n\r\n    // // Give some skins to init account for unit tests\r\n    // function SkinBase() public {\r\n    //     address account0 = 0x627306090abaB3A6e1400e9345bC60c78a8BEf57;\r\n    //     address account1 = 0xf17f52151EbEF6C7334FAD080c5704D77216b732;\r\n\r\n    //     // Create simple skins\r\n    //     Skin memory skin = Skin({appearance: 0, cooldownEndTime:0, mixingWithId: 0});\r\n    //     for (uint256 i = 1; i <= 15; i++) {\r\n    //         if (i < 10) {\r\n    //             skin.appearance = uint128(i);\r\n    //             if (i < 7) { \r\n    //                 skinIdToOwner[i] = account0;\r\n    //                 numSkinOfAccounts[account0] += 1;\r\n    //             } else {  \r\n    //                 skinIdToOwner[i] = account1;\r\n    //                 numSkinOfAccounts[account1] += 1;\r\n    //             }\r\n    //         } else {  \r\n    //             skin.appearance = uint128(block.blockhash(block.number - i + 9));\r\n    //             skinIdToOwner[i] = account1;\r\n    //             numSkinOfAccounts[account1] += 1;\r\n    //         }\r\n    //         skins[i] = skin;\r\n    //         isOnSale[i] = false;\r\n    //         nextSkinId += 1;\r\n    //     }\r\n    // } \r\n\r\n    // Get the i-th skin an account owns, for off-chain usage only\r\n    function skinOfAccountById(address account, uint256 id) external view returns (uint256) {\r\n       uint256 count = 0;\r\n       uint256 numSkinOfAccount = numSkinOfAccounts[account];\r\n       require(numSkinOfAccount > 0);\r\n       require(id < numSkinOfAccount);\r\n       for (uint256 i = 1; i < nextSkinId; i++) {\r\n           if (skinIdToOwner[i] == account) {\r\n               // This skin belongs to current account\r\n               if (count == id) {\r\n                   // This is the id-th skin of current account, a.k.a, what we need\r\n                    return i;\r\n               } \r\n               count++;\r\n           }\r\n        }\r\n        revert();\r\n    }\r\n\r\n    // Get skin by id\r\n    function getSkin(uint256 id) public view returns (uint128, uint64, uint64) {\r\n        require(id > 0);\r\n        require(id < nextSkinId);\r\n        Skin storage skin = skins[id];\r\n        return (skin.appearance, skin.cooldownEndTime, skin.mixingWithId);\r\n    }\r\n\r\n    function withdrawETH() external onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n}\r\ncontract MixFormulaInterface {\r\n    function calcNewSkinAppearance(uint128 x, uint128 y) public pure returns (uint128);\r\n\r\n    // create random appearance\r\n    function randomSkinAppearance() public view returns (uint128);\r\n\r\n    // bleach\r\n    function bleachAppearance(uint128 appearance, uint128 attributes) public pure returns (uint128);\r\n}\r\ncontract SkinMix is SkinBase {\r\n\r\n    // Mix formula\r\n    MixFormulaInterface public mixFormula;\r\n\r\n\r\n    // Pre-paid ether for synthesization, will be returned to user if the synthesization failed (minus gas).\r\n    uint256 public prePaidFee = 1000000 * 3000000000; // (1million gas * 3 gwei)\r\n\r\n    // Events\r\n    event MixStart(address account, uint256 skinAId, uint256 skinBId);\r\n    event AutoMix(address account, uint256 skinAId, uint256 skinBId, uint64 cooldownEndTime);\r\n    event MixSuccess(address account, uint256 skinId, uint256 skinAId, uint256 skinBId);\r\n\r\n    // Set mix formula contract address \r\n    function setMixFormulaAddress(address mixFormulaAddress) external onlyOwner {\r\n        mixFormula = MixFormulaInterface(mixFormulaAddress);\r\n    }\r\n\r\n    // setPrePaidFee: set advance amount, only owner can call this\r\n    function setPrePaidFee(uint256 newPrePaidFee) external onlyOwner {\r\n        prePaidFee = newPrePaidFee;\r\n    }\r\n\r\n    // _isCooldownReady: check whether cooldown period has been passed\r\n    function _isCooldownReady(uint256 skinAId, uint256 skinBId) private view returns (bool) {\r\n        return (skins[skinAId].cooldownEndTime <= uint64(now)) && (skins[skinBId].cooldownEndTime <= uint64(now));\r\n    }\r\n\r\n    // _isNotMixing: check whether two skins are in another mixing process\r\n    function _isNotMixing(uint256 skinAId, uint256 skinBId) private view returns (bool) {\r\n        return (skins[skinAId].mixingWithId == 0) && (skins[skinBId].mixingWithId == 0);\r\n    }\r\n\r\n    // _setCooldownTime: set new cooldown time\r\n    function _setCooldownEndTime(uint256 skinAId, uint256 skinBId) private {\r\n        uint256 end = now + 5 minutes;\r\n        // uint256 end = now;\r\n        skins[skinAId].cooldownEndTime = uint64(end);\r\n        skins[skinBId].cooldownEndTime = uint64(end);\r\n    }\r\n\r\n    // _isValidSkin: whether an account can mix using these skins\r\n    // Make sure two things:\r\n    // 1. these two skins do exist\r\n    // 2. this account owns these skins\r\n    function _isValidSkin(address account, uint256 skinAId, uint256 skinBId) private view returns (bool) {\r\n        // Make sure those two skins belongs to this account\r\n        if (skinAId == skinBId) {\r\n            return false;\r\n        }\r\n        if ((skinAId == 0) || (skinBId == 0)) {\r\n            return false;\r\n        }\r\n        if ((skinAId >= nextSkinId) || (skinBId >= nextSkinId)) {\r\n            return false;\r\n        }\r\n        return (skinIdToOwner[skinAId] == account) && (skinIdToOwner[skinBId] == account);\r\n    }\r\n\r\n    // _isNotOnSale: whether a skin is not on sale\r\n    function _isNotOnSale(uint256 skinId) private view returns (bool) {\r\n        return (isOnSale[skinId] == false);\r\n    }\r\n\r\n    // mix  \r\n    function mix(uint256 skinAId, uint256 skinBId) public whenNotPaused {\r\n\r\n        // Check whether skins are valid\r\n        require(_isValidSkin(msg.sender, skinAId, skinBId));\r\n\r\n        // Check whether skins are neither on sale\r\n        require(_isNotOnSale(skinAId) && _isNotOnSale(skinBId));\r\n\r\n        // Check cooldown\r\n        require(_isCooldownReady(skinAId, skinBId));\r\n\r\n        // Check these skins are not in another process\r\n        require(_isNotMixing(skinAId, skinBId));\r\n\r\n        // Set new cooldown time\r\n        _setCooldownEndTime(skinAId, skinBId);\r\n\r\n        // Mark skins as in mixing\r\n        skins[skinAId].mixingWithId = uint64(skinBId);\r\n        skins[skinBId].mixingWithId = uint64(skinAId);\r\n\r\n        // Emit MixStart event\r\n        MixStart(msg.sender, skinAId, skinBId);\r\n    }\r\n\r\n    // Mixing auto\r\n    function mixAuto(uint256 skinAId, uint256 skinBId) public payable whenNotPaused {\r\n        require(msg.value >= prePaidFee);\r\n\r\n        mix(skinAId, skinBId);\r\n\r\n        Skin storage skin = skins[skinAId];\r\n\r\n        AutoMix(msg.sender, skinAId, skinBId, skin.cooldownEndTime);\r\n    }\r\n\r\n    // Get mixing result, return the resulted skin id\r\n    function getMixingResult(uint256 skinAId, uint256 skinBId) public whenNotPaused {\r\n        // Check these two skins belongs to the same account\r\n        address account = skinIdToOwner[skinAId];\r\n        require(account == skinIdToOwner[skinBId]);\r\n\r\n        // Check these two skins are in the same mixing process\r\n        Skin storage skinA = skins[skinAId];\r\n        Skin storage skinB = skins[skinBId];\r\n        require(skinA.mixingWithId == uint64(skinBId));\r\n        require(skinB.mixingWithId == uint64(skinAId));\r\n\r\n        // Check cooldown\r\n        require(_isCooldownReady(skinAId, skinBId));\r\n\r\n        // Create new skin\r\n        uint128 newSkinAppearance = mixFormula.calcNewSkinAppearance(skinA.appearance, skinB.appearance);\r\n        Skin memory newSkin = Skin({appearance: newSkinAppearance, cooldownEndTime: uint64(now), mixingWithId: 0});\r\n        skins[nextSkinId] = newSkin;\r\n        skinIdToOwner[nextSkinId] = account;\r\n        isOnSale[nextSkinId] = false;\r\n        nextSkinId++;\r\n\r\n        // Clear old skins\r\n        skinA.mixingWithId = 0;\r\n        skinB.mixingWithId = 0;\r\n\r\n        // In order to distinguish created skins in minting with destroyed skins\r\n        // skinIdToOwner[skinAId] = owner;\r\n        // skinIdToOwner[skinBId] = owner;\r\n        delete skinIdToOwner[skinAId];\r\n        delete skinIdToOwner[skinBId];\r\n        // require(numSkinOfAccounts[account] >= 2);\r\n        numSkinOfAccounts[account] -= 1;\r\n\r\n        MixSuccess(account, nextSkinId - 1, skinAId, skinBId);\r\n    }\r\n}\r\ncontract SkinMarket is SkinMix {\r\n\r\n    // Cut ratio for a transaction\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint128 public trCut = 400;\r\n\r\n    // Sale orders list \r\n    mapping (uint256 => uint256) public desiredPrice;\r\n\r\n    // events\r\n    event PutOnSale(address account, uint256 skinId);\r\n    event WithdrawSale(address account, uint256 skinId);\r\n    event BuyInMarket(address buyer, uint256 skinId);\r\n\r\n    // functions\r\n\r\n    // Put asset on sale\r\n    function putOnSale(uint256 skinId, uint256 price) public whenNotPaused {\r\n        // Only owner of skin pass\r\n        require(skinIdToOwner[skinId] == msg.sender);\r\n\r\n        // Check whether skin is mixing \r\n        require(skins[skinId].mixingWithId == 0);\r\n\r\n        // Check whether skin is already on sale\r\n        require(isOnSale[skinId] == false);\r\n\r\n        require(price > 0); \r\n\r\n        // Put on sale\r\n        desiredPrice[skinId] = price;\r\n        isOnSale[skinId] = true;\r\n\r\n        // Emit the Approval event\r\n        PutOnSale(msg.sender, skinId);\r\n    }\r\n  \r\n    // Withdraw an sale order\r\n    function withdrawSale(uint256 skinId) external whenNotPaused {\r\n        // Check whether this skin is on sale\r\n        require(isOnSale[skinId] == true);\r\n        \r\n        // Can only withdraw self's sale\r\n        require(skinIdToOwner[skinId] == msg.sender);\r\n\r\n        // Withdraw\r\n        isOnSale[skinId] = false;\r\n        desiredPrice[skinId] = 0;\r\n\r\n        // Emit the cancel event\r\n        WithdrawSale(msg.sender, skinId);\r\n    }\r\n \r\n    // Buy skin in market\r\n    function buyInMarket(uint256 skinId) external payable whenNotPaused {\r\n        // Check whether this skin is on sale\r\n        require(isOnSale[skinId] == true);\r\n\r\n        address seller = skinIdToOwner[skinId];\r\n\r\n        // Check the sender isn't the seller\r\n        require(msg.sender != seller);\r\n\r\n        uint256 _price = desiredPrice[skinId];\r\n        // Check whether pay value is enough\r\n        require(msg.value >= _price);\r\n\r\n        // Cut and then send the proceeds to seller\r\n        uint256 sellerProceeds = _price - _computeCut(_price);\r\n\r\n        seller.transfer(sellerProceeds);\r\n\r\n        // Transfer skin from seller to buyer\r\n        numSkinOfAccounts[seller] -= 1;\r\n        skinIdToOwner[skinId] = msg.sender;\r\n        numSkinOfAccounts[msg.sender] += 1;\r\n        isOnSale[skinId] = false;\r\n        desiredPrice[skinId] = 0;\r\n\r\n        // Emit the buy event\r\n        BuyInMarket(msg.sender, skinId);\r\n    }\r\n\r\n    // Compute the marketCut\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        return _price * trCut / 10000;\r\n    }\r\n}\r\ncontract SkinMinting is SkinMarket {\r\n\r\n    // Limits the number of skins the contract owner can ever create.\r\n    uint256 public skinCreatedLimit = 50000;\r\n\r\n    // The summon numbers of each accouts: will be cleared every day\r\n    mapping (address => uint256) public accoutToSummonNum;\r\n\r\n    // Pay level of each accouts\r\n    mapping (address => uint256) public accoutToPayLevel;\r\n    mapping (address => uint256) public accountsLastClearTime;\r\n\r\n    uint256 public levelClearTime = now;\r\n\r\n    // price\r\n    uint256 public baseSummonPrice = 3 finney;\r\n    uint256 public bleachPrice = 30 finney;\r\n\r\n    // Pay level\r\n    uint256[5] public levelSplits = [10,\r\n                                     20,\r\n                                     50,\r\n                                     100,\r\n                                     200];\r\n    \r\n    uint256[6] public payMultiple = [1,\r\n                                     2,\r\n                                     4,\r\n                                     8,\r\n                                     20,\r\n                                     100];\r\n\r\n\r\n    // events\r\n    event CreateNewSkin(uint256 skinId, address account);\r\n    event Bleach(uint256 skinId, uint128 newAppearance);\r\n\r\n    // functions\r\n\r\n    // Set price \r\n    function setBaseSummonPrice(uint256 newPrice) external onlyOwner {\r\n        baseSummonPrice = newPrice;\r\n    }\r\n\r\n    function setBleachPrice(uint256 newPrice) external onlyOwner {\r\n        bleachPrice = newPrice;\r\n    }\r\n\r\n    // Create base skin for sell. Only owner can create\r\n    function createSkin(uint128 specifiedAppearance, uint256 salePrice) external onlyOwner whenNotPaused {\r\n        require(numSkinOfAccounts[owner] < skinCreatedLimit);\r\n\r\n        // Create specified skin\r\n        // uint128 randomAppearance = mixFormula.randomSkinAppearance();\r\n        Skin memory newSkin = Skin({appearance: specifiedAppearance, cooldownEndTime: uint64(now), mixingWithId: 0});\r\n        skins[nextSkinId] = newSkin;\r\n        skinIdToOwner[nextSkinId] = owner;\r\n        isOnSale[nextSkinId] = false;\r\n\r\n        // Emit the create event\r\n        CreateNewSkin(nextSkinId, owner);\r\n\r\n        // Put this skin on sale\r\n        putOnSale(nextSkinId, salePrice);\r\n\r\n        nextSkinId++;\r\n        numSkinOfAccounts[owner] += 1;   \r\n    }\r\n\r\n    // Summon\r\n    function summon() external payable whenNotPaused {\r\n        // Clear daily summon numbers\r\n        if (accountsLastClearTime[msg.sender] == uint256(0)) {\r\n            // This account's first time to summon, we do not need to clear summon numbers\r\n            accountsLastClearTime[msg.sender] = now;\r\n        } else {\r\n            if (accountsLastClearTime[msg.sender] < levelClearTime && now > levelClearTime) {\r\n                accoutToSummonNum[msg.sender] = 0;\r\n                accoutToPayLevel[msg.sender] = 0;\r\n                accountsLastClearTime[msg.sender] = now;\r\n            }\r\n        }\r\n\r\n        uint256 payLevel = accoutToPayLevel[msg.sender];\r\n        uint256 price = payMultiple[payLevel] * baseSummonPrice;\r\n        require(msg.value >= price);\r\n\r\n        // Create random skin\r\n        uint128 randomAppearance = mixFormula.randomSkinAppearance();\r\n        // uint128 randomAppearance = 0;\r\n        Skin memory newSkin = Skin({appearance: randomAppearance, cooldownEndTime: uint64(now), mixingWithId: 0});\r\n        skins[nextSkinId] = newSkin;\r\n        skinIdToOwner[nextSkinId] = msg.sender;\r\n        isOnSale[nextSkinId] = false;\r\n\r\n        // Emit the create event\r\n        CreateNewSkin(nextSkinId, msg.sender);\r\n\r\n        nextSkinId++;\r\n        numSkinOfAccounts[msg.sender] += 1;\r\n        \r\n        accoutToSummonNum[msg.sender] += 1;\r\n        \r\n        // Handle the paylevel        \r\n        if (payLevel < 5) {\r\n            if (accoutToSummonNum[msg.sender] >= levelSplits[payLevel]) {\r\n                accoutToPayLevel[msg.sender] = payLevel + 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Bleach some attributes\r\n    function bleach(uint128 skinId, uint128 attributes) external payable whenNotPaused {\r\n        // Check whether msg.sender is owner of the skin \r\n        require(msg.sender == skinIdToOwner[skinId]);\r\n\r\n        // Check whether this skin is on sale \r\n        require(isOnSale[skinId] == false);\r\n\r\n        // Check whether there is enough money\r\n        require(msg.value >= bleachPrice);\r\n\r\n        Skin storage originSkin = skins[skinId];\r\n        // Check whether this skin is in mixing \r\n        require(originSkin.mixingWithId == 0);\r\n\r\n        uint128 newAppearance = mixFormula.bleachAppearance(originSkin.appearance, attributes);\r\n        originSkin.appearance = newAppearance;\r\n\r\n        // Emit bleach event\r\n        Bleach(skinId, newAppearance);\r\n    }\r\n\r\n    // Our daemon will clear daily summon numbers\r\n    function clearSummonNum() external onlyOwner {\r\n        uint256 nextDay = levelClearTime + 1 days;\r\n        if (now > nextDay) {\r\n            levelClearTime = nextDay;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"skinId\",\"type\":\"uint256\"}],\"name\":\"withdrawSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseSummonPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"skinAId\",\"type\":\"uint256\"},{\"name\":\"skinBId\",\"type\":\"uint256\"}],\"name\":\"getMixingResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setBleachPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accoutToPayLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mixFormula\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"skinIdToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountsLastClearTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mixFormulaAddress\",\"type\":\"address\"}],\"name\":\"setMixFormulaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextSkinId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"summon\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"skinId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"putOnSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bleachPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payMultiple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"skinAId\",\"type\":\"uint256\"},{\"name\":\"skinBId\",\"type\":\"uint256\"}],\"name\":\"mixAuto\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"desiredPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelSplits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"numSkinOfAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prePaidFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"levelClearTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"skinCreatedLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"specifiedAppearance\",\"type\":\"uint128\"},{\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"createSkin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrePaidFee\",\"type\":\"uint256\"}],\"name\":\"setPrePaidFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSkin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"skinOfAccountById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setBaseSummonPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"skinAId\",\"type\":\"uint256\"},{\"name\":\"skinBId\",\"type\":\"uint256\"}],\"name\":\"mix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accoutToSummonNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"skinId\",\"type\":\"uint256\"}],\"name\":\"buyInMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearSummonNum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"skinId\",\"type\":\"uint128\"},{\"name\":\"attributes\",\"type\":\"uint128\"}],\"name\":\"bleach\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"skinId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CreateNewSkin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"skinId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newAppearance\",\"type\":\"uint128\"}],\"name\":\"Bleach\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"skinId\",\"type\":\"uint256\"}],\"name\":\"PutOnSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"skinId\",\"type\":\"uint256\"}],\"name\":\"WithdrawSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"skinId\",\"type\":\"uint256\"}],\"name\":\"BuyInMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"skinAId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"skinBId\",\"type\":\"uint256\"}],\"name\":\"MixStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"skinAId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"skinBId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cooldownEndTime\",\"type\":\"uint64\"}],\"name\":\"AutoMix\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"skinId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"skinAId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"skinBId\",\"type\":\"uint256\"}],\"name\":\"MixSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SkinMinting","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://14b4e729abb6e4017d1dcda2d257102261bde39e2999159c254410a44dada9f9"}]}