{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title AMTTimelockedToken\r\n * @dev AMTTimelockedToken is a token holder contract that will allow all\r\n * beneficiaries to extract the tokens after the given release times\r\n */\r\ncontract AMTTimelockedToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n  using SafeMath for uint256;\r\n\r\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic token;\r\n\r\n  // totalTokenAmounts of each beneficiary\r\n  uint256 public constant MANAGE_CAP = 1 * (10 ** 8) * (10 ** uint256(decimals)); // 5% of AMT in maximum\r\n  uint256 public constant DEVELOP_CAP = 2 * (10 ** 8) * (10 ** uint256(decimals)); // 10% of AMT in maximum\r\n  uint256 public constant MARKET_CAP = 1 * (10 ** 8) * (10 ** uint256(decimals)); // 5% of AMT in maximum\r\n  uint256 public constant FINANCE_CAP = 6 * (10 ** 7) * (10 ** uint256(decimals)); // 3% of AMT in maximum\r\n\r\n  // perRoundTokenAmounts of each beneficiary\r\n  uint256 public constant MANAGE_CAP_PER_ROUND = 2 * (10 ** 7) * (10 ** uint256(decimals));\r\n  uint256 public constant DEVELOP_CAP_PER_ROUND = 4 * (10 ** 7) * (10 ** uint256(decimals));\r\n  uint256 public constant MARKET_CAP_PER_ROUND = 2 * (10 ** 7) * (10 ** uint256(decimals));\r\n  uint256 public constant FINANCE_CAP_PER_ROUND = 12 * (10 ** 6) * (10 ** uint256(decimals));\r\n\r\n  // releasedToken of each beneficiary\r\n  mapping (address => uint256) releasedTokens;\r\n\r\n  // beneficiaries of tokens after they are released\r\n  address beneficiary_manage; // address of management team\r\n  address beneficiary_develop; // address of development team\r\n  address beneficiary_market; // address of marketing team\r\n  address beneficiary_finance; // address of finance team\r\n\r\n  // timestamps when token release is enabled\r\n  uint256 first_round_release_time; // 2019/01/08\r\n  uint256 second_round_release_time; // 2019/07/08\r\n  uint256 third_round_release_time; // 2020/01/08\r\n  uint256 forth_round_release_time; // 2020/07/08\r\n  uint256 fifth_round_release_time; // 2021/01/08\r\n\r\n  /**\r\n   * @dev Constructor initialized all necessary parameters.\r\n   */\r\n  constructor(\r\n    ERC20Basic _token,\r\n    address _beneficiary_manage,\r\n    address _beneficiary_develop,\r\n    address _beneficiary_market,\r\n    address _beneficiary_finance,\r\n    uint256 _first_round_release_time,\r\n    uint256 _second_round_release_time,\r\n    uint256 _third_round_release_time,\r\n    uint256 _forth_round_release_time,\r\n    uint256 _fifth_round_release_time\r\n  ) public {\r\n    // solium-disable-next-line security/no-block-members\r\n    token = _token;\r\n\r\n    beneficiary_manage = _beneficiary_manage;\r\n    beneficiary_develop = _beneficiary_develop;\r\n    beneficiary_market = _beneficiary_market;\r\n    beneficiary_finance = _beneficiary_finance;\r\n\r\n    first_round_release_time = _first_round_release_time;\r\n    second_round_release_time = _second_round_release_time;\r\n    third_round_release_time = _third_round_release_time;\r\n    forth_round_release_time = _forth_round_release_time;\r\n    fifth_round_release_time = _fifth_round_release_time;\r\n\r\n  }\r\n\r\n  /**\r\n  * @dev get AMToken contract address.\r\n  */\r\n  function getToken() public view returns (ERC20Basic) {\r\n    return token;\r\n  }\r\n\r\n  /**\r\n  * @dev get address of management team.\r\n  */\r\n  function getBeneficiaryManage() public view returns (address) {\r\n    return beneficiary_manage;\r\n  }\r\n\r\n  /**\r\n  * @dev get address of development team.\r\n  */\r\n  function getBeneficiaryDevelop() public view returns (address) {\r\n    return beneficiary_develop;\r\n  }\r\n\r\n  /**\r\n  * @dev get address of marketing team.\r\n  */\r\n  function getBeneficiaryMarket() public view returns (address) {\r\n    return beneficiary_market;\r\n  }\r\n\r\n  /**\r\n  * @dev get address of finance team.\r\n  */\r\n  function getBeneficiaryFinance() public view returns (address) {\r\n    return beneficiary_finance;\r\n  }\r\n\r\n  /**\r\n  * @dev get token release time of first round.\r\n  */\r\n  function getFirstRoundReleaseTime() public view returns (uint256) {\r\n    return first_round_release_time;\r\n  }\r\n\r\n  /**\r\n  * @dev get token release time of second round.\r\n  */\r\n  function getSecondRoundReleaseTime() public view returns (uint256) {\r\n    return second_round_release_time;\r\n  }\r\n\r\n  /**\r\n  * @dev get token release time of third round.\r\n  */\r\n  function getThirdRoundReleaseTime() public view returns (uint256) {\r\n    return third_round_release_time;\r\n  }\r\n\r\n  /**\r\n  * @dev get token release time of forth round.\r\n  */\r\n  function getForthRoundReleaseTime() public view returns (uint256) {\r\n    return forth_round_release_time;\r\n  }\r\n\r\n  /**\r\n  * @dev get token release time of fifth round.\r\n  */\r\n  function getFifthRoundReleaseTime() public view returns (uint256) {\r\n    return fifth_round_release_time;\r\n  }\r\n  \r\n  /**\r\n  * @dev Gets the releasedToken of the specified address.\r\n  * @param _owner The address to query the the releasedToken of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function releasedTokenOf(address _owner) public view returns (uint256) {\r\n    return releasedTokens[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Caculate AMT to be released of each round.\r\n  * @param _round sequence of round.\r\n  */\r\n  function validateReleasedToken(uint256 _round) internal onlyOwner {\r\n\r\n    uint256 releasedTokenOfManage = releasedTokens[beneficiary_manage];\r\n    uint256 releasedTokenOfDevelop = releasedTokens[beneficiary_develop];\r\n    uint256 releasedTokenOfMarket = releasedTokens[beneficiary_market];\r\n    uint256 releasedTokenOfFinance = releasedTokens[beneficiary_finance];\r\n\r\n    require(releasedTokenOfManage < MANAGE_CAP_PER_ROUND.mul(_round));\r\n    require(releasedTokenOfManage.add(MANAGE_CAP_PER_ROUND) <= MANAGE_CAP_PER_ROUND.mul(_round));\r\n\r\n    require(releasedTokenOfDevelop < DEVELOP_CAP_PER_ROUND.mul(_round));\r\n    require(releasedTokenOfDevelop.add(DEVELOP_CAP_PER_ROUND) <= DEVELOP_CAP_PER_ROUND.mul(_round));\r\n\r\n    require(releasedTokenOfMarket < MARKET_CAP_PER_ROUND.mul(_round));\r\n    require(releasedTokenOfMarket.add(MARKET_CAP_PER_ROUND) <= MARKET_CAP_PER_ROUND.mul(_round));\r\n\r\n    require(releasedTokenOfFinance < FINANCE_CAP_PER_ROUND.mul(_round));\r\n    require(releasedTokenOfFinance.add(FINANCE_CAP_PER_ROUND) <= FINANCE_CAP_PER_ROUND.mul(_round));\r\n\r\n    uint256 totalRoundCap = MANAGE_CAP_PER_ROUND.add(DEVELOP_CAP_PER_ROUND).add(MARKET_CAP_PER_ROUND).add(FINANCE_CAP_PER_ROUND);\r\n    require(token.balanceOf(this) >= totalRoundCap);\r\n\r\n    token.safeTransfer(beneficiary_manage, MANAGE_CAP_PER_ROUND);\r\n    releasedTokens[beneficiary_manage] = releasedTokens[beneficiary_manage].add(MANAGE_CAP_PER_ROUND);\r\n\r\n    token.safeTransfer(beneficiary_develop, DEVELOP_CAP_PER_ROUND);\r\n    releasedTokens[beneficiary_develop] = releasedTokens[beneficiary_develop].add(DEVELOP_CAP_PER_ROUND);\r\n\r\n    token.safeTransfer(beneficiary_market, MARKET_CAP_PER_ROUND);\r\n    releasedTokens[beneficiary_market] = releasedTokens[beneficiary_market].add(MARKET_CAP_PER_ROUND);\r\n\r\n    token.safeTransfer(beneficiary_finance, FINANCE_CAP_PER_ROUND);\r\n    releasedTokens[beneficiary_finance] = releasedTokens[beneficiary_finance].add(FINANCE_CAP_PER_ROUND);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiaries.\r\n   */\r\n  function releaseToken() public onlyOwner {\r\n\r\n    if (block.timestamp >= fifth_round_release_time) {\r\n\r\n      validateReleasedToken(5);\r\n      return;\r\n\r\n    }else if (block.timestamp >= forth_round_release_time) {\r\n\r\n      validateReleasedToken(4);\r\n      return;\r\n\r\n    }else if (block.timestamp >= third_round_release_time) {\r\n\r\n      validateReleasedToken(3);\r\n      return;\r\n\r\n    }else if (block.timestamp >= second_round_release_time) {\r\n\r\n      validateReleasedToken(2);\r\n      return;\r\n\r\n    }else if (block.timestamp >= first_round_release_time) {\r\n\r\n      validateReleasedToken(1);\r\n      return;\r\n\r\n    }\r\n\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBeneficiaryFinance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getForthRoundReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKET_CAP_PER_ROUND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSecondRoundReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getThirdRoundReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"releasedTokenOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFifthRoundReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBeneficiaryMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FINANCE_CAP_PER_ROUND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBeneficiaryDevelop\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKET_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVELOP_CAP_PER_ROUND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGE_CAP_PER_ROUND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVELOP_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFirstRoundReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FINANCE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBeneficiaryManage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_beneficiary_manage\",\"type\":\"address\"},{\"name\":\"_beneficiary_develop\",\"type\":\"address\"},{\"name\":\"_beneficiary_market\",\"type\":\"address\"},{\"name\":\"_beneficiary_finance\",\"type\":\"address\"},{\"name\":\"_first_round_release_time\",\"type\":\"uint256\"},{\"name\":\"_second_round_release_time\",\"type\":\"uint256\"},{\"name\":\"_third_round_release_time\",\"type\":\"uint256\"},{\"name\":\"_forth_round_release_time\",\"type\":\"uint256\"},{\"name\":\"_fifth_round_release_time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"AMTTimelockedToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e73346e3d90707acd1d35d7c056e2ec8f03209d300000000000000000000000076c0112a63265fa45852a38e92a1580b5a6efa71000000000000000000000000478db957546195033f67f4b4be0201adba040438000000000000000000000000ba8cbfa9c1a1bffa81437b522a2cffb861be2c6200000000000000000000000070fa3a5a5f92934593f5884f67a0eba546f8385e000000000000000000000000000000000000000000000000000000005c337780000000000000000000000000000000000000000000000000000000005d221700000000000000000000000000000000000000000000000000000000005e14ab00000000000000000000000000000000000000000000000000000000005f049c00000000000000000000000000000000000000000000000000000000005ff73000","Library":"","SwarmSource":"bzzr://6307e2a08d51d142d5541e8b836805a46fe742379d9f457b671c5ddd7eb8dd51"}]}