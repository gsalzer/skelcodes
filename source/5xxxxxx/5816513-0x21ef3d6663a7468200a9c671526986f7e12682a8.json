{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title smart real estate platform implementation\r\n * @author Maxim Akimov - <devstylesoftware@gmail.com>\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n\tfunction mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n  \r\n}\r\n\r\ncontract Ownable {\r\n    \r\n\taddress public owner;\r\n\taddress public ownerCandidat;\r\n\r\n\t/**\r\n\t* @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\t* account.\r\n\t*/\r\n\t constructor() public{\r\n\t\towner = msg.sender;\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Throws if called by any account other than the owner.\r\n\t*/\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t* @param newOwner The address to transfer ownership to.\r\n\t*/\r\n\tfunction  transferOwnership(address newOwner) onlyOwner  public{\r\n\t\trequire(newOwner != address(0));      \r\n\t\townerCandidat = newOwner;\r\n\t}\r\n\t/**\r\n\t* @dev Allows safe change current owner to a newOwner.\r\n\t*/\r\n\tfunction confirmOwnership() public{\r\n\t\trequire(msg.sender == ownerCandidat);      \r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n}\r\n\r\n/*\r\n  пока не забыл -  контаркту \"хранилице\" нужно сделать несоклько владельцев\r\n  что б можно было основной контаркт с бищнес логикой новый выпускать \r\n  (дажеесли в старом еще есть незакрытые сделки)\r\n*/\r\ncontract realestate is Ownable{\r\n    \r\n   using SafeMath for uint;\r\n     \r\n    enum statuses {\r\n        created,canceled,signed,finished\r\n    }\r\n    \r\n    struct _sdeal{\r\n    \r\n    address buyer;\r\n    address seller;\r\n    address signer;\r\n   // address agency;\r\n    uint sum; \r\n    uint fee;\r\n    \r\n    address signBuyer;\r\n    address signSeller;\r\n   // address signAgency;\r\n    uint atCreated;\r\n    uint atClosed;\r\n    \r\n    uint balance;\r\n    \r\n    statuses status;\r\n    uint dealNumber;\r\n    \r\n    string comment;\r\n    uint objectType; // 0 - old 1 - new\r\n}\r\n\r\nstruct _sSigns{\r\n    \r\n   address finishSignBuyer;\r\n   address finishSignSeller;\r\n   address finishSignSigner;\r\n}\r\n\r\n   event MoneyTransfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint _value\r\n    );\r\n \r\n   //Need to change to private\r\n   \r\n //uint public feePercent; // нуно ли менять в процессе? \r\n address public agencyOwner;\r\n address public agencyReceiver;\r\n\r\n _sdeal[] public deals;\r\n_sSigns[] public signs;\r\n \r\n   \r\n   // **************** modifiers **************** //\r\n   \r\n    modifier onlyAgency(){\r\n        require(msg.sender == agencyOwner);\r\n        _;\r\n    }\r\n    \r\n   /* modifier onlyDealMembers(uint _dealNumber){\r\n        \r\n        uint deal = dealNumbers[_dealNumber];\r\n          require(msg.sender == deals[deal].buyer|| msg.sender == deals[deal].seller \r\n        || msg.sender == deals[deal].agency || msg.sender == deals[deal].signer);\r\n        \r\n        _;\r\n    }*/\r\n    \r\n    modifier onlySigner(uint _dealNumber){\r\n        \r\n        uint deal = dealNumbers[_dealNumber];\r\n        require(msg.sender == deals[deal].signer);\r\n        _;\r\n    }\r\n    /*\r\n    TODO\r\n    сделать модификатор для всех ктоучавствует в сделки\r\n    */\r\n    \r\n    constructor() public{\r\n        \r\n        //feePercent = 3;// need??\r\n        agencyOwner = msg.sender;\r\n        agencyReceiver = msg.sender;\r\n    }\r\n     \r\n    function changeAgencyOwner(address newAgency) public {\r\n            require(msg.sender == agencyOwner || msg.sender == owner);\r\n         agencyOwner = newAgency;\r\n         \r\n     }\r\n     function changeAgencyReceiver (address _agencyReceiver) public{\r\n         \r\n         require(msg.sender == agencyOwner || msg.sender == owner);\r\n         agencyReceiver = _agencyReceiver;\r\n     }\r\n     \r\n     //как много раз можно изменть ??\r\n   /* function changeDealDate(uint _deal, uint _date) onlyAgency public{\r\n         require(deals[_deal].isProlong);\r\n         deals[_deal].date = _date;\r\n    }*/\r\n\r\n    function getSigns(uint _dealNumber) constant public returns (address signBuyer, \r\n    address signSeller){\r\n        \r\n        uint deal = dealNumbers[_dealNumber];\r\n        \r\n        return (\r\n               deals[deal].signBuyer,\r\n               deals[deal].signSeller\r\n              // deals[deal].signAgency\r\n            );\r\n        \r\n    }\r\n    \r\n    function getDealByNumber(uint _dealNumber) constant public returns (address buyer, \r\n    address sender, \r\n    address agency,\r\n    uint sum, \r\n    uint atCreated,\r\n    statuses status,\r\n    uint objectType) {\r\n         \r\n         uint deal = dealNumbers[_dealNumber];\r\n        \r\n        return (\r\n            deals[deal].buyer,\r\n            deals[deal].seller,\r\n            deals[deal].signer,\r\n            deals[deal].sum,\r\n            deals[deal].atCreated,\r\n            deals[deal].status,\r\n            deals[deal].objectType\r\n            );\r\n    }\r\n    \r\n    function getDealsLength() onlyAgency  constant public returns (uint len){\r\n        return deals.length;\r\n    }\r\n    \r\n    function getDealById(uint deal) onlyAgency constant public returns (address buyer, \r\n    address sender, \r\n    address agency,\r\n    uint sum, \r\n    uint atCreated,\r\n    statuses status,\r\n    uint objectType,\r\n    uint dealID) {\r\n         \r\n        \r\n        return (\r\n            deals[deal].buyer,\r\n            deals[deal].seller,\r\n            deals[deal].signer,\r\n            deals[deal].sum,\r\n            deals[deal].atCreated,\r\n            deals[deal].status,\r\n            deals[deal].objectType,\r\n            deal\r\n            );\r\n    }\r\n    \r\n     function getDealDataByNumber(uint _dealNumber)  constant public returns \r\n     (string comment, \r\n    uint fee, \r\n    uint atClosed) {\r\n       \r\n         uint deal = dealNumbers[_dealNumber];\r\n        \r\n        return (\r\n            deals[deal].comment,\r\n            deals[deal].fee,\r\n            deals[deal].atClosed\r\n            );\r\n    }\r\n\r\n    mapping (uint=>uint) public dealNumbers;\r\n    \r\n   function addDeal(address buyer, address seller, address signer, uint sum, uint fee, uint objectType, uint _dealNumber, string comment, uint whoPay) onlyAgency public{\r\n      \r\n      /*\r\n      objecType = 0 //  old\r\n      objecType = 1 // new\r\n       */ \r\n     //  feePercent = _feePercent;\r\n      // sum = sum.mul(1 ether);\r\n       //uint fee = sum.mul(feePercent).div(100);\r\n      // fee = fee.mul(1 ether);\r\n      \r\n      //Кто приоритетнее objectType or WhoPay\r\n      /*\r\n      whopay = 0  // pay fee buyer\r\n      whopay = 1  // pay fee seller\r\n      */\r\n      if(whoPay ==0){\r\n        sum = sum.add(fee);  \r\n      }\r\n     \r\n     /*  if(objectType == 0){\r\n           //buyer pay fee. increase sum to  feePercent\r\n            sum = sum.add(fee);\r\n       }\r\n      */\r\n      \r\n      uint  newIndex = deals.length++;\r\n      signs.length ++;\r\n      deals[newIndex].buyer = buyer;\r\n      deals[newIndex].seller = seller;\r\n       deals[newIndex].signer = signer;\r\n     // deals[newIndex].agency = agencyOwner;\r\n      deals[newIndex].sum = sum;\r\n      deals[newIndex].fee = fee;\r\n      //deals[newIndex].date = date;\r\n     // deals[newIndex].isProlong = isProlong;\r\n     \r\n      deals[newIndex].atCreated = now;\r\n      \r\n      deals[newIndex].signBuyer = 0x0;\r\n      deals[newIndex].signSeller = 0x0;\r\n      deals[newIndex].comment = comment;\r\n      deals[newIndex].status = statuses.created;\r\n      //deals[newIndex].signAgency = 0x0;\r\n      \r\n      deals[newIndex].balance = 0;\r\n      deals[newIndex].objectType = objectType;\r\n     deals[newIndex].dealNumber = _dealNumber;\r\n     \r\n     dealNumbers[_dealNumber] = newIndex;\r\n     \r\n     signs[newIndex].finishSignSeller = 0x0;\r\n     signs[newIndex].finishSignBuyer = 0x0;\r\n     signs[newIndex].finishSignSigner = 0x0;\r\n     \r\n     \r\n   }\r\n   \r\n   // Buyer sign\r\n   function signBuyer(uint _dealNumber) public payable{\r\n       \r\n       uint deal = dealNumbers[_dealNumber];\r\n       \r\n       //If sign of buyer is mpty and sender it is buyer for this deal\r\n       require(deals[deal].signBuyer == 0x0 && msg.sender == deals[deal].buyer);\r\n       require(deals[deal].signSeller == deals[deal].seller);\r\n       \r\n       //Check, value of tx need >= summ of deal\r\n       //TODO: need change maker!!!!\r\n       require(deals[deal].sum == msg.value);\r\n       \r\n       deals[deal].signBuyer = msg.sender;\r\n        deals[deal].balance =  msg.value;\r\n       deals[deal].status = statuses.signed;\r\n     \r\n   }\r\n   \r\n    // Seller sign\r\n   function signSeller(uint _dealNumber) public {\r\n       \r\n       uint deal = dealNumbers[_dealNumber];\r\n       \r\n       //If sign of seller is empty and sender it is seller for this deal\r\n       require(deals[deal].signSeller == 0x0 && msg.sender == deals[deal].seller);\r\n       deals[deal].signSeller = msg.sender;\r\n   }\r\n   \r\n   // Agency sign\r\n  /* function signAgency(uint _dealNumber) onlyAgency public {\r\n       \r\n       uint deal = dealNumbers[_dealNumber];\r\n       \r\n       //If sign of Agency is empty and sender it is agency for this deal\r\n       require(deals[deal].signAgency == 0x0);\r\n       deals[deal].signAgency = msg.sender;\r\n     \r\n   }*/\r\n   \r\n   \r\n   //возарт после истечения срока\r\n /*  function refound(uint deal) public{\r\n       \r\n       require(now > deals[deal].date && deals[deal].isProlong == false && deals[deal].balance > 0);\r\n       \r\n       //или все таки возврат делать покупателю!!???\r\n       deals[deal].agency.transfer(deals[deal].balance);\r\n       balances[deals[deal].buyer] = 0;\r\n       deals[deal].balance = 0;\r\n       \r\n   }*/\r\n   \r\n   /*\r\n   \r\n   function finishSign(uint _dealNumber) public{\r\n       \r\n        uint deal = dealNumbers[_dealNumber];\r\n        \r\n          require(deals[deal].balance > 0 &&  deals[deal].status == statuses.signed );\r\n       \r\n       if(msg.sender == deals[deal].buyer){\r\n           signs[deal].finishSignBuyer = msg.sender;\r\n       }\r\n        \r\n      if(msg.sender == deals[deal].seller){\r\n           signs[deal].finishSignSeller = msg.sender;\r\n       }\r\n       if(msg.sender ==deals[deal].signer){\r\n            signs[deal].finishSignSigner = msg.sender;\r\n       }\r\n       \r\n   }*/\r\n   \r\n   function finishDeal(uint _dealNumber)  public{\r\n       \r\n       uint deal = dealNumbers[_dealNumber];\r\n       \r\n       require(deals[deal].balance > 0 &&  deals[deal].status == statuses.signed );\r\n       \r\n       //SIGNING.....\r\n       \r\n       if(msg.sender == deals[deal].buyer){\r\n           signs[deal].finishSignBuyer = msg.sender;\r\n       }\r\n        \r\n      if(msg.sender == deals[deal].seller){\r\n           signs[deal].finishSignSeller = msg.sender;\r\n       }\r\n       if(msg.sender ==deals[deal].signer){\r\n            signs[deal].finishSignSigner = msg.sender;\r\n       }\r\n       \r\n       //////////////////////////\r\n       \r\n       \r\n      uint signCount = 0;\r\n       if(deals[deal].buyer == signs[deal].finishSignBuyer){\r\n           signCount++;\r\n       }\r\n        if(deals[deal].seller == signs[deal].finishSignSeller){\r\n           signCount++;\r\n       }\r\n        if(deals[deal].signer == signs[deal].finishSignSigner){\r\n           signCount++;\r\n       }\r\n       \r\n       if(signCount >= 2){\r\n       \r\n         //transfer fund to seller\r\n          deals[deal].seller.transfer(deals[deal].sum - deals[deal].fee);\r\n           \r\n           emit MoneyTransfer(this,deals[deal].seller,deals[deal].sum-deals[deal].fee);\r\n          \r\n           //transer fund to agency (fee)\r\n           agencyReceiver.transfer(deals[deal].fee);\r\n           \r\n           emit MoneyTransfer(this,agencyReceiver,deals[deal].fee);\r\n           \r\n           deals[deal].balance = 0;\r\n           deals[deal].status = statuses.finished;\r\n           deals[deal].atClosed = now;\r\n       }\r\n   }\r\n   \r\n   \r\n   // нужно ли тут расчиывать коммисию???\r\n    function cancelDeal(uint _dealNumber) onlySigner(_dealNumber) public{\r\n       \r\n        uint deal = dealNumbers[_dealNumber];\r\n       \r\n       require(deals[deal].balance > 0 &&  deals[deal].status == statuses.signed);\r\n       \r\n       deals[deal].buyer.transfer(deals[deal].balance);\r\n       \r\n       //emit MoneyTransfer(this,deals[deal].buyer,deals[deal].balance);\r\n       \r\n       deals[deal].balance = 0;\r\n       deals[deal].status = statuses.canceled;\r\n       deals[deal].atClosed = now;\r\n       \r\n   }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deals\",\"outputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"sum\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"signBuyer\",\"type\":\"address\"},{\"name\":\"signSeller\",\"type\":\"address\"},{\"name\":\"atCreated\",\"type\":\"uint256\"},{\"name\":\"atClosed\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"dealNumber\",\"type\":\"uint256\"},{\"name\":\"comment\",\"type\":\"string\"},{\"name\":\"objectType\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dealNumber\",\"type\":\"uint256\"}],\"name\":\"signSeller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"deal\",\"type\":\"uint256\"}],\"name\":\"getDealById\",\"outputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"agency\",\"type\":\"address\"},{\"name\":\"sum\",\"type\":\"uint256\"},{\"name\":\"atCreated\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"objectType\",\"type\":\"uint256\"},{\"name\":\"dealID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"agencyOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dealNumber\",\"type\":\"uint256\"}],\"name\":\"cancelDeal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"sum\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"objectType\",\"type\":\"uint256\"},{\"name\":\"_dealNumber\",\"type\":\"uint256\"},{\"name\":\"comment\",\"type\":\"string\"},{\"name\":\"whoPay\",\"type\":\"uint256\"}],\"name\":\"addDeal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_dealNumber\",\"type\":\"uint256\"}],\"name\":\"getDealDataByNumber\",\"outputs\":[{\"name\":\"comment\",\"type\":\"string\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"atClosed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCandidat\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dealNumber\",\"type\":\"uint256\"}],\"name\":\"signBuyer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAgency\",\"type\":\"address\"}],\"name\":\"changeAgencyOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agencyReceiver\",\"type\":\"address\"}],\"name\":\"changeAgencyReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"agencyReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_dealNumber\",\"type\":\"uint256\"}],\"name\":\"getSigns\",\"outputs\":[{\"name\":\"signBuyer\",\"type\":\"address\"},{\"name\":\"signSeller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dealNumber\",\"type\":\"uint256\"}],\"name\":\"finishDeal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signs\",\"outputs\":[{\"name\":\"finishSignBuyer\",\"type\":\"address\"},{\"name\":\"finishSignSeller\",\"type\":\"address\"},{\"name\":\"finishSignSigner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dealNumbers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDealsLength\",\"outputs\":[{\"name\":\"len\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_dealNumber\",\"type\":\"uint256\"}],\"name\":\"getDealByNumber\",\"outputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"agency\",\"type\":\"address\"},{\"name\":\"sum\",\"type\":\"uint256\"},{\"name\":\"atCreated\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"objectType\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"MoneyTransfer\",\"type\":\"event\"}]","ContractName":"realestate","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7085fcfca6ab8fbdcfa6e83d449a7e5f533173eb7a1a25c1e020d236aecc3e46"}]}