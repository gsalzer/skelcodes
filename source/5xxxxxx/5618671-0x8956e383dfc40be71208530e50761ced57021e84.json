{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n */\r\ncontract ERC20 {\r\n\r\n    function balanceOf(address _owner) external returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256  _value);\r\n}\r\n\r\n\r\ncontract Offer {\r\n\r\n\tusing SafeMath for uint256;                                        // Use safe math library\r\n\r\n    ERC20 tokenContract;            // Object of token contract\r\n    address owner; // address of contract creator\r\n    address cpaOwner; // 0x583031d1113ad414f02576bd6afabfb302140987\r\n    string public offer_id;\r\n    uint256 public conversionsCount;\r\n    uint256 public totalAmount;\r\n\r\n    struct conversion{\r\n        string id;\r\n        uint256 timestamp;\r\n        address affiliate;\r\n        uint256 amount;\r\n        uint256 toAffiliate;\r\n    }\r\n\r\n    event Conversion(\r\n        string conversion_id\r\n    );\r\n\r\n    mapping (bytes32 => conversion) conversions;         // Conversions table\r\n\r\n    function Offer(address tokenContractAddress, string _offer_id, address _cpaOwner) public {\r\n        tokenContract = ERC20(tokenContractAddress);\r\n        offer_id = _offer_id;\r\n        owner = msg.sender;\r\n        cpaOwner = _cpaOwner;\r\n    }\r\n\r\n    function getMyAddress() public view returns (address myAddress) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function getBalance(address _wallet) public view returns(uint256 _balance) {\r\n        return tokenContract.balanceOf(_wallet);\r\n    }\r\n\r\n    function contractBalance() public view returns(uint256 _balance) {\r\n        return tokenContract.balanceOf(address(this));\r\n    }\r\n\r\n    function writeConversion(string _conversion_id, address _affiliate, uint256 _amount, uint256 _toAffiliate)\r\n        public returns (bool success) {\r\n        require(msg.sender == owner);\r\n        require(_toAffiliate <= _amount);\r\n        require(_amount > 0);\r\n        require(_toAffiliate > 0);\r\n        if (getBalance(address(this)) >= _amount) {\r\n            conversionsCount++;\r\n            totalAmount = totalAmount.add(_amount);\r\n            conversions[keccak256(_conversion_id)] = conversion(_conversion_id, now, _affiliate, _amount, _toAffiliate);\r\n            tokenContract.transfer(_affiliate, _toAffiliate);\r\n            tokenContract.transfer(cpaOwner, _amount.sub(_toAffiliate));\r\n            emit Conversion(_conversion_id);\r\n        } else {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getConversionInfo(string _conversion_id)\r\n        public\r\n        constant\r\n        returns (string cid, uint256 ts, address aff, uint256 am, uint256 toAff) {\r\n        conversion storage _c = conversions[keccak256(_conversion_id)];\r\n        return (_c.id, _c.timestamp, _c.affiliate, _c.amount, _c.toAffiliate);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offer_id\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_conversion_id\",\"type\":\"string\"},{\"name\":\"_affiliate\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_toAffiliate\",\"type\":\"uint256\"}],\"name\":\"writeConversion\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyAddress\",\"outputs\":[{\"name\":\"myAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_conversion_id\",\"type\":\"string\"}],\"name\":\"getConversionInfo\",\"outputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"ts\",\"type\":\"uint256\"},{\"name\":\"aff\",\"type\":\"address\"},{\"name\":\"am\",\"type\":\"uint256\"},{\"name\":\"toAff\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"name\":\"_offer_id\",\"type\":\"string\"},{\"name\":\"_cpaOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"conversion_id\",\"type\":\"string\"}],\"name\":\"Conversion\",\"type\":\"event\"}]","ContractName":"Offer","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b0d28f8cacac3020f23bedf470514fd847bc903600000000000000000000000000000000000000000000000000000000000000600000000000000000000000001020452bbd137164bea62df60a008b0649630ea4000000000000000000000000000000000000000000000000000000000000000b546573744f666665724944000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://b2df63db8c4294a4faf2ac44a4d6a3d0afb4e1dd9d16dcd860dc0fcdf4e1c223"}]}