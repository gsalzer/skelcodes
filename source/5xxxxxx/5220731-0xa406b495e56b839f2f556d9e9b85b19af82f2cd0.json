{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: contracts/Timelock.sol\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme with a cliff, gradual release period, and implied residue.\r\n *\r\n * Withdraws by an address can be paused by the owner.\r\n */\r\ncontract Timelock is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /*\r\n   * @dev ERC20 token that is being timelocked\r\n   */\r\n  ERC20Basic public token;\r\n\r\n  /**\r\n   * @dev timestamp at which the timelock schedule begins\r\n   */\r\n  uint256 public startTime;\r\n\r\n  /**\r\n   * @dev number of seconds from startTime to cliff\r\n   */\r\n  uint256 public cliffDuration;\r\n\r\n  /**\r\n   * @dev a percentage that becomes available at the cliff, expressed as a number between 0 and 100\r\n   */\r\n  uint256 public cliffReleasePercentage;\r\n\r\n  /**\r\n   * @dev number of seconds from cliff to residue, over this period tokens become avialable gradually\r\n   */\r\n  uint256 public slopeDuration;\r\n\r\n  /**\r\n   * @dev a percentage that becomes avilable over the gradual release period expressed as a number between 0 and 100\r\n   */\r\n  uint256 public slopeReleasePercentage;\r\n\r\n  /**\r\n   * @dev boolean indicating if owner has finished allocation.\r\n   */\r\n  bool public allocationFinished;\r\n\r\n  /**\r\n   * @dev variable to keep track of cliff time.\r\n   */\r\n  uint256 public cliffTime;\r\n\r\n  /**\r\n   * @dev variable to keep track of when the timelock ends.\r\n   */\r\n  uint256 public timelockEndTime;\r\n\r\n  /**\r\n   * @dev mapping to keep track of what amount of tokens have been allocated to what address.\r\n   */\r\n  mapping (address => uint256) public allocatedTokens;\r\n\r\n  /**\r\n   * @dev mapping to keep track of what amount of tokens have been withdrawn by what address.\r\n   */\r\n  mapping (address => uint256) public withdrawnTokens;\r\n\r\n  /**\r\n   * @dev mapping to keep track of if withdrawls are paused for a given address.\r\n   */\r\n  mapping (address => bool) public withdrawalPaused;\r\n\r\n  /**\r\n   * @dev constructor\r\n   * @param _token address of ERC20 token that is being timelocked.\r\n   * @param _startTime timestamp indicating when the unlocking of tokens start.\r\n   * @param _cliffDuration number of seconds before any tokens are unlocked.\r\n   * @param _cliffReleasePercent percentage of tokens that become available at the cliff time.\r\n   * @param _slopeDuration number of seconds for gradual release of Tokens.\r\n   * @param _slopeReleasePercentage percentage of tokens that are released gradually.\r\n   */\r\n  function Timelock(ERC20Basic _token, uint256 _startTime, uint256 _cliffDuration, uint256 _cliffReleasePercent, uint256 _slopeDuration, uint256 _slopeReleasePercentage) public {\r\n\r\n    // sanity checks\r\n    require(_cliffReleasePercent.add(_slopeReleasePercentage) <= 100);\r\n    require(_startTime > now);\r\n    require(_token != address(0));\r\n\r\n    // defaults\r\n    allocationFinished = false;\r\n\r\n    // storing constructor params\r\n    token = _token;\r\n    startTime = _startTime;\r\n    cliffDuration = _cliffDuration;\r\n    cliffReleasePercentage = _cliffReleasePercent;\r\n    slopeDuration = _slopeDuration;\r\n    slopeReleasePercentage = _slopeReleasePercentage;\r\n\r\n    // derived variables\r\n    cliffTime = startTime.add(cliffDuration);\r\n    timelockEndTime = cliffTime.add(slopeDuration);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier created to prevent short address attack problems.\r\n   * solution based on this blog post https://blog.coinfabrik.com/smart-contract-short-address-attack-mitigation-failure\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n    assert(msg.data.length >= size + 4);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev helper method that allows owner to allocate tokens to an address.\r\n   * @param _address beneficiary receiving the tokens.\r\n   * @param _amount number of tokens being received by beneficiary.\r\n   * @return boolean indicating function success.\r\n   */\r\n  function allocateTokens(address _address, uint256 _amount) onlyPayloadSize(2 * 32) onlyOwner external returns (bool) {\r\n    require(!allocationFinished);\r\n\r\n    allocatedTokens[_address] = _amount;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev helper method that allows owner to mark allocation as done.\r\n   * @return boolean indicating function success.\r\n   */\r\n  function finishAllocation() onlyOwner external returns (bool) {\r\n    allocationFinished = true;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev helper method that allows owner to pause withdrawls for any address.\r\n   * @return boolean indicating function success.\r\n   */\r\n  function pauseWithdrawal(address _address) onlyOwner external returns (bool) {\r\n    withdrawalPaused[_address] = true;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev helper method that allows owner to unpause withdrawls for any address.\r\n   * @return boolean indicating function success.\r\n   */\r\n  function unpauseWithdrawal(address _address) onlyOwner external returns (bool) {\r\n    withdrawalPaused[_address] = false;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev helper method that allows anyone to check amount that is available for withdrawl by a given address.\r\n   * @param _address for which the user needs to check available amount for withdrawl.\r\n   * @return uint256 number indicating the number of tokens available for withdrawl.\r\n   */\r\n  function availableForWithdrawal(address _address) public view returns (uint256) {\r\n    if (now < cliffTime) {\r\n      return 0;\r\n    } else if (now < timelockEndTime) {\r\n      uint256 cliffTokens = (cliffReleasePercentage.mul(allocatedTokens[_address])).div(100);\r\n      uint256 slopeTokens = (allocatedTokens[_address].mul(slopeReleasePercentage)).div(100);\r\n      uint256 timeAtSlope = now.sub(cliffTime);\r\n      uint256 slopeTokensByNow = (slopeTokens.mul(timeAtSlope)).div(slopeDuration);\r\n\r\n      return (cliffTokens.add(slopeTokensByNow)).sub(withdrawnTokens[_address]);\r\n    } else {\r\n      return allocatedTokens[_address].sub(withdrawnTokens[_address]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev helper method that allows a beneficiary to withdraw tokens that have vested for their address.\r\n   * @return boolean indicating function success.\r\n   */\r\n  function withdraw() external returns (bool) {\r\n    require(!withdrawalPaused[msg.sender]);\r\n\r\n    uint256 availableTokens = availableForWithdrawal(msg.sender);\r\n    require (availableTokens > 0);\r\n    withdrawnTokens[msg.sender] = withdrawnTokens[msg.sender].add(availableTokens);\r\n    token.safeTransfer(msg.sender, availableTokens);\r\n    return true;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cliffTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocatedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unpauseWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"availableForWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allocateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slopeDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"pauseWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slopeReleasePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cliffReleasePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timelockEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cliffDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocationFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"name\":\"_cliffReleasePercent\",\"type\":\"uint256\"},{\"name\":\"_slopeDuration\",\"type\":\"uint256\"},{\"name\":\"_slopeReleasePercentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Timelock","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000524897c10d0a39d0cb1d1399557aee3de6a2f421000000000000000000000000000000000000000000000000000000005aa1aedc0000000000000000000000000000000000000000000000000000000000000708000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000001c20000000000000000000000000000000000000000000000000000000000000005a","Library":"","SwarmSource":"bzzr://1c8c2361587229cbe29599a4e29e33d8ac9e40b9560997a8693dbbde2d202138"}]}