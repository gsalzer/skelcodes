{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title MultiOwnable\r\n * @dev The MultiOwnable contract has owners addresses and provides basic authorization control\r\n * functions, this simplifies the implementation of \"users permissions\".\r\n */\r\ncontract MultiOwnable {\r\n    address public manager; // address used to set owners\r\n    address[] public owners;\r\n    mapping(address => bool) public ownerByAddress;\r\n\r\n    event AddOwner(address owner);\r\n    event RemoveOwner(address owner);\r\n\r\n    modifier onlyOwner() {\r\n        require(ownerByAddress[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev MultiOwnable constructor sets the manager\r\n     */\r\n    function MultiOwnable() public {\r\n        manager = msg.sender;\r\n        _addOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to add owner address\r\n     */\r\n    function addOwner(address _owner) public {\r\n        require(msg.sender == manager);\r\n        _addOwner(_owner);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Function to remove owner address\r\n     */\r\n    function removeOwner(address _owner) public {\r\n        require(msg.sender == manager);\r\n        _removeOwner(_owner);\r\n\r\n    }\r\n\r\n    function _addOwner(address _owner) internal {\r\n        ownerByAddress[_owner] = true;\r\n        \r\n        owners.push(_owner);\r\n        AddOwner(_owner);\r\n    }\r\n\r\n    function _removeOwner(address _owner) internal {\r\n\r\n        if (owners.length == 0)\r\n            return;\r\n\r\n        ownerByAddress[_owner] = false;\r\n        \r\n        uint id = indexOf(_owner);\r\n        remove(id);\r\n        RemoveOwner(_owner);\r\n    }\r\n\r\n    function getOwners() public constant returns (address[]) {\r\n        return owners;\r\n    }\r\n\r\n    function indexOf(address value) internal returns(uint) {\r\n        uint i = 0;\r\n        while (i < owners.length) {\r\n            if (owners[i] == value) {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n    return i;\r\n  }\r\n\r\n  function remove(uint index) internal {\r\n        if (index >= owners.length) return;\r\n\r\n        for (uint i = index; i<owners.length-1; i++){\r\n            owners[i] = owners[i+1];\r\n        }\r\n        delete owners[owners.length-1];\r\n        owners.length--;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title IERC20Token - ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract IERC20Token {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value)  public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\r\n    function approve(address _spender, uint256 _value)  public returns (bool success);\r\n    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract PricingStrategy {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant FIRST_ROUND = 1523664001; //2018.04.14 00:00:01 GMT\r\n    uint256 public constant FIRST_ROUND_RATE = 20; // FIRST ROUND BONUS RATE 20%\r\n\r\n    uint256 public constant SECOND_ROUND = 1524268801; //2018.04.21 00:00:01 GMT\r\n    uint256 public constant SECOND_ROUND_RATE = 10; // SECOND ROUND BONUS RATE 10%\r\n\r\n    uint256 public constant FINAL_ROUND_RATE = 0; //FINAL ROUND BONUS RATE 0%\r\n\r\n\r\n    function PricingStrategy() public {\r\n        \r\n    }\r\n\r\n    function getRate() public constant returns(uint256 rate) {\r\n        if (now<FIRST_ROUND) {\r\n            return (FIRST_ROUND_RATE);\r\n        } else if (now<SECOND_ROUND) {\r\n            return (SECOND_ROUND_RATE);\r\n        } else {\r\n            return (FINAL_ROUND_RATE);\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract CrowdSale is MultiOwnable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    enum ICOState {\r\n        NotStarted,\r\n        Started,\r\n        Stopped,\r\n        Finished\r\n    } // ICO SALE STATES\r\n\r\n    struct Stats { \r\n        uint256 TotalContrAmount;\r\n        ICOState State;\r\n        uint256 TotalContrCount;\r\n    }\r\n\r\n    event Contribution(address contraddress, uint256 ethamount, uint256 tokenamount);\r\n    event PresaleTransferred(address contraddress, uint256 tokenamount);\r\n    event TokenOPSPlatformTransferred(address contraddress, uint256 tokenamount);\r\n    event OVISBookedTokensTransferred(address contraddress, uint256 tokenamount);\r\n    event OVISSaleBooked(uint256 jointToken);\r\n    event OVISReservedTokenChanged(uint256 jointToken);\r\n    event RewardPoolTransferred(address rewardpooladdress, uint256 tokenamount);\r\n    event OPSPoolTransferred(address OPSpooladdress, uint256 tokenamount);\r\n    event SaleStarted();\r\n    event SaleStopped();\r\n    event SaleContinued();\r\n    event SoldOutandSaleStopped();\r\n    event SaleFinished();\r\n    event TokenAddressChanged(address jointaddress, address OPSAddress);\r\n    event StrategyAddressChanged(address strategyaddress);   \r\n    event Funded(address fundaddress, uint256 amount);\r\n\r\n    uint256 public constant MIN_ETHER_CONTR = 0.1 ether; // MINIMUM ETHER CONTRIBUTION \r\n    uint256 public constant MAX_ETHER_CONTR = 100 ether; // MAXIMUM ETHER CONTRIBUTION\r\n\r\n    uint256 public constant DECIMALCOUNT = 10**18;\r\n    uint256 public constant JOINT_PER_ETH = 8000; // 1 ETH = 8000 JOINT\r\n\r\n    uint256 public constant PRESALE_JOINTTOKENS = 5000000; // PRESALE 500 ETH * 10000 JOINT AMOUNT\r\n    uint256 public constant TOKENOPSPLATFORM_JOINTTOKENS = 25000000; // TOKENOPS PLAFTORM RESERVED AMOUNT\r\n    uint256 public constant MAX_AVAILABLE_JOINTTOKENS = 100000000; // PRESALE JOINT TOKEN SALE AMOUNT\r\n    uint256 public AVAILABLE_JOINTTOKENS = uint256(100000000).mul(DECIMALCOUNT);\r\n     \r\n    uint256 public OVISRESERVED_TOKENS = 25000000; // RESERVED TOKEN AMOUNT FOR OVIS PARTNER SALE\r\n    uint256 public OVISBOOKED_TOKENS = 0;\r\n    uint256 public OVISBOOKED_BONUSTOKENS = 0;\r\n\r\n    uint256 public constant SALE_START_TIME = 1523059201; //UTC 2018-04-07 00:00:01\r\n\r\n    \r\n    uint256 public ICOSALE_JOINTTOKENS = 0; // ICO CONTRACT TOTAL JOINT SALE AMOUNT\r\n    uint256 public ICOSALE_BONUSJOINTTOKENS = 0; // ICO CONTRACT TOTAL JOINT BONUS AMOUNT\r\n    uint256 public TOTAL_CONTRIBUTOR_COUNT = 0; // ICO SALE TOTAL CONTRIBUTOR COUNT\r\n\r\n    ICOState public CurrentState; // ICO SALE STATE\r\n\r\n    IERC20Token public JointToken;\r\n    IERC20Token public OPSToken;\r\n    PricingStrategy public PriceStrategy;\r\n\r\n    address public FundAddress = 0x25Bc52CBFeB86f6f12EaddF77560b02c4617DC21;\r\n    address public RewardPoolAddress = 0xEb1FAef9068b6B8f46b50245eE877dA5b03D98C9;\r\n    address public OvisAddress = 0x096A5166F75B5B923234841F69374de2F47F9478;\r\n    address public PresaleAddress = 0x3e5EF0eC822B519eb0a41f94b34e90D16ce967E8;\r\n    address public TokenOPSSaleAddress = 0x8686e49E07Bde4F389B0a5728fCe8713DB83602b;\r\n    address public StrategyAddress = 0xe2355faB9239d5ddaA071BDE726ceb2Db876B8E2;\r\n    address public OPSPoolAddress = 0xEA5C0F39e5E3c742fF6e387394e0337e7366a121;\r\n\r\n    modifier checkCap() {\r\n        require(msg.value>=MIN_ETHER_CONTR);\r\n        require(msg.value<=MAX_ETHER_CONTR);\r\n        _;\r\n    }\r\n\r\n    modifier checkBalance() {\r\n        require(JointToken.balanceOf(address(this))>0);\r\n        require(OPSToken.balanceOf(address(this))>0);\r\n        _;       \r\n    }\r\n\r\n    modifier checkTime() {\r\n        require(now>=SALE_START_TIME);\r\n        _;\r\n    }\r\n\r\n    modifier checkState() {\r\n        require(CurrentState == ICOState.Started);\r\n        _;\r\n    }\r\n\r\n    function CrowdSale() {\r\n        PriceStrategy = PricingStrategy(StrategyAddress);\r\n\r\n        CurrentState = ICOState.NotStarted;\r\n        uint256 _soldtokens = PRESALE_JOINTTOKENS.add(TOKENOPSPLATFORM_JOINTTOKENS).add(OVISRESERVED_TOKENS);\r\n        _soldtokens = _soldtokens.mul(DECIMALCOUNT);\r\n        AVAILABLE_JOINTTOKENS = AVAILABLE_JOINTTOKENS.sub(_soldtokens);\r\n    }\r\n\r\n    function() payable public checkState checkTime checkBalance checkCap {\r\n        contribute();\r\n    }\r\n\r\n    /**\r\n     * @dev calculates token amounts and sends to contributor\r\n     */\r\n    function contribute() private {\r\n        uint256 _jointAmount = 0;\r\n        uint256 _jointBonusAmount = 0;\r\n        uint256 _jointTransferAmount = 0;\r\n        uint256 _bonusRate = 0;\r\n        uint256 _ethAmount = msg.value;\r\n\r\n        if (msg.value.mul(JOINT_PER_ETH)>AVAILABLE_JOINTTOKENS) {\r\n            _ethAmount = AVAILABLE_JOINTTOKENS.div(JOINT_PER_ETH);\r\n        } else {\r\n            _ethAmount = msg.value;\r\n        }       \r\n\r\n        _bonusRate = PriceStrategy.getRate();\r\n        _jointAmount = (_ethAmount.mul(JOINT_PER_ETH));\r\n        _jointBonusAmount = _ethAmount.mul(JOINT_PER_ETH).mul(_bonusRate).div(100);  \r\n        _jointTransferAmount = _jointAmount.add(_jointBonusAmount);\r\n        \r\n        require(_jointAmount<=AVAILABLE_JOINTTOKENS);\r\n\r\n        require(JointToken.transfer(msg.sender, _jointTransferAmount));\r\n        require(OPSToken.transfer(msg.sender, _jointTransferAmount));     \r\n\r\n        if (msg.value>_ethAmount) {\r\n            msg.sender.transfer(msg.value.sub(_ethAmount));\r\n            CurrentState = ICOState.Stopped;\r\n            SoldOutandSaleStopped();\r\n        }\r\n\r\n        AVAILABLE_JOINTTOKENS = AVAILABLE_JOINTTOKENS.sub(_jointAmount);\r\n        ICOSALE_JOINTTOKENS = ICOSALE_JOINTTOKENS.add(_jointAmount);\r\n        ICOSALE_BONUSJOINTTOKENS = ICOSALE_BONUSJOINTTOKENS.add(_jointBonusAmount);         \r\n        TOTAL_CONTRIBUTOR_COUNT = TOTAL_CONTRIBUTOR_COUNT.add(1);\r\n\r\n        Contribution(msg.sender, _ethAmount, _jointTransferAmount);\r\n    }\r\n\r\n     /**\r\n     * @dev book OVIS partner sale tokens\r\n     */\r\n    function bookOVISSale(uint256 _rate, uint256 _jointToken) onlyOwner public {              \r\n        OVISBOOKED_TOKENS = OVISBOOKED_TOKENS.add(_jointToken);\r\n        require(OVISBOOKED_TOKENS<=OVISRESERVED_TOKENS.mul(DECIMALCOUNT));\r\n        uint256 _bonus = _jointToken.mul(_rate).div(100);\r\n        OVISBOOKED_BONUSTOKENS = OVISBOOKED_BONUSTOKENS.add(_bonus);\r\n        OVISSaleBooked(_jointToken);\r\n    }\r\n\r\n     /**\r\n     * @dev changes OVIS partner sale reserved tokens\r\n     */\r\n    function changeOVISReservedToken(uint256 _jointToken) onlyOwner public {\r\n        if (_jointToken > OVISRESERVED_TOKENS) {\r\n            AVAILABLE_JOINTTOKENS = AVAILABLE_JOINTTOKENS.sub((_jointToken.sub(OVISRESERVED_TOKENS)).mul(DECIMALCOUNT));\r\n            OVISRESERVED_TOKENS = _jointToken;\r\n        } else if (_jointToken < OVISRESERVED_TOKENS) {\r\n            AVAILABLE_JOINTTOKENS = AVAILABLE_JOINTTOKENS.add((OVISRESERVED_TOKENS.sub(_jointToken)).mul(DECIMALCOUNT));\r\n            OVISRESERVED_TOKENS = _jointToken;\r\n        }\r\n        \r\n        OVISReservedTokenChanged(_jointToken);\r\n    }\r\n\r\n      /**\r\n     * @dev changes Joint Token and OPS Token contract address\r\n     */\r\n    function changeTokenAddress(address _jointAddress, address _OPSAddress) onlyOwner public {\r\n        JointToken = IERC20Token(_jointAddress);\r\n        OPSToken = IERC20Token(_OPSAddress);\r\n        TokenAddressChanged(_jointAddress, _OPSAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev changes Pricing Strategy contract address, which calculates token amounts to give\r\n     */\r\n    function changeStrategyAddress(address _strategyAddress) onlyOwner public {\r\n        PriceStrategy = PricingStrategy(_strategyAddress);\r\n        StrategyAddressChanged(_strategyAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev transfers presale token amounts to contributors\r\n     */\r\n    function transferPresaleTokens() private {\r\n        require(JointToken.transfer(PresaleAddress, PRESALE_JOINTTOKENS.mul(DECIMALCOUNT)));\r\n        PresaleTransferred(PresaleAddress, PRESALE_JOINTTOKENS.mul(DECIMALCOUNT));\r\n    }\r\n\r\n    /**\r\n     * @dev transfers presale token amounts to contributors\r\n     */\r\n    function transferTokenOPSPlatformTokens() private {\r\n        require(JointToken.transfer(TokenOPSSaleAddress, TOKENOPSPLATFORM_JOINTTOKENS.mul(DECIMALCOUNT)));\r\n        TokenOPSPlatformTransferred(TokenOPSSaleAddress, TOKENOPSPLATFORM_JOINTTOKENS.mul(DECIMALCOUNT));\r\n    }\r\n\r\n    /**\r\n     * @dev transfers token amounts to other ICO platforms\r\n     */\r\n    function transferOVISBookedTokens() private {\r\n        uint256 _totalTokens = OVISBOOKED_TOKENS.add(OVISBOOKED_BONUSTOKENS);\r\n        if(_totalTokens>0) {       \r\n            require(JointToken.transfer(OvisAddress, _totalTokens));\r\n            require(OPSToken.transfer(OvisAddress, _totalTokens));\r\n        }\r\n        OVISBookedTokensTransferred(OvisAddress, _totalTokens);\r\n    }\r\n\r\n    /**\r\n     * @dev transfers remaining unsold token amount to reward pool\r\n     */\r\n    function transferRewardPool() private {\r\n        uint256 balance = JointToken.balanceOf(address(this));\r\n        if(balance>0) {\r\n            require(JointToken.transfer(RewardPoolAddress, balance));\r\n        }\r\n        RewardPoolTransferred(RewardPoolAddress, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev transfers remaining OPS token amount to pool\r\n     */\r\n    function transferOPSPool() private {\r\n        uint256 balance = OPSToken.balanceOf(address(this));\r\n        if(balance>0) {\r\n        require(OPSToken.transfer(OPSPoolAddress, balance));\r\n        }\r\n        OPSPoolTransferred(OPSPoolAddress, balance);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev start function to start crowdsale for contribution\r\n     */\r\n    function startSale() onlyOwner public {\r\n        require(CurrentState == ICOState.NotStarted);\r\n        require(JointToken.balanceOf(address(this))>0);\r\n        require(OPSToken.balanceOf(address(this))>0);       \r\n        CurrentState = ICOState.Started;\r\n        transferPresaleTokens();\r\n        transferTokenOPSPlatformTokens();\r\n        SaleStarted();\r\n    }\r\n\r\n    /**\r\n     * @dev stop function to stop crowdsale for contribution\r\n     */\r\n    function stopSale() onlyOwner public {\r\n        require(CurrentState == ICOState.Started);\r\n        CurrentState = ICOState.Stopped;\r\n        SaleStopped();\r\n    }\r\n\r\n    /**\r\n     * @dev continue function to continue crowdsale for contribution\r\n     */\r\n    function continueSale() onlyOwner public {\r\n        require(CurrentState == ICOState.Stopped);\r\n        CurrentState = ICOState.Started;\r\n        SaleContinued();\r\n    }\r\n\r\n    /**\r\n     * @dev finish function to finish crowdsale for contribution\r\n     */\r\n    function finishSale() onlyOwner public {\r\n        if (this.balance>0) {\r\n            FundAddress.transfer(this.balance);\r\n        }\r\n        transferOVISBookedTokens();\r\n        transferRewardPool();    \r\n        transferOPSPool();  \r\n        CurrentState = ICOState.Finished; \r\n        SaleFinished();\r\n    }\r\n\r\n    /**\r\n     * @dev funds contract's balance to fund address\r\n     */\r\n    function getFund(uint256 _amount) onlyOwner public {\r\n        require(_amount<=this.balance);\r\n        FundAddress.transfer(_amount);\r\n        Funded(FundAddress, _amount);\r\n    }\r\n\r\n    function getStats() public constant returns(uint256 TotalContrAmount, ICOState State, uint256 TotalContrCount) {\r\n        uint256 totaltoken = 0;\r\n        totaltoken = ICOSALE_JOINTTOKENS.add(PRESALE_JOINTTOKENS.mul(DECIMALCOUNT));\r\n        totaltoken = totaltoken.add(TOKENOPSPLATFORM_JOINTTOKENS.mul(DECIMALCOUNT));\r\n        totaltoken = totaltoken.add(OVISBOOKED_TOKENS);\r\n        return (totaltoken, CurrentState, TOTAL_CONTRIBUTOR_COUNT);\r\n    }\r\n\r\n    function destruct() onlyOwner public {\r\n        require(CurrentState == ICOState.Finished);\r\n        selfdestruct(FundAddress);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"TOKENOPSPLATFORM_JOINTTOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StrategyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_jointToken\",\"type\":\"uint256\"}],\"name\":\"bookOVISSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPSToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOSALE_BONUSJOINTTOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ETHER_CONTR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_ETHER_CONTR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OVISBOOKED_BONUSTOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PriceStrategy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JOINT_PER_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_CONTRIBUTOR_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jointToken\",\"type\":\"uint256\"}],\"name\":\"changeOVISReservedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_strategyAddress\",\"type\":\"address\"}],\"name\":\"changeStrategyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_JOINTTOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RewardPoolAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JointToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_AVAILABLE_JOINTTOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurrentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OVISBOOKED_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OvisAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_JOINTTOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"name\":\"TotalContrAmount\",\"type\":\"uint256\"},{\"name\":\"State\",\"type\":\"uint8\"},{\"name\":\"TotalContrCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jointAddress\",\"type\":\"address\"},{\"name\":\"_OPSAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OVISRESERVED_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenOPSSaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALCOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PresaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPSPoolAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOSALE_JOINTTOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"continueSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contraddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethamount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenamount\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contraddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenamount\",\"type\":\"uint256\"}],\"name\":\"PresaleTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contraddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenamount\",\"type\":\"uint256\"}],\"name\":\"TokenOPSPlatformTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contraddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenamount\",\"type\":\"uint256\"}],\"name\":\"OVISBookedTokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"jointToken\",\"type\":\"uint256\"}],\"name\":\"OVISSaleBooked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"jointToken\",\"type\":\"uint256\"}],\"name\":\"OVISReservedTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rewardpooladdress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenamount\",\"type\":\"uint256\"}],\"name\":\"RewardPoolTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"OPSpooladdress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenamount\",\"type\":\"uint256\"}],\"name\":\"OPSPoolTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleContinued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SoldOutandSaleStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"jointaddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"OPSAddress\",\"type\":\"address\"}],\"name\":\"TokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"strategyaddress\",\"type\":\"address\"}],\"name\":\"StrategyAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fundaddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemoveOwner\",\"type\":\"event\"}]","ContractName":"CrowdSale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1d475573883250572516437f703a806954fcceb6e02570fed7f23a26b000fe82"}]}