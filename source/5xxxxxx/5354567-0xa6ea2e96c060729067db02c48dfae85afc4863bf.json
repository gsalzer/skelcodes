{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Etharea {\r\n    using SafeMath for uint;\r\n    struct Area {\r\n        string id;\r\n        uint price;\r\n        address owner;\r\n        uint lastUpdate;\r\n    }\r\n\r\n    address manager;\r\n    Area[] public soldAreas;\r\n    mapping(string => address) areaIdToOwner;\r\n    mapping(string => uint) areaIdToIndex;\r\n    mapping(string => bool) enabledAreas;\r\n    uint public defaultPrice = 0.01 ether;\r\n\r\n    modifier onlyOwner() {\r\n        require(manager == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier percentage(uint percents) {\r\n        require(percents >= 0 && percents <= 100);\r\n        _;\r\n    }\r\n\r\n    function Etharea() public {\r\n        manager = msg.sender;\r\n    }\r\n\r\n    function buy(string areaId) public payable {\r\n        require(msg.sender != address(0));\r\n        require(!isContract(msg.sender));\r\n        require(areaIdToOwner[areaId] != msg.sender);\r\n        require(enabledAreas[areaId]);\r\n        if (areaIdToOwner[areaId] == address(0)) {\r\n            firstBuy(areaId);\r\n        } else {\r\n            buyFromOwner(areaId);\r\n        }\r\n        manager.transfer(address(this).balance);\r\n    }\r\n\r\n    function firstBuy(string areaId) private {\r\n        uint priceRisePercent;\r\n        (priceRisePercent,) = getPriceRiseAndFeePercent(defaultPrice);\r\n        require(msg.value == defaultPrice);\r\n        Area memory newArea = Area({\r\n            id: areaId,\r\n            price: defaultPrice.div(100).mul(priceRisePercent.add(100)),\r\n            owner: msg.sender,\r\n            lastUpdate: now\r\n            });\r\n\r\n        uint index = soldAreas.push(newArea).sub(1);\r\n        areaIdToIndex[areaId] = index;\r\n        areaIdToOwner[areaId] = msg.sender;\r\n    }\r\n\r\n    function buyFromOwner(string areaId) private {\r\n        Area storage areaToChange = soldAreas[areaIdToIndex[areaId]];\r\n        require(msg.value == areaToChange.price);\r\n\r\n        uint priceRisePercent;\r\n        uint transactionFeePercent;\r\n        (priceRisePercent, transactionFeePercent) = getPriceRiseAndFeePercent(areaToChange.price);\r\n        address oldOwner = areaIdToOwner[areaId];\r\n        uint payment = msg.value.div(100).mul(uint(100).sub(transactionFeePercent));\r\n        uint newPrice = areaToChange.price.div(100).mul(priceRisePercent.add(100));\r\n\r\n        areaToChange.owner = msg.sender;\r\n        areaToChange.lastUpdate = now;\r\n        areaIdToOwner[areaId] = msg.sender;\r\n        areaToChange.price = newPrice;\r\n        oldOwner.transfer(payment);\r\n    }\r\n\r\n    function getSoldAreasCount() public view returns (uint) {\r\n        return soldAreas.length;\r\n    }\r\n\r\n    function getBalance() public onlyOwner view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getAreaOwner(string areaId) public view returns (address) {\r\n        return areaIdToOwner[areaId];\r\n    }\r\n\r\n    function getAreaIndex(string areaId) public view returns (uint) {\r\n        uint areaIndex = areaIdToIndex[areaId];\r\n        Area memory area = soldAreas[areaIndex];\r\n        require(keccak256(area.id) == keccak256(areaId));\r\n        return areaIndex;\r\n    }\r\n\r\n    function setDefaultPrice(uint newPrice) public onlyOwner {\r\n        defaultPrice = newPrice;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        require(address(this).balance > 0);\r\n        manager.transfer(address(this).balance);\r\n    }\r\n\r\n    function getPriceRiseAndFeePercent(uint currentPrice)\r\n    public pure returns (uint, uint)\r\n    {\r\n        if (currentPrice >= 0.01 ether && currentPrice < 0.15 ether) {\r\n            return (100, 10);\r\n        }\r\n\r\n        if (currentPrice >= 0.15 ether && currentPrice < 1 ether) {\r\n            return (60, 6);\r\n        }\r\n\r\n        if (currentPrice >= 1 ether && currentPrice < 4 ether) {\r\n            return (40, 5);\r\n        }\r\n\r\n        if (currentPrice >= 4 ether && currentPrice < 10 ether) {\r\n            return (30, 4);\r\n        }\r\n\r\n        if (currentPrice >= 10 ether) {\r\n            return (25, 3);\r\n        }\r\n    }\r\n\r\n    function enableArea(string areaId) public onlyOwner {\r\n        require(!enabledAreas[areaId]);\r\n        enabledAreas[areaId] = true;\r\n    }\r\n\r\n    function isAreaEnabled(string areaId) public view returns (bool) {\r\n        return enabledAreas[areaId];\r\n    }\r\n\r\n    function isContract(address userAddress) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(userAddress) }\r\n        return size > 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"areaId\",\"type\":\"string\"}],\"name\":\"getAreaIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSoldAreasCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"areaId\",\"type\":\"string\"}],\"name\":\"enableArea\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"areaId\",\"type\":\"string\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"areaId\",\"type\":\"string\"}],\"name\":\"getAreaOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setDefaultPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"soldAreas\",\"outputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"lastUpdate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"name\":\"getPriceRiseAndFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"areaId\",\"type\":\"string\"}],\"name\":\"isAreaEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Etharea","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fab836a0073e7d1fe8b018890d28751d9c4cfbfeccf8736b501ad83bc7735486"}]}