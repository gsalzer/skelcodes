{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract MintTokensInterface {\r\n    \r\n  function mint(address _to, uint256 _amount) public returns (bool);\r\n    \r\n}\r\n\r\ncontract TokenDistributor is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  bool public stopContract = false;\r\n    \r\n  MintTokensInterface public crowdsale = MintTokensInterface(0x2D3E7D4870a51b918919E7B851FE19983E4c38d5);\r\n  \r\n  mapping(address => bool) public authorized;\r\n\r\n  mapping(address => uint) public balances;\r\n\r\n  address[] public rewardHolders;\r\n\r\n  event RewardTransfer(address indexed to, uint amount);\r\n\r\n  modifier onlyAuthorized() {\r\n    require(msg.sender == owner || authorized[msg.sender]);\r\n    _;\r\n  }\r\n  \r\n  function setStopContract(bool newStopContract) public onlyOwner {\r\n    stopContract = newStopContract;\r\n  }\r\n  \r\n  function addAuthorized(address to) public onlyOwner {\r\n    authorized[to] = true;\r\n  }\r\n  \r\n  function removeAuthorized(address to) public onlyOwner {\r\n    authorized[to] = false;\r\n  }\r\n    \r\n  function mintBatch(address[] wallets, uint[] tokens) public onlyOwner {\r\n    for(uint i=0; i<wallets.length; i++) crowdsale.mint(wallets[i], tokens[i]);\r\n  }\r\n\r\n  function mintAuthorizedBatch(address[] wallets, uint[] tokens) public onlyAuthorized {\r\n    for(uint i=0; i<wallets.length; i++) crowdsale.mint(wallets[i], tokens[i]);\r\n  }\r\n\r\n  function isContract(address addr) public view returns(bool) {\r\n    uint codeLength;\r\n    assembly {\r\n      // Retrieve the size of the code on target address, this needs assembly .\r\n      codeLength := extcodesize(addr)\r\n    }\r\n    return codeLength > 0;\r\n  }\r\n  \r\n  function mintAuthorizedBatchWithBalances(address[] wallets, uint[] tokens) public onlyAuthorized {\r\n    address wallet;\r\n    uint reward;\r\n    bool isItContract;\r\n    for(uint i=0; i<wallets.length; i++) {\r\n      wallet = wallets[i];\r\n      isItContract = isContract(wallet);\r\n      if(!isItContract || (isItContract && !stopContract)) {\r\n        reward = tokens[i];\r\n        crowdsale.mint(wallet, reward);\r\n        if(balances[wallet] == 0) {\r\n          rewardHolders.push(wallet);\r\n        }\r\n        balances[wallet] = balances[wallet].add(reward);\r\n        emit RewardTransfer(wallet, reward);\r\n      }\r\n    }\r\n  }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"stopContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallets\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"mintAuthorizedBatchWithBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStopContract\",\"type\":\"bool\"}],\"name\":\"setStopContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallets\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallets\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"mintAuthorizedBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenDistributor","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://760f747f93ce81a830c4ab4bd2651ff5de4e0ef25391f130bce53a5fbd9e38b3"}]}