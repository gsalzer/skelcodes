{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n/** \r\n * Created by RigCraft Team\r\n * If you have any questions please visit the official discord channel\r\n * https://discord.gg/zJCf7Fh\r\n * or read The FAQ at \r\n * https://rigcraft.io/#faq\r\n **/\r\n\r\ncontract ERC721Basic {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data ) public;\r\n}\r\n\r\ncontract ERC721Receiver {\r\n\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  function onERC721Received(address _from,uint256 _tokenId,bytes _data) public returns(bytes4);\r\n}\r\n\r\ncontract ERC721Metadata {\r\n   \r\n    function tokenURI(uint256 _tokenId) external view returns (string);\r\n}\r\n\r\ncontract Administration\r\n{\r\n    address owner;\r\n    bool active = true;\r\n    bool open = true;\r\n    \r\n    function Administration() public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() \r\n    {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n    \r\n    modifier isActive()\r\n    {\r\n        require(active == true);\r\n        _;\r\n    }\r\n    \r\n    modifier isOpen()\r\n    {\r\n        require(open == true);\r\n        _;\r\n    }\r\n    \r\n    function setActive(bool _active) external onlyOwner\r\n    {\r\n        active = _active;\r\n    }\r\n    \r\n    function setOpen(bool _open) external onlyOwner\r\n    {\r\n        open = _open;\r\n    }\r\n}\r\n\r\n// core\r\ncontract RigCraftPresalePackageToken is ERC721Basic, Administration, ERC721Metadata {\r\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n    \r\n    struct PresalePackage\r\n    {\r\n        uint8 packageId;\r\n        uint16 serialNumber;\r\n    }\r\n    \r\n    PresalePackage[] packages;\r\n    \r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) internal tokenOwner;\r\n    mapping (uint256 => address) internal tokenApprovals;\r\n    mapping (address => uint256) internal ownedTokensCount;\r\n    mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n    \r\n    RigCraftPresalePackageManager private presaleHandler;\r\n    string URIBase;\r\n    \r\n    string public constant name = \"RigCraftPresalePackage\";\r\n    string public constant symbol = \"RCPT\";\r\n    \r\n    function SetPresaleHandler(address addr) external onlyOwner\r\n    {\r\n        presaleHandler = RigCraftPresalePackageManager(addr);\r\n    }\r\n    \r\n    function setURIBase(string _base) external onlyOwner\r\n    {\r\n        URIBase = _base;\r\n    }\r\n    \r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(ownerOf(_tokenId) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        require(isApprovedOrOwner(msg.sender, _tokenId));\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * PUBLIC INTERFACE\r\n    **/\r\n    function balanceOf(address _owner) public view isOpen returns (uint256) {\r\n        require(_owner != address(0));\r\n        return ownedTokensCount[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view isOpen returns (address) {\r\n        address owner = tokenOwner[_tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n\r\n    function exists(uint256 _tokenId) public view isOpen returns (bool) {\r\n        address owner = tokenOwner[_tokenId];\r\n        return owner != address(0);\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return packages.length;\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public\r\n    isOpen\r\n    isActive\r\n    {\r\n        address owner = ownerOf(_tokenId);\r\n        require(_to != owner);\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n        \r\n        if (getApproved(_tokenId) != address(0) || _to != address(0)) {\r\n            tokenApprovals[_tokenId] = _to;\r\n            emit Approval(owner, _to, _tokenId);\r\n        }\r\n    }\r\n    \r\n    function getApproved(uint256 _tokenId) public view isOpen returns (address) {\r\n        return tokenApprovals[_tokenId];\r\n    }\r\n    \r\n    function setApprovalForAll(address _to, bool _approved) public\r\n    isActive\r\n    isOpen\r\n    {\r\n        require(_to != msg.sender);\r\n        operatorApprovals[msg.sender][_to] = _approved;\r\n        emit ApprovalForAll(msg.sender, _to, _approved);\r\n    }\r\n\r\n    function isApprovedForAll( address _owner, address _operator) public view\r\n    isOpen\r\n    returns (bool)\r\n    {\r\n        return operatorApprovals[_owner][_operator];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public\r\n    canTransfer(_tokenId)\r\n    isActive\r\n    isOpen\r\n    {\r\n        require(_from != address(0));\r\n        require(_to != address(0));\r\n        \r\n        clearApproval(_from, _tokenId);\r\n        removeTokenFrom(_from, _tokenId);\r\n        addTokenTo(_to, _tokenId);\r\n        \r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n    \r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public\r\n    canTransfer(_tokenId)\r\n    isActive\r\n    isOpen\r\n    {\r\n        safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data)\r\n    public\r\n    canTransfer(_tokenId)\r\n    isActive\r\n    isOpen\r\n    {\r\n        transferFrom(_from, _to, _tokenId);\r\n        require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n    }\r\n\r\n    /**\r\n    * INTERNALS\r\n    **/\r\n    function isApprovedOrOwner(address _spender,uint256 _tokenId) internal view\r\n    returns (bool)\r\n    {\r\n        address owner = ownerOf(_tokenId);\r\n        return (_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender));\r\n    }\r\n    \r\n    function clearApproval(address _owner, uint256 _tokenId) internal {\r\n        require(ownerOf(_tokenId) == _owner);\r\n        if (tokenApprovals[_tokenId] != address(0)) {\r\n            tokenApprovals[_tokenId] = address(0);\r\n            emit Approval(_owner, address(0), _tokenId);\r\n        }\r\n    }\r\n\r\n    function addTokenTo(address _to, uint256 _tokenId) internal \r\n    {\r\n        require(tokenOwner[_tokenId] == address(0));\r\n        tokenOwner[_tokenId] = _to;\r\n        ownedTokensCount[_to] += 1;\r\n    }\r\n\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal \r\n    {\r\n        require(ownerOf(_tokenId) == _from);\r\n        require(ownedTokensCount[_from] > 0);\r\n        ownedTokensCount[_from] -= 1;\r\n        tokenOwner[_tokenId] = address(0);\r\n    }\r\n\r\n    function checkAndCallSafeTransfer(address _from, address _to, uint256 _tokenId, bytes _data)\r\n    internal\r\n    returns (bool)\r\n    {\r\n        uint256 codeSize;\r\n        assembly { codeSize := extcodesize(_to) }\r\n        if (codeSize == 0) {\r\n            return true;\r\n        }\r\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\r\n        return (retval == ERC721_RECEIVED);\r\n    }\r\n    \r\n    function tokenURI(uint256 _tokenId) external view returns (string)\r\n    {\r\n        string memory tokenNumber = uint2str(_tokenId);\r\n        \r\n        uint pos = bytes(URIBase).length;\r\n        bytes memory retVal  = new bytes(bytes(tokenNumber).length + bytes(URIBase).length);\r\n        uint i = 0;\r\n        \r\n        for(i = 0; i < bytes(URIBase).length; ++i)\r\n        {\r\n            retVal[i] = bytes(URIBase)[i];\r\n        }\r\n        for(i = 0; i < bytes(tokenNumber).length; ++i)\r\n        {\r\n            retVal[pos + i] = bytes(tokenNumber)[i];\r\n        }\r\n        \r\n        return string(retVal);\r\n    }\r\n    \r\n    function uint2str(uint256 i) internal pure returns (string)\r\n    {\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint length;\r\n        while (j != 0){\r\n            length++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(length);\r\n        uint k = length - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n    \r\n    // Get all token IDs of address\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) \r\n    {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n        \r\n        if (tokenCount == 0) \r\n        {\r\n            // Return an empty array\r\n            return new uint256[](0);\r\n        } else \r\n        {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 resultIndex = 0;\r\n            \r\n            // We count on the fact that all cats have IDs starting at 1 and increasing\r\n            // sequentially up to the totalCat count.\r\n            uint256 tokenId;\r\n            \r\n            for (tokenId = 0; tokenId < packages.length; tokenId++) \r\n            {\r\n                if (tokenOwner[tokenId] == _owner) \r\n                {\r\n                    result[resultIndex] = tokenId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n        \r\n            return result;\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * EXTERNALS\r\n    **/\r\n    function GetTokenData(uint256 _tokenId) external view returns(uint8 presalePackadeId, uint16 serialNO) \r\n    {\r\n        require(_tokenId < packages.length);\r\n        \r\n        presalePackadeId = packages[_tokenId].packageId;\r\n        serialNO = packages[_tokenId].serialNumber;\r\n    }\r\n    \r\n    function CreateToken(address _owner, uint8 _packageId, uint16 _serial) external\r\n    isActive\r\n    isOpen\r\n    {\r\n        require(msg.sender == address(presaleHandler));\r\n        uint256 tokenId = packages.length;\r\n        packages.length += 1;\r\n        \r\n        packages[tokenId].packageId = _packageId;\r\n        packages[tokenId].serialNumber = _serial;\r\n        \r\n        addTokenTo(_owner, tokenId);\r\n    }\r\n}\r\n\r\n// presale\r\ncontract RigCraftPresalePackageManager\r\n{\r\n    address owner;\r\n    \r\n    bool public isActive;\r\n    \r\n    uint16[]    public presalePackSold;\r\n    uint16[]    public presalePackLimit;\r\n    uint256[]   public presalePackagePrice;\r\n    \r\n    mapping(address=>uint256) addressRefferedCount;\r\n    mapping(address=>uint256) addressRefferredSpending;\r\n    address[] referralAddressIndex;\r\n    \r\n    uint256 public totalFundsSoFar;\r\n    \r\n    RigCraftPresalePackageToken private presaleTokenContract;\r\n    \r\n    function RigCraftPresalePackageManager() public\r\n    {\r\n        owner = msg.sender;\r\n        isActive = false;\r\n        presaleTokenContract = RigCraftPresalePackageToken(address(0));\r\n        \r\n        presalePackSold.length     = 5;\r\n        presalePackLimit.length    = 5;\r\n        presalePackagePrice.length = 5;\r\n       \r\n        // starter pack \r\n        presalePackLimit[0]    = 65000;\r\n        presalePackagePrice[0] = 0.1 ether;\r\n        \r\n        // snow white\r\n        presalePackLimit[1]    = 50;\r\n        presalePackagePrice[1] = 0.33 ether;\r\n        \r\n        // 6x66 black\r\n        presalePackLimit[2]    = 66;\r\n        presalePackagePrice[2] = 0.66 ether;\r\n        \r\n        // blue legandary\r\n        presalePackLimit[3]    = 50;\r\n        presalePackagePrice[3] = 0.99 ether;\r\n        \r\n        // lifetime share\r\n        presalePackLimit[4]    = 100;\r\n        presalePackagePrice[4] = 1 ether;\r\n    }\r\n    \r\n    function SetActive(bool _active) external\r\n    {\r\n        require(msg.sender == owner);\r\n        isActive = _active;\r\n    } \r\n    \r\n    function SetPresaleHandler(address addr) external\r\n    {\r\n        require(msg.sender == owner);\r\n        presaleTokenContract = RigCraftPresalePackageToken(addr);\r\n    }\r\n    \r\n    function AddNewPresalePackage(uint16 limit, uint256 price) external \r\n    {\r\n        require(msg.sender == owner);\r\n        require(limit > 0);\r\n        require(isActive);\r\n        \r\n        presalePackLimit.length += 1;\r\n        presalePackLimit[presalePackLimit.length-1] = limit;\r\n        \r\n        presalePackagePrice.length += 1;\r\n        presalePackagePrice[presalePackagePrice.length-1] = price;\r\n        \r\n        presalePackSold.length += 1;\r\n    }\r\n    \r\n    // ETH handler\r\n    function BuyPresalePackage(uint8 packageId, address referral) external payable\r\n    {\r\n        require(isActive);\r\n        require(packageId < presalePackLimit.length);\r\n        require(msg.sender != referral);\r\n        require(presalePackLimit[packageId] > presalePackSold[packageId]);\r\n\r\n        require(presaleTokenContract != RigCraftPresalePackageToken(address(0)));\r\n\r\n        // check money\r\n        require(msg.value >= presalePackagePrice[packageId]);\r\n        \r\n        presalePackSold[packageId]++;\r\n        \r\n        totalFundsSoFar += msg.value;\r\n        \r\n        presaleTokenContract.CreateToken(msg.sender, packageId, presalePackSold[packageId]);\r\n        \r\n        if(referral != address(0))\r\n        {\r\n            if(addressRefferedCount[referral] == 0)\r\n            {\r\n                referralAddressIndex.length += 1;\r\n                referralAddressIndex[referralAddressIndex.length-1] = referral;\r\n            }\r\n            addressRefferedCount[referral] += 1;\r\n            addressRefferredSpending[referral] += msg.value;\r\n        }\r\n    }\r\n\r\n    // referral system \r\n    function GetAllReferralAddresses() external view returns (address[] referred)\r\n    {\r\n        referred = referralAddressIndex;\r\n    }\r\n    \r\n    function GetReferredCount() external view returns (uint256)\r\n    {\r\n        return referralAddressIndex.length;\r\n    }\r\n    \r\n    function GetReferredAt(uint256 idx) external view returns (address)\r\n    {\r\n        require(idx < referralAddressIndex.length);\r\n        return referralAddressIndex[idx];\r\n    }\r\n    \r\n    function GetReferralDataOfAddress(address addr) external view returns (uint256 count, uint256 spending)\r\n    {\r\n        count = addressRefferedCount[addr];\r\n        spending = addressRefferredSpending[addr];\r\n    }\r\n\r\n    // withdraw \r\n    function withdraw() external\r\n    {\r\n        require(msg.sender == owner);\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"GetTokenData\",\"outputs\":[{\"name\":\"presalePackadeId\",\"type\":\"uint8\"},{\"name\":\"serialNO\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_packageId\",\"type\":\"uint8\"},{\"name\":\"_serial\",\"type\":\"uint16\"}],\"name\":\"CreateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"setOpen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetPresaleHandler\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_base\",\"type\":\"string\"}],\"name\":\"setURIBase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"RigCraftPresalePackageToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f5e6df5112b99f1e4d1b3efc059cbe64857243af357ebf9dbbd8110b4ba1a57e"}]}