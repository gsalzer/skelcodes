{"status":"1","message":"OK","result":[{"SourceCode":"// v7\r\n\r\n/**\r\n * Vault.sol\r\n * Vault contract is used for storing all team/founder tokens amounts from the crowdsale. It adds team members and their amounts in a list.\r\n * Vault securely stores team members funds and freezes the particular X amount on set X amount of time.\r\n * It also gives the ability to release the funds when the X set time limit is met.\r\n */\r\n\r\npragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title TokenContract\r\n * @dev Token contract interface with transfer and balanceOf functions which need to be implemented\r\n */\r\ninterface TokenContract {\r\n\r\n  /**\r\n  * @dev Transfer funds to recipient address\r\n  * @param _recipient Recipients address\r\n  * @param _amount Amount to transfer\r\n  */\r\n  function transfer(address _recipient, uint256 _amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Return balance of holders address\r\n   * @param _holder Holders address\r\n   */\r\n  function balanceOf(address _holder) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title Vault\r\n * Vault contract is used for storing all team/founder tokens amounts from the crowdsale. It adds team members and their amounts in a list.\r\n * Vault securely stores team members funds and freezes the particular X amount on set X amount of time.\r\n * It also gives the ability to release the funds when the X set time limit is met.\r\n */\r\ncontract Vault is Ownable {\r\n  TokenContract public tkn;\r\n\r\n  uint256 public releaseDate;\r\n\r\n  struct Member {\r\n    address memberAddress;\r\n    uint256 tokens;\r\n  }\r\n\r\n  Member[] public team;\r\n\r\n  /**\r\n   * @dev The Vault constructor sets the release date in epoch time\r\n   */\r\n  constructor() public {\r\n    releaseDate = 1561426200; // set release date in epoch\r\n  }\r\n\r\n  /**\r\n   * @dev Release tokens from vault - unlock them and destroy contract\r\n   */\r\n  function releaseTokens() onlyOwner public {\r\n    require(releaseDate > block.timestamp);\r\n    uint256 amount;\r\n    for (uint256 i = 0; i < team.length; i++) {\r\n      require(tkn.transfer(team[i].memberAddress, team[i].tokens));\r\n    }\r\n    amount = tkn.balanceOf(address(this));\r\n    require(tkn.transfer(owner, amount));\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  /**\r\n   * @dev Add members to vault to lock funds\r\n   * @param _member Member to be added to the vault\r\n   * @param _tokens Amount of tokens to be locked\r\n   */\r\n  function addMembers(address[] _member, uint256[] _tokens) onlyOwner public {\r\n    require(_member.length > 0);\r\n    require(_member.length == _tokens.length);\r\n    Member memory member;\r\n    for (uint256 i = 0; i < _member.length; i++) {\r\n      member.memberAddress = _member[i];\r\n      member.tokens = _tokens[i];\r\n      team.push(member);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tkn\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"team\",\"outputs\":[{\"name\":\"memberAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"addMembers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Vault","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://72b4e370c1992bad29661101be48c62e2df51f5242b78ae43b81b55c915eaff7"}]}