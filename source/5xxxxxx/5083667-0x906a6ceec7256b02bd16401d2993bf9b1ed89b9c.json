{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n/**\r\n* @title PREVIP CCS SALE CONTRACT\r\n* @dev ERC-20 Token Standard Compliant\r\n* @notice Contact ico@cacaoshares.com\r\n* @author Fares A. Akel C.\r\n* ================================================\r\n* CACAO SHARES IS A DIGITAL ASSET\r\n* THAT ENABLES ANYONE TO OWN CACAO TREES\r\n* OF THE CRIOLLO TYPE IN SUR DEL LAGO, VENEZUELA\r\n* ================================================\r\n*/\r\n\r\n/**\r\n* @title SafeMath by OpenZeppelin\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\n/**\r\n* @title Fiat currency contract\r\n* @dev This contract will return the value of 0.01$ USD in wei\r\n*/\r\ncontract FiatContract {\r\n \r\n  function USD(uint _id) constant returns (uint256);\r\n\r\n}\r\n\r\n/**\r\n* @title DateTime contract\r\n* @dev This contract will return the unix value of any date\r\n*/\r\ncontract DateTimeAPI {\r\n        \r\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) constant returns (uint timestamp);\r\n\r\n}\r\n\r\n/**\r\n* @title ERC20 Token interface\r\n*/\r\ncontract token {\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n}\r\n\r\n/**\r\n* @title PREVIPCCS sale main contract\r\n*/\r\ncontract PREVIPCCS {\r\n\r\n\r\n    FiatContract price = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591); // MAINNET ADDRESS\r\n    //FiatContract price = FiatContract(0x2CDe56E5c8235D6360CCbb0c57Ce248Ca9C80909); // TESTNET ADDRESS (ROPSTEN)\r\n\r\n    DateTimeAPI dateTimeContract = DateTimeAPI(0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce);//Main\r\n    //DateTimeAPI dateTimeContract = DateTimeAPI(0x1F0a2ba4B115bd3e4007533C52BBd30C17E8B222);//Ropsten\r\n\r\n    using SafeMath for uint256;\r\n    //This sale have 2 stages\r\n    enum State {\r\n        PreVIP,\r\n        Successful\r\n    }\r\n    //public variables\r\n    State public state = State.PreVIP; //Set initial stage\r\n    uint256 public startTime = dateTimeContract.toTimestamp(2018,2,13,15); //From Feb 14 00:00 (JST - GMT+9)\r\n    uint256 public PREVIPdeadline = dateTimeContract.toTimestamp(2018,2,28,15); //Stop Mar 1 00:00 (JST - GMT+9)\r\n    uint256 public totalRaised; //eth in wei\r\n    uint256 public totalDistributed; //tokens distributed\r\n    uint256 public completedAt; //Time stamp when the sale finish\r\n    token public tokenReward; //Address of the valid token used as reward\r\n    address public creator; //Address of the contract deployer\r\n    string public campaignUrl; //Web site of the campaign\r\n    string public version = '1';\r\n\r\n    //events for log\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(\r\n        address _creator,\r\n        string _url);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n    /**\r\n    * @notice PREVIPCCS constructor\r\n    * @param _campaignUrl is the ICO _url\r\n    * @param _addressOfTokenUsedAsReward is the token totalDistributed\r\n    */\r\n    function PREVIPCCS (string _campaignUrl, token _addressOfTokenUsedAsReward) public {\r\n        creator = msg.sender;\r\n        campaignUrl = _campaignUrl;\r\n        tokenReward = token(_addressOfTokenUsedAsReward);\r\n\r\n        LogFunderInitialized(\r\n            creator,\r\n            campaignUrl\r\n            );\r\n    }\r\n\r\n    /**\r\n    * @notice contribution handler\r\n    */\r\n    function contribute() public notFinished payable {\r\n        require(now >= startTime);\r\n        require(msg.value >= 1 szabo);\r\n\r\n        uint256 tokenBought; //Variable to store amount of tokens bought\r\n        uint256 tokenPrice = price.USD(0); //1 cent value in wei\r\n\r\n        totalRaised = totalRaised.add(msg.value); //Save the total eth totalRaised (in wei)\r\n\r\n        tokenPrice = tokenPrice.mul(36); //0.36$ USD value in wei \r\n        tokenPrice = tokenPrice.div(10 ** 8); //Change base 18 to 10\r\n\r\n        tokenBought = msg.value.div(tokenPrice); //Base 18/ Base 10 = Base 8\r\n        tokenBought = tokenBought.mul(10 **10); //Base 8 to Base 18\r\n        \r\n        //Discount calculation\r\n        if (msg.value >= 10 ether){\r\n            tokenBought = tokenBought.mul(123);\r\n            tokenBought = tokenBought.div(100); //+10% discount reflected as +23% bonus\r\n        } else if (msg.value >= 1 ether){\r\n            tokenBought = tokenBought.mul(11);\r\n            tokenBought = tokenBought.div(10); //+5% discount reflected as +10% bonus\r\n        }\r\n\r\n        totalDistributed = totalDistributed.add(tokenBought); //Save to total tokens distributed\r\n        \r\n        tokenReward.transfer(msg.sender,tokenBought); //Send Tokens\r\n        \r\n        //LOGS\r\n        LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        LogContributorsPayout(msg.sender,tokenBought);\r\n\r\n        checkIfFundingCompleteOrExpired();\r\n    }\r\n\r\n    /**\r\n    * @notice Function to know how many tokens you will receive at current time\r\n    * @param _amountOfWei How much ETH you will invest in Wei (1ETH = 10^18 WEI)\r\n    */\r\n    function calculateTokens(uint256 _amountOfWei) public view returns(uint256) {\r\n        require(_amountOfWei >= 1 szabo);\r\n        \r\n        uint256 tokenBought; //Variable to store amount of tokens bought\r\n        uint256 tokenPrice = price.USD(0); //1 cent value in wei\r\n\r\n        tokenPrice = tokenPrice.mul(36); //0.36$ USD value in wei \r\n        tokenPrice = tokenPrice.div(10 ** 8); //Change base 18 to 10\r\n\r\n        tokenBought = _amountOfWei.div(tokenPrice); //Base 18/ Base 10 = Base 8\r\n        tokenBought = tokenBought.mul(10 **10); //Base 8 to Base 18\r\n\r\n        //Discount calculation\r\n        if (_amountOfWei >= 10 ether){\r\n            tokenBought = tokenBought.mul(123);\r\n            tokenBought = tokenBought.div(100); //+10% discount reflected as +23% bonus\r\n        } else if (_amountOfWei >= 1 ether){\r\n            tokenBought = tokenBought.mul(11);\r\n            tokenBought = tokenBought.div(10); //+5% discount reflected as +10% bonus\r\n        }\r\n\r\n        return tokenBought;\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice Function to know how many tokens left on contract\r\n    */\r\n    function remainigTokens() public view returns(uint256) {\r\n        return tokenReward.balanceOf(this);\r\n    } \r\n\r\n    /**\r\n    * @notice check status\r\n    */\r\n    function checkIfFundingCompleteOrExpired() public {\r\n\r\n        if(now > PREVIPdeadline && state != State.Successful){\r\n\r\n            state = State.Successful; //Sale becomes Successful\r\n            completedAt = now; //PreVIP finished\r\n\r\n            LogFundingSuccessful(totalRaised); //we log the finish\r\n\r\n            finished();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Function for closure handle\r\n    */\r\n    function finished() public { //When finished eth are transfered to creator\r\n        require(state == State.Successful); //Only when sale finish\r\n        \r\n        uint256 remainder = tokenReward.balanceOf(this); //Remaining tokens on contract\r\n\r\n        require(creator.send(this.balance)); //Funds send to creator\r\n        tokenReward.transfer(creator,remainder); //remainder tokens send to creator\r\n\r\n        LogBeneficiaryPaid(creator);\r\n        LogContributorsPayout(creator, remainder);\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice Function to claim any token stuck on contract\r\n    */\r\n    function claimTokens(token _address) public{\r\n        require(state == State.Successful); //Only when sale finish\r\n        require(msg.sender == creator);\r\n\r\n        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\r\n        _address.transfer(creator,remainder); //Transfer tokens to creator\r\n        \r\n    }\r\n\r\n    /**\r\n    * @notice Function to claim any eth stuck on contract\r\n    */\r\n    function claimEth() public { //When finished eth are transfered to creator\r\n        require(state == State.Successful); //Only when sale finish\r\n        require(msg.sender == creator);\r\n\r\n        require(creator.send(this.balance)); //Funds send to creator\r\n    }\r\n\r\n    /**\r\n    * @notice Function to handle eth transfers\r\n    * @dev BEWARE: if a call to this functions doesn't have\r\n    * enought gas, transaction could not be finished\r\n    */\r\n    function () public payable {\r\n        contribute();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PREVIPdeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amountOfWei\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainigTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaignUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_campaignUrl\",\"type\":\"string\"},{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"}]","ContractName":"PREVIPCCS","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000315ce59fafd3a8d562b7ec1c8542382d2710b06c000000000000000000000000000000000000000000000000000000000000001868747470733a2f2f636163616f7368617265732e636f6d2f0000000000000000","Library":"","SwarmSource":"bzzr://660118e2446dd0c83a967592d6855907ec1353ac7c3377d40d9a2c40e10117d1"}]}