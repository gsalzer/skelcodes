{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\n * ERC223 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n * see https://github.com/ethereum/EIPs/issues/223\r\n */\r\ncontract ERC223 {\r\n    function totalSupply() constant public returns (uint256 outTotalSupply);\r\n    function balanceOf( address _owner) constant public returns (uint256 balance);\r\n    function transfer( address _to, uint256 _value) public returns (bool success);\r\n    function transfer( address _to, uint256 _value, bytes _data) public returns (bool success);\r\n    function transferFrom( address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve( address _spender, uint256 _value) public returns (bool success);\r\n    function allowance( address _owner, address _spender) constant public returns (uint256 remaining);\r\n    event Transfer( address indexed _from, address indexed _to, uint _value, bytes _data);\r\n    event Approval( address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract ERC223Receiver { \r\n    /**\r\n     * @dev Standard ERC223 function that will handle incoming token transfers.\r\n     *\r\n     * @param _from  Token sender address.\r\n     * @param _value Amount of tokens.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n\r\n\r\n\r\n/// @title A base contract to control ownership\r\n/// @author cuilichen\r\ncontract OwnerBase {\r\n\r\n    // The addresses of the accounts that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n    \r\n    /// constructor\r\n    function OwnerBase() public {\r\n       ceoAddress = msg.sender;\r\n       cfoAddress = msg.sender;\r\n       cooAddress = msg.sender;\r\n    }\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n    \r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new COO\r\n    function setCFO(address _newCFO) external onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n    \r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) external onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCOO whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public onlyCOO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Standard ERC223 receiver\r\n */\r\ncontract RechargeMain is ERC223Receiver, OwnerBase {\r\n\r\n\tevent EvtCoinSetted(address coinContract);\r\n    \r\n\tevent EvtRecharge(address customer, uint amount);\r\n\r\n\t\r\n\tERC223 public coinContract;\r\n\t\r\n\t\r\n    function RechargeMain(address coin) public {\r\n\t\t// the creator of the contract is the initial CEO\r\n        ceoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n        cfoAddress = msg.sender;\r\n\t\t\r\n\t\tcoinContract = ERC223(coin);\r\n    }\r\n\r\n    /**\r\n     * Owner can update base information here.\r\n     */\r\n    function setCoinInfo(address coin) public {\r\n        require(msg.sender == ceoAddress || msg.sender == cooAddress);\r\n\t\t\r\n\t\tcoinContract = ERC223(coin);\r\n\t\t\r\n        emit EvtCoinSetted(coinContract);\r\n    }\r\n\t\r\n\t/// @dev receive token from coinContract\r\n\tfunction tokenFallback(address _from, uint _value, bytes ) public {\r\n\t\trequire(msg.sender == address(coinContract));\r\n\t\temit EvtRecharge(_from, _value);\r\n\t}\r\n    \r\n\t\r\n    function () public payable {\r\n        //fallback\r\n    }\r\n    \r\n    \r\n    /// transfer dead tokens to contract master\r\n    function withdrawTokens() external {\r\n\t\taddress myself = address(this);\r\n        uint256 fundNow = coinContract.balanceOf(myself);\r\n        coinContract.transfer(cfoAddress, fundNow);//token\r\n        \r\n        uint256 balance = myself.balance;\r\n        cfoAddress.transfer(balance);//eth\r\n    }\r\n    \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"setCoinInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"coin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"coinContract\",\"type\":\"address\"}],\"name\":\"EvtCoinSetted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EvtRecharge\",\"type\":\"event\"}]","ContractName":"RechargeMain","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007b34be3ad5ed1b760bedb9657f9647eca14687a9","Library":"","SwarmSource":"bzzr://6bb8147923a041ee92d3680b21c6232d8eca3a7157ef21ec509dd967d5fd9d85"}]}