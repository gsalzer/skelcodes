{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n* @title ICO CONTRACT\r\n* @dev ERC-20 Token Standard Complian\r\n*/\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public{\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract token {\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n}\r\n\r\n\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n  // The token being sold\r\n  token public token_reward;\r\n  // start and end timestamps where investments are allowed (both inclusive\r\n  \r\n  uint256 public start_time = now; //for testing\r\n  //uint256 public start_time = 1517846400; //02/05/2018 @ 4:00pm (UTC) or 5 PM (UTC + 1)\r\n  uint256 public end_Time = 1522454400; // 03/31/2018 @ 12:00am (UTC)\r\n\r\n  uint256 public phase_1_remaining_tokens  = 50000000 * (10 ** uint256(8));\r\n  uint256 public phase_2_remaining_tokens  = 50000000 * (10 ** uint256(8));\r\n  uint256 public phase_3_remaining_tokens  = 50000000 * (10 ** uint256(8));\r\n  uint256 public phase_4_remaining_tokens  = 50000000 * (10 ** uint256(8));\r\n  uint256 public phase_5_remaining_tokens  = 50000000 * (10 ** uint256(8));\r\n\r\n  uint256 public phase_1_bonus  = 40;\r\n  uint256 public phase_2_bonus  = 20;\r\n  uint256 public phase_3_bonus  = 15;\r\n  uint256 public phase_4_bonus  = 10;\r\n  uint256 public phase_5_bonus  = 5;\r\n\r\n  uint256 public token_price  = 2;// 2 cents\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n  // Ether to $ price\r\n  uint256 public eth_to_usd = 1000;\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  // rate change event\r\n  event EthToUsdChanged(address indexed owner, uint256 old_eth_to_usd, uint256 new_eth_to_usd);\r\n  \r\n  // constructor\r\n  function Crowdsale(address tokenContractAddress) public{\r\n    wallet = 0x9656e8520C1cc10721963F2E974761cf76Af81d8;//wallet where ETH will be transferred\r\n    token_reward = token(tokenContractAddress);\r\n  }\r\n  \r\n function tokenBalance() constant public returns (uint256){\r\n    return token_reward.balanceOf(this);\r\n  }\r\n\r\n  function getRate() constant public returns (uint256){\r\n    return eth_to_usd.mul(100).div(token_price);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= start_time && now <= end_Time;\r\n    bool allPhaseFinished = phase_5_remaining_tokens > 0;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    bool minPurchase = eth_to_usd*msg.value >= 100; // minimum purchase $100\r\n    return withinPeriod && nonZeroPurchase && allPhaseFinished && minPurchase;\r\n  }\r\n\r\n  // @return true if the admin can send tokens manually\r\n  function validPurchaseForManual() internal constant returns (bool) {\r\n    bool withinPeriod = now >= start_time && now <= end_Time;\r\n    bool allPhaseFinished = phase_5_remaining_tokens > 0;\r\n    return withinPeriod && allPhaseFinished;\r\n  }\r\n\r\n\r\n  // check token availibility for current phase and max allowed token balance\r\n  function checkAndUpdateTokenForManual(uint256 _tokens) internal returns (bool){\r\n    if(phase_1_remaining_tokens > 0){\r\n      if(_tokens > phase_1_remaining_tokens){\r\n        uint256 tokens_from_phase_2 = _tokens.sub(phase_1_remaining_tokens);\r\n        phase_1_remaining_tokens = 0;\r\n        phase_2_remaining_tokens = phase_2_remaining_tokens.sub(tokens_from_phase_2);\r\n      }else{\r\n        phase_1_remaining_tokens = phase_1_remaining_tokens.sub(_tokens);\r\n      }\r\n      return true;\r\n    }else if(phase_2_remaining_tokens > 0){\r\n      if(_tokens > phase_2_remaining_tokens){\r\n        uint256 tokens_from_phase_3 = _tokens.sub(phase_2_remaining_tokens);\r\n        phase_2_remaining_tokens = 0;\r\n        phase_3_remaining_tokens = phase_3_remaining_tokens.sub(tokens_from_phase_3);\r\n      }else{\r\n        phase_2_remaining_tokens = phase_2_remaining_tokens.sub(_tokens);\r\n      }\r\n      return true;\r\n    }else if(phase_3_remaining_tokens > 0){\r\n      if(_tokens > phase_3_remaining_tokens){\r\n        uint256 tokens_from_phase_4 = _tokens.sub(phase_3_remaining_tokens);\r\n        phase_3_remaining_tokens = 0;\r\n        phase_4_remaining_tokens = phase_4_remaining_tokens.sub(tokens_from_phase_4);\r\n      }else{\r\n        phase_3_remaining_tokens = phase_3_remaining_tokens.sub(_tokens);\r\n      }\r\n      return true;\r\n    }else if(phase_4_remaining_tokens > 0){\r\n      if(_tokens > phase_4_remaining_tokens){\r\n        uint256 tokens_from_phase_5 = _tokens.sub(phase_4_remaining_tokens);\r\n        phase_4_remaining_tokens = 0;\r\n        phase_5_remaining_tokens = phase_5_remaining_tokens.sub(tokens_from_phase_5);\r\n      }else{\r\n        phase_4_remaining_tokens = phase_4_remaining_tokens.sub(_tokens);\r\n      }\r\n      return true;\r\n    }else if(phase_5_remaining_tokens > 0){\r\n      if(_tokens > phase_5_remaining_tokens){\r\n        return false;\r\n      }else{\r\n        phase_5_remaining_tokens = phase_5_remaining_tokens.sub(_tokens);\r\n       }\r\n    }else{\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // function to transfer token manually\r\n  function transferManually(uint256 _tokens, address to_address) onlyOwner public returns (bool){\r\n    require(to_address != 0x0);\r\n    require(validPurchaseForManual());\r\n    require(checkAndUpdateTokenForManual(_tokens));\r\n    token_reward.transfer(to_address, _tokens);\r\n    return true;\r\n  }\r\n\r\n\r\n  // check token availibility for current phase and max allowed token balance\r\n  function transferIfTokenAvailable(uint256 _tokens, uint256 _weiAmount, address _beneficiary) internal returns (bool){\r\n\r\n    uint256 total_token_to_transfer = 0;\r\n    uint256 bonus = 0;\r\n    if(phase_1_remaining_tokens > 0){\r\n      if(_tokens > phase_1_remaining_tokens){\r\n        uint256 tokens_from_phase_2 = _tokens.sub(phase_1_remaining_tokens);\r\n        bonus = (phase_1_remaining_tokens.mul(phase_1_bonus).div(100)).add(tokens_from_phase_2.mul(phase_2_bonus).div(100));\r\n        phase_1_remaining_tokens = 0;\r\n        phase_2_remaining_tokens = phase_2_remaining_tokens.sub(tokens_from_phase_2);\r\n      }else{\r\n        phase_1_remaining_tokens = phase_1_remaining_tokens.sub(_tokens);\r\n        bonus = _tokens.mul(phase_1_bonus).div(100);\r\n      }\r\n      total_token_to_transfer = _tokens + bonus;\r\n    }else if(phase_2_remaining_tokens > 0){\r\n      if(_tokens > phase_2_remaining_tokens){\r\n        uint256 tokens_from_phase_3 = _tokens.sub(phase_2_remaining_tokens);\r\n        bonus = (phase_2_remaining_tokens.mul(phase_2_bonus).div(100)).add(tokens_from_phase_3.mul(phase_3_bonus).div(100));\r\n        phase_2_remaining_tokens = 0;\r\n        phase_3_remaining_tokens = phase_3_remaining_tokens.sub(tokens_from_phase_3);\r\n      }else{\r\n        phase_2_remaining_tokens = phase_2_remaining_tokens.sub(_tokens);\r\n        bonus = _tokens.mul(phase_2_bonus).div(100);\r\n      }\r\n      total_token_to_transfer = _tokens + bonus;\r\n    }else if(phase_3_remaining_tokens > 0){\r\n      if(_tokens > phase_3_remaining_tokens){\r\n        uint256 tokens_from_phase_4 = _tokens.sub(phase_3_remaining_tokens);\r\n        bonus = (phase_3_remaining_tokens.mul(phase_3_bonus).div(100)).add(tokens_from_phase_4.mul(phase_4_bonus).div(100));\r\n        phase_3_remaining_tokens = 0;\r\n        phase_4_remaining_tokens = phase_4_remaining_tokens.sub(tokens_from_phase_4);\r\n      }else{\r\n        phase_3_remaining_tokens = phase_3_remaining_tokens.sub(_tokens);\r\n        bonus = _tokens.mul(phase_3_bonus).div(100);\r\n      }\r\n      total_token_to_transfer = _tokens + bonus;\r\n    }else if(phase_4_remaining_tokens > 0){\r\n      if(_tokens > phase_4_remaining_tokens){\r\n        uint256 tokens_from_phase_5 = _tokens.sub(phase_4_remaining_tokens);\r\n        bonus = (phase_4_remaining_tokens.mul(phase_4_bonus).div(100)).add(tokens_from_phase_5.mul(phase_5_bonus).div(100));\r\n        phase_4_remaining_tokens = 0;\r\n        phase_5_remaining_tokens = phase_5_remaining_tokens.sub(tokens_from_phase_5);\r\n      }else{\r\n        phase_4_remaining_tokens = phase_4_remaining_tokens.sub(_tokens);\r\n        bonus = _tokens.mul(phase_4_bonus).div(100);\r\n      }\r\n      total_token_to_transfer = _tokens + bonus;\r\n    }else if(phase_5_remaining_tokens > 0){\r\n      if(_tokens > phase_5_remaining_tokens){\r\n        total_token_to_transfer = 0;\r\n      }else{\r\n        phase_5_remaining_tokens = phase_5_remaining_tokens.sub(_tokens);\r\n        bonus = _tokens.mul(phase_5_bonus).div(100);\r\n        total_token_to_transfer = _tokens + bonus;\r\n      }\r\n    }else{\r\n      total_token_to_transfer = 0;\r\n    }\r\n    if(total_token_to_transfer > 0){\r\n      token_reward.transfer(_beneficiary, total_token_to_transfer);\r\n      TokenPurchase(msg.sender, _beneficiary, _weiAmount, total_token_to_transfer);\r\n      return true;\r\n    }else{\r\n      return false;\r\n    }\r\n    \r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable public{\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n    uint256 weiAmount = msg.value;\r\n    // calculate token amount to be created\r\n    uint256 tokens = (weiAmount.mul(getRate())).div(10 ** uint256(10));\r\n    // Check is there are enough token available for current phase and per person  \r\n    require(transferIfTokenAvailable(tokens, weiAmount, beneficiary));\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    \r\n    forwardFunds();\r\n  }\r\n  \r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n  \r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > end_Time;\r\n  }\r\n  // function to transfer token back to owner\r\n  function transferBack(uint256 tokens, address to_address) onlyOwner public returns (bool){\r\n    token_reward.transfer(to_address, tokens);\r\n    return true;\r\n  }\r\n  // function to change rate\r\n  function changeEth_to_usd(uint256 _eth_to_usd) onlyOwner public returns (bool){\r\n    EthToUsdChanged(msg.sender, eth_to_usd, _eth_to_usd);\r\n    eth_to_usd = _eth_to_usd;\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"phase_5_remaining_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end_Time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase_4_remaining_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase_4_bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth_to_usd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase_2_bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase_1_remaining_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_reward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase_1_bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase_2_remaining_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase_3_bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"to_address\",\"type\":\"address\"}],\"name\":\"transferManually\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"to_address\",\"type\":\"address\"}],\"name\":\"transferBack\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eth_to_usd\",\"type\":\"uint256\"}],\"name\":\"changeEth_to_usd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase_5_bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase_3_remaining_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"old_eth_to_usd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_eth_to_usd\",\"type\":\"uint256\"}],\"name\":\"EthToUsdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e9e2a26b56cee3f832e7b6c044a26ddcc9760d52","Library":"","SwarmSource":"bzzr://89a994378a485f58c029c2cdd6aa9ca9beba46cf541b7bb669a4094f2623038c"}]}