{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;/*\r\n _ _____  ___   _ _  __ \r\n ` __ ___  ___  _  _  ,'   \r\n  `. __  ____   /__ ,'\r\n    `.  __  __ /  ,'       \r\n      `.__ _  /_,'\r\n        `. _ /,'\r\n          `./'             \r\n          ,/`.             \r\n        ,'/ __`.        \r\n      ,'_/_  _ _`.      \r\n    ,'__/_ ___ _  `.       \r\n  ,'_  /___ __ _ __ `.  \r\n '-.._/____   _  __  _`.\r\nDecentralized Securities Licensing\r\n*/contract PeerLicensing {\r\n\r\n\t// scaleFactor is used to convert Ether into tokens and vice-versa: they're of different\r\n\t// orders of magnitude, hence the need to bridge between the two.\r\n\tuint256 constant scaleFactor = 0x10000000000000000;  // 2^64\r\n\r\n\t// CRR = 50%\r\n\t// CRR is Cash Reserve Ratio (in this case Crypto Reserve Ratio).\r\n\t// For more on this: check out https://en.wikipedia.org/wiki/Reserve_requirement\r\n\tuint256 constant trickTax = 3;//divides flux'd fee and for every pass up\r\n\tint constant crr_n = 1; // CRR numerator\r\n\tint constant crr_d = 2; // CRR denominator\r\n\r\n\t// The price coefficient. Chosen such that at 1 token total supply\r\n\t// the amount in reserve is 10 ether and token price is 1 Ether.\r\n\tint constant price_coeff = -0x2793DB20E4C20163A;\r\n\r\n\t// Array between each address and their number of tokens.\r\n\t//mapping(address => uint256) public tokenBalance;\r\n\tmapping(address => uint256) public holdings_BULL;\r\n\tmapping(address => uint256) public holdings_BEAR;\r\n\t//cut down by a percentage when you sell out.\r\n\tmapping(address => uint256) public avgFactor_ethSpent;\r\n\r\n\t//Particle Coloring\r\n\t//this will change at the same rate in either market\r\n\t\t/*mapping(address => uint256) public souleculeEdgeR0;\r\n\t\tmapping(address => uint256) public souleculeEdgeG0;\r\n\t\tmapping(address => uint256) public souleculeEdgeB0;\r\n\t\tmapping(address => uint256) public souleculeEdgeR1;\r\n\t\tmapping(address => uint256) public souleculeEdgeG1;\r\n\t\tmapping(address => uint256) public souleculeEdgeB1;\r\n\t//this should change slower in a bull market. faster in a bear market\r\n\t\tmapping(address => uint256) public souleculeCoreR0;\r\n\t\tmapping(address => uint256) public souleculeCoreG0;\r\n\t\tmapping(address => uint256) public souleculeCoreB0;\r\n\t\tmapping(address => uint256) public souleculeCoreR1;\r\n\t\tmapping(address => uint256) public souleculeCoreG1;\r\n\t\tmapping(address => uint256) public souleculeCoreB1;*/\r\n\t\r\n\t// Array between each address and how much Ether has been paid out to it.\r\n\t// Note that this is scaled by the scaleFactor variable.\r\n\tmapping(address => address) public reff;\r\n\tmapping(address => uint256) public tricklePocket;\r\n\tmapping(address => uint256) public trickling;\r\n\tmapping(address => int256) public payouts;\r\n\r\n\t// Variable tracking how many tokens are in existence overall.\r\n\tuint256 public totalBondSupply_BULL;\r\n\tuint256 public totalBondSupply_BEAR;\r\n\r\n\t// Aggregate sum of all payouts.\r\n\t// Note that this is scaled by the scaleFactor variable.\r\n\tint256 totalPayouts;\r\n\tuint256 public tricklingSum;\r\n\tuint256 public stakingRequirement = 1e18;\r\n\taddress public lastGateway;\r\n\r\n\t//flux fee ratio score keepers\r\n\tuint256 public withdrawSum;\r\n\tuint256 public investSum;\r\n\r\n\t// Variable tracking how much Ether each token is currently worth.\r\n\t// Note that this is scaled by the scaleFactor variable.\r\n\tuint256 earningsPerBond_BULL;\r\n\tuint256 earningsPerBond_BEAR;\r\n\r\n\tfunction PeerLicensing() public {\r\n\t}\r\n\r\n\r\n\tevent onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy,\r\n        bool token\r\n    );\r\n    \r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 totalTokensAtTheTime,//maybe it'd be cool to see what % people are selling from their total bank\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned,\r\n        bool token,\r\n        uint256 resolved\r\n    );\r\n    \r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted,\r\n        bool token\r\n    );\r\n    \r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n\r\n\r\n\t// The following functions are used by the front-end for display purposes.\r\n\r\n\r\n\t// Returns the number of tokens currently held by _owner.\r\n\tfunction holdingsOf(address _owner) public constant returns (uint256 balance) {\r\n\t\treturn holdings_BULL[_owner] + holdings_BEAR[_owner];\r\n\t}\r\n\tfunction holdingsOf_BULL(address _owner) public constant returns (uint256 balance) {\r\n\t\treturn holdings_BULL[_owner];\r\n\t}\r\n\tfunction holdingsOf_BEAR(address _owner) public constant returns (uint256 balance) {\r\n\t\treturn holdings_BEAR[_owner];\r\n\t}\r\n\r\n\t// Withdraws all dividends held by the caller sending the transaction, updates\r\n\t// the requisite global variables, and transfers Ether back to the caller.\r\n\tfunction withdraw() public {\r\n\t\ttrickleUp();\r\n\t\t// Retrieve the dividends associated with the address the request came from.\r\n\t\tvar balance = dividends(msg.sender);\r\n\t\tvar pocketBalance = tricklePocket[msg.sender];\r\n\t\ttricklePocket[msg.sender] = 0;\r\n\t\ttricklingSum = sub(tricklingSum,pocketBalance);\r\n\t\tuint256 out =add(balance, pocketBalance);\r\n\t\t// Update the payouts array, incrementing the request address by `balance`.\r\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\r\n\t\t\r\n\t\t// Increase the total amount that's been paid out to maintain invariance.\r\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\r\n\t\t\r\n\t\t// Send the dividends to the address that requested the withdraw.\r\n\t\twithdrawSum = add(withdrawSum,out);\r\n\t\tmsg.sender.transfer(out);\r\n\t\tonWithdraw(msg.sender, out);\r\n\t}\r\n\r\n\tfunction withdrawOld(address to) public {\r\n\t\ttrickleUp();\r\n\t\t// Retrieve the dividends associated with the address the request came from.\r\n\t\tvar balance = dividends(msg.sender);\r\n\t\tvar pocketBalance = tricklePocket[msg.sender];\r\n\t\ttricklePocket[msg.sender] = 0;\r\n\t\ttricklingSum = sub(tricklingSum,pocketBalance);//gotta preserve that things for dynamic calculation\r\n\t\tuint256 out =add(balance, pocketBalance);\r\n\t\t// Update the payouts array, incrementing the request address by `balance`.\r\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\r\n\t\t\r\n\t\t// Increase the total amount that's been paid out to maintain invariance.\r\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\r\n\t\t\r\n\t\t// Send the dividends to the address that requested the withdraw.\r\n\t\twithdrawSum = add(withdrawSum,out);\r\n\t\tto.transfer(out);\r\n\t\tonWithdraw(to,out);\r\n\t}\r\n\tfunction fullCycleSellBonds(uint256 balance) internal {\r\n\t\t// Send the cashed out stake to the address that requested the withdraw.\r\n\t\twithdrawSum = add(withdrawSum,balance );\r\n\t\tmsg.sender.transfer(balance);\r\n\t\temit onWithdraw(msg.sender, balance);\r\n\t}\r\n\r\n\r\n\t// Sells your tokens for Ether. This Ether is assigned to the callers entry\r\n\t// in the tokenBalance array, and therefore is shown as a dividend. A second\r\n\t// call to withdraw() must be made to invoke the transfer of Ether back to your address.\r\n\tfunction sellBonds(uint256 _amount, bool bondType) public {\r\n\t\tuint256 bondBalance;\r\n\t\tif(bondType){\r\n\t\t\tbondBalance = holdings_BULL[msg.sender];\r\n\t\t}else{\r\n\t\t\tbondBalance = holdings_BEAR[msg.sender];\r\n\t\t}\r\n\t\tif(_amount <= bondBalance && _amount > 0){\r\n\t\t\tsell(_amount,bondType);\r\n\t\t}else{\r\n\t\t\tif(_amount > bondBalance ){\r\n\t\t\t\tsell(bondBalance,bondType);\r\n\t\t\t}else{\r\n\t\t\t\trevert();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// The slam-the-button escape hatch. Sells the callers tokens for Ether, then immediately\r\n\t// invokes the withdraw() function, sending the resulting Ether to the callers address.\r\n    function getMeOutOfHere() public {\r\n\t\tsellBonds( holdings_BULL[msg.sender] ,true);\r\n\t\tsellBonds( holdings_BEAR[msg.sender] ,false);\r\n        withdraw();\r\n\t}\r\n\r\n\tfunction reffUp(address _reff) internal{\r\n\t\taddress sender = msg.sender;\r\n\t\tif (_reff == 0x0000000000000000000000000000000000000000)\r\n\t\t\t_reff = lastGateway;\r\n\t\t\t\r\n\t\tif(  add(holdings_BEAR[_reff],holdings_BULL[_reff]) >= stakingRequirement ) {\r\n\t\t\t//good to go. good gateway\r\n\t\t}else{\r\n\t\t\tif(lastGateway == 0x0000000000000000000000000000000000000000){\r\n\t\t\t\tlastGateway = sender;//first buyer ever\r\n\t\t\t\t_reff = sender;//first buyer is their own gateway/masternode\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\t_reff = lastGateway;//the lucky last player gets to be the gate way.\r\n\t\t}\r\n\r\n\t\treff[sender] = _reff;\r\n\t}\r\n\t// Gatekeeper function to check if the amount of Ether being sent isn't either\r\n\t// too small or too large. If it passes, goes direct to buy().\r\n\t/*function rgbLimit(uint256 _rgb)internal pure returns(uint256){\r\n\t\tif(_rgb > 255)\r\n\t\t\treturn 255;\r\n\t\telse\r\n\t\t\treturn _rgb;\r\n\t}*/\r\n\t//BONUS\r\n\t/*function edgePigmentR() internal returns (uint256 x)\r\n\t{return 255 * souleculeEdgeR1[msg.sender] / (souleculeEdgeR0[msg.sender]+souleculeEdgeR1[msg.sender]);}\r\n\tfunction edgePigmentG() internal returns (uint256 x)\r\n\t{return 255 * souleculeEdgeG1[msg.sender] / (souleculeEdgeG0[msg.sender]+souleculeEdgeG1[msg.sender]);}\r\n\tfunction edgePigmentB() internal returns (uint256 x)\r\n\t{return 255 * souleculeEdgeB1[msg.sender] / (souleculeEdgeB0[msg.sender]+souleculeEdgeB1[msg.sender]);}*/\r\n\r\n\r\n\tfunction fund(address _reff,bool bondType) payable public {\r\n\t\t// Don't allow for funding if the amount of Ether sent is less than 1 szabo.\r\n\t\treffUp(_reff);\r\n\t\tif (msg.value > 0.000001 ether) {\r\n\t\t\tinvestSum = add(investSum,msg.value);\r\n\r\n\t\t    buy(bondType/*,edgePigmentR(),edgePigmentG(),edgePigmentB()*/);\r\n\t\t\tlastGateway = msg.sender;\r\n\t\t} else {\r\n\t\t\trevert();\r\n\t\t}\r\n    }\r\n\t// Function that returns the (dynamic) price of buying a finney worth of tokens.\r\n\tfunction buyPrice() public constant returns (uint) {\r\n\t\treturn getTokensForEther(1 finney);\r\n\t}\r\n\r\n\t// Function that returns the (dynamic) price of selling a single token.\r\n\tfunction sellPrice() public constant returns (uint) {\r\n        var eth = getEtherForTokens(1 finney);\r\n        var fee = fluxFeed(eth, false);\r\n        return eth - fee;\r\n    }\r\n\tfunction fluxFeed(uint256 _eth, bool slim_reinvest) public constant returns (uint256 amount) {\r\n\t\tif (withdrawSum == 0){\r\n\t\t\treturn 0;\r\n\t\t}else{\r\n\t\t\tif(slim_reinvest){\r\n\t\t\t\treturn div( mul(_eth , withdrawSum), mul(investSum,3) );//discount for supporting the Pyramid\r\n\t\t\t}else{\r\n\t\t\t\treturn div( mul(_eth , withdrawSum), investSum);// amount * withdrawSum / investSum\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t//gotta multiply and stuff in that order in order to get a high precision taxed amount.\r\n\t\t// because grouping (withdrawSum / investSum) can't return a precise decimal.\r\n\t\t//so instead we expand the value by multiplying then shrink it. by the denominator\r\n\r\n\t\t/*\r\n\t\t100eth IN & 100eth OUT = 100% tax fee (returning 1) !!!\r\n\t\t100eth IN & 50eth OUT = 50% tax fee (returning 2)\r\n\t\t100eth IN & 33eth OUT = 33% tax fee (returning 3)\r\n\t\t100eth IN & 25eth OUT = 25% tax fee (returning 4)\r\n\t\t100eth IN & 10eth OUT = 10% tax fee (returning 10)\r\n\r\n\t\t!!! keep in mind there is no fee if there are no holders. So if 100% of the eth has left the contract that means there can't possibly be holders to tax you\r\n\t\t*/\r\n\t}\r\n\r\n\t// Calculate the current dividends associated with the caller address. This is the net result\r\n\t// of multiplying the number of tokens held by their current value in Ether and subtracting the\r\n\t// Ether that has already been paid out.\r\n\tfunction dividends(address _owner) public constant returns (uint256 amount) {\r\n\t\treturn (uint256) ((int256)(earningsPerBond_BULL * holdings_BULL[_owner] + earningsPerBond_BEAR * holdings_BEAR[_owner]) - payouts[_owner]) / scaleFactor;\r\n\t}\r\n\tfunction cashWallet(address _owner) public constant returns (uint256 amount) {\r\n\t\treturn tricklePocket[_owner] + dividends(_owner);\r\n\t}\r\n\r\n\t// Internal balance function, used to calculate the dynamic reserve value.\r\n\tfunction balance() internal constant returns (uint256 amount){\r\n\t\t// msg.value is the amount of Ether sent by the transaction.\r\n\t\treturn sub(sub(investSum,withdrawSum) ,add( msg.value , tricklingSum));\r\n\t}\r\n\t\t\t\tfunction trickleUp() internal{\r\n\t\t\t\t\tuint256 tricks = trickling[ msg.sender ];\r\n\t\t\t\t\tif(tricks > 0){\r\n\t\t\t\t\t\ttrickling[ msg.sender ] = 0;\r\n\t\t\t\t\t\tuint256 passUp = div(tricks,trickTax);\r\n\t\t\t\t\t\tuint256 reward = sub(tricks,passUp);//trickling[]\r\n\t\t\t\t\t\taddress reffo = reff[msg.sender];\r\n\t\t\t\t\t\tif( holdingsOf(reffo) < stakingRequirement){\r\n\t\t\t\t\t\t\ttrickling[ reffo ] = add(trickling[ reffo ],passUp);\r\n\t\t\t\t\t\t\ttricklePocket[ reffo ] = add(tricklePocket[ reffo ],reward);\r\n\t\t\t\t\t\t}else{//basically. if your referral guy bailed out then he can't get the rewards, instead give it to the new guy that was baited in by this feature\r\n\t\t\t\t\t\t\ttrickling[ lastGateway ] = add(trickling[ lastGateway ],passUp);\r\n\t\t\t\t\t\t\ttricklePocket[ lastGateway ] = add(tricklePocket[ lastGateway ],reward);\r\n\t\t\t\t\t\t}/**/\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tfunction buy(bool bondType/*, uint256 soulR,uint256 soulG,uint256 soulB*/) internal {\r\n\t\t\t\t\t\t\t\t\t// Any transaction of less than 1 szabo is likely to be worth less than the gas used to send it.\r\n\t\t\t\t\t\t\t\t\tif (msg.value < 0.000001 ether || msg.value > 1000000 ether)\r\n\t\t\t\t\t\t\t\t\t\trevert();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t// msg.sender is the address of the caller.\r\n\t\t\t\t\t\t\t\t\tvar sender = msg.sender;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t// 10% of the total Ether sent is used to pay existing holders.\r\n\t\t\t\t\t\t\t\t\tuint256 fee = 0; \r\n\t\t\t\t\t\t\t\t\tuint256 trickle = 0; \r\n\t\t\t\t\t\t\t\t\tif(holdings_BULL[sender] != totalBondSupply_BULL){\r\n\t\t\t\t\t\t\t\t\t\tfee = fluxFeed(msg.value,false);\r\n\t\t\t\t\t\t\t\t\t\ttrickle = div(fee, trickTax);\r\n\t\t\t\t\t\t\t\t\t\tfee = sub(fee , trickle);\r\n\t\t\t\t\t\t\t\t\t\ttrickling[sender] = add(trickling[sender],trickle);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tvar numEther = sub(msg.value , add(fee , trickle));// The amount of Ether used to purchase new tokens for the caller.\r\n\t\t\t\t\t\t\t\t\tvar numTokens = getTokensForEther(numEther);// The number of tokens which can be purchased for numEther.\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t// The buyer fee, scaled by the scaleFactor variable.\r\n\t\t\t\t\t\t\t\t\tvar buyerFee = fee * scaleFactor;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (totalBondSupply_BULL > 0){// because ...\r\n\t\t\t\t\t\t\t\t\t\t// Compute the bonus co-efficient for all existing holders and the buyer.\r\n\t\t\t\t\t\t\t\t\t\t// The buyer receives part of the distribution for each token bought in the\r\n\t\t\t\t\t\t\t\t\t\t// same way they would have if they bought each token individually.\r\n\t\t\t\t\t\t\t\t\t\tuint256 bonusCoEff;\r\n\t\t\t\t\t\t\t\t\t\tif(bondType){\r\n\t\t\t\t\t\t\t\t\t\t\tbonusCoEff = (scaleFactor - (reserve() + numEther) * numTokens * scaleFactor / ( totalBondSupply_BULL + totalBondSupply_BEAR + numTokens) / numEther) * (uint)(crr_d) / (uint)(crr_d-crr_n);\r\n\t\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\t\tbonusCoEff = scaleFactor;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t// The total reward to be distributed amongst the masses is the fee (in Ether)\r\n\t\t\t\t\t\t\t\t\t\t// multiplied by the bonus co-efficient.\r\n\t\t\t\t\t\t\t\t\t\tvar holderReward = fee * bonusCoEff;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tbuyerFee -= holderReward;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t// The Ether value per token is increased proportionally.\r\n\t\t\t\t\t\t\t\t\t\tearningsPerBond_BULL = add(earningsPerBond_BULL,div(holderReward , totalBondSupply_BULL));\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t//resolve reward tracking stuff\r\n\t\t\t\t\t\t\t\t\tavgFactor_ethSpent[msg.sender] = add(avgFactor_ethSpent[msg.sender], numEther);\r\n\r\n\t\t\t\t\t\t\t\t\tint256 payoutDiff;\r\n\t\t\t\t\t\t\t\t\tif(bondType){\r\n\t\t\t\t\t\t\t\t\t\t// Add the numTokens which were just created to the total supply. We're a crypto central bank!\r\n\t\t\t\t\t\t\t\t\t\ttotalBondSupply_BULL = add(totalBondSupply_BULL, numTokens);\r\n\t\t\t\t\t\t\t\t\t\t// Assign the tokens to the balance of the buyer.\r\n\t\t\t\t\t\t\t\t\t\tholdings_BULL[sender] = add(holdings_BULL[sender], numTokens);\r\n\t\t\t\t\t\t\t\t\t\t// Update the payout array so that the buyer cannot claim dividends on previous purchases.\r\n\t\t\t\t\t\t\t\t\t\t// Also include the fee paid for entering the scheme.\r\n\t\t\t\t\t\t\t\t\t\t// First we compute how much was just paid out to the buyer...\r\n\t\t\t\t\t\t\t\t\t\tpayoutDiff = (int256) ((earningsPerBond_BULL * numTokens) - buyerFee);\r\n\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\ttotalBondSupply_BEAR = add(totalBondSupply_BEAR, numTokens);\r\n\t\t\t\t\t\t\t\t\t\tholdings_BEAR[sender] = add(holdings_BEAR[sender], numTokens);\r\n\t\t\t\t\t\t\t\t\t\tpayoutDiff = (int256) ((earningsPerBond_BEAR * numTokens) - buyerFee);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t// Then we update the payouts array for the buyer with this amount...\r\n\t\t\t\t\t\t\t\t\tpayouts[sender] = payouts[sender]+payoutDiff;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t// And then we finally add it to the variable tracking the total amount spent to maintain invariance.\r\n\t\t\t\t\t\t\t\t\ttotalPayouts = totalPayouts+payoutDiff;\r\n\r\n\t\t\t\t\t\t\t\t\ttricklingSum = add(tricklingSum,trickle);//add to trickle's Sum after reserve calculations\r\n\t\t\t\t\t\t\t\t\ttrickleUp();\r\n\r\n\t\t\t\t\t\t\t\t\tif(bondType){\r\n\t\t\t\t\t\t\t\t\t\temit onTokenPurchase(sender,numEther,numTokens, reff[sender],true);\r\n\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\temit onTokenPurchase(sender,numEther,numTokens, reff[sender],false);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t//#COLORBONUS\r\n\t\t\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t\t\tsouleculeCoreR1[msg.sender] += soulR * numTokens/255;\r\n\t\t\t\t\t\t\t\t\tsouleculeCoreG1[msg.sender] += soulG * numTokens/255;\r\n\t\t\t\t\t\t\t\t\tsouleculeCoreB1[msg.sender] += soulB * numTokens/255;\r\n\t\t\t\t\t\t\t\t\tsouleculeCoreR0[msg.sender] += numTokens-(soulR * numTokens/255);\r\n\t\t\t\t\t\t\t\t\tsouleculeCoreG0[msg.sender] += numTokens-(soulG * numTokens/255);\r\n\t\t\t\t\t\t\t\t\tsouleculeCoreB0[msg.sender] += numTokens-(soulB * numTokens/255);\r\n\r\n\t\t\t\t\t\t\t\t\tsouleculeEdgeR1[msg.sender] += soulR * numEther/255;\r\n\t\t\t\t\t\t\t\t\tsouleculeEdgeG1[msg.sender] += soulG * numEther/255;\r\n\t\t\t\t\t\t\t\t\tsouleculeEdgeB1[msg.sender] += soulB * numEther/255;\r\n\t\t\t\t\t\t\t\t\tsouleculeEdgeR0[msg.sender] += numTokens-(soulR * numEther/255);\r\n\t\t\t\t\t\t\t\t\tsouleculeEdgeG0[msg.sender] += numTokens-(soulG * numEther/255);\r\n\t\t\t\t\t\t\t\t\tsouleculeEdgeB0[msg.sender] += numTokens-(soulB * numEther/255);*/\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// Sell function that takes tokens and converts them into Ether. Also comes with a 10% fee\r\n\t\t\t\t\t\t\t\t// to discouraging dumping, and means that if someone near the top sells, the fee distributed\r\n\t\t\t\t\t\t\t\t// will be *significant*.\r\n\t\t\t\t\t\t\t\tfunction sell(uint256 amount,bool bondType) internal {\r\n\t\t\t\t\t\t\t\t    var numEthersBeforeFee = getEtherForTokens(amount);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t// x% of the resulting Ether is used to pay remaining holders.\r\n\t\t\t\t\t\t\t\t\tuint256 fee = 0;\r\n\t\t\t\t\t\t\t\t\tuint256 trickle = 0;\r\n\t\t\t\t\t\t\t\t\tif(totalBondSupply_BEAR != holdings_BEAR[msg.sender]){\r\n\t\t\t\t\t\t\t\t\t\tfee = fluxFeed(numEthersBeforeFee, true);\r\n\t\t\t\t\t\t\t        \ttrickle = div(fee, trickTax);\r\n\t\t\t\t\t\t\t\t\t\tfee = sub(fee , trickle);\r\n\t\t\t\t\t\t\t\t\t\ttrickling[msg.sender] = add(trickling[msg.sender],trickle);\r\n\t\t\t\t\t\t\t\t\t\ttricklingSum = add(tricklingSum , trickle);\r\n\t\t\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t// Net Ether for the seller after the fee has been subtracted.\r\n\t\t\t\t\t\t\t        var numEthers = sub(numEthersBeforeFee , add(fee , trickle));\r\n\r\n\t\t\t\t\t\t\t\t\t//How much you bought it for divided by how much you're getting back.\r\n\t\t\t\t\t\t\t\t\t//This means that if you get dumped on, you can get more resolve tokens if you sell out.\r\n\t\t\t\t\t\t\t\t\tuint256 resolved = mint(\r\n\t\t\t\t\t\t\t\t\t\tcalcResolve(msg.sender,amount,numEthers),\r\n\t\t\t\t\t\t\t\t\t\tmsg.sender\r\n\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\t\t//#COLORBONUS\r\n\t\t\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t\t\tsouleculeCoreR1[msg.sender] = mul( souleculeCoreR1[msg.sender] ,sub(holdingsOf(msg.sender), amount) ) / holdingsOf(msg.sender);\r\n\t\t\t\t\t\t\t\t\tsouleculeCoreG1[msg.sender] = mul( souleculeCoreG1[msg.sender] ,sub(holdingsOf(msg.sender), amount) ) / holdingsOf(msg.sender);\r\n\t\t\t\t\t\t\t\t\tsouleculeCoreB1[msg.sender] = mul( souleculeCoreB1[msg.sender] ,sub(holdingsOf(msg.sender), amount) ) / holdingsOf(msg.sender);\r\n\t\t\t\t\t\t\t\t\tsouleculeCoreR0[msg.sender] = mul( souleculeCoreR0[msg.sender] ,sub(holdingsOf(msg.sender), amount) ) / holdingsOf(msg.sender);\r\n\t\t\t\t\t\t\t\t\tsouleculeCoreG0[msg.sender] = mul( souleculeCoreG0[msg.sender] ,sub(holdingsOf(msg.sender), amount) ) / holdingsOf(msg.sender);\r\n\t\t\t\t\t\t\t\t\tsouleculeCoreB0[msg.sender] = mul( souleculeCoreB0[msg.sender] ,sub(holdingsOf(msg.sender), amount) ) / holdingsOf(msg.sender);\r\n\r\n\t\t\t\t\t\t\t\t\tsouleculeEdgeR1[msg.sender] -= edgePigmentR() * amount/255;\r\n\t\t\t\t\t\t\t\t\tsouleculeEdgeG1[msg.sender] -= edgePigmentG() * amount/255;\r\n\t\t\t\t\t\t\t\t\tsouleculeEdgeB1[msg.sender] -= edgePigmentB() * amount/255;\r\n\t\t\t\t\t\t\t\t\tsouleculeEdgeR0[msg.sender] -= amount-(edgePigmentR() * amount/255);\r\n\t\t\t\t\t\t\t\t\tsouleculeEdgeG0[msg.sender] -= amount-(edgePigmentG() * amount/255);\r\n\t\t\t\t\t\t\t\t\tsouleculeEdgeB0[msg.sender] -= amount-(edgePigmentB() * amount/255);*/\r\n\r\n\t\t\t\t\t\t\t\t\t// *Remove* the numTokens which were just sold from the total supply. We're /definitely/ a crypto central bank.\r\n\t\t\t\t\t\t\t\t\tint256 payoutDiff;\r\n\t\t\t\t\t\t\t\t\tif(bondType){\r\n\t\t\t\t\t\t\t\t\t\ttotalBondSupply_BULL = sub(totalBondSupply_BULL, amount);\r\n\r\n\t\t\t\t\t\t\t\t\t\tavgFactor_ethSpent[msg.sender] = mul( avgFactor_ethSpent[msg.sender] ,sub(holdings_BULL[msg.sender], amount) ) / holdings_BULL[msg.sender];\r\n\t\t\t\t\t\t\t\t\t\t// Remove the tokens from the balance of the buyer.\r\n\t\t\t\t\t\t\t\t\t\tholdings_BULL[msg.sender] = sub(holdings_BULL[msg.sender], amount);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\ttotalBondSupply_BEAR = sub(totalBondSupply_BEAR, amount);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tavgFactor_ethSpent[msg.sender] = mul( avgFactor_ethSpent[msg.sender] ,sub(holdings_BEAR[msg.sender], amount) ) / holdings_BEAR[msg.sender];\r\n\t\t\t\t\t\t\t\t\t\t// Remove the tokens from the balance of the buyer.\r\n\t\t\t\t\t\t\t\t\t\tholdings_BEAR[msg.sender] = sub(holdings_BEAR[msg.sender], amount);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tfullCycleSellBonds(numEthers);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t// Check that we have tokens in existence (this is a bit of an irrelevant check since we're\r\n\t\t\t\t\t\t\t\t\t// selling tokens, but it guards against division by zero).\r\n\t\t\t\t\t\t\t\t\tif (totalBondSupply_BEAR > 0) {\r\n\t\t\t\t\t\t\t\t\t\t// Scale the Ether taken as the selling fee by the scaleFactor variable.\r\n\t\t\t\t\t\t\t\t\t\tvar etherFee = mul(fee , scaleFactor);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t// Fee is distributed to all remaining token holders.\r\n\t\t\t\t\t\t\t\t\t\t// rewardPerShare is the amount gained per token thanks to this sell.\r\n\t\t\t\t\t\t\t\t\t\tvar rewardPerShare = div(etherFee , totalBondSupply_BEAR);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t// The Ether value per token is increased proportionally.\r\n\t\t\t\t\t\t\t\t\t\tearningsPerBond_BEAR = add(earningsPerBond_BEAR, rewardPerShare);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\ttrickleUp();\r\n\t\t\t\t\t\t\t\t\temit onTokenSell(msg.sender,add(add(holdings_BULL[msg.sender],holdings_BEAR[msg.sender]),amount),amount,numEthers,bondType,resolved);\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t// Converts the Ether accrued as dividends back into Staking tokens without having to\r\n\t\t\t\t// withdraw it first. Saves on gas and potential price spike loss.\r\n\t\t\t\tfunction reinvest(bool bondType/*, uint256 soulR,uint256 soulG,uint256 soulB*/) internal {\r\n\t\t\t\t\t// Retrieve the dividends associated with the address the request came from.\r\n\t\t\t\t\tvar balance = dividends(msg.sender);\r\n\t\t\t\t\tbalance = add(balance,tricklePocket[msg.sender]);\r\n\t\t\t\t\ttricklingSum = sub(tricklingSum,tricklePocket[msg.sender]);\r\n\t\t\t\t\ttricklePocket[msg.sender] = 0;\r\n\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Update the payouts array, incrementing the request address by `balance`.\r\n\t\t\t\t\t// Since this is essentially a shortcut to withdrawing and reinvesting, this step still holds.\r\n\t\t\t\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Increase the total amount that's been paid out to maintain invariance.\r\n\t\t\t\t\ttotalPayouts += (int256) (balance * scaleFactor);\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Assign balance to a new variable.\r\n\t\t\t\t\tuint value_ = (uint) (balance);\r\n\t\t\t\t\t\r\n\t\t\t\t\t// If your dividends are worth less than 1 szabo, or more than a million Ether\r\n\t\t\t\t\t// (in which case, why are you even here), abort.\r\n\t\t\t\t\tif (value_ < 0.000001 ether || value_ > 1000000 ether)\r\n\t\t\t\t\t\trevert();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t// msg.sender is the address of the caller.\r\n\t\t\t\t\t//var sender = msg.sender;\r\n\t\t\t\t\t\r\n\r\n\r\n\t\t\t\t\tuint256 fee = 0; \r\n\t\t\t\t\tuint256 trickle = 0;\r\n\t\t\t\t\tif(holdings_BULL[msg.sender] != totalBondSupply_BULL){\r\n\t\t\t\t\t\tfee = fluxFeed(value_, true ); // reinvestment fees are lower than regular ones.\r\n\t\t\t\t\t\ttrickle = div(fee, trickTax);\r\n\t\t\t\t\t\tfee = sub(fee , trickle);\r\n\t\t\t\t\t\ttrickling[msg.sender] += trickle;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\r\n\t\t\t\t\tvar res = sub(reserve() , balance);\r\n\t\t\t\t\t// The amount of Ether used to purchase new tokens for the caller.\r\n\t\t\t\t\tvar numEther = value_ - fee;\r\n\t\t\t\t\t\r\n\t\t\t\t\t// The number of tokens which can be purchased for numEther.\r\n\t\t\t\t\tvar numTokens = calculateDividendTokens(numEther, balance);\r\n\t\t\t\t\t\r\n\t\t\t\t\t// The buyer fee, scaled by the scaleFactor variable.\r\n\t\t\t\t\tvar buyerFee = fee * scaleFactor;\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Check that we have tokens in existence (this should always be true), or\r\n\t\t\t\t\t// else you're gonna have a bad time.\r\n\t\t\t\t\tif (totalBondSupply_BULL > 0) {\r\n\t\t\t\t\t\tuint256 bonusCoEff;\r\n\t\t\t\t\t\tif(bondType){\r\n\t\t\t\t\t\t\t// Compute the bonus co-efficient for all existing holders and the buyer.\r\n\t\t\t\t\t\t\t// The buyer receives part of the distribution for each token bought in the\r\n\t\t\t\t\t\t\t// same way they would have if they bought each token individually.\r\n\t\t\t\t\t\t\tbonusCoEff =  (scaleFactor - (res + numEther ) * numTokens * scaleFactor / (totalBondSupply_BULL + totalBondSupply_BEAR  + numTokens) / numEther) * (uint)(crr_d) / (uint)(crr_d-crr_n);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tbonusCoEff = scaleFactor;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// The total reward to be distributed amongst the masses is the fee (in Ether)\r\n\t\t\t\t\t\t// multiplied by the bonus co-efficient.\r\n\t\t\t\t\t\tbuyerFee -= fee * bonusCoEff;\r\n\r\n\t\t\t\t\t\t// Fee is distributed to all existing token holders before the new tokens are purchased.\r\n\t\t\t\t\t\t// rewardPerShare is the amount gained per token thanks to this buy-in.\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// The Ether value per token is increased proportionally.\r\n\t\t\t\t\t\tearningsPerBond_BULL += fee * bonusCoEff / totalBondSupply_BULL;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//resolve reward tracking stuff\r\n\t\t\t\t\tavgFactor_ethSpent[msg.sender] = add(avgFactor_ethSpent[msg.sender], numEther);\r\n\r\n\t\t\t\t\tint256 payoutDiff;\r\n\t\t\t\t\tif(bondType){\r\n\t\t\t\t\t\t// Add the numTokens which were just created to the total supply. We're a crypto central bank!\r\n\t\t\t\t\t\ttotalBondSupply_BULL = add(totalBondSupply_BULL, numTokens);\r\n\t\t\t\t\t\t// Assign the tokens to the balance of the buyer.\r\n\t\t\t\t\t\tholdings_BULL[msg.sender] = add(holdings_BULL[msg.sender], numTokens);\r\n\t\t\t\t\t\t// Update the payout array so that the buyer cannot claim dividends on previous purchases.\r\n\t\t\t\t\t\t// Also include the fee paid for entering the scheme.\r\n\t\t\t\t\t\t// First we compute how much was just paid out to the buyer...\r\n\t\t\t\t\t\tpayoutDiff = (int256) ((earningsPerBond_BULL * numTokens) - buyerFee);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\ttotalBondSupply_BEAR = add(totalBondSupply_BEAR, numTokens);\r\n\t\t\t\t\t\tholdings_BEAR[msg.sender] = add(holdings_BEAR[msg.sender], numTokens);\r\n\t\t\t\t\t\tpayoutDiff = (int256) ((earningsPerBond_BEAR * numTokens) - buyerFee);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t/*var averageCostPerToken = div(numTokens , numEther);\r\n\t\t\t\t\tvar newTokenSum = add(holdings_BULL[sender], numTokens);\r\n\t\t\t\t\tvar totalSpentBefore = mul(averageBuyInPrice[sender], holdingsOf(sender) );*/\r\n\t\t\t\t\t//averageBuyInPrice[sender] = div( totalSpentBefore + mul( averageCostPerToken , numTokens), newTokenSum )  ;\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Then we update the payouts array for the buyer with this amount...\r\n\t\t\t\t\tpayouts[msg.sender] += payoutDiff;\r\n\t\t\t\t\t\r\n\t\t\t\t\t// And then we finally add it to the variable tracking the total amount spent to maintain invariance.\r\n\t\t\t\t\ttotalPayouts += payoutDiff;\r\n\r\n\t\t\t\t\ttricklingSum += trickle;//add to trickle's Sum after reserve calculations\r\n\t\t\t\t\ttrickleUp();\r\n\t\t\t\t\tif(bondType){\r\n\t\t\t\t\t\temit onReinvestment(msg.sender,numEther,numTokens,true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\temit onReinvestment(msg.sender,numEther,numTokens,false);\t\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//#COLORBONUS\r\n\t\t\t\t\t/*\r\n\t\t\t\t\tsouleculeCoreR1[msg.sender] += soulR * numTokens/255;\r\n\t\t\t\t\tsouleculeCoreG1[msg.sender] += soulG * numTokens/255;\r\n\t\t\t\t\tsouleculeCoreB1[msg.sender] += soulB * numTokens/255;\r\n\t\t\t\t\tsouleculeCoreR0[msg.sender] += numTokens-(soulR * numTokens/255);\r\n\t\t\t\t\tsouleculeCoreG0[msg.sender] += numTokens-(soulG * numTokens/255);\r\n\t\t\t\t\tsouleculeCoreB0[msg.sender] += numTokens-(soulB * numTokens/255);\r\n\r\n\t\t\t\t\tsouleculeEdgeR1[msg.sender] += soulR * numEther/255;\r\n\t\t\t\t\tsouleculeEdgeG1[msg.sender] += soulG * numEther/255;\r\n\t\t\t\t\tsouleculeEdgeB1[msg.sender] += soulB * numEther/255;\r\n\t\t\t\t\tsouleculeEdgeR0[msg.sender] += numTokens-(soulR * numEther/255);\r\n\t\t\t\t\tsouleculeEdgeG0[msg.sender] += numTokens-(soulG * numEther/255);\r\n\t\t\t\t\tsouleculeEdgeB0[msg.sender] += numTokens-(soulB * numEther/255);*/\r\n\t\t\t\t}\r\n\r\n\t\r\n\t// Dynamic value of Ether in reserve, according to the CRR requirement.\r\n\tfunction reserve() internal constant returns (uint256 amount){\r\n\t\treturn sub(balance(),\r\n\t\t\t  ((uint256) ((int256) (earningsPerBond_BULL * totalBondSupply_BULL + earningsPerBond_BEAR * totalBondSupply_BEAR) - totalPayouts ) / scaleFactor) \r\n\t\t);\r\n\t}\r\n\r\n\t// Calculates the number of tokens that can be bought for a given amount of Ether, according to the\r\n\t// dynamic reserve and totalSupply values (derived from the buy and sell prices).\r\n\tfunction getTokensForEther(uint256 ethervalue) public constant returns (uint256 tokens) {\r\n\t\treturn sub(fixedExp(fixedLog(reserve() + ethervalue)*crr_n/crr_d + price_coeff), totalBondSupply_BULL + totalBondSupply_BEAR);\r\n\t}\r\n\r\n\t// Semantically similar to getTokensForEther, but subtracts the callers balance from the amount of Ether returned for conversion.\r\n\tfunction calculateDividendTokens(uint256 ethervalue, uint256 subvalue) public constant returns (uint256 tokens) {\r\n\t\treturn sub(fixedExp(fixedLog(reserve() - subvalue + ethervalue)*crr_n/crr_d + price_coeff), totalBondSupply_BULL + totalBondSupply_BEAR);\r\n\t}\r\n\r\n\t// Converts a number tokens into an Ether value.\r\n\tfunction getEtherForTokens(uint256 tokens) public constant returns (uint256 ethervalue) {\r\n\t\t// How much reserve Ether do we have left in the contract?\r\n\t\tvar reserveAmount = reserve();\r\n\r\n\t\t// If you're the Highlander (or bagholder), you get The Prize. Everything left in the vault.\r\n\t\tif (tokens == (totalBondSupply_BULL + totalBondSupply_BEAR) )\r\n\t\t\treturn reserveAmount;\r\n\r\n\t\t// If there would be excess Ether left after the transaction this is called within, return the Ether\r\n\t\t// corresponding to the equation in Dr Jochen Hoenicke's original Ponzi paper, which can be found\r\n\t\t// at https://test.jochen-hoenicke.de/eth/ponzitoken/ in the third equation, with the CRR numerator \r\n\t\t// and denominator altered to 1 and 2 respectively.\r\n\t\treturn sub(reserveAmount, fixedExp((fixedLog(totalBondSupply_BULL + totalBondSupply_BEAR - tokens) - price_coeff) * crr_d/crr_n));\r\n\t}\r\n\r\n\t// You don't care about these, but if you really do they're hex values for \r\n\t// co-efficients used to simulate approximations of the log and exp functions.\r\n\tint256  constant one        = 0x10000000000000000;\r\n\tuint256 constant sqrt2      = 0x16a09e667f3bcc908;\r\n\tuint256 constant sqrtdot5   = 0x0b504f333f9de6484;\r\n\tint256  constant ln2        = 0x0b17217f7d1cf79ac;\r\n\tint256  constant ln2_64dot5 = 0x2cb53f09f05cc627c8;\r\n\tint256  constant c1         = 0x1ffffffffff9dac9b;\r\n\tint256  constant c3         = 0x0aaaaaaac16877908;\r\n\tint256  constant c5         = 0x0666664e5e9fa0c99;\r\n\tint256  constant c7         = 0x049254026a7630acf;\r\n\tint256  constant c9         = 0x038bd75ed37753d68;\r\n\tint256  constant c11        = 0x03284a0c14610924f;\r\n\r\n\t// The polynomial R = c1*x + c3*x^3 + ... + c11 * x^11\r\n\t// approximates the function log(1+x)-log(1-x)\r\n\t// Hence R(s) = log((1+s)/(1-s)) = log(a)\r\n\tfunction fixedLog(uint256 a) internal pure returns (int256 log) {\r\n\t\tint32 scale = 0;\r\n\t\twhile (a > sqrt2) {\r\n\t\t\ta /= 2;\r\n\t\t\tscale++;\r\n\t\t}\r\n\t\twhile (a <= sqrtdot5) {\r\n\t\t\ta *= 2;\r\n\t\t\tscale--;\r\n\t\t}\r\n\t\tint256 s = (((int256)(a) - one) * one) / ((int256)(a) + one);\r\n\t\tvar z = (s*s) / one;\r\n\t\treturn scale * ln2 +\r\n\t\t\t(s*(c1 + (z*(c3 + (z*(c5 + (z*(c7 + (z*(c9 + (z*c11/one))\r\n\t\t\t\t/one))/one))/one))/one))/one);\r\n\t}\r\n\r\n\tint256 constant c2 =  0x02aaaaaaaaa015db0;\r\n\tint256 constant c4 = -0x000b60b60808399d1;\r\n\tint256 constant c6 =  0x0000455956bccdd06;\r\n\tint256 constant c8 = -0x000001b893ad04b3a;\r\n\t\r\n\t// The polynomial R = 2 + c2*x^2 + c4*x^4 + ...\r\n\t// approximates the function x*(exp(x)+1)/(exp(x)-1)\r\n\t// Hence exp(x) = (R(x)+x)/(R(x)-x)\r\n\tfunction fixedExp(int256 a) internal pure returns (uint256 exp) {\r\n\t\tint256 scale = (a + (ln2_64dot5)) / ln2 - 64;\r\n\t\ta -= scale*ln2;\r\n\t\tint256 z = (a*a) / one;\r\n\t\tint256 R = ((int256)(2) * one) +\r\n\t\t\t(z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);\r\n\t\texp = (uint256) (((R + a) * one) / (R - a));\r\n\t\tif (scale >= 0)\r\n\t\t\texp <<= scale;\r\n\t\telse\r\n\t\t\texp >>= -scale;\r\n\t\treturn exp;\r\n\t}\r\n\t\r\n\t// The below are safemath implementations of the four arithmetic operators\r\n\t// designed to explicitly prevent over- and under-flows of integer values.\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction () payable public {\r\n\t\tif (msg.value > 0) {\r\n\t\t\tfund(lastGateway,true);\r\n\t\t} else {\r\n\t\t\twithdrawOld(msg.sender);\r\n\t\t}\r\n\t}\r\n\r\n\tuint256 public totalSupply;\r\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    \r\n    string public name = \"0xBabylon\";\r\n    uint8 public decimals = 12;\r\n    string public symbol = \"PoWHr\";\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Resolved(address indexed _owner, uint256 amount);\r\n    event Burned(address indexed _owner, uint256 amount);\r\n\r\n    function mint(uint256 amount,address _account) internal returns (uint minted){\r\n    \ttotalSupply += amount;\r\n    \tbalances[_account] += amount;\r\n    \tResolved(_account,amount);\r\n    \treturn amount;\r\n    }\r\n\r\n\tfunction burn(uint256 _value) public returns (uint256 amount) {\r\n        require(balances[msg.sender] >= _value);\r\n        totalSupply -= _value;\r\n    \tbalances[msg.sender] -= _value;\r\n    \tResolved(msg.sender,_value);\r\n    \treturn _value;\r\n    }\r\n\r\n\tfunction calcResolve(address _owner,uint256 amount,uint256 _eth) public constant returns (uint256 calculatedResolveTokens) {\r\n\t\treturn div(div(div(mul(mul(amount,amount),avgFactor_ethSpent[_owner]),holdings_BULL[_owner]+holdings_BEAR[_owner]),_eth),1000000);\r\n\t}\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\t\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowance >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        if (allowance < MAX_UINT256) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    function resolveSupply(address _owner) public view returns (uint256 balance) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"holdingsOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"avgFactor_ethSpent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reff\",\"type\":\"address\"},{\"name\":\"bondType\",\"type\":\"bool\"}],\"name\":\"fund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"calcResolve\",\"outputs\":[{\"name\":\"calculatedResolveTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tricklingSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawOld\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBondSupply_BEAR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"cashWallet\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBondSupply_BULL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethervalue\",\"type\":\"uint256\"}],\"name\":\"getTokensForEther\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payouts\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holdings_BEAR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"slim_reinvest\",\"type\":\"bool\"}],\"name\":\"fluxFeed\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reff\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tricklePocket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"holdingsOf_BEAR\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastGateway\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"resolveSupply\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"trickling\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMeOutOfHere\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holdings_BULL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"getEtherForTokens\",\"outputs\":[{\"name\":\"ethervalue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"holdingsOf_BULL\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethervalue\",\"type\":\"uint256\"},{\"name\":\"subvalue\",\"type\":\"uint256\"}],\"name\":\"calculateDividendTokens\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"bondType\",\"type\":\"bool\"}],\"name\":\"sellBonds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"bool\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalTokensAtTheTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"resolved\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"bool\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Resolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"}]","ContractName":"PeerLicensing","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://89e47f0873bb070b6c8a741ce240d8aab0063fee1fa6e77fd8a11039f83c8a69"}]}