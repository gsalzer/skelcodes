{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n* @dev Cryptolotto referral system interface.\r\n*/\r\ncontract iCryptolottoReferral {\r\n    /**\r\n    * @dev Get partner by referral.\r\n    */\r\n    function getPartnerByReferral(address) public view returns (address) {}\r\n    \r\n    /**\r\n    * @dev Get partner percent.\r\n    */\r\n    function getPartnerPercent(address) public view returns (uint8) {}\r\n    \r\n    /**\r\n    * @dev Get sales partner percent by partner address.\r\n    */\r\n    function getSalesPartnerPercent(address) public view returns (uint8) {}\r\n    \r\n    /**\r\n    * @dev Get sales partner address by partner address.\r\n    */\r\n    function getSalesPartner(address) public view returns (address) {}\r\n    \r\n    /**\r\n    * @dev Add new referral.\r\n    */\r\n    function addReferral(address, address) public {}\r\n}\r\n\r\n/**\r\n* @dev Cryptolotto stats aggregator interface.\r\n*/\r\ncontract iCryptolottoStatsAggregator {\r\n    /**\r\n    * @dev Write info to log about the new winner.\r\n    */\r\n    function newWinner(address, uint, uint, uint, uint8, uint) public {}\r\n}\r\n\r\n/**\r\n* @dev Ownable contract interface.\r\n*/\r\ncontract iOwnable {\r\n    function getOwner() public view returns (address) {}\r\n    function allowed(address) public view returns (bool) {}\r\n}\r\n\r\n\r\n/**\r\n* @title Cryptolotto1Day\r\n* @dev This smart contract is a part of Cryptolotto (cryptolotto.cc) product.\r\n*\r\n* @dev Cryptolotto is a blockchain-based, Ethereum powered lottery which gives to users the most \r\n* @dev transparent and honest chances of winning.\r\n*\r\n* @dev The main idea of Cryptolotto is straightforward: people from all over the world during the \r\n* @dev set period of time are contributing an equal amount of ETH to one wallet. When a timer ends \r\n* @dev this smart-contract powered wallet automatically sends all received ETHs to a one randomly \r\n* @dev chosen wallet-participant.\r\n*\r\n* @dev Due to the fact that Cryptolotto is built on a blockchain technology, it eliminates any \r\n* @dev potential for intervention by third parties and gives 100% guarantee of an honest game.\r\n* @dev There are no backdoors and no human or computer soft can interfere the process of picking a winner.\r\n*\r\n* @dev If during the game only one player joins it, then the player will receive all his ETH back.\r\n* @dev If a player sends not the exact amount of ETH - he will receive all his ETH back.\r\n* @dev Creators of the product can change the entrance price for the game. If the price is changed \r\n* @dev then new rules are applied when a new game starts.\r\n*\r\n* @dev The original idea of Cryptolotto belongs to t.me/crypto_god and t.me/crypto_creator - Founders. \r\n* @dev Cryptolotto smart-contracts are protected by copyright, trademark, patent, trade secret, \r\n* @dev other intellectual property, proprietary rights laws and other applicable laws.\r\n*\r\n* @dev All information related to the product can be found only on: \r\n* @dev - cryptolotto.cc\r\n* @dev - github.com/cryptolotto\r\n* @dev - instagram.com/cryptolotto\r\n* @dev - facebook.com/cryptolotto\r\n*\r\n* @dev Cryptolotto was designed and developed by erde group (https://erde.group).\r\n**/\r\ncontract Cryptolotto1Hour {\r\n    /**\r\n    * @dev Write to log info about the new game.\r\n    *\r\n    * @param _game Game number.\r\n    * @param _time Time when game stated.\r\n    */\r\n    event Game(uint _game, uint indexed _time);\r\n\r\n    /**\r\n    * @dev Write to log info about the new game player.\r\n    *\r\n    * @param _address Player wallet address.\r\n    * @param _game Game number in which player buy ticket.\r\n    * @param _number Player number in the game.\r\n    * @param _time Time when player buy ticket.\r\n    */\r\n    event Ticket(\r\n        address indexed _address,\r\n        uint indexed _game,\r\n        uint _number,\r\n        uint _time\r\n    );\r\n\r\n    /**\r\n    * @dev Write to log info about partner earnings.\r\n    *\r\n    * @param _partner Partner wallet address.\r\n    * @param _referral Referral wallet address.\r\n    * @param _amount Earning amount.\r\n    * @param _time The time when ether was earned.\r\n    */\r\n    event ToPartner(\r\n        address indexed _partner,\r\n        address _referral,\r\n        uint _amount,\r\n        uint _time\r\n    );\r\n\r\n    /**\r\n    * @dev Write to log info about sales partner earnings.\r\n    *\r\n    * @param _salesPartner Sales partner wallet address.\r\n    * @param _partner Partner wallet address.\r\n    * @param _amount Earning amount.\r\n    * @param _time The time when ether was earned.\r\n    */\r\n    event ToSalesPartner(\r\n        address indexed _salesPartner,\r\n        address _partner,\r\n        uint _amount,\r\n        uint _time\r\n    );\r\n    \r\n    // Game type. Each game has own type.\r\n    uint8 public gType = 2;\r\n    // Game fee.\r\n    uint8 public fee = 10;\r\n    // Current game number.\r\n    uint public game;\r\n    // Ticket price.\r\n    uint public ticketPrice = 0.01 ether;\r\n    // New ticket price.\r\n    uint public newPrice;\r\n    // All-time game jackpot.\r\n    uint public allTimeJackpot = 0;\r\n    // All-time game players count\r\n    uint public allTimePlayers = 0;\r\n    \r\n    // Paid to partners.\r\n    uint public paidToPartners = 0;\r\n    // Game status.\r\n    bool public isActive = true;\r\n    // The variable that indicates game status switching.\r\n    bool public toogleStatus = false;\r\n    // The array of all games\r\n    uint[] public games;\r\n    \r\n    // Store game jackpot.\r\n    mapping(uint => uint) jackpot;\r\n    // Store game players.\r\n    mapping(uint => address[]) players;\r\n    \r\n    // Ownable contract\r\n    iOwnable public ownable;\r\n    // Stats aggregator contract.\r\n    iCryptolottoStatsAggregator public stats;\r\n    // Referral system contract.\r\n    iCryptolottoReferral public referralInstance;\r\n    // Funds distributor address.\r\n    address public fundsDistributor;\r\n\r\n    /**\r\n    * @dev Check sender address and compare it to an owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(ownable.allowed(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Initialize game.\r\n    * @dev Create ownable and stats aggregator instances, \r\n    * @dev set funds distributor contract address.\r\n    *\r\n    * @param ownableContract The address of previously deployed ownable contract.\r\n    * @param distributor The address of previously deployed funds distributor contract.\r\n    * @param statsA The address of previously deployed stats aggregator contract.\r\n    * @param referralSystem The address of previously deployed referral system contract.\r\n    */\r\n    function Cryptolotto1Hour(\r\n        address ownableContract,\r\n        address distributor,\r\n        address statsA,\r\n        address referralSystem\r\n    ) \r\n        public\r\n    {\r\n        ownable = iOwnable(ownableContract);\r\n        stats = iCryptolottoStatsAggregator(statsA);\r\n        referralInstance = iCryptolottoReferral(referralSystem);\r\n        fundsDistributor = distributor;\r\n        startGame();\r\n    }\r\n\r\n    /**\r\n    * @dev The method that allows buying tickets by directly sending ether to the contract.\r\n    */\r\n    function() public payable {\r\n        buyTicket(address(0));\r\n    }\r\n\r\n    /**\r\n    * @dev Returns current game players.\r\n    */\r\n    function getPlayedGamePlayers() \r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return getPlayersInGame(game);\r\n    }\r\n\r\n    /**\r\n    * @dev Get players by game.\r\n    *\r\n    * @param playedGame Game number.\r\n    */\r\n    function getPlayersInGame(uint playedGame) \r\n        public \r\n        view\r\n        returns (uint)\r\n    {\r\n        return players[playedGame].length;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns current game jackpot.\r\n    */\r\n    function getPlayedGameJackpot() \r\n        public \r\n        view\r\n        returns (uint) \r\n    {\r\n        return getGameJackpot(game);\r\n    }\r\n    \r\n    /**\r\n    * @dev Get jackpot by game number.\r\n    *\r\n    * @param playedGame The number of the played game.\r\n    */\r\n    function getGameJackpot(uint playedGame) \r\n        public \r\n        view \r\n        returns(uint)\r\n    {\r\n        return jackpot[playedGame];\r\n    }\r\n    \r\n    /**\r\n    * @dev Change game status.\r\n    * @dev If the game is active sets flag for game status changing. Otherwise, change game status.\r\n    */\r\n    function toogleActive() public onlyOwner() {\r\n        if (!isActive) {\r\n            isActive = true;\r\n        } else {\r\n            toogleStatus = !toogleStatus;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Start the new game.`\r\n    */\r\n    function start() public onlyOwner() {\r\n        if (players[game].length > 0) {\r\n            pickTheWinner();\r\n        }\r\n        startGame();\r\n    }\r\n\r\n    /**\r\n    * @dev Change ticket price on next game.\r\n    *\r\n    * @param price New ticket price.``\r\n    */    \r\n    function changeTicketPrice(uint price) \r\n        public \r\n        onlyOwner() \r\n    {\r\n        newPrice = price;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Get random number.\r\n    * @dev Random number calculation depends on block timestamp,\r\n    * @dev difficulty, number and hash.\r\n    *\r\n    * @param min Minimal number.\r\n    * @param max Maximum number.\r\n    * @param time Timestamp.\r\n    * @param difficulty Block difficulty.\r\n    * @param number Block number.\r\n    * @param bHash Block hash.\r\n    */\r\n    function randomNumber(\r\n        uint min,\r\n        uint max,\r\n        uint time,\r\n        uint difficulty,\r\n        uint number,\r\n        bytes32 bHash\r\n    ) \r\n        public \r\n        pure \r\n        returns (uint) \r\n    {\r\n        min ++;\r\n        max ++;\r\n\r\n        uint random = uint(keccak256(\r\n            time * \r\n            difficulty * \r\n            number *\r\n            uint(bHash)\r\n        ))%10 + 1;\r\n       \r\n        uint result = uint(keccak256(random))%(min+max)-min;\r\n        \r\n        if (result > max) {\r\n            result = max;\r\n        }\r\n        \r\n        if (result < min) {\r\n            result = min;\r\n        }\r\n        \r\n        result--;\r\n\r\n        return result;\r\n    }\r\n    \r\n    /**\r\n    * @dev The payable method that accepts ether and adds the player to the game.\r\n    */\r\n    function buyTicket(address partner) public payable {\r\n        require(isActive);\r\n        require(msg.value == ticketPrice);\r\n        \r\n        jackpot[game] += msg.value;\r\n        \r\n        uint playerNumber =  players[game].length;\r\n        players[game].push(msg.sender);\r\n\r\n        processReferralSystem(partner, msg.sender);\r\n\r\n        emit Ticket(msg.sender, game, playerNumber, now);\r\n    }\r\n\r\n    /**\r\n    * @dev Start the new game.\r\n    * @dev Checks ticket price changes, if exists new ticket price the price will be changed.\r\n    * @dev Checks game status changes, if exists request for changing game status game status \r\n    * @dev will be changed.\r\n    */\r\n    function startGame() internal {\r\n        require(isActive);\r\n\r\n        game = block.number;\r\n        if (newPrice != 0) {\r\n            ticketPrice = newPrice;\r\n            newPrice = 0;\r\n        }\r\n        if (toogleStatus) {\r\n            isActive = !isActive;\r\n            toogleStatus = false;\r\n        }\r\n        emit Game(game, now);\r\n    }\r\n\r\n    /**\r\n    * @dev Pick the winner.\r\n    * @dev Check game players, depends on player count provides next logic:\r\n    * @dev - if in the game is only one player, by game rules the whole jackpot \r\n    * @dev without commission returns to him.\r\n    * @dev - if more than one player smart contract randomly selects one player, \r\n    * @dev calculates commission and after that jackpot transfers to the winner,\r\n    * @dev commision to founders.\r\n    */\r\n    function pickTheWinner() internal {\r\n        uint winner;\r\n        uint toPlayer;\r\n        if (players[game].length == 1) {\r\n            toPlayer = jackpot[game];\r\n            players[game][0].transfer(jackpot[game]);\r\n            winner = 0;\r\n        } else {\r\n            winner = randomNumber(\r\n                0,\r\n                players[game].length - 1,\r\n                block.timestamp,\r\n                block.difficulty,\r\n                block.number,\r\n                blockhash(block.number - 1)\r\n            );\r\n        \r\n            uint distribute = jackpot[game] * fee / 100;\r\n            toPlayer = jackpot[game] - distribute;\r\n            players[game][winner].transfer(toPlayer);\r\n\r\n            transferToPartner(players[game][winner]);\r\n            \r\n            distribute -= paidToPartners;\r\n            bool result = address(fundsDistributor).call.gas(30000).value(distribute)();\r\n            if (!result) {\r\n                revert();\r\n            }\r\n        }\r\n    \r\n        paidToPartners = 0;\r\n        stats.newWinner(\r\n            players[game][winner],\r\n            game,\r\n            players[game].length,\r\n            toPlayer,\r\n            gType,\r\n            winner\r\n        );\r\n        \r\n        allTimeJackpot += toPlayer;\r\n        allTimePlayers += players[game].length;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if the player is in referral system.\r\n    * @dev Sending earned ether to partners.\r\n    *\r\n    * @param partner Partner address.\r\n    * @param referral Player address.\r\n    */\r\n    function processReferralSystem(address partner, address referral) \r\n        internal \r\n    {\r\n        address partnerRef = referralInstance.getPartnerByReferral(referral);\r\n        if (partner != address(0) || partnerRef != address(0)) {\r\n            if (partnerRef == address(0)) {\r\n                referralInstance.addReferral(partner, referral);\r\n                partnerRef = partner;\r\n            }\r\n\r\n            if (players[game].length > 1) {\r\n                transferToPartner(referral);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Sending earned ether to partners.\r\n    *\r\n    * @param referral Player address.\r\n    */\r\n    function transferToPartner(address referral) internal {\r\n        address partner = referralInstance.getPartnerByReferral(referral);\r\n        if (partner != address(0)) {\r\n            uint sum = getPartnerAmount(partner);\r\n            if (sum != 0) {\r\n                partner.transfer(sum);\r\n                paidToPartners += sum;\r\n\r\n                emit ToPartner(partner, referral, sum, now);\r\n\r\n                transferToSalesPartner(partner);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Sending earned ether to sales partners.\r\n    *\r\n    * @param partner Partner address.\r\n    */\r\n    function transferToSalesPartner(address partner) internal {\r\n        address salesPartner = referralInstance.getSalesPartner(partner);\r\n        if (salesPartner != address(0)) {\r\n            uint sum = getSalesPartnerAmount(partner);\r\n            if (sum != 0) {\r\n                salesPartner.transfer(sum);\r\n                paidToPartners += sum;\r\n\r\n                emit ToSalesPartner(salesPartner, partner, sum, now);\r\n            } \r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Getting partner percent and calculate earned ether.\r\n    *\r\n    * @param partner Partner address.\r\n    */\r\n    function getPartnerAmount(address partner) \r\n        internal\r\n        view\r\n        returns (uint) \r\n    {\r\n        uint8 partnerPercent = referralInstance.getPartnerPercent(partner);\r\n        if (partnerPercent == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return calculateReferral(partnerPercent);\r\n    }\r\n\r\n    /**\r\n    * @dev Getting sales partner percent and calculate earned ether.\r\n    *\r\n    * @param partner sales partner address.\r\n    */\r\n    function getSalesPartnerAmount(address partner) \r\n        internal \r\n        view \r\n        returns (uint)\r\n    {\r\n        uint8 salesPartnerPercent = referralInstance.getSalesPartnerPercent(partner);\r\n        if (salesPartnerPercent == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return calculateReferral(salesPartnerPercent);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculate earned ether by partner percent.\r\n    *\r\n    * @param percent Partner percent.\r\n    */\r\n    function calculateReferral(uint8 percent)\r\n        internal \r\n        view \r\n        returns (uint) \r\n    {\r\n        uint distribute =  ticketPrice * fee / 100;\r\n\r\n        return distribute * percent / 100;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"toogleActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playedGame\",\"type\":\"uint256\"}],\"name\":\"getGameJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTimePlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"changeTicketPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTimeJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paidToPartners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playedGame\",\"type\":\"uint256\"}],\"name\":\"getPlayersInGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsDistributor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"toogleStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"difficulty\",\"type\":\"uint256\"},{\"name\":\"number\",\"type\":\"uint256\"},{\"name\":\"bHash\",\"type\":\"bytes32\"}],\"name\":\"randomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownable\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayedGamePlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayedGameJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stats\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ownableContract\",\"type\":\"address\"},{\"name\":\"distributor\",\"type\":\"address\"},{\"name\":\"statsA\",\"type\":\"address\"},{\"name\":\"referralSystem\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Game\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Ticket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_partner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"ToPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_salesPartner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_partner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"ToSalesPartner\",\"type\":\"event\"}]","ContractName":"Cryptolotto1Hour","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b68b1b6b35bd13593bcde58bf6af299fb2ea64000000000000000000000000000bda2ba473d5a4a491b252de032218d17b58c1580000000000000000000000001edfacf829f913538636db8dc06aa9bb70eb93c3000000000000000000000000ce13620f4426a2f83d146d3eefb0b909f6fc1007","Library":"","SwarmSource":"bzzr://d3df881923b7b07cc84da5672dd2bf3078b614e993508ab1498e64f2c8092498"}]}