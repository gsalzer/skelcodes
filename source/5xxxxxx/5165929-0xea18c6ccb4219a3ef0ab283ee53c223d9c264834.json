{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n* Send 0.00025 to guess a random number from 0-9. Winner gets 80% of the pot.\r\n* 20% goes to the house. Note: house is supplying the initial pot so cry me a \r\n* river.\r\n*/\r\n\r\n\r\ncontract LuckyNumber {\r\n\r\n    address owner;\r\n    bool contractIsAlive = true;\r\n    uint8 winningNumber; \r\n    uint commitTime = 60;\r\n    uint nonce = 1;\r\n    \r\n    mapping (address => uint8) addressToGuess;\r\n    mapping (address => uint) addressToTimeStamp;\r\n    \r\n    \r\n    //modifier requiring contract to be live. Set bool to false to kill contract\r\n    modifier live() \r\n    {\r\n        require(contractIsAlive);\r\n        _;\r\n    }\r\n\r\n    // The constructor. \r\n    function LuckyNumber() public { \r\n        owner = msg.sender;\r\n    }\r\n    \r\n\r\n    //Used for the owner to add money to the pot. \r\n    function addBalance() public payable live {\r\n    }\r\n    \r\n\r\n    //explicit getter for \"balance\"\r\n    function getBalance() view external returns (uint) {\r\n        return this.balance;\r\n    }\r\n    \r\n    //getter for contractIsAlive\r\n    function getStatus() view external returns (bool) {\r\n        return contractIsAlive;\r\n    }\r\n\r\n    //allows the owner to abort the contract and retrieve all funds\r\n    function kill() \r\n    external \r\n    live \r\n    { \r\n        if (msg.sender == owner) {        \r\n            owner.transfer(this.balance);\r\n            contractIsAlive = false;\r\n            }\r\n    }\r\n\r\n    /**\r\n     * Pay 0.00025 eth to map your address to a guess. Sets time when guess can be checked\r\n     */\r\n    function takeAGuess(uint8 _myGuess) \r\n    public \r\n    payable\r\n    live \r\n    {\r\n        require(msg.value == 0.00025 ether);\r\n        addressToGuess[msg.sender] = _myGuess;\r\n        addressToTimeStamp[msg.sender] = now+commitTime;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Call to check your guess and claim reward. Call will fail if guess was set \r\n     * less than 60 seconds ago. Random number is generated and compared to the \r\n     * user guess. If the numbers match, user recieves 80% of the pot and the \r\n     * remainder is returned to the owner. Finally, the users guess is reset to \r\n     * invalid number\r\n     */\r\n    function checkGuess()\r\n    public\r\n    live\r\n    {\r\n        require(now>addressToTimeStamp[msg.sender]);\r\n        winningNumber = uint8(keccak256(now, owner, block.coinbase, block.difficulty, nonce)) % 10;\r\n        nonce = uint(keccak256(now)) % 10000;\r\n        uint8 userGuess = addressToGuess[msg.sender];\r\n        if (userGuess == winningNumber) {\r\n            msg.sender.transfer((this.balance*8)/10);\r\n            owner.transfer(this.balance);\r\n        }\r\n        \r\n        addressToGuess[msg.sender] = 16;\r\n        addressToTimeStamp[msg.sender] = 1;\r\n       \r\n        \r\n    }\r\n\r\n\r\n}//end of contract","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_myGuess\",\"type\":\"uint8\"}],\"name\":\"takeAGuess\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkGuess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"LuckyNumber","CompilerVersion":"v0.4.20-nightly.2018.1.6+commit.2548228b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://650a30d7544aa3f999a4095aa16ae81f17912df0b7df6069c12893d286e24bd2"}]}