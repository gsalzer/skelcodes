{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: lib/solidity-rationals/contracts/Rationals.sol\r\n\r\nlibrary R {\r\n\r\n    struct Rational {\r\n        uint n;  // numerator\r\n        uint d;  // denominator\r\n    }\r\n\r\n}\r\n\r\n\r\nlibrary Rationals {\r\n    using SafeMath for uint;\r\n\r\n    function rmul(uint256 amount, R.Rational memory r) internal pure returns (uint256) {\r\n        return amount.mul(r.n).div(r.d);\r\n    }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/rbac/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n *      See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/rbac/RBAC.sol\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * @dev Supports unlimited numbers of roles and addresses.\r\n * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n *  for you to write your own implementation of this interface using Enums or similar.\r\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\r\n *  to avoid typos.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address addr, string roleName);\r\n  event RoleRemoved(address addr, string roleName);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address addr, string roleName)\r\n    view\r\n    public\r\n  {\r\n    roles[roleName].check(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address addr, string roleName)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[roleName].has(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function addRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].add(addr);\r\n    emit RoleAdded(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function removeRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].remove(addr);\r\n    emit RoleRemoved(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string roleName)\r\n  {\r\n    checkRole(msg.sender, roleName);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param roleNames the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] roleNames) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < roleNames.length; i++) {\r\n  //         if (hasRole(msg.sender, roleNames[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Exchange.sol\r\n\r\n/**\r\n * @title Atomic exchange to facilitate swaps from ETH or DAI to a token.\r\n * Users an oracle bot to update market prices.\r\n */\r\ncontract Exchange is Pausable, RBAC {\r\n    using SafeMath for uint256;\r\n\r\n    string constant ROLE_ORACLE = \"oracle\";\r\n\r\n    ERC20 baseToken;\r\n    ERC20 dai;  // 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359\r\n    address public oracle;\r\n    R.Rational public ethRate;\r\n    R.Rational public daiRate;\r\n\r\n    event TradeETH(uint256 amountETH, uint256 amountBaseToken);\r\n    event TradeDAI(uint256 amountDAI, uint256 amountBaseToken);\r\n    event RateUpdatedETH(uint256 n, uint256 d);\r\n    event RateUpdatedDAI(uint256 n, uint256 d);\r\n    event OracleSet(address oracle);\r\n\r\n    /**\r\n     * Constructor for exchange.\r\n     *\r\n     * @param _baseToken Address of the token to exchange for\r\n     * @param _dai Address of DAI token\r\n     * @param _oracle Address of oracle tasked with periodically setting market rates\r\n     * @param _ethRateN Numerator of the ETH to token exchange rate\r\n     * @param _ethRateD Denominator of the ETH to token exchange rate\r\n     * @param _daiRateN Numerator of the DAI to token exchange rate\r\n     * @param _daiRateD Denominator of the DAI to token exchange rate\r\n     */\r\n    function Exchange(\r\n        address _baseToken,\r\n        address _dai,\r\n        address _oracle,\r\n        uint256 _ethRateN,\r\n        uint256 _ethRateD,\r\n        uint256 _daiRateN,\r\n        uint256 _daiRateD\r\n    ) public {\r\n        baseToken = ERC20(_baseToken);\r\n        dai = ERC20(_dai);\r\n        addRole(_oracle, ROLE_ORACLE);\r\n        oracle = _oracle;\r\n        ethRate = R.Rational(_ethRateN, _ethRateD);\r\n        daiRate = R.Rational(_daiRateN, _daiRateD);\r\n    }\r\n\r\n    /**\r\n     * Trades ETH for tokens at ethRate.\r\n     *\r\n     * @param expectedAmountBaseToken Amount of tokens expected to receive.\r\n     * This prevents front-running race conditions from occurring when ethRate\r\n     * is updated.\r\n     */\r\n    function tradeETH(uint256 expectedAmountBaseToken) public whenNotPaused() payable {\r\n        uint256 amountBaseToken = calculateAmountForETH(msg.value);\r\n        require(amountBaseToken == expectedAmountBaseToken);\r\n        require(baseToken.transfer(msg.sender, amountBaseToken));\r\n        emit TradeETH(msg.value, amountBaseToken);\r\n    }\r\n\r\n    /**\r\n     * Trades DAI for tokens at daiRate. User must first approve DAI to be\r\n     * transferred by Exchange.\r\n     *\r\n     * @param amountDAI Amount of DAI to exchange\r\n     * @param expectedAmountBaseToken Amount of tokens expected to receive.\r\n     * This prevents front-running race conditions from occurring when daiRate\r\n     * is updated.\r\n     */\r\n    function tradeDAI(uint256 amountDAI, uint256 expectedAmountBaseToken) public whenNotPaused() {\r\n        uint256 amountBaseToken = calculateAmountForDAI(amountDAI);\r\n        require(amountBaseToken == expectedAmountBaseToken);\r\n        require(dai.transferFrom(msg.sender, address(this), amountDAI));\r\n        require(baseToken.transfer(msg.sender, amountBaseToken));\r\n        emit TradeDAI(amountDAI, amountBaseToken);\r\n    }\r\n\r\n    /**\r\n     * Calculates exchange amount for ETH to token.\r\n     *\r\n     * @param amountETH Amount of ETH, in base units\r\n     */\r\n    function calculateAmountForETH(uint256 amountETH) public view returns (uint256) {\r\n        return Rationals.rmul(amountETH, ethRate);\r\n    }\r\n\r\n    /**\r\n     * Calculates exchange amount for DAI to token.\r\n     *\r\n     * @param amountDAI Amount of DAI, in base units\r\n     */\r\n    function calculateAmountForDAI(uint256 amountDAI) public view returns (uint256) {\r\n        return Rationals.rmul(amountDAI, daiRate);\r\n    }\r\n\r\n    /**\r\n     * Sets the exchange rate from ETH to token.\r\n     *\r\n     * @param n Numerator for ethRate\r\n     * @param d Denominator for ethRate\r\n     */\r\n    function setETHRate(uint256 n, uint256 d) external onlyRole(ROLE_ORACLE) {\r\n        ethRate = R.Rational(n, d);\r\n        emit RateUpdatedETH(n, d);\r\n    }\r\n\r\n    /**\r\n     * Sets the exchange rate from ETH to token.\r\n     *\r\n     * @param n Numerator for daiRate\r\n     * @param d Denominator for daiRate\r\n     */\r\n    function setDAIRate(uint256 n, uint256 d) external onlyRole(ROLE_ORACLE) {\r\n        daiRate = R.Rational(n, d);\r\n        emit RateUpdatedDAI(n, d);\r\n    }\r\n\r\n    /**\r\n     * Recovers DAI, leftover tokens, or other.\r\n     *\r\n     * @param token Address of token to withdraw\r\n     * @param amount Amount of tokens to withdraw\r\n     */\r\n    function withdrawERC20s(address token, uint256 amount) external onlyOwner {\r\n        ERC20 erc20 = ERC20(token);\r\n        require(erc20.transfer(owner, amount));\r\n    }\r\n\r\n    /**\r\n     * Changes the oracle.\r\n     *\r\n     * @param _oracle Address of new oracle\r\n     */\r\n    function setOracle(address _oracle) external onlyOwner {\r\n        removeRole(oracle, ROLE_ORACLE);\r\n        addRole(_oracle, ROLE_ORACLE);\r\n        oracle = _oracle;\r\n        emit OracleSet(_oracle);\r\n    }\r\n\r\n    /// @notice Owner: Withdraw Ether\r\n    function withdrawEther() external onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountDAI\",\"type\":\"uint256\"},{\"name\":\"expectedAmountBaseToken\",\"type\":\"uint256\"}],\"name\":\"tradeDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"},{\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setDAIRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20s\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"expectedAmountBaseToken\",\"type\":\"uint256\"}],\"name\":\"tradeETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"},{\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setETHRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRate\",\"outputs\":[{\"name\":\"n\",\"type\":\"uint256\"},{\"name\":\"d\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiRate\",\"outputs\":[{\"name\":\"n\",\"type\":\"uint256\"},{\"name\":\"d\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amountDAI\",\"type\":\"uint256\"}],\"name\":\"calculateAmountForDAI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amountETH\",\"type\":\"uint256\"}],\"name\":\"calculateAmountForETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_baseToken\",\"type\":\"address\"},{\"name\":\"_dai\",\"type\":\"address\"},{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_ethRateN\",\"type\":\"uint256\"},{\"name\":\"_ethRateD\",\"type\":\"uint256\"},{\"name\":\"_daiRateN\",\"type\":\"uint256\"},{\"name\":\"_daiRateD\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountBaseToken\",\"type\":\"uint256\"}],\"name\":\"TradeETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountDAI\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountBaseToken\",\"type\":\"uint256\"}],\"name\":\"TradeDAI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"n\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"RateUpdatedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"n\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"RateUpdatedDAI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Exchange","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e0366f8857b1466452b89c0ee03246f860a0ef0100000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359000000000000000000000000f6f7599773cc4e0a229f5024141c65973780c1830000000000000000000000000000000000000000000000000000000000000265000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000009","Library":"","SwarmSource":"bzzr://3b2646a06a08de69ee5ceaf512fc26b9cc7b37c35571e2a785354c673230fd85"}]}