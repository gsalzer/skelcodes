{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary safemath {\r\n    function safeMul(uint a, uint b) public pure returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n    function safeSub(uint a, uint b) public pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n    function safeAdd(uint a, uint b) public pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n    function safeDiv(uint256 a, uint256 b) public pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n    }\r\n}\r\n\r\ncontract ContractReceiver {\r\n    function tokenFallback(address from, uint amount, bytes data) public;\r\n}\r\n\r\ncontract SpanToken  {\r\n    using safemath for uint256;\r\n    uint256 public _totalsupply;\r\n    string public constant name = \"Span Coin\";\r\n    string public constant symbol = \"SPAN\";\r\n    uint8 public constant decimals = 18;\r\n  \r\n    uint256 public StartTime;   // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public EndTime ;\r\n    uint256 public Rate;   // how many token units a buyer gets per msg.value\r\n    uint256 public currentBonus; \r\n    address onlyadmin;\r\n    address[] admins_array;\r\n    \r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (address => bool) admin_addresses;\r\n    mapping (address => uint256) public frozenAccount;    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event NewAdmin(address admin);\r\n    event RemoveAdmin(address admin);    \r\n\r\n    modifier onlyOwner {\r\n    require(msg.sender == onlyadmin);\r\n    _;\r\n    }\r\n    modifier onlyauthorized {\r\n        require (admin_addresses[msg.sender] == true || msg.sender == onlyadmin);\r\n        _;\r\n    }    \r\n    modifier notfrozen() {\r\n     require (frozenAccount[msg.sender] < now );   \r\n      _;  \r\n    }\r\n    function totalSupply() public view returns (uint256 _totalSupply){\r\n    return _totalsupply;\r\n    }\r\n    function getOwner() public view returns(address){\r\n        return onlyadmin;\r\n    }\r\n    function SpanToken(uint256 initialSupply,uint256 _startTime,uint256 _endTime,uint256 _rate,uint256 _currentBonus) public {\r\n        onlyadmin = msg.sender;\r\n        admins_array.push(msg.sender);\r\n        StartTime = _startTime;\r\n        EndTime = _endTime;\r\n        Rate = _rate;\r\n        currentBonus = _currentBonus;\r\n        _totalsupply = initialSupply * 10 ** uint256(decimals);\r\n        balances[msg.sender] = _totalsupply;\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner  {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(onlyadmin, newOwner);\r\n    onlyadmin = newOwner;\r\n  }\r\n    function ChangeSaleTime(uint256 _startTime, uint256 _endTime, uint256 _currentBonus) onlyOwner public{\r\n         StartTime = _startTime;\r\n         EndTime = _endTime;\r\n         currentBonus = _currentBonus;\r\n        }\r\n    function changeRATE(uint256 _rate) onlyOwner public  {\r\n           Rate = _rate;\r\n        }\r\n    function addAdmin(address _address) onlyOwner public {\r\n        admin_addresses[_address] = true;\r\n        NewAdmin(_address);\r\n        admins_array.push(_address);\r\n    }\r\n    function removeAdmin(address _address) onlyOwner public {\r\n        require (_address != msg.sender);\r\n        admin_addresses[_address] = false;\r\n        RemoveAdmin(_address);\r\n    }\r\n    function withdrawEther() public onlyOwner  {\r\n\t        onlyadmin.transfer(this.balance);\r\n        \t}    \r\n}\r\n\r\ncontract SpanCoin is SpanToken {\r\n    \r\n    uint256 public Monthprofitstart;   // start time of profit \r\n    uint256 public Monthprofitend;     // end time of profit \r\n    uint256 public MonthsProfit;       // Profit made by company\r\n    uint256 public SharePrice;\r\n    struct PriceTable{\r\n        uint256 ProductID;\r\n        string ProductName;\r\n        uint256 ProductPrice;\r\n    }\r\n    mapping (uint256 => PriceTable) products;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event ContractTransfer(address _to, uint _value, bytes _data);\r\n    event CoinPurchase(address indexed _to, uint256 _value);\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 _value, uint256 amount);\r\n    event ServicePurchase(address indexed Buyer,uint256 _ProductID, uint256 _price, uint256 _timestamps);\r\n    event ProfitTransfer(address indexed _to, uint256 _value, uint256 _profit, uint256 _timestamps);\r\n    event FrozenFunds(address _target, uint256 _timestamps, uint256 _frozento); \r\n    event logprofitandshare (uint256 _shareprice, uint256 _profitmade);\r\n    event RequesProfitFail(address indexed _to, uint256 _value, uint256 _profit, uint256 _timestamps);\r\n    event AddNewProduct(uint256 _ID, string _name, uint256 _value, address admin);\r\n    event ProductDeleted(uint256 _ID, address admin);\r\n    event ProductUpdated(uint256 _ID, string _name, uint256 _value, address admin);\r\n    event ShopItemSold(address indexed _purchaser, address indexed _Seller, uint indexed ItemID, uint256 _price, uint timestamp);    \r\n    event ShopFrontEnd(address indexed _purchaser, address indexed _Seller, uint indexed ItemID, uint256 _price, uint timestamp);    \r\n\r\n    function SpanCoin(uint256 initialSupply,uint256 _startTime,uint256 _endTime,uint256 _rate,uint256 _currentBonus)\r\n     SpanToken(initialSupply,_startTime,_endTime,_rate,_currentBonus) public{\r\n    }\r\n    function () public payable{\r\n         require(msg.value != 0);\r\n          }\r\n    function PurchaseToken() public payable{\r\n        require( msg.value > 0);\r\n         uint256 tokens = msg.value.safeMul(Rate);\r\n         uint256 BonusTokens = tokens.safeDiv(100).safeMul(currentBonus);\r\n      if (now > StartTime && now < EndTime){\r\n            _transfer(onlyadmin,msg.sender,tokens + BonusTokens);\r\n        CoinPurchase(msg.sender, tokens + BonusTokens);\r\n       } else {\r\n            _transfer(onlyadmin,msg.sender,tokens);\r\n        CoinPurchase(msg.sender, tokens);\r\n       }\r\n        }\r\n    function buytobeneficiary(address beneficiary) public payable {\r\n        require(beneficiary != address(0) && msg.value > 0);\r\n        require(now > StartTime && now < EndTime);\r\n        uint256 tokentoAmount = msg.value.safeMul(Rate);\r\n        uint256 bountytoken = tokentoAmount.safeDiv(10);\r\n        _transfer(onlyadmin, msg.sender, tokentoAmount);\r\n        _transfer(onlyadmin, beneficiary, bountytoken);\r\n        TokenPurchase(msg.sender, beneficiary, tokentoAmount, bountytoken);\r\n    }\r\n    function payproduct (uint256 _ProductID) public returns (bool){\r\n        uint256 price = products[_ProductID].ProductPrice;\r\n       if (balances[msg.sender] >= price && price > 0 ) {\r\n        _transfer(msg.sender, onlyadmin, price);\r\n        ServicePurchase(msg.sender, _ProductID, price, now);\r\n        return true;\r\n        }else {\r\n            return false;\r\n        }\r\n    }\r\n            //in case of manual withdrawal\r\n    function withdrawEther() public onlyOwner  {\r\n\t        onlyadmin.transfer(this.balance);\r\n        \t}\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(balances[_from] >= _value);\r\n        uint previousBalances = balances[_from] + balances[_to];\r\n        balances[_from] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        assert(balances[_from] + balances[_to] == previousBalances);\r\n    }      \t\r\n///////////////////////////////////////////////     \r\n//               ERC23 start Here           //\r\n//////////////////////////////////////////////  \r\n    function transfer(address _to, uint256 _value, bytes _data) notfrozen public returns (bool success) {\r\n        //filtering if the target is a contract with bytecode inside it\r\n        if(isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        } else {\r\n            return transferToAddress(_to, _value);\r\n        }\r\n    }\r\n    function transfer(address _to, uint256 _value) notfrozen public returns (bool success) {\r\n        //A standard function transfer similar to ERC20 transfer with no _data\r\n        if(isContract(_to)) {\r\n            bytes memory emptyData;\r\n            return transferToContract(_to, _value, emptyData);\r\n        } else {\r\n            return transferToAddress(_to, _value);\r\n        }\r\n    }     \r\n    function isContract(address _addr) public constant returns (bool is_contract) {\r\n      uint length;\r\n      assembly { length := extcodesize(_addr) }\r\n        if(length > 0){\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    function transferToAddress(address _to, uint256 _value) notfrozen public returns (bool success) {\r\n            require (balances[msg.sender] >= _value && _value > 0);\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n         \r\n     }\r\n    function transferToContract(address _to, uint256 _value, bytes _data) notfrozen public returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            ContractReceiver reciever = ContractReceiver(_to);\r\n            reciever.tokenFallback(msg.sender, _value, _data);\r\n            Transfer(msg.sender, _to, _value);\r\n            ContractTransfer(_to, _value, _data);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n  }\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n///////////////////////////////////////////////     \r\n//     Products management start here       //\r\n//////////////////////////////////////////////      \r\n    function addProduct(uint256 _ProductID, string productName, uint256 productPrice) onlyauthorized public returns (bool success){\r\n        require(products[_ProductID].ProductID == 0);\r\n        products[_ProductID] = PriceTable(_ProductID, productName, productPrice);\r\n        AddNewProduct(_ProductID, productName, productPrice, msg.sender);\r\n        return true;\r\n    }\r\n    function deleteProduct(uint256 _ProductID) onlyauthorized public returns (bool success){\r\n        delete products[_ProductID];\r\n        ProductDeleted(_ProductID, msg.sender);\r\n        return true;\r\n    }\r\n    function updateProduct(uint256 _ProductID, string _productName, uint256 _productPrice) onlyauthorized public returns (bool success){\r\n        require(products[_ProductID].ProductID == _ProductID && _productPrice > 0);\r\n        products[_ProductID] = PriceTable(_ProductID, _productName, _productPrice);\r\n        ProductUpdated(_ProductID, _productName, _productPrice, msg.sender);\r\n        return true;\r\n    }\r\n    function getProduct(uint256 _ProductID) public constant returns (uint256 , string , uint256) {\r\n       return (products[_ProductID].ProductID,\r\n               products[_ProductID].ProductName,\r\n               products[_ProductID].ProductPrice);\r\n    }\r\n///////////////////////////////////////////////     \r\n//     Shop management start here           //\r\n//////////////////////////////////////////////     \r\n\r\n    function payshop(address _Seller, uint256 price, uint ItemID) public returns (bool sucess){\r\n       require (balances[msg.sender] >= price && price > 0 );\r\n        _transfer(msg.sender,_Seller,price);\r\n        ShopItemSold(msg.sender, _Seller, ItemID, price, now);\r\n        return true;\r\n           \r\n    } \r\n    function payshopwithfees(address _Seller, uint256 _value, uint ItemID) public returns (bool sucess){\r\n        require (balances[msg.sender] >= _value && _value > 0);\r\n        uint256 priceaftercomm = _value.safeMul(900).safeDiv(1000);\r\n        uint256 amountofcomm = _value.safeSub(priceaftercomm);\r\n        _transfer(msg.sender, onlyadmin, amountofcomm);\r\n        _transfer(msg.sender, _Seller, priceaftercomm);\r\n        ShopFrontEnd(msg.sender, _Seller, ItemID, _value, now);\r\n        return true;\r\n    }     \r\n///////////////////////////////////////////////     \r\n//     Devidends Functions start here       //\r\n//////////////////////////////////////////////  \r\n     // Set monthly profit is by contract owner to add company profit made\r\n     // contract calculate the token value from profit and build interest rate\r\n     // Shareholder is the request owner \r\n     // contract calculate the amount and return the profit value to transfer \r\n     // balance in ether will be transfered to share holder\r\n     // account will be frozen from sending funds to other addresses to prevent fraud and double profit claiming\r\n     // however spending tokens on website will not be affected\r\n    function Setmonthlyprofit(uint256 _monthProfit, uint256 _monthProfitStart, uint256 _monthProfitEnd) onlyOwner public {\r\n        MonthsProfit = _monthProfit;\r\n        Monthprofitstart = _monthProfitStart;\r\n        Monthprofitend = _monthProfitEnd;\r\n        Buildinterest();\r\n        logprofitandshare(SharePrice, MonthsProfit);\r\n      }\r\n    function Buildinterest() internal returns(uint256){\r\n        if (MonthsProfit == 0) {\r\n           return 0;}\r\n    uint256 monthsprofitwei = MonthsProfit.safeMul(1 ether);    // turn the value to 18 digits wei amount\r\n    uint256 _SharePrice = monthsprofitwei.safeDiv(50000000);            // Set Z amount\r\n    SharePrice = _SharePrice;\r\n     assert(SharePrice == _SharePrice);\r\n    }\r\n    function Requestprofit() public returns(bool) {\r\n        require(now > Monthprofitstart && now < Monthprofitend);\r\n        require (balances[msg.sender] >= 500000E18 && frozenAccount[msg.sender] < now);\r\n\r\n        uint256 actualclaimable = (balances[msg.sender] / 1 ether); \r\n        uint256 actualprofit = actualclaimable.safeMul(SharePrice);\r\n       // uint256 actualprofitaftertxn = actualprofit.safeMul(900).safeDiv(1000);\r\n        if(actualprofit != 0){\r\n        msg.sender.transfer(actualprofit);\r\n        freezeAccount();\r\n        ProfitTransfer(msg.sender, balances[msg.sender], actualprofit, now);\r\n        FrozenFunds(msg.sender, now, frozenAccount[msg.sender]);\r\n        return true;\r\n        } else{ RequesProfitFail(msg.sender, actualclaimable, actualprofit, now);\r\n        return false;\r\n     }\r\n     }\r\n    function freezeAccount() internal returns(bool) {\r\n        frozenAccount[msg.sender] = now + (Monthprofitend - now);\r\n        return true;\r\n    }\r\n    function FORCEfreezeAccount(uint256 frozentime, address target) onlyOwner public returns(bool) {\r\n        frozenAccount[target] = frozentime;\r\n        return true;\r\n    }\r\n    //reported lost wallet //Critical emergency\r\n    function BustTokens(address _target, uint256 _amount) onlyOwner public returns (bool){\r\n        require(balances[_target] > 0);\r\n        _transfer(_target, onlyadmin, _amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"is_contract\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MonthsProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buytobeneficiary\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Seller\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"ItemID\",\"type\":\"uint256\"}],\"name\":\"payshop\",\"outputs\":[{\"name\":\"sucess\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ProductID\",\"type\":\"uint256\"}],\"name\":\"payproduct\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Monthprofitstart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferToContract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ProductID\",\"type\":\"uint256\"},{\"name\":\"productName\",\"type\":\"string\"},{\"name\":\"productPrice\",\"type\":\"uint256\"}],\"name\":\"addProduct\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SharePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ProductID\",\"type\":\"uint256\"},{\"name\":\"_productName\",\"type\":\"string\"},{\"name\":\"_productPrice\",\"type\":\"uint256\"}],\"name\":\"updateProduct\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Monthprofitend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Seller\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"ItemID\",\"type\":\"uint256\"}],\"name\":\"payshopwithfees\",\"outputs\":[{\"name\":\"sucess\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PurchaseToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRATE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ProductID\",\"type\":\"uint256\"}],\"name\":\"getProduct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Requestprofit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"frozentime\",\"type\":\"uint256\"},{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"FORCEfreezeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ProductID\",\"type\":\"uint256\"}],\"name\":\"deleteProduct\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BustTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_currentBonus\",\"type\":\"uint256\"}],\"name\":\"ChangeSaleTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_monthProfit\",\"type\":\"uint256\"},{\"name\":\"_monthProfitStart\",\"type\":\"uint256\"},{\"name\":\"_monthProfitEnd\",\"type\":\"uint256\"}],\"name\":\"Setmonthlyprofit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_currentBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ContractTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CoinPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ProductID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamps\",\"type\":\"uint256\"}],\"name\":\"ServicePurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_profit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamps\",\"type\":\"uint256\"}],\"name\":\"ProfitTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timestamps\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_frozento\",\"type\":\"uint256\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_shareprice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_profitmade\",\"type\":\"uint256\"}],\"name\":\"logprofitandshare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_profit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamps\",\"type\":\"uint256\"}],\"name\":\"RequesProfitFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddNewProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ProductDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ProductUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_Seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ItemID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ShopItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_Seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ItemID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ShopFrontEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"RemoveAdmin\",\"type\":\"event\"}]","ContractName":"SpanCoin","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000002faf080000000000000000000000000000000000000000000000000000000005a974280000000000000000000000000000000000000000000000000000000005ac021000000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000000019","Library":"safemath:4b37ABA2e208d90E1Ab90c54acBB0D5f26055FD9","SwarmSource":"bzzr://084ee053bf7c1140b3b84c5b8096f765cdc608c96373894b3fb541057303b785"}]}