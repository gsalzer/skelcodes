{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract StandardToken {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract AirDrop {\r\n\r\n    using SafeMath for uint;\r\n\r\n    function () payable public {}\r\n\r\n    /**\r\n     * batch transfer for ERC20 token.(the same amount)\r\n     *\r\n     * @param _contractAddress ERC20 token address\r\n     * @param _addresses array of address to sent\r\n     * @param _value transfer amount\r\n     */\r\n    function batchTransferToken(address _contractAddress, address[] _addresses, uint _value) public {\r\n        // data validate & _addresses length limit\r\n        require(_addresses.length > 0);\r\n\r\n        StandardToken token = StandardToken(_contractAddress);\r\n        // transfer circularly\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            token.transferFrom(msg.sender, _addresses[i], _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * batch transfer for ERC20 token.\r\n     *\r\n     * @param _contractAddress ERC20 token address\r\n     * @param _addresses array of address to sent\r\n     * @param _value array of transfer amount\r\n     */\r\n    function batchTransferTokenS(address _contractAddress, address[] _addresses, uint[] _value) public {\r\n        // data validate & _addresses length limit\r\n        require(_addresses.length > 0);\r\n        require(_addresses.length == _value.length);\r\n\r\n        StandardToken token = StandardToken(_contractAddress);\r\n        // transfer circularly\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            token.transferFrom(msg.sender, _addresses[i], _value[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * batch transfer for ETH.(the same amount)\r\n     *\r\n     * @param _addresses array of address to sent\r\n     */\r\n    function batchTransferETH(address[] _addresses) payable public {\r\n        // data validate & _addresses length limit\r\n        require(_addresses.length > 0);\r\n\r\n        // transfer circularly\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            _addresses[i].transfer(msg.value.div(_addresses.length));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * batch transfer for ETH.\r\n     *\r\n     * @param _addresses array of address to sent\r\n     * @param _value array of transfer amount\r\n     */\r\n    function batchTransferETHS(address[] _addresses, uint[] _value) payable public {\r\n        // data validate & _addresses length limit\r\n        require(_addresses.length > 0);\r\n        require(_addresses.length == _value.length);\r\n\r\n        // transfer circularly\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            _addresses[i].transfer(_value[i]);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferETHS\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"batchTransferETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferTokenS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"batchTransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"AirDrop","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5db06e18cad4aad3524c2acc78d9154a0b113be1a07ad8067051e5a59ba270f6"}]}