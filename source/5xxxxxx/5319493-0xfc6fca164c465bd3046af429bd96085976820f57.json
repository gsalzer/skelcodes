{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n// Personal Handle Service PHS\r\n// A service on top of the AHS for registering your own handle on top of the .eth base for free\r\n// donations are optional\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface AHSInterface {\r\n    function registerHandle(bytes32 _base, bytes32 _handle, address _addr) public payable;\r\n    function transferBase(bytes32 _base, address _newAddress) public;\r\n    function findAddress(bytes32 _base, bytes32 _handle) public view returns(address);\r\n    function isRegistered(bytes32 _base) public view returns(bool);\r\n    function doesOwn(bytes32 _base, address _addr) public view returns(bool);\r\n}\r\n\r\n\r\ncontract PHS is Ownable {\r\n\r\n    AHSInterface public ahs;\r\n    bytes32 public ethBase; // .eth extension\r\n\r\n    mapping (bytes32 => bool) public ethHandleRegistred;\r\n    mapping (address => mapping (bytes32 => bool)) public ownsEthHandle;\r\n\r\n\r\n    event HandleTransfered(bytes32 _handle, address indexed _to);\r\n\r\n    function PHS(AHSInterface _ahs, bytes32 _ethBase) public {\r\n        ahs = _ahs;\r\n        ethBase = _ethBase;\r\n    }\r\n\r\n    function registerEthHandle(bytes32 _handle, address _addr) public payable {\r\n        require(_addr != address(0));\r\n        if (ethHandleRegistred[_handle] && ownsEthHandle[msg.sender][_handle]) {\r\n            ahs.registerHandle(ethBase, _handle, _addr);\r\n        }\r\n        if (!ethHandleRegistred[_handle]) {\r\n            ethHandleRegistred[_handle] = true;\r\n            ownsEthHandle[msg.sender][_handle] = true;\r\n            ahs.registerHandle(ethBase, _handle, _addr);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function transferEthHandleOwnership(bytes32 _handle, address _addr) public {\r\n        require(ownsEthHandle[msg.sender][_handle]);\r\n        ownsEthHandle[msg.sender][_handle] = false;\r\n        ownsEthHandle[_addr][_handle] = true;\r\n    }\r\n\r\n    function getEthBase() public view returns(bytes32) {\r\n        return ethBase;\r\n    }\r\n\r\n    function ethHandleIsRegistered(bytes32 _handle) public view returns(bool) {\r\n        return ethHandleRegistred[_handle];\r\n    }\r\n\r\n    function findAddress(bytes32 _handle) public view returns(address) {\r\n        address addr = ahs.findAddress(ethBase, _handle);\r\n        return addr;\r\n    }\r\n\r\n    function doesOwnEthHandle(bytes32 _handle, address _addr) public view returns(bool) {\r\n        return ownsEthHandle[_addr][_handle];\r\n    }\r\n\r\n    function transferBaseOwnership() public {\r\n        require(msg.sender == owner);\r\n        ahs.transferBase(ethBase, owner);\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(msg.sender == owner);\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_handle\",\"type\":\"bytes32\"}],\"name\":\"ethHandleIsRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_handle\",\"type\":\"bytes32\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"doesOwnEthHandle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ahs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBase\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_handle\",\"type\":\"bytes32\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"registerEthHandle\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBase\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_handle\",\"type\":\"bytes32\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"transferEthHandleOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferBaseOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_handle\",\"type\":\"bytes32\"}],\"name\":\"findAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ownsEthHandle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ethHandleRegistred\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ahs\",\"type\":\"address\"},{\"name\":\"_ethBase\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_handle\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"HandleTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PHS","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000025d94b021b69d9c01931ff40bd265cfc3d920f726574680000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://acd0921ed1f9ccb9f350b33cf74ce47ec2f22169e0bac101ea057cfb2d1c891e"}]}