{"status":"1","message":"OK","result":[{"SourceCode":"/* ==================================================================== */\r\n/* Copyright (c) 2018 The ether.online Project.  All rights reserved.\r\n/* \r\n/* https://ether.online  The first RPG game of blockchain \r\n/*  \r\n/* authors rickhunter.shen@gmail.com   \r\n/*         ssesunding@gmail.com            \r\n/* ==================================================================== */\r\n\r\npragma solidity ^0.4.20;\r\n\r\ncontract AccessAdmin {\r\n    bool public isPaused = false;\r\n    address public addrAdmin;  \r\n\r\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\r\n\r\n    function AccessAdmin() public {\r\n        addrAdmin = msg.sender;\r\n    }  \r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == addrAdmin);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!isPaused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(isPaused);\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address _newAdmin) external onlyAdmin {\r\n        require(_newAdmin != address(0));\r\n        AdminTransferred(addrAdmin, _newAdmin);\r\n        addrAdmin = _newAdmin;\r\n    }\r\n\r\n    function doPause() external onlyAdmin whenNotPaused {\r\n        isPaused = true;\r\n    }\r\n\r\n    function doUnpause() external onlyAdmin whenPaused {\r\n        isPaused = false;\r\n    }\r\n}\r\n\r\ncontract AccessService is AccessAdmin {\r\n    address public addrService;\r\n    address public addrFinance;\r\n\r\n    modifier onlyService() {\r\n        require(msg.sender == addrService);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFinance() {\r\n        require(msg.sender == addrFinance);\r\n        _;\r\n    }\r\n\r\n    function setService(address _newService) external {\r\n        require(msg.sender == addrService || msg.sender == addrAdmin);\r\n        require(_newService != address(0));\r\n        addrService = _newService;\r\n    }\r\n\r\n    function setFinance(address _newFinance) external {\r\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\r\n        require(_newFinance != address(0));\r\n        addrFinance = _newFinance;\r\n    }\r\n\r\n    function withdraw(address _target, uint256 _amount) \r\n        external \r\n    {\r\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\r\n        require(_amount > 0);\r\n        address receiver = _target == address(0) ? addrFinance : _target;\r\n        uint256 balance = this.balance;\r\n        if (_amount < balance) {\r\n            receiver.transfer(_amount);\r\n        } else {\r\n            receiver.transfer(this.balance);\r\n        }      \r\n    }\r\n}\r\n\r\ninterface IDataMining {\r\n    function getRecommender(address _target) external view returns(address);\r\n    function subFreeMineral(address _target) external returns(bool);\r\n}\r\n\r\ninterface IDataEquip {\r\n    function isEquiped(address _target, uint256 _tokenId) external view returns(bool);\r\n    function isEquipedAny2(address _target, uint256 _tokenId1, uint256 _tokenId2) external view returns(bool);\r\n    function isEquipedAny3(address _target, uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool);\r\n}\r\n\r\ncontract DataMining is AccessService, IDataMining {\r\n    event RecommenderChange(address indexed _target, address _recommender);\r\n    event FreeMineralChange(address indexed _target, uint32 _accCnt);\r\n\r\n    /// @dev Recommend relationship map\r\n    mapping (address => address) recommendRelation;\r\n    /// @dev Free mining count map\r\n    mapping (address => uint32) freeMineral;\r\n    /// @dev Trust contract\r\n    mapping (address => bool) actionContracts;\r\n\r\n    function DataMining() public {\r\n        addrAdmin = msg.sender;\r\n        addrService = msg.sender;\r\n        addrFinance = msg.sender;\r\n    }\r\n\r\n    function setRecommender(address _target, address _recommender) \r\n        external\r\n        onlyService\r\n    {\r\n        require(_target != address(0));\r\n        recommendRelation[_target] = _recommender;\r\n        RecommenderChange(_target, _recommender);\r\n    }\r\n\r\n    function setRecommenderMulti(address[] _targets, address[] _recommenders) \r\n        external\r\n        onlyService\r\n    {\r\n        uint256 targetLength = _targets.length;\r\n        require(targetLength <= 64);\r\n        require(targetLength == _recommenders.length);\r\n        address addrZero = address(0);\r\n        for (uint256 i = 0; i < targetLength; ++i) {\r\n            if (_targets[i] != addrZero) {\r\n                recommendRelation[_targets[i]] = _recommenders[i];\r\n                RecommenderChange(_targets[i], _recommenders[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getRecommender(address _target) external view returns(address) {\r\n        return recommendRelation[_target];\r\n    }\r\n\r\n    function addFreeMineral(address _target, uint32 _cnt)  \r\n        external\r\n        onlyService\r\n    {\r\n        require(_target != address(0));\r\n        require(_cnt <= 32);\r\n        uint32 oldCnt = freeMineral[_target];\r\n        freeMineral[_target] = oldCnt + _cnt;\r\n        FreeMineralChange(_target, freeMineral[_target]);\r\n    }\r\n\r\n    function addFreeMineralMulti(address[] _targets, uint32[] _cnts)\r\n        external\r\n        onlyService\r\n    {\r\n        uint256 targetLength = _targets.length;\r\n        require(targetLength <= 64);\r\n        require(targetLength == _cnts.length);\r\n        address addrZero = address(0);\r\n        uint32 oldCnt;\r\n        uint32 newCnt;\r\n        address addr;\r\n        for (uint256 i = 0; i < targetLength; ++i) {\r\n            addr = _targets[i];\r\n            if (addr != addrZero && _cnts[i] <= 32) {\r\n                oldCnt = freeMineral[addr];\r\n                newCnt = oldCnt + _cnts[i];\r\n                assert(oldCnt < newCnt);\r\n                freeMineral[addr] = newCnt;\r\n                FreeMineralChange(addr, freeMineral[addr]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\r\n        actionContracts[_actionAddr] = _useful;\r\n    }\r\n\r\n    function getActionContract(address _actionAddr) external view onlyAdmin returns(bool) {\r\n        return actionContracts[_actionAddr];\r\n    }\r\n\r\n    function subFreeMineral(address _target) external returns(bool) {\r\n        require(actionContracts[msg.sender]);\r\n        require(_target != address(0));\r\n        uint32 cnts = freeMineral[_target];\r\n        assert(cnts > 0);\r\n        freeMineral[_target] = cnts - 1;\r\n        FreeMineralChange(_target, cnts - 1);\r\n        return true;\r\n    }\r\n\r\n    function getFreeMineral(address _target) external view returns(uint32) {\r\n        return freeMineral[_target];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getRecommender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_recommenders\",\"type\":\"address[]\"}],\"name\":\"setRecommenderMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionAddr\",\"type\":\"address\"}],\"name\":\"getActionContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getFreeMineral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_recommender\",\"type\":\"address\"}],\"name\":\"setRecommender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_actionAddr\",\"type\":\"address\"},{\"name\":\"_useful\",\"type\":\"bool\"}],\"name\":\"setActionContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrFinance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFinance\",\"type\":\"address\"}],\"name\":\"setFinance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_cnt\",\"type\":\"uint32\"}],\"name\":\"addFreeMineral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newService\",\"type\":\"address\"}],\"name\":\"setService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_cnts\",\"type\":\"uint32[]\"}],\"name\":\"addFreeMineralMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrService\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"subFreeMineral\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_recommender\",\"type\":\"address\"}],\"name\":\"RecommenderChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_accCnt\",\"type\":\"uint32\"}],\"name\":\"FreeMineralChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"preAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"}]","ContractName":"DataMining","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b797b91ecca59fb5cbf0177c210d4da3c31d88a167fac98011edef6f0b1bb3ad"}]}