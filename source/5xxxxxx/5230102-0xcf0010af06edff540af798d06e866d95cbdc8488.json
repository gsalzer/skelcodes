{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract UnicornManagementInterface {\r\n\r\n    function ownerAddress() external view returns (address);\r\n    function managerAddress() external view returns (address);\r\n    function communityAddress() external view returns (address);\r\n    function dividendManagerAddress() external view returns (address);\r\n    function walletAddress() external view returns (address);\r\n    function blackBoxAddress() external view returns (address);\r\n    function unicornBreedingAddress() external view returns (address);\r\n    function geneLabAddress() external view returns (address);\r\n    function unicornTokenAddress() external view returns (address);\r\n    function candyToken() external view returns (address);\r\n    function candyPowerToken() external view returns (address);\r\n\r\n    function createDividendPercent() external view returns (uint);\r\n    function sellDividendPercent() external view returns (uint);\r\n    function subFreezingPrice() external view returns (uint);\r\n    function subFreezingTime() external view returns (uint64);\r\n    function subTourFreezingPrice() external view returns (uint);\r\n    function subTourFreezingTime() external view returns (uint64);\r\n    function createUnicornPrice() external view returns (uint);\r\n    function createUnicornPriceInCandy() external view returns (uint);\r\n    function oraclizeFee() external view returns (uint);\r\n\r\n    function paused() external view returns (bool);\r\n    //    function locked() external view returns (bool);\r\n\r\n    function isTournament(address _tournamentAddress) external view returns (bool);\r\n\r\n    function getCreateUnicornFullPrice() external view returns (uint);\r\n    function getHybridizationFullPrice(uint _price) external view returns (uint);\r\n    function getSellUnicornFullPrice(uint _price) external view returns (uint);\r\n    function getCreateUnicornFullPriceInCandy() external view returns (uint);\r\n\r\n\r\n    //service\r\n    function registerInit(address _contract) external;\r\n\r\n}\r\n\r\ncontract UnicornAccessControl {\r\n\r\n    UnicornManagementInterface public unicornManagement;\r\n\r\n    function UnicornAccessControl(address _unicornManagementAddress) public {\r\n        unicornManagement = UnicornManagementInterface(_unicornManagementAddress);\r\n        unicornManagement.registerInit(this);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == unicornManagement.ownerAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == unicornManagement.managerAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyCommunity() {\r\n        require(msg.sender == unicornManagement.communityAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyTournament() {\r\n        require(unicornManagement.isTournament(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!unicornManagement.paused());\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(unicornManagement.paused());\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyManagement() {\r\n        require(msg.sender == address(unicornManagement));\r\n        _;\r\n    }\r\n\r\n    modifier onlyBreeding() {\r\n        require(msg.sender == unicornManagement.unicornBreedingAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyGeneLab() {\r\n        require(msg.sender == unicornManagement.geneLabAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyBlackBox() {\r\n        require(msg.sender == unicornManagement.blackBoxAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyUnicornToken() {\r\n        require(msg.sender == unicornManagement.unicornTokenAddress());\r\n        _;\r\n    }\r\n\r\n    function isGamePaused() external view returns (bool) {\r\n        return unicornManagement.paused();\r\n    }\r\n}\r\n\r\ncontract UnicornBreedingInterface {\r\n    function deleteOffer(uint _unicornId) external;\r\n    function deleteHybridization(uint _unicornId) external;\r\n}\r\n\r\n\r\ncontract UnicornBase is UnicornAccessControl {\r\n    using SafeMath for uint;\r\n    UnicornBreedingInterface public unicornBreeding; //set on deploy\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 unicornId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 unicornId);\r\n    event UnicornGeneSet(uint indexed unicornId);\r\n    event UnicornGeneUpdate(uint indexed unicornId);\r\n    event UnicornFreezingTimeSet(uint indexed unicornId, uint time);\r\n    event UnicornTourFreezingTimeSet(uint indexed unicornId, uint time);\r\n\r\n\r\n    struct Unicorn {\r\n        bytes gene;\r\n        uint64 birthTime;\r\n        uint64 freezingEndTime;\r\n        uint64 freezingTourEndTime;\r\n        string name;\r\n    }\r\n\r\n    uint8 maxFreezingIndex = 7;\r\n    uint32[8] internal freezing = [\r\n    uint32(1 hours),    //1 hour\r\n    uint32(2 hours),    //2 - 4 hours\r\n    uint32(8 hours),    //8 - 12 hours\r\n    uint32(16 hours),   //16 - 24 hours\r\n    uint32(36 hours),   //36 - 48 hours\r\n    uint32(72 hours),   //72 - 96 hours\r\n    uint32(120 hours),  //120 - 144 hours\r\n    uint32(168 hours)   //168 hours\r\n    ];\r\n\r\n    //count for random plus from 0 to ..\r\n    uint32[8] internal freezingPlusCount = [\r\n    0, 3, 5, 9, 13, 25, 25, 0\r\n    ];\r\n\r\n    // Total amount of unicorns\r\n    uint256 private totalUnicorns;\r\n\r\n    // Incremental counter of unicorns Id\r\n    uint256 private lastUnicornId;\r\n\r\n    //Mapping from unicorn ID to Unicorn struct\r\n    mapping(uint256 => Unicorn) public unicorns;\r\n\r\n    // Mapping from unicorn ID to owner\r\n    mapping(uint256 => address) private unicornOwner;\r\n\r\n    // Mapping from unicorn ID to approved address\r\n    mapping(uint256 => address) private unicornApprovals;\r\n\r\n    // Mapping from owner to list of owned unicorn IDs\r\n    mapping(address => uint256[]) private ownedUnicorns;\r\n\r\n    // Mapping from unicorn ID to index of the owner unicorns list\r\n    // т.е. ID уникорна => порядковый номер в списке владельца\r\n    mapping(uint256 => uint256) private ownedUnicornsIndex;\r\n\r\n    // Mapping from unicorn ID to approval for GeneLab\r\n    mapping(uint256 => bool) private unicornApprovalsForGeneLab;\r\n\r\n    modifier onlyOwnerOf(uint256 _unicornId) {\r\n        require(owns(msg.sender, _unicornId));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the owner of the specified unicorn ID\r\n    * @param _unicornId uint256 ID of the unicorn to query the owner of\r\n    * @return owner address currently marked as the owner of the given unicorn ID\r\n    */\r\n    function ownerOf(uint256 _unicornId) public view returns (address) {\r\n        return unicornOwner[_unicornId];\r\n        //        address owner = unicornOwner[_unicornId];\r\n        //        require(owner != address(0));\r\n        //        return owner;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalUnicorns;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address\r\n    * @param _owner address to query the balance of\r\n    * @return uint256 representing the amount owned by the passed address\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return ownedUnicorns[_owner].length;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the list of unicorns owned by a given address\r\n    * @param _owner address to query the unicorns of\r\n    * @return uint256[] representing the list of unicorns owned by the passed address\r\n    */\r\n    function unicornsOf(address _owner) public view returns (uint256[]) {\r\n        return ownedUnicorns[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the approved address to take ownership of a given unicorn ID\r\n    * @param _unicornId uint256 ID of the unicorn to query the approval of\r\n    * @return address currently approved to take ownership of the given unicorn ID\r\n    */\r\n    function approvedFor(uint256 _unicornId) public view returns (address) {\r\n        return unicornApprovals[_unicornId];\r\n    }\r\n\r\n    /**\r\n    * @dev Tells whether the msg.sender is approved for the given unicorn ID or not\r\n    * This function is not private so it can be extended in further implementations like the operatable ERC721\r\n    * @param _owner address of the owner to query the approval of\r\n    * @param _unicornId uint256 ID of the unicorn to query the approval of\r\n    * @return bool whether the msg.sender is approved for the given unicorn ID or not\r\n    */\r\n    function allowance(address _owner, uint256 _unicornId) public view returns (bool) {\r\n        return approvedFor(_unicornId) == _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Approves another address to claim for the ownership of the given unicorn ID\r\n    * @param _to address to be approved for the given unicorn ID\r\n    * @param _unicornId uint256 ID of the unicorn to be approved\r\n    */\r\n    function approve(address _to, uint256 _unicornId) public onlyOwnerOf(_unicornId) {\r\n        //модификатор onlyOwnerOf гарантирует, что owner = msg.sender\r\n        //        address owner = ownerOf(_unicornId);\r\n        require(_to != msg.sender);\r\n        if (approvedFor(_unicornId) != address(0) || _to != address(0)) {\r\n            unicornApprovals[_unicornId] = _to;\r\n            emit Approval(msg.sender, _to, _unicornId);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Claims the ownership of a given unicorn ID\r\n    * @param _unicornId uint256 ID of the unicorn being claimed by the msg.sender\r\n    */\r\n    function takeOwnership(uint256 _unicornId) public {\r\n        require(allowance(msg.sender, _unicornId));\r\n        clearApprovalAndTransfer(ownerOf(_unicornId), msg.sender, _unicornId);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers the ownership of a given unicorn ID to another address\r\n    * @param _to address to receive the ownership of the given unicorn ID\r\n    * @param _unicornId uint256 ID of the unicorn to be transferred\r\n    */\r\n    function transfer(address _to, uint256 _unicornId) public onlyOwnerOf(_unicornId) {\r\n        clearApprovalAndTransfer(msg.sender, _to, _unicornId);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Internal function to clear current approval and transfer the ownership of a given unicorn ID\r\n    * @param _from address which you want to send unicorns from\r\n    * @param _to address which you want to transfer the unicorn to\r\n    * @param _unicornId uint256 ID of the unicorn to be transferred\r\n    */\r\n    function clearApprovalAndTransfer(address _from, address _to, uint256 _unicornId) internal {\r\n        require(owns(_from, _unicornId));\r\n        require(_to != address(0));\r\n        require(_to != ownerOf(_unicornId));\r\n\r\n        clearApproval(_from, _unicornId);\r\n        removeUnicorn(_from, _unicornId);\r\n        addUnicorn(_to, _unicornId);\r\n        emit Transfer(_from, _to, _unicornId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to clear current approval of a given unicorn ID\r\n    * @param _unicornId uint256 ID of the unicorn to be transferred\r\n    */\r\n    function clearApproval(address _owner, uint256 _unicornId) private {\r\n        require(owns(_owner, _unicornId));\r\n        unicornApprovals[_unicornId] = 0;\r\n        emit Approval(_owner, 0, _unicornId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to add a unicorn ID to the list of a given address\r\n    * @param _to address representing the new owner of the given unicorn ID\r\n    * @param _unicornId uint256 ID of the unicorn to be added to the unicorns list of the given address\r\n    */\r\n    function addUnicorn(address _to, uint256 _unicornId) private {\r\n        require(unicornOwner[_unicornId] == address(0));\r\n        unicornOwner[_unicornId] = _to;\r\n        //        uint256 length = balanceOf(_to);\r\n        uint256 length = ownedUnicorns[_to].length;\r\n        ownedUnicorns[_to].push(_unicornId);\r\n        ownedUnicornsIndex[_unicornId] = length;\r\n        totalUnicorns = totalUnicorns.add(1);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to remove a unicorn ID from the list of a given address\r\n    * @param _from address representing the previous owner of the given unicorn ID\r\n    * @param _unicornId uint256 ID of the unicorn to be removed from the unicorns list of the given address\r\n    */\r\n    function removeUnicorn(address _from, uint256 _unicornId) private {\r\n        require(owns(_from, _unicornId));\r\n\r\n        uint256 unicornIndex = ownedUnicornsIndex[_unicornId];\r\n        //        uint256 lastUnicornIndex = balanceOf(_from).sub(1);\r\n        uint256 lastUnicornIndex = ownedUnicorns[_from].length.sub(1);\r\n        uint256 lastUnicorn = ownedUnicorns[_from][lastUnicornIndex];\r\n\r\n        unicornOwner[_unicornId] = 0;\r\n        ownedUnicorns[_from][unicornIndex] = lastUnicorn;\r\n        ownedUnicorns[_from][lastUnicornIndex] = 0;\r\n        // Note that this will handle single-element arrays. In that case, both unicornIndex and lastUnicornIndex are going to\r\n        // be zero. Then we can make sure that we will remove _unicornId from the ownedUnicorns list since we are first swapping\r\n        // the lastUnicorn to the first position, and then dropping the element placed in the last position of the list\r\n\r\n        ownedUnicorns[_from].length--;\r\n        ownedUnicornsIndex[_unicornId] = 0;\r\n        ownedUnicornsIndex[lastUnicorn] = unicornIndex;\r\n        totalUnicorns = totalUnicorns.sub(1);\r\n\r\n        //deleting sale offer, if exists\r\n        //TODO check if contract exists?\r\n        //        if (address(unicornBreeding) != address(0)) {\r\n        unicornBreeding.deleteOffer(_unicornId);\r\n        unicornBreeding.deleteHybridization(_unicornId);\r\n        //        }\r\n    }\r\n\r\n    //specific\r\n    //    function burnUnicorn(uint256 _unicornId) onlyOwnerOf(_unicornId) public  {\r\n    //        if (approvedFor(_unicornId) != 0) {\r\n    //            clearApproval(msg.sender, _unicornId);\r\n    //        }\r\n    //        removeUnicorn(msg.sender, _unicornId);\r\n    //        //destroy unicorn data\r\n    //        delete unicorns[_unicornId];\r\n    //        emit Transfer(msg.sender, 0x0, _unicornId);\r\n    //    }\r\n\r\n\r\n    function createUnicorn(address _owner) onlyBreeding external returns (uint) {\r\n        require(_owner != address(0));\r\n        uint256 _unicornId = lastUnicornId++;\r\n        addUnicorn(_owner, _unicornId);\r\n        //store new unicorn data\r\n        unicorns[_unicornId] = Unicorn({\r\n            gene : new bytes(0),\r\n            birthTime : uint64(now),\r\n            freezingEndTime : 0,\r\n            freezingTourEndTime: 0,\r\n            name: ''\r\n            });\r\n        emit Transfer(0x0, _owner, _unicornId);\r\n        return _unicornId;\r\n    }\r\n\r\n\r\n    function owns(address _claimant, uint256 _unicornId) public view returns (bool) {\r\n        return ownerOf(_unicornId) == _claimant && ownerOf(_unicornId) != address(0);\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _unicornId) public {\r\n        require(_to != address(this));\r\n        require(allowance(msg.sender, _unicornId));\r\n        clearApprovalAndTransfer(_from, _to, _unicornId);\r\n    }\r\n\r\n\r\n    function fromHexChar(uint8 _c) internal pure returns (uint8) {\r\n        return _c - (_c < 58 ? 48 : (_c < 97 ? 55 : 87));\r\n    }\r\n\r\n\r\n    function getUnicornGenByte(uint _unicornId, uint _byteNo) public view returns (uint8) {\r\n        uint n = _byteNo << 1; // = _byteNo * 2\r\n        //        require(unicorns[_unicornId].gene.length >= n + 1);\r\n        if (unicorns[_unicornId].gene.length < n + 1) {\r\n            return 0;\r\n        }\r\n        return fromHexChar(uint8(unicorns[_unicornId].gene[n])) << 4 | fromHexChar(uint8(unicorns[_unicornId].gene[n + 1]));\r\n    }\r\n\r\n\r\n    function setName(uint256 _unicornId, string _name ) public onlyOwnerOf(_unicornId) returns (bool) {\r\n        bytes memory tmp = bytes(unicorns[_unicornId].name);\r\n        require(tmp.length == 0);\r\n\r\n        unicorns[_unicornId].name = _name;\r\n        return true;\r\n    }\r\n\r\n\r\n    function getGen(uint _unicornId) external view returns (bytes){\r\n        return unicorns[_unicornId].gene;\r\n    }\r\n\r\n    function setGene(uint _unicornId, bytes _gene) onlyBlackBox external  {\r\n        if (unicorns[_unicornId].gene.length == 0) {\r\n            unicorns[_unicornId].gene = _gene;\r\n            emit UnicornGeneSet(_unicornId);\r\n        }\r\n    }\r\n\r\n    function updateGene(uint _unicornId, bytes _gene) onlyGeneLab public {\r\n        require(unicornApprovalsForGeneLab[_unicornId]);\r\n        delete unicornApprovalsForGeneLab[_unicornId];\r\n        unicorns[_unicornId].gene = _gene;\r\n        emit UnicornGeneUpdate(_unicornId);\r\n    }\r\n\r\n    function approveForGeneLab(uint256 _unicornId) public onlyOwnerOf(_unicornId) {\r\n        unicornApprovalsForGeneLab[_unicornId] = true;\r\n    }\r\n\r\n    function clearApprovalForGeneLab(uint256 _unicornId) public onlyOwnerOf(_unicornId) {\r\n        delete unicornApprovalsForGeneLab[_unicornId];\r\n    }\r\n\r\n    //transfer by market\r\n    function marketTransfer(address _from, address _to, uint256 _unicornId) onlyBreeding external {\r\n        clearApprovalAndTransfer(_from, _to, _unicornId);\r\n    }\r\n\r\n    function plusFreezingTime(uint _unicornId) onlyBreeding external  {\r\n        unicorns[_unicornId].freezingEndTime = uint64(_getFreezeTime(getUnicornGenByte(_unicornId, 163)) + now);\r\n        emit UnicornFreezingTimeSet(_unicornId, unicorns[_unicornId].freezingEndTime);\r\n    }\r\n\r\n    function plusTourFreezingTime(uint _unicornId) onlyBreeding external {\r\n        unicorns[_unicornId].freezingTourEndTime = uint64(_getFreezeTime(getUnicornGenByte(_unicornId, 168)) + now);\r\n        emit UnicornTourFreezingTimeSet(_unicornId, unicorns[_unicornId].freezingTourEndTime);\r\n    }\r\n\r\n    function _getFreezeTime(uint8 freezingIndex) internal view returns (uint time) {\r\n        freezingIndex %= maxFreezingIndex;\r\n        time = freezing[freezingIndex];\r\n        if (freezingPlusCount[freezingIndex] != 0) {\r\n            time += (uint(block.blockhash(block.number - 1)) % freezingPlusCount[freezingIndex]) * 1 hours;\r\n        }\r\n    }\r\n\r\n\r\n    //change freezing time for candy\r\n    function minusFreezingTime(uint _unicornId, uint64 _time) onlyBreeding public {\r\n        //не минусуем на уже размороженных конях\r\n        require(unicorns[_unicornId].freezingEndTime > now);\r\n        //не используем safeMath, т.к. subFreezingTime в теории не должен быть больше now %)\r\n        unicorns[_unicornId].freezingEndTime -= _time;\r\n    }\r\n\r\n    //change tour freezing time for candy\r\n    function minusTourFreezingTime(uint _unicornId, uint64 _time) onlyBreeding public {\r\n        //не минусуем на уже размороженных конях\r\n        require(unicorns[_unicornId].freezingTourEndTime > now);\r\n        //не используем safeMath, т.к. subTourFreezingTime в теории не должен быть больше now %)\r\n        unicorns[_unicornId].freezingTourEndTime -= _time;\r\n    }\r\n\r\n    function isUnfreezed(uint _unicornId) public view returns (bool) {\r\n        return (unicorns[_unicornId].birthTime > 0 && unicorns[_unicornId].freezingEndTime <= uint64(now));\r\n    }\r\n\r\n    function isTourUnfreezed(uint _unicornId) public view returns (bool) {\r\n        return (unicorns[_unicornId].birthTime > 0 && unicorns[_unicornId].freezingTourEndTime <= uint64(now));\r\n    }\r\n\r\n}\r\n\r\ncontract UnicornToken is UnicornBase {\r\n    string public constant name = \"UnicornGO\";\r\n    string public constant symbol = \"UNG\";\r\n\r\n    function UnicornToken(address _unicornManagementAddress) UnicornAccessControl(_unicornManagementAddress) public {\r\n\r\n    }\r\n\r\n    function init() onlyManagement whenPaused external {\r\n        unicornBreeding = UnicornBreedingInterface(unicornManagement.unicornBreedingAddress());\r\n    }\r\n\r\n    function() public {\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isGamePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"getGen\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"},{\"name\":\"_gene\",\"type\":\"bytes\"}],\"name\":\"setGene\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"plusFreezingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint64\"}],\"name\":\"minusFreezingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"},{\"name\":\"_gene\",\"type\":\"bytes\"}],\"name\":\"updateGene\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"},{\"name\":\"_byteNo\",\"type\":\"uint256\"}],\"name\":\"getUnicornGenByte\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unicorns\",\"outputs\":[{\"name\":\"gene\",\"type\":\"bytes\"},{\"name\":\"birthTime\",\"type\":\"uint64\"},{\"name\":\"freezingEndTime\",\"type\":\"uint64\"},{\"name\":\"freezingTourEndTime\",\"type\":\"uint64\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_claimant\",\"type\":\"address\"},{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"owns\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"approveForGeneLab\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unicornManagement\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"unicornsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint64\"}],\"name\":\"minusTourFreezingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"clearApprovalForGeneLab\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"marketTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unicornBreeding\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"isTourUnfreezed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"isUnfreezed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createUnicorn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"plusTourFreezingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_unicornManagementAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"unicornId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"unicornId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"}],\"name\":\"UnicornGeneSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"}],\"name\":\"UnicornGeneUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UnicornFreezingTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UnicornTourFreezingTimeSet\",\"type\":\"event\"}]","ContractName":"UnicornToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000010cc060f6f9b2e5dcdb23f1361e4b368a7daec73","Library":"","SwarmSource":"bzzr://95cde313cfac7151c96a4d4d3bbdd3b35404888e39765c06d5c33e84a20ee7ca"}]}