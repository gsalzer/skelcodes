{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Base { \r\n    using SafeMath for uint256; \r\n    uint public createTime = now;\r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner)  public  onlyOwner {\r\n        owner = _newOwner;\r\n    }    \r\n            \r\n    bool public globalLocked = false;     \r\n\r\n    function lock() internal {         \r\n        require(!globalLocked);\r\n        globalLocked = true;\r\n    }\r\n\r\n    function unLock() internal {\r\n        require(globalLocked);\r\n        globalLocked = false;\r\n    }    \r\n\r\n    function setLock()  public onlyOwner{      \r\n        globalLocked = false;     \r\n    }\r\n\r\n    mapping (address => uint256) public userEtherOf;    \r\n    \r\n    function userRefund() public  returns(bool _result) {             \r\n        return _userRefund(msg.sender);\r\n    }\r\n\r\n    function _userRefund(address _to) internal returns(bool _result){  \r\n        require (_to != 0x0);  \r\n        lock();\r\n        uint256 amount = userEtherOf[msg.sender];   \r\n        if(amount > 0){\r\n            userEtherOf[msg.sender] = 0;\r\n            _to.transfer(amount); \r\n            _result = true;\r\n        }\r\n        else{\r\n            _result = false;\r\n        }\r\n        unLock();\r\n    }\r\n\r\n    uint public currentEventId = 1;                         \r\n\r\n    function getEventId() internal returns(uint _result) {    \r\n        _result = currentEventId;\r\n        currentEventId ++;\r\n    }\r\n   \r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract TokenERC20 is Base {                                             \r\n    string public name = 'Don Quixote Token';                           \r\n    string public symbol = 'DON';\r\n    uint8 public decimals = 9;\r\n    uint256 public totalSupply = (10 ** 9) * (10 ** uint256(decimals));    \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n \r\n    function webGiftUnTransfer(address _from, address _to) public view returns(bool _result);   \r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require(_from != 0x0);\r\n        require(_to != 0x0);\r\n        require(_value > 0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to].add(_value) >= balanceOf[_to]);\r\n\r\n        require(_from != _to);\r\n        require(!webGiftUnTransfer(_from, _to));                                         \r\n\r\n        uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from].add( balanceOf[_to]) == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_from != 0x0);\r\n        require(_to != 0x0);\r\n        require(_value > 0);\r\n        require(_value <= allowance[_from][msg.sender]);    \r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {  \r\n        require(_spender != 0x0);\r\n        require(_value > 0);\r\n        //require(_value <= balanceOf[msg.sender]);         \r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        require(_spender != 0x0);\r\n        require(_value > 0);\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {           \r\n        require(_value > 0);\r\n        require(balanceOf[msg.sender] >= _value);  \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value); \r\n        totalSupply = totalSupply.sub(_value);   \r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(_from != 0x0);\r\n        require(_value > 0);\r\n        assert(1 >= 2);\r\n        symbol = 'DON';\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract DonQuixoteToken is TokenERC20{          \r\n    address public iniOwner;                      \r\n\r\n    function DonQuixoteToken(address _santaClaus)  public {\r\n        require(_santaClaus != 0x0 && _santaClaus != msg.sender);\r\n        owner = msg.sender;\r\n        iniOwner = msg.sender;\r\n        balanceOf[msg.sender] = totalSupply; \r\n        santaClaus = _santaClaus;\r\n    }\r\n\r\n    uint public lastAddYear = now;\r\n\r\n    event OnAddYearToken(uint256 _lastTotalSupply, uint256 _currentTotalSupply, uint _years, uint _eventTime, uint _eventId);\r\n\r\n    function addYearToken() public returns(bool _result) {   \r\n        _result = false;\r\n        if(now - lastAddYear > 1 years){\r\n            uint256 _lastTotalSupply = totalSupply;\r\n            uint y = (now - lastAddYear).div(1 years);  \r\n            if(y > 0){\r\n                for(uint i = 1; i <= y; i++){\r\n                    totalSupply = totalSupply.mul(102).div(100);       \r\n                }\r\n                uint256 _add = totalSupply.sub(_lastTotalSupply);\r\n                balanceOf[iniOwner] = balanceOf[iniOwner].add(_add);\r\n                lastAddYear = lastAddYear.add(y.mul(1 years));\r\n                emit OnAddYearToken(_lastTotalSupply, totalSupply, y, now, getEventId());\r\n                _result = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    address public santaClaus;                         \r\n\r\n    function setSantaClaus(address _newSantaClaus)  public  onlyOwner {  \r\n        require(_newSantaClaus != 0x0);\r\n        santaClaus = _newSantaClaus;\r\n    }\r\n\r\n    modifier onlySantaClaus {\r\n        require(msg.sender == santaClaus);\r\n        _;\r\n    }\r\n\r\n    uint    public webGiftLineTime = now + 60 days;\r\n    uint256 public webGiftTotalAmount = totalSupply * 5 / 100;  \r\n    uint256 public webGiftSentAmount  = 0;                       \r\n    uint256 public webGiftOnceMaxAmount = 600 * (10 ** uint256(decimals));  \r\n    uint256 public webGiftEtherAmount = 0.005 ether;                      \r\n    bool    public stopSendWebGift  = false;\r\n\r\n    function setWebGiftEtherAmount(uint256 _value) public onlyOwner{\r\n        require(_value <= 0.1 ether);\r\n        webGiftEtherAmount = _value;\r\n    }\r\n\r\n    function setStopSendWebGift(bool _value) public onlyOwner{\r\n        stopSendWebGift = _value;\r\n    }\r\n\r\n    function canSendWebGift() public view returns (bool _result){\r\n        _result = (now < webGiftLineTime) && (!stopSendWebGift) && (webGiftSentAmount <= webGiftTotalAmount) && (balanceOf[iniOwner] >= webGiftOnceMaxAmount);\r\n    }\r\n\r\n    function canSendWebGifAmount() public view returns(uint256 _result) {     \r\n        _result = 0;\r\n        if(canSendWebGift()){\r\n            _result = webGiftTotalAmount.sub(webGiftSentAmount);  \r\n        }\r\n    }\r\n\r\n    function setWebGiftOnceMaxAmount(uint256 _value) public onlyOwner{\r\n        require(_value < 1000 * (10 ** uint256(decimals)) && _value > 0);   \r\n        webGiftOnceMaxAmount = _value;\r\n    }    \r\n\r\n    event OnSendWebGiftToken(address _user, uint256 _gifTokenAmount, bool _result, uint _eventTime, uint _eventId);\r\n\r\n    function sendWebGiftToken(address _user, uint256 _gifAmount) public onlySantaClaus returns(bool _result)  {\r\n        lock();   \r\n        _result = _sendWebGiftToken( _user,  _gifAmount);\r\n        unLock();\r\n    }\r\n\r\n    function _sendWebGiftToken(address _user, uint256 _gifAmount) private returns(bool _result)  { \r\n        _result = false;\r\n        require(_user != 0x0);\r\n        require(_gifAmount > 0);\r\n        require(_user != iniOwner);                              \r\n        require(_gifAmount <= webGiftOnceMaxAmount);\r\n        require(canSendWebGifAmount() >= _gifAmount);    \r\n        _transfer(iniOwner, _user, _gifAmount);\r\n        webGiftSentAmount = webGiftSentAmount.add(_gifAmount);\r\n        \r\n        _logSendWebGiftAndSendEther(_user, _gifAmount);\r\n\r\n        _result = true;\r\n        emit OnSendWebGiftToken(_user, _gifAmount, _result, now,  getEventId());\r\n    }\r\n\r\n    function batchSendWebGiftToken(address[] _users, uint256 _gifAmount) public  onlySantaClaus returns(uint _result)  {\r\n        lock();   \r\n        _result = 0;\r\n        for (uint index = 0; index < _users.length; index++) {\r\n            address _user =  _users[index];\r\n            if(_sendWebGiftToken(_user, _gifAmount)){\r\n                _result = _result.add(1);\r\n            } \r\n        }\r\n        unLock();\r\n    }\r\n\r\n    mapping (address=>mapping(address=>bool)) public gameTransferFlagOf;   \r\n\r\n    function setGameTransferFlag(address _gameAddress, bool _gameCanTransfer) public { \r\n        require(_gameAddress != 0x0);\r\n        gameTransferFlagOf[msg.sender][_gameAddress] = !_gameCanTransfer;\r\n    }\r\n\r\n    mapping(address => bool) public gameWhiteListOf;                           \r\n\r\n    event OnWhiteListChange(address indexed _gameAddr, address _operator, bool _result,  uint _eventTime, uint _eventId);\r\n\r\n    function addWhiteList(address _gameAddr) public onlyOwner {\r\n        require (_gameAddr != 0x0);  \r\n        gameWhiteListOf[_gameAddr] = true;\r\n        emit OnWhiteListChange(_gameAddr, msg.sender, true, now, getEventId());\r\n    }  \r\n\r\n    function delWhiteList(address _gameAddr) public onlyOwner {\r\n        require (_gameAddr != 0x0);  \r\n        gameWhiteListOf[_gameAddr] = false;   \r\n        emit OnWhiteListChange(_gameAddr, msg.sender, false, now, getEventId()); \r\n    }\r\n    \r\n    function isWhiteList(address _gameAddr) private view returns(bool _result) {\r\n        require (_gameAddr != 0x0);  \r\n        _result = gameWhiteListOf[_gameAddr];\r\n    }\r\n\r\n    function withhold(address _user,  uint256 _amount) public returns (bool _result) {    \r\n        require(_user != 0x0);\r\n        require(_amount > 0);\r\n        require(msg.sender != tx.origin);\r\n        require(!gameTransferFlagOf[_user][msg.sender]);\r\n        require(isWhiteList(msg.sender));\r\n        require(balanceOf[_user] >= _amount);\r\n        \r\n        //lock();     \r\n        _transfer(_user, msg.sender, _amount);\r\n        //unLock();\r\n        return true;\r\n    }\r\n\r\n\r\n    uint    public gameGiftLineTime = now + 90 days;  \r\n    uint256 public gameGiftMaxAmount  = totalSupply * 5 / 100; \r\n    uint256 public gameGiftSentAmount  = 0;                      \r\n    uint256 public gameGiftOnceAmount  = 60 * (10 ** uint256(decimals));   \r\n    uint    public gameGiftUserTotalTimes = 100;            \r\n    uint    public gameGiftUserDayTimes = 20;                         \r\n    \r\n    struct gameGiftInfo     \r\n    {\r\n        uint ThisDay;       \r\n        uint DayTimes;     \r\n        uint TotalTimes;  \r\n    }\r\n\r\n    mapping(address => gameGiftInfo) public gameGiftInfoList;   \r\n\r\n    function _logGameGiftInfo(address _player) private {\r\n        gameGiftInfo storage ggi = gameGiftInfoList[_player];\r\n        uint thisDay = now / (1 days);\r\n        if (ggi.ThisDay == thisDay){\r\n            ggi.DayTimes = ggi.DayTimes.add(1);\r\n        }\r\n        else\r\n        {\r\n            ggi.ThisDay = thisDay;\r\n            ggi.DayTimes = 1;\r\n        }\r\n        ggi.TotalTimes = ggi.TotalTimes.add(1);\r\n    }\r\n\r\n    function timesIsOver(address _player) public view returns(bool _result){ \r\n        gameGiftInfo storage ggi = gameGiftInfoList[_player];\r\n        uint thisDay = now / (1 days);\r\n        if (ggi.ThisDay == thisDay){\r\n            _result = (ggi.DayTimes >= gameGiftUserDayTimes) || (ggi.TotalTimes >= gameGiftUserTotalTimes);\r\n        }\r\n        else{\r\n            _result = ggi.TotalTimes >= gameGiftUserTotalTimes;\r\n        }\r\n    }\r\n\r\n    function setGameGiftOnceAmount(uint256 _value) public onlyOwner{\r\n        require(_value > 0 && _value < 100 * (10 ** uint256(decimals)));\r\n        gameGiftOnceAmount = _value;\r\n    }\r\n\r\n    function gameGifIsOver() view public returns(bool _result){\r\n        _result = (gameGiftLineTime <= now) || (balanceOf[iniOwner] < gameGiftOnceAmount) || (gameGiftMaxAmount < gameGiftSentAmount.add(gameGiftOnceAmount));    \r\n    }  \r\n\r\n    event OnSendGameGift(address _game, address _player, uint256 _gameGiftOnceAmount, uint _eventTime, uint _eventId);\r\n    \r\n    function _canSendGameGift() view private returns(bool _result){\r\n        _result = (isWhiteList(msg.sender)) && (!gameGifIsOver());\r\n    }\r\n\r\n    function sendGameGift(address _player) public returns (bool _result) {\r\n        uint256 _tokenAmount = gameGiftOnceAmount;\r\n        _result = _sendGameGift(_player, _tokenAmount);\r\n    }\r\n\r\n    function sendGameGift2(address _player, uint256 _tokenAmount) public returns (bool _result) {\r\n        require(gameGiftOnceAmount >= _tokenAmount);\r\n        _result = _sendGameGift(_player, _tokenAmount);\r\n    }\r\n\r\n    function _sendGameGift(address _player, uint256 _tokenAmount) private returns (bool _result) {\r\n        require(_player != 0x0);\r\n        require(_tokenAmount > 0 && _tokenAmount <= gameGiftOnceAmount);\r\n        \r\n        if(_player == iniOwner){ \r\n            return;\r\n        }                                 \r\n\r\n        require(msg.sender != tx.origin);\r\n        if(!_canSendGameGift()){   \r\n            return;\r\n        }\r\n        if(timesIsOver(_player)){ \r\n            return;\r\n        }\r\n\r\n        lock();         \r\n        _transfer(iniOwner, _player, _tokenAmount);\r\n        gameGiftSentAmount = gameGiftSentAmount.add(_tokenAmount);\r\n        emit OnSendGameGift(msg.sender,  _player,   _tokenAmount, now, getEventId());\r\n        _logGameGiftInfo(_player);    \r\n        unLock();\r\n        _result = true;\r\n    }\r\n\r\n\r\n    uint256  public baseIcoPrice =  (0.0002 ether) / (10 ** uint256(decimals)); \r\n  \r\n    function getIcoPrice() view public returns(uint256 _result){\r\n        _result = baseIcoPrice;\r\n        uint256 addDays = (now - createTime) / (1 days); \r\n        for(uint i = 1; i <= addDays; i++){\r\n            _result = _result.mul(101).div(100);\r\n        }\r\n    } \r\n \r\n    uint256 public icoMaxAmount = totalSupply * 40 / 100;   \r\n    uint256 public icoedAmount = 0;                        \r\n    uint    public icoEndLine = now + 180 days;          \r\n\r\n    function icoIsOver() view public returns(bool _result){\r\n        _result = (icoEndLine < now)  || (icoedAmount >= icoMaxAmount) || (balanceOf[iniOwner] < (icoMaxAmount - icoedAmount)); \r\n    }  \r\n\r\n    function getAvaIcoAmount() view public returns(uint256 _result){  \r\n        _result = 0;\r\n        if (!icoIsOver()){\r\n            if (icoMaxAmount > icoedAmount){               \r\n                _result = icoMaxAmount.sub(icoedAmount);  \r\n            }\r\n        }\r\n    }  \r\n\r\n    event OnBuyIcoToken(uint256 _tokenPrice, uint256 _tokenAmount, uint256 _etherAmount, address _buyer, uint _eventTime, uint _eventId);\r\n\r\n    function buyIcoToken1()  public payable returns (bool _result) {  \r\n        if(msg.value > 0){\r\n            userEtherOf[msg.sender] = userEtherOf[msg.sender].add(msg.value); \r\n        }\r\n        _result = _buyIcoToken(totalSupply);    \r\n    }\r\n\r\n    function buyIcoToken2(uint256 _tokenAmount)  public payable returns (bool _result) {  \r\n        if(msg.value > 0){\r\n            userEtherOf[msg.sender] = userEtherOf[msg.sender].add(msg.value); \r\n        }\r\n        _result = _buyIcoToken(_tokenAmount); \r\n    }\r\n\r\n    function _buyIcoToken(uint256 _tokenAmount)  private returns (bool _result) {  \r\n        _result = false;    \r\n        require(_tokenAmount > 0);   \r\n        require(!icoIsOver());   \r\n        require(msg.sender != iniOwner);                                      \r\n        require(balanceOf[iniOwner] > 0);\r\n\r\n        uint256 buyIcoPrice =  getIcoPrice();\r\n        uint256 canTokenAmount = userEtherOf[msg.sender].div(buyIcoPrice);    \r\n        require(userEtherOf[msg.sender] > 0 && canTokenAmount > 0);\r\n        if(_tokenAmount < canTokenAmount){\r\n            canTokenAmount = _tokenAmount;\r\n        }\r\n\r\n        lock();\r\n\r\n        uint256 avaIcoAmount = getAvaIcoAmount();\r\n        if(canTokenAmount > avaIcoAmount){\r\n             canTokenAmount = avaIcoAmount;\r\n        }\r\n        require(canTokenAmount > 0);\r\n        uint256 etherAmount = canTokenAmount.mul(buyIcoPrice);\r\n        userEtherOf[msg.sender] = userEtherOf[msg.sender].sub(etherAmount);   \r\n        userEtherOf[iniOwner] = userEtherOf[iniOwner].add(etherAmount);        \r\n        _transfer(iniOwner, msg.sender, canTokenAmount);                      \r\n        emit OnBuyIcoToken(buyIcoPrice, canTokenAmount, etherAmount, msg.sender, now, getEventId());\r\n        icoedAmount = icoedAmount.add(canTokenAmount);\r\n        _result = true;\r\n\r\n        unLock();\r\n    }\r\n\r\n    struct webGiftInfo   \r\n    {\r\n        uint256 Amount; \r\n        uint PlayingTime; \r\n    }\r\n\r\n    mapping(address  => webGiftInfo) public webGiftList;\r\n\r\n    function _logSendWebGiftAndSendEther(address _to, uint256 _amount) private {\r\n        require(_to != 0x0);\r\n        webGiftInfo storage wgi = webGiftList[_to];\r\n\r\n        if(wgi.Amount == 0){\r\n            if (userEtherOf[iniOwner] >= webGiftEtherAmount){          \r\n                userEtherOf[iniOwner] = userEtherOf[iniOwner].sub(webGiftEtherAmount);\r\n                _to.transfer(webGiftEtherAmount);\r\n            }\r\n        }\r\n\r\n        if(wgi.PlayingTime == 0){\r\n            wgi.Amount = wgi.Amount.add(_amount);\r\n        }\r\n    }\r\n\r\n    event OnLogPlaying(address _player, uint _eventTime, uint _eventId);\r\n\r\n    function logPlaying(address _player) public returns (bool _result) {\r\n        _result = false;\r\n        require(_player != 0x0);\r\n        require(msg.sender != tx.origin);\r\n        require(isWhiteList(msg.sender)); \r\n\r\n        if (gameGiftLineTime < now) {\r\n            return;\r\n        }\r\n        \r\n        webGiftInfo storage wgi = webGiftList[_player];\r\n        if(wgi.PlayingTime == 0){                                   \r\n            wgi.PlayingTime = now;\r\n            emit OnLogPlaying(_player, now, getEventId());\r\n        }\r\n        _result = true;\r\n    }\r\n\r\n    function webGiftUnTransfer(address _from, address _to) public view returns(bool _result){\r\n        require(_from != 0x0);\r\n        require(_to != 0x0);\r\n        if(isWhiteList(_to) || _to == iniOwner){    \r\n            _result = false;\r\n            return;\r\n        }\r\n        webGiftInfo storage wgi = webGiftList[_from];\r\n        _result = (wgi.Amount > 0) && (wgi.PlayingTime == 0) && (now <= gameGiftLineTime);   \r\n    }\r\n\r\n    event OnRestoreWebGift(address _user, uint256 _tokenAmount, uint _eventTime, uint _eventId);\r\n\r\n    function restoreWebGift(address _user) public  returns (bool _result) { \r\n        _result = false;\r\n        require(_user != 0x0);\r\n        webGiftInfo storage wgi = webGiftList[_user];\r\n        if ((0 == wgi.PlayingTime) && (0 < wgi.Amount)){  \r\n            if (gameGiftLineTime.sub(20 days) < now  && now <= gameGiftLineTime) {   \r\n                uint256 amount = wgi.Amount;\r\n                if (amount > balanceOf[_user]){\r\n                    amount = balanceOf[_user];\r\n                }\r\n                _transfer(_user, iniOwner, amount);\r\n                emit OnRestoreWebGift(_user, amount, now, getEventId());\r\n                _result = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function batchRestoreWebGift(address[] _users) public  returns (uint _result) {       \r\n        _result = 0;\r\n        for(uint i = 0; i < _users.length; i ++){\r\n            if(restoreWebGift(_users[i])){\r\n                _result = _result.add(1);\r\n            }\r\n        }\r\n    \r\n    }\r\n\r\n    \r\n    function () public payable {                      \r\n        if(msg.value > 0){\r\n            userEtherOf[msg.sender] = userEtherOf[msg.sender].add(msg.value); \r\n        }\r\n\r\n        if(msg.sender != iniOwner){\r\n            if ((userEtherOf[msg.sender] > 0) && (!icoIsOver())){\r\n                _buyIcoToken(totalSupply);             \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"icoMaxAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoIsOver\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canSendWebGift\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEventId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"webGiftEtherAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSantaClaus\",\"type\":\"address\"}],\"name\":\"setSantaClaus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setGameGiftOnceAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canSendWebGifAmount\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyIcoToken1\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_gifAmount\",\"type\":\"uint256\"}],\"name\":\"sendWebGiftToken\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"webGiftTotalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"logPlaying\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sendGameGift2\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameGiftInfoList\",\"outputs\":[{\"name\":\"ThisDay\",\"type\":\"uint256\"},{\"name\":\"DayTimes\",\"type\":\"uint256\"},{\"name\":\"TotalTimes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastAddYear\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"restoreWebGift\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"webGiftSentAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIcoPrice\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseIcoPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameGiftUserTotalTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvaIcoAmount\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEtherOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameGiftUserDayTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddress\",\"type\":\"address\"},{\"name\":\"_gameCanTransfer\",\"type\":\"bool\"}],\"name\":\"setGameTransferFlag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddr\",\"type\":\"address\"}],\"name\":\"delWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userRefund\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"webGiftLineTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameTransferFlagOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"webGiftUnTransfer\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameGiftSentAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameGiftLineTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndLine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopSendWebGift\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"buyIcoToken2\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"sendGameGift\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"batchRestoreWebGift\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setWebGiftOnceMaxAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameGifIsOver\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setWebGiftEtherAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iniOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameGiftMaxAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withhold\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameGiftOnceAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"},{\"name\":\"_gifAmount\",\"type\":\"uint256\"}],\"name\":\"batchSendWebGiftToken\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"webGiftOnceMaxAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addYearToken\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddr\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameWhiteListOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"timesIsOver\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"santaClaus\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setStopSendWebGift\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"webGiftList\",\"outputs\":[{\"name\":\"Amount\",\"type\":\"uint256\"},{\"name\":\"PlayingTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_santaClaus\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lastTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_years\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnAddYearToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gifTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnSendWebGiftToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnWhiteListChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_game\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gameGiftOnceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnSendGameGift\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnBuyIcoToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnLogPlaying\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnRestoreWebGift\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"DonQuixoteToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007bbe81d3e05419bb56fa618d33c5fc114165b041","Library":"","SwarmSource":"bzzr://c227db2d8e57527e4e4abb5bdf84ba28caf260bd13f3c6c6ab6740aefb856bd7"}]}