{"status":"1","message":"OK","result":[{"SourceCode":"// CryptoRabbit Source code\r\n\r\npragma solidity ^0.4.20;\r\n\r\n\r\n/**\r\n * \r\n * @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n * @author cuilichen\r\n */\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint total);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function ownerOf(uint _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint _tokenId) external;\r\n    function transfer(address _to, uint _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint tokenId);\r\n    \r\n}\r\n\r\n\r\n\r\n/// @title A base contract to control ownership\r\n/// @author cuilichen\r\ncontract OwnerBase {\r\n\r\n    // The addresses of the accounts that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n    \r\n    /// constructor\r\n    function OwnerBase() public {\r\n       ceoAddress = msg.sender;\r\n       cfoAddress = msg.sender;\r\n       cooAddress = msg.sender;\r\n    }\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n    \r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new COO\r\n    function setCFO(address _newCFO) external onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n    \r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) external onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCOO whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public onlyCOO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n\t\r\n\t\r\n\t/// @dev check wether target address is a contract or not\r\n    function isNotContract(address addr) internal view returns (bool) {\r\n        uint size = 0;\r\n        assembly { \r\n\t\t    size := extcodesize(addr) \r\n\t\t} \r\n        return size == 0;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * \r\n * @title Interface for contracts conforming to fighters camp\r\n * @author cuilichen\r\n */\r\ncontract FighterCamp {\r\n    \r\n    //\r\n    function isCamp() public pure returns (bool);\r\n    \r\n    // Required methods\r\n    function getFighter(uint _tokenId) external view returns (uint32);\r\n    \r\n}\r\n\r\n/// @title Base contract for CryptoRabbit. Holds all common structs, events and base variables.\r\n/// @author cuilichen\r\n/// @dev See the RabbitCore contract documentation to understand how the various contract facets are arranged.\r\ncontract RabbitBase is ERC721, OwnerBase, FighterCamp {\r\n\r\n    /*** EVENTS ***/\r\n    /// @dev The Birth event is fired whenever a new rabbit comes into existence. \r\n    event Birth(address owner, uint rabbitId, uint32 star, uint32 explosive, uint32 endurance, uint32 nimble, uint64 genes, uint8 isBox);\r\n\r\n    /*** DATA TYPES ***/\r\n    struct RabbitData {\r\n        //genes for rabbit\r\n        uint64 genes;\r\n        //\r\n        uint32 star;\r\n        //\r\n        uint32 explosive;\r\n        //\r\n        uint32 endurance;\r\n        //\r\n        uint32 nimble;\r\n        //birth time \r\n        uint64 birthTime;\r\n    }\r\n\r\n    /// @dev An array containing the Rabbit struct for all rabbits in existence. The ID\r\n    ///  of each rabbit is actually an index into this array. \r\n    RabbitData[] rabbits;\r\n\r\n    /// @dev A mapping from rabbit IDs to the address that owns them. \r\n    mapping (uint => address) rabbitToOwner;\r\n\r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    //  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint) howManyDoYouHave;\r\n\r\n    /// @dev A mapping from RabbitIDs to an address that has been approved to call\r\n    ///  transfeFrom(). Each Rabbit can only have one approved address for transfer\r\n    ///  at any time. A zero value means no approval is outstanding.\r\n    mapping (uint => address) public rabbitToApproved;\r\n\r\n\t\r\n\t\r\n    /// @dev Assigns ownership of a specific Rabbit to an address.\r\n    function _transItem(address _from, address _to, uint _tokenId) internal {\r\n        // Since the number of rabbits is capped to 2^32 we can't overflow this\r\n        howManyDoYouHave[_to]++;\r\n        // transfer ownership\r\n        rabbitToOwner[_tokenId] = _to;\r\n        // When creating new rabbits _from is 0x0, but we can't account that address.\r\n        if (_from != address(0)) {\r\n            howManyDoYouHave[_from]--;\r\n        }\r\n        // clear any previously approved ownership exchange\r\n        delete rabbitToApproved[_tokenId];\r\n        \r\n        // Emit the transfer event.\r\n\t\tif (_tokenId > 0) {\r\n\t\t\temit Transfer(_from, _to, _tokenId);\r\n\t\t}\r\n    }\r\n\r\n    /// @dev An internal method that creates a new rabbit and stores it. This\r\n    ///  method doesn't do any checking and should only be called when the\r\n    ///  input data is known to be valid. Will generate both a Birth event\r\n    ///  and a Transfer event.\r\n    function _createRabbit(\r\n        uint _star,\r\n        uint _explosive,\r\n        uint _endurance,\r\n        uint _nimble,\r\n        uint _genes,\r\n        address _owner,\r\n\t\tuint8 isBox\r\n    )\r\n        internal\r\n        returns (uint)\r\n    {\r\n        require(_star >= 1 && _star <= 5);\r\n\t\t\r\n\t\tRabbitData memory _tmpRbt = RabbitData({\r\n            genes: uint64(_genes),\r\n            star: uint32(_star),\r\n            explosive: uint32(_explosive),\r\n            endurance: uint32(_endurance),\r\n            nimble: uint32(_nimble),\r\n            birthTime: uint64(now)\r\n        });\r\n        uint newRabbitID = rabbits.push(_tmpRbt) - 1;\r\n        \r\n        \r\n        /* */\r\n\r\n        // emit the birth event\r\n        emit Birth(\r\n            _owner,\r\n            newRabbitID,\r\n            _tmpRbt.star,\r\n            _tmpRbt.explosive,\r\n            _tmpRbt.endurance,\r\n            _tmpRbt.nimble,\r\n            _tmpRbt.genes,\r\n\t\t\tisBox\r\n        );\r\n\r\n        // This will assign ownership, and also emit the Transfer event as\r\n        // per ERC721 draft\r\n        if (_owner != address(0)){\r\n            _transItem(0, _owner, newRabbitID);\r\n        } else {\r\n            _transItem(0, ceoAddress, newRabbitID);\r\n        }\r\n        \r\n        \r\n        return newRabbitID;\r\n    }\r\n    \r\n    /// @notice Returns all the relevant information about a specific rabbit.\r\n    /// @param _tokenId The ID of the rabbit of interest.\r\n    function getRabbit(uint _tokenId) external view returns (\r\n        uint32 outStar,\r\n        uint32 outExplosive,\r\n        uint32 outEndurance,\r\n        uint32 outNimble,\r\n        uint64 outGenes,\r\n        uint64 outBirthTime\r\n    ) {\r\n        RabbitData storage rbt = rabbits[_tokenId];\r\n        outStar = rbt.star;\r\n        outExplosive = rbt.explosive;\r\n        outEndurance = rbt.endurance;\r\n        outNimble = rbt.nimble;\r\n        outGenes = rbt.genes;\r\n        outBirthTime = rbt.birthTime;\r\n    }\r\n\t\r\n\t\r\n    function isCamp() public pure returns (bool){\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /// @dev An external method that get infomation of the fighter\r\n    /// @param _tokenId The ID of the fighter.\r\n    function getFighter(uint _tokenId) external view returns (uint32) {\r\n        RabbitData storage rbt = rabbits[_tokenId];\r\n        uint32 strength = uint32(rbt.explosive + rbt.endurance + rbt.nimble); \r\n\t\treturn strength;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/// @title The facet of the CryptoRabbit core contract that manages ownership, ERC-721 (draft) compliant.\r\n/// @author cuilichen\r\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\r\n///  See the RabbitCore contract documentation to understand how the various contract facets are arranged.\r\ncontract RabbitOwnership is RabbitBase {\r\n\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public name;\r\n    string public symbol;\r\n    \r\n    //identify this is ERC721\r\n    function isERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // Internal utility functions: These functions all assume that their input arguments\r\n    // are valid. We leave it to public methods to sanitize their inputs and follow\r\n    // the required logic.\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular Rabbit.\r\n    /// @param _owner the address we are validating against.\r\n    /// @param _tokenId rabbit id, only valid when > 0\r\n    function _owns(address _owner, uint _tokenId) internal view returns (bool) {\r\n        return rabbitToOwner[_tokenId] == _owner;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular Rabbit.\r\n    /// @param _claimant the address we are confirming rabbit is approved for.\r\n    /// @param _tokenId rabbit id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint _tokenId) internal view returns (bool) {\r\n        return rabbitToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transfeFrom(), overwriting any previous\r\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\r\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\r\n    ///  _approve() and transfeFrom() are used together for putting rabbits on auction, and\r\n    ///  there is no value in spamming the log with Approval events in that case.\r\n    function _approve(uint _tokenId, address _to) internal {\r\n        rabbitToApproved[_tokenId] = _to;\r\n    }\r\n\r\n    /// @notice Returns the number of rabbits owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function balanceOf(address _owner) public view returns (uint count) {\r\n        return howManyDoYouHave[_owner];\r\n    }\r\n\r\n    /// @notice Transfers a Rabbit to another address. If transferring to a smart\r\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\r\n    ///  CryptoRabbit specifically) or your Rabbit may be lost forever. Seriously.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the Rabbit to transfer.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(\r\n        address _to,\r\n        uint _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n\t\t\r\n\t\t// Disallow transfers to this contract to prevent accidental misuse.\r\n\t\trequire(_to != address(this));\r\n        \r\n        // You can only send your own rabbit.\r\n        require(_owns(msg.sender, _tokenId));\r\n        \r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transItem(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Grant another address the right to transfer a specific Rabbit via\r\n    ///  transfeFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Rabbit that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(\r\n        address _to,\r\n        uint _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {   \r\n        require(_owns(msg.sender, _tokenId));    // Only an owner can grant transfer approval.\r\n        require(msg.sender != _to);     // can not approve to itself;\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Emit approval event.\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Transfer a Rabbit owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the Rabbit to be transfered.\r\n    /// @param _to The address that should take ownership of the Rabbit. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the Rabbit to be transferred.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        \r\n        //\r\n        require(_owns(_from, _tokenId));\r\n        \r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        \r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        _transItem(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns the total number of rabbits currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint) {\r\n        return rabbits.length - 1;\r\n    }\r\n\r\n    /// @notice Returns the address currently assigned ownership of a given Rabbit.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint _tokenId)\r\n        external\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = rabbitToOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n    /// @notice Returns a list of all Rabbit IDs assigned to an address.\r\n    /// @param _owner The owner whose rabbits we are interested in.\r\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n    ///  expensive (it walks the entire Rabbit array looking for rabbits belonging to owner),\r\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n    ///  not contract-to-contract calls.\r\n    function tokensOfOwner(address _owner) external view returns(uint[] ownerTokens) {\r\n        uint tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            // Return an empty array\r\n            return new uint[](0);\r\n        } else {\r\n            uint[] memory result = new uint[](tokenCount);\r\n            uint totalCats = totalSupply();\r\n            uint resultIndex = 0;\r\n\r\n            // We count on the fact that all rabbits have IDs starting at 1 and increasing\r\n            // sequentially up to the totalCat count.\r\n            uint rabbitId;\r\n\r\n            for (rabbitId = 1; rabbitId <= totalCats; rabbitId++) {\r\n                if (rabbitToOwner[rabbitId] == _owner) {\r\n                    result[resultIndex] = rabbitId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/// @title all functions related to creating rabbits and sell rabbits\r\ncontract RabbitMinting is RabbitOwnership {\r\n    \r\n    // Price (in wei) for star5 rabbit \r\n    uint public priceStar5Now = 1 ether;\r\n    \r\n    // Price (in wei) for star4 rabbit \r\n    uint public priceStar4 = 100 finney;\r\n    \r\n    // Price (in wei) for star3 rabbit \r\n    uint public priceStar3 = 5 finney;    \r\n    \r\n    \r\n    uint private priceStar5Min = 1 ether;\r\n    uint private priceStar5Add = 2 finney;\r\n    \r\n    //rabbit box1 \r\n    uint public priceBox1 = 10 finney;\r\n    uint public box1Star5 = 50;\r\n    uint public box1Star4 = 500;\r\n\t\r\n\t//rabbit box2\r\n\tuint public priceBox2 = 100 finney;\r\n    uint public box2Star5 = 500;\r\n\t\r\n    \r\n    \r\n    // Limits the number of star5 rabbits can ever create.\r\n    uint public constant LIMIT_STAR5 = 2000;\r\n\t\r\n\t// Limits the number of star4 rabbits can ever create.\r\n    uint public constant LIMIT_STAR4 = 20000;\r\n    \r\n    // Limits the number of rabbits the contract owner can ever create.\r\n    uint public constant LIMIT_PROMO = 5000;\r\n    \r\n    // Counts the number of rabbits of star 5\r\n    uint public CREATED_STAR5;\r\n\t\r\n\t// Counts the number of rabbits of star 4\r\n    uint public CREATED_STAR4;\r\n    \r\n    // Counts the number of rabbits the contract owner has created.\r\n    uint public CREATED_PROMO;\r\n    \r\n    //an secret key used for random\r\n    uint private secretKey = 392828872;\r\n    \r\n    //box is on sale\r\n    bool private box1OnSale = true;\r\n\t\r\n\t//box is on sale\r\n    bool private box2OnSale = true;\r\n\t\r\n\t//record any task id for updating datas;\r\n\tmapping(uint => uint8) usedSignId;\r\n   \r\n    \r\n    /// @dev set base infomation by coo\r\n    function setBaseInfo(uint val, bool _onSale1, bool _onSale2) external onlyCOO {\r\n        secretKey = val;\r\n\t\tbox1OnSale = _onSale1;\r\n        box2OnSale = _onSale2;\r\n    }\r\n    \r\n    /// @dev we can create promo rabbits, up to a limit. Only callable by COO\r\n    function createPromoRabbit(uint _star, address _owner) whenNotPaused external onlyCOO {\r\n        require (_owner != address(0));\r\n        require(CREATED_PROMO < LIMIT_PROMO);\r\n       \r\n        if (_star == 5){\r\n            require(CREATED_STAR5 < LIMIT_STAR5);\r\n        } else if (_star == 4){\r\n            require(CREATED_STAR4 < LIMIT_STAR4);\r\n        }\r\n        CREATED_PROMO++;\r\n        \r\n        _createRabbitInGrade(_star, _owner, 0);\r\n    }\r\n    \r\n    \r\n    \r\n    /// @dev create a rabbit with grade, and set its owner.\r\n    function _createRabbitInGrade(uint _star, address _owner, uint8 isBox) internal {\r\n        uint _genes = uint(keccak256(uint(_owner) + secretKey + rabbits.length));\r\n        uint _explosive = 50;\r\n        uint _endurance = 50;\r\n        uint _nimble = 50;\r\n        \r\n        if (_star < 5) {\r\n            uint tmp = _genes; \r\n            tmp = uint(keccak256(tmp));\r\n            _explosive =  1 + 10 * (_star - 1) + tmp % 10;\r\n            tmp = uint(keccak256(tmp));\r\n            _endurance = 1 + 10 * (_star - 1) + tmp % 10;\r\n            tmp = uint(keccak256(tmp));\r\n            _nimble = 1 + 10 * (_star - 1) + tmp % 10;\r\n        } \r\n\t\t\r\n\t\tuint64 _geneShort = uint64(_genes);\r\n\t\tif (_star == 5){\r\n\t\t\tCREATED_STAR5++;\r\n\t\t\tpriceStar5Now = priceStar5Min + priceStar5Add * CREATED_STAR5;\r\n\t\t\t_geneShort = uint64(_geneShort - _geneShort % 2000 + CREATED_STAR5);\r\n\t\t} else if (_star == 4){\r\n\t\t\tCREATED_STAR4++;\r\n\t\t} \r\n\t\t\r\n        _createRabbit(\r\n            _star, \r\n            _explosive, \r\n            _endurance, \r\n            _nimble, \r\n            _geneShort, \r\n            _owner,\r\n\t\t\tisBox);\r\n    }\r\n    \r\n    \r\n        \r\n    /// @notice customer buy a rabbit\r\n    /// @param _star the star of the rabbit to buy\r\n    function buyOneRabbit(uint _star) external payable whenNotPaused returns (bool) {\r\n\t\trequire(isNotContract(msg.sender));\r\n\t\t\r\n        uint tmpPrice = 0;\r\n        if (_star == 5){\r\n            tmpPrice = priceStar5Now;\r\n\t\t\trequire(CREATED_STAR5 < LIMIT_STAR5);\r\n        } else if (_star == 4){\r\n            tmpPrice = priceStar4;\r\n\t\t\trequire(CREATED_STAR4 < LIMIT_STAR4);\r\n        } else if (_star == 3){\r\n            tmpPrice = priceStar3;\r\n        } else {\r\n\t\t\trevert();\r\n\t\t}\r\n        \r\n        require(msg.value >= tmpPrice);\r\n        _createRabbitInGrade(_star, msg.sender, 0);\r\n        \r\n        // Return the funds. \r\n        uint fundsExcess = msg.value - tmpPrice;\r\n        if (fundsExcess > 1 finney) {\r\n            msg.sender.transfer(fundsExcess);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    \r\n        \r\n    /// @notice customer buy a box\r\n    function buyBox1() external payable whenNotPaused returns (bool) {\r\n\t\trequire(isNotContract(msg.sender));\r\n        require(box1OnSale);\r\n        require(msg.value >= priceBox1);\r\n\t\t\r\n        uint tempVal = uint(keccak256(uint(msg.sender) + secretKey + rabbits.length));\r\n        tempVal = tempVal % 10000;\r\n        uint _star = 3; //default\r\n        if (tempVal <= box1Star5){\r\n            _star = 5;\r\n\t\t\trequire(CREATED_STAR5 < LIMIT_STAR5);\r\n        } else if (tempVal <= box1Star5 + box1Star4){\r\n            _star = 4;\r\n\t\t\trequire(CREATED_STAR4 < LIMIT_STAR4);\r\n        } \r\n        \r\n        _createRabbitInGrade(_star, msg.sender, 2);\r\n        \r\n        // Return the funds. \r\n        uint fundsExcess = msg.value - priceBox1;\r\n        if (fundsExcess > 1 finney) {\r\n            msg.sender.transfer(fundsExcess);\r\n        }\r\n        return true;\r\n    }\r\n\t\r\n\t    \r\n    /// @notice customer buy a box\r\n    function buyBox2() external payable whenNotPaused returns (bool) {\r\n\t\trequire(isNotContract(msg.sender));\r\n        require(box2OnSale);\r\n        require(msg.value >= priceBox2);\r\n\t\t\r\n        uint tempVal = uint(keccak256(uint(msg.sender) + secretKey + rabbits.length));\r\n        tempVal = tempVal % 10000;\r\n        uint _star = 4; //default\r\n        if (tempVal <= box2Star5){\r\n            _star = 5;\r\n\t\t\trequire(CREATED_STAR5 < LIMIT_STAR5);\r\n        } else {\r\n\t\t\trequire(CREATED_STAR4 < LIMIT_STAR4);\r\n\t\t}\r\n        \r\n        _createRabbitInGrade(_star, msg.sender, 3);\r\n        \r\n        // Return the funds. \r\n        uint fundsExcess = msg.value - priceBox2;\r\n        if (fundsExcess > 1 finney) {\r\n            msg.sender.transfer(fundsExcess);\r\n        }\r\n        return true;\r\n    }\r\n\t\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/// @title all functions related to creating rabbits and sell rabbits\r\ncontract RabbitAuction is RabbitMinting {\r\n    \r\n    //events about auctions\r\n    event AuctionCreated(uint tokenId, uint startingPrice, uint endingPrice, uint duration, uint startTime, uint32 explosive, uint32 endurance, uint32 nimble, uint32 star);\r\n    event AuctionSuccessful(uint tokenId, uint totalPrice, address winner);\r\n    event AuctionCancelled(uint tokenId);\r\n\tevent UpdateComplete(address account, uint tokenId);\r\n    \r\n    // Represents an auction on an NFT\r\n    struct Auction {\r\n        // Current owner of NFT\r\n        address seller;\r\n        // Price (in wei) at beginning of auction\r\n        uint128 startingPrice;\r\n        // Price (in wei) at end of auction\r\n        uint128 endingPrice;\r\n        // Duration (in seconds) of auction\r\n        uint64 duration;\r\n        // Time when auction started\r\n        uint64 startedAt;\r\n    }\r\n\r\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint public masterCut = 200;\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping (uint => Auction) tokenIdToAuction;\r\n    \r\n    \r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of time to move between starting\r\n    ///  price and ending price (in seconds).\r\n    function createAuction(\r\n        uint _tokenId,\r\n        uint _startingPrice,\r\n        uint _endingPrice,\r\n        uint _duration\r\n    )\r\n        external whenNotPaused\r\n    {\r\n\t\trequire(isNotContract(msg.sender));\r\n        require(_endingPrice >= 1 finney);\r\n        require(_startingPrice >= _endingPrice);\r\n        require(_duration <= 100 days); \r\n        require(_owns(msg.sender, _tokenId));\r\n        \r\n\t\t//assigning the ownship to this contract,\r\n        _transItem(msg.sender, this, _tokenId);\r\n        \r\n        Auction memory auction = Auction(\r\n            msg.sender,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n    \r\n    \r\n    /// @dev Returns auction info for an NFT on auction.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function getAuctionData(uint _tokenId) external view returns (\r\n        address seller,\r\n        uint startingPrice,\r\n        uint endingPrice,\r\n        uint duration,\r\n        uint startedAt,\r\n        uint currentPrice\r\n    ) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(auction.startedAt > 0);\r\n        seller = auction.seller;\r\n        startingPrice = auction.startingPrice;\r\n        endingPrice = auction.endingPrice;\r\n        duration = auction.duration;\r\n        startedAt = auction.startedAt;\r\n        currentPrice = _calcCurrentPrice(auction);\r\n    }\r\n\r\n    /// @dev Bids on an open auction, completing the auction and transferring\r\n    ///  ownership of the NFT if enough Ether is supplied.\r\n    /// @param _tokenId - ID of token to bid on.\r\n    function bid(uint _tokenId) external payable whenNotPaused {\r\n\t\trequire(isNotContract(msg.sender));\r\n\t\t\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(auction.startedAt > 0);\r\n\r\n        // Check that the bid is greater than or equal to the current price\r\n        uint price = _calcCurrentPrice(auction);\r\n        require(msg.value >= price);\r\n\r\n        // Grab a reference to the seller before the auction struct gets deleted.\r\n        address seller = auction.seller;\r\n\t\t\r\n\t\t//\r\n\t\trequire(_owns(this, _tokenId));\r\n\r\n        // The bid is good! Remove the auction before sending the fees\r\n        // to the sender so we can't have a reentrancy endurance.\r\n        delete tokenIdToAuction[_tokenId];\r\n\r\n        if (price > 0) {\r\n            // Calculate the auctioneer's cut.\r\n            uint auctioneerCut = price * masterCut / 10000;\r\n            uint sellerProceeds = price - auctioneerCut;\r\n\t\t\trequire(sellerProceeds <= price);\r\n\r\n            // Doing a transfer() after removing the auction\r\n            seller.transfer(sellerProceeds);\r\n        }\r\n\r\n        // Calculate any excess funds included with the bid. \r\n        uint bidExcess = msg.value - price;\r\n\r\n        // Return the funds. \r\n\t\tif (bidExcess >= 1 finney) {\r\n\t\t\tmsg.sender.transfer(bidExcess);\r\n\t\t}\r\n\r\n        // Tell the world!\r\n        emit AuctionSuccessful(_tokenId, price, msg.sender);\r\n        \r\n        //give goods to bidder.\r\n        _transItem(this, msg.sender, _tokenId);\r\n    }\r\n\r\n    /// @dev Cancels an auction that hasn't been won yet.\r\n    ///  Returns the NFT to original owner.\r\n    /// @notice This is a state-modifying function that can\r\n    ///  be called while the contract is paused.\r\n    /// @param _tokenId - ID of token on auction\r\n    function cancelAuction(uint _tokenId) external whenNotPaused {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(auction.startedAt > 0);\r\n        address seller = auction.seller;\r\n        require(msg.sender == seller);\r\n        _cancelAuction(_tokenId);\r\n    }\r\n\r\n    /// @dev Cancels an auction when the contract is paused.\r\n    ///  Only the owner may do this, and NFTs are returned to\r\n    ///  the seller. This should only be used in emergencies.\r\n    /// @param _tokenId - ID of the NFT on auction to cancel.\r\n    function cancelAuctionByMaster(uint _tokenId)\r\n        external onlyCOO whenPaused\r\n    {\r\n        _cancelAuction(_tokenId);\r\n    }\r\n\t\r\n    \r\n    /// @dev Adds an auction to the list of open auctions. Also fires an event.\r\n    /// @param _tokenId The ID of the token to be put on auction.\r\n    /// @param _auction Auction to add.\r\n    function _addAuction(uint _tokenId, Auction _auction) internal {\r\n        // Require that all auctions have a duration of\r\n        // at least one minute. (Keeps our math from getting hairy!)\r\n        require(_auction.duration >= 1 minutes);\r\n\r\n        tokenIdToAuction[_tokenId] = _auction;\r\n        \r\n        RabbitData storage rdata = rabbits[_tokenId];\r\n\r\n        emit AuctionCreated(\r\n            uint(_tokenId),\r\n            uint(_auction.startingPrice),\r\n            uint(_auction.endingPrice),\r\n            uint(_auction.duration),\r\n            uint(_auction.startedAt),\r\n            uint32(rdata.explosive),\r\n            uint32(rdata.endurance),\r\n            uint32(rdata.nimble),\r\n            uint32(rdata.star)\r\n        );\r\n    }\r\n\r\n    /// @dev Cancels an auction unconditionally.\r\n    function _cancelAuction(uint _tokenId) internal {\r\n\t    Auction storage auction = tokenIdToAuction[_tokenId];\r\n\t\t_transItem(this, auction.seller, _tokenId);\r\n        delete tokenIdToAuction[_tokenId];\r\n        emit AuctionCancelled(_tokenId);\r\n    }\r\n\r\n    /// @dev Returns current price of an NFT on auction. \r\n    function _calcCurrentPrice(Auction storage _auction)\r\n        internal\r\n        view\r\n        returns (uint outPrice)\r\n    {\r\n        int256 duration = _auction.duration;\r\n        int256 price0 = _auction.startingPrice;\r\n        int256 price2 = _auction.endingPrice;\r\n        require(duration > 0);\r\n        \r\n        int256 secondsPassed = int256(now) - int256(_auction.startedAt);\r\n        require(secondsPassed >= 0);\r\n        if (secondsPassed < _auction.duration) {\r\n            int256 priceChanged = (price2 - price0) * secondsPassed / duration;\r\n            int256 currentPrice = price0 + priceChanged;\r\n            outPrice = uint(currentPrice);\r\n        } else {\r\n            outPrice = _auction.endingPrice;\r\n        }\r\n    }\r\n    \r\n\t\r\n\t\r\n\t\r\n\t/// @dev tranfer token to the target, in case of some error occured.\r\n    ///  Only the coo may do this.\r\n\t/// @param _to The target address.\r\n\t/// @param _to The id of the token.\r\n\tfunction transferOnError(address _to, uint _tokenId) external onlyCOO {\r\n\t\trequire(_owns(this, _tokenId));\t\t\r\n\t\tAuction storage auction = tokenIdToAuction[_tokenId];\r\n\t\trequire(auction.startedAt == 0);\r\n\t\t\r\n\t\t_transItem(this, _to, _tokenId);\r\n\t}\r\n\t\r\n\t\r\n\t/// @dev allow the user to draw a rabbit, with a signed message from coo\r\n\tfunction getFreeRabbit(uint32 _star, uint _taskId, uint8 v, bytes32 r, bytes32 s) external {\r\n\t\trequire(usedSignId[_taskId] == 0);\r\n\t\tuint[2] memory arr = [_star, _taskId];\r\n\t\tstring memory text = uint2ToStr(arr);\r\n\t\taddress signer = verify(text, v, r, s);\r\n\t\trequire(signer == cooAddress);\r\n\t\t\r\n\t\t_createRabbitInGrade(_star, msg.sender, 4);\r\n\t\tusedSignId[_taskId] = 1;\r\n\t}\r\n\t\r\n\t\r\n\t/// @dev allow any user to set rabbit data, with a signed message from coo\r\n\tfunction setRabbitData(\r\n\t\tuint _tokenId, \r\n\t\tuint32 _explosive, \r\n\t\tuint32 _endurance, \r\n\t\tuint32 _nimble,\r\n\t\tuint _taskId,\r\n\t\tuint8 v, \r\n\t\tbytes32 r, \r\n\t\tbytes32 s\r\n\t) external {\r\n\t\trequire(usedSignId[_taskId] == 0);\r\n\t\t\r\n\t\tAuction storage auction = tokenIdToAuction[_tokenId];\r\n\t\trequire (auction.startedAt == 0);\r\n\t\t\r\n\t\tuint[5] memory arr = [_tokenId, _explosive, _endurance, _nimble, _taskId];\r\n\t\tstring memory text = uint5ToStr(arr);\r\n\t\taddress signer = verify(text, v, r, s);\r\n\t\trequire(signer == cooAddress);\r\n\t\t\r\n\t\tRabbitData storage rdata = rabbits[_tokenId];\r\n\t\trdata.explosive = _explosive;\r\n\t\trdata.endurance = _endurance;\r\n\t\trdata.nimble = _nimble;\r\n\t\trabbits[_tokenId] = rdata;\t\t\r\n\t\t\r\n\t\tusedSignId[_taskId] = 1;\r\n\t\temit UpdateComplete(msg.sender, _tokenId);\r\n\t}\r\n\t\r\n\t/// @dev werify wether the message is form coo or not.\r\n\tfunction verify(string text, uint8 v, bytes32 r, bytes32 s) public pure returns (address) {\t\t\r\n\t\tbytes32 hash = keccak256(text);\r\n\t\tbytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n\t\tbytes32 prefixedHash = keccak256(prefix, hash);\r\n\t\taddress tmp = ecrecover(prefixedHash, v, r, s);\r\n\t\treturn tmp;\r\n\t}\r\n    \r\n\t/// @dev create an string according to the array\r\n    function uint2ToStr(uint[2] arr) internal pure returns (string){\r\n    \tuint length = 0;\r\n    \tuint i = 0;\r\n    \tuint val = 0;\r\n    \tfor(; i < arr.length; i++){\r\n    \t\tval = arr[i];\r\n    \t\twhile(val >= 10) {\r\n    \t\t\tlength += 1;\r\n    \t\t\tval = val / 10;\r\n    \t\t}\r\n    \t\tlength += 1;//for single \r\n    \t\tlength += 1;//for comma\r\n    \t}\r\n    \tlength -= 1;//remove last comma\r\n    \t\r\n    \t//copy char to bytes\r\n    \tbytes memory bstr = new bytes(length);\r\n        uint k = length - 1;\r\n        int j = int(arr.length - 1);\r\n    \twhile (j >= 0) {\r\n    \t\tval = arr[uint(j)];\r\n    \t\tif (val == 0) {\r\n    \t\t\tbstr[k] = byte(48);\r\n    \t\t\tif (k > 0) {\r\n    \t\t\t    k--;\r\n    \t\t\t}\r\n    \t\t} else {\r\n    \t\t    while (val != 0){\r\n    \t\t\t\tbstr[k] = byte(48 + val % 10);\r\n    \t\t\t\tval /= 10;\r\n    \t\t\t\tif (k > 0) {\r\n        \t\t\t    k--;\r\n        \t\t\t}\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\t\r\n    \t\tif (j > 0) { //add comma\r\n\t\t\t\tassert(k > 0);\r\n    \t\t\tbstr[k] = byte(44);\r\n    \t\t\tk--;\r\n    \t\t}\r\n    \t\t\r\n    \t\tj--;\r\n    \t}\r\n    \t\r\n        return string(bstr);\r\n    }\r\n\t\r\n\t/// @dev create an string according to the array\r\n    function uint5ToStr(uint[5] arr) internal pure returns (string){\r\n    \tuint length = 0;\r\n    \tuint i = 0;\r\n    \tuint val = 0;\r\n    \tfor(; i < arr.length; i++){\r\n    \t\tval = arr[i];\r\n    \t\twhile(val >= 10) {\r\n    \t\t\tlength += 1;\r\n    \t\t\tval = val / 10;\r\n    \t\t}\r\n    \t\tlength += 1;//for single \r\n    \t\tlength += 1;//for comma\r\n    \t}\r\n    \tlength -= 1;//remove last comma\r\n    \t\r\n    \t//copy char to bytes\r\n    \tbytes memory bstr = new bytes(length);\r\n        uint k = length - 1;\r\n        int j = int(arr.length - 1);\r\n    \twhile (j >= 0) {\r\n    \t\tval = arr[uint(j)];\r\n    \t\tif (val == 0) {\r\n    \t\t\tbstr[k] = byte(48);\r\n    \t\t\tif (k > 0) {\r\n    \t\t\t    k--;\r\n    \t\t\t}\r\n    \t\t} else {\r\n    \t\t    while (val != 0){\r\n    \t\t\t\tbstr[k] = byte(48 + val % 10);\r\n    \t\t\t\tval /= 10;\r\n    \t\t\t\tif (k > 0) {\r\n        \t\t\t    k--;\r\n        \t\t\t}\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\t\r\n    \t\tif (j > 0) { //add comma\r\n\t\t\t\tassert(k > 0);\r\n    \t\t\tbstr[k] = byte(44);\r\n    \t\t\tk--;\r\n    \t\t}\r\n    \t\t\r\n    \t\tj--;\r\n    \t}\r\n    \t\r\n        return string(bstr);\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title CryptoRabbit: Collectible, oh-so-adorable rabbits on the Ethereum blockchain.\r\n/// @author cuilichen\r\n/// @dev The main CryptoRabbit contract, keeps track of rabbits so they don't wander around and get lost.\r\n/// This is the main CryptoRabbit contract. In order to keep our code seperated into logical sections.\r\ncontract RabbitCore is RabbitAuction {\r\n    \r\n    event ContractUpgrade(address newContract);\r\n\r\n    // Set in case the core contract is broken and an upgrade is required\r\n    address public newContractAddress;\r\n\r\n    /// @notice Creates the main CryptoRabbit smart contract instance.\r\n    function RabbitCore(string _name, string _symbol) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        \r\n        // the creator of the contract is the initial CEO\r\n        ceoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n        cfoAddress = msg.sender;\r\n        \r\n        //first rabbit in this world\r\n        _createRabbit(5, 50, 50, 50, 1, msg.sender, 0);\r\n    }\r\n    \r\n\r\n    /// @dev Used to mark the smart contract as upgraded.\r\n    /// @param _v2Address new address\r\n    function upgradeContract(address _v2Address) external onlyCOO whenPaused {\r\n        // See README.md for updgrade plan\r\n        newContractAddress = _v2Address;\r\n        emit ContractUpgrade(_v2Address);\r\n    }\r\n\r\n\r\n    /// @dev Override unpause so it requires all external contract addresses\r\n    ///  to be set before contract can be unpaused. Also, we can't have\r\n    ///  newContractAddress set either, because then the contract was upgraded.\r\n    /// @notice This is public rather than external so we can call super.unpause\r\n    ///  without using an expensive CALL.\r\n    function unpause() public onlyCOO {\r\n        require(newContractAddress == address(0));\r\n        \r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n\r\n    // @dev Allows the CEO to capture the balance available to the contract.\r\n    function withdrawBalance() external onlyCFO {\r\n        address tmp = address(this);\r\n        cfoAddress.transfer(tmp.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceBox1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATED_STAR4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_explosive\",\"type\":\"uint32\"},{\"name\":\"_endurance\",\"type\":\"uint32\"},{\"name\":\"_nimble\",\"type\":\"uint32\"},{\"name\":\"_taskId\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"setRabbitData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuctionData\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"name\":\"endingPrice\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"startedAt\",\"type\":\"uint256\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rabbitToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyBox1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceStar5Now\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferOnError\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceStar4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIMIT_STAR4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuctionByMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceBox2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getFighter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceStar3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyBox2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"box2Star5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIMIT_STAR5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"box1Star4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATED_PROMO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_star\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPromoRabbit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_star\",\"type\":\"uint32\"},{\"name\":\"_taskId\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"getFreeRabbit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATED_STAR5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_star\",\"type\":\"uint256\"}],\"name\":\"buyOneRabbit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRabbit\",\"outputs\":[{\"name\":\"outStar\",\"type\":\"uint32\"},{\"name\":\"outExplosive\",\"type\":\"uint32\"},{\"name\":\"outEndurance\",\"type\":\"uint32\"},{\"name\":\"outNimble\",\"type\":\"uint32\"},{\"name\":\"outGenes\",\"type\":\"uint64\"},{\"name\":\"outBirthTime\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"box1Star5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIMIT_PROMO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"},{\"name\":\"_onSale1\",\"type\":\"bool\"},{\"name\":\"_onSale2\",\"type\":\"bool\"}],\"name\":\"setBaseInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"explosive\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"endurance\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"nimble\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"star\",\"type\":\"uint32\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"AuctionSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"UpdateComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rabbitId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"star\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"explosive\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"endurance\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"nimble\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"isBox\",\"type\":\"uint8\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"RabbitCore","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000541436f726500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035242540000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f21a16a07229d525d98b9581ad264771f93174edbef1766a26c2e462d5de6818"}]}