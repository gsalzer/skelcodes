{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ninterface token {\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n}\r\n\r\ncontract Crowdsale {\r\n    address public owner;\r\n    address public SSOTHEALTH_FUNDS_ADDRESS = 0x0089C7EC084355019A057abEDF4E8F6864242465;   // SSOT Health Funds address\r\n    address public SEHR_WALLET_ADDRESS = 0x00efA609EC93Db54a7977691CCa920e623f07258;        // SEHR Main token wallet\r\n    token public tokenReward = token(0xEE660Bef1Ee1697F63554c92e372fc862f384810);           // SEHR contract address\r\n    uint public fundingGoal = 100000000 * 1 ether;  // 100,000,000 SEHRs softcap \r\n    uint public hardCap = 500000000 * 1 ether;      // 500,000,000 SEHRs hardcap\r\n    uint public amountRaised = 0;\r\n    uint public sehrRaised = 0;\r\n    uint public startTime;\r\n    uint public deadline;\r\n    uint public price = 80 szabo;                   // 0.00008 ETH/SEHR  ; 1 szabo = 10^-6 Ether\r\n    mapping(address => uint256) public balanceOf;\r\n    \r\n    bool public fundingGoalReached = false;\r\n    bool public crowdsaleClosed = false;\r\n    bool public checkDone = false;\r\n\r\n    event GoalReached(address recipient, uint totalAmountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    function Crowdsale() \r\n    {\r\n        startTime = now;\r\n        deadline = now + 62 days;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier afterDeadline() { if (now >= deadline) _; }\r\n    modifier beforeDeadline() { if (now < deadline) _; }\r\n    modifier isCrowdsale() { if (!crowdsaleClosed) _; }\r\n    modifier isCheckDone() { if (checkDone) _; }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () payable isCrowdsale beforeDeadline {\r\n        uint amount = msg.value;\r\n        \r\n        if(amount == 0 ) revert();   // Need to send some ether at least\r\n        else if( amount < 250 finney) {\r\n            if (sehrRaised < fundingGoal) {\r\n                if(now < startTime + 31 days) revert();    // Need to invest at least 0.25 Ether during the pre-sale if the funding goal hasn't been reached yet\r\n            }\r\n        }\r\n        \r\n        uint tokenAmount = (amount / price) * 1 ether; // We compute the number of tokens to issue\r\n        address sehrWallet = SEHR_WALLET_ADDRESS;\r\n        \r\n        if(sehrRaised < fundingGoal) {  // Bonus available for any tokens bought before softcap is reached\r\n            \r\n            if(now < startTime + 10 days) {\r\n                tokenAmount = (13 * tokenAmount) / 10; // 30% bonus during the first 10-day period\r\n            }\r\n            \r\n            else if(now < startTime + 20 days) {\r\n                tokenAmount = (12 * tokenAmount) / 10;     // 20% bonus during the second 10-day period\r\n            }\r\n            \r\n            else if(now < startTime + 31 days) {\r\n                tokenAmount = (11 * tokenAmount) / 10;     // 10% bonus during the third 10-day period\r\n            }\r\n        }\r\n        \r\n        balanceOf[msg.sender] += amount;\r\n        amountRaised += amount;\r\n        sehrRaised += tokenAmount;\r\n        \r\n        tokenReward.transferFrom(SEHR_WALLET_ADDRESS, msg.sender, tokenAmount); // will automatically throw is there are not enough funds remaining in the contract\r\n        FundTransfer(msg.sender, amount, true);\r\n    }\r\n\r\n\r\n    /**\r\n     * Check if goal was reached\r\n     *\r\n     * Checks if the goal or time limit has been reached and ends the campaign\r\n     */\r\n    function checkGoalReached() afterDeadline {\r\n        if (sehrRaised >= fundingGoal){\r\n            fundingGoalReached = true;\r\n            GoalReached(SSOTHEALTH_FUNDS_ADDRESS, amountRaised);\r\n        }\r\n        crowdsaleClosed = true;\r\n        checkDone = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Withdraw the funds\r\n     *\r\n     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\r\n     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\r\n     * the amount they contributed.\r\n     */\r\n    function safeWithdrawal() afterDeadline isCheckDone{\r\n        if (!fundingGoalReached) {\r\n            uint amount = balanceOf[msg.sender];\r\n            balanceOf[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                if (msg.sender.send(amount)) {\r\n                    FundTransfer(msg.sender, amount, false);\r\n                } else {\r\n                    balanceOf[msg.sender] = amount;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (fundingGoalReached && SSOTHEALTH_FUNDS_ADDRESS == msg.sender) {\r\n            if (SSOTHEALTH_FUNDS_ADDRESS.send(amountRaised)) {\r\n                FundTransfer(SSOTHEALTH_FUNDS_ADDRESS, amountRaised, false);\r\n            } else {\r\n                //If we fail to send the funds to beneficiary, unlock funders balance\r\n                fundingGoalReached = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function hardCapReached() {\r\n        if(sehrRaised == hardCap) {\r\n            deadline = now;\r\n        }\r\n        else revert();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SSOTHEALTH_FUNDS_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SEHR_WALLET_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"hardCapReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkDone\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sehrRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d2bd527d8e51be84c858eed4fbea559d9bee9842fd950b76670171ec209f19db"}]}