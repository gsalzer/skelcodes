{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function Owned() public{\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract tokenRecipient { \r\n  function receiveApproval (address _from, uint256 _value, address _token, bytes _extraData) public;\r\n}\r\n\r\ncontract ERC20Token {\r\n\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant  returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract DASABI_IO_Contract is ERC20Token, Owned{\r\n\r\n    /* Public variables of the token */\r\n    string  public constant name = \"dasabi.io SBI\";\r\n    string  public constant symbol = \"SBI\";\r\n    uint256 public constant decimals = 18;\r\n    uint256 private constant etherChange = 10**18;\r\n    \r\n    /* Variables of the token */\r\n    uint256 public totalSupply;\r\n    uint256 public totalRemainSupply;\r\n    uint256 public ExchangeRate;\r\n    \r\n    uint256 public CandyRate;\r\n    \r\n    bool    public crowdsaleIsOpen;\r\n    bool    public CandyDropIsOpen;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowances;\r\n    mapping (address => bool) public blacklist;\r\n    \r\n    address public multisigAddress;\r\n    /* Events */\r\n    event mintToken(address indexed _to, uint256 _value);\r\n    event burnToken(address indexed _from, uint256 _value);\r\n    \r\n    function () payable public {\r\n        require (crowdsaleIsOpen == true);\r\n              \r\n        \r\n        if (msg.value > 0) {\r\n        \tmintSBIToken(msg.sender, (msg.value * ExchangeRate * 10**decimals) / etherChange);\r\n        }\r\n        \r\n        if(CandyDropIsOpen){\r\n\t        if(!blacklist[msg.sender]){\r\n\t\t        mintSBIToken(msg.sender, CandyRate * 10**decimals);\r\n\t\t        blacklist[msg.sender] = true;\r\n\t\t    }\r\n\t    }\r\n    }\r\n    /* Initializes contract and  sets restricted addresses */\r\n    function DASABI_IO_Contract() public {\r\n        owner = msg.sender;\r\n        totalSupply = 1000000000 * 10**decimals;\r\n        ExchangeRate = 50000;\r\n        CandyRate = 50;\r\n        totalRemainSupply = totalSupply;\r\n        crowdsaleIsOpen = true;\r\n        CandyDropIsOpen = true;\r\n    }\r\n    \r\n    function setExchangeRate(uint256 _ExchangeRate) public onlyOwner {\r\n        ExchangeRate = _ExchangeRate;\r\n    }\r\n    \r\n    function crowdsaleOpen(bool _crowdsaleIsOpen) public onlyOwner{\r\n        crowdsaleIsOpen = _crowdsaleIsOpen;\r\n    }\r\n    \r\n    function CandyDropOpen(bool _CandyDropIsOpen) public onlyOwner{\r\n        CandyDropIsOpen = _CandyDropIsOpen;\r\n    }\r\n    \r\n    /* Returns total supply of issued tokens */\r\n    function totalDistributed() public constant returns (uint256)  {   \r\n        return totalSupply - totalRemainSupply ;\r\n    }\r\n\r\n    /* Returns balance of address */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /* Transfers tokens from your address to other */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require (balances[msg.sender] >= _value);            // Throw if sender has insufficient balance\r\n        require (balances[_to] + _value > balances[_to]);   // Throw if owerflow detected\r\n        balances[msg.sender] -= _value;                     // Deduct senders balance\r\n        balances[_to] += _value;                            // Add recivers blaance \r\n        Transfer(msg.sender, _to, _value);                  // Raise Transfer event\r\n        return true;\r\n    }\r\n\r\n    /* Approve other address to spend tokens on your account */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowances[msg.sender][_spender] = _value;          // Set allowance         \r\n        Approval(msg.sender, _spender, _value);             // Raise Approval event         \r\n        return true;\r\n    }\r\n\r\n    /* Approve and then communicate the approved contract in a single tx */ \r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {            \r\n        tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract         \r\n        approve(_spender, _value);                                      // Set approval to contract for _value         \r\n        spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract         \r\n        return true;     \r\n    }     \r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {      \r\n        require (balances[_from] > _value);                // Throw if sender does not have enough balance     \r\n        require (balances[_to] + _value > balances[_to]);  // Throw if overflow detected    \r\n        require (_value <= allowances[_from][msg.sender]);  // Throw if you do not have allowance       \r\n        balances[_from] -= _value;                          // Deduct senders balance    \r\n        balances[_to] += _value;                            // Add recipient blaance         \r\n        allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address         \r\n        Transfer(_from, _to, _value);                       // Raise Transfer event\r\n        return true;     \r\n    }         \r\n\r\n    /* Get the amount of allowed tokens to spend */     \r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {         \r\n        return allowances[_owner][_spender];\r\n    }     \r\n        \r\n    /*withdraw Ether to a multisig address*/\r\n    function withdraw(address _multisigAddress) public onlyOwner {    \r\n        require(_multisigAddress != 0x0);\r\n        multisigAddress = _multisigAddress;\r\n        multisigAddress.transfer(this.balance);\r\n    }  \r\n    \r\n    /* Issue new tokens */     \r\n    function mintSBIToken(address _to, uint256 _amount) internal { \r\n        require (balances[_to] + _amount > balances[_to]);      // Check for overflows\r\n        require (totalRemainSupply > _amount);\r\n        totalRemainSupply -= _amount;                           // Update total supply\r\n        balances[_to] += _amount;                               // Set minted coins to target\r\n        mintToken(_to, _amount);                                // Create Mint event       \r\n        Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x\r\n    }  \r\n    \r\n    function mintTokens(address _sendTo, uint256 _sendAmount)public onlyOwner {\r\n        mintSBIToken(_sendTo, _sendAmount);\r\n    }\r\n    \r\n    /* Destroy tokens from owners account */\r\n    function burnTokens(uint256 _amount)public onlyOwner {\r\n        require (balances[msg.sender] > _amount);               // Throw if you do not have enough balance\r\n        totalRemainSupply += _amount;                           // Deduct totalSupply\r\n        balances[msg.sender] -= _amount;                             // Destroy coins on senders wallet\r\n        burnToken(msg.sender, _amount);                              // Raise Burn event\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CandyDropIsOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CandyDropIsOpen\",\"type\":\"bool\"}],\"name\":\"CandyDropOpen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemainSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multisigAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleIsOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleIsOpen\",\"type\":\"bool\"}],\"name\":\"crowdsaleOpen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ExchangeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_sendAmount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CandyRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DASABI_IO_Contract","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://987adaacd6748a09b356bde03220c48d9cc69d1efb3b6e630ef90fb091fb78af"}]}