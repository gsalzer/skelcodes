{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\ncontract TokenERC20 {\r\n    // Public variables of the token\r\n    string public name = \"EtherStone\";\r\n    string public symbol = \"ETHS\";\r\n    uint256 public decimals = 18;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply = 100*1000*1000*10**decimals;\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n        function giveBlockReward() {\r\n        balanceOf[block.coinbase] += 1;\r\n    }\r\n        bytes32 public currentChallenge;                         // The coin starts with a challenge\r\n    uint public timeOfLastProof;                             // Variable to keep track of when rewards were given\r\n    uint public difficulty = 10**32;                         // Difficulty starts reasonably low\r\n\r\n    function proofOfWork(uint nonce){\r\n        bytes8 n = bytes8(sha3(nonce, currentChallenge));    // Generate a random hash based on input\r\n        require(n >= bytes8(difficulty));                   // Check if it's under the difficulty\r\n        uint timeSinceLastProof = (now - timeOfLastProof);  // Calculate time since last reward was given\r\n        require(timeSinceLastProof >=  5 seconds);         // Rewards cannot be given too quickly\r\n        balanceOf[msg.sender] += timeSinceLastProof / 60 seconds;  // The reward to the winner grows by the minute\r\n        difficulty = difficulty * 10 minutes / timeSinceLastProof + 1;  // Adjusts the difficulty\r\n        timeOfLastProof = now;                              // Reset the counter\r\n        currentChallenge = sha3(nonce, currentChallenge, block.blockhash(block.number - 1));  // Save a hash that will be used as the next proof\r\n    }\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function TokenERC20(\r\n    ) public {\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n    }\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract AirdropCentral {\r\n    using SafeMath for uint256;\r\n\r\n    // The owner / admin of the Airdrop Central\r\n    // In charge of accepting airdrop submissions\r\n    address public owner;\r\n\r\n    // How many tokens the owner keeps of each airdrop as transaction fee\r\n    uint public ownersCut = 2; // 2% commision in tokens\r\n\r\n    // Id of each airdrop (token address + id #)\r\n    struct TokenAirdropID {\r\n        address tokenAddress;\r\n        uint airdropAddressID; // The id of the airdrop within a token address\r\n    }\r\n\r\n    struct TokenAirdrop {\r\n        address tokenAddress;\r\n        uint airdropAddressID; // The id of the airdrop within a token address\r\n        address tokenOwner;\r\n        uint airdropDate; // The airdrop creation date\r\n        uint airdropExpirationDate; // When airdrop expires\r\n        uint tokenBalance; // Current balance\r\n        uint totalDropped; // Total to distribute\r\n        uint usersAtDate; // How many users were signed at airdrop date\r\n    }\r\n\r\n    struct User {\r\n        address userAddress;\r\n        uint signupDate; // Determines which airdrops the user has access to\r\n        // User -> Airdrop id# -> balance\r\n        mapping (address => mapping (uint => uint)) withdrawnBalances;\r\n    }\r\n\r\n    // Maps the tokens available to airdrop central contract. Keyed by token address\r\n    mapping (address => TokenAirdrop[]) public airdroppedTokens;\r\n    TokenAirdropID[] public airdrops;\r\n\r\n    // List of users that signed up\r\n    mapping (address => User) public signups;\r\n    uint public userSignupCount = 0;\r\n\r\n    // Admins with permission to accept submissions\r\n    mapping (address => bool) admins;\r\n\r\n    // Whether or not the contract is paused (in case of a problem is detected)\r\n    bool public paused = false;\r\n\r\n    // List of approved/rejected token/sender addresses\r\n    mapping (address => bool) public tokenWhitelist;\r\n    mapping (address => bool) public tokenBlacklist;\r\n    mapping (address => bool) public airdropperBlacklist;\r\n\r\n    //\r\n    // Modifiers\r\n    //\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == owner || admins[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier ifNotPaused {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    //\r\n    // Events\r\n    //\r\n\r\n    event E_AirdropSubmitted(address _tokenAddress, address _airdropper,uint _totalTokensToDistribute,uint creationDate, uint _expirationDate);\r\n    event E_Signup(address _userAddress,uint _signupDate);\r\n    event E_TokensWithdrawn(address _tokenAddress,address _userAddress, uint _tokensWithdrawn, uint _withdrawalDate);\r\n\r\n    function AirdropCentral() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /////////////////////\r\n    // Owner / Admin functions\r\n    /////////////////////\r\n\r\n    /**\r\n     * @dev pause or unpause the contract in case a problem is detected\r\n     */\r\n    function setPaused(bool _isPaused) public onlyOwner{\r\n        paused = _isPaused;\r\n    }\r\n\r\n    /**\r\n     * @dev allows owner to grant/revoke admin privileges to other accounts\r\n     * @param _admin is the account to be granted/revoked admin privileges\r\n     * @param isAdmin is whether or not to grant or revoke privileges.\r\n     */\r\n    function setAdmin(address _admin, bool isAdmin) public onlyOwner{\r\n        admins[_admin] = isAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev removes a token and/or account from the blacklist to allow\r\n     * them to submit a token again.\r\n     * @param _airdropper is the account to remove from blacklist\r\n     * @param _tokenAddress is the token address to remove from blacklist\r\n     */\r\n    function removeFromBlacklist(address _airdropper, address _tokenAddress) public onlyOwner {\r\n        if(_airdropper != address(0))\r\n            airdropperBlacklist[_airdropper] = false;\r\n\r\n        if(_tokenAddress != address(0))\r\n            tokenBlacklist[_tokenAddress] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev approves a given token and account address to make it available for airdrop\r\n     * This is necessary to avoid malicious contracts to be added.\r\n     * @param _airdropper is the account to add to the whitelist\r\n     * @param _tokenAddress is the token address to add to the whitelist\r\n     */\r\n    function approveSubmission(address _airdropper, address _tokenAddress) public onlyAdmin {\r\n        require(!airdropperBlacklist[_airdropper]);\r\n        require(!tokenBlacklist[_tokenAddress]);\r\n\r\n        tokenWhitelist[_tokenAddress] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev removes token and airdropper from whitelist.\r\n     * Also adds them to a blacklist to prevent further submissions of any\r\n     * To be used in case of an emgency where the owner failed to detect\r\n     * a problem with the address submitted.\r\n     * @param _airdropper is the account to add to the blacklist and remove from whitelist\r\n     * @param _tokenAddress is the token address to add to the blacklist and remove from whitelist\r\n     */\r\n    function revokeSubmission(address _airdropper, address _tokenAddress) public onlyAdmin {\r\n        if(_tokenAddress != address(0)){\r\n            tokenWhitelist[_tokenAddress] = false;\r\n            tokenBlacklist[_tokenAddress] = true;\r\n        }\r\n\r\n        if(_airdropper != address(0)){\r\n            airdropperBlacklist[_airdropper] = true;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev allows admins to add users to the list manually\r\n     * Use to add people who explicitely asked to be added...\r\n     */\r\n    function signupUsersManually(address _user) public onlyAdmin {\r\n        require(signups[_user].userAddress == address(0));\r\n        signups[_user] = User(_user,now);\r\n        userSignupCount++;\r\n\r\n        E_Signup(msg.sender,now);\r\n    }\r\n\r\n\r\n    /////////////////////\r\n    // Airdropper functions\r\n    /////////////////////\r\n\r\n    /**\r\n     * @dev Transfers tokens to contract and sets the Token Airdrop\r\n     * @notice Before calling this function, you must have given the Airdrop Central\r\n     * an allowance of the tokens to distribute.\r\n     * Call approve([this contract's address],_totalTokensToDistribute); on the ERC20 token cotnract first\r\n     * @param _tokenAddress is the address of the token\r\n     * @param _totalTokensToDistribute is the tokens that will be evenly distributed among all current users\r\n     * Enter the number of tokens (the function multiplies by the token decimals)\r\n     * @param _expirationTime is in how many seconds will the airdrop expire from now\r\n     * user should first know how many users are signed to know final approximate distribution\r\n     */\r\n    function airdropTokens(address _tokenAddress, uint _totalTokensToDistribute, uint _expirationTime) public ifNotPaused {\r\n        require(tokenWhitelist[_tokenAddress]);\r\n        require(!airdropperBlacklist[msg.sender]);\r\n\r\n\r\n        //Multiply number entered by token decimals.\r\n\r\n        // Calculate owner's tokens and tokens to airdrop\r\n        uint tokensForOwner = _totalTokensToDistribute.mul(ownersCut).div(100);\r\n        _totalTokensToDistribute = _totalTokensToDistribute.sub(tokensForOwner);\r\n\r\n        // Store the airdrop unique id in array (token address + id)\r\n        TokenAirdropID memory taid = TokenAirdropID(_tokenAddress,airdroppedTokens[_tokenAddress].length);\r\n        TokenAirdrop memory ta = TokenAirdrop(_tokenAddress,airdroppedTokens[_tokenAddress].length,msg.sender,now,now+_expirationTime,_totalTokensToDistribute,_totalTokensToDistribute,userSignupCount);\r\n        airdroppedTokens[_tokenAddress].push(ta);\r\n        airdrops.push(taid);\r\n\r\n        // Transfer the tokens\r\n\r\n        E_AirdropSubmitted(_tokenAddress,ta.tokenOwner,ta.totalDropped,ta.airdropDate,ta.airdropExpirationDate);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev returns unclaimed tokens to the airdropper after the airdrop expires\r\n     * @param _tokenAddress is the address of the token\r\n     */\r\n    function returnTokensToAirdropper(address _tokenAddress) public ifNotPaused {\r\n        require(tokenWhitelist[_tokenAddress]); // Token must be whitelisted first\r\n\r\n        // Get the token\r\n        uint tokensToReturn = 0;\r\n\r\n        for (uint i =0; i<airdroppedTokens[_tokenAddress].length; i++){\r\n            TokenAirdrop storage ta = airdroppedTokens[_tokenAddress][i];\r\n            if(msg.sender == ta.tokenOwner &&\r\n                airdropHasExpired(_tokenAddress,i)){\r\n\r\n                tokensToReturn = tokensToReturn.add(ta.tokenBalance);\r\n                ta.tokenBalance = 0;\r\n            }\r\n        }\r\n        E_TokensWithdrawn(_tokenAddress,msg.sender,tokensToReturn,now);\r\n\r\n    }\r\n\r\n    /////////////////////\r\n    // User functions\r\n    /////////////////////\r\n\r\n    /**\r\n     * @dev user can signup to the Airdrop Central to receive token airdrops\r\n     * Airdrops made before the user registration won't be available to them.\r\n     */\r\n    function signUpForAirdrops() public ifNotPaused{\r\n        require(signups[msg.sender].userAddress == address(0));\r\n        signups[msg.sender] = User(msg.sender,now);\r\n        userSignupCount++;\r\n\r\n        E_Signup(msg.sender,now);\r\n    }\r\n\r\n    /**\r\n     * @dev removes user from airdrop list.\r\n     * Beware that token distribution for existing airdrops won't change.\r\n     * For example: if 100 tokens were to be distributed to 10 people (10 each).\r\n     * if one quitted from the list, the other 9 will still get 10 each.\r\n     * @notice WARNING: Quiting from the airdrop central will make you lose\r\n     * tokens not yet withdrawn. Make sure to withdraw all pending tokens before\r\n     * removing yourself from this list. Signing up later will not give you the older tokens back\r\n     */\r\n    function quitFromAirdrops() public ifNotPaused{\r\n        require(signups[msg.sender].userAddress == msg.sender);\r\n        delete signups[msg.sender];\r\n        userSignupCount--;\r\n    }\r\n\r\n    /**\r\n     * @dev calculates the amount of tokens the user will be able to withdraw\r\n     * Given a token address, the function checks all airdrops with the same address\r\n     * @param _tokenAddress is the token the user wants to check his balance for\r\n     * @return totalTokensAvailable is the tokens calculated\r\n     */\r\n    function getTokensAvailableToMe(address _tokenAddress) view public returns (uint){\r\n        require(tokenWhitelist[_tokenAddress]); // Token must be whitelisted first\r\n\r\n        // Get User instance, given the sender account\r\n        User storage user = signups[msg.sender];\r\n        require(user.userAddress != address(0));\r\n\r\n        uint totalTokensAvailable= 0;\r\n        for (uint i =0; i<airdroppedTokens[_tokenAddress].length; i++){\r\n            TokenAirdrop storage ta = airdroppedTokens[_tokenAddress][i];\r\n\r\n            uint _withdrawnBalance = user.withdrawnBalances[_tokenAddress][i];\r\n\r\n            //Check that user signed up before the airdrop was done. If so, he is entitled to the tokens\r\n            //And the airdrop must not have expired\r\n            if(ta.airdropDate >= user.signupDate &&\r\n                now <= ta.airdropExpirationDate){\r\n\r\n                // The user will get a portion of the total tokens airdroped,\r\n                // divided by the users at the moment the airdrop was created\r\n                uint tokensAvailable = ta.totalDropped.div(ta.usersAtDate);\r\n\r\n                // if the user has not alreay withdrawn the tokens, count them\r\n                if(_withdrawnBalance < tokensAvailable){\r\n                    totalTokensAvailable = totalTokensAvailable.add(tokensAvailable);\r\n\r\n                }\r\n            }\r\n        }\r\n        return totalTokensAvailable;\r\n    }\r\n\r\n    /**\r\n     * @dev calculates and withdraws the amount of tokens the user has been awarded by airdrops\r\n     * Given a token address, the function checks all airdrops with the same\r\n     * address and withdraws the corresponding tokens for the user.\r\n     * @param _tokenAddress is the token the user wants to check his balance for\r\n     */\r\n    function withdrawTokens(address _tokenAddress) ifNotPaused public {\r\n        require(tokenWhitelist[_tokenAddress]); // Token must be whitelisted first\r\n\r\n        // Get User instance, given the sender account\r\n        User storage user = signups[msg.sender];\r\n        require(user.userAddress != address(0));\r\n\r\n        uint totalTokensToTransfer = 0;\r\n        // For each airdrop made for this token (token owner may have done several airdrops at any given point)\r\n        for (uint i =0; i<airdroppedTokens[_tokenAddress].length; i++){\r\n            TokenAirdrop storage ta = airdroppedTokens[_tokenAddress][i];\r\n\r\n            uint _withdrawnBalance = user.withdrawnBalances[_tokenAddress][i];\r\n\r\n            //Check that user signed up before the airdrop was done. If so, he is entitled to the tokens\r\n            //And the airdrop must not have expired\r\n            if(ta.airdropDate >= user.signupDate &&\r\n                now <= ta.airdropExpirationDate){\r\n\r\n                // The user will get a portion of the total tokens airdroped,\r\n                // divided by the users at the moment the airdrop was created\r\n                uint tokensToTransfer = ta.totalDropped.div(ta.usersAtDate);\r\n\r\n                // if the user has not alreay withdrawn the tokens\r\n                if(_withdrawnBalance < tokensToTransfer){\r\n                    // Register the tokens withdrawn by the user and total tokens withdrawn\r\n                    user.withdrawnBalances[_tokenAddress][i] = tokensToTransfer;\r\n                    ta.tokenBalance = ta.tokenBalance.sub(tokensToTransfer);\r\n                    totalTokensToTransfer = totalTokensToTransfer.add(tokensToTransfer);\r\n\r\n                }\r\n            }\r\n        }\r\n        E_TokensWithdrawn(_tokenAddress,msg.sender,totalTokensToTransfer,now);\r\n    }\r\n\r\n    function airdropsCount() public view returns (uint){\r\n        return airdrops.length;\r\n    }\r\n\r\n    function getAddress() public view returns (address){\r\n      return address(this);\r\n    }\r\n\r\n    function airdropHasExpired(address _tokenAddress, uint _id) public view returns (bool){\r\n        TokenAirdrop storage ta = airdroppedTokens[_tokenAddress][_id];\r\n        return (now > ta.airdropExpirationDate);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"difficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"proofOfWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeOfLastProof\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"giveBlockReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"TokenERC20","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://41013d78c3a141012b4aae28b73e292279762cbf82fafe6491d70b6c97380996"}]}