{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\npragma experimental \"v0.5.0\";\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a && c >= b);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || b == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(a > 0 && b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract BasicTokenInterface{\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    event ApprovalReceived(address indexed from, uint256 indexed amount, address indexed tokenAddr, bytes data);\r\n    function receiveApproval(address from, uint256 amount, address tokenAddr, bytes data) public{\r\n        emit ApprovalReceived(from, amount, tokenAddr, data);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20TokenInterface is BasicTokenInterface, ApproveAndCallFallBack{\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);   \r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    function transferTokens(address token, uint amount) public returns (bool success);\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract BasicToken is BasicTokenInterface{\r\n    using SafeMath for uint;\r\n    \r\n    string public name;                   //fancy name: eg Simon Bucks\r\n    uint8 public decimals;                //How many decimals to show.\r\n    string public symbol;                 //An identifier: eg SBX\r\n    uint public totalSupply;\r\n    mapping (address => uint256) internal balances;\r\n    \r\n    modifier checkpayloadsize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    } \r\n\r\n    function transfer(address _to, uint256 _value) public checkpayloadsize(2*32) returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        success = true;\r\n        balances[msg.sender] -= _value;\r\n\r\n        //If sent to contract address reduce the supply\r\n        if(_to == address(this)){\r\n            totalSupply = totalSupply.sub(_value);\r\n        }else{\r\n            balances[_to] += _value;\r\n        }\r\n        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\r\n        return success;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract ManagedToken is BasicToken {\r\n    address manager;\r\n    modifier restricted(){\r\n        require(msg.sender == manager,\"Function can only be used by manager\");\r\n        _;\r\n    }\r\n\r\n    function setManager(address newManager) public restricted{\r\n        balances[newManager] = balances[manager];\r\n        balances[manager] = 0;\r\n        manager = newManager;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Token is ERC20TokenInterface, ManagedToken{\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address _from,address _to,uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _owner,address _spender) public view returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    //Permit manager to sweep any tokens that landed here\r\n    function transferTokens(address token,uint _value) public restricted returns (bool success){\r\n        return ERC20Token(token).transfer(msg.sender,_value);\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\ncontract SweepsToken is ERC20Token{\r\n\r\n    uint weiRatePerToken;\r\n    uint weiRatePerTicket;\r\n    uint currentDay;\r\n    uint[28] prizes; //offset == currentDay;\r\n    uint jackpot;\r\n    uint soldToday;\r\n    uint totalSold;\r\n\r\n    event Winner(uint ticketNumber, address indexed user, uint indexed amount);\r\n    event DrawResult(uint indexed day, uint[20] results);\r\n    event TicketsPurchased(address indexed user, uint indexed amount, uint start, uint stop);\r\n    event PreDrawCompleted(uint blockHeight);\r\n    event DrawingCompleted();\r\n    event DailyResetComplete();\r\n    event ImportBalanceEvent(address last);\r\n    event ImportWinnersEvent(address last);\r\n    event AirDropEvent(address last);\r\n\r\n\r\n    constructor() public payable {\r\n        require(gasleft() >= 4000000, \"Contract needs at least 4000000\");\r\n        name = \"World's 1st Blockchain Sweepstakes\";                                   // Set the name for display purposes\r\n        decimals = 0;                                       // Amount of decimals for display purposes\r\n        symbol = \"SPRIZE\";                               // Set the symbol for display purposes\r\n        currentDay = 0;\r\n        \r\n        manager = 0x0d505edb01e222110806ffc91da89ae7b2696e11;\r\n        totalSupply = 2;\r\n        weiRatePerToken = 10000000000000000;\r\n        weiRatePerTicket = 10000000000000000;\r\n        prizes = [\r\n            //week 1\r\n            2000,  //mon\r\n            2000,  //tue\r\n            2000,  //wed\r\n            2000,  //thu\r\n            2000,  //fri\r\n            4000,  //sat\r\n            10000, //sun\r\n            //week 2\r\n            2000,  //mon\r\n            2000,  //tue\r\n            2000,  //wed\r\n            2000,  //thu\r\n            2000,  //fri\r\n            4000,  //sat\r\n            10000, //sun\r\n            //week 3\r\n            4000,  //mon\r\n            4000,  //tue\r\n            4000,  //wed\r\n            4000,  //thu\r\n            4000,  //fri\r\n            8000,  //sat\r\n            20000, //sun\r\n            //week 4\r\n            8000,  //mon\r\n            8000,  //tue\r\n            8000,  //wed\r\n            8000,  //thu\r\n            8000,  //fri\r\n            20000,  //sat\r\n            50000 //sun\r\n        ];\r\n        jackpot = 0;\r\n        balances[manager] = 1;\r\n        \r\n        emit Transfer(address(this),manager, 1);\r\n       \r\n    }\r\n\r\n    //Default fallback function, but requires contract active\r\n    function() external payable {\r\n        require(currentDay <= prizes.length - 1, \"Sorry this contest is over, please visit our site to learn about the next contest.\");\r\n        buyTokens();\r\n    }\r\n\r\n    function dailyReset() public restricted returns (bool complete){\r\n        soldToday = 0;\r\n        \r\n        jackpot = 0;\r\n    \r\n        currentDay++;\r\n\r\n        emit DailyResetComplete();\r\n        return complete;\r\n    }\r\n\r\n    function setPrizes(uint[28] _prizes) public restricted{\r\n        prizes = _prizes;\r\n    }\r\n\r\n    //Reset currentDay to 0 and other housekeeping functions\r\n    function reset() public  restricted returns (bool complete){\r\n        \r\n        complete = false;\r\n        if((address(this).balance >= 1 wei)){\r\n            manager.transfer(address(this).balance);\r\n        }\r\n        \r\n        currentDay = 0;\r\n        jackpot = 0;\r\n        soldToday = 0;\r\n        totalSold = 0;\r\n        return (complete);\r\n\r\n    }\r\n\r\n    function setManager(address newManager) public restricted{\r\n        manager = newManager;\r\n    }\r\n\r\n    function getCurrentDay() public view returns (uint){\r\n        return currentDay;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public checkpayloadsize(2*32) returns (bool success) {\r\n        if(msg.sender == manager && _to == address(this)){\r\n            if(address(this).balance > 42000){\r\n                msg.sender.transfer(address(this).balance);\r\n                success = true;\r\n            }\r\n        }else{\r\n            if(_to != address(this)){\r\n                success = super.transfer(_to, _value);\r\n            }\r\n        }\r\n        return success;\r\n    }\r\n\r\n    function setTokenPrice(uint price) public  restricted returns (bool success){\r\n        weiRatePerToken = price;\r\n        success = true;\r\n        return success;\r\n    }\r\n\r\n    function setTicketPrice(uint price) public  restricted returns (bool success){\r\n        weiRatePerTicket = price;\r\n        success = true;\r\n        return success;\r\n    }\r\n\r\n    function getTicketPrice() public view returns (uint){\r\n        return weiRatePerTicket;\r\n    }\r\n\r\n    function getTokenPrice() public view returns (uint){\r\n        return weiRatePerToken;\r\n    }\r\n\r\n    function getTicketsSoldToday() public view returns (uint){\r\n        return soldToday;\r\n    }\r\n\r\n    //Does what it says on the tin\r\n    function buyTokens() public payable {\r\n        require(gasleft() >= 110000, \"Requires at least 110000 gas, reverting to avoid wasting your gas\"); \r\n        uint tokensBought = msg.value.div(weiRatePerToken);\r\n        uint ticketsBought = msg.value.div(weiRatePerTicket);\r\n        require(tokensBought > 0 && ticketsBought > 0,\"Requires minimum payment purchase\");\r\n        \r\n        //Handle Tickets\r\n        giveTix(ticketsBought,msg.sender);\r\n\r\n        //Handle Tokens & jackpot\r\n        totalSupply += tokensBought;\r\n        jackpot += (tokensBought / 2);\r\n        balances[msg.sender] += tokensBought;\r\n        emit Transfer(address(this),msg.sender,tokensBought);\r\n        \r\n    }\r\n\r\n    function giveTix(uint ticketsBought, address customer) internal{\r\n        //customer side      \r\n        uint oldsold = totalSold + 1;\r\n        soldToday += ticketsBought;\r\n        totalSold += ticketsBought;\r\n        //Emit required events\r\n        emit TicketsPurchased(customer, ticketsBought, oldsold, totalSold);\r\n    }\r\n\r\n    function getJackpot() public view returns (uint value){\r\n        return jackpot + prizes[currentDay];\r\n    }\r\n\r\n    function rand(uint min, uint max, uint nonce) public pure returns (uint){\r\n        return uint(keccak256(abi.encodePacked(nonce)))%(min+max)-min;\r\n    }\r\n\r\n    //Allow us to bring in winners from the previous contract this replaces\r\n    function importPreviousWinners(uint[] tickets, address[] winners, uint[] amounts) public restricted{\r\n        //TODO:  Complete this, make sure it emits winners correctly, but do not credit\r\n        address winner;\r\n        uint amount;\r\n        uint ticket;\r\n        uint cursor = 0;\r\n        while(cursor <= winners.length - 1 && gasleft() > 42000){\r\n            winner = winners[cursor];\r\n            amount = amounts[cursor];\r\n            ticket = tickets[cursor];\r\n            emit Winner(ticket, winner, amount);\r\n            cursor++;\r\n        }\r\n        emit ImportWinnersEvent(winners[cursor - 1]);\r\n    }\r\n\r\n    function importBalances(address oldContract,address[] customers) public restricted{\r\n        address customer;\r\n        uint balance;\r\n        uint cursor = 0;\r\n        while(cursor <= customers.length - 1 && gasleft() > 42000){\r\n            customer = customers[cursor];\r\n            balance = BasicToken(oldContract).balanceOf(customer);\r\n            balances[customer] = balance;\r\n            totalSupply += balance;\r\n            emit Transfer(address(this),customer,balance);\r\n            cursor++;\r\n        }\r\n        emit ImportBalanceEvent(customers[cursor - 1]);\r\n    }\r\n    \r\n    function airDrop(address[] customers, uint amount) public restricted{\r\n        uint cursor = 0;\r\n        address customer;\r\n        while(cursor <= customers.length - 1 && gasleft() > 42000){\r\n            customer = customers[cursor];\r\n            balances[customer] += amount;\r\n            emit Transfer(address(this),customer,amount);\r\n            giveTix(amount,customer);\r\n            cursor++;\r\n        }\r\n        if(cursor == customers.length - 1){\r\n            totalSupply += amount;\r\n        }\r\n        emit AirDropEvent(customers[cursor - 1]);\r\n    }\r\n    function payWinners(address[20] winners,uint[20] tickets) public restricted{\r\n        uint prize = prizes[currentDay].add(jackpot);\r\n        totalSupply += prize;\r\n        uint payout = 0;\r\n        for(uint y = 0; y <= winners.length - 1; y++){\r\n            address winner = winners[y];\r\n            require(winner != address(0),\"Something impossible happened!  Refusing to burn these tokens!\");\r\n            uint ticketNum = tickets[y];\r\n\r\n            //switch y for %\r\n            if(y == 0){\r\n                payout = prize / 2; //0.50\r\n            }\r\n\r\n            if(y == 1){\r\n                payout = prize / 7; //Closest possible fraction to 0.14\r\n            }\r\n\r\n            if(y >= 2 && y <= 20){\r\n                payout = prize / 50; //18 prizes of 0.02\r\n            }\r\n\r\n            balances[winner] += payout;\r\n            emit Winner(ticketNum, winner, payout);\r\n            emit Transfer(address(this),winner,payout);\r\n        }\r\n        dailyReset();\r\n    }\r\n    \r\n    function draw(uint seed) public restricted {\r\n        require(gasleft() > 60000,\"Function requires at least 60000 GAS\");\r\n        manager.transfer(address(this).balance);\r\n        uint[20] memory mypicks;\r\n        require(currentDay <= prizes.length - 1, \"Sorry this contest is over, please visit our site to learn about the next contest.\");\r\n        uint low = (totalSold - soldToday) + 1;\r\n        low = low < 1 ? 1 : low;\r\n        for(uint pick = 0; pick <= 19; pick++){\r\n            mypicks[pick] = rand(low,totalSold,pick+currentDay+seed);\r\n        }\r\n        emit DrawResult(currentDay, mypicks);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dailyReset\",\"outputs\":[{\"name\":\"complete\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_prizes\",\"type\":\"uint256[28]\"}],\"name\":\"setPrizes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTicketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTicketsSoldToday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getJackpot\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldContract\",\"type\":\"address\"},{\"name\":\"customers\",\"type\":\"address[]\"}],\"name\":\"importBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reset\",\"outputs\":[{\"name\":\"complete\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"rand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"winners\",\"type\":\"address[20]\"},{\"name\":\"tickets\",\"type\":\"uint256[20]\"}],\"name\":\"payWinners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tickets\",\"type\":\"uint256[]\"},{\"name\":\"winners\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"importPreviousWinners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customers\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airDrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"results\",\"type\":\"uint256[20]\"}],\"name\":\"DrawResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"TicketsPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blockHeight\",\"type\":\"uint256\"}],\"name\":\"PreDrawCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DrawingCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DailyResetComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"last\",\"type\":\"address\"}],\"name\":\"ImportBalanceEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"last\",\"type\":\"address\"}],\"name\":\"ImportWinnersEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"last\",\"type\":\"address\"}],\"name\":\"AirDropEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ApprovalReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SweepsToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1bb0786f6932518e180cac9f9236aec42a665190853dbf0928e8e9ae0ea6ac38"}]}