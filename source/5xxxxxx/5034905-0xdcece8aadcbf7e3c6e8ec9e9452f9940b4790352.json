{"status":"1","message":"OK","result":[{"SourceCode":"//\r\n// Simple MultiSig Wallet Contract by Christian Lundkvist\r\n// https://github.com/christianlundkvist/simple-multisig\r\n//\r\n//\r\n//  Copyright (c) 2017 Christian Lundkvist\r\n//\r\n//  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n//  of this software and associated documentation files (the \"Software\"), to deal\r\n//  in the Software without restriction, including without limitation the rights\r\n//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n//  copies of the Software, and to permit persons to whom the Software is\r\n//  furnished to do so, subject to the following conditions:\r\n//\r\n//  The above copyright notice and this permission notice shall be included in all\r\n//  copies or substantial portions of the Software.\r\n//\r\n//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//  SOFTWARE.\r\n//\r\npragma solidity 0.4.18;\r\ncontract SimpleMultiSig {\r\n\r\n  uint public nonce;                // (only) mutable state\r\n  uint public threshold;            // immutable state\r\n  mapping (address => bool) isOwner; // immutable state\r\n  address[] public ownersArr;        // immutable state\r\n\r\n  function SimpleMultiSig(uint threshold_, address[] owners_) public {\r\n    require(owners_.length <= 10 && threshold_ <= owners_.length && threshold_ != 0);\r\n\r\n    address lastAdd = address(0);\r\n    for (uint i=0; i<owners_.length; i++) {\r\n      require(owners_[i] > lastAdd);\r\n      isOwner[owners_[i]] = true;\r\n      lastAdd = owners_[i];\r\n    }\r\n    ownersArr = owners_;\r\n    threshold = threshold_;\r\n  }\r\n\r\n  // Note that address recovered from signatures must be strictly increasing\r\n  function execute(uint8[] sigV, bytes32[] sigR, bytes32[] sigS, address destination, uint value, bytes data) public {\r\n    require(sigR.length == threshold);\r\n    require(sigR.length == sigS.length && sigR.length == sigV.length);\r\n\r\n    // Follows ERC191 signature scheme: https://github.com/ethereum/EIPs/issues/191\r\n    bytes32 txHash = keccak256(byte(0x19), byte(0), address(this), destination, value, data, nonce);\r\n\r\n    address lastAdd = address(0); // cannot have address(0) as an owner\r\n    for (uint i = 0; i < threshold; i++) {\r\n      address recovered = ecrecover(txHash, sigV[i], sigR[i], sigS[i]);\r\n      require(recovered > lastAdd && isOwner[recovered]);\r\n      lastAdd = recovered;\r\n    }\r\n\r\n    // If we make it here all signatures are accounted for\r\n    nonce = nonce + 1;\r\n    require(destination.call.value(value)(data));\r\n  }\r\n\r\n  function () public payable {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownersArr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sigV\",\"type\":\"uint8[]\"},{\"name\":\"sigR\",\"type\":\"bytes32[]\"},{\"name\":\"sigS\",\"type\":\"bytes32[]\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"threshold_\",\"type\":\"uint256\"},{\"name\":\"owners_\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"SimpleMultiSig","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000026a46318376e68601a98a9b3e2afe02c057a071e0000000000000000000000004016c7363d466f9df59ae70fca88bb82826cacf0000000000000000000000000f48ae436e4813c7dcd5cdeb305131d07ca022469","Library":"","SwarmSource":"bzzr://8d6f42d53fd54bc0a866cc32fd97671614d5f297505791de2f49bc08b17070b0"}]}