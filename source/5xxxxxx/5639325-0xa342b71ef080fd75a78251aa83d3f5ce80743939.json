{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract QIUToken is StandardToken,Ownable {\r\n    string public name = 'QIUToken';\r\n    string public symbol = 'QIU';\r\n    uint8 public decimals = 0;\r\n    uint public INITIAL_SUPPLY = 5000000000;\r\n    uint public eth2qiuRate = 10000;\r\n\r\n    function() public payable { } // make this contract to receive ethers\r\n\r\n    function QIUToken() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[owner] = INITIAL_SUPPLY / 10;\r\n        balances[this] = INITIAL_SUPPLY - balances[owner];\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }  \r\n    \r\n    /**\r\n    * @dev Transfer tokens from one address to another, only owner can do this super-user operate\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function ownerTransferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(tx.origin == owner); // only the owner can call the method.\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n      /**\r\n    * @dev transfer token for a specified address,but different from transfer is replace msg.sender with tx.origin\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function originTransfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[tx.origin]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[tx.origin] = balances[tx.origin].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(tx.origin, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    event ExchangeForETH(address fromAddr,address to,uint qiuAmount,uint ethAmount);\r\n    function exchangeForETH(uint qiuAmount) public returns (bool){\r\n        uint ethAmount = qiuAmount * 1000000000000000000 / eth2qiuRate; // only accept multiple of 100\r\n        require(this.balance >= ethAmount);\r\n        balances[this] = balances[this].add(qiuAmount);\r\n        balances[msg.sender] = balances[msg.sender].sub(qiuAmount);\r\n        msg.sender.transfer(ethAmount);\r\n        ExchangeForETH(this,msg.sender,qiuAmount,ethAmount);\r\n        return true;\r\n    }\r\n\r\n    event ExchangeForQIU(address fromAddr,address to,uint qiuAmount,uint ethAmount);\r\n    function exchangeForQIU() payable public returns (bool){\r\n        uint qiuAmount = msg.value * eth2qiuRate / 1000000000000000000;\r\n        require(qiuAmount <= balances[this]);\r\n        balances[this] = balances[this].sub(qiuAmount);\r\n        balances[msg.sender] = balances[msg.sender].add(qiuAmount);\r\n        ExchangeForQIU(this,msg.sender,qiuAmount,msg.value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n    // transfer out method\r\n    function ownerETHCashout(address account) public onlyOwner {\r\n        account.transfer(this.balance);\r\n    }*/\r\n    function getETHBalance() public view returns (uint) {\r\n        return this.balance; // balance is \"inherited\" from the address type\r\n    }\r\n}\r\n\r\ncontract SoccerChampion is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    struct Tournament {\r\n        uint id;\r\n        bool isEnded;\r\n        bool isLockedForSupport;\r\n        bool initialized;\r\n        Team[] teams;\r\n        SupportTicket[] tickets;\r\n    }\r\n    \r\n    struct Team {\r\n        uint id;\r\n        bool isKnockout;\r\n        bool isChampion;\r\n    }\r\n\r\n    struct SupportTicket {\r\n        uint teamId;\r\n        address supportAddres;\r\n        uint supportAmount;\r\n    }\r\n\r\n    //ufixed private serviceChargeRate = 1/100;\r\n    mapping (uint => Tournament) public tournaments;\r\n    uint private _nextTournamentId = 0;\r\n    QIUToken public _internalToken;\r\n    uint private _commissionNumber;\r\n    uint private _commissionScale;\r\n    \r\n    function SoccerChampion(QIUToken _tokenAddress) public {\r\n        _nextTournamentId = 0;\r\n        _internalToken = _tokenAddress;\r\n        _commissionNumber = 2;\r\n        _commissionScale = 100;\r\n    }\r\n\r\n    function modifyCommission(uint number,uint scale) public onlyOwner returns(bool){\r\n        _commissionNumber = number;\r\n        _commissionScale = scale;\r\n        return true;\r\n    }\r\n\r\n    event NewTouramentCreateSuccess(uint newTourId);\r\n    function createNewTourament(uint[] teamIds) public onlyOwner{\r\n        uint newTourId = _nextTournamentId;\r\n        tournaments[newTourId].id = newTourId;\r\n        tournaments[newTourId].isEnded = false;\r\n        tournaments[newTourId].isLockedForSupport = false;\r\n        tournaments[newTourId].initialized = true;\r\n        for(uint idx = 0; idx < teamIds.length; idx ++){\r\n            Team memory team;\r\n            team.id = teamIds[idx];\r\n            team.isChampion = false;\r\n            tournaments[newTourId].teams.push(team);\r\n        }\r\n        _nextTournamentId ++;   \r\n        NewTouramentCreateSuccess(newTourId);\r\n    }\r\n\r\n    function supportTeam(uint tournamentId, uint teamId, uint amount) public {\r\n        require(tournaments[tournamentId].initialized);\r\n        require(_internalToken.balanceOf(msg.sender) >= amount);\r\n        require(!tournaments[tournamentId].isEnded);\r\n        require(!tournaments[tournamentId].isLockedForSupport);\r\n        require(amount > 0);\r\n        SupportTicket memory ticket;\r\n        ticket.teamId = teamId;\r\n        ticket.supportAddres = msg.sender;\r\n        ticket.supportAmount = amount;\r\n        _internalToken.originTransfer(this, amount);\r\n        tournaments[tournamentId].tickets.push(ticket);\r\n    }\r\n\r\n    function _getTournamentSupportAmount(uint tournamentId) public view returns(uint){\r\n        uint supportAmount = 0;\r\n        for(uint idx = 0; idx < tournaments[tournamentId].tickets.length; idx++){\r\n            supportAmount = supportAmount.add(tournaments[tournamentId].tickets[idx].supportAmount);\r\n        }\r\n        return supportAmount;\r\n    }\r\n\r\n    function _getTeamSupportAmount(uint tournamentId, uint teamId) public view returns(uint){\r\n        uint supportAmount = 0;\r\n        for(uint idx = 0; idx < tournaments[tournamentId].tickets.length; idx++){\r\n            if(tournaments[tournamentId].tickets[idx].teamId == teamId){\r\n                supportAmount = supportAmount.add(tournaments[tournamentId].tickets[idx].supportAmount);\r\n            }\r\n        }\r\n        return supportAmount;\r\n    }\r\n\r\n    function _getUserSupportForTeamInTournament(uint tournamentId, uint teamId) public view returns(uint){\r\n        uint supportAmount = 0;\r\n        for(uint idx = 0; idx < tournaments[tournamentId].tickets.length; idx++){\r\n            if(tournaments[tournamentId].tickets[idx].teamId == teamId && tournaments[tournamentId].tickets[idx].supportAddres == msg.sender){\r\n                supportAmount = supportAmount.add(tournaments[tournamentId].tickets[idx].supportAmount);\r\n            }\r\n        }\r\n        return supportAmount;\r\n    }\r\n\r\n\r\n    function getTeamlistSupportInTournament(uint tournamentId) public view returns(uint[] teamIds, uint[] supportAmounts, bool[] knockOuts, uint championTeamId, bool isEnded, bool isLocked){  \r\n        if(tournaments[tournamentId].initialized){\r\n            teamIds = new uint[](tournaments[tournamentId].teams.length);\r\n            supportAmounts = new uint[](tournaments[tournamentId].teams.length);\r\n            knockOuts = new bool[](tournaments[tournamentId].teams.length);\r\n            championTeamId = 0;\r\n            for(uint tidx = 0; tidx < tournaments[tournamentId].teams.length; tidx++){\r\n                teamIds[tidx] = tournaments[tournamentId].teams[tidx].id;\r\n                if(tournaments[tournamentId].teams[tidx].isChampion){\r\n                    championTeamId = teamIds[tidx];\r\n                }\r\n                knockOuts[tidx] = tournaments[tournamentId].teams[tidx].isKnockout;\r\n                supportAmounts[tidx] = _getTeamSupportAmount(tournamentId, teamIds[tidx]);\r\n            }\r\n            isEnded = tournaments[tournamentId].isEnded;\r\n            isLocked = tournaments[tournamentId].isLockedForSupport;\r\n        }\r\n    }\r\n\r\n    function getUserSupportInTournament(uint tournamentId) public view returns(uint[] teamIds, uint[] supportAmounts){\r\n        if(tournaments[tournamentId].initialized){\r\n            teamIds = new uint[](tournaments[tournamentId].teams.length);\r\n            supportAmounts = new uint[](tournaments[tournamentId].teams.length);\r\n            for(uint tidx = 0; tidx < tournaments[tournamentId].teams.length; tidx++){\r\n                teamIds[tidx] = tournaments[tournamentId].teams[tidx].id;\r\n                uint userSupportAmount = _getUserSupportForTeamInTournament(tournamentId, teamIds[tidx]);\r\n                supportAmounts[tidx] = userSupportAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function getUserWinInTournament(uint tournamentId) public view returns(bool isEnded, uint winAmount){\r\n        if(tournaments[tournamentId].initialized){\r\n            isEnded = tournaments[tournamentId].isEnded;\r\n            if(isEnded){\r\n                for(uint tidx = 0; tidx < tournaments[tournamentId].teams.length; tidx++){\r\n                    Team memory team = tournaments[tournamentId].teams[tidx];\r\n                    if(team.isChampion){\r\n                        uint tournamentSupportAmount = _getTournamentSupportAmount(tournamentId);\r\n                        uint teamSupportAmount = _getTeamSupportAmount(tournamentId, team.id);\r\n                        uint userSupportAmount = _getUserSupportForTeamInTournament(tournamentId, team.id);\r\n                        uint gainAmount = (userSupportAmount.mul(tournamentSupportAmount)).div(teamSupportAmount);\r\n                        winAmount = (gainAmount.mul(_commissionScale.sub(_commissionNumber))).div(_commissionScale);\r\n                    }\r\n                }\r\n            }else{\r\n                winAmount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function knockoutTeam(uint tournamentId, uint teamId) public onlyOwner{\r\n        require(tournaments[tournamentId].initialized);\r\n        require(!tournaments[tournamentId].isEnded);\r\n        for(uint tidx = 0; tidx < tournaments[tournamentId].teams.length; tidx++){\r\n            Team storage team = tournaments[tournamentId].teams[tidx];\r\n            if(team.id == teamId){\r\n                team.isKnockout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    event endTournamentSuccess(uint tourId);\r\n    function endTournament(uint tournamentId, uint championTeamId) public onlyOwner{\r\n        require(tournaments[tournamentId].initialized);\r\n        require(!tournaments[tournamentId].isEnded);\r\n        tournaments[tournamentId].isEnded = true;\r\n        uint tournamentSupportAmount = _getTournamentSupportAmount(tournaments[tournamentId].id);\r\n        uint teamSupportAmount = _getTeamSupportAmount(tournaments[tournamentId].id, championTeamId);\r\n        uint totalClearAmount = 0;\r\n        for(uint tidx = 0; tidx < tournaments[tournamentId].teams.length; tidx++){\r\n            Team storage team = tournaments[tournamentId].teams[tidx];\r\n            if(team.id == championTeamId){\r\n                team.isChampion = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        for(uint idx = 0 ; idx < tournaments[tournamentId].tickets.length; idx++){\r\n            SupportTicket memory ticket = tournaments[tournamentId].tickets[idx];\r\n            if(ticket.teamId == championTeamId){\r\n                if(teamSupportAmount != 0){\r\n                    uint gainAmount = (ticket.supportAmount.mul(tournamentSupportAmount)).div(teamSupportAmount);\r\n                    uint actualGainAmount = (gainAmount.mul(_commissionScale.sub(_commissionNumber))).div(_commissionScale);\r\n                    _internalToken.ownerTransferFrom(this, ticket.supportAddres, actualGainAmount);\r\n                    totalClearAmount = totalClearAmount.add(actualGainAmount);\r\n                }\r\n            }\r\n        }\r\n        _internalToken.ownerTransferFrom(this, owner, tournamentSupportAmount.sub(totalClearAmount));\r\n        endTournamentSuccess(tournamentId);\r\n    }\r\n\r\n    event lockTournamentSuccess(uint tourId, bool isLock);\r\n    function lockTournament(uint tournamentId, bool isLock) public onlyOwner{\r\n        require(tournaments[tournamentId].initialized);\r\n        require(!tournaments[tournamentId].isEnded);\r\n        tournaments[tournamentId].isLockedForSupport = isLock;\r\n        lockTournamentSuccess(tournamentId, isLock);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"name\":\"isLock\",\"type\":\"bool\"}],\"name\":\"lockTournament\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tournamentId\",\"type\":\"uint256\"}],\"name\":\"getUserSupportInTournament\",\"outputs\":[{\"name\":\"teamIds\",\"type\":\"uint256[]\"},{\"name\":\"supportAmounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"_getUserSupportForTeamInTournament\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tournamentId\",\"type\":\"uint256\"}],\"name\":\"_getTournamentSupportAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tournamentId\",\"type\":\"uint256\"}],\"name\":\"getUserWinInTournament\",\"outputs\":[{\"name\":\"isEnded\",\"type\":\"bool\"},{\"name\":\"winAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"},{\"name\":\"scale\",\"type\":\"uint256\"}],\"name\":\"modifyCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tournaments\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"isEnded\",\"type\":\"bool\"},{\"name\":\"isLockedForSupport\",\"type\":\"bool\"},{\"name\":\"initialized\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tournamentId\",\"type\":\"uint256\"}],\"name\":\"getTeamlistSupportInTournament\",\"outputs\":[{\"name\":\"teamIds\",\"type\":\"uint256[]\"},{\"name\":\"supportAmounts\",\"type\":\"uint256[]\"},{\"name\":\"knockOuts\",\"type\":\"bool[]\"},{\"name\":\"championTeamId\",\"type\":\"uint256\"},{\"name\":\"isEnded\",\"type\":\"bool\"},{\"name\":\"isLocked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"teamIds\",\"type\":\"uint256[]\"}],\"name\":\"createNewTourament\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"knockoutTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"name\":\"teamId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supportTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"_getTeamSupportAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"name\":\"championTeamId\",\"type\":\"uint256\"}],\"name\":\"endTournament\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_internalToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newTourId\",\"type\":\"uint256\"}],\"name\":\"NewTouramentCreateSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tourId\",\"type\":\"uint256\"}],\"name\":\"endTournamentSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tourId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isLock\",\"type\":\"bool\"}],\"name\":\"lockTournamentSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SoccerChampion","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000037f387fe48c9569500b514a1c7e1f6b04be8d421","Library":"","SwarmSource":"bzzr://2a59a18b5200f8fa3af5acbacf13ea5152e9808798310d9bf530b7c7dd0a9633"}]}