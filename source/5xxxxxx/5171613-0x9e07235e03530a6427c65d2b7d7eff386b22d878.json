{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n// File: contracts/ERC20Interface.sol\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n// File: contracts/PermissionGroups.sol\r\n\r\ncontract PermissionGroups {\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    mapping(address=>bool) internal operators;\r\n    mapping(address=>bool) internal alerters;\r\n    address[] internal operatorsGroup;\r\n    address[] internal alertersGroup;\r\n    uint constant internal MAX_GROUP_SIZE = 50;\r\n\r\n    function PermissionGroups() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAlerter() {\r\n        require(alerters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function getOperators () external view returns(address[]) {\r\n        return operatorsGroup;\r\n    }\r\n\r\n    function getAlerters () external view returns(address[]) {\r\n        return alertersGroup;\r\n    }\r\n\r\n    event TransferAdminPending(address pendingAdmin);\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the pendingAdmin address.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdmin(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        TransferAdminPending(pendingAdmin);\r\n        pendingAdmin = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        TransferAdminPending(newAdmin);\r\n        AdminClaimed(newAdmin, admin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    event AdminClaimed( address newAdmin, address previousAdmin);\r\n\r\n    /**\r\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\r\n     */\r\n    function claimAdmin() public {\r\n        require(pendingAdmin == msg.sender);\r\n        AdminClaimed(pendingAdmin, admin);\r\n        admin = pendingAdmin;\r\n        pendingAdmin = address(0);\r\n    }\r\n\r\n    event AlerterAdded (address newAlerter, bool isAdd);\r\n\r\n    function addAlerter(address newAlerter) public onlyAdmin {\r\n        require(!alerters[newAlerter]); // prevent duplicates.\r\n        require(alertersGroup.length < MAX_GROUP_SIZE);\r\n\r\n        AlerterAdded(newAlerter, true);\r\n        alerters[newAlerter] = true;\r\n        alertersGroup.push(newAlerter);\r\n    }\r\n\r\n    function removeAlerter (address alerter) public onlyAdmin {\r\n        require(alerters[alerter]);\r\n        alerters[alerter] = false;\r\n\r\n        for (uint i = 0; i < alertersGroup.length; ++i) {\r\n            if (alertersGroup[i] == alerter) {\r\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\r\n                alertersGroup.length--;\r\n                AlerterAdded(alerter, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    event OperatorAdded(address newOperator, bool isAdd);\r\n\r\n    function addOperator(address newOperator) public onlyAdmin {\r\n        require(!operators[newOperator]); // prevent duplicates.\r\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\r\n\r\n        OperatorAdded(newOperator, true);\r\n        operators[newOperator] = true;\r\n        operatorsGroup.push(newOperator);\r\n    }\r\n\r\n    function removeOperator (address operator) public onlyAdmin {\r\n        require(operators[operator]);\r\n        operators[operator] = false;\r\n\r\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\r\n            if (operatorsGroup[i] == operator) {\r\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\r\n                operatorsGroup.length -= 1;\r\n                OperatorAdded(operator, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Withdrawable.sol\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens or ethers\r\n * @author Ilan Doron\r\n * @dev This allows to recover any tokens or Ethers received in a contract.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract Withdrawable is PermissionGroups {\r\n\r\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw all ERC20 compatible tokens\r\n     * @param token ERC20 The address of the token contract\r\n     */\r\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\r\n        require(token.transfer(sendTo, amount));\r\n        TokenWithdraw(token, amount, sendTo);\r\n    }\r\n\r\n    event EtherWithdraw(uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw Ethers\r\n     */\r\n    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\r\n        sendTo.transfer(amount);\r\n        EtherWithdraw(amount, sendTo);\r\n    }\r\n}\r\n\r\n// File: contracts/wrapperContracts/WrapConversionRate.sol\r\n\r\ncontract ConversionRateWrapperInterface {\r\n    function setQtyStepFunction(ERC20 token, int[] xBuy, int[] yBuy, int[] xSell, int[] ySell) public;\r\n    function setImbalanceStepFunction(ERC20 token, int[] xBuy, int[] yBuy, int[] xSell, int[] ySell) public;\r\n    function claimAdmin() public;\r\n    function addOperator(address newOperator) public;\r\n    function transferAdmin(address newAdmin) public;\r\n    function addToken(ERC20 token) public;\r\n    function setTokenControlInfo(\r\n            ERC20 token,\r\n            uint minimalRecordResolution,\r\n            uint maxPerBlockImbalance,\r\n            uint maxTotalImbalance\r\n        ) public;\r\n    function enableTokenTrade(ERC20 token) public;\r\n    function getTokenControlInfo(ERC20 token) public view returns(uint, uint, uint);\r\n}\r\n\r\ncontract WrapConversionRate is Withdrawable {\r\n\r\n    ConversionRateWrapperInterface conversionRates;\r\n\r\n    //add token parameters\r\n    ERC20 public addTokenPendingToken;\r\n    uint addTokenPendingMinimalResolution; // can be roughly 1 cent\r\n    uint addTokenPendingMaxPerBlockImbalance; // in twei resolution\r\n    uint addTokenPendingMaxTotalImbalance;\r\n    address[] public addTokenApproveSignatures;\r\n    \r\n    //set token control info parameters.\r\n    ERC20[] public setTokenInfoPendingTokenList;\r\n    uint[]  public setTokenInfoPendingPerBlockImbalance; // in twei resolution\r\n    uint[]  public setTokenInfoPendingMaxTotalImbalance;\r\n    address[] public setTokenInfoApproveSignatures;\r\n\r\n    function WrapConversionRate(ConversionRateWrapperInterface _conversionRates, address _admin) public {\r\n        require (_conversionRates != address(0));\r\n        require (_admin != address(0));\r\n        conversionRates = _conversionRates;\r\n        admin = _admin;\r\n    }\r\n\r\n    function claimWrappedContractAdmin() public onlyAdmin {\r\n        conversionRates.claimAdmin();\r\n        conversionRates.addOperator(this);\r\n    }\r\n\r\n    function transferWrappedContractAdmin (address newAdmin) public onlyAdmin {\r\n        conversionRates.transferAdmin(newAdmin);\r\n    }\r\n\r\n    // add token functions\r\n    //////////////////////\r\n    function addTokenToApprove(ERC20 token, uint minimalRecordResolution, uint maxPerBlockImbalance, uint maxTotalImbalance) public onlyOperator {\r\n        require(minimalRecordResolution != 0);\r\n        require(maxPerBlockImbalance != 0);\r\n        require(maxTotalImbalance != 0);\r\n        require(token != address(0));\r\n\r\n        //reset approve array. we have new parameters\r\n        addTokenApproveSignatures.length = 0;\r\n        addTokenPendingToken = token;\r\n        addTokenPendingMinimalResolution = minimalRecordResolution; // can be roughly 1 cent\r\n        addTokenPendingMaxPerBlockImbalance = maxPerBlockImbalance; // in twei resolution\r\n        addTokenPendingMaxTotalImbalance = maxTotalImbalance;\r\n        // Here don't assume this add as signature as well. if its a single operator. Rather he call approve function\r\n    }\r\n\r\n    function approveAddToken() public onlyOperator {\r\n        for(uint i = 0; i < addTokenApproveSignatures.length; i++) {\r\n            if (msg.sender == addTokenApproveSignatures[i]) require(false);\r\n        }\r\n        addTokenApproveSignatures.push(msg.sender);\r\n\r\n        if (addTokenApproveSignatures.length == operatorsGroup.length) {\r\n            // can perform operation.\r\n            performAddToken();\r\n        }\r\n//        addTokenApproveSignatures.length == 0;\r\n    }\r\n\r\n    function performAddToken() internal {\r\n        conversionRates.addToken(addTokenPendingToken);\r\n\r\n        //token control info\r\n        conversionRates.setTokenControlInfo(\r\n            addTokenPendingToken,\r\n            addTokenPendingMinimalResolution,\r\n            addTokenPendingMaxPerBlockImbalance,\r\n            addTokenPendingMaxTotalImbalance\r\n        );\r\n\r\n        //step functions\r\n        int[] memory zeroArr = new int[](1);\r\n        zeroArr[0] = 0;\r\n\r\n        conversionRates.setQtyStepFunction(addTokenPendingToken, zeroArr, zeroArr, zeroArr, zeroArr);\r\n        conversionRates.setImbalanceStepFunction(addTokenPendingToken, zeroArr, zeroArr, zeroArr, zeroArr);\r\n\r\n        conversionRates.enableTokenTrade(addTokenPendingToken);\r\n    }\r\n\r\n    function getAddTokenParameters() public view returns(ERC20 token, uint minimalRecordResolution, uint maxPerBlockImbalance, uint maxTotalImbalance) {\r\n        token = addTokenPendingToken;\r\n        minimalRecordResolution = addTokenPendingMinimalResolution;\r\n        maxPerBlockImbalance = addTokenPendingMaxPerBlockImbalance; // in twei resolution\r\n        maxTotalImbalance = addTokenPendingMaxTotalImbalance;\r\n    }\r\n    \r\n    //set token control info\r\n    ////////////////////////\r\n    function tokenInfoSetPendingTokens(ERC20 [] tokens) public onlyOperator {\r\n        setTokenInfoApproveSignatures.length = 0;\r\n        setTokenInfoPendingTokenList = tokens;\r\n    }\r\n\r\n    function tokenInfoSetMaxPerBlockImbalanceList(uint[] maxPerBlockImbalanceValues) public onlyOperator {\r\n        require(maxPerBlockImbalanceValues.length == setTokenInfoPendingTokenList.length);\r\n        setTokenInfoApproveSignatures.length = 0;\r\n        setTokenInfoPendingPerBlockImbalance = maxPerBlockImbalanceValues;\r\n    }\r\n\r\n    function tokenInfoSetMaxTotalImbalanceList(uint[] maxTotalImbalanceValues) public onlyOperator {\r\n        require(maxTotalImbalanceValues.length == setTokenInfoPendingTokenList.length);\r\n        setTokenInfoApproveSignatures.length = 0;\r\n        setTokenInfoPendingMaxTotalImbalance = maxTotalImbalanceValues;\r\n    }\r\n\r\n    function approveSetTokenControlInfo() public onlyOperator {\r\n        for(uint i = 0; i < setTokenInfoApproveSignatures.length; i++) {\r\n            if (msg.sender == setTokenInfoApproveSignatures[i]) require(false);\r\n        }\r\n        setTokenInfoApproveSignatures.push(msg.sender);\r\n\r\n        if (setTokenInfoApproveSignatures.length == operatorsGroup.length) {\r\n            // can perform operation.\r\n            performSetTokenControlInfo();\r\n        }\r\n    }\r\n\r\n    function performSetTokenControlInfo() internal {\r\n        require(setTokenInfoPendingTokenList.length == setTokenInfoPendingPerBlockImbalance.length);\r\n        require(setTokenInfoPendingTokenList.length == setTokenInfoPendingMaxTotalImbalance.length);\r\n\r\n        uint minimalRecordResolution;\r\n        uint rxMaxPerBlockImbalance;\r\n        uint rxMaxTotalImbalance;\r\n\r\n        for (uint i = 0; i < setTokenInfoPendingTokenList.length; i++) {\r\n            (minimalRecordResolution, rxMaxPerBlockImbalance, rxMaxTotalImbalance) =\r\n                conversionRates.getTokenControlInfo(setTokenInfoPendingTokenList[i]);\r\n            require(minimalRecordResolution != 0);\r\n\r\n            conversionRates.setTokenControlInfo(setTokenInfoPendingTokenList[i],\r\n                                                minimalRecordResolution,\r\n                                                setTokenInfoPendingPerBlockImbalance[i],\r\n                                                setTokenInfoPendingMaxTotalImbalance[i]);\r\n        }\r\n    }\r\n\r\n    function getControlInfoTokenlist() public view returns(ERC20[] tokens) {\r\n        tokens = setTokenInfoPendingTokenList;\r\n    }\r\n\r\n    function getControlInfoMaxPerBlockImbalanceList() public view returns(uint[] maxPerBlockImbalanceValues) {\r\n        maxPerBlockImbalanceValues = setTokenInfoPendingPerBlockImbalance;\r\n    }\r\n\r\n    function getControlInfoMaxTotalImbalanceList() public view returns(uint[] maxTotalImbalanceValues) {\r\n        maxTotalImbalanceValues = setTokenInfoPendingMaxTotalImbalance;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claimWrappedContractAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"alerter\",\"type\":\"address\"}],\"name\":\"removeAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getControlInfoMaxTotalImbalanceList\",\"outputs\":[{\"name\":\"maxTotalImbalanceValues\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getControlInfoTokenlist\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAlerter\",\"type\":\"address\"}],\"name\":\"addAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setTokenInfoPendingTokenList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxTotalImbalanceValues\",\"type\":\"uint256[]\"}],\"name\":\"tokenInfoSetMaxTotalImbalanceList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddTokenParameters\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"minimalRecordResolution\",\"type\":\"uint256\"},{\"name\":\"maxPerBlockImbalance\",\"type\":\"uint256\"},{\"name\":\"maxTotalImbalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setTokenInfoPendingMaxTotalImbalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"tokenInfoSetPendingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setTokenInfoPendingPerBlockImbalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAlerters\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferWrappedContractAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"minimalRecordResolution\",\"type\":\"uint256\"},{\"name\":\"maxPerBlockImbalance\",\"type\":\"uint256\"},{\"name\":\"maxTotalImbalance\",\"type\":\"uint256\"}],\"name\":\"addTokenToApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setTokenInfoApproveSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveAddToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveSetTokenControlInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getControlInfoMaxPerBlockImbalanceList\",\"outputs\":[{\"name\":\"maxPerBlockImbalanceValues\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxPerBlockImbalanceValues\",\"type\":\"uint256[]\"}],\"name\":\"tokenInfoSetMaxPerBlockImbalanceList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addTokenPendingToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addTokenApproveSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_conversionRates\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"EtherWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAlerter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"AlerterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"}]","ContractName":"WrapConversionRate","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000798abda6cc246d0edba912092a2a3dbd3d11191b000000000000000000000000ad63586d60e28fce6393303ebec11b28d64f811c","Library":"","SwarmSource":"bzzr://c69744a114d78acbc878f2a176a3b791be7c8769a56f426f501b2cc87c32d625"}]}