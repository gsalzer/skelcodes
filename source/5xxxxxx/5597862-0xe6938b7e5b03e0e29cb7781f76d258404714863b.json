{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 public totalSupply_;\r\n  \r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title CoinnupCrowdsaleToken\r\n * @dev ERC20-compliant Token that can be minted.\r\n */\r\ncontract CoinnupToken is StandardToken, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  string public constant name = \"Coinnup Coin\"; // solium-disable-line uppercase\r\n  string public constant symbol = \"PMZ\"; // solium-disable-line uppercase\r\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\r\n\r\n  /// @dev store how much in eth users invested to give them a refund in case refund happens\r\n  mapping ( address => uint256 ) public investments;\r\n  /// @dev to have how much one user bought tokens\r\n  mapping ( address => uint256 ) public tokensBought;\r\n\r\n  /// @dev event when someone bought tokens by ETH\r\n  event investmentReceived(\r\n    address sender,\r\n    uint weis,\r\n    uint total\r\n  );\r\n\r\n  uint256 public maxSupply = 298500000000000000000000000;\r\n  uint256 public allowedToBeSold = 118056750000000000000000000;\r\n  address public founder = address( 0x3abb86C7C1a533Eb0464E9BD870FD1b501C7A8A8 );\r\n  uint256 public rate = 2800;\r\n  uint256 public bonus = 30;\r\n  uint256 public softCap = 1850000000000000000000;\r\n\r\n  uint256 public _sold; //eth sold via payable function\r\n  /// @dev in this var we store eth when someone bought tokens\r\n  /// not sending it to smart contract but buying it privately\r\n  uint256 public _soldOutside; //wei sold not via SC\r\n  uint256 public _soldOutsidePMZ; //PMZ tokens sold not via SC\r\n\r\n  bool public isPaused;\r\n\r\n  struct Round {\r\n    uint256 openingTime;\r\n    uint256 closingTime;\r\n    uint256 allocatedCoins;\r\n    uint256 minPurchase;\r\n    uint256 maxPurchase;\r\n    uint256 soldCoins;\r\n  }\r\n\r\n  Round[] public rounds;\r\n\r\n  /** @dev Token cunstructor\r\n    */\r\n  constructor () public {\r\n    require(maxSupply > 0);\r\n    require(founder != address(0));\r\n    require(rate > 0);\r\n    require(bonus >= 0 && bonus <= 100); // in percentage\r\n    require(allowedToBeSold > 0 && allowedToBeSold < maxSupply);\r\n\r\n    require(softCap > 0);\r\n\r\n    for (uint8 i = 0; i < 6; i++) {\r\n      rounds.push( Round(0, 0, 0, 0, 0, 0) );\r\n    }\r\n\r\n    // mint tokens which initially belongs to founder\r\n    uint256 _forFounder = maxSupply.sub(allowedToBeSold);\r\n    mint(founder, _forFounder);\r\n\r\n    // waiting for admin to set round dates\r\n    // and to unpause by admin\r\n    triggerICOState(true);\r\n  }\r\n\r\n  /// @dev in payable we shold keep only forwarding call\r\n  function () public onlyWhileOpen isNotPaused payable {\r\n    require(_buyTokens(msg.sender, msg.value));\r\n  }\r\n\r\n  /**\r\n   * @dev gets `_sender` and `_value` as input and sells tokens with bonus\r\n   * throws if not enough tokens after calculation\r\n   * @return isSold bool whether tokens bought\r\n   */\r\n  function _buyTokens(address _sender, uint256 _value) internal isNotPaused returns (bool) {\r\n    uint256 amount = _getTokenAmount(_value, bonus);\r\n    uint256 amount_without_bonus = _getTokenAmount(_value, 0);\r\n    uint8 _currentRound = _getCurrentRound(now);\r\n\r\n    require(rounds[_currentRound].allocatedCoins >= amount.add(rounds[_currentRound].soldCoins));\r\n    require(totalSupply_.add(amount) <= maxSupply); // if we have enough tokens to be minted\r\n\r\n    require(\r\n      rounds[_currentRound].minPurchase <= amount_without_bonus &&\r\n      rounds[_currentRound].maxPurchase >= amount_without_bonus\r\n    );\r\n\r\n    _sold = _sold.add(_value); // in wei\r\n    investments[_sender] = investments[_sender].add(_value); // in wei\r\n\r\n    // minting tokens for investores\r\n    // after we recorded how much he sent ether and other params\r\n    mint(_sender, amount);\r\n    rounds[_currentRound].soldCoins = rounds[_currentRound].soldCoins.add(amount);\r\n    tokensBought[_sender] = tokensBought[_sender].add(amount);\r\n\r\n    emit investmentReceived(\r\n      _sender,\r\n      _value,\r\n      amount_without_bonus\r\n    );\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @dev system can mint tokens for users if they sent funds to BTC, LTC, etc wallets we allow\r\n  function mintForInvestor(address _to, uint256 _tokens, uint256 _tokens_bonus) public onlyOwner onlyWhileOpen {\r\n    uint8 _round = _getCurrentRound(now);\r\n    uint256 _tokens_with_bonuses = _tokens.add(_tokens_bonus);\r\n\r\n    require(_round >= 0 && _round <= 5);\r\n    require(_to != address(0)); // handling incorrect values from system in addresses\r\n    require(_tokens >= 0); // handling incorrect values from system in tokens calculation\r\n    require(rounds[_round].allocatedCoins >= _tokens_with_bonuses.add(rounds[_round].soldCoins));\r\n    require(maxSupply >= _tokens_with_bonuses.add(totalSupply_));\r\n    require(_tokens > _tokens_bonus);\r\n    \r\n    require(\r\n      rounds[_round].minPurchase <= _tokens && // Min Max purchases without bonuses\r\n      rounds[_round].maxPurchase >= _tokens\r\n    );\r\n\r\n    // minting tokens for investors\r\n    mint(_to, _tokens_with_bonuses); // _tokens in wei\r\n    rounds[_round].soldCoins = rounds[_round].soldCoins.add(_tokens_with_bonuses); \r\n    tokensBought[_to] = tokensBought[_to].add(_tokens_with_bonuses); // tokens in wei\r\n\r\n    uint256 _soldInETH = _tokens.div( rate ); // Calc without bonuses\r\n    \r\n    _sold = _sold.add(_soldInETH); // in wei\r\n    _soldOutside = _soldOutside.add(_soldInETH); // eth\r\n    _soldOutsidePMZ = _soldOutsidePMZ.add(_tokens_with_bonuses); // in PMZ\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) internal {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Transfer(address(this), _to, _amount);\r\n  }\r\n\r\n    /**\r\n   * @dev The way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @param _bonus Bonus in percents\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount, uint _bonus) internal view returns (uint256) {\r\n    uint256 _coins_in_wei = rate.mul(_weiAmount);\r\n    uint256 _bonus_value_in_wei = 0;\r\n    uint256 bonusValue = 0;\r\n\r\n    _bonus_value_in_wei = (_coins_in_wei.mul(_bonus)).div(100);\r\n    bonusValue = _bonus_value_in_wei;\r\n\r\n    uint256 coins = _coins_in_wei;\r\n    uint256 total = coins.add(bonusValue);\r\n\r\n    return total;\r\n  }\r\n\r\n  /**\r\n   * @dev sets a rate for ico rounds\r\n   * @param _rate Rate for token\r\n   */\r\n  function setRate(uint256 _rate) public {\r\n    require(msg.sender == owner);\r\n    require(_rate > 0);\r\n\r\n    rate = _rate;\r\n  }\r\n\r\n  /// @dev get total coins sold per current round\r\n  function soldPerCurrentRound() public view returns (uint256) {\r\n    return rounds[_getCurrentRound(now)].soldCoins;\r\n  }\r\n\r\n  /// @dev pause and unpause an ICO, only sender allowed to\r\n  function triggerICOState(bool state) public onlyOwner {\r\n    isPaused = state;\r\n  }\r\n\r\n  /**\r\n   * @dev changes current bonus rate\r\n   * @param _bonus Bonus to change\r\n   * @return bool - Changed or not\r\n   */\r\n  function setBonus(uint256 _bonus) onlyOwner public {\r\n    require(_bonus >= 0 && _bonus <= 100); //%\r\n    bonus = _bonus;\r\n  }\r\n\r\n  /// @dev gets number of current round\r\n  function _getCurrentRound(uint256 _time) public view returns (uint8) {\r\n    for (uint8 i = 0; i < 6; i++) {\r\n      if (rounds[i].openingTime < _time && rounds[i].closingTime > _time) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return 100; // if using 6 in 5 length array it will throw\r\n  }\r\n\r\n  function setRoundParams(\r\n    uint8 _round,\r\n    uint256 _openingTime,\r\n    uint256 _closingTime,\r\n    uint256 _maxPurchase,\r\n    uint256 _minPurchase,\r\n    uint256 _allocatedCoins\r\n  ) public onlyOwner {\r\n    rounds[_round].openingTime = _openingTime;\r\n    rounds[_round].closingTime = _closingTime;\r\n    rounds[_round].maxPurchase = _maxPurchase;\r\n    rounds[_round].minPurchase = _minPurchase;\r\n    rounds[_round].allocatedCoins = _allocatedCoins;\r\n  }\r\n\r\n  /**\r\n   * @dev withdrawing funds to founder's wallet\r\n   * @return bool Whether success or not\r\n   */\r\n  function withdraw() public {\r\n    // only founder is able to withdraw funds\r\n    require(msg.sender == founder);\r\n    founder.transfer(address(this).balance);\r\n  }\r\n\r\n  /**\r\n   * @dev Claims for refund if ICO finished and soft cap not reached\r\n   */\r\n  function refund() public whenICOFinished capNotReached {\r\n    require(investments[msg.sender] > 0);\r\n    msg.sender.transfer(investments[msg.sender]);\r\n    investments[msg.sender] = 0;\r\n  }\r\n\r\n  modifier onlyWhileOpen {\r\n    uint8 _round = _getCurrentRound(now);\r\n    require(_round >= 0 && _round <= 5); // we have 6 rounds, other values are invalid\r\n    _;\r\n  }\r\n\r\n  /// @dev when ico finishes we can perform other actions\r\n  modifier whenICOFinished {\r\n    uint8 _round = _getCurrentRound(now);\r\n    require(_round < 0 || _round > 5); // if we do not get current valid round number ICO finished\r\n    _;\r\n  }\r\n\r\n  /// @dev _sold in weis, softCap in weis\r\n  modifier capNotReached {\r\n    require(softCap > _sold);\r\n    _;\r\n  }\r\n\r\n  /// @dev if isPaused true then investments cannot be accepted\r\n  modifier isNotPaused {\r\n    require(!isPaused);\r\n    _;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"allowedToBeSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint8\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_maxPurchase\",\"type\":\"uint256\"},{\"name\":\"_minPurchase\",\"type\":\"uint256\"},{\"name\":\"_allocatedCoins\",\"type\":\"uint256\"}],\"name\":\"setRoundParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"_getCurrentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldPerCurrentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_soldOutside\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"name\":\"openingTime\",\"type\":\"uint256\"},{\"name\":\"closingTime\",\"type\":\"uint256\"},{\"name\":\"allocatedCoins\",\"type\":\"uint256\"},{\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"name\":\"soldCoins\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"triggerICOState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_soldOutsidePMZ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_tokens_bonus\",\"type\":\"uint256\"}],\"name\":\"mintForInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weis\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"investmentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CoinnupToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://694f4014f88b4881df99119e796ba40e2c15a9ee314ccd311d26b847e98017f4"}]}