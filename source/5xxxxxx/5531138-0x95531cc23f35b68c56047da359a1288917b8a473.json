{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n  \tuint256 c = a * b;\r\n  \tassert(a == 0 || c / a == b);\r\n  \treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n  \t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n  \tassert(b <= a);\r\n  \treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n  \tuint256 c = a + b;\r\n  \tassert(c >= a);\r\n  \treturn c;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\taddress public owner;\r\n  address public AD = 0xf77F9D99dB407f8dA9131D15e385785923F65473;\r\n\r\n\t/**\r\n * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n \t * account.\r\n \t */\r\n\tfunction Ownable() public {\r\n  \towner = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n \t * @dev Throws if called by any account other than the owner.\r\n \t */\r\n\r\n\tmodifier onlyAD(){\r\n  \trequire(msg.sender == AD);\r\n  \t_;\r\n\t}\r\n\r\n\t/**\r\n \t * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n \t * @param newOwner The address to transfer ownership to.\r\n \t */\r\n\tfunction transferOwnership(address newOwner) onlyAD public;\r\n\r\n  /**\r\n   * @dev Allows the current token commission receiver to transfer control of the contract to a new token commission receiver.\r\n   * @param newTokenCommissionReceiver The address to transfer token commission receiver to.\r\n   */\r\n  function transferCommissionReceiver(address newTokenCommissionReceiver) onlyAD public;\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n\tfunction balanceOf(address who) public constant returns (uint256);\r\n\tfunction transfer(address to, uint256 value) public returns (bool);\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20Basic, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) balances;\r\n\r\n  // The percentage of commission\r\n  uint public commissionPercentForCreator = 1;\r\n\r\n  // Coin Properties\r\n  uint256 public decimals = 18;\r\n\r\n  // one coin\r\n  uint256 public oneCoin = 10 ** decimals;\r\n\r\n\t/**\r\n\t * @dev transfer token for a specified address\r\n\t * @param _to The address to transfer to.\r\n\t * @param _value The amount to be transferred.\r\n\t */\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n  \tbalances[_to] = balances[_to].add(_value);\r\n  \tTransfer(msg.sender, _to, _value);\r\n  \treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Gets the balance of the specified address.\r\n\t * @param _owner The address to query the the balance of.\r\n\t * @return An uint256 representing the amount owned by the passed address.\r\n\t */\r\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance) {\r\n  \treturn balances[_owner];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer tokens from one address to another\r\n\t * @param _from address The address which you want to send tokens from\r\n\t * @param _to address The address which you want to transfer to\r\n\t * @param _value uint256 the amout of tokens to be transfered\r\n \t */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n  \trequire(_to != address(0));\r\n  \tbalances[_to] = balances[_to].add(_value);\r\n  \tbalances[_from] = balances[_from].sub(_value);\r\n  \tTransfer(_from, _to, _value);\r\n  \treturn true;\r\n\t}\r\n\r\n  function isTransferable(address _sender, address _receiver, uint256 value) public returns (bool) {\r\n    uint256 actualValue = value;\r\n    // in case sender is owner, need to make sure owner has enough token for both commission and sending amount\r\n    // in case receiver is owner, we no need to care because they will enough to transfer 1% of receive amount\r\n    if (_sender == owner) {\r\n      uint cm = (value * oneCoin * commissionPercentForCreator).div(100);\r\n      actualValue = actualValue + cm;\r\n    }\r\n\r\n    // Check if the sender has enough\r\n    if (balances[_sender] < actualValue) return false;\r\n    \r\n    // Check for overflows\r\n    if (balances[_receiver] + value < balances[_receiver]) return false;\r\n    return true;\r\n  }\r\n\r\n\t/* This unnamed function is called whenever someone tries to send ether to it */\r\n  function() public {\r\n    // Prevents accidental sending of ether\r\n    revert();\r\n  }\r\n}\r\n\r\n/**\r\n * @title ATL token\r\n */\r\ncontract ATLToken is StandardToken {\r\n  // total supply to market 10.000.000 coins\r\n\tuint256 public totalSupply = 10 * (10**6) * oneCoin;\r\n\r\n  // The address that will receive the commission for each transaction to or from the owner\r\n\taddress public tokenCommissionReceiver = 0xEa8867Ce34CC66318D4A055f43Cac6a88966C43f; \r\n\t\r\n\tstring public name = \"ATON\";\r\n\tstring public symbol = \"ATL\";\r\n\t\r\n\tfunction ATLToken() public {\r\n\t\tbalances[msg.sender] = totalSupply;\r\n\t}\r\n\r\n\t/**\r\n * @dev Allows anyone to transfer the Change tokens once trading has started\r\n\t * @param _to the recipient address of the tokens.\r\n\t * @param _value number of tokens to be transfered.\r\n \t */\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n    _value = _value.div(oneCoin);\r\n    if (!isTransferable(msg.sender, _to, _value)) revert();\r\n    if (_to == owner || msg.sender == owner) {\r\n      //calculate the commission\r\n      uint cm = (_value * oneCoin * commissionPercentForCreator).div(100);\r\n      //make sure commision always transfer from owner\r\n      super.transferFrom(owner, tokenCommissionReceiver, cm);\r\n    }\r\n  \treturn super.transfer(_to, _value * oneCoin);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows anyone to transfer the Change tokens once trading has started\r\n\t * @param _from address The address which you want to send tokens from\r\n\t * @param _to address The address which you want to transfer to\r\n\t * @param _value uint the amout of tokens to be transfered\r\n \t*/\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    _value = _value.div(oneCoin);\r\n    if (!isTransferable(_from, _to, _value)) revert();\r\n  \tif (_from == owner || _to == owner) {\r\n      //calculate the commission\r\n      uint cm = (_value  * oneCoin * commissionPercentForCreator).div(100);\r\n      //make sure commision always transfer from owner\r\n      super.transferFrom(owner, tokenCommissionReceiver, cm);\r\n    }\r\n    return super.transferFrom(_from, _to, _value * oneCoin);\r\n\t}\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyAD public {\r\n    if (newOwner != address(0)) {\r\n      uint256 totalTokenOfOwner = balances[owner];\r\n      //make sure transfer all token from owner to new owner\r\n      super.transferFrom(owner, newOwner, totalTokenOfOwner);\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current token commission receiver to transfer control of the contract to a new token commission receiver.\r\n   * @param newTokenCommissionReceiver The address to transfer token commission receiver to.\r\n   */\r\n  function transferCommissionReceiver(address newTokenCommissionReceiver) onlyAD public {\r\n    if (newTokenCommissionReceiver != address(0)) {\r\n      tokenCommissionReceiver = newTokenCommissionReceiver;\r\n    }\r\n  }\r\n\r\n\tfunction emergencyERC20Drain( ERC20Basic oddToken, uint256 amount ) public {\r\n  \toddToken.transfer(owner, amount);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"isTransferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionPercentForCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCommissionReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AD\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenCommissionReceiver\",\"type\":\"address\"}],\"name\":\"transferCommissionReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ATLToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://369bc922fe586f997dd543d6a62ef83285047dd27e60b4dc36fc75209a491cc3"}]}