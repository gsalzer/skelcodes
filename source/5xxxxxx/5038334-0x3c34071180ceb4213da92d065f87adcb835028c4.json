{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract CryptoScams {\r\n  using SafeMath for uint256;  \r\n  event Bought (uint256 indexed _scamId, address indexed _owner, uint256 _price);\r\n  event Sold (uint256 indexed _scamId, address indexed _owner, uint256 _price);  \r\n  address public owner;\r\n  uint256[] private scams; \r\n  mapping (uint256 => uint256) private startingPriceOfScam;\r\n  mapping (uint256 => uint256) private priceOfScam;\r\n  mapping (uint256 => address) private ownerOfScam;\r\n  mapping (uint256 => string) private nameOfScam;\r\n  uint256 cutPercent = 5;\r\n\r\n  function CryptoScams () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender);\r\n    _;\r\n  }\r\n  \r\n  function setCut (uint256 _n) onlyOwner() public {\r\n\t  require(_n >= 0 && _n <= 10);\r\n    cutPercent = _n;\r\n  }\r\n\r\n  function withdraw () onlyOwner() public {\r\n    owner.transfer(this.balance);\r\n  }\r\n\r\n  function setOwner (address _owner) onlyOwner() public {\r\n    owner = _owner;\r\n  }\r\n\r\n  function listScam (uint256 _scamId, string _name, uint256 _price) onlyOwner() public {\r\n    require(_price > 0);\r\n    require(priceOfScam[_scamId] == 0);\r\n    require(ownerOfScam[_scamId] == address(0));\r\n    ownerOfScam[_scamId] = owner;\r\n    priceOfScam[_scamId] = _price;\r\n    startingPriceOfScam[_scamId] = _price;\r\n    nameOfScam[_scamId] = _name;\r\n    scams.push(_scamId);\r\n  }\r\n  \r\n  function getScam(uint256 _scamId) public view returns (address _owner, uint256 _price, string _name) {\r\n    _owner = ownerOfScam[_scamId];\r\n    _price = priceOfScam[_scamId];\r\n    _name = nameOfScam[_scamId];\r\n  }\r\n\r\n  function getOwner (uint256 _scamId) public view returns (address _owner) {\r\n    return ownerOfScam[_scamId];\r\n  }\r\n\r\n  function startingPriceOf (uint256 _scamId) public view returns (uint256 _startingPrice) {\r\n    return startingPriceOfScam[_scamId];\r\n  }\r\n  \r\n  function priceOf (uint256 _scamId) public view returns (uint256 _price) {\r\n    return priceOfScam[_scamId];\r\n  }\r\n\r\n  function nextPriceOf (uint256 _scamId) public view returns (uint256 _nextPrice) {\r\n    return calculateNextPrice(priceOf(_scamId));\r\n  }\r\n\r\n  function allScamsForSale () public view returns (uint256[] _scams) {\r\n    return scams;\r\n  }\r\n  \r\n  function getNumberOfScams () public view returns (uint256 _n) {\r\n    return scams.length;\r\n  }\r\n\r\n  function calculateNextPrice (uint256 _currentPrice) public pure returns (uint256 _newPrice) {\r\n\t  return _currentPrice.mul(125).div(100); // 1.25\r\n  }\r\n\r\n  function buy (uint256 _scamId) payable public {\r\n    require(!isContract(msg.sender));\r\n    require(priceOf(_scamId) > 0);\r\n    require(getOwner(_scamId) != address(0));\r\n    require(msg.value == priceOf(_scamId));\r\n    require(getOwner(_scamId) != msg.sender);\r\n    address previousOwner = getOwner(_scamId);\r\n    address newOwner = msg.sender;\r\n    uint256 price = priceOf(_scamId);\r\n    ownerOfScam[_scamId] = newOwner;\r\n    priceOfScam[_scamId] = nextPriceOf(_scamId);\r\n    Bought(_scamId, newOwner, price);\r\n    Sold(_scamId, previousOwner, price);\r\n    uint256 cutAmount = price.mul(cutPercent).div(100);\r\n    previousOwner.transfer(price - cutAmount);\r\n  }\r\n\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfScams\",\"outputs\":[{\"name\":\"_n\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_scamId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"listScam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_scamId\",\"type\":\"uint256\"}],\"name\":\"nextPriceOf\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"setCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_scamId\",\"type\":\"uint256\"}],\"name\":\"startingPriceOf\",\"outputs\":[{\"name\":\"_startingPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_scamId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_scamId\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_scamId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_currentPrice\",\"type\":\"uint256\"}],\"name\":\"calculateNextPrice\",\"outputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allScamsForSale\",\"outputs\":[{\"name\":\"_scams\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_scamId\",\"type\":\"uint256\"}],\"name\":\"getScam\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_scamId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_scamId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"}]","ContractName":"CryptoScams","CompilerVersion":"v0.4.20-nightly.2018.1.26+commit.bbad48bb","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d489777589b327143b29779d3dd8add6c41d02bda069dd9e5ca17a6e3f91dfed"}]}