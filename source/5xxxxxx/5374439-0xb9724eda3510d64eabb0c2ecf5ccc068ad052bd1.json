{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract INV is Ownable, MintableToken {\r\n  using SafeMath for uint256;    \r\n  string public constant name = \"Invest\";\r\n  string public constant symbol = \"INV\";\r\n  uint32 public constant decimals = 18;\r\n\r\n  address public addressTeam; // address of vesting smart contract\r\n  address public addressReserve;\r\n  address public addressAdvisors;\r\n  address public addressBounty;\r\n\r\n  uint public summTeam;\r\n  uint public summReserve;\r\n  uint public summAdvisors;\r\n  uint public summBounty;\r\n  \r\n  function INV() public {\r\n    summTeam =     42000000 * 1 ether;\r\n    summReserve =  27300000 * 1 ether;\r\n    summAdvisors = 10500000 * 1 ether;\r\n    summBounty =    4200000 * 1 ether;  \r\n\r\n    addressTeam =     0xE347C064D8535b2f7D7C0f7bc5d6763125FC2Dc6;\r\n    addressReserve =  0xB7C8163F7aAA51f1836F43d76d263e72529413ad;\r\n    addressAdvisors = 0x461361e2b78F401db76Ea1FD4E0125bF3c56a222;\r\n    addressBounty =   0x4060F9bf893fa563C272F5E4d4E691e84eF983CA;\r\n\r\n    //Founders and supporters initial Allocations\r\n    mint(addressTeam, summTeam);\r\n    mint(addressReserve, summReserve);\r\n    mint(addressAdvisors, summAdvisors);\r\n    mint(addressBounty, summBounty);\r\n  }\r\n  function getTotalSupply() public constant returns(uint256){\r\n      return totalSupply;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive. The contract requires a MintableToken that will be\r\n * minted as contributions arrive, note that the crowdsale contract\r\n * must be owner of the token in order to be able to mint it.\r\n */\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n  // totalTokens\r\n  uint256 public totalTokens;\r\n  // total all stage\r\n  uint256 public totalAllStage;\r\n  // The token being sold\r\n  INV public token;\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n    //start\r\n  uint256 public startSeedStage;\r\n  uint256 public startPrivateSaleStage;\r\n  uint256 public startPreSaleStage;\r\n  uint256 public startPublicSaleStage; \r\n    //end\r\n  uint256 public endSeedStage;\r\n  uint256 public endPrivateSaleStage;\r\n  uint256 public endPreSaleStage;\r\n  uint256 public endPublicSaleStage;    \r\n\r\n  \r\n  // the maximum number of tokens that can \r\n  // be allocated at the current stage of the ICO\r\n  uint256 public maxSeedStage;\r\n  uint256 public maxPrivateSaleStage;\r\n  uint256 public maxPreSaleStage;\r\n  uint256 public maxPublicSaleStage;   \r\n  // the total number of tokens distributed at the current stage of the ICO\r\n  uint256 public totalSeedStage;\r\n  uint256 public totalPrivateSaleStage;\r\n  uint256 public totalPreSaleStage;\r\n  uint256 public totalPublicSaleStage; \r\n\r\n  // rate\r\n  uint256 public rateSeedStage;\r\n  uint256 public ratePrivateSaleStage;\r\n  uint256 public ratePreSaleStage;\r\n  uint256 public ratePublicSaleStage;   \r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // minimum payment\r\n  uint256 public minPayment; \r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  \r\n  function Crowdsale() public {\r\n    token = createTokenContract();\r\n    // total number of tokens\r\n    totalTokens = 126000000 * 1 ether;\r\n    // minimum quantity values\r\n    minPayment = 10000000000000000; //0.01 eth\r\n    \r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n    //start\r\n  startSeedStage = 1523275200; //09 Apr 2018 12:00:00 UTC\r\n  startPrivateSaleStage = 1526385600; //15 May 2018 12:00:00 UTC\r\n  startPreSaleStage = 1527336000; //26 May 2018 12:00:00 UTC\r\n  startPublicSaleStage = 1534334400; //15 Aug 2018 08:00:00 UTC\r\n    //end\r\n  endSeedStage = 1525867200; //09 May 2018 12:00:00 UTC\r\n  endPrivateSaleStage = 1526817600; //20 May 2018 12:00:00 UTC\r\n  endPreSaleStage = 1531656000; //15 Jul 2018 12:00:00 UTC\r\n  endPublicSaleStage = 1538308800; //30 Sep 2018 12:00:00 UTC\r\n\r\n  // the maximum number of tokens that can \r\n  // be allocated at the current stage of the ICO\r\n  maxSeedStage = 126000000 * 1 ether;\r\n  maxPrivateSaleStage = 126000000 * 1 ether;\r\n  maxPreSaleStage = 126000000 * 1 ether;\r\n  maxPublicSaleStage = 126000000 * 1 ether;   \r\n\r\n  // rate for each stage of the ICO\r\n  rateSeedStage = 10000;\r\n  ratePrivateSaleStage = 8820;\r\n  ratePreSaleStage = 7644;\r\n  ratePublicSaleStage = 4956;   \r\n\r\n  // address where funds are collected\r\n  wallet = 0x72b0FeF6BB61732e97AbA95D64B33f1345A7ABf7;  \r\n  \r\n  }\r\n\r\n  function createTokenContract() internal returns (INV) {\r\n    return new INV();\r\n  }\r\n\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  function buyTokens(address beneficiary) public payable {\r\n    uint256 tokens;\r\n    uint256 weiAmount = msg.value;\r\n    uint256 backAmount;\r\n    require(beneficiary != address(0));\r\n    //minimum amount in ETH\r\n    require(weiAmount >= minPayment);\r\n    require(totalAllStage < totalTokens);\r\n    //Seed\r\n    if (now >= startSeedStage && now < endSeedStage && totalSeedStage < maxSeedStage){\r\n      tokens = weiAmount.mul(rateSeedStage);\r\n      if (maxSeedStage.sub(totalSeedStage) < tokens){\r\n        tokens = maxSeedStage.sub(totalSeedStage); \r\n        weiAmount = tokens.div(rateSeedStage);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalSeedStage = totalSeedStage.add(tokens);\r\n    }\r\n    //Private Sale\r\n    if (now >= startPrivateSaleStage && now < endPrivateSaleStage && totalPrivateSaleStage < maxPrivateSaleStage){\r\n      tokens = weiAmount.mul(ratePrivateSaleStage);\r\n      if (maxPrivateSaleStage.sub(totalPrivateSaleStage) < tokens){\r\n        tokens = maxPrivateSaleStage.sub(totalPrivateSaleStage); \r\n        weiAmount = tokens.div(ratePrivateSaleStage);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalPrivateSaleStage = totalPrivateSaleStage.add(tokens);\r\n    }    \r\n    //Pre-sale\r\n    if (now >= startPreSaleStage && now < endPreSaleStage && totalPreSaleStage < maxPreSaleStage){\r\n      tokens = weiAmount.mul(ratePreSaleStage);\r\n      if (maxPreSaleStage.sub(totalPreSaleStage) < tokens){\r\n        tokens = maxPreSaleStage.sub(totalPreSaleStage); \r\n        weiAmount = tokens.div(ratePreSaleStage);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalPreSaleStage = totalPreSaleStage.add(tokens);\r\n    }    \r\n    //Public Sale\r\n    if (now >= startPublicSaleStage && now < endPublicSaleStage && totalPublicSaleStage < maxPublicSaleStage){\r\n      tokens = weiAmount.mul(ratePublicSaleStage);\r\n      if (maxPublicSaleStage.sub(totalPublicSaleStage) < tokens){\r\n        tokens = maxPublicSaleStage.sub(totalPublicSaleStage); \r\n        weiAmount = tokens.div(ratePublicSaleStage);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalPublicSaleStage = totalPublicSaleStage.add(tokens);\r\n    }   \r\n    \r\n    require(tokens > 0);\r\n    token.mint(beneficiary, tokens);\r\n    totalAllStage = totalAllStage.add(tokens);\r\n    wallet.transfer(weiAmount);\r\n    \r\n    if (backAmount > 0){\r\n      msg.sender.transfer(backAmount);    \r\n    }\r\n    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalAllStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSeedStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateSeedStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSeedStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPublicSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPreSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPublicSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePrivateSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endSeedStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePreSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPreSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPrivateSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPublicSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPreSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startSeedStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPrivateSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePublicSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPrivateSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPreSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPrivateSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPublicSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ad1a4481ff9ed7f372c260fa8a1482e55479a1795a7f8e87d3e2a4a42cef6e6b"}]}