{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract DonationGuestbook {\r\n    struct Entry{\r\n        // structure for an guestbook entry\r\n        address owner;\r\n        string alias;\r\n        uint timestamp;\r\n        uint blocknumber;\r\n        uint donation;\r\n        string message;\r\n    }\r\n\r\n    address public owner; // Guestbook creator\r\n    address public donationWallet; // wallet to store donations\r\n    \r\n    uint public running_id = 0; // number of guestbook entries\r\n    mapping(uint=>Entry) public entries; // guestbook entries\r\n    uint public minimum_donation = 0; // to prevent spam in the guestbook\r\n\r\n    function DonationGuestbook() public { \r\n    // called at creation of contract\r\n        owner = msg.sender;\r\n        donationWallet = msg.sender;\r\n    }\r\n    \r\n    function() payable public {\r\n    // fallback function. In case somebody sends ether directly to the contract.\r\n        donationWallet.transfer(msg.value);\r\n    } \r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeDonationWallet(address _new_storage) public onlyOwner {\r\n    // in case the donation wallet address ever changes\r\n        donationWallet = _new_storage; \r\n    }\r\n\r\n    function changeOwner(address _new_owner) public onlyOwner {\r\n    // in case the owner ever changes\r\n        owner = _new_owner;\r\n    }\r\n\r\n    function changeMinimumDonation(uint _minDonation) public onlyOwner {\r\n    // in case people spam into the guestbook\r\n        minimum_donation = _minDonation;\r\n    }\r\n\r\n    function destroy() onlyOwner public {\r\n    // kills the contract and sends all funds (which should be impossible to have) to the owner\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function createEntry(string _alias, string _message) payable public {\r\n    // called by a donator to make a donation + guestbook entry\r\n        require(msg.value > minimum_donation); // entries only for those that donate something\r\n        entries[running_id] = Entry(msg.sender, _alias, block.timestamp, block.number, msg.value, _message);\r\n        running_id++;\r\n        donationWallet.transfer(msg.value);\r\n    }\r\n\r\n    function getEntry(uint entry_id) public constant returns (address, string, uint, uint, uint, string) {\r\n    // for reading the entries of the guestbook\r\n        return (entries[entry_id].owner, entries[entry_id].alias, entries[entry_id].blocknumber,  entries[entry_id].timestamp,\r\n                entries[entry_id].donation, entries[entry_id].message);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"minimum_donation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_storage\",\"type\":\"address\"}],\"name\":\"changeDonationWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"running_id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"entries\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"name\":\"donation\",\"type\":\"uint256\"},{\"name\":\"message\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minDonation\",\"type\":\"uint256\"}],\"name\":\"changeMinimumDonation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"entry_id\",\"type\":\"uint256\"}],\"name\":\"getEntry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_alias\",\"type\":\"string\"},{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"createEntry\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donationWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"DonationGuestbook","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://928d8d1d0c3081dda557dddf4d567fc633d2c662ea71880dffa67feb5ec42af1"}]}