{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n *  @title Smart City Crowdsale contract https://www.smartcitycoin.io\r\n */\r\n\r\n\r\ncontract SmartCityToken {\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {}\r\n    \r\n    function setTokenStart(uint256 _newStartTime) public {}\r\n\r\n    function burn() public {}\r\n}\r\n\r\ncontract SmartCityCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n\t/// state\r\n    SmartCityToken public token; // Token Contract\r\n\t\r\n\taddress public owner; // Owner address\r\n\r\n\tmapping (address => bool) whitelist; // useers whithelist\r\n\r\n    mapping(address => uint256) public balances; // the array of users along with amounts invested\r\n\t\r\n\tmapping(address => uint256) public purchases; // the array of users and tokens purchased\r\n\r\n    uint256 public raisedEth; // Amount of Ether raised\r\n\r\n    uint256 public startTime; // Crowdale start time\r\n\r\n    uint256 public tokensSoldTotal = 0; // Sold Tolkens counter\r\n\r\n    bool public crowdsaleEnded = false; // if the Campaign is over\r\n\t\r\n\tbool public paused = false; // if the Campaign is paused\r\n\r\n    uint256 public positionPrice = 5730 finney; // Initially 1 investement position costs 5.73 ETH, might be changed by owner afterwards\r\n\t\r\n\tuint256 public usedPositions = 0; // Initial number of used investment positions\r\n\t\r\n\tuint256 public availablePositions = 100; // Initial number of open investment positions\r\n\r\n    address walletAddress; // address of the wallet contract storing the funds\r\n\r\n\t/// constants\r\n    uint256 constant public tokensForSale = 164360928100000; // Total amount of tokens allocated for the Crowdsale\r\n\r\n\tuint256 constant public weiToTokenFactor = 10000000000000;\r\n\r\n\tuint256 constant public investmentPositions = 4370; // Total number of investment positions\r\n\r\n    uint256 constant public investmentLimit = 18262325344444; // the maximum amount of Ether an address is allowed to invest - limited to 1/9 of tokens allocated for sale\r\n\r\n\t/// events\r\n    event FundTransfer(address indexed _investorAddr, uint256 _amount, uint256 _amountRaised); // fired on transfering funds from investors\r\n\t\r\n\tevent Granted(address indexed party); // user is added to the whitelist\r\n\t\r\n\tevent Revoked(address indexed party); // user is removed from the whitelist\r\n\t\r\n\tevent Ended(uint256 raisedAmount); // Crowdsale is ended\r\n\r\n\t/// modifiers\r\n\tmodifier onlyWhenActive() {\r\n\t\trequire(now >= startTime && !crowdsaleEnded && !paused);\r\n\t\t_;\r\n\t}\r\n\t\r\n\tmodifier whenPositionsAvailable() {\r\n\t\trequire(availablePositions > 0);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyWhitelisted(address party) {\r\n\t\trequire(whitelist[party]);\r\n\t\t_; \r\n\t}\r\n\t\r\n\tmodifier onlyNotOnList(address party) {\r\n\t\trequire(!whitelist[party]);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n    /**\r\n     *  @dev Crowdsale Contract initialization\r\n     *  @param _owner address Token owner address\r\n     *  @param _tokenAddress address Crowdsale end time\r\n     *  @param _walletAddress address Beneficiary address where the funds are collected\r\n     *  @param _start uint256 Crowdsale Start Time\r\n     */\r\n    function SmartCityCrowdsale (\r\n            address _tokenAddress,\r\n            address _owner,\r\n            address _walletAddress,\r\n            uint256 _start) public {\r\n\r\n        owner = _owner;\r\n        token = SmartCityToken(_tokenAddress);\r\n        walletAddress = _walletAddress;\r\n\r\n        startTime = _start; // Crowdsale Start Time\r\n    }\r\n\r\n    /**\r\n     *  @dev Investment can be done just by sending Ether to Crowdsale Contract\r\n     */\r\n    function() public payable {\r\n        invest();\r\n    }\r\n\r\n    /**\r\n     *  @dev Make an investment\r\n     */\r\n    function invest() public payable\r\n\t\t\t\tonlyWhitelisted(msg.sender)\r\n\t\t\t\twhenPositionsAvailable\r\n\t\t\t\tonlyWhenActive\r\n\t{\r\n\t\taddress _receiver = msg.sender;\r\n        uint256 amount = msg.value; // Transaction value in Wei\r\n\r\n        var (positionsCnt, tokensCnt) = getPositionsAndTokensCnt(amount); \r\n\r\n        require(positionsCnt > 0 && positionsCnt <= availablePositions && tokensCnt > 0);\r\n\r\n\t\trequire(purchases[_receiver].add(tokensCnt) <= investmentLimit); // Check the investment limit is not exceeded\r\n\r\n        require(tokensSoldTotal.add(tokensCnt) <= tokensForSale);\r\n\r\n        walletAddress.transfer(amount); // Send funds to the Wallet\r\n\t\t\r\n        balances[_receiver] = balances[_receiver].add(amount); // Add the amount invested to Investor's ballance\r\n\t\tpurchases[_receiver] = purchases[_receiver].add(tokensCnt); // Add tokens to Investor's purchases\r\n        raisedEth = raisedEth.add(amount); // Increase raised funds counter\r\n\t\tavailablePositions = availablePositions.sub(positionsCnt);\r\n\t\tusedPositions = usedPositions.add(positionsCnt);\r\n        tokensSoldTotal = tokensSoldTotal.add(tokensCnt); // Increase sold CITY counter\r\n\r\n        require(token.transferFrom(owner, _receiver, tokensCnt)); // Transfer CITY purchased to Investor\r\n\r\n        FundTransfer(_receiver, amount, raisedEth);\r\n\t\t\r\n\t\tif (usedPositions == investmentPositions) { // Sold Out\r\n\t\t\ttoken.burn();\r\n\t\t\tcrowdsaleEnded = true; // mark Crowdsale ended\r\n\t\t\t\r\n\t\t\tEnded(raisedEth);\r\n\t\t}\r\n    }\r\n    \r\n    /**\r\n     *  @dev Calculate the amount of Tokens purchased based on the value sent and current Token price\r\n     *  @param _value uint256 Amount invested\r\n     */\r\n    function getPositionsAndTokensCnt(uint256 _value) public constant onlyWhenActive returns(uint256 positionsCnt, uint256 tokensCnt) {\r\n\t\t\tif (_value % positionPrice != 0 || usedPositions >= investmentPositions) {\r\n\t\t\t\treturn(0, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tuint256 purchasedPositions = _value.div(positionPrice);\r\n\t\t\t\tuint256 purchasedTokens = ((tokensForSale.sub(tokensSoldTotal)).mul(purchasedPositions)).div(investmentPositions.sub(usedPositions));\r\n\t\t\t\treturn(purchasedPositions, purchasedTokens);\r\n\t\t\t}\r\n    }\r\n\r\n\tfunction getMinPurchase() public constant onlyWhenActive returns(uint256 minPurchase) {\r\n\t\treturn positionPrice;\r\n\t}\r\n\t\r\n\t/// Owner functions\r\n\t\r\n    /**\r\n     *  @dev To increace/reduce number of Investment Positions released for sale\r\n     */\r\n    function setAvailablePositions(uint256 newAvailablePositions) public onlyOwner {\r\n        require(newAvailablePositions <= investmentPositions.sub(usedPositions));\r\n\t\tavailablePositions = newAvailablePositions;\r\n    }\r\n\t\r\n\t/**\r\n     *  @dev Allows Investment Position price changes\r\n     */\r\n    function setPositionPrice(uint256 newPositionPrice) public onlyOwner {\r\n        require(newPositionPrice > 0);\r\n\t\tpositionPrice = newPositionPrice;\r\n    }\r\n\t\r\n\t /**\r\n     *  @dev Emergency function to pause Crowdsale.\r\n     */\r\n    function setPaused(bool _paused) public onlyOwner { paused = _paused; }\r\n\r\n\t/**\r\n    *   @dev Emergency function to drain the contract of any funds.\r\n    */\r\n\tfunction drain() public onlyOwner { walletAddress.transfer(this.balance); }\r\n\t\r\n\t/**\r\n    *   @dev Function to manually finalize Crowdsale.\r\n    */\r\n\tfunction endCrowdsale() public onlyOwner {\r\n\t\tusedPositions = investmentPositions;\r\n\t\tavailablePositions = 0;\r\n\t\ttoken.burn(); // burn all unsold tokens\r\n\t\tcrowdsaleEnded = true; // mark Crowdsale ended\r\n\t\t\r\n\t\tEnded(raisedEth);\r\n\t}\r\n\r\n\t/// Whitelist functions\r\n\tfunction grant(address _party) public onlyOwner onlyNotOnList(_party)\r\n\t{\r\n\t\twhitelist[_party] = true;\r\n\t\tGranted(_party);\r\n\t}\r\n\r\n\tfunction revoke(address _party) public onlyOwner onlyWhitelisted(_party)\r\n\t{\r\n\t\twhitelist[_party] = false;\r\n\t\tRevoked(_party);\r\n\t}\r\n\t\r\n\tfunction massGrant(address[] _parties) public onlyOwner\r\n\t{\r\n\t\tuint len = _parties.length;\r\n\t\t\r\n\t\tfor (uint i = 0; i < len; i++) {\r\n\t\t\twhitelist[_parties[i]] = true;\r\n\t\t\tGranted(_parties[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction massRevoke(address[] _parties) public onlyOwner\r\n\t{\r\n\t\tuint len = _parties.length;\r\n\t\t\r\n\t\tfor (uint i = 0; i < len; i++) {\r\n\t\t\twhitelist[_parties[i]] = false;\r\n\t\t\tRevoked(_parties[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction isWhitelisted(address _party) public constant returns (bool) {\r\n\t\treturn whitelist[_party];\r\n\t}\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\t\r\n    /**\r\n    *            CITY 2.0 token by www.SmartCityCoin.io\r\n    * \r\n    *          .ossssss:                      `+sssss`      \r\n    *         ` +ssssss+` `.://++++++//:.`  .osssss+       \r\n    *            /sssssssssssssssssssssssss+ssssso`        \r\n    *             -sssssssssssssssssssssssssssss+`         \r\n    *            .+sssssssss+:--....--:/ossssssss+.        \r\n    *          `/ssssssssssso`         .sssssssssss/`      \r\n    *         .ossssss+sssssss-       :sssss+:ossssso.     \r\n    *        `ossssso. .ossssss:    `/sssss/  `/ssssss.    \r\n    *        ossssso`   `+ssssss+` .osssss:     /ssssss`   \r\n    *       :ssssss`      /sssssso:ssssso.       +o+/:-`   \r\n    *       osssss+        -sssssssssss+`                  \r\n    *       ssssss:         .ossssssss/                    \r\n    *       osssss/          `+ssssss-                     \r\n    *       /ssssso           :ssssss                      \r\n    *       .ssssss-          :ssssss                      \r\n    *        :ssssss-         :ssssss          `           \r\n    *         /ssssss/`       :ssssss        `/s+:`        \r\n    *          :sssssso:.     :ssssss      ./ssssss+`      \r\n    *           .+ssssssso/-.`:ssssss``.-/osssssss+.       \r\n    *             .+ssssssssssssssssssssssssssss+-         \r\n    *               `:+ssssssssssssssssssssss+:`           \r\n    *                  `.:+osssssssssssso+:.`              \r\n    *                        `/ssssss.`                    \r\n    *                         :ssssss                      \r\n    */","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getMinPurchase\",\"outputs\":[{\"name\":\"minPurchase\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_parties\",\"type\":\"address[]\"}],\"name\":\"massRevoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_party\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_parties\",\"type\":\"address[]\"}],\"name\":\"massGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usedPositions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_party\",\"type\":\"address\"}],\"name\":\"grant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_party\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAvailablePositions\",\"type\":\"uint256\"}],\"name\":\"setAvailablePositions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentPositions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getPositionsAndTokensCnt\",\"outputs\":[{\"name\":\"positionsCnt\",\"type\":\"uint256\"},{\"name\":\"tokensCnt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availablePositions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"positionPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPositionPrice\",\"type\":\"uint256\"}],\"name\":\"setPositionPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiToTokenFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_walletAddress\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_investorAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"party\",\"type\":\"address\"}],\"name\":\"Granted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"party\",\"type\":\"address\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"raisedAmount\",\"type\":\"uint256\"}],\"name\":\"Ended\",\"type\":\"event\"}]","ContractName":"SmartCityCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000815eecb926095fe3613418f1e2dbbd3c29e70a8b0000000000000000000000001676ce8401236f40058dc93fabea4cb093f1686a00000000000000000000000051a363281fb1c6cc8d5f587b2db7d415c6f3da410000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a3135333131383038303000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://05dbc756bad1a0621c5f6dfa2ae5b8ad5e466b6e20f7b85edd69141f56e3a0e1"}]}