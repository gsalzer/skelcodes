{"status":"1","message":"OK","result":[{"SourceCode":"/*************************************************************************\r\n * This contract has been merged with solidify\r\n * https://github.com/tiesnetwork/solidify\r\n *************************************************************************/\r\n \r\n pragma solidity ^0.4.18;\r\n\r\n/*************************************************************************\r\n * import \"../common/Owned.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"./IOwned.sol\" : start\r\n *************************************************************************/\r\n\r\n/**@dev Simple interface to Owned base class */\r\ncontract IOwned {\r\n    function owner() public constant returns (address) {}\r\n    function transferOwnership(address _newOwner) public;\r\n}/*************************************************************************\r\n * import \"./IOwned.sol\" : end\r\n *************************************************************************/\r\n\r\ncontract Owned is IOwned {\r\n    address public owner;        \r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**@dev allows transferring the contract ownership. */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n/*************************************************************************\r\n * import \"../common/Owned.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"../token/IERC20Token.sol\" : start\r\n *************************************************************************/\r\n\r\n/**@dev ERC20 compliant token interface. \r\nhttps://theethereum.wiki/w/index.php/ERC20_Token_Standard \r\nhttps://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md */\r\ncontract IERC20Token {\r\n\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external    \r\n    function name() public constant returns (string _name) { _name; }\r\n    function symbol() public constant returns (string _symbol) { _symbol; }\r\n    function decimals() public constant returns (uint8 _decimals) { _decimals; }\r\n    \r\n    function totalSupply() public constant returns (uint total) {total;}\r\n    function balanceOf(address _owner) public constant returns (uint balance) {_owner; balance;}    \r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {_owner; _spender; remaining;}\r\n\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    \r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n/*************************************************************************\r\n * import \"../token/IERC20Token.sol\" : end\r\n *************************************************************************/\r\n\r\n/**@dev This contract holds tokens and unlock at specific dates.\r\nunlockDates - array of UNIX timestamps when unlock happens\r\nunlockAmounts - total amount of tokens that are unlocked on that date, the last element should equal to 0\r\nFor example, if \r\n1st tranche unlocks 10 tokens, \r\n2nd unlocks 15 tokens more\r\n3rd unlocks 30 tokens more\r\n4th unlocks 40 tokens more - all the rest \r\nthen unlockAmounts should be [10, 25, 55, 95]\r\n */\r\ncontract CustomTrancheWallet is Owned {\r\n\r\n    IERC20Token public token;\r\n    address public beneficiary;\r\n    uint256 public initialFunds; //initial funds at the moment of lock \r\n    bool public locked; //true if funds are locked\r\n    uint256[] public unlockDates;\r\n    uint256[] public unlockAmounts;\r\n    uint256 public alreadyWithdrawn; //amount of tokens already withdrawn\r\n\r\n    function CustomTrancheWallet(\r\n        IERC20Token _token, \r\n        address _beneficiary, \r\n        uint256[] _unlockDates, \r\n        uint256[] _unlockAmounts\r\n    ) \r\n    public \r\n    {\r\n        token = _token;\r\n        beneficiary = _beneficiary;\r\n        unlockDates = _unlockDates;\r\n        unlockAmounts = _unlockAmounts;\r\n\r\n        require(paramsValid());\r\n    }\r\n\r\n    /**@dev Returns total number of scheduled unlocks */\r\n    function unlocksCount() public constant returns(uint256) {\r\n        return unlockDates.length;\r\n    }\r\n\r\n    /**@dev Returns amount of tokens available for withdraw */\r\n    function getAvailableAmount() public constant returns(uint256) {\r\n        if (!locked) {\r\n            return token.balanceOf(this);\r\n        } else {\r\n            return amountToWithdrawOnDate(now) - alreadyWithdrawn;\r\n        }\r\n    }    \r\n\r\n    /**@dev Returns how many token can be withdrawn on specific date */\r\n    function amountToWithdrawOnDate(uint256 currentDate) public constant returns (uint256) {\r\n        for (uint256 i = unlockDates.length; i != 0; --i) {\r\n            if (currentDate > unlockDates[i - 1]) {\r\n                return unlockAmounts[i - 1];\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**@dev Returns true if params are valid */\r\n    function paramsValid() public constant returns (bool) {        \r\n        if (unlockDates.length == 0 || unlockDates.length != unlockAmounts.length) {\r\n            return false;\r\n        }        \r\n\r\n        for (uint256 i = 0; i < unlockAmounts.length - 1; ++i) {\r\n            if (unlockAmounts[i] >= unlockAmounts[i + 1]) {\r\n                return false;\r\n            }\r\n            if (unlockDates[i] >= unlockDates[i + 1]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**@dev Sends available amount to stored beneficiary */\r\n    function sendToBeneficiary() public {\r\n        uint256 amount = getAvailableAmount();\r\n        alreadyWithdrawn += amount;\r\n        require(token.transfer(beneficiary, amount));\r\n    }\r\n\r\n    /**@dev Locks tokens according to stored schedule */\r\n    function lock() public ownerOnly {\r\n        require(!locked);\r\n        require(token.balanceOf(this) == unlockAmounts[unlockAmounts.length - 1]);\r\n\r\n        locked = true;\r\n    }\r\n\r\n    /**@dev Changes unlock schedule, can be called only by the owner and if funds are not locked*/\r\n    function setParams(        \r\n        uint256[] _unlockDates, \r\n        uint256[] _unlockAmounts\r\n    ) \r\n    public \r\n    ownerOnly \r\n    {\r\n        require(!locked);        \r\n\r\n        unlockDates = _unlockDates;\r\n        unlockAmounts = _unlockAmounts;\r\n\r\n        require(paramsValid());\r\n    }    \r\n\r\n    /**@dev Sets new beneficiary, can be called only by the owner */\r\n    function setBeneficiary(address _beneficiary) public ownerOnly {\r\n        beneficiary = _beneficiary;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockDates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paramsValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendToBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unlockDates\",\"type\":\"uint256[]\"},{\"name\":\"_unlockAmounts\",\"type\":\"uint256[]\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"alreadyWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentDate\",\"type\":\"uint256\"}],\"name\":\"amountToWithdrawOnDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlocksCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_unlockDates\",\"type\":\"uint256[]\"},{\"name\":\"_unlockAmounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CustomTrancheWallet","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000098bde3a768401260e7025faf9947ef1b81295519000000000000000000000000b9c5f14e5e460ef926e5772783992f686fc2d3c4000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000005acbfe80000000000000000000000000000000000000000000000000000000005b108c8000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000034f086f3b33b6840000000000000000000000000000000000000000000000001a784379d99db42000000","Library":"","SwarmSource":"bzzr://dfb11e47fe65c4727fded7cf99182126f0474bd2f19a6c06de15b91794b1c262"}]}