{"status":"1","message":"OK","result":[{"SourceCode":"contract RGX {\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n}\r\n\r\ncontract RGE {\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract RougeTGE {\r\n    \r\n    string public version = 'v1.1';\r\n    \r\n    address owner; \r\n\r\n    modifier onlyBy(address _account) {\r\n        require(msg.sender == _account);\r\n        _;\r\n    }\r\n\r\n    bool public fundingActive = true;\r\n\r\n    function toggleFunding(bool _flag) onlyBy(owner) public {\r\n        fundingActive = _flag;\r\n    }\r\n\r\n    uint public fundingStart;\r\n    uint public fundingEnd;\r\n\r\n    modifier beforeTGE() {\r\n        require(fundingStart > now);\r\n        _;\r\n    }\r\n\r\n    modifier TGEOpen() {\r\n        require(fundingStart <= now && now < fundingEnd);\r\n        require(fundingActive);\r\n        _;\r\n    }\r\n    \r\n    modifier afterTGE() {\r\n        require(now >= fundingEnd);\r\n        _;\r\n    }\r\n\r\n    function isFundingOpen() constant public returns (bool yes) {\r\n        return(fundingStart <= now && now < fundingEnd && fundingActive);\r\n    }\r\n\r\n    mapping (address => bool) public kyc;\r\n    mapping (address => uint256) public tokens;\r\n    mapping (address => mapping (address => uint256)) public used;\r\n\r\n    function tokensOf(address _who) public view returns (uint256 balance) {\r\n        return tokens[_who];\r\n    }\r\n\r\n    uint8 public minFunding = 1; /* in finney */\r\n    uint8 public decimals = 6;\r\n    uint256 public total_distribution = 500000000 * 10**uint(decimals); /* Total RGE tokens to distribute during TGE (500m with 6 decimals) */\r\n\r\n    struct Sale {\r\n        uint256 funding; // original contribution in finney\r\n        uint256 used;    // already used with bonus contribution in finney\r\n        uint256 tokens;  // RGE tokens distribution\r\n        bool presale;\r\n    }\r\n\r\n    uint256 public tokenPrice; /* in wei */\r\n\r\n    constructor(\r\n                uint _fundingStart,\r\n                uint _fundingEnd,\r\n                uint _tokenPrice\r\n                ) public {\r\n        owner = msg.sender;\r\n        fundingStart = _fundingStart;\r\n        fundingEnd = _fundingEnd;\r\n        tokenPrice = _tokenPrice;\r\n    }\r\n    \r\n    address rge; \r\n\r\n    address rgxa; \r\n    address rgxb; \r\n    address rgxd; \r\n\r\n    address rgx20; \r\n    address rgx15; \r\n    address rgx12; \r\n    address rgx9; \r\n    address rgx8; \r\n    address rgx7; \r\n    address rgx6; \r\n    address rgx5; \r\n    address rgx4; \r\n    address rgx3; \r\n\r\n    function init (\r\n                   address _rge,\r\n                   address _rgxa, address _rgxb, address _rgxd,\r\n                   address _rgx20, address _rgx15, address _rgx12,\r\n                   address _rgx9, address _rgx8, address _rgx7, address _rgx6, address _rgx5, address _rgx4, address _rgx3\r\n                   ) onlyBy(owner) public {\r\n        rge = _rge;\r\n        rgxa = _rgxa; rgxb = _rgxb; rgxd = _rgxd; \r\n        rgx20 = _rgx20; rgx15 = _rgx15; rgx12 = _rgx12;\r\n        rgx9 = _rgx9; rgx8 = _rgx8; rgx7 = _rgx7; rgx6 = _rgx6; rgx5 = _rgx5; rgx4 = _rgx4; rgx3 = _rgx3;\r\n    }\r\n    \r\n    event Distribute(address indexed buyer, uint256 value);\r\n\r\n    function () payable TGEOpen() public { \r\n\r\n        require(msg.sender != owner);\r\n\r\n        Sale memory _sale = Sale({\r\n            funding: msg.value / 1 finney, used: 0, tokens: 0, presale: false\r\n        });\r\n\r\n        require(_sale.funding >= minFunding);\r\n\r\n        /* distribution with RGX discounts */\r\n        \r\n        _sale = _with_RGXBonus(_sale, rgxa, 20, 1);\r\n        _sale = _with_RGXBonus(_sale, rgxb, 11, 1);\r\n        _sale = _with_RGXBonus(_sale, rgxd, 5, 4);\r\n\r\n        _sale = _with_RGXToken(_sale, rgx20, 20, 1);\r\n        _sale = _with_RGXToken(_sale, rgx15, 15, 1);\r\n        _sale = _with_RGXToken(_sale, rgx12, 12, 1);\r\n        _sale = _with_RGXToken(_sale, rgx9, 9, 1);\r\n        _sale = _with_RGXToken(_sale, rgx8, 8, 1);\r\n        _sale = _with_RGXToken(_sale, rgx7, 7, 1);\r\n        _sale = _with_RGXToken(_sale, rgx6, 6, 1);\r\n        _sale = _with_RGXToken(_sale, rgx5, 5, 1);\r\n        _sale = _with_RGXToken(_sale, rgx4, 4, 1);\r\n        _sale = _with_RGXToken(_sale, rgx3, 3, 1);\r\n\r\n        /* standard tokens distribution */\r\n        \r\n        if ( _sale.funding > _sale.used ) {\r\n\r\n            uint256 _available = _sale.funding - _sale.used;\r\n            _sale.used += _available;\r\n            _sale.tokens += _available * 1 finney * 10**uint(decimals) / tokenPrice;\r\n            \r\n        }\r\n        \r\n        /* check if enough tokens and distribute tokens to buyer */\r\n        \r\n        require(total_distribution >= _sale.tokens); \r\n\r\n        total_distribution -= _sale.tokens;\r\n        tokens[msg.sender] += _sale.tokens;\r\n        emit Distribute(msg.sender, _sale.tokens);\r\n\r\n    }\r\n    \r\n    function _with_RGXBonus(Sale _sale, address _a, uint8 _multiplier, uint8 _divisor) internal returns (Sale _result) {\r\n\r\n        RGX _rgx = RGX(_a);\r\n\r\n        uint256 rgxBalance = _rgx.balanceOf(msg.sender);\r\n\r\n        if ( used[_a][msg.sender] < rgxBalance && _sale.funding > _sale.used ) {\r\n\r\n            uint256 _available = rgxBalance - used[_a][msg.sender];\r\n\r\n            if ( _available > _sale.funding - _sale.used ) {\r\n                _available = _sale.funding - _sale.used;\r\n            }\r\n\r\n            _sale.used += _available;\r\n            _sale.tokens += _available * 1 finney * 10**uint(decimals) / tokenPrice * _multiplier / _divisor;\r\n            used[_a][msg.sender] += _available;\r\n        }\r\n\r\n        return _sale;\r\n    }\r\n\r\n    function _with_RGXToken(Sale _sale, address _a, uint8 _multiplier, uint8 _divisor) internal returns (Sale _result) {\r\n\r\n        if ( _sale.presale ) {\r\n            return _sale;\r\n        }\r\n        \r\n        RGX _rgx = RGX(_a);\r\n\r\n        uint256 rgxBalance = _rgx.balanceOf(msg.sender);\r\n\r\n        if ( used[_a][msg.sender] < rgxBalance ) {\r\n\r\n            uint256 _available = rgxBalance - used[_a][msg.sender];\r\n\r\n            _sale.tokens += _available * 1 finney * 10**uint(decimals) / tokenPrice * (_multiplier - 1) / _divisor;\r\n            used[_a][msg.sender] += _available;\r\n            _sale.presale = true;\r\n        }\r\n\r\n        return _sale;\r\n    }\r\n\r\n    function toggleKYC(address _who, bool _flag) onlyBy(owner) public {\r\n        kyc[_who]= _flag;\r\n    }\r\n    \r\n    function revertAML(address _who) onlyBy(owner) public {\r\n        total_distribution += tokens[_who];\r\n        tokens[_who] = 0;\r\n    }\r\n\r\n    function withdraw() public returns (bool success) {\r\n\r\n        require(msg.sender != owner); \r\n        \r\n        // no verification if enough tokens => done in payable already\r\n        \r\n        require(tokens[msg.sender] > 0);\r\n        require(kyc[msg.sender]); \r\n        \r\n        RGE _rge = RGE(rge);\r\n        \r\n        if ( _rge.transfer(msg.sender, tokens[msg.sender]) ) {\r\n            tokens[msg.sender] = 0;\r\n            return true;\r\n        } \r\n        \r\n        return false;\r\n        \r\n    }\r\n    \r\n    function withdrawFunding() onlyBy(owner) public {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n    \r\n    function kill() onlyBy(owner) public {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"toggleFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rge\",\"type\":\"address\"},{\"name\":\"_rgxa\",\"type\":\"address\"},{\"name\":\"_rgxb\",\"type\":\"address\"},{\"name\":\"_rgxd\",\"type\":\"address\"},{\"name\":\"_rgx20\",\"type\":\"address\"},{\"name\":\"_rgx15\",\"type\":\"address\"},{\"name\":\"_rgx12\",\"type\":\"address\"},{\"name\":\"_rgx9\",\"type\":\"address\"},{\"name\":\"_rgx8\",\"type\":\"address\"},{\"name\":\"_rgx7\",\"type\":\"address\"},{\"name\":\"_rgx6\",\"type\":\"address\"},{\"name\":\"_rgx5\",\"type\":\"address\"},{\"name\":\"_rgx4\",\"type\":\"address\"},{\"name\":\"_rgx3\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"kyc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"used\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_distribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"revertAML\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFundingOpen\",\"outputs\":[{\"name\":\"yes\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"toggleKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fundingStart\",\"type\":\"uint256\"},{\"name\":\"_fundingEnd\",\"type\":\"uint256\"},{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Distribute\",\"type\":\"event\"}]","ContractName":"RougeTGE","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005b157e20000000000000000000000000000000000000000000000000000000005b425120000000000000000000000000000000000000000000000000000073c9132f44ee","Library":"","SwarmSource":"bzzr://7d0ad695527fed1457503adc8dd7c1c3b28b9838bd9471001ca74001744096e6"}]}