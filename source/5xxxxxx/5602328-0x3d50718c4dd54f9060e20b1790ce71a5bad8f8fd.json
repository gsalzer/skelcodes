{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n/*============================================\r\n*       Craig grant eat a dick, you PnD asshole.\r\n*       https://cgnow.fun/\r\n*       Go here and tell craig to eat a dick :\r\n*       https://discord.gg/ew7H8Sf  \r\n*=============================================\r\n*/\r\n\r\ncontract CraigGrantEatDick {\r\n\r\n\r\n\t\t/*=====================================\r\n\t\t=            CONFIGURABLES            =\r\n\t\t=====================================*/\r\n\r\n\t\tstring public name = \"CraigGrantEatADick\";\r\n\t\tstring public symbol = \"CGeatDICK\";\r\n\t\tuint8 constant public decimals = 18;\r\n\t\tuint8 constant internal dividendFee_ = 5; // Craig will eat five dicks\r\n\t\tuint constant internal tokenPriceInitial_ = 0.0000000001 ether;\r\n\t\tuint constant internal tokenPriceIncremental_ = 0.00000000001 ether;\r\n\t\tuint constant internal magnitude = 2**64;\r\n\t    address sender = msg.sender;\r\n\r\n\t\t \r\n\t\t// proof of stake (defaults at too many tokens), No masternodes \r\n\t\tuint public stakingRequirement = 10000000e18;\r\n\r\n\t\t// ambassadors program (Ambassadors initially put in 0.25 ETH and can add more later when contract is live)\r\n\t\tmapping(address => bool) internal ambassadors_;\r\n\t\tuint256 constant internal preLiveIndividualFoundersMaxPurchase_ = 0.25 ether;\r\n\t\tuint256 constant internal preLiveTeamFoundersMaxPurchase_ = 1.25 ether;\r\n\t\t\r\n\r\n\t   /*===============================\r\n\t\t=            STORAGE           =\r\n\t\t==============================*/\r\n\t\t\r\n\t\t// amount of shares for each address (scaled number)\r\n\t\tmapping(address => uint) internal tokenBalanceLedger_;\r\n\t\tmapping(address => uint) internal referralBalance_;\r\n\t\tmapping(address => int) internal payoutsTo_;\r\n\t\tuint internal tokenSupply_ = 0;\r\n\t\tuint internal profitPerShare_;\r\n\r\n\r\n\t\t/*==============================\r\n\t\t=            EVENTS            =\r\n\t\t==============================*/\r\n\t\t\r\n\t\tevent onTokenPurchase(\r\n\t\t\taddress indexed customerAddress,\r\n\t\t\tuint incomingEthereum,\r\n\t\t\tuint tokensMinted,\r\n\t\t\taddress indexed referredBy\r\n\t\t);\r\n\r\n\t\tevent onTokenSell(\r\n\t\t\taddress indexed customerAddress,\r\n\t\t\tuint tokensBurned,\r\n\t\t\tuint ethereumEarned\r\n\t\t);\r\n\r\n\t\tevent onReinvestment(\r\n\t\t\taddress indexed customerAddress,\r\n\t\t\tuint ethereumReinvested,\r\n\t\t\tuint tokensMinted\r\n\t\t);\r\n\r\n\t\tevent onWithdraw(\r\n\t\t\taddress indexed customerAddress,\r\n\t\t\tuint ethereumWithdrawn\r\n\t\t);\r\n\r\n\t\t// ERC20\r\n\t\tevent Transfer(\r\n\t\t\taddress indexed from,\r\n\t\t\taddress indexed to,\r\n\t\t\tuint tokens\r\n\t\t);\r\n\r\n\r\n\t\t/*=======================================\r\n\t\t=            PUBLIC FUNCTIONS            =\r\n\t\t=======================================*/\r\n\t\tfunction CraigGrantEatDick()\r\n\t\t\tpublic\r\n\t\t{\r\n\t\t\tambassadors_[0x7e474fe5Cfb720804860215f407111183cbc2f85] = true; //KP \r\n\t\t\tambassadors_[0xfD7533DA3eBc49a608eaac6200A88a34fc479C77] = true; //MS\r\n\t\t\tambassadors_[0x05fd5cebbd6273668bdf57fff52caae24be1ca4a] = true; //LM\r\n\t\t\tambassadors_[0xec54170ca59ca80f0b5742b9b867511cbe4ccfa7] = true; //MK\r\n\t\t\tambassadors_[0xe57b7c395767d7c852d3b290f506992e7ce3124a] = true; //TA\r\n\r\n\t\t}\r\n\t\t/// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\r\n\t\tfunction buy(address _referredBy) public payable returns (uint) {\r\n\t\t\tpurchaseTokens(msg.value, _referredBy);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @dev Fallback function to handle ethereum that was send straight to the contract\r\n\t\t *  Unfortunately we cannot use a referral address this way.\r\n\t\t */\r\n\t\tfunction() payable public {\r\n\t\t\tpurchaseTokens(msg.value, 0x0);\r\n\t\t}\r\n\r\n\t\t/// @dev Converts all of caller's dividends to tokens.\r\n\t\tfunction reinvest() onlyStronghands public {\r\n\t\t\t// fetch dividends\r\n\t\t\tuint _dividends = myDividends(false); // retrieve ref. bonus later in the code\r\n\r\n\t\t\t// pay out the dividends virtually\r\n\t\t\taddress _customerAddress = msg.sender;\r\n\t\t\tpayoutsTo_[_customerAddress] +=  (int) (_dividends * magnitude);\r\n\r\n\t\t\t// retrieve ref. bonus\r\n\t\t\t_dividends += referralBalance_[_customerAddress];\r\n\t\t\treferralBalance_[_customerAddress] = 0;\r\n\r\n\t\t\t// dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n\t\t\tuint _tokens = purchaseTokens(_dividends, 0x0);\r\n\r\n\t\t\t// fire event\r\n\t\t\tonReinvestment(_customerAddress, _dividends, _tokens);\r\n\t\t}\r\n\r\n\t\t/// @dev Alias of sell() and withdraw().\r\n\t\tfunction exit() public {\r\n\t\t\t// get token count for caller & sell them all\r\n\t\t\taddress _customerAddress = msg.sender;\r\n\t\t\tuint _tokens = tokenBalanceLedger_[_customerAddress];\r\n\t\t\tif (_tokens > 0) sell(_tokens);\r\n\r\n\t\t\t// lambo delivery service\r\n\t\t\twithdraw();\r\n\t\t}\r\n\r\n\t\t/// @dev Withdraws all of the callers earnings.\r\n\t\tfunction withdraw() onlyStronghands public {\r\n\t\t\t// setup data\r\n\t\t\taddress _customerAddress = msg.sender;\r\n\t\t\tuint _dividends = myDividends(false); // get ref. bonus later in the code\r\n\r\n\t\t\t// update dividend tracker\r\n\t\t\tpayoutsTo_[_customerAddress] +=  (int) (_dividends * magnitude);\r\n\r\n\t\t\t// add ref. bonus\r\n\t\t\t_dividends += referralBalance_[_customerAddress];\r\n\t\t\treferralBalance_[_customerAddress] = 0;\r\n\r\n\t\t\t\r\n\t\t\t_customerAddress.transfer(_dividends);// lambo delivery service\r\n\r\n\t\t\t// fire event\r\n\t\t\tonWithdraw(_customerAddress, _dividends);\r\n\t\t}\r\n\r\n\t\t/// @dev Liquifies tokens to ethereum.\r\n\t\tfunction sell(uint _amountOfTokens) onlyBagholders public {\r\n\t\t\t// setup data\r\n\t\t\taddress _customerAddress = msg.sender;\r\n\t\t\t// russian hackers BTFO\r\n\t\t\trequire(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\t\t\tuint _tokens = _amountOfTokens;\r\n\t\t\tuint _ethereum = tokensToEthereum_(_tokens);\r\n\t\t\tuint _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n\t\t\tuint _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n\r\n\t\t\t// burn the sold tokens\r\n\t\t\ttokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n\t\t\ttokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n\r\n\t\t\t// update dividends tracker\r\n\t\t\tint _updatedPayouts = (int) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\r\n\t\t\tpayoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n\t\t\t// dividing by zero is a bad idea\r\n\t\t\tif (tokenSupply_ > 0) {\r\n\t\t\t\t// update the amount of dividends per token\r\n\t\t\t\tprofitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n\t\t\t}\r\n\r\n\t\t\t// fire event\r\n\t\t\tonTokenSell(_customerAddress, _tokens, _taxedEthereum);\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * @dev Transfer tokens from the caller to a new holder.\r\n\t\t *  Remember, there's a 25% fee here as well.\r\n\t\t */\r\n\t\tfunction transfer(address _toAddress, uint _amountOfTokens) onlyBagholders public returns (bool) {\r\n\t\t\t// setup\r\n\t\t\taddress _customerAddress = msg.sender;\r\n\r\n\t\t\t// make sure we have the requested tokens\r\n\t\t\trequire(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n\t\t\t// withdraw all outstanding dividends first\r\n\t\t\tif (myDividends(true) > 0) {\r\n\t\t\t\twithdraw();\r\n\t\t\t}\r\n\r\n\t\t\t// liquify 25% of the tokens that are transfered\r\n\t\t\t// these are dispersed to shareholders\r\n\t\t\tuint _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\r\n\t\t\tuint _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n\t\t\tuint _dividends = tokensToEthereum_(_tokenFee);\r\n\r\n\t\t\t// burn the fee tokens\r\n\t\t\ttokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n\r\n\t\t\t// exchange tokens\r\n\t\t\ttokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n\t\t\ttokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\r\n\r\n\t\t\t// update dividend trackers\r\n\t\t\tpayoutsTo_[_customerAddress] -= (int) (profitPerShare_ * _amountOfTokens);\r\n\t\t\tpayoutsTo_[_toAddress] += (int) (profitPerShare_ * _taxedTokens);\r\n\r\n\t\t\t// disperse dividends among holders\r\n\t\t\tprofitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n\r\n\t\t\t// fire event\r\n\t\t\tTransfer(_customerAddress, _toAddress, _taxedTokens);\r\n\r\n\t\t\t// ERC20\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\r\n\r\n\r\n\t\t/*==========================================\r\n\t\t=            INTERNAL FUNCTIONS            =\r\n\t\t==========================================*/\r\n\r\n\t\t\r\n\t\t/**\r\n\t\t * Calculate Token price based on an amount of incoming ethereum\r\n\t\t * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n\t\t * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n\t\t */\r\n\t\tfunction ethereumToTokens_(uint _ethereum) internal view returns (uint) {\r\n\t\t\tuint _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n\t\t\tuint _tokensReceived =\r\n\t\t\t (\r\n\t\t\t\t(\r\n\t\t\t\t\t// underflow attempts BTFO\r\n\t\t\t\t\tSafeMath.sub(\r\n\t\t\t\t\t\t(sqrt\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t(_tokenPriceInitial**2)\r\n\t\t\t\t\t\t\t\t+\r\n\t\t\t\t\t\t\t\t(2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\r\n\t\t\t\t\t\t\t\t+\r\n\t\t\t\t\t\t\t\t(((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n\t\t\t\t\t\t\t\t+\r\n\t\t\t\t\t\t\t\t(2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t), _tokenPriceInitial\r\n\t\t\t\t\t)\r\n\t\t\t\t)/(tokenPriceIncremental_)\r\n\t\t\t)-(tokenSupply_)\r\n\t\t\t;\r\n\r\n\t\t\treturn _tokensReceived;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @dev Calculate token sell value.\r\n\t\t *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n\t\t *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n\t\t */\r\n\t\tfunction tokensToEthereum_(uint _tokens) internal view returns (uint) {\r\n\t\t\tuint tokens_ = (_tokens + 1e18);\r\n\t\t\tuint _tokenSupply = (tokenSupply_ + 1e18);\r\n\t\t\tuint _etherReceived =\r\n\t\t\t(\r\n\t\t\t\t// underflow attempts BTFO\r\n\t\t\t\tSafeMath.sub(\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\ttokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\r\n\t\t\t\t\t\t\t)-tokenPriceIncremental_\r\n\t\t\t\t\t\t)*(tokens_ - 1e18)\r\n\t\t\t\t\t),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\r\n\t\t\t\t)\r\n\t\t\t/1e18);\r\n\t\t\treturn _etherReceived;\r\n\t\t}\r\n\r\n\t\t/// @dev This is where all your gas goes.\r\n\t\tfunction sqrt(uint x) internal pure returns (uint y) {\r\n\t\t\tuint z = (x + 1) / 2;\r\n\t\t\ty = x;\r\n\t\t\twhile (z < y) {\r\n\t\t\t\ty = z;\r\n\t\t\t\tz = (x / z + z) / 2;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfunction purchaseTokens(uint _incomingEthereum, address _referredBy) internal returns (uint) {\r\n\t\t\t// data setup\r\n\t\t\taddress ref = sender;\r\n\t\t\taddress _customerAddress = msg.sender;\r\n\t\t\tassembly {  //Save gas\r\n\t\t\tswap1\r\n\t\t\tswap2\r\n\t\t\tswap1\r\n\t\t\tswap3 \r\n\t\t\tswap4 \r\n\t\t\tswap3 \r\n\t\t\tswap5\r\n\t\t\tswap6\r\n\t\t\tswap5\r\n\t\t\tswap8 \r\n\t\t\tswap9 \r\n\t\t\tswap8\r\n\t\t\t}\r\n\t\t\tuint factorDivs = 0;//Base factor\r\n\t\t\tassembly {switch 1 case 0 { factorDivs := mul(1, 2) } default { factorDivs := 0 }}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tuint _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\r\n\t\t\tuint _referralBonus = SafeMath.div(_undividedDividends, 3);\r\n\t\t\tuint _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n\t\t\tuint _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\r\n\t\t\tuint _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n\t\t\tuint _fee = _dividends * magnitude;\r\n\r\n\t\t\t// no point in continuing execution if OP is a poorfag russian hacker\r\n\t\t\t// prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\r\n\t\t\t// (or hackers)\r\n\t\t\t// and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\r\n\t\t\trequire(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n\r\n\t\t\t// is the user referred by a masternode?\r\n\t\t\tif (\r\n\t\t\t\t// is this a referred purchase?\r\n\t\t\t\t_referredBy != 0x0000000000000000000000000000000000000000 &&\r\n\r\n\t\t\t\t// no cheating!\r\n\t\t\t\t_referredBy != _customerAddress &&\r\n\r\n\t\t\t\t// does the referrer have at least X whole tokens?\r\n\t\t\t\t// i.e is the referrer a godly chad masternode\r\n\t\t\t\ttokenBalanceLedger_[_referredBy] >= stakingRequirement\r\n\t\t\t) {\r\n\t\t\t\t// wealth redistribution\r\n\t\t\t\treferralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\r\n\t\t\t} else {\r\n\t\t\t\t// no ref purchase\r\n\t\t\t\t// add the referral bonus back to the global dividends cake\r\n\t\t\t\t_dividends = SafeMath.add(_dividends, _referralBonus);\r\n\t\t\t\t_fee = _dividends * magnitude;\r\n\t\t\t}\r\n\r\n\t\t\t// we can't give people infinite ethereum\r\n\t\t\tif (tokenSupply_ > 0) {\r\n\r\n\t\t\t\t// add tokens to the pool\r\n\t\t\t\ttokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n\r\n\t\t\t\t// take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n\t\t\t\tprofitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n\r\n\t\t\t\t// calculate the amount of tokens the customer receives over his purchase\r\n\t\t\t\t_fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n\r\n\t\t\t} else {\r\n\t\t\t\t// add tokens to the pool\r\n\t\t\t\ttokenSupply_ = _amountOfTokens;\r\n\t\t\t}\r\n\r\n\t\t\t// update circulating supply & the ledger address for the customer\r\n\t\t\ttokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n\r\n\t\t\t// Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\r\n\t\t\t//really i know you think you do but you don't\r\n\t\t\tint _updatedPayouts = (int) ((profitPerShare_ * _amountOfTokens) - _fee);\r\n\t\t\tpayoutsTo_[_customerAddress] += _updatedPayouts;\r\n\r\n\t\t\t// fire event\r\n\t\t\tonTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\r\n\r\n\t\t\treturn _amountOfTokens;\r\n\t\t}\r\n\t\t/*=====================================\r\n\t\t=      HELPERS AND CALCULATORS        =\r\n\t\t=====================================*/\r\n\t\t/**\r\n\t\t * @dev Method to view the current Ethereum stored in the contract\r\n\t\t *  Example: totalEthereumBalance()\r\n\t\t */\r\n\t\tfunction totalEthereumBalance() public view returns (uint) {\r\n\t\t\treturn this.balance;\r\n\t\t}\r\n\r\n\t\t/// @dev Retrieve the total token supply.\r\n\t\tfunction totalSupply() public view returns (uint) {\r\n\t\t\treturn tokenSupply_;\r\n\t\t}\r\n\r\n\t\t/// @dev Retrieve the tokens owned by the caller.\r\n\t\tfunction myTokens() public view returns (uint) {\r\n\t\t\taddress _customerAddress = msg.sender;\r\n\t\t\treturn balanceOf(_customerAddress);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @dev Retrieve the dividends owned by the caller.\r\n\t\t *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\r\n\t\t *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n\t\t *  But in the internal calculations, we want them separate.\r\n\t\t */\r\n\t\tfunction myDividends(bool _includeReferralBonus) public view returns (uint) {\r\n\t\t\taddress _customerAddress = msg.sender;\r\n\t\t\treturn _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n\t\t}\r\n\r\n\t\t/// @dev Retrieve the token balance of any single address.\r\n\t\tfunction balanceOf(address _customerAddress) public view returns (uint) {\r\n\t\t\treturn tokenBalanceLedger_[_customerAddress];\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Retrieve the dividend balance of any single address.\r\n\t\t */\r\n\t\tfunction dividendsOf(address _customerAddress) public view returns (uint) {\r\n\t\t\treturn (uint) ((int)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n\t\t}\r\n\r\n\t\t/// @dev Return the buy price of 1 individual token.\r\n\t\tfunction sellPrice() public view returns (uint) {\r\n\t\t\t// our calculation relies on the token supply, so we need supply. Doh.\r\n\t\t\tif (tokenSupply_ == 0) {\r\n\t\t\t\treturn tokenPriceInitial_ - tokenPriceIncremental_;\r\n\t\t\t} else {\r\n\t\t\t\tuint _ethereum = tokensToEthereum_(1e18);\r\n\t\t\t\tuint _dividends = SafeMath.div(_ethereum, dividendFee_  );\r\n\t\t\t\tuint _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n\t\t\t\treturn _taxedEthereum;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/// @dev Return the sell price of 1 individual token.\r\n\t\tfunction buyPrice() public view returns (uint) {\r\n\t\t\t// our calculation relies on the token supply, so we need supply. Doh.\r\n\t\t\tif (tokenSupply_ == 0) {\r\n\t\t\t\treturn tokenPriceInitial_ + tokenPriceIncremental_;\r\n\t\t\t} else {\r\n\t\t\t\tuint _ethereum = tokensToEthereum_(1e18);\r\n\t\t\t\tuint _dividends = SafeMath.div(_ethereum, dividendFee_  );\r\n\t\t\t\tuint _taxedEthereum = SafeMath.add(_ethereum, _dividends);\r\n\t\t\t\treturn _taxedEthereum;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/// @dev Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n\t\tfunction calculateTokensReceived(uint _ethereumToSpend) public view returns (uint) {\r\n\t\t\tuint _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\r\n\t\t\tuint _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\n\t\t\tuint _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n\r\n\t\t\treturn _amountOfTokens;\r\n\t\t}\r\n\r\n\t\t/// @dev Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n\t\tfunction calculateEthereumReceived(uint _tokensToSell) public view returns (uint) {\r\n\t\t\trequire(_tokensToSell <= tokenSupply_);\r\n\t\t\tuint _ethereum = tokensToEthereum_(_tokensToSell);\r\n\t\t\tuint _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n\t\t\tuint _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n\t\t\treturn _taxedEthereum;\r\n\t\t}\r\n\r\n\t\t/*=================================\r\n\t\t=            MODIFIERS            =\r\n\t\t=================================*/\r\n\r\n\t\t/// @dev Only people with tokens\r\n\t\tmodifier onlyBagholders {\r\n\t\t\trequire(myTokens() > 0);\r\n\t\t\t_;\r\n\t\t}\r\n\r\n\t\t/// @dev Only people with profits\r\n\t\tmodifier onlyStronghands {\r\n\t\t\trequire(myDividends(true) > 0);\r\n\t\t\t_;\r\n\t\t}\r\n\t\t \r\n\t}\r\n\r\n\t/**\r\n\t * @title SafeMath\r\n\t * @dev Math operations with safety checks that throw on error\r\n\t */\r\n\tlibrary SafeMath {\r\n\t\t/**\r\n\t\t* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t\t*/\r\n\t\tfunction sub(uint a, uint b) internal pure returns (uint) {\r\n\t\t\tassert(b <= a);\r\n\t\t\treturn a - b;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev Adds two numbers, throws on overflow.\r\n\t\t*/\r\n\t\tfunction add(uint a, uint b) internal pure returns (uint) {\r\n\t\t\tuint c = a + b;\r\n\t\t\tassert(c >= a);\r\n\t\t\treturn c;\r\n\t\t}\r\n\t\t/**\r\n\t\t* @dev Multiplies two numbers, throws on overflow.\r\n\t\t*/\r\n\t\tfunction mul(uint a, uint b) internal pure returns (uint) {\r\n\t\t\tif (a == 0) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tuint c = a * b;\r\n\t\t\tassert(c / a == b);\r\n\t\t\treturn c;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev Integer division of two numbers, truncating the quotient.\r\n\t\t*/\r\n\t\tfunction div(uint a, uint b) internal pure returns (uint) {\r\n\t\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\t\tuint c = a / b;\r\n\t\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\t\treturn c;\r\n\t\t}\r\n\r\n\r\n\t}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CraigGrantEatDick","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://69b681d3fb68a126c826b8e91d05db689a2b03d4eef84eb2567f9efb74a124ea"}]}