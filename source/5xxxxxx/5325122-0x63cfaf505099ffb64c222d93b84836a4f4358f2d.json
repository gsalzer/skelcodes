{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\taddress public owner;\r\n\r\n\t/**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n\tfunction Ownable() public {\r\n\t\towner = tx.origin;\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     *\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n\tfunction transferOwnership(address _newOwner) onlyOwner public {\r\n\t\trequire(_newOwner != address(0));\r\n\t\towner = _newOwner;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title BasicERC20 token.\r\n * @dev Basic version of ERC20 token with allowances.\r\n */\r\ncontract BasicERC20Token is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens for address.\r\n     *\r\n     * @param _owner Address which owns the tokens.\r\n     * \r\n     * @return A uint256 specifing the amount of tokens still available to the owner.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Function to check the total supply of tokens.\r\n     *\r\n     * @return The uint256 specifing the amount of tokens which are held by the contract.\r\n     */\r\n    function getTotalSupply() public view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * @param _owner Address which owns the funds.\r\n     * @param _spender Address which will spend the funds.\r\n     *\r\n     * @return The uint256 specifing the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Internal function to transfer tokens.\r\n     *\r\n     * @param _from Address of the sender.\r\n     * @param _to Address of the recipient.\r\n     * @param _amount Amount to send.\r\n     *\r\n     * @return True if the operation was successful.\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _amount) internal returns (bool) {\r\n        require (_from != 0x0);                               // Prevent transfer to 0x0 address\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address\r\n        require (balances[_from] >= _amount);          // Check if the sender has enough tokens\r\n        require (balances[_to] + _amount > balances[_to]);  // Check for overflows\r\n\r\n        uint256 length;\r\n        assembly {\r\n            length := extcodesize(_to)\r\n        }\r\n        require (length == 0);\r\n\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        emit Transfer(_from, _to, _amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Function to transfer tokens.\r\n     *\r\n     * @param _to Address of the recipient.\r\n     * @param _amount Amount to send.\r\n     *\r\n     * @return True if the operation was successful.\r\n     */\r\n    function transfer(address _to, uint256 _amount) public returns (bool) {\r\n        _transfer(msg.sender, _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from other address.\r\n     *\r\n     * @param _from Address of the sender.\r\n     * @param _to Address of the recipient.\r\n     * @param _amount Amount to send.\r\n     *\r\n     * @return True if the operation was successful.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\r\n        require (allowed[_from][msg.sender] >= _amount);          // Check if the sender has enough\r\n\r\n        _transfer(_from, _to, _amount);\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * \r\n     * @param _spender Address which will spend the funds.\r\n     * @param _amount Amount of tokens to be spent.\r\n     *\r\n     * @return True if the operation was successful.\r\n     */\r\n    function approve(address _spender, uint256 _amount) public returns (bool) {\r\n        require (_spender != 0x0);                       // Prevent transfer to 0x0 address\r\n        require (_amount >= 0);\r\n        require (balances[msg.sender] >= _amount);       // Check if the msg.sender has enough to allow \r\n\r\n        if (_amount == 0) allowed[msg.sender][_spender] = _amount;\r\n        else allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_amount);\r\n\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title PULS token\r\n * @dev Extends ERC20 token.\r\n */\r\ncontract PULSToken is BasicERC20Token {\r\n\t// Public variables of the token\r\n\tstring public constant name = 'PULS Token';\r\n\tstring public constant symbol = 'PULS';\r\n\tuint256 public constant decimals = 18;\r\n\tuint256 public constant INITIAL_SUPPLY = 88888888000000000000000000;\r\n\r\n\taddress public crowdsaleAddress;\r\n\r\n\t// Public structure to support token reservation.\r\n\tstruct Reserve {\r\n        uint256 pulsAmount;\r\n        uint256 collectedEther;\r\n    }\r\n\r\n\tmapping (address => Reserve) reserved;\r\n\r\n\t// Public structure to record locked tokens for a specific lock.\r\n\tstruct Lock {\r\n\t\tuint256 amount;\r\n\t\tuint256 startTime;\t// in seconds since 01.01.1970\r\n\t\tuint256 timeToLock; // in seconds\r\n\t\tbytes32 pulseLockHash;\r\n\t}\r\n\t\r\n\t// Public list of locked tokens for a specific address.\r\n\tstruct lockList{\r\n\t\tLock[] lockedTokens;\r\n\t}\r\n\t\r\n\t// Public list of lockLists.\r\n\tmapping (address => lockList) addressLocks;\r\n\r\n\t/**\r\n     * @dev Throws if called by any account other than the crowdsale address.\r\n     */\r\n\tmodifier onlyCrowdsaleAddress() {\r\n\t\trequire(msg.sender == crowdsaleAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\tevent TokenReservation(address indexed beneficiary, uint256 sendEther, uint256 indexed pulsAmount, uint256 reserveTypeId);\r\n\tevent RevertingReservation(address indexed addressToRevert);\r\n\tevent TokenLocking(address indexed addressToLock, uint256 indexed amount, uint256 timeToLock);\r\n\tevent TokenUnlocking(address indexed addressToUnlock, uint256 indexed amount);\r\n\r\n\r\n\t/**\r\n     * @dev The PULS token constructor sets the initial supply of tokens to the crowdsale address\r\n     * account.\r\n     */\r\n\tfunction PULSToken() public {\r\n\t\ttotalSupply = INITIAL_SUPPLY;\r\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\r\n\t\t\r\n\t\tcrowdsaleAddress = msg.sender;\r\n\r\n\t\temit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Payable function.\r\n     */\r\n\tfunction () external payable {\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to check reserved amount of tokens for address.\r\n     *\r\n     * @param _owner Address of owner of the tokens.\r\n     *\r\n     * @return The uint256 specifing the amount of tokens which are held in reserve for this address.\r\n     */\r\n\tfunction reserveOf(address _owner) public view returns (uint256) {\r\n\t\treturn reserved[_owner].pulsAmount;\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to check reserved amount of tokens for address.\r\n     *\r\n     * @param _buyer Address of buyer of the tokens.\r\n     *\r\n     * @return The uint256 specifing the amount of tokens which are held in reserve for this address.\r\n     */\r\n\tfunction collectedEtherFrom(address _buyer) public view returns (uint256) {\r\n\t\treturn reserved[_buyer].collectedEther;\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to get number of locks for an address.\r\n     *\r\n     * @param _address Address who owns locked tokens.\r\n     *\r\n     * @return The uint256 length of array.\r\n     */\r\n\tfunction getAddressLockedLength(address _address) public view returns(uint256 length) {\r\n\t    return addressLocks[_address].lockedTokens.length;\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to get locked tokens amount for specific address for specific lock.\r\n     *\r\n     * @param _address Address of owner of locked tokens.\r\n     * @param _index Index of specific lock.\r\n     *\r\n     * @return The uint256 specifing the amount of locked tokens.\r\n     */\r\n\tfunction getLockedStructAmount(address _address, uint256 _index) public view returns(uint256 amount) {\r\n\t    return addressLocks[_address].lockedTokens[_index].amount;\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to get start time of lock for specific address.\r\n     *\r\n     * @param _address Address of owner of locked tokens.\r\n     * @param _index Index of specific lock.\r\n     *\r\n     * @return The uint256 specifing the start time of lock in seconds.\r\n     */\r\n\tfunction getLockedStructStartTime(address _address, uint256 _index) public view returns(uint256 startTime) {\r\n\t    return addressLocks[_address].lockedTokens[_index].startTime;\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to get duration time of lock for specific address.\r\n     *\r\n     * @param _address Address of owner of locked tokens.\r\n     * @param _index Index of specific lock.\r\n     *\r\n     * @return The uint256 specifing the duration time of lock in seconds.\r\n     */\r\n\tfunction getLockedStructTimeToLock(address _address, uint256 _index) public view returns(uint256 timeToLock) {\r\n\t    return addressLocks[_address].lockedTokens[_index].timeToLock;\r\n\t}\r\n\r\n\t\r\n\t/**\r\n     * @dev Function to get pulse hash for specific address for specific lock.\r\n     *\r\n     * @param _address Address of owner of locked tokens.\r\n     * @param _index Index of specific lock.\r\n     *\r\n     * @return The bytes32 specifing the pulse hash.\r\n     */\r\n\tfunction getLockedStructPulseLockHash(address _address, uint256 _index) public view returns(bytes32 pulseLockHash) {\r\n\t    return addressLocks[_address].lockedTokens[_index].pulseLockHash;\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to send tokens after verifing KYC form.\r\n     *\r\n     * @param _beneficiary Address of receiver of tokens.\r\n     *\r\n     * @return True if the operation was successful.\r\n     */\r\n\tfunction sendTokens(address _beneficiary) onlyOwner public returns (bool) {\r\n\t\trequire (reserved[_beneficiary].pulsAmount > 0);\t\t // Check if reserved tokens for _beneficiary address is greater then 0\r\n\r\n\t\t_transfer(crowdsaleAddress, _beneficiary, reserved[_beneficiary].pulsAmount);\r\n\r\n\t\treserved[_beneficiary].pulsAmount = 0;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to reserve tokens for buyer after sending ETH to crowdsale address.\r\n     *\r\n     * @param _beneficiary Address of reserver of tokens.\r\n     * @param _pulsAmount Amount of tokens to reserve.\r\n     * @param _eth Amount of eth sent in transaction.\r\n     *\r\n     * @return True if the operation was successful.\r\n     */\r\n\tfunction reserveTokens(address _beneficiary, uint256 _pulsAmount, uint256 _eth, uint256 _reserveTypeId) onlyCrowdsaleAddress public returns (bool) {\r\n\t\trequire (_beneficiary != 0x0);\t\t\t\t\t// Prevent transfer to 0x0 address\r\n\t\trequire (totalSupply >= _pulsAmount);           // Check if such tokens amount left\r\n\r\n\t\ttotalSupply = totalSupply.sub(_pulsAmount);\r\n\t\treserved[_beneficiary].pulsAmount = reserved[_beneficiary].pulsAmount.add(_pulsAmount);\r\n\t\treserved[_beneficiary].collectedEther = reserved[_beneficiary].collectedEther.add(_eth);\r\n\r\n\t\temit TokenReservation(_beneficiary, _eth, _pulsAmount, _reserveTypeId);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to revert reservation for some address.\r\n     *\r\n     * @param _addressToRevert Address to which collected ETH will be returned.\r\n     *\r\n     * @return True if the operation was successful.\r\n     */\r\n\tfunction revertReservation(address _addressToRevert) onlyOwner public returns (bool) {\r\n\t\trequire (reserved[_addressToRevert].pulsAmount > 0);\t\r\n\r\n\t\ttotalSupply = totalSupply.add(reserved[_addressToRevert].pulsAmount);\r\n\t\treserved[_addressToRevert].pulsAmount = 0;\r\n\r\n\t\t_addressToRevert.transfer(reserved[_addressToRevert].collectedEther - (20000000000 * 21000));\r\n\t\treserved[_addressToRevert].collectedEther = 0;\r\n\r\n\t\temit RevertingReservation(_addressToRevert);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to lock tokens for some period of time.\r\n     *\r\n     * @param _amount Amount of locked tokens.\r\n     * @param _minutesToLock Days tokens will be locked.\r\n     * @param _pulseLockHash Hash of locked pulse.\r\n     *\r\n     * @return True if the operation was successful.\r\n     */\r\n\tfunction lockTokens(uint256 _amount, uint256 _minutesToLock, bytes32 _pulseLockHash) public returns (bool){\r\n\t\trequire(balances[msg.sender] >= _amount);\r\n\r\n\t\tLock memory lockStruct;\r\n        lockStruct.amount = _amount;\r\n        lockStruct.startTime = now;\r\n        lockStruct.timeToLock = _minutesToLock * 1 minutes;\r\n        lockStruct.pulseLockHash = _pulseLockHash;\r\n\r\n        addressLocks[msg.sender].lockedTokens.push(lockStruct);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n\r\n        emit TokenLocking(msg.sender, _amount, _minutesToLock);\r\n        return true;\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to unlock tokens for some period of time.\r\n     *\r\n     * @param _addressToUnlock Addrerss of person with locked tokens.\r\n     *\r\n     * @return True if the operation was successful.\r\n     */\r\n\tfunction unlockTokens(address _addressToUnlock) public returns (bool){\r\n\t\tuint256 i = 0;\r\n\t\twhile(i < addressLocks[_addressToUnlock].lockedTokens.length) {\r\n\t\t\tif (now > addressLocks[_addressToUnlock].lockedTokens[i].startTime + addressLocks[_addressToUnlock].lockedTokens[i].timeToLock) {\r\n\r\n\t\t\t\tbalances[_addressToUnlock] = balances[_addressToUnlock].add(addressLocks[_addressToUnlock].lockedTokens[i].amount);\r\n\t\t\t\temit TokenUnlocking(_addressToUnlock, addressLocks[_addressToUnlock].lockedTokens[i].amount);\r\n\r\n\t\t\t\tif (i < addressLocks[_addressToUnlock].lockedTokens.length) {\r\n\t\t\t\t\tfor (uint256 j = i; j < addressLocks[_addressToUnlock].lockedTokens.length - 1; j++){\r\n\t\t\t            addressLocks[_addressToUnlock].lockedTokens[j] = addressLocks[_addressToUnlock].lockedTokens[j + 1];\r\n\t\t\t        }\r\n\t\t\t\t}\r\n\t\t        delete addressLocks[_addressToUnlock].lockedTokens[addressLocks[_addressToUnlock].lockedTokens.length - 1];\r\n\t\t\t\t\r\n\t\t\t\taddressLocks[_addressToUnlock].lockedTokens.length = addressLocks[_addressToUnlock].lockedTokens.length.sub(1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ti = i.add(1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n        return true;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath.\r\n * @dev Math operations with safety checks that throw on error.\r\n */\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title Staged crowdsale.\r\n * @dev Functionality of staged crowdsale.\r\n */\r\ncontract StagedCrowdsale is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Public structure of crowdsale's stages.\r\n    struct Stage {\r\n        uint256 hardcap;\r\n        uint256 price;\r\n        uint256 minInvestment;\r\n        uint256 invested;\r\n        uint256 closed;\r\n    }\r\n\r\n    Stage[] public stages;\r\n\r\n\r\n    /**\r\n     * @dev Function to get the current stage number.\r\n     * \r\n     * @return A uint256 specifing the current stage number.\r\n     */\r\n    function getCurrentStage() public view returns(uint256) {\r\n        for(uint256 i=0; i < stages.length; i++) {\r\n            if(stages[i].closed == 0) {\r\n                return i;\r\n            }\r\n        }\r\n        revert();\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Function to add the stage to the crowdsale.\r\n     *\r\n     * @param _hardcap The hardcap of the stage.\r\n     * @param _price The amount of tokens you will receive per 1 ETH for this stage.\r\n     */\r\n    function addStage(uint256 _hardcap, uint256 _price, uint256 _minInvestment, uint _invested) onlyOwner public {\r\n        require(_hardcap > 0 && _price > 0);\r\n        Stage memory stage = Stage(_hardcap.mul(1 ether), _price, _minInvestment.mul(1 ether).div(10), _invested.mul(1 ether), 0);\r\n        stages.push(stage);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Function to close the stage manually.\r\n     *\r\n     * @param _stageNumber Stage number to close.\r\n     */\r\n    function closeStage(uint256 _stageNumber) onlyOwner public {\r\n        require(stages[_stageNumber].closed == 0);\r\n        if (_stageNumber != 0) require(stages[_stageNumber - 1].closed != 0);\r\n\r\n        stages[_stageNumber].closed = now;\r\n        stages[_stageNumber].invested = stages[_stageNumber].hardcap;\r\n\r\n        if (_stageNumber + 1 <= stages.length - 1) {\r\n            stages[_stageNumber + 1].invested = stages[_stageNumber].hardcap;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Function to remove all stages.\r\n     *\r\n     * @return True if the operation was successful.\r\n    */\r\n    function removeStages() onlyOwner public returns (bool) {\r\n        require(stages.length > 0);\r\n\r\n        stages.length = 0;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title PULS crowdsale\r\n * @dev PULS crowdsale functionality.\r\n */\r\ncontract PULSCrowdsale is StagedCrowdsale {\r\n\tusing SafeMath for uint256;\r\n\r\n\tPULSToken public token;\r\n\r\n\t// Public variables of the crowdsale\r\n\taddress public multiSigWallet; \t// address where funds are collected\r\n\tbool public hasEnded;\r\n\tbool public isPaused;\t\r\n\r\n\r\n\tevent TokenReservation(address purchaser, address indexed beneficiary, uint256 indexed sendEther, uint256 indexed pulsAmount);\r\n\tevent ForwardingFunds(uint256 indexed value);\r\n\r\n\r\n\t/**\r\n     * @dev Throws if crowdsale has ended.\r\n     */\r\n\tmodifier notEnded() {\r\n\t\trequire(!hasEnded);\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Throws if crowdsale has not ended.\r\n     */\r\n\tmodifier notPaused() {\r\n\t\trequire(!isPaused);\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev The Crowdsale constructor sets the multisig wallet for forwanding funds.\r\n     * Adds stages to the crowdsale. Initialize PULS tokens.\r\n     */\r\n\tfunction PULSCrowdsale() public {\r\n\t\ttoken = createTokenContract();\r\n\r\n\t\tmultiSigWallet = 0x00955149d0f425179000e914F0DFC2eBD96d6f43;\r\n\t\thasEnded = false;\r\n\t\tisPaused = false;\r\n\r\n\t\taddStage(3000, 1600, 1, 0);   //3rd value is actually div 10\r\n\t\taddStage(3500, 1550, 1, 0);   //3rd value is actually div 10\r\n\t\taddStage(4000, 1500, 1, 0);   //3rd value is actually div 10\r\n\t\taddStage(4500, 1450, 1, 0);   //3rd value is actually div 10\r\n\t\taddStage(42500, 1400, 1, 0);  //3rd value is actually div 10\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to create PULS tokens contract.\r\n     *\r\n     * @return PULSToken The instance of PULS token contract.\r\n     */\r\n\tfunction createTokenContract() internal returns (PULSToken) {\r\n\t\treturn new PULSToken();\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Payable function.\r\n     */\r\n\tfunction () external payable {\r\n\t\tbuyTokens(msg.sender);\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to buy tokens - reserve calculated amount of tokens.\r\n     *\r\n     * @param _beneficiary The address of the buyer.\r\n     */\r\n\tfunction buyTokens(address _beneficiary) payable notEnded notPaused public {\r\n\t\trequire(msg.value >= 0);\r\n\t\t\r\n\t\tuint256 stageIndex = getCurrentStage();\r\n\t\tStage storage stageCurrent = stages[stageIndex];\r\n\r\n\t\trequire(msg.value >= stageCurrent.minInvestment);\r\n\r\n\t\tuint256 tokens;\r\n\r\n\t\t// if puts us in new stage - receives with next stage price\r\n\t\tif (stageCurrent.invested.add(msg.value) >= stageCurrent.hardcap){\r\n\t\t\tstageCurrent.closed = now;\r\n\r\n\t\t\tif (stageIndex + 1 <= stages.length - 1) {\r\n\t\t\t\tStage storage stageNext = stages[stageIndex + 1];\r\n\r\n\t\t\t\ttokens = msg.value.mul(stageCurrent.price);\r\n\t\t\t\ttoken.reserveTokens(_beneficiary, tokens, msg.value, 0);\r\n\r\n\t\t\t\tstageNext.invested = stageCurrent.invested.add(msg.value);\r\n\r\n\t\t\t\tstageCurrent.invested = stageCurrent.hardcap;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttokens = msg.value.mul(stageCurrent.price);\r\n\t\t\t\ttoken.reserveTokens(_beneficiary, tokens, msg.value, 0);\r\n\r\n\t\t\t\tstageCurrent.invested = stageCurrent.invested.add(msg.value);\r\n\r\n\t\t\t\thasEnded = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttokens = msg.value.mul(stageCurrent.price);\r\n\t\t\ttoken.reserveTokens(_beneficiary, tokens, msg.value, 0);\r\n\r\n\t\t\tstageCurrent.invested = stageCurrent.invested.add(msg.value);\r\n\t\t}\r\n\r\n\t\temit TokenReservation(msg.sender, _beneficiary, msg.value, tokens);\r\n\t\tforwardFunds();\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to buy tokens - reserve calculated amount of tokens.\r\n     *\r\n     * @param _beneficiary The address of the buyer.\r\n     */\r\n\tfunction privatePresaleTokenReservation(address _beneficiary, uint256 _amount, uint256 _reserveTypeId) onlyOwner public {\r\n\t\trequire (_reserveTypeId > 0);\r\n\t\ttoken.reserveTokens(_beneficiary, _amount, 0, _reserveTypeId);\r\n\t\temit TokenReservation(msg.sender, _beneficiary, 0, _amount);\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Internal function to forward funds to multisig wallet.\r\n     */\r\n\tfunction forwardFunds() internal {\r\n\t\tmultiSigWallet.transfer(msg.value);\r\n\t\temit ForwardingFunds(msg.value);\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to finish the crowdsale.\r\n     *\r\n     * @return True if the operation was successful.\r\n     */ \r\n\tfunction finishCrowdsale() onlyOwner notEnded public returns (bool) {\r\n\t\thasEnded = true;\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to pause the crowdsale.\r\n     *\r\n     * @return True if the operation was successful.\r\n     */ \r\n\tfunction pauseCrowdsale() onlyOwner notEnded notPaused public returns (bool) {\r\n\t\tisPaused = true;\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to unpause the crowdsale.\r\n     *\r\n     * @return True if the operation was successful.\r\n     */ \r\n\tfunction unpauseCrowdsale() onlyOwner notEnded public returns (bool) {\r\n\t\tisPaused = false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n     * @dev Function to change multisgwallet.\r\n     *\r\n     * @return True if the operation was successful.\r\n     */ \r\n\tfunction changeMultiSigWallet(address _newMultiSigWallet) onlyOwner public returns (bool) {\r\n\t\tmultiSigWallet = _newMultiSigWallet;\r\n\t\treturn true;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minutesToLock\",\"type\":\"uint256\"},{\"name\":\"_pulseLockHash\",\"type\":\"bytes32\"}],\"name\":\"lockTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_pulsAmount\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"_reserveTypeId\",\"type\":\"uint256\"}],\"name\":\"reserveTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAddressLockedLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressToRevert\",\"type\":\"address\"}],\"name\":\"revertReservation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"sendTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLockedStructTimeToLock\",\"outputs\":[{\"name\":\"timeToLock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"reserveOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLockedStructAmount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLockedStructStartTime\",\"outputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLockedStructPulseLockHash\",\"outputs\":[{\"name\":\"pulseLockHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressToUnlock\",\"type\":\"address\"}],\"name\":\"unlockTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"collectedEtherFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sendEther\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"pulsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reserveTypeId\",\"type\":\"uint256\"}],\"name\":\"TokenReservation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressToRevert\",\"type\":\"address\"}],\"name\":\"RevertingReservation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressToLock\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeToLock\",\"type\":\"uint256\"}],\"name\":\"TokenLocking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressToUnlock\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenUnlocking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PULSToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4a5e648c1db77a387502fb42674eaac2ca3e56192346844ad40120e9f9cf839c"}]}