{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ERC721/ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic {\r\n  // bytes4(keccak256('balanceOf(address)')) ^\r\n  // bytes4(keccak256('ownerOf(uint256)')) ^\r\n  // bytes4(keccak256('approve(address,uint256)')) ^\r\n  // bytes4(keccak256('getApproved(uint256)')) ^\r\n  // bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n  // bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n  // bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n  // bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n  // bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'));\r\n  bytes4 constant INTERFACE_ERC721 = 0x80ac58cd;\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool indexed _approved);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n\r\n  // Note: This is not in the official ERC-721 standard so it's not included in the interface hash\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId) public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId) public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data) public;\r\n}\r\n\r\n// File: contracts/ERC721/ERC721.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  // bytes4(keccak256('totalSupply()')) ^\r\n  // bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n  // bytes4(keccak256('tokenByIndex(uint256)'));\r\n  bytes4 constant INTERFACE_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  // bytes4(keccak256('name()')) ^\r\n  // bytes4(keccak256('symbol()')) ^\r\n  // bytes4(keccak256('tokenURI(uint256)'));\r\n  bytes4 constant INTERFACE_ERC721_METADATA = 0x5b5e139f;\r\n\r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\n/* solium-disable-next-line no-empty-blocks */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: contracts/ERC165/ERC165.sol\r\n\r\n/**\r\n * @dev A standard for detecting smart contract interfaces.\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ncontract ERC165 {\r\n\r\n  // bytes4(keccak256('supportsInterface(bytes4)'));\r\n  bytes4 constant INTERFACE_ERC165 = 0x01ffc9a7;\r\n\r\n  /**\r\n   * @dev Checks if the smart contract includes a specific interface.\r\n   * @param _interfaceID The interface identifier, as specified in ERC-165.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\r\n    return _interfaceID == INTERFACE_ERC165;\r\n  }\r\n}\r\n\r\n// File: contracts/library/AddressUtils.sol\r\n\r\n/**\r\n * @title Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * @notice Returns whether there is code in the target address\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address address to check\r\n   * @return whether there is code in the target address\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n\r\n    return size > 0;\r\n  }\r\n}\r\n\r\n// File: contracts/library/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/ERC721/ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\r\n   *  transfer. Returns other than the magic value MUST result in the\r\n   *  transaction being reverted.\r\n   *  Note: the contract address is always the message sender.\r\n   * @param _from The sending address\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data)\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n// File: contracts/ERC721/ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is ERC721Basic, ERC165 {\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n   * @dev Guarantees msg.sender is owner of the given token\r\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n   */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if the smart contract includes a specific interface.\r\n   * @param _interfaceID The interface identifier, as specified in ERC-165.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\r\n    return super.supportsInterface(_interfaceID) || _interfaceID == INTERFACE_ERC721;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existance of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * @dev The zero address indicates there is no approved address.\r\n   * @dev There can only be one approved address per token at a given time.\r\n   * @dev Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      emit Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for a the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    internalTransferFrom(\r\n      _from,\r\n      _to,\r\n      _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n   *  which is called upon a safe transfer, and return the magic value\r\n   *  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   *  the transfer is reverted.\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    internalSafeTransferFrom(\r\n      _from,\r\n      _to,\r\n      _tokenId,\r\n      \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n   *  which is called upon a safe transfer, and return the magic value\r\n   *  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   *  the transfer is reverted.\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    internalSafeTransferFrom(\r\n      _from,\r\n      _to,\r\n      _tokenId,\r\n      _data);\r\n  }\r\n\r\n  function internalTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_from == owner);\r\n    require(_to != address(0));\r\n\r\n    address sender = msg.sender;\r\n\r\n    require(\r\n      sender == owner || isApprovedForAll(owner, sender) || getApproved(_tokenId) == sender,\r\n      \"Not authorized to transfer\"\r\n    );\r\n\r\n    // Resetting the approved address if it's set\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  function internalSafeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n  {\r\n    internalTransferFrom(_from, _to, _tokenId);\r\n\r\n    require(\r\n      checkAndCallSafeTransfer(\r\n        _from,\r\n        _to,\r\n        _tokenId,\r\n        _data)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * @dev The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n\r\n    bytes4 retval = ERC721Receiver(_to)\r\n      .onERC721Received(\r\n        msg.sender,\r\n        _from,\r\n        _tokenId,\r\n        _data\r\n      );\r\n\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: contracts/ERC721/ERC721Token.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is ERC721, ERC721BasicToken {\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n  * @dev Constructor function\r\n  */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n  }\r\n\r\n  /**\r\n    * @dev Checks if the smart contract includes a specific interface.\r\n    * @param _interfaceID The interface identifier, as specified in ERC-165.\r\n    */\r\n  function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\r\n    return super.supportsInterface(_interfaceID) || _interfaceID == INTERFACE_ERC721_ENUMERABLE || _interfaceID == INTERFACE_ERC721_METADATA;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() public view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() public view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * @dev Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * @dev Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  function internalTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    super.internalTransferFrom(_from, _to, _tokenId);\r\n\r\n    uint256 removeTokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][removeTokenIndex] = lastToken;\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[lastToken] = removeTokenIndex;\r\n\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = ownedTokens[_to].length - 1;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * @dev Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n}\r\n\r\n// File: contracts/CodexRecordMetadata.sol\r\n\r\n/**\r\n * @title CodexRecordMetadata\r\n * @dev Storage, mutators, and modifiers for CodexRecord metadata.\r\n */\r\ncontract CodexRecordMetadata is ERC721Token {\r\n  struct CodexRecordData {\r\n    bytes32 nameHash;\r\n    bytes32 descriptionHash;\r\n    bytes32[] fileHashes;\r\n  }\r\n\r\n  event Modified(\r\n    address indexed _from,\r\n    uint256 _tokenId,\r\n    bytes32 _newNameHash,\r\n    bytes32 _newDescriptionHash,\r\n    bytes32[] _newFileHashes,\r\n    bytes _data\r\n  );\r\n\r\n  // Mapping from token ID to token data\r\n  mapping(uint256 => CodexRecordData) internal tokenData;\r\n\r\n  // Global tokenURIPrefix prefix. The token ID will be appended to the uri when accessed\r\n  //  via the tokenURI method\r\n  string public tokenURIPrefix;\r\n\r\n  /**\r\n   * @dev Updates token metadata hashes to whatever is passed in\r\n   * @param _tokenId uint256 The token ID\r\n   * @param _newNameHash bytes32 The new sha3 hash of the name\r\n   * @param _newDescriptionHash bytes32 The new sha3 hash of the description\r\n   * @param _newFileHashes bytes32[] The new sha3 hashes of the files associated with the token\r\n   * @param _data (optional) bytes Additional data that will be emitted with the Modified event\r\n   */\r\n  function modifyMetadataHashes(\r\n    uint256 _tokenId,\r\n    bytes32 _newNameHash,\r\n    bytes32 _newDescriptionHash,\r\n    bytes32[] _newFileHashes,\r\n    bytes _data\r\n  )\r\n    public\r\n    onlyOwnerOf(_tokenId)\r\n  {\r\n    // nameHash is only overridden if it's not a blank string, since name is a\r\n    //  required value. Emptiness is determined if the first element is the null-byte\r\n    if (!bytes32IsEmpty(_newNameHash)) {\r\n      tokenData[_tokenId].nameHash = _newNameHash;\r\n    }\r\n\r\n    // descriptionHash can always be overridden since it's an optional value\r\n    //  (e.g. you can \"remove\" a description by setting it to a blank string)\r\n    tokenData[_tokenId].descriptionHash = _newDescriptionHash;\r\n\r\n    // fileHashes is only overridden if it has one or more value, since at\r\n    //  least one file (i.e. mainImage) is required\r\n    bool containsNullHash = false;\r\n    for (uint i = 0; i < _newFileHashes.length; i++) {\r\n      if (bytes32IsEmpty(_newFileHashes[i])) {\r\n        containsNullHash = true;\r\n        break;\r\n      }\r\n    }\r\n    if (_newFileHashes.length > 0 && !containsNullHash) {\r\n      tokenData[_tokenId].fileHashes = _newFileHashes;\r\n    }\r\n\r\n    emit Modified(\r\n      msg.sender,\r\n      _tokenId,\r\n      tokenData[_tokenId].nameHash,\r\n      tokenData[_tokenId].descriptionHash,\r\n      tokenData[_tokenId].fileHashes,\r\n      _data\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token given a token ID.\r\n   * @param _tokenId token ID\r\n   * @return CodexRecordData token data for the given token ID\r\n   */\r\n  function getTokenById(\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    view\r\n    returns (bytes32 nameHash, bytes32 descriptionHash, bytes32[] fileHashes)\r\n  {\r\n    return (\r\n      tokenData[_tokenId].nameHash,\r\n      tokenData[_tokenId].descriptionHash,\r\n      tokenData[_tokenId].fileHashes\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * @dev Throws if the token ID does not exist.\r\n   *\r\n   * @dev To save on gas, we will host a standard metadata endpoint for each token.\r\n   *  For Collector privacy, specific token metadata is stored off chain, which means\r\n   *  the metadata returned by this endpoint cannot include specific details about\r\n   *  the physical asset the token represents unless the Collector has made it public.\r\n   *\r\n   * @dev This metadata will be a JSON blob that includes:\r\n   *  name - Codex Record\r\n   *  description - Information about the Provider that is hosting the off-chain metadata\r\n   *  imageUri - A generic Codex Record image\r\n   *\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    view\r\n    returns (string)\r\n  {\r\n    bytes memory prefix = bytes(tokenURIPrefix);\r\n    if (prefix.length == 0) {\r\n      return \"\";\r\n    }\r\n\r\n    // Rather than store a string representation of _tokenId, we just convert it on the fly\r\n    // since this is just a 'view' function (i.e., there's no gas cost if called off chain)\r\n    bytes memory tokenId = uint2bytes(_tokenId);\r\n    bytes memory output = new bytes(prefix.length + tokenId.length);\r\n\r\n    // Index counters\r\n    uint256 i;\r\n    uint256 outputIndex = 0;\r\n\r\n    // Copy over the prefix into the new bytes array\r\n    for (i = 0; i < prefix.length; i++) {\r\n      output[outputIndex++] = prefix[i];\r\n    }\r\n\r\n    // Copy over the tokenId into the new bytes array\r\n    for (i = 0; i < tokenId.length; i++) {\r\n      output[outputIndex++] = tokenId[i];\r\n    }\r\n\r\n    return string(output);\r\n  }\r\n\r\n  /**\r\n   * @dev Based on MIT licensed code @ https://github.com/oraclize/ethereum-api\r\n   * @dev Converts an incoming uint256 to a dynamic byte array\r\n   */\r\n  function uint2bytes(uint256 i) internal pure returns (bytes) {\r\n    if (i == 0) {\r\n      return \"0\";\r\n    }\r\n\r\n    uint256 j = i;\r\n    uint256 length;\r\n    while (j != 0) {\r\n      length++;\r\n      j /= 10;\r\n    }\r\n\r\n    bytes memory bstr = new bytes(length);\r\n    uint256 k = length - 1;\r\n    j = i;\r\n    while (j != 0) {\r\n      bstr[k--] = byte(48 + j % 10);\r\n      j /= 10;\r\n    }\r\n\r\n    return bstr;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether or not a bytes32 array is empty (all null-bytes)\r\n   * @param _data bytes32 The array to check\r\n   * @return bool Whether or not the array is empty\r\n   */\r\n  function bytes32IsEmpty(bytes32 _data) internal pure returns (bool) {\r\n    for (uint256 i = 0; i < 32; i++) {\r\n      if (_data[i] != 0x0) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/ERC900/ERC900.sol\r\n\r\n/**\r\n * @title ERC900 Simple Staking Interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\r\n */\r\ncontract ERC900 {\r\n  event Staked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n  event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n\r\n  function stake(uint256 amount, bytes data) public;\r\n  function stakeFor(address user, uint256 amount, bytes data) public;\r\n  function unstake(uint256 amount, bytes data) public;\r\n  function totalStakedFor(address addr) public view returns (uint256);\r\n  function totalStaked() public view returns (uint256);\r\n  function token() public view returns (address);\r\n  function supportsHistory() public pure returns (bool);\r\n\r\n  // NOTE: Not implementing the optional functions\r\n  // function lastStakedFor(address addr) public view returns (uint256);\r\n  // function totalStakedForAt(address addr, uint256 blockNumber) public view returns (uint256);\r\n  // function totalStakedAt(uint256 blockNumber) public view returns (uint256);\r\n}\r\n\r\n// File: contracts/CodexStakeContractInterface.sol\r\n\r\ncontract CodexStakeContractInterface is ERC900 {\r\n\r\n  function stakeForDuration(\r\n    address user,\r\n    uint256 amount,\r\n    uint256 lockInDuration,\r\n    bytes data)\r\n    public;\r\n\r\n  function spendCredits(\r\n    address user,\r\n    uint256 amount)\r\n    public;\r\n\r\n  function creditBalanceOf(\r\n    address user)\r\n    public\r\n    view\r\n    returns (uint256);\r\n}\r\n\r\n// File: contracts/library/DelayedOwnable.sol\r\n\r\n/**\r\n * @title DelayedOwnable\r\n * @dev The DelayedOwnable contract has an owner address, and provides basic authorization control\r\n *  functions, this simplifies the implementation of \"user permissions\".\r\n * @dev This is different than the original Ownable contract because intializeOwnable\r\n *  must be specifically called after creation to create an owner.\r\n */\r\ncontract DelayedOwnable {\r\n  address public owner;\r\n  bool public isInitialized = false;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function initializeOwnable(address _owner) external {\r\n    require(\r\n      !isInitialized,\r\n      \"The owner has already been set\");\r\n\r\n    isInitialized = true;\r\n    owner = _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/library/DelayedPausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract DelayedPausable is DelayedOwnable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/CodexRecordFees.sol\r\n\r\n/**\r\n * @title CodexRecordFees\r\n * @dev Storage, mutators, and modifiers for fees when using the token.\r\n *  This also includes the DelayedPausable contract for the onlyOwner modifier.\r\n */\r\ncontract CodexRecordFees is CodexRecordMetadata, DelayedPausable {\r\n\r\n  // Implementation of the ERC20 Codex Protocol Token, used for fees in the contract\r\n  ERC20 public codexCoin;\r\n\r\n  // Implementation of the ERC900 Codex Protocol Stake Container,\r\n  //  used to calculate discounts on fees\r\n  CodexStakeContractInterface public codexStakeContract;\r\n\r\n  // Address where all contract fees are sent, i.e., the Community Fund\r\n  address public feeRecipient;\r\n\r\n  // Fee to create new tokens. 10^18 = 1 token\r\n  uint256 public creationFee = 0;\r\n\r\n  // Fee to transfer tokens. 10^18 = 1 token\r\n  uint256 public transferFee = 0;\r\n\r\n  // Fee to modify tokens. 10^18 = 1 token\r\n  uint256 public modificationFee = 0;\r\n\r\n  modifier canPayFees(uint256 _baseFee) {\r\n    if (feeRecipient != address(0) && _baseFee > 0) {\r\n      bool feePaid = false;\r\n\r\n      if (codexStakeContract != address(0)) {\r\n        uint256 discountCredits = codexStakeContract.creditBalanceOf(msg.sender);\r\n\r\n        // Regardless of what the baseFee is, all transactions can be paid by using exactly one credit\r\n        if (discountCredits > 0) {\r\n          codexStakeContract.spendCredits(msg.sender, 1);\r\n          feePaid = true;\r\n        }\r\n      }\r\n\r\n      if (!feePaid) {\r\n        require(\r\n          codexCoin.transferFrom(msg.sender, feeRecipient, _baseFee),\r\n          \"Insufficient funds\");\r\n      }\r\n    }\r\n\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the ERC20 token used for fees in the contract.\r\n   *  Fees are in the smallest denomination, e.g., 10^18 is 1 token.\r\n   * @param _codexCoin ERC20 The address of the ERC20 Codex Protocol Token\r\n   * @param _feeRecipient address The address where the fees are sent\r\n   * @param _creationFee uint256 The new creation fee.\r\n   * @param _transferFee uint256 The new transfer fee.\r\n   * @param _modificationFee uint256 The new modification fee.\r\n   */\r\n  function setFees(\r\n    ERC20 _codexCoin,\r\n    address _feeRecipient,\r\n    uint256 _creationFee,\r\n    uint256 _transferFee,\r\n    uint256 _modificationFee\r\n  )\r\n    external\r\n    onlyOwner\r\n  {\r\n    codexCoin = _codexCoin;\r\n    feeRecipient = _feeRecipient;\r\n    creationFee = _creationFee;\r\n    transferFee = _transferFee;\r\n    modificationFee = _modificationFee;\r\n  }\r\n\r\n  function setStakeContract(CodexStakeContractInterface _codexStakeContract) external onlyOwner {\r\n    codexStakeContract = _codexStakeContract;\r\n  }\r\n}\r\n\r\n// File: contracts/CodexRecordCore.sol\r\n\r\n/**\r\n * @title CodexRecordCore\r\n * @dev Core functionality of the token, namely minting.\r\n */\r\ncontract CodexRecordCore is CodexRecordFees {\r\n\r\n  /**\r\n   * @dev This event is emitted when a new token is minted and allows providers\r\n   *  to discern which Minted events came from transactions they submitted vs\r\n   *  transactions submitted by other platforms, as well as providing information\r\n   *  about what metadata record the newly minted token should be associated with.\r\n   */\r\n  event Minted(uint256 _tokenId, bytes _data);\r\n\r\n  /**\r\n   * @dev Sets the global tokenURIPrefix for use when returning token metadata.\r\n   *  Only callable by the owner.\r\n   * @param _tokenURIPrefix string The new tokenURIPrefix\r\n   */\r\n  function setTokenURIPrefix(string _tokenURIPrefix) external onlyOwner {\r\n    tokenURIPrefix = _tokenURIPrefix;\r\n  }\r\n\r\n  /**\r\n   * @dev Creates a new token\r\n   * @param _to address The address the token will get transferred to after minting\r\n   * @param _nameHash bytes32 The sha3 hash of the name\r\n   * @param _descriptionHash bytes32 The sha3 hash of the description\r\n   * @param _data (optional) bytes Additional data that will be emitted with the Minted event\r\n   */\r\n  function mint(\r\n    address _to,\r\n    bytes32 _nameHash,\r\n    bytes32 _descriptionHash,\r\n    bytes32[] _fileHashes,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    // All new tokens will be the last entry in the array\r\n    uint256 newTokenId = allTokens.length;\r\n    internalMint(_to, newTokenId);\r\n\r\n    // Add metadata to the newly created token\r\n    tokenData[newTokenId] = CodexRecordData({\r\n      nameHash: _nameHash,\r\n      descriptionHash: _descriptionHash,\r\n      fileHashes: _fileHashes\r\n    });\r\n\r\n    emit Minted(newTokenId, _data);\r\n  }\r\n\r\n  function internalMint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n\r\n    ownedTokensIndex[_tokenId] = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n\r\n    allTokens.push(_tokenId);\r\n\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n}\r\n\r\n// File: contracts/CodexRecordAccess.sol\r\n\r\n/**\r\n * @title CodexRecordAccess\r\n * @dev Override contract functions\r\n */\r\ncontract CodexRecordAccess is CodexRecordCore {\r\n\r\n  /**\r\n   * @dev Make mint() pausable\r\n   */\r\n  function mint(\r\n    address _to,\r\n    bytes32 _nameHash,\r\n    bytes32 _descriptionHash,\r\n    bytes32[] _fileHashes,\r\n    bytes _data\r\n  )\r\n    public\r\n    whenNotPaused\r\n    canPayFees(creationFee)\r\n  {\r\n    return super.mint(\r\n      _to,\r\n      _nameHash,\r\n      _descriptionHash,\r\n      _fileHashes,\r\n      _data);\r\n  }\r\n\r\n  /**\r\n   * @dev Make trasferFrom() pausable\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    whenNotPaused\r\n    canPayFees(transferFee)\r\n  {\r\n    return super.transferFrom(\r\n      _from,\r\n      _to,\r\n      _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Make safeTrasferFrom() pausable\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    whenNotPaused\r\n    canPayFees(transferFee)\r\n  {\r\n    return super.safeTransferFrom(\r\n      _from,\r\n      _to,\r\n      _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Make safeTrasferFrom() pausable\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    whenNotPaused\r\n    canPayFees(transferFee)\r\n  {\r\n    return super.safeTransferFrom(\r\n      _from,\r\n      _to,\r\n      _tokenId,\r\n      _data\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Make modifyMetadataHashes() pausable\r\n   */\r\n  function modifyMetadataHashes(\r\n    uint256 _tokenId,\r\n    bytes32 _newNameHash,\r\n    bytes32 _newDescriptionHash,\r\n    bytes32[] _newFileHashes,\r\n    bytes _data\r\n  )\r\n    public\r\n    whenNotPaused\r\n    canPayFees(modificationFee)\r\n  {\r\n    return super.modifyMetadataHashes(\r\n      _tokenId,\r\n      _newNameHash,\r\n      _newDescriptionHash,\r\n      _newFileHashes,\r\n      _data);\r\n  }\r\n}\r\n\r\n// File: contracts/CodexRecord.sol\r\n\r\n/**\r\n * @title CodexRecord, an ERC721 token for arts & collectables\r\n * @dev Developers should never interact with this smart contract directly!\r\n *  All transactions/calls should be made through CodexRecordProxy. Storage will be maintained\r\n *  in that smart contract so that the governing body has the ability\r\n *  to upgrade the contract in the future in the event of an emergency or new functionality.\r\n */\r\ncontract CodexRecord is CodexRecordAccess {\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor() public ERC721Token(\"Codex Record\", \"CR\") { }\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.transfer(owner, balance);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"modificationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_newNameHash\",\"type\":\"bytes32\"},{\"name\":\"_newDescriptionHash\",\"type\":\"bytes32\"},{\"name\":\"_newFileHashes\",\"type\":\"bytes32[]\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"modifyMetadataHashes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_codexStakeContract\",\"type\":\"address\"}],\"name\":\"setStakeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenById\",\"outputs\":[{\"name\":\"nameHash\",\"type\":\"bytes32\"},{\"name\":\"descriptionHash\",\"type\":\"bytes32\"},{\"name\":\"fileHashes\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_codexCoin\",\"type\":\"address\"},{\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"name\":\"_creationFee\",\"type\":\"uint256\"},{\"name\":\"_transferFee\",\"type\":\"uint256\"},{\"name\":\"_modificationFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"codexCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"codexStakeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenURIPrefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenURIPrefix\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initializeOwnable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_nameHash\",\"type\":\"bytes32\"},{\"name\":\"_descriptionHash\",\"type\":\"bytes32\"},{\"name\":\"_fileHashes\",\"type\":\"bytes32[]\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newNameHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newDescriptionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newFileHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Modified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"CodexRecord","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://01b0d4b71d848d2e6846ce38fbb355182d2a3a506d2d365f293d82044bea8be3"}]}