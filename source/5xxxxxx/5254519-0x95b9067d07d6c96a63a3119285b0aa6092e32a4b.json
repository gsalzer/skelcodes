{"status":"1","message":"OK","result":[{"SourceCode":"//File: contracts/acl/IACL.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\ninterface IACL {\r\n    function initialize(address permissionsCreator) public;\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n}\r\n\r\n//File: contracts/kernel/IKernel.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\ninterface IKernel {\r\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\r\n\r\n    function acl() public view returns (IACL);\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n\r\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\r\n    function getApp(bytes32 id) public view returns (address);\r\n}\r\n//File: contracts/apps/AppStorage.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\ncontract AppStorage {\r\n    IKernel public kernel;\r\n    bytes32 public appId;\r\n    address internal pinnedCode; // used by Proxy Pinned\r\n    uint256 internal initializationBlock; // used by Initializable\r\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\r\n    uint256 private offset;\r\n}\r\n\r\n//File: contracts/common/Initializable.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\ncontract Initializable is AppStorage {\r\n    modifier onlyInit {\r\n        require(initializationBlock == 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @return Block number in which the contract was initialized\r\n    */\r\n    function getInitializationBlock() public view returns (uint256) {\r\n        return initializationBlock;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization has finished.\r\n    */\r\n    function initialized() internal onlyInit {\r\n        initializationBlock = getBlockNumber();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current block number.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber() internal view returns (uint256) {\r\n        return block.number;\r\n    }\r\n}\r\n\r\n//File: contracts/evmscript/IEVMScriptExecutor.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\ninterface IEVMScriptExecutor {\r\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\r\n}\r\n\r\n//File: contracts/evmscript/IEVMScriptRegistry.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\ncontract EVMScriptRegistryConstants {\r\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = keccak256(\"evmreg.aragonpm.eth\");\r\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = keccak256(keccak256(\"app\"), EVMSCRIPT_REGISTRY_APP_ID);\r\n}\r\n\r\n\r\ninterface IEVMScriptRegistry {\r\n    function addScriptExecutor(address executor) external returns (uint id);\r\n    function disableScriptExecutor(uint256 executorId) external;\r\n\r\n    function getScriptExecutor(bytes script) public view returns (address);\r\n}\r\n//File: contracts/evmscript/ScriptHelpers.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\nlibrary ScriptHelpers {\r\n    // To test with JS and compare with actual encoder. Maintaining for reference.\r\n    // t = function() { return IEVMScriptExecutor.at('0x4bcdd59d6c77774ee7317fc1095f69ec84421e49').contract.execScript.getData(...[].slice.call(arguments)).slice(10).match(/.{1,64}/g) }\r\n    // run = function() { return ScriptHelpers.new().then(sh => { sh.abiEncode.call(...[].slice.call(arguments)).then(a => console.log(a.slice(2).match(/.{1,64}/g)) ) }) }\r\n    // This is truly not beautiful but lets no daydream to the day solidity gets reflection features\r\n\r\n    function abiEncode(bytes _a, bytes _b, address[] _c) public pure returns (bytes d) {\r\n        return encode(_a, _b, _c);\r\n    }\r\n\r\n    function encode(bytes memory _a, bytes memory _b, address[] memory _c) internal pure returns (bytes memory d) {\r\n        // A is positioned after the 3 position words\r\n        uint256 aPosition = 0x60;\r\n        uint256 bPosition = aPosition + 32 * abiLength(_a);\r\n        uint256 cPosition = bPosition + 32 * abiLength(_b);\r\n        uint256 length = cPosition + 32 * abiLength(_c);\r\n\r\n        d = new bytes(length);\r\n        assembly {\r\n            // Store positions\r\n            mstore(add(d, 0x20), aPosition)\r\n            mstore(add(d, 0x40), bPosition)\r\n            mstore(add(d, 0x60), cPosition)\r\n        }\r\n\r\n        // Copy memory to correct position\r\n        copy(d, getPtr(_a), aPosition, _a.length);\r\n        copy(d, getPtr(_b), bPosition, _b.length);\r\n        copy(d, getPtr(_c), cPosition, _c.length * 32); // 1 word per address\r\n    }\r\n\r\n    function abiLength(bytes memory _a) internal pure returns (uint256) {\r\n        // 1 for length +\r\n        // memory words + 1 if not divisible for 32 to offset word\r\n        return 1 + (_a.length / 32) + (_a.length % 32 > 0 ? 1 : 0);\r\n    }\r\n\r\n    function abiLength(address[] _a) internal pure returns (uint256) {\r\n        // 1 for length + 1 per item\r\n        return 1 + _a.length;\r\n    }\r\n\r\n    function copy(bytes _d, uint256 _src, uint256 _pos, uint256 _length) internal pure {\r\n        uint dest;\r\n        assembly {\r\n            dest := add(add(_d, 0x20), _pos)\r\n        }\r\n        memcpy(dest, _src, _length + 32);\r\n    }\r\n\r\n    function getPtr(bytes memory _x) internal pure returns (uint256 ptr) {\r\n        assembly {\r\n            ptr := _x\r\n        }\r\n    }\r\n\r\n    function getPtr(address[] memory _x) internal pure returns (uint256 ptr) {\r\n        assembly {\r\n            ptr := _x\r\n        }\r\n    }\r\n\r\n    function getSpecId(bytes _script) internal pure returns (uint32) {\r\n        return uint32At(_script, 0);\r\n    }\r\n\r\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\r\n        assembly {\r\n            result := mload(add(_data, add(0x20, _location)))\r\n        }\r\n    }\r\n\r\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\r\n        uint256 word = uint256At(_data, _location);\r\n\r\n        assembly {\r\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\r\n            0x1000000000000000000000000)\r\n        }\r\n    }\r\n\r\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\r\n        uint256 word = uint256At(_data, _location);\r\n\r\n        assembly {\r\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\r\n            0x100000000000000000000000000000000000000000000000000000000)\r\n        }\r\n    }\r\n\r\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\r\n        assembly {\r\n            result := add(_data, add(0x20, _location))\r\n        }\r\n    }\r\n\r\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\r\n        bytes memory payload = new bytes(4);\r\n        payload[0] = bytes1(_sig);\r\n        payload[1] = bytes1(_sig << 8);\r\n        payload[2] = bytes1(_sig << 16);\r\n        payload[3] = bytes1(_sig << 24);\r\n        return payload;\r\n    }\r\n\r\n    function memcpy(uint _dest, uint _src, uint _len) public pure {\r\n        uint256 src = _src;\r\n        uint256 dest = _dest;\r\n        uint256 len = _len;\r\n\r\n        // Copy word-length chunks while possible\r\n        for (; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n}\r\n//File: contracts/evmscript/EVMScriptRunner.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EVMScriptRunner is AppStorage, EVMScriptRegistryConstants {\r\n    using ScriptHelpers for bytes;\r\n\r\n    function runScript(bytes _script, bytes _input, address[] _blacklist) protectState internal returns (bytes output) {\r\n        // TODO: Too much data flying around, maybe extracting spec id here is cheaper\r\n        address executorAddr = getExecutor(_script);\r\n        require(executorAddr != address(0));\r\n\r\n        bytes memory calldataArgs = _script.encode(_input, _blacklist);\r\n        bytes4 sig = IEVMScriptExecutor(0).execScript.selector;\r\n\r\n        require(executorAddr.delegatecall(sig, calldataArgs));\r\n\r\n        return returnedDataDecoded();\r\n    }\r\n\r\n    function getExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\r\n        return IEVMScriptExecutor(getExecutorRegistry().getScriptExecutor(_script));\r\n    }\r\n\r\n    // TODO: Internal\r\n    function getExecutorRegistry() internal view returns (IEVMScriptRegistry) {\r\n        address registryAddr = kernel.getApp(EVMSCRIPT_REGISTRY_APP);\r\n        return IEVMScriptRegistry(registryAddr);\r\n    }\r\n\r\n    /**\r\n    * @dev copies and returns last's call data. Needs to ABI decode first\r\n    */\r\n    function returnedDataDecoded() internal view returns (bytes ret) {\r\n        assembly {\r\n            let size := returndatasize\r\n            switch size\r\n            case 0 {}\r\n            default {\r\n                ret := mload(0x40) // free mem ptr get\r\n                mstore(0x40, add(ret, add(size, 0x20))) // free mem ptr set\r\n                returndatacopy(ret, 0x20, sub(size, 0x20)) // copy return data\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    modifier protectState {\r\n        address preKernel = kernel;\r\n        bytes32 preAppId = appId;\r\n        _; // exec\r\n        require(kernel == preKernel);\r\n        require(appId == preAppId);\r\n    }\r\n}\r\n//File: contracts/acl/ACLSyntaxSugar.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\ncontract ACLSyntaxSugar {\r\n    function arr() internal pure returns (uint256[] r) {}\r\n\r\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\r\n    }\r\n\r\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\r\n        r = new uint256[](1);\r\n        r[0] = _a;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        r = new uint256[](2);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        r = new uint256[](3);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        r = new uint256[](4);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        r = new uint256[](5);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n        r[4] = _e;\r\n    }\r\n}\r\n\r\n\r\ncontract ACLHelpers {\r\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 30));\r\n    }\r\n\r\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 31));\r\n    }\r\n\r\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\r\n        a = uint32(_x);\r\n        b = uint32(_x >> (8 * 4));\r\n        c = uint32(_x >> (8 * 8));\r\n    }\r\n}\r\n\r\n//File: contracts/apps/AragonApp.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AragonApp is AppStorage, Initializable, ACLSyntaxSugar, EVMScriptRunner {\r\n    modifier auth(bytes32 _role) {\r\n        require(canPerform(msg.sender, _role, new uint256[](0)));\r\n        _;\r\n    }\r\n\r\n    modifier authP(bytes32 _role, uint256[] params) {\r\n        require(canPerform(msg.sender, _role, params));\r\n        _;\r\n    }\r\n\r\n    function canPerform(address _sender, bytes32 _role, uint256[] params) public view returns (bool) {\r\n        bytes memory how; // no need to init memory as it is never used\r\n        if (params.length > 0) {\r\n            uint256 byteLength = params.length * 32;\r\n            assembly {\r\n                how := params // forced casting\r\n                mstore(how, byteLength)\r\n            }\r\n        }\r\n        return address(kernel) == 0 || kernel.hasPermission(_sender, address(this), _role, how);\r\n    }\r\n}\r\n\r\n//File: contracts/apm/Repo.sol\r\npragma solidity ^0.4.15;\r\n\r\n\r\n\r\n\r\ncontract Repo is AragonApp {\r\n    struct Version {\r\n        uint16[3] semanticVersion;\r\n        address contractAddress;\r\n        bytes contentURI;\r\n    }\r\n\r\n    Version[] versions;\r\n    mapping (bytes32 => uint256) versionIdForSemantic;\r\n    mapping (address => uint256) latestVersionIdForContract;\r\n\r\n    bytes32 constant public CREATE_VERSION_ROLE = bytes32(1);\r\n\r\n    event NewVersion(uint256 versionId, uint16[3] semanticVersion);\r\n\r\n    /**\r\n    * @notice Create new version for repo\r\n    * @param _newSemanticVersion Semantic version for new repo version\r\n    * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)\r\n    * @param _contentURI External URI for fetching new version's content\r\n    */\r\n    function newVersion(\r\n        uint16[3] _newSemanticVersion,\r\n        address _contractAddress,\r\n        bytes _contentURI\r\n    ) auth(CREATE_VERSION_ROLE) public\r\n    {\r\n        address contractAddress = _contractAddress;\r\n        if (versions.length > 0) {\r\n            Version storage lastVersion = versions[versions.length - 1];\r\n            require(isValidBump(lastVersion.semanticVersion, _newSemanticVersion));\r\n            if (contractAddress == 0) {\r\n                contractAddress = lastVersion.contractAddress;\r\n            }\r\n            // Only allows smart contract change on major version bumps\r\n            require(lastVersion.contractAddress == contractAddress || _newSemanticVersion[0] > lastVersion.semanticVersion[0]);\r\n        } else {\r\n            versions.length += 1;\r\n            uint16[3] memory zeroVersion;\r\n            require(isValidBump(zeroVersion, _newSemanticVersion));\r\n        }\r\n\r\n        uint versionId = versions.push(Version(_newSemanticVersion, contractAddress, _contentURI)) - 1;\r\n        versionIdForSemantic[semanticVersionHash(_newSemanticVersion)] = versionId;\r\n        latestVersionIdForContract[contractAddress] = versionId;\r\n\r\n        NewVersion(versionId, _newSemanticVersion);\r\n    }\r\n\r\n    function getLatest() public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\r\n        return getByVersionId(versions.length - 1);\r\n    }\r\n\r\n    function getLatestForContractAddress(address _contractAddress) public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\r\n        return getByVersionId(latestVersionIdForContract[_contractAddress]);\r\n    }\r\n\r\n    function getBySemanticVersion(uint16[3] _semanticVersion) public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\r\n        return getByVersionId(versionIdForSemantic[semanticVersionHash(_semanticVersion)]);\r\n    }\r\n\r\n    function getByVersionId(uint _versionId) public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\r\n        require(_versionId > 0);\r\n        Version storage version = versions[_versionId];\r\n        return (version.semanticVersion, version.contractAddress, version.contentURI);\r\n    }\r\n\r\n    function getVersionsCount() public view returns (uint256) {\r\n        uint256 len = versions.length;\r\n        return len > 0 ? len - 1 : 0;\r\n    }\r\n\r\n    function isValidBump(uint16[3] _oldVersion, uint16[3] _newVersion) public pure returns (bool) {\r\n        bool hasBumped;\r\n        uint i = 0;\r\n        while (i < 3) {\r\n            if (hasBumped) {\r\n                if (_newVersion[i] != 0) {\r\n                    return false;\r\n                }\r\n            } else if (_newVersion[i] != _oldVersion[i]) {\r\n                if (_oldVersion[i] > _newVersion[i] || _newVersion[i] - _oldVersion[i] != 1) {\r\n                    return false;\r\n                }\r\n                hasBumped = true;\r\n            }\r\n            i++;\r\n        }\r\n        return hasBumped;\r\n    }\r\n\r\n    function semanticVersionHash(uint16[3] version) internal pure returns (bytes32) {\r\n        return keccak256(version[0], version[1], version[2]);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_semanticVersion\",\"type\":\"uint16[3]\"}],\"name\":\"getBySemanticVersion\",\"outputs\":[{\"name\":\"semanticVersion\",\"type\":\"uint16[3]\"},{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"contentURI\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSemanticVersion\",\"type\":\"uint16[3]\"},{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_contentURI\",\"type\":\"bytes\"}],\"name\":\"newVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_versionId\",\"type\":\"uint256\"}],\"name\":\"getByVersionId\",\"outputs\":[{\"name\":\"semanticVersion\",\"type\":\"uint16[3]\"},{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"contentURI\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"getLatestForContractAddress\",\"outputs\":[{\"name\":\"semanticVersion\",\"type\":\"uint16[3]\"},{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"contentURI\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_oldVersion\",\"type\":\"uint16[3]\"},{\"name\":\"_newVersion\",\"type\":\"uint16[3]\"}],\"name\":\"isValidBump\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATE_VERSION_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatest\",\"outputs\":[{\"name\":\"semanticVersion\",\"type\":\"uint16[3]\"},{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"contentURI\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"versionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"semanticVersion\",\"type\":\"uint16[3]\"}],\"name\":\"NewVersion\",\"type\":\"event\"}]","ContractName":"Repo","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a2b61a46ff68487c6958b69dee15c17471d446f8b15b7e9777da4a8630da028e"}]}