{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    function DSAuth() public {\r\n        owner = msg.sender;\r\n        LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\n// Copyright (C) 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\ncontract DSRoles is DSAuth, DSAuthority\r\n{\r\n    mapping(address=>bool) _root_users;\r\n    mapping(address=>bytes32) _user_roles;\r\n    mapping(address=>mapping(bytes4=>bytes32)) _capability_roles;\r\n    mapping(address=>mapping(bytes4=>bool)) _public_capabilities;\r\n\r\n    function getUserRoles(address who)\r\n        public\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return _user_roles[who];\r\n    }\r\n\r\n    function getCapabilityRoles(address code, bytes4 sig)\r\n        public\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return _capability_roles[code][sig];\r\n    }\r\n\r\n    function isUserRoot(address who)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _root_users[who];\r\n    }\r\n\r\n    function isCapabilityPublic(address code, bytes4 sig)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _public_capabilities[code][sig];\r\n    }\r\n\r\n    function hasUserRole(address who, uint8 role)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 roles = getUserRoles(who);\r\n        bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));\r\n        return bytes32(0) != roles & shifted;\r\n    }\r\n\r\n    function canCall(address caller, address code, bytes4 sig)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if( isUserRoot(caller) || isCapabilityPublic(code, sig) ) {\r\n            return true;\r\n        } else {\r\n            bytes32 has_roles = getUserRoles(caller);\r\n            bytes32 needs_one_of = getCapabilityRoles(code, sig);\r\n            return bytes32(0) != has_roles & needs_one_of;\r\n        }\r\n    }\r\n\r\n    function BITNOT(bytes32 input) internal pure returns (bytes32 output) {\r\n        return (input ^ bytes32(uint(-1)));\r\n    }\r\n\r\n    function setRootUser(address who, bool enabled)\r\n        public\r\n        auth\r\n    {\r\n        _root_users[who] = enabled;\r\n    }\r\n\r\n    function setUserRole(address who, uint8 role, bool enabled)\r\n        public\r\n        auth\r\n    {\r\n        bytes32 last_roles = _user_roles[who];\r\n        bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));\r\n        if( enabled ) {\r\n            _user_roles[who] = last_roles | shifted;\r\n        } else {\r\n            _user_roles[who] = last_roles & BITNOT(shifted);\r\n        }\r\n    }\r\n\r\n    function setPublicCapability(address code, bytes4 sig, bool enabled)\r\n        public\r\n        auth\r\n    {\r\n        _public_capabilities[code][sig] = enabled;\r\n    }\r\n\r\n    function setRoleCapability(uint8 role, address code, bytes4 sig, bool enabled)\r\n        public\r\n        auth\r\n    {\r\n        bytes32 last_roles = _capability_roles[code][sig];\r\n        bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));\r\n        if( enabled ) {\r\n            _capability_roles[code][sig] = last_roles | shifted;\r\n        } else {\r\n            _capability_roles[code][sig] = last_roles & BITNOT(shifted);\r\n        }\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getUserRoles\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"address\"},{\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"getCapabilityRoles\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"address\"},{\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"isCapabilityPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"role\",\"type\":\"uint8\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setUserRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"role\",\"type\":\"uint8\"},{\"name\":\"code\",\"type\":\"address\"},{\"name\":\"sig\",\"type\":\"bytes4\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setRoleCapability\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"hasUserRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"},{\"name\":\"code\",\"type\":\"address\"},{\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"code\",\"type\":\"address\"},{\"name\":\"sig\",\"type\":\"bytes4\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setPublicCapability\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setRootUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isUserRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"DSRoles","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://12bf8d272a2094dd3127c45b6f30b13cccbecc7048945fc6c6863e6c43a2a814"}]}