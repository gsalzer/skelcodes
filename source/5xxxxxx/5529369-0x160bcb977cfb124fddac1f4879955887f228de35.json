{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract NoteToken is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant NAME = \"Note Token\";\r\n    string public constant SYMBOL = \"NOTE\";\r\n    uint256 public tokensLeft;\r\n    uint256 public endTime;\r\n    address compositionAddress;\r\n\r\n    modifier beforeEndTime() {\r\n        require(now < endTime);\r\n        _;\r\n    }\r\n\r\n    modifier afterEndTime() {\r\n        require(now > endTime);\r\n        _;\r\n    }\r\n    event TokensBought(uint256 _num, uint256 _tokensLeft);\r\n    event TokensReturned(uint256 _num, uint256 _tokensLeft);\r\n\r\n    function NoteToken(uint256 _endTime) public {\r\n        totalSupply = 5000;\r\n        tokensLeft = totalSupply;\r\n\r\n        endTime = _endTime;\r\n    }\r\n\r\n    function purchaseNotes(uint256 _numNotes) beforeEndTime() external payable {\r\n        require(_numNotes <= 100);\r\n        require(_numNotes <= tokensLeft);\r\n        require(_numNotes == (msg.value / 0.001 ether));\r\n\r\n        balances[msg.sender] = balances[msg.sender].add(_numNotes);\r\n        tokensLeft = tokensLeft.sub(_numNotes);\r\n\r\n        emit TokensBought(_numNotes, tokensLeft);\r\n    }\r\n\r\n    function returnNotes(uint256 _numNotes) beforeEndTime() external {\r\n        require(_numNotes <= balances[msg.sender]);\r\n        \r\n        uint256 refund = _numNotes * 0.001 ether;\r\n        balances[msg.sender] = balances[msg.sender].sub(_numNotes);\r\n        tokensLeft = tokensLeft.add(_numNotes);\r\n        msg.sender.transfer(refund);\r\n        emit TokensReturned(_numNotes, tokensLeft);\r\n    }\r\n\r\n    function setCompositionAddress(address _compositionAddress) onlyOwner() external {\r\n        require(compositionAddress == address(0));\r\n\r\n        compositionAddress = _compositionAddress;\r\n    }\r\n\r\n    function transferToComposition(address _from, uint256 _value) beforeEndTime() public returns (bool) {\r\n        require(msg.sender == compositionAddress);\r\n        require(_value <= balances[_from]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[compositionAddress] = balances[compositionAddress].add(_value);\r\n        Transfer(_from, compositionAddress, _value);\r\n        return true;\r\n    }\r\n\r\n    function end() afterEndTime() external {\r\n        selfdestruct(compositionAddress);\r\n    }\r\n}\r\n\r\n\r\ncontract CompositionPart {\r\n    //note struct, holds pitch and place\r\n    struct noteId {\r\n        uint256 pitch;\r\n        uint256 place;\r\n    }\r\n\r\n    //token contract\r\n    NoteToken notes;\r\n\r\n    //2d graph of notes and places, represents midi values 0-127 and position,\r\n    bool[1000][128] composition;\r\n    //2d graph representing who owns a placed note\r\n    address[1000][128] composers;\r\n    \r\n    //time when composing freezes\r\n    uint endTime;\r\n\r\n    //keeps track of notes placed by an address\r\n    mapping (address => noteId[]) ownedNotes;\r\n\r\n    modifier beforeEndTime() {\r\n        require(now < endTime);\r\n        _;\r\n    }\r\n\r\n    modifier afterEndTime() {\r\n        require(now > endTime);\r\n        _;\r\n    }\r\n\r\n    modifier placeValidNotes(uint[] _pitches, uint[] _places, uint256 _numNotes) {\r\n        require(_pitches.length == _places.length);\r\n        require(_pitches.length <= 10);\r\n        require(_pitches.length == _numNotes);\r\n\r\n        for (uint256 i = 0; i < _pitches.length; i++) {\r\n            if (_pitches[i] > 127 || _places[i] > 999) {\r\n                revert();\r\n            } else if (composition[_pitches[i]][_places[i]]) {\r\n                revert();\r\n            } \r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier removeValidNotes(uint[] _pitches, uint[] _places, uint256 _numNotes) {\r\n        require(_pitches.length == _places.length);\r\n        require(_pitches.length <= 10);\r\n        require(_pitches.length == _numNotes);\r\n\r\n        for (uint256 i = 0; i < _pitches.length; i++) {\r\n            if (_pitches[i] > 127 || _places[i] > 999) {\r\n                revert();\r\n            } else if (composers[_pitches[i]][_places[i]] != msg.sender) {\r\n                revert();\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    event NotePlaced(address composer, uint pitch, uint place);\r\n    event NoteRemoved(address composer, uint pitch, uint place);\r\n\r\n    //constructor\r\n    function CompositionPart(uint _endTime, address _noteToken) public {\r\n        endTime = _endTime;\r\n        notes = NoteToken(_noteToken);\r\n    }\r\n\r\n    //places up to 10 valid notes in the composition\r\n    function placeNotes(uint256[] _pitches, uint256[] _places, uint256 _numNotes) beforeEndTime() placeValidNotes(_pitches, _places, _numNotes) external {\r\n        require(notes.transferToComposition(msg.sender, _numNotes));\r\n\r\n        for (uint256 i = 0; i < _pitches.length; i++) {\r\n            noteId memory note;\r\n            note.pitch = _pitches[i];\r\n            note.place = _places[i];\r\n\r\n            ownedNotes[msg.sender].push(note);\r\n\r\n            composition[_pitches[i]][_places[i]] = true;\r\n            composers[_pitches[i]][_places[i]] = msg.sender;\r\n\r\n            emit NotePlaced(msg.sender, _pitches[i], _places[i]);\r\n        }\r\n    }\r\n\r\n    //removes up to 10 owned notes from composition\r\n    function removeNotes(uint256[] _pitches, uint256[] _places, uint256 _numNotes) beforeEndTime() removeValidNotes(_pitches, _places, _numNotes) external {\r\n        for (uint256 i = 0; i < _pitches.length; i++) {\r\n            uint256 pitch = _pitches[i];\r\n            uint256 place = _places[i];\r\n            composition[pitch][place] = false;\r\n            composers[pitch][place] = 0x0;\r\n\r\n            removeOwnedNote(msg.sender, pitch, place);\r\n\r\n            emit NoteRemoved(msg.sender, pitch, place);\r\n        }\r\n\r\n        require(notes.transfer(msg.sender, _numNotes));\r\n    }\r\n\r\n    //internal function to remove notes from ownedNotes array\r\n    function removeOwnedNote(address sender, uint256 _pitch, uint256 _place) internal {\r\n        uint256 length = ownedNotes[sender].length;\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (ownedNotes[sender][i].pitch == _pitch && ownedNotes[sender][i].place == _place) {\r\n                ownedNotes[sender][i] = ownedNotes[sender][length-1];\r\n                delete ownedNotes[sender][length-1];\r\n                ownedNotes[sender].length = (length - 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    //gets a line in the composition for viewing purposes and to prevent having to get the whole composition at once\r\n    function getNoteLine(uint _pitch) external view returns (bool[1000], address[1000]) {\r\n        bool[1000] memory _pitches = composition[_pitch];\r\n        address[1000] memory _composers = composers[_pitch];\r\n\r\n        return (_pitches, _composers);\r\n    }\r\n\r\n    //returns whether or note a note exists at a pitch and place\r\n    function getNote(uint _pitch, uint _place) external view returns (bool) {\r\n        bool _note = composition[_pitch][_place];\r\n        return _note; \r\n    }\r\n\r\n    //returns note owner\r\n    function getNoteOwner(uint _pitch, uint _place) external view returns (address) {\r\n        return composers[_pitch][_place];\r\n    }\r\n\r\n    //returns notes placed by sender\r\n    function getPlacedNotes() external view returns (uint[], uint[]) {\r\n        uint length = ownedNotes[msg.sender].length;\r\n\r\n        uint[] memory pitches = new uint[](length);\r\n        uint[] memory places = new uint[](length);\r\n        \r\n        for (uint i = 0; i < ownedNotes[msg.sender].length; i++) {\r\n            pitches[i] = ownedNotes[msg.sender][i].pitch;\r\n            places[i] = ownedNotes[msg.sender][i].place;\r\n        }\r\n\r\n        return (pitches, places);\r\n    }\r\n\r\n    function () external {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_pitch\",\"type\":\"uint256\"}],\"name\":\"getNoteLine\",\"outputs\":[{\"name\":\"\",\"type\":\"bool[1000]\"},{\"name\":\"\",\"type\":\"address[1000]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pitch\",\"type\":\"uint256\"},{\"name\":\"_place\",\"type\":\"uint256\"}],\"name\":\"getNoteOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pitches\",\"type\":\"uint256[]\"},{\"name\":\"_places\",\"type\":\"uint256[]\"},{\"name\":\"_numNotes\",\"type\":\"uint256\"}],\"name\":\"placeNotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlacedNotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pitches\",\"type\":\"uint256[]\"},{\"name\":\"_places\",\"type\":\"uint256[]\"},{\"name\":\"_numNotes\",\"type\":\"uint256\"}],\"name\":\"removeNotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pitch\",\"type\":\"uint256\"},{\"name\":\"_place\",\"type\":\"uint256\"}],\"name\":\"getNote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_noteToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"composer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pitch\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"place\",\"type\":\"uint256\"}],\"name\":\"NotePlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"composer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pitch\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"place\",\"type\":\"uint256\"}],\"name\":\"NoteRemoved\",\"type\":\"event\"}]","ContractName":"CompositionPart","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005b108c800000000000000000000000009f352d623371eda3a28f9d9c8ca73a5124f2d9fc","Library":"","SwarmSource":"bzzr://e05a45f32e7b53ac8b0440cb73b58878de2894a0e2f9f60be4c7c17a0341a91d"}]}