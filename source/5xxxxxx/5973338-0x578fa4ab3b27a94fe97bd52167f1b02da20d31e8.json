{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\ncontract Owned {\r\n    /* Variables */\r\n    address public owner = msg.sender;\r\n    /* Constructor */\r\n    constructor(address _owner) public {\r\n        if ( _owner == 0x00 ) {\r\n            _owner = msg.sender;\r\n        }\r\n        owner = _owner;\r\n    }\r\n    /* Externals */\r\n    function replaceOwner(address _owner) external returns(bool) {\r\n        require( isOwner() );\r\n        owner = _owner;\r\n        return true;\r\n    }\r\n    /* Internals */\r\n    function isOwner() internal view returns(bool) {\r\n        return owner == msg.sender;\r\n    }\r\n    /* Modifiers */\r\n    modifier forOwner {\r\n        require( isOwner() );\r\n        _;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    /* Internals */\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a + b;\r\n        assert( c >= a );\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a - b;\r\n        assert( c <= a );\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a * b;\r\n        assert( c == 0 || c / a == b );\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a / b;\r\n    }\r\n    function pow(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a ** b;\r\n        assert( c % a == 0 );\r\n        return a ** b;\r\n    }\r\n}\r\ncontract TokenDB is Owned {\r\n    /* Externals */\r\n    function transfer(address _from, address _to, uint256 _amount) external returns(bool _success) {}\r\n    function bulkTransfer(address _from, address[] _to, uint256[] _amount) external returns(bool _success) {}\r\n    function setAllowance(address _owner, address _spender, uint256 _amount) external returns(bool _success) {}\r\n    /* Constants */\r\n    function getAllowance(address _owner, address _spender) public view returns(bool _success, uint256 _remaining) {}\r\n    function balanceOf(address _owner) public view returns(bool _success, uint256 _balance) {}\r\n}\r\ncontract Token is Owned {\r\n    /* Declarations */\r\n    using SafeMath for uint256;\r\n    /* Variables */\r\n    string  public name = \"Inlock token\";\r\n    string  public symbol = \"ILK\";\r\n    uint8   public decimals = 8;\r\n    uint256 public totalSupply = 44e16;\r\n    address public libAddress;\r\n    TokenDB public db;\r\n    Ico public ico;\r\n    /* Fallback */\r\n    function () public { revert(); }\r\n    /* Externals */\r\n    function changeLibAddress(address _libAddress) external forOwner {}\r\n    function changeDBAddress(address _dbAddress) external forOwner {}\r\n    function changeIcoAddress(address _icoAddress) external forOwner {}\r\n    function approve(address _spender, uint256 _value) external returns (bool _success) {}\r\n    function transfer(address _to, uint256 _amount) external returns (bool _success) {}\r\n    function bulkTransfer(address[] _to, uint256[] _amount) external returns (bool _success) {}\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool _success) {}\r\n    /* Constants */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 _remaining) {}\r\n    function balanceOf(address _owner) public view returns (uint256 _balance) {}\r\n    /* Events */\r\n    event AllowanceUsed(address indexed _spender, address indexed _owner, uint256 indexed _value);\r\n    event Mint(address indexed _addr, uint256 indexed _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n}\r\ncontract Ico is Owned {\r\n    /* Declarations */\r\n    using SafeMath for uint256;\r\n    /* Enumerations */\r\n    enum phaseType {\r\n        pause,\r\n        privateSale1,\r\n        privateSale2,\r\n        sales1,\r\n        sales2,\r\n        sales3,\r\n        sales4,\r\n        preFinish,\r\n        finish\r\n    }\r\n    struct vesting_s {\r\n        uint256 amount;\r\n        uint256 startBlock;\r\n        uint256 endBlock;\r\n        uint256 claimedAmount;\r\n    }\r\n    /* Variables */\r\n    mapping(address => bool) public KYC;\r\n    mapping(address => bool) public transferRight;\r\n    mapping(address => vesting_s) public vesting;\r\n    phaseType public currentPhase;\r\n    uint256   public currentRate;\r\n    uint256   public currentRateM = 1e3;\r\n    uint256   public privateSale1Hardcap = 4e16;\r\n    uint256   public privateSale2Hardcap = 64e15;\r\n    uint256   public thisBalance = 44e16;\r\n    address   public offchainUploaderAddress;\r\n    address   public setKYCAddress;\r\n    address   public setRateAddress;\r\n    address   public libAddress;\r\n    Token     public token;\r\n    /* Constructor */\r\n    constructor(address _owner, address _libAddress, address _tokenAddress, address _offchainUploaderAddress,\r\n        address _setKYCAddress, address _setRateAddress) Owned(_owner) public {\r\n        currentPhase = phaseType.pause;\r\n        libAddress = _libAddress;\r\n        token = Token(_tokenAddress);\r\n        offchainUploaderAddress = _offchainUploaderAddress;\r\n        setKYCAddress = _setKYCAddress;\r\n        setRateAddress = _setRateAddress;\r\n    }\r\n    /* Fallback */\r\n    function () public payable {\r\n        buy();\r\n    }\r\n    /* Externals */\r\n    function changeLibAddress(address _libAddress) external forOwner {\r\n        libAddress = _libAddress;\r\n    }\r\n    function changeOffchainUploaderAddress(address _offchainUploaderAddress) external forOwner {\r\n        offchainUploaderAddress = _offchainUploaderAddress;\r\n    }\r\n    function changeKYCAddress(address _setKYCAddress) external forOwner {\r\n        setKYCAddress = _setKYCAddress;\r\n    }\r\n    function changeSetRateAddress(address _setRateAddress) external forOwner {\r\n        setRateAddress = _setRateAddress;\r\n    }\r\n    function setVesting(address _beneficiary, uint256 _amount, uint256 _startBlock, uint256 _endBlock) external {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0)\r\n            }\r\n        }\r\n    }\r\n    function claimVesting() external {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0)\r\n            }\r\n        }\r\n    }\r\n    function setKYC(address[] _on, address[] _off) external {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0)\r\n            }\r\n        }\r\n    }\r\n    function setTransferRight(address[] _allow, address[] _disallow) external {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0)\r\n            }\r\n        }\r\n    }\r\n    function setCurrentRate(uint256 _currentRate) external {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0)\r\n            }\r\n        }\r\n    }\r\n    function setCurrentPhase(phaseType _phase) external {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0)\r\n            }\r\n        }\r\n    }\r\n    function offchainUpload(address[] _beneficiaries, uint256[] _rewards) external {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0)\r\n            }\r\n        }\r\n    }\r\n    function buy() public payable {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0)\r\n            }\r\n        }\r\n    }\r\n    /* Constants */\r\n    function allowTransfer(address _owner) public view returns (bool _success, bool _allow) {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x40)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x40)\r\n            }\r\n        }\r\n    }\r\n    function calculateReward(uint256 _input) public view returns (bool _success, uint256 _reward) {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x40)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x40)\r\n            }\r\n        }\r\n    }\r\n    function calcVesting(address _owner) public view returns(bool _success, uint256 _reward) {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x40)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x40)\r\n            }\r\n        }\r\n    }\r\n    /* Events */\r\n    event Brought(address _owner, address _beneficiary, uint256 _input, uint256 _output);\r\n    event VestingDefined(address _beneficiary, uint256 _amount, uint256 _startBlock, uint256 _endBlock);\r\n    event VestingClaimed(address _beneficiary, uint256 _amount);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currentRate\",\"type\":\"uint256\"}],\"name\":\"setCurrentRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_libAddress\",\"type\":\"address\"}],\"name\":\"changeLibAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thisBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_on\",\"type\":\"address[]\"},{\"name\":\"_off\",\"type\":\"address[]\"}],\"name\":\"setKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offchainUploaderAddress\",\"type\":\"address\"}],\"name\":\"changeOffchainUploaderAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allow\",\"type\":\"address[]\"},{\"name\":\"_disallow\",\"type\":\"address[]\"}],\"name\":\"setTransferRight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"calcVesting\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setKYCAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRateM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_setRateAddress\",\"type\":\"address\"}],\"name\":\"changeSetRateAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_rewards\",\"type\":\"uint256[]\"}],\"name\":\"offchainUpload\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_setKYCAddress\",\"type\":\"address\"}],\"name\":\"changeKYCAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"allowTransfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"},{\"name\":\"_allow\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setRateAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offchainUploaderAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"KYC\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"setVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_phase\",\"type\":\"uint8\"}],\"name\":\"setCurrentPhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSale1Hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vesting\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"startBlock\",\"type\":\"uint256\"},{\"name\":\"endBlock\",\"type\":\"uint256\"},{\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSale2Hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_libAddress\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_offchainUploaderAddress\",\"type\":\"address\"},{\"name\":\"_setKYCAddress\",\"type\":\"address\"},{\"name\":\"_setRateAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_input\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_output\",\"type\":\"uint256\"}],\"name\":\"Brought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"VestingDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"VestingClaimed\",\"type\":\"event\"}]","ContractName":"Ico","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000da8c0c6311ab6e43aa1c14967ad7abc6035b9596000000000000000000000000d30afec62b16973a70b709344db441cf054665db000000000000000000000000f784682c82526e245f50975190ef0fff4e4fc0770000000000000000000000006466831dd7722481d4feaa099def914f91ae16630000000000000000000000000c7e5ad5b4831c9a9de0dc82a8b150119815d2c30000000000000000000000000519fbf2da33b163419b7b1ff8dd0a6e8027ba10","Library":"","SwarmSource":"bzzr://80954bae2c6aaeacdd7245e4d336c3732a8197862ea2f4167c878616ce8e5a46"}]}