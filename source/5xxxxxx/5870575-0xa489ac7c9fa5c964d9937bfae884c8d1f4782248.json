{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\ncontract REDTTokenConfig {\r\n    string public constant NAME = \"Real Estate Doc Token\";\r\n    string public constant SYMBOL = \"REDT\";\r\n    uint8 public constant DECIMALS = 18;\r\n    uint public constant DECIMALSFACTOR = 10 ** uint(DECIMALS);\r\n    uint public constant TOTALSUPPLY = 1000000000 * DECIMALSFACTOR;\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract REDTTokenSaleConfig is REDTTokenConfig {\r\n    uint public constant MIN_CONTRIBUTION      = 100 finney;\r\n\r\n    uint public constant SALE_START = 1537189200;\r\n    uint public constant SALE_END = 1540990800;\r\n    \r\n    uint public constant SALE0_END = 1537794000;\r\n    uint public constant SALE0_RATE = 24000;\r\n    uint public constant SALE0_CAP = 400000000 * DECIMALSFACTOR;\r\n    \r\n    uint public constant SALE1_END = 1538398800;\r\n    uint public constant SALE1_RATE = 22000;\r\n    uint public constant SALE1_CAP = 500000000 * DECIMALSFACTOR;\r\n    \r\n    uint public constant SALE2_END = 1540990800;\r\n    uint public constant SALE2_RATE = 20000;\r\n    uint public constant SALE2_CAP = 500000000 * DECIMALSFACTOR;\r\n    \r\n    uint public constant SALE_CAP = 500000000 * DECIMALSFACTOR;\r\n\r\n    address public constant MULTISIG_ETH = 0x25C7A30F23a107ebF430FDFD582Afe1245B690Af;\r\n    address public constant MULTISIG_TKN = 0x25C7A30F23a107ebF430FDFD582Afe1245B690Af;\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract Operatable is Claimable {\r\n    address public minter;\r\n    address public whiteLister;\r\n    address public launcher;\r\n\r\n    modifier canOperate() {\r\n        require(msg.sender == minter || msg.sender == whiteLister || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        minter = owner;\r\n        whiteLister = owner;\r\n        launcher = owner;\r\n    }\r\n\r\n    function setMinter (address addr) public onlyOwner {\r\n        minter = addr;\r\n    }\r\n\r\n    function setWhiteLister (address addr) public onlyOwner {\r\n        whiteLister = addr;\r\n    }\r\n\r\n    modifier onlyMinter()  {\r\n        require (msg.sender == minter);\r\n        _;\r\n    }\r\n\r\n    modifier onlyLauncher()  {\r\n        require (msg.sender == minter);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhiteLister()  {\r\n        require (msg.sender == whiteLister);\r\n        _;\r\n    }\r\n}\r\ncontract WhiteListed is Operatable {\r\n\r\n\r\n    uint public count;\r\n    mapping (address => bool) public whiteList;\r\n\r\n    event Whitelisted(address indexed addr, uint whitelistedCount, bool isWhitelisted);\r\n\r\n    function addWhiteListed(address[] addrs) external canOperate {\r\n        uint c = count;\r\n        for (uint i = 0; i < addrs.length; i++) {\r\n            if (!whiteList[addrs[i]]) {\r\n                whiteList[addrs[i]] = true;\r\n                c++;\r\n                emit Whitelisted(addrs[i], count, true);\r\n            }\r\n        }\r\n        count = c;\r\n    }\r\n\r\n    function removeWhiteListed(address addr) external canOperate {\r\n        require(whiteList[addr]);\r\n        whiteList[addr] = false;\r\n        count--;\r\n        emit Whitelisted(addr, count, false);\r\n    }\r\n\r\n}\r\ncontract Salvageable is Operatable {\r\n    // Salvage other tokens that are accidentally sent into this token\r\n    function emergencyERC20Drain(ERC20 oddToken, uint amount) public onlyLauncher {\r\n        if (address(oddToken) == address(0)) {\r\n            launcher.transfer(amount);\r\n            return;\r\n        }\r\n        oddToken.transfer(launcher, amount);\r\n    }\r\n}\r\ncontract REDTToken is PausableToken, REDTTokenConfig, Salvageable {\r\n    using SafeMath for uint;\r\n\r\n    string public name = NAME;\r\n    string public symbol = SYMBOL;\r\n    uint8 public decimals = DECIMALS;\r\n    bool public mintingFinished = false;\r\n\r\n    event Mint(address indexed to, uint amount);\r\n    event MintFinished();\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    constructor(address launcher_) public {\r\n        launcher = launcher_;\r\n        paused = true;\r\n    }\r\n\r\n    function mint(address _to, uint _amount)  canMint public returns (bool) {\r\n        require(totalSupply_.add(_amount) <= TOTALSUPPLY);\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function finishMinting()  canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n    function sendBatchCS(address[] _recipients, uint[] _values) external canOperate returns (bool) {\r\n        require(_recipients.length == _values.length);\r\n        uint senderBalance = balances[msg.sender];\r\n        for (uint i = 0; i < _values.length; i++) {\r\n            uint value = _values[i];\r\n            address to = _recipients[i];\r\n            require(senderBalance >= value);        \r\n            senderBalance = senderBalance - value;\r\n            balances[to] += value;\r\n            emit Transfer(msg.sender, to, value);\r\n        }\r\n        balances[msg.sender] = senderBalance;\r\n        return true;\r\n    }\r\n\r\n}\r\ncontract REDTTokenSale is REDTTokenSaleConfig, Claimable, Pausable, Salvageable {\r\n    using SafeMath for uint;\r\n    bool public isFinalized = false;\r\n    REDTToken public token;\r\n    \r\n    uint public tokensRaised;           \r\n    uint public weiRaised;              // Amount of raised money in WEI\r\n    WhiteListed public whiteListed;\r\n    uint public numContributors;        // Discrete number of contributors\r\n\r\n    mapping (address => uint) public contributions; // to allow them to have multiple spends\r\n\r\n    event Finalized();\r\n    event TokenPurchase(address indexed beneficiary, uint value, uint amount);\r\n    event TokenPresale(address indexed purchaser, uint amount);\r\n\r\n    constructor( WhiteListed _whiteListed ) public {\r\n        \r\n        require(now < SALE_START);\r\n        \r\n        require(_whiteListed != address(0));\r\n        \r\n        whiteListed = _whiteListed;\r\n\r\n        token = new REDTToken(owner);\r\n        // Note : since we are using claimable, the ownership transfer is not immediate\r\n        // This contract can still do what it needs to via the minter \r\n        token.transferOwnership(owner);\r\n\r\n    }\r\n\r\n    function getRateAndCheckCap() public view returns (uint) {\r\n        \r\n        require(now>SALE_START);\r\n        \r\n        if ((now<SALE0_END) && (tokensRaised < SALE0_CAP))\r\n            return SALE0_RATE;\r\n        \r\n        if ((now<SALE1_END) && (tokensRaised < SALE1_CAP))\r\n            return SALE1_RATE;\r\n        \r\n        if ((now<SALE2_END) && (tokensRaised < SALE2_CAP))\r\n            return SALE2_RATE;\r\n        \r\n        revert();\r\n    }\r\n\r\n    // Only fallback function can be used to buy tokens\r\n    function () external payable {\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n\r\n    function buyTokens(address beneficiary, uint weiAmount) internal whenNotPaused {\r\n        require(whiteListed.whiteList(beneficiary));\r\n        require((weiAmount > MIN_CONTRIBUTION) || (weiAmount == SALE_CAP.sub(MIN_CONTRIBUTION)));\r\n\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        uint tokens = weiAmount.mul(getRateAndCheckCap());\r\n\r\n        if (contributions[beneficiary] == 0) {\r\n            numContributors++;\r\n        }\r\n\r\n        contributions[beneficiary] = contributions[beneficiary].add(weiAmount);\r\n        token.mint(beneficiary, tokens);\r\n        emit TokenPurchase(beneficiary, weiAmount, tokens);\r\n        forwardFunds();\r\n    }\r\n\r\n    function placeTokens(address beneficiary, uint256 numtokens) \r\n    public\r\n\t  onlyOwner\r\n    {\r\n        \r\n        require(now < SALE_START);\r\n        \r\n        tokensRaised = tokensRaised.add(numtokens);\r\n        token.mint(beneficiary,numtokens);\r\n    }\r\n\r\n\r\n    function tokensUnsold() public view returns(uint) {\r\n        return token.TOTALSUPPLY().sub(token.totalSupply());\r\n    }\r\n\r\n    // Return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return ((now > SALE_END) || (tokensRaised >= SALE_CAP));\r\n    }\r\n\r\n    // Send ether to the fund collection wallet\r\n    function forwardFunds() internal {\r\n        \r\n        MULTISIG_ETH.transfer(address(this).balance);\r\n    }\r\n\r\n    // Must be called after crowdsale ends, to do some extra finalization\r\n    function finalize() onlyOwner public {\r\n        require(!isFinalized);\r\n        require(hasEnded());\r\n\r\n        finalization();\r\n        emit Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    // Stops the minting \r\n    // Mints unsold tokens to owner\r\n    function finalization() internal {\r\n        \r\n        token.mint(MULTISIG_TKN,tokensUnsold());\r\n        \r\n        token.finishMinting();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"launcher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setWhiteLister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addWhiteListed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeWhiteListed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteLister\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelistedCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WhiteListed","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e2351d7e7c8bc95c2756ff90cb7aa019c2d2c8153cd16dbfd3533367c60b91ad"}]}