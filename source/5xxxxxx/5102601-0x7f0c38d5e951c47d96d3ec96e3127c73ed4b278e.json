{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n// ERC Token Standard #20 Interface\r\ninterface ERC20 {\r\n    // Get the total token supply\r\n    function totalSupply() public constant returns (uint _totalSupply);\r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    // this function is required for some DEX functionality\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n\r\ncontract OnePay is ERC20 {\r\n\r\n    // Token basic information\r\n    string public constant name = \"OnePay\";\r\n    string public constant symbol = \"1PAY\";\r\n    uint256 public constant decimals = 18;\r\n\r\n    // Director address\r\n    address public director;\r\n\r\n    // Balances for each account\r\n    mapping(address => uint256) balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    // Public sale control\r\n    bool public saleClosed;\r\n    uint256 public currentSalePhase;\r\n    uint256 public SALE = 9090;  // Pre-Sale tokens per eth\r\n    uint256 public PRE_SALE = 16667; // Sale tokens per eth\r\n\r\n    // Total supply of tokens\r\n    uint256 public totalSupply;\r\n\r\n    // Total funds received\r\n    uint256 public totalReceived;\r\n\r\n    // Total amount of coins minted\r\n    uint256 public mintedCoins;\r\n\r\n    // Hard Cap for the sale\r\n    uint256 public hardCapSale;\r\n\r\n    // Token Cap\r\n    uint256 public tokenCap;\r\n\r\n    /**\r\n      * Functions with this modifier can only be executed by the owner\r\n      */\r\n    modifier onlyDirector()\r\n    {\r\n        assert(msg.sender == director);\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * Constructor\r\n      */\r\n    function OnePay() public\r\n    {\r\n        // Create the initial director\r\n        director = msg.sender;\r\n\r\n        // setting the hardCap for sale\r\n        hardCapSale = 100000000 * 10 ** uint256(decimals);\r\n\r\n        // token Cap\r\n        tokenCap = 500000000 * 10 ** uint256(decimals);\r\n\r\n        // Set the total supply\r\n        totalSupply = 0;\r\n\r\n        // Initial sale phase is presale\r\n        currentSalePhase = PRE_SALE;\r\n\r\n        // total coins minted so far\r\n        mintedCoins = 0;\r\n\r\n        // total funds raised\r\n        totalReceived = 0;\r\n\r\n        saleClosed = true;\r\n    }\r\n\r\n    /**\r\n      * Fallback function to be invoked when a value is sent without a function call.\r\n      */\r\n    function() public payable\r\n    {\r\n                // Make sure the sale is active\r\n        require(!saleClosed);\r\n\r\n        // Minimum amount is 0.02 eth\r\n        require(msg.value >= 0.02 ether);\r\n\r\n        // If 1500 eth is received switch the sale price\r\n        if (totalReceived >= 1500 ether) {\r\n            currentSalePhase = SALE;\r\n        }\r\n\r\n        uint256 c = mul(msg.value, currentSalePhase);\r\n\r\n        // Calculate tokens to mint based on the \"current sale phase\"\r\n        uint256 amount = c;\r\n\r\n        // Make sure that mintedCoins don't exceed the hardcap sale\r\n        require(mintedCoins + amount <= hardCapSale);\r\n\r\n        // Check for totalSupply max amount\r\n        balances[msg.sender] += amount;\r\n\r\n        // Increase the number of minted coins\r\n        mintedCoins += amount;\r\n\r\n        //Increase totalSupply by amount\r\n        totalSupply += amount;\r\n\r\n        // Track of total value received\r\n        totalReceived += msg.value;\r\n\r\n        Transfer(this, msg.sender, amount);\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n      * Get Tokens for the company\r\n      */\r\n    function getCompanyToken(uint256 amount) public onlyDirector returns (bool success)\r\n    {\r\n        amount = amount * 10 ** uint256(decimals);\r\n\r\n        require((totalSupply + amount) <= tokenCap);\r\n\r\n        balances[director] = amount;\r\n\r\n        totalSupply += amount;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n\t  * Lock the crowdsale\r\n\t  */\r\n    function closeSale() public onlyDirector returns (bool success)\r\n    {\r\n        saleClosed = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      * Unlock the crowd sale.\r\n      */\r\n    function openSale() public onlyDirector returns (bool success)\r\n    {\r\n        saleClosed = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      * Set the price to pre-sale\r\n      */\r\n    function setPriceToPreSale() public onlyDirector returns (bool success)\r\n    {\r\n        currentSalePhase = PRE_SALE;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      * Set the price to reg sale.\r\n      */\r\n    function setPriceToRegSale() public onlyDirector returns (bool success)\r\n    {\r\n        currentSalePhase = SALE;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      * Withdraw funds from the contract\r\n      */\r\n    function withdrawFunds() public\r\n    {\r\n        director.transfer(this.balance);\r\n    }\r\n\r\n    /**\r\n      * Transfers the director to a new address\r\n      */\r\n    function transferDirector(address newDirector) public onlyDirector\r\n    {\r\n        director = newDirector;\r\n    }\r\n\r\n    /**\r\n      * Returns total\r\n      */\r\n    function totalSupply() public view returns (uint256)\r\n    {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n      * Balance of a particular account\r\n      */\r\n    function balanceOf(address _owner) public constant returns (uint256)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n\r\n        // Make sure the sender has enough value in their account\r\n        require(balances[msg.sender] >= _value && _value > 0);\r\n        // Subtract value from sender's account\r\n        balances[msg.sender] = balances[msg.sender] - _value;\r\n\r\n        // Add value to receiver's account\r\n        balances[_to] = add(balances[_to], _value);\r\n\r\n        // Log\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      * Allow spender to spend the value amount on your behalf.\r\n      * If this function is called again it overwrites the current allowance with _value.\r\n      */\r\n    function approve(address _spender, uint256 _value) public returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      * Spend value from a different account granted you have allowance to use the value amount.\r\n      * If this function is called again it overwrites the current allowance with _value.\r\n      */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)\r\n    {\r\n        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);\r\n        balances[_from] = balances[_from] - _value;\r\n        balances[_to] = add(balances[_to], _value);\r\n        allowed[_from][msg.sender] = sub(allowed[_from][msg.sender], _value);\r\n\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      * Returns the amount which _spender is still allowed to withdraw from _owner\r\n      */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openSale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintedCoins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPriceToRegSale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"director\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDirector\",\"type\":\"address\"}],\"name\":\"transferDirector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPriceToPreSale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getCompanyToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeSale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSalePhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"OnePay","CompilerVersion":"v0.4.20-nightly.2018.1.6+commit.2548228b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5094d68557fddafe57a29fa1c93b856992f857663ba1316b3c042277adedc341"}]}