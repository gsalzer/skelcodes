{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\n// mainnet: 0x629bfba9fd3d71cfe883bbb625c865072e301805\r\n\r\ncontract ERC223Token {\r\n  function transfer(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\ncontract Operations {\r\n\r\n  mapping (address => uint) public balances;\r\n  mapping (address => bytes32) public activeCall;\r\n\r\n  // remember who was call recipient based on callHash\r\n  mapping (bytes32 => address) public recipientsMap;\r\n\r\n  mapping (address => uint) public endCallRequestDate;\r\n\r\n  uint endCallRequestDelay = 1 hours;\r\n\r\n  ERC223Token public exy;\r\n\r\n  function Operations() public {\r\n    exy = ERC223Token(0xFA74F89A6d4a918167C51132614BbBE193Ee8c22);\r\n  }\r\n\r\n  // falback for EXY deposits\r\n  function tokenFallback(address _from, uint _value, bytes _data) public {\r\n    balances[_from] += _value;\r\n  }\r\n\r\n  function withdraw(uint value) public {\r\n    // dont allow to withdraw any balance if user have active call\r\n    require(activeCall[msg.sender] == 0x0);\r\n\r\n    uint balance = balances[msg.sender];\r\n\r\n    // requested value cant be greater than balance\r\n    require(value <= balance);\r\n\r\n    balances[msg.sender] -= value;\r\n    bytes memory empty;\r\n    exy.transfer(msg.sender, value, empty);\r\n  }\r\n\r\n  function startCall(uint timestamp, uint8 _v, bytes32 _r, bytes32 _s) public {\r\n    // address caller == ecrecover(...)\r\n    address recipient = msg.sender;\r\n    bytes32 callHash = keccak256('Experty.io startCall:', recipient, timestamp);\r\n    address caller = ecrecover(callHash, _v, _r, _s);\r\n\r\n    // caller cant start more than 1 call\r\n    require(activeCall[caller] == 0x0);\r\n\r\n    // save callHash for this caller\r\n    activeCall[caller] = callHash;\r\n    recipientsMap[callHash] = recipient;\r\n\r\n    // clean endCallRequestDate for this address\r\n    // if it was set before\r\n    endCallRequestDate[caller] = 0;\r\n  }\r\n\r\n  function endCall(bytes32 callHash, uint amount, uint8 _v, bytes32 _r, bytes32 _s) public {\r\n    // get recipient from map using callHash\r\n    address recipient = recipientsMap[callHash];\r\n\r\n    // only recipient can push this transaction\r\n    require(recipient == msg.sender);\r\n\r\n    bytes32 endHash = keccak256('Experty.io endCall:', recipient, callHash, amount);\r\n    address caller = ecrecover(endHash, _v, _r, _s);\r\n\r\n    // check if call hash was created by caller\r\n    require(activeCall[caller] == callHash);\r\n\r\n    uint maxAmount = amount;\r\n    if (maxAmount > balances[caller]) {\r\n      maxAmount = balances[caller];\r\n    }\r\n\r\n    // remove recipient address from map\r\n    recipientsMap[callHash] = 0x0;\r\n    // clean callHash from caller map\r\n    activeCall[caller] = 0x0;\r\n\r\n    settlePayment(caller, msg.sender, maxAmount);\r\n  }\r\n\r\n  // end call can be requested by caller\r\n  // if recipient did not published it\r\n  function requestEndCall() public {\r\n    // only caller can request end his call\r\n    require(activeCall[msg.sender] != 0x0);\r\n\r\n    // save current timestamp\r\n    endCallRequestDate[msg.sender] = block.timestamp;\r\n  }\r\n\r\n  // endCall can be called by caller only if he requested\r\n  // endCall more than endCallRequestDelay ago\r\n  function forceEndCall() public {\r\n    // only caller can request end his call\r\n    require(activeCall[msg.sender] != 0x0);\r\n    // endCallRequestDate needs to be set\r\n    require(endCallRequestDate[msg.sender] != 0);\r\n    require(endCallRequestDate[msg.sender] + endCallRequestDelay < block.timestamp);\r\n\r\n    endCallRequestDate[msg.sender] = 0;\r\n\r\n    // remove recipient address from map\r\n    recipientsMap[activeCall[msg.sender]] = 0x0;\r\n    // clean callHash from caller map\r\n    activeCall[msg.sender] = 0x0;\r\n  }\r\n\r\n  function settlePayment(address sender, address recipient, uint value) private {\r\n    balances[sender] -= value;\r\n    balances[recipient] += value;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"callHash\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"endCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestEndCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"recipientsMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"startCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceEndCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"endCallRequestDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Operations","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://df7ce4126645fbfa30cf818de2fd74fbaaa4063b9eec10185ad9c38f3f25db58"}]}