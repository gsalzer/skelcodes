{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.20;\r\n\r\n/**\r\n* @title DocumentaryContract\r\n*/\r\ncontract DocumentaryContract {\r\n\r\n    // Owner of the contract    \r\n    address owner;\r\n    \r\n    // Get the editor rights of an address\r\n    mapping (address => bool) isEditor;\r\n\r\n    // Total number of documents, starts with 1    \r\n    uint128 doccnt;\r\n    \r\n    // Get the author of a document with a given docid\r\n    mapping (uint128 => address) docauthor;\t\t                    // docid => author\r\n    \r\n    // Get visibility of a document with a given docid\r\n    mapping (uint128 => bool) isInvisible;\t\t                    // docid => invisibility\r\n    \r\n    // Get the number of documents authored by an address\r\n    mapping (address => uint32) userdoccnt;\t\t                    // author => number docs of user\r\n    \r\n    // Get the document id that relates to the document number of a given address\r\n    mapping (address => mapping (uint32 => uint128)) userdocid;\t\t// author => (userdocid => docid)\r\n\r\n\r\n    // Documents a new or modified document    \r\n    event DocumentEvent (\r\n        uint128 indexed docid,\r\n        uint128 indexed refid,\r\n        uint16 state,   // 0: original. Bit 1: edited\r\n        uint doctime,\r\n        address indexed author,\r\n        string tags,\r\n        string title,\r\n        string text\r\n    );\r\n\r\n    // Documents a registration of a tag\r\n    event TagEvent (\r\n        uint128 docid,\r\n        address indexed author,\r\n        bytes32 indexed taghash,\r\n        uint64 indexed channelid\r\n    );\r\n\r\n    // Documents the change of the visibility of a document \r\n    event InvisibleDocumentEvent (\r\n        uint128 indexed docid,\r\n        uint16 state    // 0: inactive. Bit 1: active\r\n    );\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyEditor {\r\n        require(isEditor[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthor(uint128 docid) {\r\n        require(docauthor[docid] == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyVisible(uint128 docid) {\r\n        require(isInvisible[docid] == false);\r\n        _;\r\n    }\r\n\r\n    modifier onlyInvisible(uint128 docid) {\r\n        require(isInvisible[docid] == true);\r\n        _;\r\n    }\r\n\r\n    function DocumentaryContract() public {\r\n        owner = msg.sender;\r\n        grantEditorRights(owner);\r\n        doccnt = 1;\r\n    }\r\n    \r\n    /**\r\n    * @dev Grants editor rights to the passed address\r\n    * @param user Address to obtain editor rights\r\n    */\r\n    function grantEditorRights(address user) public onlyOwner {\r\n        isEditor[user] = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Revokes editor rights of the passed address\r\n    * @param editor Address to revoke editor rights from\r\n    */\r\n    function revokeEditorRights(address editor) public onlyOwner {\r\n        isEditor[editor] = false;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds a document to the blockchain\r\n    * @param refid The document id to that the new document refers\r\n    * @param doctime Timestamp of the creation of the document\r\n    * @param taghashes Array containing the hashes of up to 5 tags\r\n    * @param tags String containing the tags of the document\r\n    * @param title String containing the title of the document\r\n    * @param text String containing the text of the document\r\n    */\r\n    function documentIt(uint128 refid, uint64 doctime, bytes32[] taghashes, string tags, string title, string text) public {\r\n        writeDocument(refid, 0, doctime, taghashes, tags, title, text);\r\n    }\r\n    \r\n    /**\r\n    * @dev Edits a document that is already present of the blockchain. The document is edited by writing a modified version to the blockchain\r\n    * @param docid The document id of the document that is edited\r\n    * @param doctime Timestamp of the edit of the document\r\n    * @param taghashes Array containing the hashes of up to 5 tags\r\n    * @param tags String containing the modified tags of the document\r\n    * @param title String containing the modified title of the document\r\n    * @param text String containing the modified text of the document\r\n    */\r\n    function editIt(uint128 docid, uint64 doctime, bytes32[] taghashes, string tags, string title, string text) public onlyAuthor(docid) onlyVisible(docid) {\r\n        writeDocument(docid, 1, doctime, taghashes, tags, title, text);\r\n    }\r\n\r\n    /**\r\n    * @dev Generic function that adds a document to the blockchain or modifies a document that already exists on the blockchain\r\n    * @param refid The document id to that the new document refers\r\n    * @param state The state of the document, if 0 a new document is written, if 1 an existing document is edited\r\n    * @param doctime Timestamp of the creation of the document\r\n    * @param taghashes Array containing the hashes of up to 5 tags\r\n    * @param tags String containing the tags of the document\r\n    * @param title String containing the title of the document\r\n    * @param text String containing the text of the document\r\n    */\r\n    function writeDocument(uint128 refid, uint16 state, uint doctime, bytes32[] taghashes, string tags, string title, string text) internal {\r\n\r\n        docauthor[doccnt] = msg.sender;\r\n        userdocid[msg.sender][userdoccnt[msg.sender]] = doccnt;\r\n        userdoccnt[msg.sender]++;\r\n        \r\n        DocumentEvent(doccnt, refid, state, doctime, msg.sender, tags, title, text);\r\n        for (uint8 i=0; i<taghashes.length; i++) {\r\n            if (i>=5) break;\r\n            if (taghashes[i] != 0) TagEvent(doccnt, msg.sender, taghashes[i], 0);\r\n        }\r\n        doccnt++;\r\n    }\r\n    \r\n    /**\r\n    * @dev Markes the document with the passed id as invisible\r\n    * @param docid Id of the document to be marked invisible\r\n    */\r\n    function makeInvisible(uint128 docid) public onlyEditor onlyVisible(docid) {\r\n        isInvisible[docid] = true;\r\n        InvisibleDocumentEvent(docid, 1);\r\n    }\r\n\r\n    /**\r\n    * @dev Markes the document with the passed id as visible\r\n    * @param docid Id of the document to be marked visible\r\n    */\r\n    function makeVisible(uint128 docid) public onlyEditor onlyInvisible(docid) {\r\n        isInvisible[docid] = false;\r\n        InvisibleDocumentEvent(docid, 0);\r\n    }\r\n    \r\n    /**\r\n    * @dev Returns the total number of documents on the blockchain\r\n    * @return The total number of documents on the blockchain as uint128\r\n    */\r\n    function getDocCount() public view returns (uint128) {\r\n        return doccnt;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the total number of documents on the blockchain written by the passed user \r\n    * @param user Address of the user \r\n    * @return The total number of documents written by the passe user as uint32\r\n    */\r\n    function getUserDocCount(address user) public view returns (uint32) {\r\n        return userdoccnt[user];\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the document id of the x-th document written by the passed user\r\n    * @param user Address of the user\r\n    * @param docnum Order number of the document \r\n    * @return The document id as uint128\r\n    */\r\n    function getUserDocId(address user, uint32 docnum) public view returns (uint128) {\r\n        return userdocid[user][docnum];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"docnum\",\"type\":\"uint32\"}],\"name\":\"getUserDocId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"docid\",\"type\":\"uint128\"}],\"name\":\"makeVisible\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refid\",\"type\":\"uint128\"},{\"name\":\"doctime\",\"type\":\"uint64\"},{\"name\":\"taghashes\",\"type\":\"bytes32[]\"},{\"name\":\"tags\",\"type\":\"string\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"text\",\"type\":\"string\"}],\"name\":\"documentIt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserDocCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"grantEditorRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDocCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"docid\",\"type\":\"uint128\"},{\"name\":\"doctime\",\"type\":\"uint64\"},{\"name\":\"taghashes\",\"type\":\"bytes32[]\"},{\"name\":\"tags\",\"type\":\"string\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"text\",\"type\":\"string\"}],\"name\":\"editIt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"docid\",\"type\":\"uint128\"}],\"name\":\"makeInvisible\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"editor\",\"type\":\"address\"}],\"name\":\"revokeEditorRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"docid\",\"type\":\"uint128\"},{\"indexed\":true,\"name\":\"refid\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"doctime\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tags\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"text\",\"type\":\"string\"}],\"name\":\"DocumentEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"docid\",\"type\":\"uint128\"},{\"indexed\":true,\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"taghash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"channelid\",\"type\":\"uint64\"}],\"name\":\"TagEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"docid\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"uint16\"}],\"name\":\"InvisibleDocumentEvent\",\"type\":\"event\"}]","ContractName":"DocumentaryContract","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bf20077419f3549791f647da43a4a4eb42d3a10bc6bb1338b292a7c02eb11757"}]}