{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\ncontract MultiTokenBasics {\r\n\r\n    function totalSupply(uint256 _tokenId) public view returns (uint256);\r\n\r\n    function balanceOf(uint256 _tokenId, address _owner) public view returns (uint256);\r\n\r\n    function allowance(uint256 _tokenId, address _owner, address _spender) public view returns (uint256);\r\n\r\n    function transfer(uint256 _tokenId, address _to, uint256 _value) public returns (bool);\r\n\r\n    function transferFrom(uint256 _tokenId, address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(uint256 _tokenId, address _spender, uint256 _value) public returns (bool);\r\n\r\n\r\n    event Transfer(uint256 indexed tokenId, address indexed from, address indexed to, uint256 value);\r\n    event Approval(uint256 indexed tokenId, address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\ncontract MultiToken is Ownable, MultiTokenBasics {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(uint256 => mapping(address => mapping(address => uint256))) private allowed;\r\n    mapping(uint256 => mapping(address => uint256)) private balance;\r\n    mapping(uint256 => uint256) private totalSupply_;\r\n\r\n\r\n    uint8 public decimals = 18;\r\n    uint256 public mask = 0xffffffff;\r\n\r\n\r\n\r\n    /**\r\n    * @dev Throws if _tokenId not exists\r\n    * @param _tokenId uint256 is subtoken identifier\r\n    */\r\n\r\n    modifier existingToken(uint256 _tokenId) {\r\n        require(totalSupply_[_tokenId] > 0 && (_tokenId & mask == _tokenId));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if  _tokenId exists\r\n    * @param _tokenId uint256 is subtoken identifier\r\n    */\r\n\r\n    modifier notExistingToken(uint256 _tokenId) {\r\n        require(totalSupply_[_tokenId] == 0 && (_tokenId & mask == _tokenId));\r\n        _;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n    * @dev create new subtoken with unique tokenId\r\n    * @param _tokenId uint256 is subtoken identifier\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    * @return uint256 representing the total amount of tokens\r\n    */\r\n\r\n    function createNewSubtoken(uint256 _tokenId, address _to, uint256 _value) notExistingToken(_tokenId) onlyOwner() public returns (bool) {\r\n        require(_value > 0);\r\n        balance[_tokenId][_to] = _value;\r\n        totalSupply_[_tokenId] = _value;\r\n        Transfer(_tokenId, address(0), _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Gets the total amount of tokens stored by the contract\r\n    * @param _tokenId uint256 is subtoken identifier\r\n    * @return uint256 representing the total amount of tokens\r\n    */\r\n\r\n    function totalSupply(uint256 _tokenId) existingToken(_tokenId) public view returns (uint256) {\r\n        return totalSupply_[_tokenId];\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address\r\n    * @param _tokenId uint256 is subtoken identifier\r\n    * @param _owner address to query the balance of\r\n    * @return uint256 representing the amount owned by the passed address\r\n    */\r\n\r\n    function balanceOf(uint256 _tokenId, address _owner) existingToken(_tokenId) public view returns (uint256) {\r\n        return balance[_tokenId][_owner];\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _tokenId uint256 is subtoken identifier\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n\r\n    function allowance(uint256 _tokenId, address _owner, address _spender) existingToken(_tokenId) public view returns (uint256) {\r\n        return allowed[_tokenId][_owner][_spender];\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _tokenId uint256 is subtoken identifier\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n\r\n    function transfer(uint256 _tokenId, address _to, uint256 _value) existingToken(_tokenId) public returns (bool) {\r\n        require(_to != address(0));\r\n        var _sender = msg.sender;\r\n        var balances = balance[_tokenId];\r\n        require(_to != address(0));\r\n        require(_value <= balances[_sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[_sender] = balances[_sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(_tokenId, _sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _tokenId uint256 is subtoken identifier\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n\r\n    function transferFrom(uint256 _tokenId, address _from, address _to, uint256 _value) existingToken(_tokenId) public returns (bool) {\r\n        address _sender = msg.sender;\r\n        var balances = balance[_tokenId];\r\n        var tokenAllowed = allowed[_tokenId];\r\n\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= tokenAllowed[_from][_sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        tokenAllowed[_from][_sender] = tokenAllowed[_from][_sender].sub(_value);\r\n        Transfer(_tokenId, _from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    *\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _tokenId uint256 is subtoken identifier\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n\r\n\r\n\r\n    function approve(uint256 _tokenId, address _spender, uint256 _value) public returns (bool) {\r\n        var _sender = msg.sender;\r\n        allowed[_tokenId][_sender][_spender] = _value;\r\n        Approval(_tokenId, _sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createNewSubtoken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mask\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MultiToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://862b9992ff134e428dc3b36be63d1a70f6eea384aabc79f4adabdd836648ee71"}]}