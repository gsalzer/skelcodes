{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.12;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) returns (bool ok);\r\n  function approve(address spender, uint value) returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract StandardToken is ERC20, SafeMath {\r\n\r\n  mapping(address => uint) balances;\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n      \r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because safeSub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n    \r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    balances[_from] = safeSub(balances[_from], _value);\r\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint _value) returns (bool success) {\r\n      \r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract UBetCoin is Ownable, StandardToken {\r\n\r\n    string public name = \"UBetCoin\";               // name of the token\r\n    string public symbol = \"UBET\";                 // ERC20 compliant 4 digit token code\r\n    uint public decimals = 2;                      // token has 2 digit precision\r\n\r\n    uint256 public totalSupply =  400000000000;      // 4 BILLION INITIAL SUPPLY\r\n    uint256 public tokenSupplyFromCheck = 0;             // Total from check!\r\n    uint256 public tokenSupplyBackedByGold = 4000000000; // Supply Backed By Gold\r\n    \r\n    string public constant YOU_BET_MINE_DOCUMENT_PATH = \"https://s3.amazonaws.com/s3-ubetcoin-user-signatures/document/GOLD-MINES-assigned+TO-SAINT-NICOLAS-SNADCO-03-22-2016.pdf\";\r\n    string public constant YOU_BET_MINE_DOCUMENT_SHA512 = \"7e9dc6362c5bf85ff19d75df9140b033c4121ba8aaef7e5837b276d657becf0a0d68fcf26b95e76023a33251ac94f35492f2f0af882af4b87b1b1b626b325cf8\";\r\n    string public constant UBETCOIN_LEDGER_TO_LEDGER_ENTRY_DOCUMENT_PATH = \"https://s3.amazonaws.com/s3-ubetcoin-user-signatures/document/LEDGER-TO-LEDGER+ENTRY-FOR-UBETCOIN+03-20-2018.pdf\";\r\n    string public constant UBETCOIN_LEDGER_TO_LEDGER_ENTRY_DOCUMENT_SHA512 = \"c8f0ae2602005dd88ef908624cf59f3956107d0890d67d3baf9c885b64544a8140e282366cae6a3af7bfbc96d17f856b55fc4960e2287d4a03d67e646e0e88c6\";\r\n    \r\n    /// Base exchange rate is set\r\n    uint256 public ratePerOneEther = 962;\r\n    uint256 public totalUBetCheckAmounts = 0;\r\n\r\n    /// Issue event index starting from 0.\r\n    uint64 public issueIndex = 0;\r\n\r\n    /// Emitted for each sucuessful token purchase.\r\n    event Issue(uint64 issueIndex, address addr, uint256 tokenAmount);\r\n    \r\n    // All funds will be transferred in this wallet.\r\n    address public moneyWallet = 0xe5688167Cb7aBcE4355F63943aAaC8bb269dc953;\r\n\r\n    /// Emitted for each UBETCHECKS register.\r\n    event UbetCheckIssue(string chequeIndex);\r\n      \r\n    struct UBetCheck {\r\n      string accountId;\r\n      string accountNumber;\r\n      string fullName;\r\n      string routingNumber;\r\n      string institution;\r\n      uint256 amount;\r\n      uint256 tokens;\r\n      string checkFilePath;\r\n      string digitalCheckFingerPrint;\r\n    }\r\n    \r\n    mapping (address => UBetCheck) UBetChecks;\r\n    address[] public uBetCheckAccts;\r\n    \r\n    \r\n    /// @dev Initializes the contract and allocates all initial tokens to the owner\r\n    function UBetCoin() {\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n  \r\n    //////////////// owner only functions below\r\n\r\n    /// @dev To transfer token contract ownership\r\n    /// @param _newOwner The address of the new owner of this contract\r\n    function transferOwnership(address _newOwner) onlyOwner {\r\n        balances[_newOwner] = balances[owner];\r\n        balances[owner] = 0;\r\n        Ownable.transferOwnership(_newOwner);\r\n    }\r\n    \r\n    /// check functionality\r\n    \r\n    /// @dev Register UBetCheck to the chain\r\n    /// @param _beneficiary recipient ether address\r\n    /// @param _accountId the id generated from the db\r\n    /// @param _accountNumber the account number stated in the check\r\n    /// @param _routingNumber the routing number stated in the check\r\n    /// @param _institution the name of the institution / bank in the check\r\n    /// @param _fullname the name printed on the check\r\n    /// @param _amount the amount in currency in the chek\r\n    /// @param _checkFilePath the url path where the cheque has been uploaded\r\n    /// @param _digitalCheckFingerPrint the hash of the file\r\n    /// @param _tokens number of tokens issued to the beneficiary\r\n    function registerUBetCheck(address _beneficiary, string _accountId,  string _accountNumber, string _routingNumber, string _institution, string _fullname,  uint256 _amount, string _checkFilePath, string _digitalCheckFingerPrint, uint256 _tokens) public payable onlyOwner {\r\n      \r\n      require(_beneficiary != address(0));\r\n      require(bytes(_accountId).length != 0);\r\n      require(bytes(_accountNumber).length != 0);\r\n      require(bytes(_routingNumber).length != 0);\r\n      require(bytes(_institution).length != 0);\r\n      require(bytes(_fullname).length != 0);\r\n      require(_amount > 0);\r\n      require(_tokens > 0);\r\n      require(bytes(_checkFilePath).length != 0);\r\n      require(bytes(_digitalCheckFingerPrint).length != 0);\r\n      \r\n      var __conToken = _tokens * (10**(decimals));\r\n      \r\n      var uBetCheck = UBetChecks[_beneficiary];\r\n      \r\n      uBetCheck.accountId = _accountId;\r\n      uBetCheck.accountNumber = _accountNumber;\r\n      uBetCheck.routingNumber = _routingNumber;\r\n      uBetCheck.institution = _institution;\r\n      uBetCheck.fullName = _fullname;\r\n      uBetCheck.amount = _amount;\r\n      uBetCheck.tokens = _tokens;\r\n      \r\n      uBetCheck.checkFilePath = _checkFilePath;\r\n      uBetCheck.digitalCheckFingerPrint = _digitalCheckFingerPrint;\r\n      \r\n      totalUBetCheckAmounts = safeAdd(totalUBetCheckAmounts, _amount);\r\n      tokenSupplyFromCheck = safeAdd(tokenSupplyFromCheck, _tokens);\r\n      \r\n      uBetCheckAccts.push(_beneficiary) -1;\r\n      \r\n      // Issue token when registered UBetCheck is complete to the _beneficiary\r\n      doIssueTokens(_beneficiary, __conToken);\r\n      \r\n      // Fire Event UbetCheckIssue\r\n      UbetCheckIssue(_accountId);\r\n    }\r\n    \r\n    /// @dev List all the checks in the\r\n    function getUBetChecks() public returns (address[]) {\r\n      return uBetCheckAccts;\r\n    }\r\n    \r\n    /// @dev Return UBetCheck information by supplying beneficiary adddress\r\n    function getUBetCheck(address _address) public returns(string, string, string, string, uint256, string, string) {\r\n            \r\n      return (UBetChecks[_address].accountNumber,\r\n              UBetChecks[_address].routingNumber,\r\n              UBetChecks[_address].institution,\r\n              UBetChecks[_address].fullName,\r\n              UBetChecks[_address].amount,\r\n              UBetChecks[_address].checkFilePath,\r\n              UBetChecks[_address].digitalCheckFingerPrint);\r\n    }\r\n    \r\n    /// @dev This default function allows token to be purchased by directly\r\n    /// sending ether to this smart contract.\r\n    function () public payable {\r\n      purchaseTokens(msg.sender);\r\n    }\r\n\r\n    /// @dev return total count of registered UBet Checks\r\n    function countUBetChecks() public returns (uint) {\r\n        return uBetCheckAccts.length;\r\n    }\r\n    \r\n\r\n    /// @dev issue tokens for a single buyer\r\n    /// @param _beneficiary addresses that the tokens will be sent to.\r\n    /// @param _tokens the amount of tokens, with decimals expanded (full).\r\n    function doIssueTokens(address _beneficiary, uint256 _tokens) internal {\r\n      require(_beneficiary != address(0));    \r\n\r\n      // compute without actually increasing it\r\n      uint256 increasedTotalSupply = safeAdd(totalSupply, _tokens);\r\n      \r\n      // increase token total supply\r\n      totalSupply = increasedTotalSupply;\r\n      // update the beneficiary balance to number of tokens sent\r\n      balances[_beneficiary] = safeAdd(balances[_beneficiary], _tokens);\r\n      \r\n      Transfer(msg.sender, _beneficiary, _tokens);\r\n    \r\n      // event is fired when tokens issued\r\n      Issue(\r\n          issueIndex++,\r\n          _beneficiary,\r\n          _tokens\r\n      );\r\n    }\r\n    \r\n    /// @dev Issue token based on Ether received.\r\n    /// @param _beneficiary Address that newly issued token will be sent to.\r\n    function purchaseTokens(address _beneficiary) public payable {\r\n      // only accept a minimum amount of ETH?\r\n      require(msg.value >= 0.00104 ether);\r\n     \r\n      uint _tokens = safeDiv(safeMul(msg.value, ratePerOneEther), (10**(18-decimals)));\r\n      doIssueTokens(_beneficiary, _tokens);\r\n\r\n      /// forward the money to the money wallet\r\n      moneyWallet.transfer(this.balance);\r\n    }\r\n    \r\n    \r\n    /// @dev Change money wallet owner\r\n    /// @param _address new address to received the ether\r\n    function setMoneyWallet(address _address) public onlyOwner {\r\n        moneyWallet = _address;\r\n    }\r\n    \r\n    /// @dev Change Rate per token in one ether\r\n    /// @param _value the amount of tokens, with decimals expanded (full).\r\n    function setRatePerOneEther(uint256 _value) public onlyOwner {\r\n      require(_value >= 1);\r\n      ratePerOneEther = _value;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRatePerOneEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getUBetChecks\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUBetCheckAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uBetCheckAccts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePerOneEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issueIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"countUBetChecks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUBetCheck\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UBETCOIN_LEDGER_TO_LEDGER_ENTRY_DOCUMENT_PATH\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupplyBackedByGold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UBETCOIN_LEDGER_TO_LEDGER_ENTRY_DOCUMENT_SHA512\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YOU_BET_MINE_DOCUMENT_PATH\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moneyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupplyFromCheck\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"purchaseTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YOU_BET_MINE_DOCUMENT_SHA512\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_accountId\",\"type\":\"string\"},{\"name\":\"_accountNumber\",\"type\":\"string\"},{\"name\":\"_routingNumber\",\"type\":\"string\"},{\"name\":\"_institution\",\"type\":\"string\"},{\"name\":\"_fullname\",\"type\":\"string\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_checkFilePath\",\"type\":\"string\"},{\"name\":\"_digitalCheckFingerPrint\",\"type\":\"string\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"registerUBetCheck\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMoneyWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"issueIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"chequeIndex\",\"type\":\"string\"}],\"name\":\"UbetCheckIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"UBetCoin","CompilerVersion":"v0.4.12+commit.194ff033","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://06fb1f212f1c1991c7095d48e4b6a3653465429096685f6bd67438226bfc87c2"}]}