{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0 uint256 c = a / b;\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded \r\n to a wallet\r\n * as they arrive.\r\n */\r\ncontract token { function transfer(address receiver, uint amount){  } }\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // uint256 durationInMinutes;\r\n  // address where funds are collected\r\n  address public wallet;\r\n  // token address\r\n  address public addressOfTokenUsedAsReward;\r\n\r\n  // uint256 public price = 18000;\r\n\r\n  token tokenReward;\r\n\r\n  // mapping (address => uint) public contributions;\r\n  mapping(address => bool) public whitelist;\r\n\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  uint256 public tokensSold;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale() {\r\n    // how many minutes\r\n    startTime = now + 80715 * 1 minutes;\r\n    endTime = startTime + 31*24*60*1 minutes;\r\n\r\n    //You will change this to your wallet where you need the ETH \r\n    wallet = 0xe65b6eEAfE34adb2e19e8b2AE9c517688771548E;\r\n    // durationInMinutes = _durationInMinutes;\r\n    //Here will come the checksum address we got\r\n    addressOfTokenUsedAsReward = 0xA024E8057EEC474a9b2356833707Dd0579E26eF3;\r\n\r\n\r\n    tokenReward = token(addressOfTokenUsedAsReward);\r\n  }\r\n\r\n  // bool public started = true;\r\n\r\n  // function startSale(){\r\n  //   require(msg.sender == wallet);\r\n  //   started = true;\r\n  // }\r\n\r\n  // function stopSale(){\r\n  //   require(msg.sender == wallet);\r\n  //   started = false;\r\n  // }\r\n\r\n  // function setPrice(uint256 _price){\r\n  //   require(msg.sender == wallet);\r\n  //   price = _price;\r\n  // }\r\n\r\n  function changeWallet(address _wallet){\r\n  \trequire(msg.sender == wallet);\r\n  \twallet = _wallet;\r\n  }\r\n\r\n  // function changeTokenReward(address _token){\r\n  //   require(msg.sender==wallet);\r\n  //   tokenReward = token(_token);\r\n  //   addressOfTokenUsedAsReward = _token;\r\n  // }\r\n\r\n  function whitelistAddresses(address[] _addrs){\r\n    require(msg.sender==wallet);\r\n    for(uint i = 0; i < _addrs.length; ++i)\r\n      whitelist[_addrs[i]] = true;\r\n  }\r\n\r\n  function removeAddressesFromWhitelist(address[] _addrs){\r\n    require(msg.sender==wallet);\r\n    for(uint i = 0;i < _addrs.length;++i)\r\n      whitelist[_addrs[i]] = false;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n    require(whitelist[beneficiary]);\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // if(weiAmount < 10**16) throw;\r\n    // if(weiAmount > 50*10**18) throw;\r\n\r\n    // calculate token amount to be sent\r\n    uint256 tokens = (weiAmount) * 5000;//weiamount * price \r\n    // uint256 tokens = (weiAmount/10**(18-decimals)) * price;//weiamount * price \r\n\r\n    //bonus schedule\r\n\r\n    /*\r\n      PRE-ICO. (1ETH= 7000 FXY)\r\n      Start 1.5.2018\r\n      End 9.5.2018\r\n      Total coins with 40% bonus 14.000.000 FXY\r\n      ICO LEVEL 1 (1ETH=6000 FXY)\r\n      Start 16.5.2018\r\n      End 23.5.2018\r\n      Total coins 54.000.000 FXY with 20% bonus\r\n      ICO LEVEL 2 (1ETH=5000FXY)\r\n      Start 25.5.2018\r\n      End 31.5.2018\r\n      Total coins â€”> if on ICO Level 1 not sold out, it will be drop here.\r\n    */\r\n    if(now < startTime + 9*24*60* 1 minutes){\r\n      tokens += (tokens * 40) / 100;//40%\r\n      if(tokensSold>14000000*10**18) throw;\r\n    }else if(now < startTime + 16*24*60* 1 minutes){\r\n      throw;\r\n    }else if(now < startTime + 23*24*60* 1 minutes){\r\n      tokens += (tokens * 20) / 100;\r\n    }else if(now < startTime + 25*24*60* 1 minutes){\r\n      throw;\r\n    }\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    \r\n    // if(contributions[msg.sender].add(weiAmount)>10*10**18) throw;\r\n    // contributions[msg.sender] = contributions[msg.sender].add(weiAmount);\r\n\r\n    tokenReward.transfer(beneficiary, tokens);\r\n    tokensSold = tokensSold.add(tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  function withdrawTokens(uint256 _amount) {\r\n    require(msg.sender==wallet);\r\n    tokenReward.transfer(wallet,_amount);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"whitelistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressOfTokenUsedAsReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2e485ea80d6de900ebddea4eb5679899099599ae9206ba7cb34e3ad743e28d24"}]}