{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n\r\ncontract OpinionToken is ERC721 {\r\n\r\n  /*** EVENTS ***/\r\n\r\n  /// @dev The Birth event is fired whenever a new opinion comes into existence.\r\n  event Birth(uint256 tokenId, string name, address owner);\r\n\r\n  /// @dev The TokenSold event is fired whenever a token is sold.\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\r\n\r\n  /// @dev Transfer event as defined in current draft of ERC721. \r\n  ///  ownership is assigned, including births.\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  /*** CONSTANTS ***/\r\n\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant NAME = \"Cryptopinions\"; // solhint-disable-line\r\n  string public constant SYMBOL = \"OpinionToken\"; // solhint-disable-line\r\n  string public constant DEFAULT_TEXT = \"\";\r\n\r\n  uint256 private firstStepLimit =  0.053613 ether;\r\n  uint256 private secondStepLimit = 0.564957 ether;\r\n  uint256 private numIssued=5; //number of tokens issued initially\r\n  uint256 private constant stepMultiplier=2;//multiplier for initial opinion registration cost, not sponsorship\r\n  uint256 private startingPrice = 0.001 ether; //will increase every token issued by stepMultiplier times\r\n  uint256 private sponsorStartingCost=0.01 ether;//initial cost to sponsor an opinion\r\n  //uint256 private currentIssueRemaining;\r\n  /*** STORAGE ***/\r\n\r\n  /// @dev A mapping from opinion IDs to the address that owns them. All opinions have\r\n  ///  some valid owner address.\r\n  mapping (uint256 => address) public opinionIndexToOwner;\r\n\r\n  // @dev A mapping from owner address to count of tokens that address owns.\r\n  //  Used internally inside balanceOf() to resolve ownership count.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  /// @dev A mapping from opinionIDs to an address that has been approved to call\r\n  ///  transferFrom(). Each opinion can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n  mapping (uint256 => address) public opinionIndexToApproved;\r\n\r\n  // @dev A mapping from opinionIDs to the price of the token.\r\n  mapping (uint256 => uint256) private opinionIndexToPrice;\r\n  \r\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n\r\n  /*** DATATYPES ***/\r\n  struct Opinion {\r\n    string text;\r\n    bool claimed;\r\n    bool deleted;\r\n    uint8 comment;\r\n    address sponsor;\r\n    address antisponsor;\r\n    uint256 totalsponsored;\r\n    uint256 totalantisponsored;\r\n    uint256 timestamp;\r\n  }\r\n\r\n  Opinion[] private opinions;\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require(\r\n      msg.sender == ceoAddress ||\r\n      msg.sender == cooAddress\r\n    );\r\n    _;\r\n  }\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  function OpinionToken() public {\r\n    ceoAddress = msg.sender;\r\n    cooAddress = msg.sender;\r\n  }\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    opinionIndexToApproved[_tokenId] = _to;\r\n\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n  /// @dev Creates initial set of opinions. Can only be called once.\r\n  function createInitialItems() public onlyCOO {\r\n    require(opinions.length==0);\r\n    _createOpinionSet();\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific opinion.\r\n  /// @param _tokenId The tokenId of the opinion of interest.\r\n  function getOpinion(uint256 _tokenId) public view returns (\r\n    uint256 sellingPrice,\r\n    address owner,\r\n    address sponsor,\r\n    address antisponsor,\r\n    uint256 amountsponsored,\r\n    uint256 amountantisponsored,\r\n    uint8 acomment,\r\n    uint256 timestamp,\r\n    string opinionText\r\n  ) {\r\n    Opinion storage opinion = opinions[_tokenId];\r\n    opinionText = opinion.text;\r\n    sellingPrice = opinionIndexToPrice[_tokenId];\r\n    owner = opinionIndexToOwner[_tokenId];\r\n    acomment=opinion.comment;\r\n    sponsor=opinion.sponsor;\r\n    antisponsor=opinion.antisponsor;\r\n    amountsponsored=opinion.totalsponsored;\r\n    amountantisponsored=opinion.totalantisponsored;\r\n    timestamp=opinion.timestamp;\r\n  }\r\n\r\n  function compareStrings (string a, string b) public pure returns (bool){\r\n       return keccak256(a) == keccak256(b);\r\n   }\r\n  \r\n  function hasDuplicate(string _tocheck) public view returns (bool){\r\n    return hasPriorDuplicate(_tocheck,opinions.length);\r\n  }\r\n  \r\n  function hasPriorDuplicate(string _tocheck,uint256 index) public view returns (bool){\r\n    for(uint i = 0; i<index; i++){\r\n        if(compareStrings(_tocheck,opinions[i].text)){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n  /// For querying owner of token\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = opinionIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  function payout(address _to) public onlyCLevel {\r\n    _payout(_to);\r\n  }\r\n\r\n  function sponsorOpinion(uint256 _tokenId,uint8 comment,bool _likesOpinion) public payable {\r\n      //ensure comment corresponds to status of token. Tokens with a comment of 0 are unregistered.\r\n      require(comment!=0);\r\n      require((_likesOpinion && comment<100) || (!_likesOpinion && comment>100));\r\n      address sponsorAdr = msg.sender;\r\n      require(_addressNotNull(sponsorAdr));\r\n      // Making sure sent amount is greater than or equal to the sellingPrice\r\n      uint256 sellingPrice = opinionIndexToPrice[_tokenId];\r\n      address currentOwner=opinionIndexToOwner[_tokenId];\r\n      address newOwner = msg.sender;\r\n      require(_addressNotNull(newOwner));\r\n      require(_addressNotNull(currentOwner));\r\n      require(msg.value >= sellingPrice);\r\n      uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 90), 100));\r\n      uint256 ownerTake=uint256(SafeMath.div(SafeMath.mul(sellingPrice, 10), 100));\r\n      uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n          // Update prices\r\n    if (sellingPrice < firstStepLimit) {\r\n      // first stage\r\n      opinionIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 200), 90);\r\n    } else if (sellingPrice < secondStepLimit) {\r\n      // second stage\r\n      opinionIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 120), 90);\r\n    } else {\r\n      // third stage\r\n      opinionIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 115), 90);\r\n    }\r\n    Opinion storage opinion = opinions[_tokenId];\r\n    require(opinion.claimed);\r\n    require(sponsorAdr!=opinion.sponsor);\r\n    require(sponsorAdr!=opinion.antisponsor);\r\n    require(sponsorAdr!=currentOwner);\r\n    opinion.comment=comment;\r\n    if(_likesOpinion){\r\n        if(_addressNotNull(opinion.sponsor)){\r\n            opinion.sponsor.transfer(payment);\r\n            currentOwner.transfer(ownerTake);\r\n        }\r\n        else{\r\n            currentOwner.transfer(sellingPrice);\r\n        }\r\n        opinion.sponsor=sponsorAdr;\r\n        opinion.totalsponsored=SafeMath.add(opinion.totalsponsored,sellingPrice);\r\n    }\r\n    else{\r\n        if(_addressNotNull(opinion.sponsor)){\r\n            opinion.antisponsor.transfer(payment);\r\n            ceoAddress.transfer(ownerTake);\r\n        }\r\n        else{\r\n            ceoAddress.transfer(sellingPrice); //eth for initial antisponsor goes to Cryptopinions, because you wouldn't want it to go to the creator of an opinion you don't like\r\n        }\r\n        opinion.antisponsor=sponsorAdr;\r\n        opinion.totalantisponsored=SafeMath.add(opinion.totalantisponsored,sellingPrice);\r\n    }\r\n    msg.sender.transfer(purchaseExcess);\r\n  }\r\n  \r\n  //lets you permanently delete someone elses opinion.\r\n  function deleteThis(uint256 _tokenId) public payable{\r\n    //Cost is 1 eth or five times the current valuation of the opinion, whichever is higher.\r\n    uint256 sellingPrice = SafeMath.mul(opinionIndexToPrice[_tokenId],5);\r\n    if(sellingPrice<1 ether){\r\n        sellingPrice=1 ether;\r\n    }\r\n    require(msg.value >= sellingPrice);\r\n    ceoAddress.transfer(sellingPrice);\r\n    Opinion storage opinion = opinions[_tokenId];\r\n    opinion.deleted=true;\r\n    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n    msg.sender.transfer(purchaseExcess);\r\n  }\r\n  \r\n  // Allows someone to send ether and obtain the (unclaimed only) token\r\n  function registerOpinion(uint256 _tokenId,string _newOpinion) public payable {\r\n    \r\n    //Set opinion to the new opinion\r\n    _initOpinion(_tokenId,_newOpinion);\r\n    \r\n    address oldOwner = opinionIndexToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n\r\n    uint256 sellingPrice = opinionIndexToPrice[_tokenId];\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice);\r\n    \r\n    uint256 payment = sellingPrice;\r\n    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n    opinionIndexToPrice[_tokenId] = sponsorStartingCost; //initial cost to sponsor\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    ceoAddress.transfer(payment);\r\n\r\n    TokenSold(_tokenId, sellingPrice, opinionIndexToPrice[_tokenId], oldOwner, newOwner, opinions[_tokenId].text);\r\n\r\n    msg.sender.transfer(purchaseExcess);\r\n  }\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    return opinionIndexToPrice[_tokenId];\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    _setCEO(_newCEO);\r\n  }\r\n   function _setCEO(address _newCEO) private{\r\n         require(_newCEO != address(0));\r\n         ceoAddress = _newCEO;\r\n   }\r\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\r\n  /// @param _newCOO The address of the new COO\r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n\r\n    cooAddress = _newCOO;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = opinionIndexToOwner[_tokenId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  /// @param _owner The owner whose celebrity tokens we are interested in.\r\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n  ///  expensive (it walks the entire opinions array looking for opinions belonging to owner),\r\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n  ///  not contract-to-contract calls.\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalOpinions = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 opinionId;\r\n      for (opinionId = 0; opinionId <= totalOpinions; opinionId++) {\r\n        if (opinionIndexToOwner[opinionId] == _owner) {\r\n          result[resultIndex] = opinionId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /// For querying totalSupply of token\r\n  /// @dev Required for ERC-721 compliance.\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return opinions.length;\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n  \r\n//Allows purchase of the entire contract. All revenue provisioned to ceoAddress will go to the new address specified.\r\n//If you contact us following purchase we will transfer domain, website source code etc. to you free of charge, otherwise we will continue to maintain the frontend site for 1 year.\r\nuint256 contractPrice=300 ether;\r\nfunction buyCryptopinions(address _newCEO) payable public{\r\n    require(msg.value >= contractPrice);\r\n    ceoAddress.transfer(msg.value);\r\n    _setCEO(_newCEO);\r\n    _setPrice(9999999 ether);\r\n}\r\nfunction setPrice(uint256 newprice) public onlyCEO{\r\n    _setPrice(newprice);\r\n}\r\nfunction _setPrice(uint256 newprice) private{\r\n    contractPrice=newprice;\r\n}\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return opinionIndexToApproved[_tokenId] == _to;\r\n  }\r\n  \r\n  function _createOpinionSet() private {\r\n      for(uint i = 0; i<numIssued; i++){\r\n        _createOpinion(DEFAULT_TEXT,ceoAddress,startingPrice);\r\n      }\r\n      //startingPrice = SafeMath.mul(startingPrice,stepMultiplier); //increase the price for the next set of tokens\r\n      //currentIssueRemaining=numIssued;\r\n      \r\n  }\r\n  \r\n  //for registering an Opinion\r\n  function _initOpinion(uint256 _tokenId,string _newOpinion) private {\r\n      Opinion storage opinion = opinions[_tokenId];\r\n      opinion.timestamp=now;\r\n      opinion.text=_newOpinion;\r\n      opinion.comment=1;\r\n      require(!opinion.claimed);\r\n        uint256 newprice=SafeMath.mul(stepMultiplier,opinionIndexToPrice[_tokenId]);\r\n        //max price 1 eth\r\n        if(newprice > 0.1 ether){ //max price for a new opinion, 1 ether\r\n            newprice=0.1 ether;\r\n        }\r\n        _createOpinion(\"\",ceoAddress,newprice); //make a new opinion for someone else to buy\r\n        opinion.claimed=true;\r\n      \r\n          //currentIssueRemaining=SafeMath.sub(currentIssueRemaining,1);\r\n          //if this is the last remaining token for sale, issue more\r\n          //if(currentIssueRemaining == 0){\r\n          //    _createOpinionSet();\r\n          //}\r\n      \r\n      \r\n  }\r\n  \r\n  /// For creating Opinion\r\n  function _createOpinion(string _name, address _owner, uint256 _price) private {\r\n    Opinion memory _opinion = Opinion({\r\n      text: _name,\r\n      claimed: false,\r\n      deleted: false,\r\n      comment: 0,\r\n      sponsor: _owner,\r\n      antisponsor: ceoAddress,\r\n      totalsponsored:0,\r\n      totalantisponsored:0,\r\n      timestamp:now\r\n    });\r\n    uint256 newOpinionId = opinions.push(_opinion) - 1;\r\n\r\n    // It's probably never going to happen, 4 billion tokens are A LOT, but\r\n    // let's just be 100% sure we never let this happen.\r\n    require(newOpinionId == uint256(uint32(newOpinionId)));\r\n\r\n    Birth(newOpinionId, _name, _owner);\r\n\r\n    opinionIndexToPrice[newOpinionId] = _price;\r\n\r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transfer(address(0), _owner, newOpinionId);\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == opinionIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// For paying out balance on contract\r\n  function _payout(address _to) private {\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(this.balance);\r\n    } else {\r\n      _to.transfer(this.balance);\r\n    }\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific opinion to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    // Since the number of opinions is capped to 2^32 we can't overflow this\r\n    ownershipTokenCount[_to]++;\r\n    //transfer ownership\r\n    opinionIndexToOwner[_tokenId] = _to;\r\n\r\n    // When creating new opinions _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete opinionIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n}\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"opinionIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"opinionIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tocheck\",\"type\":\"string\"}],\"name\":\"hasDuplicate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_TEXT\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOpinion\",\"outputs\":[{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"sponsor\",\"type\":\"address\"},{\"name\":\"antisponsor\",\"type\":\"address\"},{\"name\":\"amountsponsored\",\"type\":\"uint256\"},{\"name\":\"amountantisponsored\",\"type\":\"uint256\"},{\"name\":\"acomment\",\"type\":\"uint8\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"opinionText\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"deleteThis\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newprice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tocheck\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"hasPriorDuplicate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"string\"},{\"name\":\"b\",\"type\":\"string\"}],\"name\":\"compareStrings\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_newOpinion\",\"type\":\"string\"}],\"name\":\"registerOpinion\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"comment\",\"type\":\"uint8\"},{\"name\":\"_likesOpinion\",\"type\":\"bool\"}],\"name\":\"sponsorOpinion\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"buyCryptopinions\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createInitialItems\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"OpinionToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b757091e3a976fe4046bd5e0e815543cc6e31d1657a6609b85eb90400b498216"}]}