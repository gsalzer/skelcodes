{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n  function totalSupply() public constant returns (uint);\r\n  function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\ncontract ERC827 {\r\n\r\n  function approve( address _spender, uint256 _value, bytes _data ) public returns (bool);\r\n  function transfer( address _to, uint256 _value, bytes _data ) public returns (bool);\r\n  function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool);\r\n\r\n}\r\n\r\n\r\ncontract TEFoodsToken is Ownable, ERC20Interface {\r\n\r\n  using SafeMath for uint;\r\n\r\n  string public constant name = \"TEFOOD FARM TO FORK FOOD TRACEABILITY SYSTEM LICENSE TOKEN\";\r\n  string public constant symbol = \"TFOOD\";\r\n  uint8 public constant decimals = 18;\r\n  uint constant _totalSupply = 1000000000 * 1 ether;\r\n  uint public transferrableTime = 1521712800;\r\n  uint _vestedSupply;\r\n  uint _circulatingSupply;\r\n  mapping (address => uint) balances;\r\n  mapping (address => mapping(address => uint)) allowed;\r\n\r\n  struct vestedBalance {\r\n    address addr;\r\n    uint balance;\r\n  }\r\n  mapping (uint => vestedBalance[]) vestingMap;\r\n\r\n\r\n\r\n  function TEFoodsToken () public {\r\n    owner = msg.sender;\r\n    balances[0x00] = _totalSupply;\r\n  }\r\n\r\n  event VestedTokensReleased(address to, uint amount);\r\n\r\n  function allocateTokens (address addr, uint amount) public onlyOwner returns (bool) {\r\n    require (addr != 0x00);\r\n    require (amount > 0);\r\n    balances[0x00] = balances[0x00].sub(amount);\r\n    balances[addr] = balances[addr].add(amount);\r\n    _circulatingSupply = _circulatingSupply.add(amount);\r\n    assert (_vestedSupply.add(_circulatingSupply).add(balances[0x00]) == _totalSupply);\r\n    return true;\r\n  }\r\n\r\n  function allocateVestedTokens (address addr, uint amount, uint vestingPeriod) public onlyOwner returns (bool) {\r\n    require (addr != 0x00);\r\n    require (amount > 0);\r\n    require (vestingPeriod > 0);\r\n    balances[0x00] = balances[0x00].sub(amount);\r\n    vestingMap[vestingPeriod].push( vestedBalance (addr,amount) );\r\n    _vestedSupply = _vestedSupply.add(amount);\r\n    assert (_vestedSupply.add(_circulatingSupply).add(balances[0x00]) == _totalSupply);\r\n    return true;\r\n  }\r\n\r\n  function releaseVestedTokens (uint vestingPeriod) public {\r\n    require (now >= transferrableTime.add(vestingPeriod));\r\n    require (vestingMap[vestingPeriod].length > 0);\r\n    require (vestingMap[vestingPeriod][0].balance > 0);\r\n    var v = vestingMap[vestingPeriod];\r\n    for (uint8 i = 0; i < v.length; i++) {\r\n      balances[v[i].addr] = balances[v[i].addr].add(v[i].balance);\r\n      _circulatingSupply = _circulatingSupply.add(v[i].balance);\r\n      _vestedSupply = _vestedSupply.sub(v[i].balance);\r\n      v[i].balance = 0;\r\n      VestedTokensReleased(v[i].addr, v[i].balance);\r\n    }\r\n  }\r\n\r\n  function enableTransfers () public onlyOwner returns (bool) {\r\n    if (now.add(86400) < transferrableTime) {\r\n      transferrableTime = now.add(86400);\r\n    }\r\n    owner = 0x00;\r\n    return true;\r\n  }\r\n\r\n  function () public payable {\r\n    revert();\r\n  }\r\n\r\n  function totalSupply() public constant returns (uint) {\r\n    return _circulatingSupply;\r\n  }\r\n\r\n  function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n    return balances[tokenOwner];\r\n  }\r\n\r\n  function vestedBalanceOf(address tokenOwner, uint vestingPeriod) public constant returns (uint balance) {\r\n    var v = vestingMap[vestingPeriod];\r\n    for (uint8 i = 0; i < v.length; i++) {\r\n      if (v[i].addr == tokenOwner) return v[i].balance;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n\r\n  function transfer(address to, uint tokens) public returns (bool success) {\r\n    require (now >= transferrableTime);\r\n    require (to != address(this));\r\n    require (balances[msg.sender] >= tokens);\r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    Transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n\r\n  function approve(address spender, uint tokens) public returns (bool success) {\r\n    require (spender != address(this));\r\n    allowed[msg.sender][spender] = tokens;\r\n    Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n    require (now >= transferrableTime);\r\n    require (to != address(this));\r\n    require (allowed[from][msg.sender] >= tokens);\r\n    balances[from] = balances[from].sub(tokens);\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    Transfer(from, to, tokens);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract TEFoods827Token is TEFoodsToken, ERC827 {\r\n\r\n  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\r\n    super.approve(_spender, _value);\r\n    require(_spender.call(_data));\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\r\n    super.transfer(_to, _value);\r\n    require(_to.call(_data));\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\r\n    super.transferFrom(_from, _to, _value);\r\n    require(_to.call(_data));\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract TEFoodsCrowdsale is Ownable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  TEFoods827Token public tokenContract;\r\n\r\n  uint public constant crowdsaleStartTime = 1519293600;\r\n  uint public constant crowdsaleUncappedTime = 1519336800;\r\n  uint public constant crowdsaleClosedTime = 1521712800;\r\n  uint public maxGasPriceInWei = 50000000000;\r\n  uint public constant contributionCapInWei = 1000000000000000000;\r\n  address public constant teFoodsAddress = 0x27Ca683EdeAB8D03c6B5d7818f78Ba27a2025159;\r\n\r\n  uint public constant tokenRateInUsdCents = 5;\r\n  uint public constant ethRateInUsdCents = 92500;\r\n  uint public constant amountToRaiseInUsdCents = 1910000000;\r\n  uint public constant minContributionInUsdCents = 10000;\r\n\r\n  uint[4] public tokenBonusTimes = [1519898400,1520503200,1521108000,1521712800];\r\n  uint[4] public tokenBonusPct = [15,12,10,5];\r\n\r\n  uint public whitelistedAddressCount;\r\n  uint public contributorCount;\r\n  bool public crowdsaleFinished;\r\n  uint public amountRaisedInUsdCents;\r\n\r\n  uint public constant totalTokenSupply = 1000000000 * 1 ether;\r\n  uint public tokensAllocated;\r\n\r\n  uint public constant marketingTokenAllocation = 60000000 * 1 ether;\r\n  uint public marketingTokensDistributed;\r\n\r\n  mapping (address => bool) presaleAllocated;\r\n  mapping (address => bool) marketingAllocated;\r\n\r\n  struct Contributor {\r\n    bool authorised;\r\n    bool contributed;\r\n  }\r\n  mapping (address => Contributor) whitelist;\r\n\r\n\r\n  event PresaleAllocation(address to, uint usdAmount, uint tokenAmount);\r\n  event MarketingAllocation(address to, uint tokenAmount);\r\n  event CrowdsaleClosed(uint usdRaisedInCents);\r\n  event TokensTransferrable();\r\n\r\n  function TEFoodsCrowdsale () public {\r\n    require (teFoodsAddress != 0x00);\r\n    tokenContract = new TEFoods827Token();\r\n  }\r\n\r\n  function allocatePresaleTokens (address recipient, uint amountInUsdCents, uint bonusPct, uint vestingPeriodInSeconds) public onlyOwner  {\r\n    require (now < crowdsaleStartTime);\r\n    require (!presaleAllocated[recipient]);\r\n    uint tokenAmount = amountInUsdCents.mul(1 ether).div(tokenRateInUsdCents);\r\n    uint bonusAmount = tokenAmount.mul(bonusPct).div(100);\r\n\r\n    if (vestingPeriodInSeconds > 0) {\r\n      require (tokenContract.allocateTokens(recipient, tokenAmount));\r\n      require (tokenContract.allocateVestedTokens(recipient, bonusAmount, vestingPeriodInSeconds));\r\n    } else {\r\n      require (tokenContract.allocateTokens(recipient, tokenAmount.add(bonusAmount)));\r\n    }\r\n    amountRaisedInUsdCents = amountRaisedInUsdCents.add(amountInUsdCents);\r\n    tokensAllocated = tokensAllocated.add(tokenAmount).add(bonusAmount);\r\n    presaleAllocated[recipient] = true;\r\n    PresaleAllocation(recipient, amountInUsdCents, tokenAmount.add(bonusAmount));\r\n  }\r\n\r\n  function allocateMarketingTokens (address recipient, uint tokenAmount) public onlyOwner {\r\n    require (!marketingAllocated[recipient]);\r\n    require (marketingTokensDistributed.add(tokenAmount) <= marketingTokenAllocation);\r\n    marketingTokensDistributed = marketingTokensDistributed.add(tokenAmount);\r\n    tokensAllocated = tokensAllocated.add(tokenAmount);\r\n    require (tokenContract.allocateTokens(recipient, tokenAmount));\r\n    marketingAllocated[recipient] = true;\r\n    MarketingAllocation(recipient, tokenAmount);\r\n  }\r\n\r\n  function whitelistUsers (address[] addressList) public onlyOwner {\r\n    require (now < crowdsaleStartTime);\r\n    for (uint8 i = 0; i < addressList.length; i++) {\r\n      require (!whitelist[i].authorised);\r\n      whitelist[addressList[i]].authorised = true;\r\n    }\r\n    whitelistedAddressCount = whitelistedAddressCount.add(addressList.length);\r\n  }\r\n\r\n  function revokeUsers (address[] addressList) public onlyOwner {\r\n    require (now < crowdsaleStartTime);\r\n    for (uint8 i = 0; i < addressList.length; i++) {\r\n      require (whitelist[i].authorised);\r\n      whitelist[addressList[i]].authorised = false;\r\n    }\r\n    whitelistedAddressCount = whitelistedAddressCount.sub(addressList.length);\r\n  }\r\n\r\n  function setMaxGasPrice (uint newMaxInWei) public onlyOwner {\r\n    require(newMaxInWei >= 1000000000);\r\n    maxGasPriceInWei = newMaxInWei;\r\n  }\r\n\r\n  function checkWhitelisted (address addr) public view returns (bool) {\r\n    return whitelist[addr].authorised;\r\n  }\r\n\r\n  function isOpen () public view returns (bool) {\r\n    return (now >= crowdsaleStartTime && !crowdsaleFinished && now < crowdsaleClosedTime);\r\n  }\r\n\r\n\r\n  function getRemainingEthAvailable () public view returns (uint) {\r\n    if (crowdsaleFinished || now > crowdsaleClosedTime) return 0;\r\n    return amountToRaiseInUsdCents.sub(amountRaisedInUsdCents).mul(1 ether).div(ethRateInUsdCents);\r\n  }\r\n\r\n  function _applyBonus (uint amount) internal view returns (uint) {\r\n    for (uint8 i = 0; i < 3; i++) {\r\n      if (tokenBonusTimes[i] > now) {\r\n        return amount.add(amount.mul(tokenBonusPct[i]).div(100));\r\n      }\r\n    }\r\n    return amount.add(amount.mul(tokenBonusPct[3]).div(100));\r\n  }\r\n\r\n  function _allocateTokens(address addr, uint amount) internal {\r\n    require (tokensAllocated.add(amount) <= totalTokenSupply);\r\n    tokensAllocated = tokensAllocated.add(amount);\r\n    teFoodsAddress.transfer(this.balance);\r\n    if (!whitelist[addr].contributed) {\r\n      whitelist[addr].contributed = true;\r\n      contributorCount = contributorCount.add(1);\r\n    }\r\n    require(tokenContract.allocateTokens(addr, amount));\r\n  }\r\n\r\n  function () public payable {\r\n    require (tx.gasprice <= maxGasPriceInWei);\r\n    require (msg.value > 0);\r\n    require (now >= crowdsaleStartTime && now <= crowdsaleClosedTime);\r\n    require (whitelist[msg.sender].authorised);\r\n    require (!crowdsaleFinished);\r\n    if (now < crowdsaleUncappedTime) {\r\n      require (!whitelist[msg.sender].contributed);\r\n      require (msg.value <= contributionCapInWei);\r\n    }\r\n    uint usdAmount = msg.value.mul(ethRateInUsdCents).div(1 ether);\r\n    require (usdAmount >= minContributionInUsdCents);\r\n    uint tokenAmount = _applyBonus(msg.value.mul(ethRateInUsdCents).div(tokenRateInUsdCents));\r\n    amountRaisedInUsdCents = amountRaisedInUsdCents.add(usdAmount);\r\n    if (amountRaisedInUsdCents >= amountToRaiseInUsdCents) {\r\n      closeCrowdsale();\r\n    } else {\r\n      _allocateTokens(msg.sender, tokenAmount);\r\n    }\r\n  }\r\n\r\n  function closeCrowdsale () public {\r\n    require (!crowdsaleFinished);\r\n    require (now >= crowdsaleStartTime);\r\n    require (msg.sender == owner || amountRaisedInUsdCents >= amountToRaiseInUsdCents);\r\n    crowdsaleFinished = true;\r\n\r\n    if (msg.value > 0 && amountRaisedInUsdCents >= amountToRaiseInUsdCents) {\r\n\r\n      uint excessEth = amountRaisedInUsdCents.sub(amountToRaiseInUsdCents).mul(1 ether).div(ethRateInUsdCents);\r\n      uint tokenAmount = _applyBonus(msg.value.sub(excessEth).mul(ethRateInUsdCents).div(tokenRateInUsdCents));\r\n      amountRaisedInUsdCents = amountToRaiseInUsdCents;\r\n      msg.sender.transfer(excessEth);\r\n      _allocateTokens(msg.sender, tokenAmount);\r\n    } else if ( amountRaisedInUsdCents < amountToRaiseInUsdCents) {\r\n      tokenAmount = amountToRaiseInUsdCents.sub(amountRaisedInUsdCents).mul(1 ether).div(tokenRateInUsdCents);\r\n      tokensAllocated = tokensAllocated.add(tokenAmount); // burn\r\n    }\r\n    CrowdsaleClosed(amountRaisedInUsdCents);\r\n  }\r\n\r\n  function enableTokenTransfers () public onlyOwner {\r\n    require (crowdsaleFinished);\r\n    require (marketingTokensDistributed == marketingTokenAllocation);\r\n    uint remainingTokens = totalTokenSupply.sub(tokensAllocated);\r\n    uint oneYear = remainingTokens.mul(25).div(100);\r\n    uint twoYears = remainingTokens.sub(oneYear);\r\n    tokensAllocated = tokensAllocated.add(remainingTokens);\r\n    require (tokenContract.allocateVestedTokens(teFoodsAddress, oneYear, 31536000));\r\n    require (tokenContract.allocateVestedTokens(teFoodsAddress, twoYears, 63072000));\r\n    require (tokenContract.enableTransfers());\r\n    TokensTransferrable();\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenBonusPct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTokenTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRateInUsdCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"allocateMarketingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountToRaiseInUsdCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingTokenAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleUncappedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContributionInUsdCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistedAddressCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressList\",\"type\":\"address[]\"}],\"name\":\"revokeUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaisedInUsdCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teFoodsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRateInUsdCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingTokensDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenBonusTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPriceInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amountInUsdCents\",\"type\":\"uint256\"},{\"name\":\"bonusPct\",\"type\":\"uint256\"},{\"name\":\"vestingPeriodInSeconds\",\"type\":\"uint256\"}],\"name\":\"allocatePresaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxInWei\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainingEthAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressList\",\"type\":\"address[]\"}],\"name\":\"whitelistUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"PresaleAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"MarketingAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"usdRaisedInCents\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokensTransferrable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TEFoodsCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d5379aecd22d460c38a7096d55fe00093b947671deab5e8f6d575cd6d672266c"}]}