{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.17;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) pure internal returns(uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) pure internal returns(uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) pure internal returns(uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) \r\n            owner = newOwner;\r\n    }\r\n\r\n    function kill() public {\r\n        if (msg.sender == owner) \r\n            selfdestruct(owner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender == owner)\r\n            _;\r\n    }\r\n}\r\n\r\n\r\ncontract Pausable is Ownable {\r\n    bool public stopped;\r\n\r\n    modifier stopInEmergency {\r\n        if (stopped) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyInEmergency {\r\n        if (!stopped) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Called by the owner in emergency, triggers stopped state\r\n    function emergencyStop() external onlyOwner() {\r\n        stopped = true;\r\n    }\r\n\r\n    // Called by the owner to end of emergency, returns to normal state\r\n    function release() external onlyOwner() onlyInEmergency {\r\n        stopped = false;\r\n    }\r\n}\r\n\r\n\r\n// Crowdsale Smart Contract\r\n// This smart contract collects ETH and in return sends tokens to contributors\r\ncontract Crowdsale is Pausable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    struct Backer {\r\n        uint weiReceived; // amount of ETH contributed\r\n        uint tokensSent; // amount of tokens  sent  \r\n        bool refunded; // true if user has been refunded       \r\n    }\r\n\r\n    Token public token; // Token contract reference   \r\n    address public multisig; // Multisig contract that will receive the ETH    \r\n    address public team; // Address at which the team tokens will be sent        \r\n    uint public ethReceivedPresale; // Number of ETH received in presale\r\n    uint public ethReceivedMain; // Number of ETH received in public sale\r\n    uint public totalTokensSent; // Number of tokens sent to ETH contributors\r\n    uint public startBlock; // Crowdsale start block\r\n    uint public endBlock; // Crowdsale end block\r\n    uint public maxCap; // Maximum number of tokens to sell\r\n    uint public minCap; // Minimum number of ETH to raise\r\n    uint public minInvestETH; // Minimum amount to invest   \r\n    bool public crowdsaleClosed; // Is crowdsale still in progress\r\n    Step public currentStep;  // to allow for controled steps of the campaign \r\n    uint public refundCount;  // number of refunds\r\n    uint public totalRefunded; // total amount of refunds    \r\n    uint public tokenPriceWei;  // price of token in wei\r\n\r\n    mapping(address => Backer) public backers; //backer list\r\n    address[] public backersIndex; // to be able to itarate through backers for verification.  \r\n\r\n    \r\n    // @notice to verify if action is not performed out of the campaing range\r\n    modifier respectTimeFrame() {\r\n        if ((block.number < startBlock) || (block.number > endBlock)) \r\n            revert();\r\n        _;\r\n    }\r\n\r\n    // @notice to set and determine steps of crowdsale\r\n    enum Step {\r\n        Unknown,\r\n        FundingPreSale,     // presale mode\r\n        FundingPublicSale,  // public mode\r\n        Refunding  // in case campaign failed during this step contributors will be able to receive refunds\r\n    }\r\n\r\n    // Events\r\n    event ReceivedETH(address backer, uint amount, uint tokenAmount);\r\n    event RefundETH(address backer, uint amount);\r\n\r\n\r\n    // Crowdsale  {constructor}\r\n    // @notice fired when contract is crated. Initilizes all constnat and initial values.\r\n    function Crowdsale() public {\r\n        multisig = 0xc15464420aC025077Ba280cBDe51947Fc12583D6; \r\n        team = 0xc15464420aC025077Ba280cBDe51947Fc12583D6;                                  \r\n        minInvestETH = 1 ether/100;\r\n        startBlock = 0; // Should wait for the call of the function start\r\n        endBlock = 0; // Should wait for the call of the function start                  \r\n        tokenPriceWei = 1 ether/8000;\r\n        maxCap = 30600000e18;         \r\n        minCap = 900000e18;        \r\n        totalTokensSent = 1253083e18;  \r\n        setStep(Step.FundingPreSale);\r\n    }\r\n\r\n    // @notice to populate website with status of the sale \r\n    function returnWebsiteData() external view returns(uint, uint, uint, uint, uint, uint, uint, uint, Step, bool, bool) {            \r\n    \r\n        return (startBlock, endBlock, backersIndex.length, ethReceivedPresale.add(ethReceivedMain), maxCap, minCap, totalTokensSent, tokenPriceWei, currentStep, stopped, crowdsaleClosed);\r\n    }\r\n\r\n    // @notice in case refunds are needed, money can be returned to the contract\r\n    function fundContract() external payable onlyOwner() returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // @notice Specify address of token contract\r\n    // @param _tokenAddress {address} address of token contract\r\n    // @return res {bool}\r\n    function updateTokenAddress(Token _tokenAddress) external onlyOwner() returns(bool res) {\r\n        token = _tokenAddress;\r\n        return true;\r\n    }\r\n\r\n    // @notice set the step of the campaign \r\n    // @param _step {Step}\r\n    function setStep(Step _step) public onlyOwner() {\r\n        currentStep = _step;\r\n        \r\n        if (currentStep == Step.FundingPreSale) {  // for presale \r\n            tokenPriceWei = 1 ether/8000;  \r\n            minInvestETH = 1 ether/100;                             \r\n        }else if (currentStep == Step.FundingPublicSale) { // for public sale\r\n            tokenPriceWei = 1 ether/5000;   \r\n            minInvestETH = 0;               \r\n        }            \r\n    }\r\n\r\n    // @notice return number of contributors\r\n    // @return  {uint} number of contributors   \r\n    function numberOfBackers() external view returns(uint) {\r\n        return backersIndex.length;\r\n    }\r\n\r\n    // {fallback function}\r\n    // @notice It will call internal function which handels allocation of Ether and calculates tokens.\r\n    function () external payable {           \r\n        contribute(msg.sender);\r\n    }\r\n\r\n    // @notice It will be called by owner to start the sale    \r\n    function start(uint _block) external onlyOwner() {   \r\n\r\n        require(_block < 246528);  // 4.28*60*24*40 days = 246528     \r\n        startBlock = block.number;\r\n        endBlock = startBlock.add(_block); \r\n    }\r\n\r\n    // @notice Due to changing average of block time\r\n    // this function will allow on adjusting duration of campaign closer to the end \r\n    function adjustDuration(uint _block) external onlyOwner() {\r\n\r\n        require(_block < 308160);  // 4.28*60*24*50 days = 308160     \r\n        require(_block > block.number.sub(startBlock)); // ensure that endBlock is not set in the past\r\n        endBlock = startBlock.add(_block); \r\n    }\r\n\r\n    // @notice It will be called by fallback function whenever ether is sent to it\r\n    // @param  _backer {address} address contributor\r\n    // @return res {bool} true if transaction was successful\r\n    function contribute(address _backer) internal stopInEmergency respectTimeFrame returns(bool res) {\r\n    \r\n        require(currentStep == Step.FundingPreSale || currentStep == Step.FundingPublicSale); // ensure that this is correct step\r\n        require(msg.value >= minInvestETH);   // ensure that min contributions amount is met\r\n          \r\n        uint tokensToSend = msg.value.mul(1e18) / tokenPriceWei; // calculate amount of tokens to send  (add 18 0s first)     \r\n        require(totalTokensSent.add(tokensToSend) < maxCap); // Ensure that max cap hasn't been reached  \r\n            \r\n        Backer storage backer = backers[_backer];\r\n    \r\n        if (backer.weiReceived == 0)      \r\n            backersIndex.push(_backer);\r\n           \r\n        backer.tokensSent = backer.tokensSent.add(tokensToSend); // save contributors tokens to be sent\r\n        backer.weiReceived = backer.weiReceived.add(msg.value);  // save how much was the contribution\r\n        totalTokensSent = totalTokensSent.add(tokensToSend);     // update the total amount of tokens sent\r\n    \r\n        if (Step.FundingPublicSale == currentStep)  // Update the total Ether recived\r\n            ethReceivedMain = ethReceivedMain.add(msg.value);\r\n        else\r\n            ethReceivedPresale = ethReceivedPresale.add(msg.value);     \r\n\r\n        if (!token.transfer(_backer, tokensToSend)) \r\n            revert(); // Transfer tokens   \r\n    \r\n        multisig.transfer(this.balance);   // transfer funds to multisignature wallet             \r\n    \r\n        ReceivedETH(_backer, msg.value, tokensToSend); // Register event\r\n        return true;\r\n    }\r\n\r\n    // @notice This function will finalize the sale.\r\n    // It will only execute if predetermined sale time passed or all tokens are sold.\r\n    // it will fail if minimum cap is not reached\r\n    function finalize() external onlyOwner() {\r\n\r\n        require(!crowdsaleClosed);        \r\n        // purchasing precise number of tokens might be impractical, thus subtract 1000 tokens so finalizition is possible\r\n        // near the end \r\n        require(block.number >= endBlock || totalTokensSent >= maxCap.sub(1000));                 \r\n        require(totalTokensSent >= minCap);  // ensure that minimum was reached\r\n\r\n        crowdsaleClosed = true;  \r\n        \r\n        if (!token.transfer(team, token.balanceOf(this))) // transfer all remaing tokens to team address\r\n            revert();\r\n        token.unlock();                      \r\n    }\r\n\r\n    // @notice Failsafe drain\r\n    function drain() external onlyOwner() {\r\n        multisig.transfer(this.balance);               \r\n    }\r\n\r\n    // @notice Failsafe token transfer\r\n    function tokenDrian() external onlyOwner() {\r\n        if (block.number > endBlock) {\r\n            if (!token.transfer(team, token.balanceOf(this))) \r\n                revert();\r\n        }\r\n    }\r\n    \r\n    // @notice it will allow contributors to get refund in case campaign failed\r\n    function refund() external stopInEmergency returns (bool) {\r\n\r\n        require(currentStep == Step.Refunding);         \r\n       \r\n        require(this.balance > 0);  // contract will hold 0 ether at the end of campaign.                                  \r\n                                    // contract needs to be funded through fundContract() \r\n\r\n        Backer storage backer = backers[msg.sender];\r\n\r\n        require(backer.weiReceived > 0);  // esnure that user has sent contribution\r\n        require(!backer.refunded);         // ensure that user hasn't been refunded yet\r\n\r\n        if (!token.returnTokens(msg.sender, backer.tokensSent)) // transfer tokens\r\n            revert();\r\n        backer.refunded = true;  // save refund status to true\r\n    \r\n        refundCount++;\r\n        totalRefunded = totalRefunded.add(backer.weiReceived);\r\n        msg.sender.transfer(backer.weiReceived);  // send back the contribution \r\n        RefundETH(msg.sender, backer.weiReceived);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n   \r\n    function transfer(address to, uint value) public returns(bool ok);  \r\n    function balanceOf(address who) public view returns(uint);\r\n}\r\n\r\n\r\n// The token\r\ncontract Token is ERC20, Ownable {\r\n\r\n    function returnTokens(address _member, uint256 _value) public returns(bool);\r\n    function unlock() public;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfBackers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"returnWebsiteData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethReceivedMain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"adjustDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethReceivedPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"backers\",\"outputs\":[{\"name\":\"weiReceived\",\"type\":\"uint256\"},{\"name\":\"tokensSent\",\"type\":\"uint256\"},{\"name\":\"refunded\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fundContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenDrian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_step\",\"type\":\"uint8\"}],\"name\":\"setStep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"backersIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundETH\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7b5e5f77642d0de340206afc2d07491c07146d4349a022a6db7cb2b55cc37486"}]}