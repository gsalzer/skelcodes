{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/crowdsale/SaleTracker.sol\r\n\r\n/*\r\n This is a simple contract that is used to track incoming payments.\r\n As soon as a payment is received, an event is triggered to log the transaction.\r\n All funds are immediately forwarded to the owner.\r\n The sender must include a payment code as a payload and the contract can conditionally enforce the\r\n sending address matches the payment code.\r\n The payment code is the first 8 bytes of the keccak/sha3 hash of the address that the user has specified in the sale.\r\n*/\r\ncontract SaleTracker is Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  // Event to allow monitoring incoming payments\r\n  event PurchaseMade (address indexed _from, bytes8 _paymentCode, uint256 _value);\r\n\r\n  // Tracking of purchase total in wei made per sending address\r\n  mapping(address => uint256) public purchases;\r\n\r\n  // Tracking of purchaser addresses for lookup offline\r\n  address[] public purchaserAddresses;\r\n\r\n  // Flag to enforce payments source address matching the payment code\r\n  bool public enforceAddressMatch;\r\n\r\n  // Constructor to start the contract in a paused state\r\n  function SaleTracker(bool _enforceAddressMatch) public {\r\n    enforceAddressMatch = _enforceAddressMatch;\r\n    pause();\r\n  }\r\n\r\n  // Setter for the enforce flag - only updatable by the owner\r\n  function setEnforceAddressMatch(bool _enforceAddressMatch) onlyOwner public {\r\n    enforceAddressMatch = _enforceAddressMatch;\r\n  }\r\n\r\n  // Purchase function allows incoming payments when not paused - requires payment code\r\n  function purchase(bytes8 paymentCode) whenNotPaused public payable {\r\n\r\n    // Verify they have sent ETH in\r\n    require(msg.value != 0);\r\n\r\n    // Verify the payment code was included\r\n    require(paymentCode != 0);\r\n\r\n    // If payment from addresses are being enforced, ensure the code matches the sender address\r\n    if (enforceAddressMatch) {\r\n\r\n      // Get the first 8 bytes of the hash of the address\r\n      bytes8 calculatedPaymentCode = bytes8(keccak256(msg.sender));\r\n\r\n      // Fail if the sender code does not match\r\n      require(calculatedPaymentCode == paymentCode);\r\n    }\r\n\r\n    // Save off the existing purchase amount for this user\r\n    uint256 existingPurchaseAmount = purchases[msg.sender];\r\n\r\n    // If they have not purchased before (0 value), then save it off\r\n    if (existingPurchaseAmount == 0) {\r\n      purchaserAddresses.push(msg.sender);\r\n    }\r\n\r\n    // Add the new purchase value to the existing value already being tracked\r\n    purchases[msg.sender] = existingPurchaseAmount.add(msg.value);    \r\n\r\n    // Transfer out to the owner wallet\r\n    owner.transfer(msg.value);\r\n\r\n    // Trigger the event for a new purchase\r\n    PurchaseMade(msg.sender, paymentCode, msg.value);\r\n  }\r\n\r\n  // Allows owner to sweep any ETH somehow trapped in the contract.\r\n  function sweep() onlyOwner public {\r\n    owner.transfer(this.balance);\r\n  }\r\n\r\n  // Get the number of addresses that have contributed to the sale\r\n  function getPurchaserAddressCount() public constant returns (uint) {\r\n    return purchaserAddresses.length;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPurchaserAddressCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enforceAddressMatch\",\"type\":\"bool\"}],\"name\":\"setEnforceAddressMatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enforceAddressMatch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchaserAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paymentCode\",\"type\":\"bytes8\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_enforceAddressMatch\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_paymentCode\",\"type\":\"bytes8\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PurchaseMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SaleTracker","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://58a26481b3c16df2cfaa0d8ea27e177add3b2fccb44377e7fd936e733c75cdd8"}]}