{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n    uint256 constant public MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n\r\n    function safeAdd(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        if (x > MAX_UINT256 - y) revert();\r\n        return x + y;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        if (x < y) revert();\r\n        return x - y;\r\n    }\r\n\r\n    function safeMul(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        if (y == 0) return 0;\r\n        if (x > MAX_UINT256 / y) revert();\r\n        return x * y;\r\n    }\r\n\r\n}\r\n\r\n\r\n//contract for defining owener and to transfer owenership to others\r\ncontract Ownable {\r\n    address public owner; // contract creator will be the owner\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0)); \r\n        owner = newOwner;\r\n    }\r\n}\r\n /* New ERC223 contract interface */\r\n \r\n\r\ncontract ERC223Interface {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n  \r\n\r\n    function transfer(address to, uint256 value, bytes data) public returns (bool ok);\r\n    function transfer(address to, uint256 value, bytes data, string custom_fallback) public returns (bool ok);\r\n  \r\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes indexed data);\r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n    \r\n    function transfer(address to, uint256 value) public returns (bool ok);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\r\n    function approve(address _spender, uint256 _value) public returns(bool success);\r\n    function allowance(address _owner, address _spender) public constant returns(uint256 remaining);\r\n\r\n}\r\n\r\n\r\ncontract ContractReceiver {\r\n     \r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n        \r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public pure {\r\n        TKN memory tkn;\r\n        tkn.sender = _from;\r\n        tkn.value = _value;\r\n        tkn.data = _data;\r\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n        tkn.sig = bytes4(u);\r\n      \r\n      /* tkn variable is analogue of msg variable of Ether transaction\r\n      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\r\n      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\r\n      *  tkn.data is data of token transaction   (analogue of msg.data)\r\n      *  tkn.sig is 4 bytes signature of function\r\n      *  if data of token transaction is a function execution\r\n      */\r\n    }\r\n}\r\n\r\n\r\ncontract StandardToken is ERC223Interface, ERC20Interface, SafeMath, ContractReceiver {\r\n    mapping(address => uint) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n    \r\n        balances[_from] = safeSub(balanceOf(_from), _value); \r\n    \r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n        allowed[_from][msg.sender] = safeSub(_allowance, _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n  }\r\n\r\n    // @dev function to increaseApproval to the spender\r\n  function increaseApproval (address _spender, uint256 _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender],_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  // @dev function to decreaseApproval to spender\r\n  function decreaseApproval (address _spender, uint256 _subtractedValue) public returns (bool success) {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = safeSub(oldValue,_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  \r\n  \r\n  //@dev  function that is called when a user or another contract wants to transfer funds .\r\n    function transfer(address _to, uint256 _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\n        if (isContract(_to)) {\r\n            if (balanceOf(msg.sender) < _value) {  \r\n                revert();\r\n            }\r\n            balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n            balances[_to] = safeAdd(balanceOf(_to), _value);\r\n            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n            emit Transfer(msg.sender, _to, _value, _data);\r\n            return true;\r\n        }\r\n        else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n  \r\n  // Function that is called when a user or another contract wants to transfer funds .\r\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\r\n    \r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        }\r\n        else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n  \r\n  // Standard function transfer similar to ERC20 transfer with no _data .\r\n  // Added due to backwards compatibility reasons .\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n      \r\n    //standard function transfer similar to ERC20 transfer with no _data\r\n    //added due to backwards compatibility reasons\r\n        bytes memory empty;\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        }\r\n        else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n\r\n  //function that is called when transaction target is an address\r\n    function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool) {\r\n        \r\n        if (balanceOf(msg.sender) < _value) revert();\r\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n  \r\n  //function that is called when transaction target is a contract\r\n    function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool success) {\r\n        if (balanceOf(msg.sender) < _value) revert();\r\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\n// @dev contract that can burn tokens or can reduce the totalSupply tokens\r\ncontract BurnableToken is StandardToken,Ownable {\r\n    event Burn(address indexed burner, uint256 value);\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n\r\n    function burn(uint256 _value)  onlyOwner public  returns (bool) {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n        address burner = msg.sender;\r\n        balances[burner] = safeSub(balances[burner], _value);\r\n        totalSupply = safeSub(totalSupply, _value);\r\n        emit Burn(burner, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n */\r\n\r\ncontract MintableToken is BurnableToken {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        bytes memory empty;\r\n\r\n        require ( _amount > 0);\r\n\r\n        // if (balanceOf(msg.sender) < _value) revert();\r\n        // if( safeAdd(circulatingCoins, _amount) > totalSupply ) revert();\r\n        \r\n        totalSupply = safeAdd(totalSupply, _amount);\r\n        balances[_to] = safeAdd(balances[_to], _amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount, empty);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract EMIToken is StandardToken, MintableToken {\r\n    string public name = \"EMITOKEN\";\r\n    string public symbol = \"EMI\";\r\n    uint8 public decimals = 8;\r\n    uint256 public initialSupply = 600000000 * (10 ** uint256(decimals));\r\n    function EMIToken() public{\r\n\r\n        totalSupply = initialSupply;\r\n        balances[msg.sender] = initialSupply; // Send all tokens to owner\r\n\r\n        emit Transfer(0x0, msg.sender, initialSupply);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"EMIToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f8e9371992cc241ef9b528ea6b8cf1230d0a83dddae0cc18c8d13002bc2aa265"}]}