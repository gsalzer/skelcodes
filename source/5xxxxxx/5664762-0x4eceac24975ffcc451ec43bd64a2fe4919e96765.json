{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function _burn(address _burner, uint256 _value) internal {\r\n        require(_value <= balances[_burner]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[_burner] = balances[_burner].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        Burn(_burner, _value);\r\n        Transfer(_burner, address(0), _value);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract DividendPayoutToken is BurnableToken, MintableToken {\r\n\r\n    // Dividends already claimed by investor\r\n    mapping(address => uint256) public dividendPayments;\r\n    // Total dividends claimed by all investors\r\n    uint256 public totalDividendPayments;\r\n\r\n    // invoke this function after each dividend payout\r\n    function increaseDividendPayments(address _investor, uint256 _amount) onlyOwner public {\r\n        dividendPayments[_investor] = dividendPayments[_investor].add(_amount);\r\n        totalDividendPayments = totalDividendPayments.add(_amount);\r\n    }\r\n\r\n    //When transfer tokens decrease dividendPayments for sender and increase for receiver\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n\r\n        // balance before transfer\r\n        uint256 oldBalanceFrom = balances[msg.sender];\r\n\r\n        // invoke super function with requires\r\n        bool isTransferred = super.transfer(_to, _value);\r\n\r\n        uint256 transferredClaims = dividendPayments[msg.sender].mul(_value).div(oldBalanceFrom);\r\n        dividendPayments[msg.sender] = dividendPayments[msg.sender].sub(transferredClaims);\r\n        dividendPayments[_to] = dividendPayments[_to].add(transferredClaims);\r\n\r\n        return isTransferred;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\r\n        // balance before transfer\r\n        uint256 oldBalanceFrom = balances[_from];\r\n\r\n        // invoke super function with requires\r\n        bool isTransferred = super.transferFrom(_from, _to, _value);\r\n\r\n        uint256 transferredClaims = dividendPayments[_from].mul(_value).div(oldBalanceFrom);\r\n        dividendPayments[_from] = dividendPayments[_from].sub(transferredClaims);\r\n        dividendPayments[_to] = dividendPayments[_to].add(transferredClaims);\r\n\r\n        return isTransferred;\r\n    }\r\n\r\n    function burn() public {\r\n\r\n        address burner = msg.sender;\r\n\r\n        // balance before burning tokens\r\n        uint256 oldBalance = balances[burner];\r\n\r\n        super._burn(burner, oldBalance);\r\n\r\n        uint256 burnedClaims = dividendPayments[burner];\r\n        dividendPayments[burner] = dividendPayments[burner].sub(burnedClaims);\r\n        totalDividendPayments = totalDividendPayments.sub(burnedClaims);\r\n\r\n        SaleInterface(owner).refund(burner);\r\n    }\r\n\r\n}\r\n\r\ncontract RicoToken is DividendPayoutToken {\r\n\r\n    string public constant name = \"CFE\";\r\n\r\n    string public constant symbol = \"CFE\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n}\r\n\r\n\r\n// Interface for PreSale and CrowdSale contracts with refund function\r\ncontract SaleInterface {\r\n\r\n    function refund(address _to) public;\r\n\r\n}\r\n\r\n\r\ncontract ReentrancyGuard {\r\n\r\n    /**\r\n     * @dev We use a single lock for the whole contract.\r\n     */\r\n    bool private reentrancy_lock = false;\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * @notice If you mark a function `nonReentrant`, you should also\r\n     * mark it `external`. Calling one nonReentrant function from\r\n     * another is not supported. Instead, you can implement a\r\n     * `private` function doing the actual work, and a `external`\r\n     * wrapper marked as `nonReentrant`.\r\n     */\r\n    modifier nonReentrant() {\r\n\r\n        require(!reentrancy_lock);\r\n        reentrancy_lock = true;\r\n        _;\r\n        reentrancy_lock = false;\r\n    }\r\n\r\n}\r\n\r\ncontract PreSale is Ownable, ReentrancyGuard {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    RicoToken public token;\r\n    address tokenContractAddress;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // Address where funds are transferred after success end of PreSale\r\n    address public wallet;\r\n\r\n    // How many token units a buyer gets per wei\r\n    uint256 public rate;\r\n\r\n    uint256 public minimumInvest; // in wei\r\n\r\n    uint256 public softCap; // in wei\r\n    uint256 public hardCap; // in wei\r\n\r\n    // investors => amount of money\r\n    mapping(address => uint) public balances;\r\n\r\n    // Amount of wei raised\r\n    uint256 public weiRaised;\r\n\r\n    // PreSale bonus in percent\r\n    uint256 bonusPercent;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    function PreSale(\r\n        uint256 _startTime,\r\n        uint256 _period,\r\n        address _wallet,\r\n        address _token,\r\n        uint256 _minimumInvest) public\r\n    {\r\n        require(_period != 0);\r\n        require(_token != address(0));\r\n\r\n        startTime = _startTime;\r\n        endTime = startTime + _period * 1 days;\r\n\r\n        wallet = _wallet;\r\n        token = RicoToken(_token);\r\n        tokenContractAddress = _token;\r\n\r\n        // minimumInvest in wei\r\n        minimumInvest = _minimumInvest;\r\n\r\n        // 1 token for approximately 0,000666666666667 eth\r\n        rate = 1000;\r\n\r\n        softCap = 150 * 1 ether;\r\n        hardCap = 1500 * 1 ether;\r\n        bonusPercent = 50;\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    modifier saleIsOn() {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        require(withinPeriod);\r\n        _;\r\n    }\r\n\r\n    modifier isUnderHardCap() {\r\n        require(weiRaised < hardCap);\r\n        _;\r\n    }\r\n\r\n    modifier refundAllowed() {\r\n        require(weiRaised < softCap && now > endTime);\r\n        _;\r\n    }\r\n\r\n    // @return true if PreSale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return now > endTime;\r\n    }\r\n\r\n    // Refund ether to the investors (invoke from only token)\r\n    function refund(address _to) public refundAllowed {\r\n        require(msg.sender == tokenContractAddress);\r\n\r\n        uint256 valueToReturn = balances[_to];\r\n\r\n        // update states\r\n        balances[_to] = 0;\r\n        weiRaised = weiRaised.sub(valueToReturn);\r\n\r\n        _to.transfer(valueToReturn);\r\n    }\r\n\r\n    // Get amount of tokens\r\n    // @param value weis paid for tokens\r\n    function getTokenAmount(uint256 _value) internal view returns (uint256) {\r\n        return _value.mul(rate);\r\n    }\r\n\r\n    // Send weis to the wallet\r\n    function forwardFunds(uint256 _value) internal {\r\n        wallet.transfer(_value);\r\n    }\r\n\r\n    // Success finish of PreSale\r\n    function finishPreSale() public onlyOwner {\r\n        require(weiRaised >= softCap);\r\n        require(weiRaised >= hardCap || now > endTime);\r\n\r\n        if (now < endTime) {\r\n            endTime = now;\r\n        }\r\n\r\n        forwardFunds(this.balance);\r\n        token.transferOwnership(owner);\r\n    }\r\n\r\n    // Change owner of token after end of PreSale if Soft Cap has not raised\r\n    function changeTokenOwner() public onlyOwner {\r\n        require(now > endTime && weiRaised < softCap);\r\n        token.transferOwnership(owner);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address _beneficiary) saleIsOn isUnderHardCap nonReentrant public payable {\r\n        require(_beneficiary != address(0));\r\n        require(msg.value >= minimumInvest);\r\n\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = getTokenAmount(weiAmount);\r\n        tokens = tokens.add(tokens.mul(bonusPercent).div(100));\r\n\r\n        token.mint(_beneficiary, tokens);\r\n\r\n        // update states\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        balances[_beneficiary] = balances[_beneficiary].add(weiAmount);\r\n\r\n        TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n    }\r\n\r\n    function() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract rICO is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    RicoToken public token;\r\n    address tokenContractAddress;\r\n\r\n    // PreSale\r\n    PreSale public preSale;\r\n\r\n    // Timestamps of periods\r\n    uint256 public startTime;\r\n    uint256 public endCrowdSaleTime;\r\n    uint256 public endRefundableTime;\r\n\r\n\r\n    // Address where funds are transferred\r\n    address public wallet;\r\n\r\n    // How many token units a buyer gets per wei\r\n    uint256 public rate;\r\n\r\n    uint256 public minimumInvest; // in wei\r\n\r\n    uint256 public softCap; // in wei\r\n    uint256 public hardCap; // in wei\r\n\r\n    // investors => amount of money\r\n    mapping(address => uint) public balances;\r\n    mapping(address => uint) public balancesInToken;\r\n\r\n    // Amount of wei raised\r\n    uint256 public weiRaised;\r\n\r\n    // Rest amount of wei after refunding by investors and withdraws by owner\r\n    uint256 public restWei;\r\n\r\n    // Amount of wei which reserved for withdraw by owner\r\n    uint256 public reservedWei;\r\n\r\n    // stages of Refundable part\r\n    bool public firstStageRefund = false;  // allow 500 eth to withdraw\r\n    bool public secondStageRefund = false;  // allow 30 percent of rest wei to withdraw\r\n    bool public finalStageRefund = false;  // allow all rest wei to withdraw\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    function rICO(\r\n        address _token,\r\n        address _preSale) public\r\n    {\r\n        require(_token != address(0));\r\n\r\n        startTime = 1527665400;\r\n        endCrowdSaleTime = startTime + 61 * 1 days;\r\n        endRefundableTime = endCrowdSaleTime + 108 * 1 days;\r\n\r\n        wallet = 0x861C0465A4A035Ec9E0ab64B6c91ffc7CC1eDA64;\r\n        token = RicoToken(_token);\r\n        tokenContractAddress = _token;\r\n        preSale = PreSale(_preSale);\r\n\r\n        // minimumInvest in wei\r\n        minimumInvest = 100000000000000000;\r\n\r\n        // 1 token rate\r\n        rate = 1000;\r\n\r\n        softCap = 1500 * 1 ether;\r\n        hardCap = 15000 * 1 ether;\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    modifier saleIsOn() {\r\n        bool withinPeriod = now >= startTime && now <= endCrowdSaleTime;\r\n        require(withinPeriod);\r\n        _;\r\n    }\r\n\r\n    modifier isUnderHardCap() {\r\n        require(weiRaised.add(preSale.weiRaised()) < hardCap);\r\n        _;\r\n    }\r\n\r\n    // @return true if CrowdSale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return now > endRefundableTime;\r\n    }\r\n\r\n    // Get bonus percent\r\n    function getBonusPercent() internal view returns(uint256) {\r\n        uint256 collectedWei = weiRaised.add(preSale.weiRaised());\r\n\r\n        if (collectedWei < 1500 * 1 ether) {\r\n            return 20;\r\n        }\r\n        if (collectedWei < 5000 * 1 ether) {\r\n            return 10;\r\n        }\r\n        if (collectedWei < 10000 * 1 ether) {\r\n            return 5;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    // Get real value to return to investor\r\n    function getRealValueToReturn(uint256 _value) internal view returns(uint256) {\r\n        return _value.mul(restWei).div(weiRaised);\r\n    }\r\n\r\n    // Update of reservedWei for withdraw\r\n    function updateReservedWei() public {\r\n        \r\n        require(weiRaised.add(preSale.weiRaised()) >= softCap && now > endCrowdSaleTime);\r\n\r\n        uint256 curWei;\r\n\r\n        if (!firstStageRefund && now > endCrowdSaleTime) {\r\n            curWei = 500 * 1 ether;\r\n\r\n            reservedWei = curWei;\r\n            restWei = weiRaised.sub(curWei);\r\n\r\n            firstStageRefund = true;\r\n        }\r\n\r\n        if (!secondStageRefund && now > endCrowdSaleTime + 77 * 1 days) {\r\n            curWei = restWei.mul(30).div(100);\r\n\r\n            reservedWei = reservedWei.add(curWei);\r\n            restWei = restWei.sub(curWei);\r\n\r\n            secondStageRefund = true;\r\n        }\r\n\r\n        if (!finalStageRefund && now > endRefundableTime) {\r\n            reservedWei = reservedWei.add(restWei);\r\n            restWei = 0;\r\n\r\n            finalStageRefund = true;\r\n        }\r\n\r\n    }\r\n\r\n    // Refund ether to the investors (invoke from only token)\r\n    function refund(address _to) public {\r\n        require(msg.sender == tokenContractAddress);\r\n        require(weiRaised.add(preSale.weiRaised()) < softCap && now > endCrowdSaleTime\r\n        || weiRaised.add(preSale.weiRaised()) >= softCap && now > endCrowdSaleTime && now <= endRefundableTime);\r\n\r\n\r\n        // unsuccessful end of CrowdSale\r\n        if (weiRaised.add(preSale.weiRaised()) < softCap && now > endCrowdSaleTime) {\r\n            refundAll(_to);\r\n            return;\r\n        }\r\n\r\n        // successful end of CrowdSale\r\n        if (weiRaised.add(preSale.weiRaised()) >= softCap && now > endCrowdSaleTime && now <= endRefundableTime) {\r\n            refundPart(_to);\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    // Refund ether to the investors in case of unsuccessful end of CrowdSale\r\n    function refundAll(address _to) internal {\r\n        uint256 valueToReturn = balances[_to];\r\n\r\n        // update states\r\n        balances[_to] = 0;\r\n        balancesInToken[_to] = 0;\r\n        weiRaised = weiRaised.sub(valueToReturn);\r\n\r\n        _to.transfer(valueToReturn);\r\n    }\r\n\r\n    // Refund part of ether to the investors in case of successful end of CrowdSale\r\n    function refundPart(address _to) internal {\r\n        uint256 valueToReturn = balances[_to];\r\n\r\n        // get real value to return\r\n        updateReservedWei();\r\n        valueToReturn = getRealValueToReturn(valueToReturn);\r\n\r\n        // update states\r\n        balances[_to] = 0;\r\n        balancesInToken[_to] = 0;\r\n        restWei = restWei.sub(valueToReturn);\r\n\r\n        _to.transfer(valueToReturn);\r\n    }\r\n\r\n    // Get amount of tokens\r\n    // @param value weis paid for tokens\r\n    function getTokenAmount(uint256 _value) internal view returns (uint256) {\r\n        return _value.mul(rate);\r\n    }\r\n\r\n    // Send weis to the wallet\r\n    function forwardFunds(uint256 _value) internal {\r\n        wallet.transfer(_value);\r\n    }\r\n\r\n    // Withdrawal eth to owner\r\n    function withdrawal() public onlyOwner {\r\n\r\n        updateReservedWei();\r\n\r\n        uint256 withdrawalWei = reservedWei;\r\n        reservedWei = 0;\r\n        forwardFunds(withdrawalWei);\r\n    }\r\n\r\n    // Success finish of CrowdSale\r\n    function finishCrowdSale() public onlyOwner {\r\n        require(now > endRefundableTime);\r\n\r\n        // withdrawal all eth from contract\r\n        updateReservedWei();\r\n        reservedWei = 0;\r\n        forwardFunds(this.balance);\r\n\r\n        // mint tokens to owner - wallet\r\n        token.mint(wallet, (token.totalSupply().mul(65).div(100)));\r\n        token.finishMinting();\r\n\r\n        token.transferOwnership(owner);\r\n    }\r\n\r\n    // Change owner of token after end of CrowdSale if Soft Cap has not raised\r\n    function changeTokenOwner() public onlyOwner {\r\n        require(now > endRefundableTime && weiRaised.add(preSale.weiRaised()) < softCap);\r\n        token.transferOwnership(owner);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address _beneficiary) saleIsOn isUnderHardCap nonReentrant public payable {\r\n        require(_beneficiary != address(0));\r\n        require(msg.value >= minimumInvest);\r\n\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = getTokenAmount(weiAmount);\r\n        uint256 bonusPercent = getBonusPercent();\r\n        tokens = tokens.add(tokens.mul(bonusPercent).div(100));\r\n\r\n        token.mint(_beneficiary, tokens);\r\n\r\n        // update states\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        balances[_beneficiary] = balances[_beneficiary].add(weiAmount);\r\n        balancesInToken[_beneficiary] = balancesInToken[_beneficiary].add(tokens);\r\n\r\n        // update timestamps and begin Refundable stage\r\n        if (weiRaised >= hardCap) {\r\n            endCrowdSaleTime = now;\r\n            endRefundableTime = endCrowdSaleTime + 108 * 1 days;\r\n        }\r\n\r\n        TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n    }\r\n\r\n    function() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"updateReservedWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeTokenOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalStageRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"restWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balancesInToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondStageRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endCrowdSaleTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endRefundableTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstStageRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_preSale\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"rICO","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000069472a2d9644c52766eb130496204aa2d3f782b6000000000000000000000000b21b519028122033a5be2d32f4f8f66616e5b08c","Library":"","SwarmSource":"bzzr://e43203b551d1bd0513ddeecccd943da524f370294eb558807e4f84c32036ebbd"}]}