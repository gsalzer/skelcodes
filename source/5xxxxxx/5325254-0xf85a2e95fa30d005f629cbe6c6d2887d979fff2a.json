{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n    \r\n   // ----------------------------------------------------------------------------------------------\r\n   // Project Delta \r\n   // DELTA - New Crypto-Platform with own currency, verified semantic contracts and multi blockchains!\r\n   // Site: http://delta.money\r\n   // Telegram Chat: @deltacoin\r\n   // Telegram News: @deltaico\r\n   // CEO Nechesov Andrey http://facebook.com/Nechesov     \r\n   // Ltd. \"Delta\"   \r\n   // Tokens Delta: BUY and SELL into this smart contract on exchange\r\n   // ----------------------------------------------------------------------------------------------\r\n    \r\n  library SafeMath {\r\n    function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n      uint256 c = a * b;\r\n      assert(a == 0 || c / a == b);\r\n      return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal returns (uint256) {\r\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n      uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n      return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n  }\r\n\r\n   // ERC Token Standard #20 Interface\r\n   // https://github.com/ethereum/EIPs/issues/20\r\n\r\n  contract ERC20Interface {\r\n      // Get the total token supply\r\n      function totalSupply() constant returns (uint256 totalSupply);\r\n   \r\n      // Get the account balance of another account with address _owner\r\n      function balanceOf(address _owner) constant returns (uint256 balance);\r\n   \r\n      // Send _value amount of tokens to address _to\r\n      function transfer(address _to, uint256 _value) returns (bool success);\r\n   \r\n      // Send _value amount of tokens from address _from to address _to\r\n      function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n   \r\n      // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n      // If this function is called again it overwrites the current allowance with _value.\r\n      // this function is required for some DEX functionality\r\n      function approve(address _spender, uint256 _value) returns (bool success);\r\n   \r\n      // Returns the amount which _spender is still allowed to withdraw from _owner\r\n      function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n   \r\n      // Triggered when tokens are transferred.\r\n      event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n   \r\n      // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n      event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  }\r\n\r\n  contract MigrationAgent {\r\n    function migrateFrom(address _from, uint256 _value);\r\n  }      \r\n   \r\n  contract TokenBase is ERC20Interface {\r\n\r\n      using SafeMath for uint;\r\n\r\n      string public constant symbol = \"DELTA\";\r\n      string public constant name = \"DELTA token\";\r\n      uint8 public constant decimals = 18; \r\n           \r\n      uint256 public constant maxTokens = (2**32-1)*10**18; \r\n      uint256 public constant ownerSupply = maxTokens*25/100;\r\n      uint256 _totalSupply = ownerSupply;              \r\n\r\n      // For future\r\n      // If migration to a new contract is allowed\r\n      bool public migrationAllowed = false;\r\n\r\n      // New contract address\r\n      address public migrationAddress;\r\n\r\n      // How many tokens were migrated to a new contract \r\n      uint256 public totalMigrated = 0; \r\n      \r\n      // Owner of this contract\r\n      address public owner;\r\n   \r\n      // Balances for each account\r\n      mapping(address => uint256) balances;\r\n   \r\n      // Owner of account approves the transfer of an amount to another account\r\n      mapping(address => mapping (address => uint256)) allowed;\r\n\r\n      // Orders holders who wish sell tokens, save amount\r\n      mapping(address => uint256) public orders_sell_amount;\r\n\r\n      // Orders holders who wish sell tokens, save price\r\n      mapping(address => uint256) public orders_sell_price;\r\n\r\n      //orders list\r\n      address[] public orders_sell_list;\r\n\r\n      // Triggered orders sell/buy\r\n      event Orders_sell(address indexed _from, address indexed _to, uint256 _amount, uint256 _price, uint256 _seller_money, uint256 _buyer_money);\r\n   \r\n      // Functions with this modifier can only be executed by the owner\r\n      modifier onlyOwner() {\r\n          if (msg.sender != owner) {\r\n              throw;\r\n          }\r\n          _;\r\n      }\r\n\r\n      // Migrate tokens to a new contract\r\n      function migrate(uint256 _value) external {\r\n          require(migrationAllowed);\r\n          require(migrationAddress != 0x0);\r\n          require(_value > 0);\r\n          require(_value <= balances[msg.sender]);\r\n\r\n          balances[msg.sender] = balances[msg.sender].sub(_value);\r\n          _totalSupply = _totalSupply.sub(_value);\r\n          totalMigrated = totalMigrated.add(_value);\r\n\r\n          MigrationAgent(migrationAddress).migrateFrom(msg.sender, _value);\r\n      }  \r\n      \r\n      function configureMigrate(bool _migrationAllowed, address _migrationAddress) onlyOwner {\r\n          migrationAllowed = _migrationAllowed;\r\n          migrationAddress = _migrationAddress;\r\n      }\r\n\r\n  }\r\n\r\n  contract DELTA_Token is TokenBase {\r\n\r\n      using SafeMath for uint;\r\n\r\n      uint256 public constant token_price = 10**18*1/100; \r\n\r\n      uint public pre_ico_start = 1522540800;\r\n      uint public ico_start = 1525132800;\r\n      uint public ico_finish = 1530403200;             \r\n\r\n      uint public p1 = 250;             \r\n      uint public p2 = 200;             \r\n      uint public p3 = 150;             \r\n      uint public p4 = 125;             \r\n      uint public p5 = 100;\r\n\r\n      uint public coef = 105;      \r\n   \r\n      // Constructor\r\n      function DELTA_Token() {\r\n          owner = msg.sender;\r\n          balances[owner] = ownerSupply;\r\n      }\r\n      \r\n      //default function for buy tokens      \r\n      function() payable {        \r\n          tokens_buy();        \r\n      }\r\n      \r\n      function totalSupply() constant returns (uint256 totalSupply) {\r\n          totalSupply = _totalSupply;\r\n      }\r\n\r\n      //Withdraw money from contract balance to owner\r\n      function withdraw(uint256 _amount) onlyOwner returns (bool result) {\r\n          uint256 balance;\r\n          balance = this.balance;\r\n          if(_amount > 0) balance = _amount;\r\n          owner.send(balance);\r\n          return true;\r\n      }\r\n\r\n      //Change coef\r\n      function change_coef(uint256 _coef) onlyOwner returns (bool result) {\r\n          coef = _coef;\r\n          return true;\r\n      }\r\n\r\n      function change_p1(uint256 _p1) onlyOwner returns (bool result) {\r\n          p1 = _p1;\r\n          return true;\r\n      }\r\n\r\n      function change_p2(uint256 _p2) onlyOwner returns (bool result) {\r\n          p2 = _p2;\r\n          return true;\r\n      }\r\n\r\n      function change_p3(uint256 _p3) onlyOwner returns (bool result) {\r\n          p3 = _p3;\r\n          return true;\r\n      }\r\n\r\n      function change_p4(uint256 _p4) onlyOwner returns (bool result) {\r\n          p4 = _p4;\r\n          return true;\r\n      }\r\n\r\n      function change_p5(uint256 _p5) onlyOwner returns (bool result) {\r\n          p5 = _p5;\r\n          return true;\r\n      }\r\n\r\n      //Change pre_ico_start date\r\n      function change_pre_ico_start(uint256 _pre_ico_start) onlyOwner returns (bool result) {\r\n          pre_ico_start = _pre_ico_start;\r\n          return true;\r\n      }\r\n\r\n      //Change ico_start date\r\n      function change_ico_start(uint256 _ico_start) onlyOwner returns (bool result) {\r\n          ico_start = _ico_start;\r\n          return true;\r\n      }\r\n\r\n      //Change ico_finish date\r\n      function change_ico_finish(uint256 _ico_finish) onlyOwner returns (bool result) {\r\n          ico_finish = _ico_finish;\r\n          return true;\r\n      }\r\n   \r\n      // What is the balance of a particular account?\r\n      function balanceOf(address _owner) constant returns (uint256 balance) {\r\n          return balances[_owner];\r\n      }\r\n   \r\n      // Transfer the balance from owner's account to another account\r\n      function transfer(address _to, uint256 _amount) returns (bool success) {          \r\n\r\n          if (balances[msg.sender] >= _amount \r\n              && _amount > 0\r\n              && balances[_to] + _amount > balances[_to]) {\r\n              balances[msg.sender] -= _amount;\r\n              balances[_to] += _amount;\r\n              Transfer(msg.sender, _to, _amount);\r\n              return true;\r\n          } else {\r\n              return false;\r\n          }\r\n      }\r\n   \r\n      // Send _value amount of tokens from address _from to address _to\r\n      // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n      // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n      // fees in sub-currencies; the command should fail unless the _from account has\r\n      // deliberately authorized the sender of the message via some mechanism; we propose\r\n      // these standardized APIs for approval:\r\n      function transferFrom(\r\n          address _from,\r\n          address _to,\r\n          uint256 _amount\r\n     ) returns (bool success) {         \r\n\r\n         if (balances[_from] >= _amount\r\n             && allowed[_from][msg.sender] >= _amount\r\n             && _amount > 0\r\n             && balances[_to] + _amount > balances[_to]) {\r\n             balances[_from] -= _amount;\r\n             allowed[_from][msg.sender] -= _amount;\r\n             balances[_to] += _amount;\r\n             Transfer(_from, _to, _amount);\r\n             return true;\r\n         } else {\r\n             return false;\r\n         }\r\n     }\r\n  \r\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     function approve(address _spender, uint256 _amount) returns (bool success) {\r\n         allowed[msg.sender][_spender] = _amount;\r\n         Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n  \r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n         return allowed[_owner][_spender];\r\n     } \r\n\r\n      /**\r\n      * Buy tokens on pre-ico and ico \r\n      */\r\n      function tokens_buy() payable returns (bool) { \r\n\r\n        uint tnow = now;        \r\n        \r\n        require(tnow <= ico_finish);\r\n        require(_totalSupply < maxTokens);\r\n        require(msg.value >= token_price);        \r\n\r\n        uint tokens_buy = msg.value*10**18/token_price;\r\n\r\n        require(tokens_buy > 0);   \r\n        \r\n        if(tnow < ico_start + 86400*0){          \r\n          tokens_buy = tokens_buy*p1/100;\r\n        } \r\n        if((ico_start + 86400*0 <= tnow)&&(tnow < ico_start + 86400*2)){\r\n          tokens_buy = tokens_buy*p2/100;\r\n        } \r\n        if((ico_start + 86400*2 <= tnow)&&(tnow < ico_start + 86400*7)){\r\n          tokens_buy = tokens_buy*p3/100;        \r\n        } \r\n        if((ico_start + 86400*7 <= tnow)&&(tnow < ico_start + 86400*14)){\r\n          tokens_buy = tokens_buy*p4/100;        \r\n        }\r\n        if(ico_start + 86400*14 <= tnow){\r\n          tokens_buy = tokens_buy*p5/100;        \r\n        }         \r\n\r\n        require(_totalSupply.add(tokens_buy) <= maxTokens);\r\n        _totalSupply = _totalSupply.add(tokens_buy);\r\n        balances[msg.sender] = balances[msg.sender].add(tokens_buy);         \r\n\r\n        return true;\r\n      }      \r\n\r\n      function orders_sell_total () constant returns (uint) {\r\n        return orders_sell_list.length;\r\n      } \r\n\r\n      function get_orders_sell_amount(address _from) constant returns(uint) {\r\n\r\n        uint _amount_max = 0;\r\n\r\n        if(!(orders_sell_amount[_from] > 0)) return _amount_max;\r\n\r\n        if(balanceOf(_from) > 0) _amount_max = balanceOf(_from);\r\n        if(orders_sell_amount[_from] < _amount_max) _amount_max = orders_sell_amount[_from];\r\n\r\n        return _amount_max;\r\n      }\r\n\r\n      /**\r\n      * Order Sell tokens  \r\n      */\r\n      function order_sell(uint256 _max_amount, uint256 _price) returns (bool) {\r\n\r\n        require(_max_amount > 0);\r\n        require(_price > 0);        \r\n\r\n        orders_sell_amount[msg.sender] = _max_amount;\r\n        orders_sell_price[msg.sender] = (_price*coef).div(100);\r\n        orders_sell_list.push(msg.sender);        \r\n\r\n        return true;\r\n      }\r\n\r\n      function order_buy(address _from, uint256 _max_price) payable returns (bool) {\r\n        \r\n        require(msg.value > 0);\r\n        require(_max_price > 0);        \r\n        require(orders_sell_amount[_from] > 0);\r\n        require(orders_sell_price[_from] > 0); \r\n        require(orders_sell_price[_from] <= _max_price);\r\n\r\n        uint _amount = (msg.value*10**18).div(orders_sell_price[_from]);\r\n        uint _amount_from = get_orders_sell_amount(_from);\r\n\r\n        if(_amount > _amount_from) _amount = _amount_from;        \r\n        require(_amount > 0);        \r\n\r\n        uint _total_money = (orders_sell_price[_from]*_amount).div(10**18);        \r\n        require(_total_money <= msg.value);\r\n\r\n        uint _seller_money = (_total_money*100).div(coef);\r\n        uint _buyer_money = msg.value - _total_money;\r\n\r\n        require(_seller_money > 0);        \r\n        require(_seller_money + _buyer_money <= msg.value);\r\n        \r\n        _from.send(_seller_money);\r\n        msg.sender.send(_buyer_money);\r\n\r\n        orders_sell_amount[_from] -= _amount;        \r\n        balances[_from] -= _amount;\r\n        balances[msg.sender] += _amount; \r\n\r\n        Orders_sell(_from, msg.sender, _amount, orders_sell_price[_from], _seller_money, _buyer_money);\r\n\r\n      }\r\n      \r\n }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_p5\",\"type\":\"uint256\"}],\"name\":\"change_p5\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_finish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders_sell_list\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coef\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"orders_sell_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pre_ico_start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pre_ico_start\",\"type\":\"uint256\"}],\"name\":\"change_pre_ico_start\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"orders_sell_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokens_buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_max_price\",\"type\":\"uint256\"}],\"name\":\"order_buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_migrationAllowed\",\"type\":\"bool\"},{\"name\":\"_migrationAddress\",\"type\":\"address\"}],\"name\":\"configureMigrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ico_start\",\"type\":\"uint256\"}],\"name\":\"change_ico_start\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_p4\",\"type\":\"uint256\"}],\"name\":\"change_p4\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coef\",\"type\":\"uint256\"}],\"name\":\"change_coef\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_p3\",\"type\":\"uint256\"}],\"name\":\"change_p3\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_max_amount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"order_sell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_p2\",\"type\":\"uint256\"}],\"name\":\"change_p2\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ico_finish\",\"type\":\"uint256\"}],\"name\":\"change_ico_finish\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"get_orders_sell_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_p1\",\"type\":\"uint256\"}],\"name\":\"change_p1\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"orders_sell_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_seller_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buyer_money\",\"type\":\"uint256\"}],\"name\":\"Orders_sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DELTA_Token","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e118d70fb88fbb07a23fbdc9a2369a460dd93d21fb18a7f4bf407a8d998ac1b4"}]}