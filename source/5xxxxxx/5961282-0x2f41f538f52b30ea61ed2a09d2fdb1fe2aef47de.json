{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract TokenERC20 {\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n       \r\n    \r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/******************************************/\r\n/*       ADVANCED TOKEN STARTS HERE       */\r\n/******************************************/\r\n\r\ncontract ONTOPToken is owned, TokenERC20 {\r\n    struct frozenInfo {\r\n       bool frozenAccount;\r\n       bool frozenAccBytime;\r\n       // uint time_stfrozen;\r\n       uint time_end_frozen;\r\n       uint time_last_query;\r\n       uint256 frozen_total;\r\n       // uint256 realsestep;\r\n    }\r\n    \r\n    struct frozenInfo_prv {\r\n       uint256 realsestep;\r\n    }\r\n    \r\n    uint private constant timerate = 1;\r\n    string public declaration = \"frozenInfos will reflush by function QueryFrozenCoins and transfer.\";\r\n    // mapping (address => bool) public frozenAccount;\r\n    mapping (address => frozenInfo) public frozenInfos;\r\n    mapping (address => frozenInfo_prv) private frozenInfos_prv;\r\n    \r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    // This notifies clients about the frozen coin\r\n    event FrozenTotal(address indexed from, uint256 value);\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function ONTOPToken(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n    \r\n    function _resetFrozenInfo(address target) internal {\r\n       frozenInfos[target].frozen_total = 0;\r\n       frozenInfos[target].time_end_frozen = 0;\r\n       frozenInfos_prv[target].realsestep = 0;\r\n       frozenInfos[target].time_last_query = 0;\r\n       frozenInfos[target].frozenAccBytime = false; \r\n    }\r\n    \r\n    function _refulshFrozenInfo(address target) internal {\r\n       if(frozenInfos[target].frozenAccBytime) \r\n        {\r\n            uint nowtime = now ;// + 60*60*24*365*5 ;\r\n            frozenInfos[target].time_last_query = nowtime;\r\n            if(nowtime>=frozenInfos[target].time_end_frozen)\r\n            {\r\n               _resetFrozenInfo(target);              \r\n            }\r\n            else\r\n            {\r\n               uint stepcnt = frozenInfos[target].time_end_frozen - nowtime;\r\n               uint256 releasecoin = stepcnt * frozenInfos_prv[target].realsestep;\r\n               if(frozenInfos[target].frozen_total<=releasecoin)\r\n                  _resetFrozenInfo(target);\r\n               else\r\n               {\r\n                  frozenInfos[target].frozen_total=releasecoin;\r\n               }\r\n            }\r\n        }       \r\n    }\r\n    \r\n    /* Internal transfer, only can be called by this contract */\r\n    \r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\r\n        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\r\n        // require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        // require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n        require(!frozenInfos[_from].frozenAccount);                     // Check if sender is frozen\r\n        require(!frozenInfos[_to].frozenAccount);                       // Check if recipient is frozen\r\n        require(!frozenInfos[_to].frozenAccBytime); \r\n                \r\n        if(frozenInfos[_from].frozenAccBytime) \r\n        {\r\n            _refulshFrozenInfo(_from);\r\n            if(frozenInfos[_from].frozenAccBytime)\r\n            {\r\n               if((balanceOf[_from]-_value)<=frozenInfos[_from].frozen_total)\r\n                   require(false);\r\n            }\r\n        }\r\n        \r\n        balanceOf[_from] -= _value;                         // Subtract from the sender\r\n        balanceOf[_to] += _value;                           // Add the same to the recipient\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        // frozenAccount[target] = freeze;\r\n        frozenInfos[target].frozenAccount = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n    \r\n    function freezeAccountByTime(address target, uint time) onlyOwner public {\r\n        // frozenAccount[target] = freeze;\r\n        require (target != 0x0);\r\n        require (balanceOf[target] >= 1); \r\n        require(!frozenInfos[target].frozenAccBytime);\r\n        require (time >0);\r\n        frozenInfos[target].frozenAccBytime = true;\r\n        uint nowtime = now;\r\n        frozenInfos[target].time_end_frozen = nowtime + time * timerate;\r\n        frozenInfos[target].time_last_query = nowtime;\r\n        frozenInfos[target].frozen_total = balanceOf[target];\r\n        frozenInfos_prv[target].realsestep = frozenInfos[target].frozen_total / (time * timerate);  \r\n        require (frozenInfos_prv[target].realsestep>0);      \r\n        emit FrozenTotal(target, frozenInfos[target].frozen_total);\r\n    }    \r\n    \r\n    function UnfreezeAccountByTime(address target) onlyOwner public {\r\n        _resetFrozenInfo(target);\r\n        emit FrozenTotal(target, frozenInfos[target].frozen_total);\r\n    }\r\n    \r\n    function QueryFrozenCoins(address _from) public returns (uint256 total) {\r\n        require (_from != 0x0);\r\n        require(frozenInfos[_from].frozenAccBytime);\r\n        _refulshFrozenInfo(_from);        \r\n        emit FrozenTotal(_from, frozenInfos[_from].frozen_total);\r\n        return frozenInfos[_from].frozen_total;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"freezeAccountByTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"QueryFrozenCoins\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"UnfreezeAccountByTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"declaration\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenInfos\",\"outputs\":[{\"name\":\"frozenAccount\",\"type\":\"bool\"},{\"name\":\"frozenAccBytime\",\"type\":\"bool\"},{\"name\":\"time_end_frozen\",\"type\":\"uint256\"},{\"name\":\"time_last_query\",\"type\":\"uint256\"},{\"name\":\"frozen_total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FrozenTotal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"ONTOPToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000b2d05e00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000b4f6e20546f7020436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054f4e544f50000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://b9cdae8b5a15286ff6915bcc702627b8557229813ef93d20bfb8c460e02553d5"}]}