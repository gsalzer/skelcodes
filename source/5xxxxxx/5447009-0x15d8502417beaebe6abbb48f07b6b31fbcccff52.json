{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ownerOnly {\r\n    \r\n    function ownerOnly() public { owner = msg.sender; }\r\n    address owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Game is ownerOnly {\r\n    \r\n    //Уникальный код коровы\r\n    uint cow_code;\r\n    \r\n    struct cows {\r\n        uint cow;\r\n        bool place;\r\n        uint date_buy;\r\n        bool cow_live;\r\n        uint milk;\r\n        uint date_milk;\r\n    } \r\n    \r\n    //Маппинг количество коров у пользователя\r\n    mapping (address => uint) users_cows;\r\n    //Маппинг коровы у пользователя\r\n    mapping (bytes32 => cows) user;\r\n    //Маппинг телеги\r\n    mapping (address => bool) telega;\r\n    //Адрес кошелька rico\r\n    address rico;\r\n    \r\n    //сколько корова дает молока за одну дойку\r\n    uint volume_milk;\r\n    //сколько нужно времени между доениями\r\n    uint time_to_milk;\r\n    //времмя жизни коровы\r\n    uint time_to_live;   \r\n        \r\n    //сколько стоит молоко в веях в розницу\r\n    uint milkcost;\r\n    \r\n    //инициируем переменные движка\r\n    function Game() public {\r\n        \r\n        //устанавливаем кошелек движка для управления\r\n    \trico = 0xb5F60D78F15b73DC2D2083571d0EEa70d35b9D28;\r\n    \t\r\n    \t//Устанавливаем счетчик коров\r\n    \tcow_code = 0;\r\n    \t\r\n        //сколько литров дает корова на 5 минут\r\n        volume_milk = 20;\r\n        //через сколько секунд можно доить корову\r\n        time_to_milk = 60;\r\n        //сколько секунд живет корова - 30 мин\r\n        time_to_live = 1800;  \r\n        \r\n        //Сколько стоит продать молоко в розницу\r\n        milkcost = 0.001083333333333 ether;\r\n    }\r\n    \r\n    function pay() public payable {\r\n        payCow();\r\n    }        \r\n    \r\n    //покупаем коров только от движка\r\n    function payCow() private {\r\n       \r\n        uint time= now;\r\n        uint cows_count = users_cows[msg.sender];\r\n        \r\n        uint index = msg.value/0.1 ether;\r\n        \r\n        for (uint i = 1; i <= index; i++) {\r\n            \r\n            cow_code++;\r\n            cows_count++;\r\n            user[keccak256(msg.sender) & keccak256(i)]=cows(cow_code,true,time,true,0,time);\r\n        }\r\n        users_cows[msg.sender] = cows_count;\r\n        rico.transfer(0.01 ether);\r\n    }    \r\n    \r\n    //доим корову\r\n    function MilkCow(address gamer) private {\r\n       \r\n        uint time= now;\r\n        uint time_milk;\r\n        \r\n        for (uint i=1; i<=users_cows[gamer]; i++) {\r\n            \r\n            //если корова пока жива тогда доим\r\n            if (user[keccak256(gamer) & keccak256(i)].cow_live==true && user[keccak256(gamer) & keccak256(i)].place) {\r\n                \r\n                //получаем время смерти коровы\r\n                uint datedeadcow=user[keccak256(gamer) & keccak256(i)].date_buy+time_to_live;\r\n               \r\n                //если время смерти коровы уже наступило\r\n                if (time>=datedeadcow) {\r\n                    \r\n                    //получаем сколько доек мы пропустили\r\n                    time_milk=(time-user[keccak256(gamer) & keccak256(i)].date_milk)/time_to_milk;\r\n                    \r\n                    if (time_milk>=1) {\r\n                        //кидаем на склад молоко которое мы надоили за пропущенные дойки\r\n                        user[keccak256(gamer) & keccak256(i)].milk+=(volume_milk*time_milk);\r\n                        //убиваем корову\r\n                        user[keccak256(gamer) & keccak256(i)].cow_live=false;\r\n                        //устанавливаем последнее время доения\r\n                        user[keccak256(gamer) & keccak256(i)].date_milk+=(time_milk*time_to_milk);\r\n                    }\r\n                    \r\n                } else {\r\n                    \r\n                    time_milk=(time-user[keccak256(gamer) & keccak256(i)].date_milk)/time_to_milk;\r\n                    \r\n                    if (time_milk>=1) {\r\n                        user[keccak256(gamer) & keccak256(i)].milk+=(volume_milk*time_milk);\r\n                        user[keccak256(gamer) & keccak256(i)].date_milk+=(time_milk*time_to_milk);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }    \r\n  \r\n    //продаем молоко, если указано 0 тогда все молоко, иначе сколько сколько указано\r\n    function saleMilk() public {\r\n        \r\n        //сколько будем продовать молока\r\n        uint milk_to_sale;\r\n        \r\n        //отгрузка молока возможно только при наличии телеги у фермера\r\n        if (telega[msg.sender]==true) {\r\n            \r\n            MilkCow(msg.sender);\r\n            \r\n            //Получаем количество коров у пользователя\r\n            uint cows_count = users_cows[msg.sender];            \r\n        \r\n            //обнуляем все молоко на продажу\r\n            milk_to_sale=0;\r\n\r\n            for (uint i=1; i<=cows_count; i++) {\r\n\r\n                milk_to_sale += user[keccak256(msg.sender) & keccak256(i)].milk;\r\n                //удаляем из анкеты все молоко\r\n                user[keccak256(msg.sender) & keccak256(i)].milk = 0;\r\n            }\r\n            //отсылаем эфир за купленное молоко\r\n            msg.sender.transfer(milkcost*milk_to_sale);\r\n        }            \r\n    }\r\n            \r\n    //продаем корову от фермера фермеру, историю передачи всегда можно узнать из чтения бд\r\n    function TransferCow(address gamer, uint num_cow) public {\r\n        \r\n        //продавать разрешается только живую корову\r\n        if (user[keccak256(msg.sender) & keccak256(num_cow)].cow_live == true && user[keccak256(msg.sender) & keccak256(num_cow)].place==true) {\r\n            \r\n            //получаем количество коров у покупателя\r\n            uint cows_count = users_cows[gamer];\r\n            \r\n            //создаем и заполняем анкету коровы для нового фермера, при этом молоко не передается\r\n            user[keccak256(gamer) & keccak256(cows_count)]=cows(user[keccak256(msg.sender) & keccak256(num_cow)].cow,\r\n            true,user[keccak256(msg.sender) & keccak256(num_cow)].date_buy,\r\n            user[keccak256(msg.sender) & keccak256(num_cow)].cow_live,0,now);\r\n            \r\n            //убиваем корову и прошлого фермера\r\n            user[keccak256(msg.sender) & keccak256(num_cow)].cow_live= false;\r\n            \r\n            users_cows[gamer] ++;\r\n        }\r\n    }\r\n    \r\n    //убиваем корову принудительно из движка\r\n    function DeadCow(address gamer, uint num_cow) public onlyOwner {\r\n       \r\n        //обновляем анкету коровы\r\n        user[keccak256(gamer) & keccak256(num_cow)].cow_live = false;\r\n    }  \r\n    \r\n    //Послать телегу фермеру\r\n    function TelegaSend(address gamer) public onlyOwner {\r\n       \r\n        //Послать телегу\r\n        telega[gamer] = true;\r\n       \r\n    }  \r\n    \r\n    //Вернуть деньги\r\n    function SendOwner() public onlyOwner {\r\n        msg.sender.transfer(this.balance);\r\n    }      \r\n    \r\n    //Послать телегу фермеру\r\n    function TelegaOut(address gamer) public onlyOwner {\r\n       \r\n        //Послать телегу\r\n        telega[gamer] = false;\r\n       \r\n    }  \r\n    \r\n    //Вывести сколько коров у фермера\r\n    function CountCow(address gamer) public view returns (uint) {\r\n        return users_cows[gamer];   \r\n    }\r\n\r\n    //Вывести сколько коров у фермера\r\n    function StatusCow(address gamer, uint num_cow) public view returns (uint,bool,uint,bool,uint,uint) {\r\n        return (user[keccak256(gamer) & keccak256(num_cow)].cow,\r\n        user[keccak256(gamer) & keccak256(num_cow)].place,\r\n        user[keccak256(gamer) & keccak256(num_cow)].date_buy,\r\n        user[keccak256(gamer) & keccak256(num_cow)].cow_live,\r\n        user[keccak256(gamer) & keccak256(num_cow)].milk,\r\n        user[keccak256(gamer) & keccak256(num_cow)].date_milk);   \r\n    }\r\n    \r\n    //Вывести наличие телеги у фермера\r\n    function Statustelega(address gamer) public view returns (bool) {\r\n        return telega[gamer];   \r\n    }    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"pay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gamer\",\"type\":\"address\"}],\"name\":\"TelegaSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gamer\",\"type\":\"address\"},{\"name\":\"num_cow\",\"type\":\"uint256\"}],\"name\":\"DeadCow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gamer\",\"type\":\"address\"}],\"name\":\"CountCow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gamer\",\"type\":\"address\"},{\"name\":\"num_cow\",\"type\":\"uint256\"}],\"name\":\"TransferCow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SendOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gamer\",\"type\":\"address\"}],\"name\":\"TelegaOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gamer\",\"type\":\"address\"}],\"name\":\"Statustelega\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"saleMilk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gamer\",\"type\":\"address\"},{\"name\":\"num_cow\",\"type\":\"uint256\"}],\"name\":\"StatusCow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Game","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://932948636d21d7658336d5adf37769524aaa9267b5f4718b9a726db405a42d40"}]}