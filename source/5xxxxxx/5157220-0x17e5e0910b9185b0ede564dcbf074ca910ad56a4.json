{"status":"1","message":"OK","result":[{"SourceCode":"contract TeikhosBounty {\r\n\r\n    // Proof-of-public-key in format 2xbytes32, to support xor operator and ecrecover r, s v format\r\n    bytes32 proof_of_public_key1 = hex\"381c185bf75548b134adc3affd0cc13e66b16feb125486322fa5f47cb80a5bf0\";\r\n    bytes32 proof_of_public_key2 = hex\"5f9d1d2152eae0513a4814bd8e6b0dd3ac8f6310c0494c03e9aa08bcd867c352\";\r\n\r\n    function authenticate(bytes _publicKey) { // Accepts an array of bytes, for example [\"0x00\",\"0xaa\", \"0xff\"]\r\n\r\n        // Get address from public key\r\n        address signer = address(keccak256(_publicKey));\r\n\r\n        // Split public key in 2xbytes32, to support xor operator and ecrecover r, s v format\r\n\r\n        bytes32 publicKey1;\r\n        bytes32 publicKey2;\r\n\r\n        assembly {\r\n        publicKey1 := mload(add(_publicKey,0x20))\r\n        publicKey2 := mload(add(_publicKey,0x40))\r\n        }\r\n\r\n        // Use xor (reverse cipher) to get signature in r, s v format\r\n        bytes32 r = proof_of_public_key1 ^ publicKey1;\r\n        bytes32 s = proof_of_public_key2 ^ publicKey2;\r\n\r\n        bytes32 msgHash = keccak256(\"\\x19Ethereum Signed Message:\\n64\", _publicKey);\r\n\r\n        // The value v is not known, try both 27 and 28\r\n        if(ecrecover(msgHash, 27, r, s) == signer) suicide(msg.sender);\r\n        if(ecrecover(msgHash, 28, r, s) == signer) suicide(msg.sender);\r\n    }\r\n    \r\n    function() payable {}                            \r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"authenticate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TeikhosBounty","CompilerVersion":"v0.4.21-nightly.2018.2.23+commit.cae6cc2c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f86a34faaa8151cea1a41561b7b420927dd050d830f9d660405ee3de4931b3d2"}]}