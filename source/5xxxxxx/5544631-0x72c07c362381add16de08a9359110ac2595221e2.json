{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title MintableTokenInterface interface\r\n */\r\ncontract MintableTokenIface {\r\n    function mint(address to, uint256 amount) public returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title TempusCrowdsale\r\n * @dev TempusCrowdsale is a base contract for managing IQ-300 token crowdsale,\r\n * allowing investors to purchase project tokens with ether.\r\n */\r\ncontract TempusCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // Crowdsale owners\r\n    mapping(address => bool) public owners;\r\n\r\n    // The token being sold\r\n    MintableTokenIface public token;\r\n\r\n    // Addresses where funds are collected\r\n    address[] public wallets;\r\n\r\n    // Current phase Id\r\n    uint256 public currentRoundId;\r\n\r\n    // Maximum amount of tokens this contract can mint\r\n    uint256 public tokensCap;\r\n\r\n    // Amount of issued tokens\r\n    uint256 public tokensIssued;\r\n\r\n    // Amount of received Ethers in wei\r\n    uint256 public weiRaised;\r\n\r\n    // Minimum Deposit 0.1 ETH in wei\r\n    uint256 public minInvestment = 100000000000000000;\r\n\r\n    // Crowdsale phase with its own parameters\r\n    struct Round {\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 weiRaised;\r\n        uint256 tokensIssued;\r\n        uint256 tokensCap;\r\n        uint256 tokenPrice;\r\n    }\r\n\r\n    Round[5] public rounds;\r\n\r\n    /**\r\n     * @dev TokenPurchase event emitted on token purchase\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * @dev WalletAdded event emitted on wallet add\r\n     * @param wallet the address of added account\r\n     */\r\n    event WalletAdded(address indexed wallet);\r\n\r\n    /**\r\n     * @dev WalletRemoved event emitted on wallet deletion\r\n     * @param wallet the address of removed account\r\n     */\r\n    event WalletRemoved(address indexed wallet);\r\n\r\n    /**\r\n     * @dev OwnerAdded event emitted on owner add\r\n     * @param newOwner is the address of added account\r\n     */\r\n    event OwnerAdded(address indexed newOwner);\r\n\r\n    /**\r\n     * @dev OwnerRemoved event emitted on owner removal\r\n     * @param removedOwner is the address of removed account\r\n     */\r\n    event OwnerRemoved(address indexed removedOwner);\r\n\r\n    /**\r\n     * @dev SwitchedToNextRound event triggered when contract changes its phase\r\n     * @param id is the index of the new phase\r\n     */\r\n    event SwitchedToNextRound(uint256 id);\r\n\r\n    constructor(MintableTokenIface _token) public {\r\n        token = _token;\r\n        tokensCap = 100000000000000000;\r\n        rounds[0] = Round(now, now.add(30 * 1 days), 0, 0, 20000000000000000, 50000000);\r\n        rounds[1] = Round(now.add(30 * 1 days).add(1), now.add(60 * 1 days), 0, 0, 20000000000000000, 100000000);\r\n        rounds[2] = Round(now.add(60 * 1 days).add(1), now.add(90 * 1 days), 0, 0, 20000000000000000, 200000000);\r\n        rounds[3] = Round(now.add(90 * 1 days).add(1), now.add(120 * 1 days), 0, 0, 20000000000000000, 400000000);\r\n        rounds[4] = Round(now.add(120 * 1 days).add(1), 1599999999, 0, 0, 20000000000000000, 800000000);\r\n        currentRoundId = 0;\r\n        owners[msg.sender] = true;\r\n    }\r\n\r\n    function() external payable {\r\n        require(msg.sender != address(0));\r\n        require(msg.value >= minInvestment);\r\n        if (now > rounds[currentRoundId].endTime) {\r\n            switchToNextRound();\r\n        }\r\n        uint256 tokenPrice = rounds[currentRoundId].tokenPrice;\r\n        uint256 tokens = msg.value.div(tokenPrice);\r\n        token.mint(msg.sender, tokens);\r\n        emit TokenPurchase(msg.sender, msg.value, tokens);\r\n        tokensIssued = tokensIssued.add(tokens);\r\n        rounds[currentRoundId].tokensIssued = rounds[currentRoundId].tokensIssued.add(tokens);\r\n        weiRaised = weiRaised.add(msg.value);\r\n        rounds[currentRoundId].weiRaised = rounds[currentRoundId].weiRaised.add(msg.value);\r\n        if (rounds[currentRoundId].tokensIssued >= rounds[currentRoundId].tokensCap) {\r\n            switchToNextRound();\r\n        }\r\n        forwardFunds();\r\n    }\r\n\r\n    /**\r\n     * @dev switchToNextRound sets the startTime, endTime and tokenCap of the next phase\r\n     * and sets the next phase as current phase.\r\n     */\r\n    function switchToNextRound() public {\r\n        uint256 prevRoundId = currentRoundId;\r\n        uint256 nextRoundId = currentRoundId + 1;\r\n        require(nextRoundId < rounds.length);\r\n        rounds[prevRoundId].endTime = now;\r\n        rounds[nextRoundId].startTime = now + 1;\r\n        rounds[nextRoundId].endTime = now + 30;\r\n        if (nextRoundId == rounds.length - 1) {\r\n            rounds[nextRoundId].tokensCap = tokensCap.sub(tokensIssued);\r\n        } else {\r\n            rounds[nextRoundId].tokensCap = tokensCap.sub(tokensIssued).div(5);\r\n        }\r\n        currentRoundId = nextRoundId;\r\n        emit SwitchedToNextRound(currentRoundId);\r\n    }\r\n\r\n    /**\r\n     * @dev Add collecting wallet address to the list\r\n     * @param _address Address of the wallet\r\n     */\r\n    function addWallet(address _address) public onlyOwner {\r\n        require(_address != address(0));\r\n        for (uint256 i = 0; i < wallets.length; i++) {\r\n            require(_address != wallets[i]);\r\n        }\r\n        wallets.push(_address);\r\n        emit WalletAdded(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Delete wallet by its index\r\n     * @param index Index of the wallet in the list\r\n     */\r\n    function delWallet(uint256 index) public onlyOwner {\r\n        require(index < wallets.length);\r\n        address walletToRemove = wallets[index];\r\n        for (uint256 i = index; i < wallets.length - 1; i++) {\r\n            wallets[i] = wallets[i + 1];\r\n        }\r\n        wallets.length--;\r\n        emit WalletRemoved(walletToRemove);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds administrative role to address\r\n     * @param _address The address that will get administrative privileges\r\n     */\r\n    function addOwner(address _address) public onlyOwner {\r\n        owners[_address] = true;\r\n        emit OwnerAdded(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes administrative role from address\r\n     * @param _address The address to remove administrative privileges from\r\n     */\r\n    function delOwner(address _address) public onlyOwner {\r\n        owners[_address] = false;\r\n        emit OwnerRemoved(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owners[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev forwardFunds splits received funds ~equally between wallets\r\n     * and sends receiwed ethers to them.\r\n     */\r\n    function forwardFunds() internal {\r\n        uint256 value = msg.value.div(wallets.length);\r\n        uint256 rest = msg.value.sub(value.mul(wallets.length));\r\n        for (uint256 i = 0; i < wallets.length - 1; i++) {\r\n            wallets[i].transfer(value);\r\n        }\r\n        wallets[wallets.length - 1].transfer(value + rest);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"delWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"delOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchToNextRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"weiRaised\",\"type\":\"uint256\"},{\"name\":\"tokensIssued\",\"type\":\"uint256\"},{\"name\":\"tokensCap\",\"type\":\"uint256\"},{\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoundId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WalletAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WalletRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"removedOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"SwitchedToNextRound\",\"type\":\"event\"}]","ContractName":"TempusCrowdsale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000900b2a673b71e77db2c9ae91a5934d0475b26f11","Library":"","SwarmSource":"bzzr://09cb7b66529db922551cd6dbb12d455c546fce193e2aaf05e5ced30f176231f3"}]}