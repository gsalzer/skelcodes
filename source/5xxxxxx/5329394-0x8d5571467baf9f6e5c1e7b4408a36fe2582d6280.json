{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n *\r\n * Version D\r\n * @author  Pratyush Bhatt <MysticMonsoon@protonmail.com>\r\n *\r\n * Overview:\r\n * This is an implimentation of a simple sale token. The tokens do not pay any dividends -- they only exist\r\n * as a database of purchasers. A limited number of tokens are created on-the-fly as funds are deposited into the\r\n * contract. All of the funds are tranferred to the beneficiary at the end of the token-sale.\r\n */\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/*\r\n    Overflow protected math functions\r\n*/\r\ncontract SafeMath {\r\n    /**\r\n        constructor\r\n    */\r\n    function SafeMath() public {\r\n    }\r\n\r\n    /**\r\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\r\n\r\n        @param _x   value 1\r\n        @param _y   value 2\r\n\r\n        @return sum\r\n    */\r\n    function safeAdd(uint256 _x, uint256 _y) pure internal returns (uint256) {\r\n        uint256 z = _x + _y;\r\n        assert(z >= _x);\r\n        return z;\r\n    }\r\n\r\n    /**\r\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\r\n\r\n        @param _x   minuend\r\n        @param _y   subtrahend\r\n\r\n        @return difference\r\n    */\r\n    function safeSub(uint256 _x, uint256 _y) pure internal returns (uint256) {\r\n        assert(_x >= _y);\r\n        return _x - _y;\r\n    }\r\n\r\n    /**\r\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\r\n\r\n        @param _x   factor 1\r\n        @param _y   factor 2\r\n\r\n        @return product\r\n    */\r\n    function safeMul(uint256 _x, uint256 _y) pure internal returns (uint256) {\r\n        uint256 z = _x * _y;\r\n        assert(_x == 0 || z / _x == _y);\r\n        return z;\r\n    }\r\n}\r\n\r\npragma solidity ^0.4.18;\r\n\r\n// Token standard API\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\ncontract iERC20Token {\r\n  function totalSupply() public constant returns (uint supply);\r\n  function balanceOf( address who ) public constant returns (uint value);\r\n  function allowance( address owner, address spender ) public constant returns (uint remaining);\r\n\r\n  function transfer( address to, uint value) public returns (bool ok);\r\n  function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n  function approve( address spender, uint value ) public returns (bool ok);\r\n\r\n  event Transfer( address indexed from, address indexed to, uint value);\r\n  event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract SimpleSaleToken is iERC20Token, SafeMath {\r\n\r\n  event PaymentEvent(address indexed from, uint amount);\r\n  event TransferEvent(address indexed from, address indexed to, uint amount);\r\n  event ApprovalEvent(address indexed from, address indexed to, uint amount);\r\n\r\n  string  public symbol;\r\n  string  public name;\r\n  bool    public isLocked;\r\n  uint    public decimals;\r\n  uint    public tokenPrice;\r\n  uint           tokenSupply;\r\n  uint           tokensRemaining;\r\n  uint    public contractSendGas = 100000;\r\n  address public owner;\r\n  address public beneficiary;\r\n  mapping (address => uint) balances;\r\n  mapping (address => mapping (address => uint)) approvals;  //transfer approvals, from -> to\r\n\r\n\r\n  modifier ownerOnly {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier unlockedOnly {\r\n    require(!isLocked);\r\n    _;\r\n  }\r\n\r\n  modifier duringSale {\r\n    require(tokenPrice != 0 && tokensRemaining > 0);\r\n    _;\r\n  }\r\n\r\n  //this is to protect from short-address attack. use this to verify size of args, especially when an address arg preceeds\r\n  //a value arg. see: https://www.reddit.com/r/ethereum/comments/63s917/worrysome_bug_exploit_with_erc20_token/dfwmhc3/\r\n  modifier onlyPayloadSize(uint size) {\r\n    assert(msg.data.length >= size + 4);\r\n    _;\r\n  }\r\n\r\n  //\r\n  //constructor\r\n  //\r\n  function SimpleSaleToken() public {\r\n    owner = msg.sender;\r\n    beneficiary = msg.sender;\r\n  }\r\n\r\n\r\n  //\r\n  // ERC-20\r\n  //\r\n\r\n  function totalSupply() public constant returns (uint supply) {\r\n    //if tokenSupply was not limited then we would use safeAdd...\r\n    supply = tokenSupply + tokensRemaining;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) public onlyPayloadSize(2*32) returns (bool success) {\r\n    //prevent wrap\r\n    if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      TransferEvent(msg.sender, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3*32) public returns (bool success) {\r\n    //prevent wrap:\r\n    if (balances[_from] >= _value && approvals[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n      balances[_from] -= _value;\r\n      balances[_to] += _value;\r\n      approvals[_from][msg.sender] -= _value;\r\n      TransferEvent(_from, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n  function balanceOf(address _owner) public constant returns (uint balance) {\r\n    balance = balances[_owner];\r\n  }\r\n\r\n\r\n  function approve(address _spender, uint _value) public onlyPayloadSize(2*32) returns (bool success) {\r\n    approvals[msg.sender][_spender] = _value;\r\n    ApprovalEvent(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n    return approvals[_owner][_spender];\r\n  }\r\n\r\n  //\r\n  // END ERC20\r\n  //\r\n\r\n\r\n  //\r\n  // default payable function.\r\n  //\r\n  function () public payable duringSale {\r\n    uint _quantity = msg.value / tokenPrice;\r\n    if (_quantity > tokensRemaining)\r\n       _quantity = tokensRemaining;\r\n    require(_quantity >= 1);\r\n    uint _cost = safeMul(_quantity, tokenPrice);\r\n    uint _refund = safeSub(msg.value, _cost);\r\n    balances[msg.sender] = safeAdd(balances[msg.sender], _quantity);\r\n    tokenSupply = safeAdd(tokenSupply, _quantity);\r\n    tokensRemaining = safeSub(tokensRemaining, _quantity);\r\n    if (_refund > 0)\r\n        msg.sender.transfer(_refund);\r\n    PaymentEvent(msg.sender, msg.value);\r\n  }\r\n\r\n  function setName(string _name, string _symbol) public ownerOnly {\r\n    name = _name;\r\n    symbol = _symbol;\r\n  }\r\n\r\n\r\n  //if decimals = 3, and you want 1 ETH/token, then pass in _tokenPrice = 0.001 * (wei / ether)\r\n  function setBeneficiary(address _beneficiary, uint _decimals, uint _tokenPrice, uint _tokensRemaining) public ownerOnly unlockedOnly {\r\n    beneficiary = _beneficiary;\r\n    decimals = _decimals;\r\n    tokenPrice = _tokenPrice;\r\n    tokensRemaining = _tokensRemaining;\r\n  }\r\n\r\n  function lock() public ownerOnly {\r\n    require(beneficiary != 0 && tokenPrice != 0);\r\n    isLocked = true;\r\n  }\r\n\r\n  function endSale() public ownerOnly {\r\n    require(beneficiary != 0);\r\n    //beneficiary is most likely a contract...\r\n    if (!beneficiary.call.gas(contractSendGas).value(this.balance)())\r\n      revert();\r\n    tokensRemaining = 0;\r\n  }\r\n\r\n  function tune(uint _contractSendGas) public ownerOnly {\r\n    contractSendGas = _contractSendGas;\r\n  }\r\n\r\n  //for debug\r\n  //only available before the contract is locked\r\n  function haraKiri() public ownerOnly unlockedOnly {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"name\":\"_tokensRemaining\",\"type\":\"uint256\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractSendGas\",\"type\":\"uint256\"}],\"name\":\"tune\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"haraKiri\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractSendGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ApprovalEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SimpleSaleToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://808884b61c4ed3c55c0124d5e2f61c5d7c9afb8dbe33635151c3839f8299f72c"}]}