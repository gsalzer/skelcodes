{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n//Submit ETH to show how big your \"Eth penis\" is. Each submission\r\n//bigger than the prior is awarded 20% of the original added to\r\n//their ETH amount. The biggest previous submitter gets 80% of\r\n//their original submission back. The biggest ETH dick for 1 day\r\n//wins the total accrued balance. During cashout the creator gets\r\n//1% and the winner gets the rest. The winner can be paid and the\r\n//game reset by calling \"Withdraw()\".\r\ncontract EthDickMeasuringGamev2 {\r\n    address owner;\r\n    address public largestPenisOwner;\r\n    uint256 public largestPenis;\r\n    uint256 public withdrawDate;\r\n\r\n    function EthDickMeasuringGamev2() public{\r\n        owner = msg.sender;\r\n        largestPenisOwner = 0;\r\n        largestPenis = 0;\r\n    }\r\n\r\n    function () public payable{\r\n        require(largestPenis < msg.value);\r\n        address prevOwner = largestPenisOwner;\r\n        uint256 prevSize = largestPenis;\r\n        \r\n        largestPenisOwner = msg.sender;\r\n        largestPenis = msg.value;\r\n        withdrawDate = now;\r\n        \r\n        //Verify this isn't a new round. Then\r\n        //send back eth to smaller penis submission\r\n        if(prevOwner != 0x0)\r\n            prevOwner.transfer(SafeMath.div(SafeMath.mul(prevSize, 80),100));\r\n\r\n    }\r\n\r\n    function withdraw() public{\r\n        require(now >= withdrawDate);\r\n        address roundWinner = largestPenisOwner;\r\n\r\n        //Reset game\r\n        largestPenis = 0;\r\n        largestPenisOwner = 0;\r\n\r\n        //Judging penises isn't a fun job\r\n        //taking my 1% from the total prize.\r\n        owner.transfer(SafeMath.div(SafeMath.mul(this.balance, 1),100));\r\n        \r\n        //Congratulation on your giant penis\r\n        roundWinner.transfer(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"largestPenis\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"largestPenisOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EthDickMeasuringGamev2","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1cb0048b880dcb800be3ab814b6004d8b87963d4e72ce3646f8c8a7771f545f4"}]}