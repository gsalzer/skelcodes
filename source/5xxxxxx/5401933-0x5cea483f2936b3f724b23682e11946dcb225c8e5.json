{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract owned {\r\n    address public owner;\r\n    address public contractAddress;\r\n\r\n    function owned() public{\r\n        owner = msg.sender;\r\n        contractAddress = this;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract MyToken is owned {\r\n    /* the rest of the contract as usual */\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    \r\n\tuint256 public exchangeStart;\r\n\tuint256 public exchangeEnd;\r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n\t\r\n\tbool public drop;\r\n    uint256 public airDrop;\r\n    uint256 public currentDrop;\r\n    uint256 public totalDrop;\r\n\tuint256 public dropStart;\r\n\tuint256 public dropEnd;\r\n\t\r\n    uint256 public minEtherForAccounts;\r\n\tuint8 public powers;\r\n\tuint256 public users;\r\n\tuint256 public minToken;\r\n\tuint256 public count;\r\n\t\r\n\tbool public lock;\r\n\tbool public sellToContract;\r\n    \r\n    mapping (address=> bool) public initialized;\r\n    mapping (address => uint256) public balances;\r\n\tmapping (address => uint256) public frozens;\r\n    mapping (address => uint256) public frozenNum;\r\n\tmapping (address => uint256) public frozenEnd;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\tmapping (uint256 => mapping (address => bool)) public monthPower;\r\n\tmapping (uint256 => bool) public monthOpen;\r\n    \r\n\tevent FrozenFunds(address target, uint256 frozen);\r\n    event FrozenMyFunds(address target, uint256 frozen, uint256 fronzeEnd);\r\n    event Transfer(address indexed from,address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    \r\n    function MyToken(address centralMinter) public {\r\n        name = \"共享通\";\r\n        symbol = \"SCD\";\r\n        decimals = 2;\r\n        totalSupply = 31000000 * 3 * 10 ** uint256(decimals);\r\n        sellPrice = 1 * 10 ** 14;\r\n        buyPrice = 2 * 10 ** 14;\r\n\t\tdrop = true;\r\n        airDrop = 88 * 10 ** uint256(decimals);\r\n\t\tcurrentDrop = 0;\r\n        totalDrop = 2000000 * 10 ** uint256(decimals);\r\n        minEtherForAccounts = 5 * 10 ** 14;\r\n\t\tpowers = 2;\r\n\t\tusers = 1;\r\n\t\tcount = 1000;\r\n\t\tlock = true;\r\n        if(centralMinter != 0) owner = centralMinter;\r\n\t\tinitialized[owner] = true;\r\n\t\tbalances[owner] = totalSupply;\r\n    }\r\n\r\n    function setDrop(bool _open) public onlyOwner {\r\n        drop = _open;\r\n    }\r\n\t\r\n    function setAirDrop(uint256 _dropStart, uint256 _dropEnd, uint256 _airDrop, uint256 _totalDrop) public onlyOwner {\r\n\t\tdropStart = _dropStart;\r\n\t\tdropEnd = _dropEnd;\r\n        airDrop = _airDrop;\r\n        totalDrop = _totalDrop;\r\n    }\r\n\t\r\n\tfunction setExchange(uint256 _exchangeStart, uint256 _exchangeEnd, uint256 _sellPrice, uint256 _buyPrice) public onlyOwner {\r\n        exchangeStart = _exchangeStart;\r\n\t\texchangeEnd = _exchangeEnd;\r\n\t\tsellPrice = _sellPrice;\r\n        buyPrice = _buyPrice;\r\n    }\r\n\t\r\n\tfunction setLock(bool _lock) public onlyOwner {\r\n        lock = _lock;\r\n    }\r\n\t\r\n\tfunction setSellToContract(bool _sellToContract) public onlyOwner {\r\n        sellToContract = _sellToContract;\r\n    }\r\n\t\r\n\tfunction setMinEther(uint256 _minimumEtherInFinney) public onlyOwner {\r\n\t\tminEtherForAccounts = _minimumEtherInFinney * 1 finney;\r\n\t}\r\n\t\r\n\tfunction setMonthClose(uint256 _month, bool _value) public onlyOwner {\r\n\t\tmonthOpen[_month] = _value;\r\n    }\r\n\t\r\n\tfunction setMonthOpen(uint256 _month, uint256 _users, uint8 _powers, uint256 _minToken, uint256 _count) public onlyOwner {\r\n        monthOpen[_month] = true;\r\n\t\tusers = _users;\r\n\t\tminToken = _minToken;\r\n\t\tcount = _count;\r\n        if(_powers > 0){\r\n            powers = _powers;\r\n        }\r\n    }\r\n\t    \r\n    function lockAccount(address _address, uint256 _lockEnd) public onlyOwner {\r\n        frozens[_address] = _lockEnd;\r\n        emit FrozenFunds(_address, _lockEnd);\r\n    }\r\n\t\t\r\n\tfunction _freezeFunds(address _address, uint256 _freeze, uint256 _freezeEnd) internal {\r\n\t\tif(drop){\r\n\t\t    initialize(_address);\r\n\t\t}\r\n        frozenNum[_address] = _freeze;\r\n\t\tfrozenEnd[_address] = _freezeEnd;\r\n        emit FrozenMyFunds(_address, _freeze, _freezeEnd);\r\n    }\r\n\t\r\n\tfunction freezeUserFunds(address _address, uint256 _freeze, uint256 _freezeEnd) public onlyOwner {\r\n        _freezeFunds(_address, _freeze, _freezeEnd);\r\n    }\r\n\t\r\n\tfunction freezeMyFunds(uint256 _freeze, uint256 _freezeEnd) public {\r\n        _freezeFunds(msg.sender, _freeze, _freezeEnd);\r\n    }\r\n    \r\n    function initialize(address _address) internal returns (uint256) {\r\n\t\trequire (drop);\r\n\t\trequire (now > frozens[_address]);\r\n\t\tif(dropStart != dropEnd && dropEnd > 0){\r\n\t\t\trequire (now >= dropStart && now <=dropEnd);\r\n\t\t}\r\n        require (balances[owner] > airDrop);\r\n        if(currentDrop + airDrop < totalDrop && !initialized[_address]){\r\n            initialized[_address] = true;\r\n            _transfer(owner, msg.sender, airDrop);\r\n            currentDrop += airDrop;\r\n            return balances[_address];\r\n        }\r\n    }\r\n\t\r\n\tfunction getMonth(uint256 _month) public returns (uint256) {\r\n\t\trequire (count > 0);\r\n\t\trequire (now > frozens[msg.sender]);\r\n\t\trequire (balances[msg.sender] >= minToken);\r\n\t    require (monthOpen[_month]);\r\n\t    require (!monthPower[_month][msg.sender]);\r\n\t\tif(drop){\r\n\t\t    initialize(msg.sender);\r\n\t\t}\r\n\t    uint256 _mpower = totalSupply * powers / 100 / users;\r\n\t    require (balances[owner] >= _mpower);\r\n\t\tmonthPower[_month][msg.sender] = true;\r\n\t\t_transfer(owner, msg.sender, _mpower);\r\n\t\tcount -= 1;\r\n        return _mpower;\r\n    }\r\n    \r\n    function balanceOf(address _address) public view returns(uint256){\r\n        return getBalances(_address);\r\n    }\r\n    \r\n    function getBalances(address _address) view internal returns (uint256) {\r\n        if (drop && now > frozens[_address] && currentDrop + airDrop < totalDrop && !initialized[_address]) {\r\n            return balances[_address] + airDrop;\r\n        }else {\r\n            return balances[_address];\r\n        }\r\n    }\r\n    \r\n    function takeEther(uint256 _balance) public payable onlyOwner {\r\n         owner.transfer(_balance);\r\n    }\r\n    \r\n    function () payable public {}\r\n    \r\n    function giveEther() public payable {\r\n    }\r\n    \r\n    function getEther(address _address) public view returns(uint256){\r\n        return _address.balance;\r\n    }\r\n\t\r\n\tfunction getTime() public view returns(uint256){\r\n        return now;\r\n    }\r\n    \r\n    function mintToken(address _address, uint256 _mintedAmount) public onlyOwner {\r\n        require(balances[_address] + _mintedAmount > balances[_address]);\r\n        require(totalSupply + _mintedAmount > totalSupply);\r\n        balances[_address] += _mintedAmount;\r\n        totalSupply += _mintedAmount;\r\n        emit Transfer(0, this, _mintedAmount);\r\n        emit Transfer(this, _address, _mintedAmount);\r\n    }\r\n    \r\n    /* Internal transfer, can only be called by this contract */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n\t\tif(_from != owner){\r\n\t\t\trequire (!lock);\r\n\t\t}\r\n        require (_to != 0x0);\r\n\t\trequire (_from != _to);\r\n        require (now > frozens[_from]);\r\n\t\trequire (now > frozens[_to]);\r\n\t\tif(drop){\r\n\t\t    initialize(_from);\r\n            initialize(_to);\r\n\t\t}\r\n\t\tif(now <= frozenEnd[_from]){\r\n\t\t\trequire (balances[_from] - frozenNum[_from] >= _value);\r\n\t\t}else{\r\n\t\t\trequire (balances[_from] >= _value);\r\n\t\t}\r\n        require (balances[_to] + _value > balances[_to]);\r\n        if(sellToContract && msg.sender.balance < minEtherForAccounts){\r\n            sell((minEtherForAccounts - msg.sender.balance) / sellPrice);\r\n        }\r\n        balances[_from] -= _value;\r\n        balances[_to] += _value;\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        \r\n    }\r\n    \r\n    function transfer(address _to, uint256  _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n\t\trequire (now > frozens[msg.sender]);\r\n        require(_value <= allowance[_from][msg.sender]);\r\n\t\t_transfer(_from, _to, _value);\r\n        allowance[_from][msg.sender] -= _value;\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success){\r\n\t\trequire (!lock);\r\n\t\tif(drop){\r\n    \t\tinitialize(msg.sender);\r\n            initialize(_spender);\r\n\t\t}\r\n        require(msg.sender != _spender);\r\n\t\trequire (now > frozens[msg.sender]);\r\n\t\tif(now <= frozenEnd[msg.sender]){\r\n\t\t\trequire (balances[msg.sender] - frozenNum[msg.sender] >= _value);\r\n\t\t}else{\r\n\t\t\trequire (balances[msg.sender] >= _value);\r\n\t\t}\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    \r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n    public\r\n    returns (bool success) {\r\n\t\trequire (!lock);\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n\t\trequire (!lock);\r\n        require(_value > 0);\r\n\t\trequire (now > frozens[msg.sender]);\r\n\t\tif(now <= frozenEnd[msg.sender]){\r\n\t\t\trequire (balances[msg.sender] - frozenNum[msg.sender] >= _value);\r\n\t\t}else{\r\n\t\t\trequire (balances[msg.sender] >= _value);\r\n\t\t}\r\n        balances[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\t\trequire (!lock);\r\n        require(_value > 0);\r\n\t\trequire (now > frozens[msg.sender]);\r\n\t\trequire (now > frozens[_from]);\r\n\t\tif(now <= frozenEnd[_from]){\r\n\t\t\trequire (balances[_from] - frozenNum[_from] >= _value);\r\n\t\t}else{\r\n\t\t\trequire (balances[_from] >= _value);\r\n\t\t}\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        balances[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    function buy() public payable{\r\n        require (!lock);\r\n        if(drop){\r\n            initialize(msg.sender);\r\n        }\r\n\t\tif(exchangeStart != exchangeEnd && exchangeEnd > 0){\r\n\t\t\trequire (now >= exchangeStart && now <=exchangeEnd);\r\n\t\t}\r\n        uint256 _amount = msg.value / buyPrice;\r\n        _transfer(owner, msg.sender, _amount);\r\n    }\r\n    \r\n    function sell(uint256 _amount) public {\r\n\t\trequire (!lock);\r\n\t\trequire (sellToContract);\r\n\t\trequire (now > frozens[msg.sender]);\r\n        require(_amount > 0);\r\n\t\tif(exchangeStart != exchangeEnd && exchangeEnd > 0){\r\n\t\t\trequire (now >= exchangeStart && now <=exchangeEnd);\r\n\t\t}\r\n\t\tif(now <= frozenEnd[msg.sender]){\r\n\t\t\trequire (balances[msg.sender] - frozenNum[msg.sender] >= _amount);\r\n\t\t}else{\r\n\t\t\trequire (balances[msg.sender] >= _amount);\r\n\t\t}\r\n        require(contractAddress.balance >= _amount * sellPrice);\r\n        _transfer(msg.sender, contractAddress, _amount);\r\n        msg.sender.transfer(_amount * sellPrice);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"giveEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_month\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setMonthClose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeStart\",\"type\":\"uint256\"},{\"name\":\"_exchangeEnd\",\"type\":\"uint256\"},{\"name\":\"_sellPrice\",\"type\":\"uint256\"},{\"name\":\"_buyPrice\",\"type\":\"uint256\"}],\"name\":\"setExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"monthPower\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_freeze\",\"type\":\"uint256\"},{\"name\":\"_freezeEnd\",\"type\":\"uint256\"}],\"name\":\"freezeMyFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellToContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"setLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dropEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"uint256\"},{\"name\":\"_freezeEnd\",\"type\":\"uint256\"}],\"name\":\"freezeUserFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dropStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"takeEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimumEtherInFinney\",\"type\":\"uint256\"}],\"name\":\"setMinEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"setDrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_month\",\"type\":\"uint256\"}],\"name\":\"getMonth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_lockEnd\",\"type\":\"uint256\"}],\"name\":\"lockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_month\",\"type\":\"uint256\"},{\"name\":\"_users\",\"type\":\"uint256\"},{\"name\":\"_powers\",\"type\":\"uint8\"},{\"name\":\"_minToken\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setMonthOpen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minEtherForAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sellToContract\",\"type\":\"bool\"}],\"name\":\"setSellToContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monthOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dropStart\",\"type\":\"uint256\"},{\"name\":\"_dropEnd\",\"type\":\"uint256\"},{\"name\":\"_airDrop\",\"type\":\"uint256\"},{\"name\":\"_totalDrop\",\"type\":\"uint256\"}],\"name\":\"setAirDrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"drop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"centralMinter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"uint256\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fronzeEnd\",\"type\":\"uint256\"}],\"name\":\"FrozenMyFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"MyToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003c13885727eabc33c0c13e27b7c53fb5ebd0417e","Library":"","SwarmSource":"bzzr://e0c23092343f8394d24595e4bfa7383b9221ec45689db261e83eb476e0a6936c"}]}