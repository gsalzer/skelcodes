{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n/**\r\n * @title Oracle Escrow\r\n * @dev The Oracle Escrow contract has an owner address, acting as the agent, a depositor,\r\n * and a beneficiary. It allows for funds to be held in escrow until a given real-world\r\n * external event has occurred. Relies on a unique Oracle contract address to be created\r\n * using smartcontract.com. Inheriting the Ownable contract allows for the agent to be updated\r\n * or removed from the contract without altering the execution of the contract or outcome. \r\n */\r\ncontract OracleEscrow is Ownable {\r\n  uint256 public expiration;\r\n  bool public contractExecuted;\r\n  address public depositor;\r\n  address public beneficiary;\r\n  IOracle internal oracle;\r\n  \r\n\r\n  // Expected value is hard-coded into the contract and can be verified by all parties\r\n  // before any deposit is made.\r\n  bytes32 public constant EXPECTED = \"yes\";\r\n\r\n  // Expiration date should be a factor of days to prevent timestamp dependence.\r\n  // https://consensys.github.io/smart-contract-best-practices/recommendations/#timestamp-dependence\r\n  uint256 internal constant TO_EXPIRE = 30 days;\r\n\r\n  /** \r\n   * @dev The OracleEscrow constructor sets the oracle, depositor, and beneficiary addresses.\r\n   * It also sets the `contractExecuted` field to `false` and sets the expiration of the agreement\r\n   * to be 30 days after the OracleEscrow contract has been deployed.\r\n   * @param _oracle address, the address of the deployed Oracle contract.\r\n   * @param _depositor address, the address of the depositor.\r\n   * @param _beneficiary address, the address of the beneficiary.\r\n   */\r\n  constructor(address _oracle, address _depositor, address _beneficiary) public payable Ownable() {\r\n    oracle = IOracle(_oracle);\r\n    depositor = _depositor;\r\n    beneficiary = _beneficiary;\r\n    contractExecuted = false;\r\n    expiration = now + TO_EXPIRE;\r\n  }\r\n\r\n  /**\r\n   * @dev Logs a message indicating where the escrow payment was sent to.\r\n   */\r\n  event ContractExecuted(bytes32 message);\r\n  \r\n  /**\r\n   * @dev payable fallback only allows the depositor to send funds, as long as the contract\r\n   * hasn't been executed already, and the expiration has not been passed.\r\n   */\r\n  function() external payable onlyDepositor {\r\n    require(contractExecuted == false);\r\n    require(now < expiration);\r\n  }\r\n  \r\n  /**\r\n   * @dev Executes the contract if called by an authorized user and the balance of the escrow\r\n   * is greater than 0. If the Oracle contract's reported value is the expected value, payment\r\n   * goes to the beneficiary. If the escrow contract has gone passed the expiration and the\r\n   * Oracle contract's reported value still is not what is expected, payment is returned to\r\n   * the depositor.\r\n   */\r\n  function executeContract() public checkAuthorizedUser() {\r\n    require(address(this).balance > 0);\r\n    if (oracle.current() == EXPECTED) {\r\n      contractExecuted = true;\r\n      emit ContractExecuted(\"Payment sent to beneficiary.\");\r\n      beneficiary.transfer(address(this).balance);\r\n    } else if (now >= expiration) {\r\n      contractExecuted = true;\r\n      emit ContractExecuted(\"Payment refunded to depositor.\");\r\n      depositor.transfer(address(this).balance);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Check the current value stored on the Oracle contract.\r\n   * @return The current value at the Oracle contract.\r\n   */\r\n  function requestOracleValue() public view onlyOwner returns(bytes32) {\r\n    return oracle.current();\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if called by any account other than the owner, depositor, or beneficiary.\r\n   */\r\n  modifier checkAuthorizedUser() {\r\n    require(msg.sender == owner || msg.sender == depositor || msg.sender == beneficiary, \"Only authorized users may call this function.\");\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev Reverts if called by any account other than the depositor.\r\n   */\r\n  modifier onlyDepositor() {\r\n    require(msg.sender == depositor, \"Only the depositor may call this function.\");\r\n    _;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Interface for the Oracle contract.\r\n */\r\ninterface IOracle{\r\n  function current() view external returns(bytes32);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"contractExecuted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestOracleValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXPECTED\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_depositor\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"ContractExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OracleEscrow","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000007ff37ede56e6905619c0f48bd440efa4908deff00000000000000000000000043c271dae2f5b0f55e010b8c8d56099da882f3cb00000000000000000000000054bbf682a8a8eac9df81012325ce5cf3b8d90d10","Library":"","SwarmSource":"bzzr://59ac3b293ef9d78a320b4fb0871b0746aff9cc3e4020fccdccd1b5059efe823f"}]}