{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n/*\r\n\r\nAvatarNetwork Copyright\r\n\r\nhttps://avatarnetwork.io\r\n\r\nSupport: //producetoken.blockchain.social\r\n\r\n*/\r\n\r\n/* Родительский контракт */\r\ncontract Owned {\r\n\r\n    /* Адрес владельца контракта*/\r\n    address owner;\r\n\r\n    /* Конструктор контракта, вызывается при первом запуске */\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n        /* Изменить владельца контракта, newOwner - адрес нового владельца */\r\n    function changeOwner(address newOwner) onlyowner {\r\n        owner = newOwner;\r\n    }\r\n\r\n\r\n    /* Модификатор для ограничения доступа к функциям только для владельца */\r\n    modifier onlyowner() {\r\n        if (msg.sender==owner) _;\r\n    }\r\n}\r\n\r\n// Абстрактный контракт для токена стандарта ERC 20\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract Token is Owned {\r\n\r\n    /// Общее кол-во токенов\r\n    uint256 public totalSupply;\r\n\r\n    /// @param _owner адрес, с которого будет получен баланс\r\n    /// @return Баланс\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n    /// @notice Отправить кол-во `_value` токенов на адрес `_to` с адреса `msg.sender`\r\n    /// @param _to Адрес получателя\r\n    /// @param _value Кол-во токенов для отправки\r\n    /// @return Была ли отправка успешной или нет\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n    /// @notice Отправить кол-во `_value` токенов на адрес `_to` с адреса `_from` при условии что это подтверждено отправителем `_from`\r\n    /// @param _from Адрес отправителя\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n    /// @notice Вызывающий функции `msg.sender` подтверждает что с адреса `_spender` спишется `_value` токенов\r\n    /// @param _spender Адрес аккаунта, с которого возможно списать токены\r\n    /// @param _value Кол-во токенов к подтверждению для отправки\r\n    /// @return Было ли подтверждение успешным или нет\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n    /// @param _owner Адрес аккаунта владеющего токенами\r\n    /// @param _spender Адрес аккаунта, с которого возможно списать токены\r\n    /// @return Кол-во оставшихся токенов разрешённых для отправки\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/*\r\nКонтракт реализует ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ncontract ERC20Token is Token\r\n{\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success)\r\n    {\r\n        //По-умолчанию предполагается, что totalSupply не может быть больше (2^256 - 1).\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success)\r\n    {\r\n        //По-умолчанию предполагается, что totalSupply не может быть больше (2^256 - 1).\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining)\r\n    {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\n/* Основной контракт токена, наследует ERC20Token */\r\ncontract ElixirUSD is ERC20Token\r\n{\r\n    bool public isTokenSale = true;\r\n    uint256 public price;\r\n    uint256 public limit;\r\n\r\n    address walletOut = 0x420d6edab112cf3dcbdd808333e597623094218a;\r\n\r\n    function getWalletOut() constant returns (address _to) {\r\n        return walletOut;\r\n    }\r\n\r\n    function () external payable  {\r\n        if (isTokenSale == false) {\r\n            throw;\r\n        }\r\n\r\n        uint256 tokenAmount = (msg.value  * 1000000000000000000) / price;\r\n\r\n        if (balances[owner] >= tokenAmount && balances[msg.sender] + tokenAmount > balances[msg.sender]) {\r\n            if (balances[owner] - tokenAmount < limit) {\r\n                throw;\r\n            }\r\n            balances[owner] -= tokenAmount;\r\n            balances[msg.sender] += tokenAmount;\r\n            Transfer(owner, msg.sender, tokenAmount);\r\n        } else {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function stopSale() onlyowner {\r\n        isTokenSale = false;\r\n    }\r\n\r\n    function startSale() onlyowner {\r\n        isTokenSale = true;\r\n    }\r\n\r\n    function setPrice(uint256 newPrice) onlyowner {\r\n        price = newPrice;\r\n    }\r\n\r\n    function setLimit(uint256 newLimit) onlyowner {\r\n        limit = newLimit;\r\n    }\r\n\r\n    function setWallet(address _to) onlyowner {\r\n        walletOut = _to;\r\n    }\r\n\r\n    function sendFund() onlyowner {\r\n        walletOut.send(this.balance);\r\n    }\r\n\r\n    /* Публичные переменные токена */\r\n    string public name;                 // Название\r\n    uint8 public decimals;              // Сколько десятичных знаков\r\n    string public symbol;               // Идентификатор (трехбуквенный обычно)\r\n    string public version = '1.0';      // Версия\r\n\r\n    function ElixirUSD()\r\n    {\r\n        totalSupply = 777000000000000000000000000000000;\r\n        balances[msg.sender] = 777000000000000000000000000000000;  // Передача создателю всех выпущенных монет\r\n        name = 'ElixirUSD';\r\n        decimals = 18;\r\n        symbol = 'ELCU';\r\n        price = 1694915254237290;\r\n        limit = 0;\r\n    }\r\n\r\n    \r\n    /* Добавляет на счет токенов */\r\n    function add(uint256 _value) onlyowner returns (bool success)\r\n    {\r\n        if (balances[msg.sender] + _value <= balances[msg.sender]) {\r\n            return false;\r\n        }\r\n        totalSupply += _value;\r\n        balances[msg.sender] += _value;\r\n        return true;\r\n    }\r\n\r\n\r\n    \r\n    /* Уничтожает токены на счете владельца контракта */\r\n    function burn(uint256 _value) onlyowner returns (bool success)\r\n    {\r\n        if (balances[msg.sender] < _value) {\r\n            return false;\r\n        }\r\n        totalSupply -= _value;\r\n        balances[msg.sender] -= _value;\r\n        return true;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWalletOut\",\"outputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendFund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ElixirUSD","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9e40bd668a70bc896842a694963c3583985aff322aa187c495588dbde976539c"}]}