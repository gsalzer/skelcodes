{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract BaseGame {\r\n\tfunction canSetBanker() view public returns (bool _result);\r\n    function setBanker(address _banker, uint256 _beginTime, uint256 _endTime) public returns(bool _result);\r\n    \r\n    string public gameName = \"NO.1\";\r\n    uint public gameType = 1004;\r\n    string public officialGameUrl;\r\n\r\n    function userRefund() public  returns(bool _result);\r\n\t\r\n\tuint public bankerBeginTime;\r\n\tuint public bankerEndTime;\r\n\taddress public currentBanker;\r\n\t\r\n\tmapping (address => uint256) public userEtherOf;\r\n}\r\n\r\n\r\ncontract Base is BaseGame{\r\n\tusing SafeMath for uint256;\r\n    uint public createTime = now;\r\n    address public owner;\r\n\tfunction Base() public {\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    function setOwner(address _newOwner)  public  onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    bool public globalLocked = false;\r\n\r\n    function lock() internal {\r\n        require(!globalLocked);\r\n        globalLocked = true;\r\n    }\r\n\r\n    function unLock() internal {\r\n        require(globalLocked);\r\n        globalLocked = false;\r\n    }\r\n\r\n    function setLock()  public onlyOwner{\r\n        globalLocked = false;\r\n    }\r\n\r\n    function userRefund() public  returns(bool _result) {\r\n        return _userRefund(msg.sender);\r\n    }\r\n\r\n    function _userRefund(address _to) internal returns(bool _result) {\r\n        require (_to != 0x0);\r\n        lock();\r\n        uint256 amount = userEtherOf[msg.sender];\r\n        if(amount > 0){\r\n            userEtherOf[msg.sender] = 0;\r\n            _to.transfer(amount);\r\n            _result = true;\r\n        }\r\n        else{\r\n            _result = false;\r\n        }\r\n        unLock();\r\n    }\r\n\t\r\n\tuint public currentEventId = 1;\r\n\r\n    function getEventId() internal returns(uint _result) {\r\n        _result = currentEventId;\r\n        currentEventId++;\r\n    }\r\n\t\r\n\tstring public officialGameUrl;\r\n    function setOfficialGameUrl(string _newOfficialGameUrl) public onlyOwner{\r\n        officialGameUrl = _newOfficialGameUrl;\r\n    }\r\n}\r\n\r\ncontract SoccerBet is Base\r\n{\r\n\tfunction SoccerBet(string _gameName) public {\r\n\t\tgameName = _gameName;\r\n        owner = msg.sender;\r\n    }\r\n\t\r\n\tuint public unpayPooling = 0;\r\n\tuint public losePooling = 0;\r\n\tuint public winPooling = 0;\r\n\tuint public samePooling = 0;\r\n\tuint public bankerAllDeposit = 0;\r\n\t\r\n\taddress public auction;\r\n\tfunction setAuction(address _newAuction) public onlyOwner{\r\n        auction = _newAuction;\r\n    }\r\n    modifier onlyAuction {\r\n\t    require(msg.sender == auction);\r\n        _;\r\n    }\r\n\t\r\n    modifier onlyBanker {\r\n        require(msg.sender == currentBanker);\r\n        require(bankerBeginTime <= now);\r\n        require(now < bankerEndTime);\r\n        _;\r\n    }    \r\n\t\r\n\tfunction canSetBanker() public view returns (bool _result){\r\n        _result =  false;\r\n\t\tif(now < bankerEndTime){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(userEtherOf[this] == 0){\r\n\t\t\t_result = true;\r\n\t\t}\r\n    }\r\n\t\r\n\tevent OnSetNewBanker(uint indexed _gameID, address _caller, address _banker, uint _beginTime, uint _endTime, uint _errInfo, uint _eventTime, uint eventId);\r\n\r\n    function setBanker(address _banker, uint _beginTime, uint _endTime) public onlyAuction returns(bool _result)\r\n    {\r\n        _result = false;\r\n        require(_banker != 0x0);\r\n\r\n        if(now < bankerEndTime){\r\n            emit OnSetNewBanker(gameID, msg.sender, _banker,  _beginTime,  _endTime, 1, now, getEventId());\r\n            return;\r\n        }\r\n\t\t\r\n\t\tif(userEtherOf[this] > 0){\r\n\t\t\temit OnSetNewBanker(gameID, msg.sender, _banker,  _beginTime,  _endTime, 5, now, getEventId());\r\n\t\t\treturn;\r\n\t\t}\r\n        \r\n        if(_beginTime > now){\r\n\t\t\temit OnSetNewBanker(gameID, msg.sender, _banker,  _beginTime,  _endTime, 3, now, getEventId());\r\n            return;\r\n        }\r\n\r\n        if(_endTime <= now){\r\n\t\t\temit OnSetNewBanker(gameID, msg.sender, _banker,  _beginTime,  _endTime, 4, now, getEventId());\r\n            return;\r\n        }\r\n\r\n        currentBanker = _banker;\r\n        bankerBeginTime = _beginTime;\r\n        bankerEndTime =  _endTime;\r\n\t\t\r\n\t\tunpayPooling = 0;\r\n\t\tlosePooling = 0;\r\n\t\twinPooling = 0;\r\n\t\tsamePooling = 0;\r\n\t\t\r\n\t\tbankerAllDeposit = 0;\r\n\t\t\r\n\t\tgameResult = 9;\r\n\t\t\r\n\t\tgameOver = true;\r\n\r\n\t\temit OnSetNewBanker(gameID, msg.sender, _banker,  _beginTime,  _endTime, 0, now, getEventId());\r\n        _result = true;\r\n    }\r\n\t\r\n\tstring public team1;\r\n    string public team2;\r\n\t\r\n\tuint public constant loseNum = 1;\r\n    uint public constant winNum = 3;\r\n    uint public constant sameNum = 0;\r\n\r\n    uint public loseOdd;\r\n    uint public winOdd;\r\n    uint public sameOdd;\r\n\t\r\n\tuint public betLastTime;\r\n\t\r\n\tuint public playNo = 1;\r\n    uint public gameID = 0;\r\n\t\r\n\tuint public gameBeginPlayNo;\r\n\t\r\n\tuint public gameResult = 9;\r\n\t\r\n\tuint  public gameBeginTime;\r\n\r\n    uint256 public gameMaxBetAmount;\r\n    uint256 public gameMinBetAmount;\r\n    bool public gameOver = true;\r\n\t\r\n\tuint public nextRewardPlayNo=1;\r\n    uint public currentRewardNum = 100;\r\n\r\n\taddress public decider;\r\n\tfunction setDecider(address _decider) public onlyOwner{\t\r\n        decider = _decider;\r\n    }\r\n    modifier onlyDecider{\r\n        require(msg.sender == decider);\r\n        _;\r\n    }\r\n\tfunction setGameResult(uint _gameResult) public onlyDecider{\r\n\t\trequire(!gameOver);\r\n\t\trequire(betLastTime + 90 minutes < now);\r\n\t\trequire(now < betLastTime + 30 days);\r\n\t\trequire(gameResult == 9);\r\n\t\trequire( _gameResult == loseNum || _gameResult == winNum || _gameResult == sameNum);\r\n\t\tgameResult = _gameResult;\r\n\t\tif(gameResult == 3){\r\n\t\t\tunpayPooling = winPooling;\r\n\t\t}else if(gameResult == 1){\r\n\t\t\tunpayPooling = losePooling;\r\n\t\t}else if(gameResult == 0){\r\n\t\t\tunpayPooling = samePooling;\r\n\t\t}\r\n\t}\r\n\r\n    event OnNewGame(uint indexed _gameID, address _banker , uint _betLastTime, uint _gameBeginTime, uint256 _gameMinBetAmount, uint256 _gameMaxBetAmount, uint _eventTime, uint eventId);\r\n\tevent OnGameInfo(uint indexed _gameID, string _team1, string _team2, uint _loseOdd, uint _winOdd, uint _sameOdd, uint _eventTime, uint eventId);\r\n\t\r\n    function newGame(string _team1, string _team2, uint _loseOdd, uint _winOdd, uint _sameOdd,  uint _betLastTime, uint256 _gameMinBetAmount, uint256 _gameMaxBetAmount) public onlyBanker payable returns(bool _result){\r\n        if (msg.value > 0){\r\n            userEtherOf[msg.sender] = userEtherOf[msg.sender].add(msg.value);\r\n        }\r\n\r\n        require(bytes(_team1).length < 100);\r\n\t\trequire(bytes(_team2).length < 100);\r\n\t\t\r\n\t\trequire(gameOver);\r\n        require(now > bankerBeginTime);\r\n        require(_gameMinBetAmount >= 100000000000000);\r\n        require(_gameMaxBetAmount >= _gameMinBetAmount);\r\n\t\trequire(now < _betLastTime);\r\n\t\trequire(_betLastTime+ 1 days < bankerEndTime);\r\n\t\t\t\r\n\t\t\r\n        _result = _newGame(_team1, _team2, _loseOdd, _winOdd, _sameOdd, _betLastTime, _gameMinBetAmount,  _gameMaxBetAmount);\r\n    }\r\n\r\n    function _newGame(string _team1, string _team2, uint _loseOdd, uint _winOdd, uint _sameOdd, uint _betLastTime, uint256 _gameMinBetAmount, uint256 _gameMaxBetAmount) private  returns(bool _result){\r\n        _result = false;\r\n\t\tgameID = gameID.add(1);\r\n\t\t\r\n\t\tteam1 = _team1;\r\n        team2 = _team2;\r\n\t\tloseOdd = _loseOdd;\r\n\t\twinOdd = _winOdd;\r\n\t\tsameOdd = _sameOdd;\r\n\t\temit OnGameInfo(gameID, team1, team2, loseOdd, winOdd, sameOdd, now, getEventId());\r\n\t\t\r\n\t\tbetLastTime = _betLastTime;\r\n        gameBeginTime = now;\r\n\t\tgameMinBetAmount = _gameMinBetAmount;\r\n        gameMaxBetAmount = _gameMaxBetAmount;\r\n\t\temit OnNewGame(gameID, msg.sender, betLastTime,  gameBeginTime, gameMinBetAmount,   gameMaxBetAmount, now, getEventId());\r\n\t\t\r\n        gameBeginPlayNo = playNo;\r\n        gameResult = 9;\r\n        gameOver = false;\r\n\t\tunpayPooling = 0;\r\n\t\tlosePooling = 0;\r\n\t\twinPooling = 0;\r\n\t\tsamePooling = 0;\r\n\t\t\r\n\t\tbankerAllDeposit = 0;\r\n\t\t\r\n        _result = true;\r\n    }\r\n\t\r\n    event OnSetOdd(uint indexed _gameID, uint _winOdd, uint _loseOdd, uint _sameOdd, uint _eventTime, uint eventId);\r\n\tfunction setOdd(uint _winOdd, uint _loseOdd, uint _sameOdd) onlyBanker public{\t\t\r\n\t\twinOdd = _winOdd;\r\n\t\tloseOdd = _loseOdd;\r\n\t\tsameOdd = _sameOdd;\t\r\n\t\temit OnSetOdd(gameID, winOdd, loseOdd, sameOdd, now, getEventId());\r\n\t}\r\n\r\n    struct betInfo\r\n    {\r\n        uint Odd;\r\n        address Player;\r\n        uint BetNum;\r\n        uint256 BetAmount;\r\n\t\tuint BetTime;\r\n        bool IsReturnAward;\r\n\t\tuint ResultNO;\r\n    }\r\n\r\n    mapping (uint => betInfo) public playerBetInfoOf;\r\n\r\n    event OnPlay( uint indexed _gameID, uint indexed _playNo, address indexed _player, string _gameName, uint odd, string _team1, uint _betNum, uint256 _betAmount,  uint _eventTime, uint eventId);\r\n    function play(uint _betNum, uint256 _betAmount) public payable  returns(bool _result){\r\n        if (msg.value > 0){\r\n            userEtherOf[msg.sender] = userEtherOf[msg.sender].add(msg.value);\r\n        }\r\n\t\t_result = _play(_betNum, _betAmount);\r\n    }\r\n\r\n    function _play(uint _betNum, uint256 _betAmount) private  returns(bool _result){\r\n        _result = false;\r\n        require(!gameOver);\r\n      \r\n        require( loseNum == _betNum || _betNum == winNum || _betNum == sameNum);\r\n        require(msg.sender != currentBanker);\r\n\r\n        require(now < betLastTime);\r\n\t\t\r\n\t\trequire(_betAmount >= gameMinBetAmount);\r\n        if (_betAmount > gameMaxBetAmount){\r\n            _betAmount = gameMaxBetAmount;\r\n        }\r\n\t\t\r\n\t\t_betAmount = _betAmount / 100 * 100;\r\n\t\t\r\n\t\tuint _odd = _seekOdd(_betNum, _betAmount);\r\n\t\t\r\n        require(userEtherOf[msg.sender] >= _betAmount);\r\n\r\n        betInfo memory bi= betInfo({\r\n            Odd :_odd,\r\n            Player :  msg.sender,\r\n            BetNum : _betNum,\r\n            BetAmount : _betAmount,\r\n\t\t\tBetTime : now,\r\n            IsReturnAward: false,\r\n\t\t\tResultNO: 9\r\n        });\r\n\r\n         playerBetInfoOf[playNo] = bi;\r\n        userEtherOf[msg.sender] = userEtherOf[msg.sender].sub(_betAmount); \r\n\t\tuserEtherOf[this] = userEtherOf[this].add(_betAmount);\r\n\t\t\r\n\t\tuint _maxpooling = _getMaxPooling();\r\n\t\tif(userEtherOf[this] < _maxpooling){\r\n\t\t\tuint BankerAmount = _maxpooling.sub(userEtherOf[this]);\r\n\t\t\trequire(userEtherOf[currentBanker] >= BankerAmount);\r\n\t\t\tuserEtherOf[currentBanker] = userEtherOf[currentBanker].sub(BankerAmount);\r\n\t\t\tuserEtherOf[this] = userEtherOf[this].add(BankerAmount);\r\n\t\t\tbankerAllDeposit = bankerAllDeposit.add(BankerAmount);\r\n\t\t}\r\n\t\t\r\n        emit OnPlay(gameID, playNo, msg.sender, gameName, _odd, team1, _betNum, _betAmount, now, getEventId());\r\n\r\n        playNo = playNo.add(1);\r\n        _result = true;\r\n    }\r\n\t\r\n\tfunction _seekOdd(uint _betNum, uint _betAmount) private returns (uint _odd){\r\n\t\tuint allAmount = 0;\r\n\t\tif(_betNum == 3){\r\n\t\t\tallAmount = _betAmount.mul(winOdd).div(100);\r\n\t\t\twinPooling = winPooling.add(allAmount);\r\n\t\t\t_odd  = winOdd;\r\n\t\t}else if(_betNum == 1){\r\n\t\t\tallAmount = _betAmount.mul(loseOdd).div(100);\r\n\t\t\tlosePooling = losePooling.add(allAmount);\r\n\t\t\t_odd = loseOdd;\r\n\t\t}else if(_betNum == 0){\r\n\t\t\tallAmount = _betAmount.mul(sameOdd).div(100);\r\n\t\t\tsamePooling = samePooling.add(allAmount);\r\n\t\t\t_odd = sameOdd;\r\n\t\t}\r\n    }\r\n\t\r\n\tfunction _getMaxPooling() private view returns(uint maxpooling){\r\n\t\tmaxpooling = winPooling;\r\n\t\tif(maxpooling < losePooling){\r\n\t\t\tmaxpooling = losePooling;\r\n\t\t}\r\n\t\tif(maxpooling < samePooling){\r\n\t\t\tmaxpooling = samePooling;\r\n\t\t}\r\n\t}\r\n\r\n\tevent OnOpenGameResult(uint indexed _gameID,uint indexed _palyNo, address _player, uint _gameResult, uint _eventTime, uint eventId);\r\n    function openGameLoop() public returns(bool _result){\r\n\t\tlock();\r\n        _result =  _openGameLoop();\r\n        unLock();\r\n    }\r\n\r\n    function _openGameLoop() private returns(bool _result){\r\n        _result = false;\r\n        _checkOpenGame();\r\n\t\tuint256 allAmount = 0;\r\n\t\tfor(uint i = 0; nextRewardPlayNo < playNo && i < currentRewardNum; i++ ){\r\n\t\t\tbetInfo storage p = playerBetInfoOf[nextRewardPlayNo];\r\n\t\t\tif(!p.IsReturnAward){\r\n\t\t\t\t_cashPrize(p, allAmount,nextRewardPlayNo);\r\n\t\t\t}\r\n\t\t\tnextRewardPlayNo = nextRewardPlayNo.add(1);\r\n\t\t}\r\n\t\t\r\n\t\t_setGameOver();\r\n\t\t\r\n\t\t_result = true;\r\n    }\r\n\t\r\n\tfunction openGamePlayNo(uint _playNo) public returns(bool _result){\r\n\t\tlock();\r\n        _result =  _openGamePlayNo(_playNo);\r\n        unLock();\r\n    }\r\n\r\n    function _openGamePlayNo(uint _playNo) private returns(bool _result){\r\n        _result = false;\r\n\t\trequire(_playNo >= gameBeginPlayNo && _playNo < playNo);\r\n\t\t_checkOpenGame();\r\n\t\t\r\n\t\tbetInfo storage p = playerBetInfoOf[_playNo];\r\n\t\trequire(!p.IsReturnAward);\r\n\t\t\r\n\t\tuint256 allAmount = 0;\r\n\t\t_cashPrize(p, allAmount,_playNo);\r\n\t\t\r\n\t\t_setGameOver();\r\n\t\t\r\n\t\t_result = true;\r\n    }\r\n\t\r\n\tfunction openGamePlayNos(uint[] _playNos) public returns(bool _result){\r\n\t\tlock();\r\n        _result =  _openGamePlayNos(_playNos);\r\n        unLock();\r\n    }\r\n\t\r\n    function _openGamePlayNos(uint[] _playNos) private returns(bool _result){\r\n        _result = false;\r\n        _checkOpenGame();\r\n\t\t\r\n\t\tuint256 allAmount = 0;\r\n\t\tfor (uint _index = 0; _index < _playNos.length; _index++) {\r\n\t\t\tuint _playNo = _playNos[_index];\r\n\t\t\tif(_playNo >= gameBeginPlayNo && _playNo < playNo){\r\n\t\t\t\tbetInfo storage p = playerBetInfoOf[_playNo];\r\n\t\t\t\tif(!p.IsReturnAward){\r\n\t\t\t\t\t_cashPrize(p, allAmount,_playNo);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t_setGameOver();\r\n\t\t\r\n\t\t_result = true;\r\n    }\r\n\t\r\n\t\r\n\tfunction openGameRange(uint _beginPlayNo, uint _endPlayNo) public returns(bool _result){\r\n\t\tlock();\r\n        _result =  _openGameRange(_beginPlayNo, _endPlayNo);\r\n        unLock();\r\n    }\r\n\t\r\n    function _openGameRange(uint _beginPlayNo, uint _endPlayNo) private returns(bool _result){\r\n        _result = false;\r\n\t\trequire(_beginPlayNo < _endPlayNo);\r\n\t\trequire(_beginPlayNo >= gameBeginPlayNo && _endPlayNo < playNo);\r\n\t\t\r\n\t\t_checkOpenGame();\r\n\t\t\r\n\t\tuint256 allAmount = 0;\r\n\t\tfor (uint _indexPlayNo = _beginPlayNo; _indexPlayNo <= _endPlayNo; _indexPlayNo++) {\r\n\t\t\tbetInfo storage p = playerBetInfoOf[_indexPlayNo];\r\n\t\t\tif(!p.IsReturnAward){\r\n\t\t\t\t_cashPrize(p, allAmount,_indexPlayNo);\r\n\t\t\t}\r\n\t\t}\r\n\t\t_setGameOver();\r\n\t\t_result = true;\r\n    }\r\n\t\r\n\tfunction _checkOpenGame() private view{\r\n\t\trequire(!gameOver);\r\n\t\trequire( gameResult == loseNum || gameResult == winNum || gameResult == sameNum);\r\n\t\trequire(betLastTime + 90 minutes < now);\r\n\t}\r\n\t\r\n\tfunction _cashPrize(betInfo storage _p, uint256 _allAmount,uint _playNo) private{\r\n\t\tif(_p.BetNum == gameResult){\r\n\t\t\t_allAmount = _p.BetAmount.mul(_p.Odd).div(100);\r\n\t\t\t\r\n\t\t\t_p.IsReturnAward = true;\r\n\t\t\t_p.ResultNO = gameResult;\r\n\t\t\tuserEtherOf[this] = userEtherOf[this].sub(_allAmount);\r\n\t\t\tunpayPooling = unpayPooling.sub(_allAmount);\r\n\t\t\tuserEtherOf[_p.Player] = userEtherOf[_p.Player].add(_allAmount);\r\n\t\t\temit OnOpenGameResult(gameID,_playNo, msg.sender, gameResult, now, getEventId());\r\n\t\t\t\r\n\t\t\tif(_p.BetNum == 3){\r\n\t\t\t\twinPooling = winPooling.sub(_allAmount);\r\n\t\t\t}else if(_p.BetNum == 1){\r\n\t\t\t\tlosePooling = losePooling.sub(_allAmount);\r\n\t\t\t}else if(_p.BetNum == 0){\r\n\t\t\t\tsamePooling = samePooling.sub(_allAmount);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}else{\r\n\t\t\t_p.IsReturnAward = true;\r\n\t\t\t_p.ResultNO = gameResult;\r\n\t\t\temit OnOpenGameResult(gameID,_playNo, msg.sender, gameResult, now, getEventId());\r\n\t\t\t\r\n\t\t\t_allAmount = _p.BetAmount.mul(_p.Odd).div(100);\r\n\t\t\tif(_p.BetNum == 3){\r\n\t\t\t\twinPooling = winPooling.sub(_allAmount);\r\n\t\t\t}else if(_p.BetNum == 1){\r\n\t\t\t\tlosePooling = losePooling.sub(_allAmount);\r\n\t\t\t}else if(_p.BetNum == 0){\r\n\t\t\t\tsamePooling = samePooling.sub(_allAmount);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction _setGameOver() private{\r\n\t\tif(unpayPooling == 0 && _canSetGameOver()){\r\n\t\t\tuserEtherOf[currentBanker] = userEtherOf[currentBanker].add(userEtherOf[this]);\r\n\t\t\tuserEtherOf[this] = 0;\r\n\t\t\tgameOver = true;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction _canSetGameOver() private view returns(bool){\r\n\t\treturn winPooling<100 && losePooling<100 && samePooling<100;\r\n\t}\r\n\t\r\n\tfunction failUserRefund(uint[] _playNos) public returns (bool _result) {\r\n        _result = false;\r\n        require(!gameOver);\r\n\t\trequire(gameResult == 9);\r\n        require(betLastTime + 31 days < now);\r\n\t\tfor (uint _index = 0; _index < _playNos.length; _index++) {\r\n\t\t\tuint _playNo = _playNos[_index];\r\n\t\t\tif(_playNo >= gameBeginPlayNo && _playNo < playNo){\r\n\t\t\t\tbetInfo storage p = playerBetInfoOf[_playNo];\r\n\t\t\t\tif(!p.IsReturnAward){\r\n\t\t\t\t\tp.IsReturnAward = true;\r\n\t\t\t\t\tuint256 ToUser = p.BetAmount;\r\n\t\t\t\t\tuserEtherOf[this] = userEtherOf[this].sub(ToUser);\r\n\t\t\t\t\tuserEtherOf[p.Player] =  userEtherOf[p.Player].add(ToUser);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(msg.sender == currentBanker && bankerAllDeposit>0){\r\n\t\t\tuserEtherOf[this] = userEtherOf[this].sub(bankerAllDeposit);\r\n\t\t\tuserEtherOf[currentBanker] =  userEtherOf[currentBanker].add(bankerAllDeposit);\r\n\t\t\tbankerAllDeposit = 0;\r\n\t\t}\r\n\t\tif(userEtherOf[this] == 0){\r\n\t\t\tgameOver = true;\r\n\t\t}\r\n\t\t_result = true;\r\n    }\r\n\r\n\t\r\n\tevent OnRefund(uint indexed _gameId, address _to, uint _amount, bool _result, uint _eventTime, uint eventId);\r\n\tfunction _userRefund(address _to) internal  returns(bool _result){\r\n\t\trequire (_to != 0x0);\r\n\t\trequire(_to != currentBanker || gameOver);\r\n\t\tlock();\r\n\t\tuint256 amount = userEtherOf[_to];\r\n\t\tif(amount > 0){\r\n\t\t\tuserEtherOf[msg.sender] = 0;\r\n\t\t\t_to.transfer(amount);\r\n\t\t\t_result = true;\r\n\t\t}else{\r\n\t\t\t_result = false;\r\n\t\t}\r\n\t\t\r\n\t\temit OnRefund(gameID, _to, amount, _result, now, getEventId());\r\n\t\tunLock();                                                                            \r\n    }\r\n\t\r\n\tfunction playEtherOf() public payable {\r\n        if (msg.value > 0){\r\n            userEtherOf[msg.sender] = userEtherOf[msg.sender].add(msg.value);                  \r\n        }\r\n    }\r\n\t\r\n\tfunction () public payable {\r\n        if(msg.value > 0){\r\n            userEtherOf[msg.sender] = userEtherOf[msg.sender].add(msg.value);\r\n\t\t\t\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentEventId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_team1\",\"type\":\"string\"},{\"name\":\"_team2\",\"type\":\"string\"},{\"name\":\"_loseOdd\",\"type\":\"uint256\"},{\"name\":\"_winOdd\",\"type\":\"uint256\"},{\"name\":\"_sameOdd\",\"type\":\"uint256\"},{\"name\":\"_betLastTime\",\"type\":\"uint256\"},{\"name\":\"_gameMinBetAmount\",\"type\":\"uint256\"},{\"name\":\"_gameMaxBetAmount\",\"type\":\"uint256\"}],\"name\":\"newGame\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerBetInfoOf\",\"outputs\":[{\"name\":\"Odd\",\"type\":\"uint256\"},{\"name\":\"Player\",\"type\":\"address\"},{\"name\":\"BetNum\",\"type\":\"uint256\"},{\"name\":\"BetAmount\",\"type\":\"uint256\"},{\"name\":\"BetTime\",\"type\":\"uint256\"},{\"name\":\"IsReturnAward\",\"type\":\"bool\"},{\"name\":\"ResultNO\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winOdd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"officialGameUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameResult\",\"type\":\"uint256\"}],\"name\":\"setGameResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOfficialGameUrl\",\"type\":\"string\"}],\"name\":\"setOfficialGameUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"samePooling\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameBeginTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playNo\",\"type\":\"uint256\"}],\"name\":\"openGamePlayNo\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameBeginPlayNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_decider\",\"type\":\"address\"}],\"name\":\"setDecider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEtherOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameMaxBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unpayPooling\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winPooling\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userRefund\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canSetBanker\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextRewardPlayNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankerAllDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playNos\",\"type\":\"uint256[]\"}],\"name\":\"openGamePlayNos\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betNum\",\"type\":\"uint256\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBanker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team1\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sameOdd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playNos\",\"type\":\"uint256[]\"}],\"name\":\"failUserRefund\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beginPlayNo\",\"type\":\"uint256\"},{\"name\":\"_endPlayNo\",\"type\":\"uint256\"}],\"name\":\"openGameRange\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_banker\",\"type\":\"address\"},{\"name\":\"_beginTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setBanker\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betLastTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAuction\",\"type\":\"address\"}],\"name\":\"setAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_winOdd\",\"type\":\"uint256\"},{\"name\":\"_loseOdd\",\"type\":\"uint256\"},{\"name\":\"_sameOdd\",\"type\":\"uint256\"}],\"name\":\"setOdd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"playEtherOf\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameMinBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sameNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"losePooling\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRewardNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team2\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankerBeginTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loseNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loseOdd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openGameLoop\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decider\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankerEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_gameName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_banker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_beginTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_errInfo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"OnSetNewBanker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_banker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_betLastTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_gameBeginTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_gameMinBetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_gameMaxBetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"OnNewGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_team1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_team2\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_loseOdd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winOdd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sameOdd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"OnGameInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winOdd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_loseOdd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sameOdd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"OnSetOdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_playNo\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gameName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"odd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_team1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_betNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"OnPlay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_palyNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gameResult\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"OnOpenGameResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"OnRefund\",\"type\":\"event\"}]","ContractName":"SoccerBet","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b4a6f616e206f6620417263000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://9515430ef3e3850ea565023ccabe20a5d5225dd4ac2a30ac0d7f84b486e2fada"}]}