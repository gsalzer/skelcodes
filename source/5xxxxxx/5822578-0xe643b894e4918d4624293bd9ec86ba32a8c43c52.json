{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a); \r\n    return a - b; \r\n  } \r\n  \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) { \r\n    uint256 c = a + b; assert(c >= a);\r\n    return c;\r\n  }\r\n \r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() { require(msg.sender == owner); _; }\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n        OwnershipTransferred(owner, newOwner);\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract FiatContract {\r\n  function USD(uint _id) constant returns (uint256);\r\n}\r\n\r\ncontract Main is Ownable {\r\n    using SafeMath for uint256;\r\n    address public wallet = 0x849861cE5c88F355A286d973302cf84A5e33fa6b; \r\n    uint256 public bonus = 50;\r\n    uint256 public price = 10;\r\n\r\n    function setBonus(uint newBonus) onlyOwner public  {\r\n        bonus = newBonus;\r\n    }\r\n\r\n    function setWallet(address _newWallet) onlyOwner public {\r\n        require(_newWallet != address(0));\r\n        wallet = _newWallet;\r\n    }\r\n\r\n    function setPrice(uint newPrice) onlyOwner public  {\r\n        price = newPrice;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ncontract Transaction is Main  {\r\n    uint256 USDv;\r\n    uint256 MIRAv;\r\n    FiatContract public fiat;\r\n    \r\n    ERC20 MIRAtoken = ERC20(0x8BCD8DaFc917BFe3C82313e05fc9738aeB72d555);\r\n\r\n     function Transaction() {\r\n          fiat = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591);\r\n     }\r\n   \r\n\r\n    function() external payable {\r\n        address buyer = msg.sender;\r\n        require(buyer != address(0));\r\n        require(msg.value != 0);\r\n        MIRAv = msg.value;\r\n        uint256 cent = fiat.USD(0);\r\n        uint256 dollar = cent*100;\r\n\r\n        USDv = msg.value.div(dollar); //USD\r\n        \r\n        require(USDv != 0);\r\n        \r\n        MIRAv = USDv.mul(1000).div(price);              // without bonus\r\n        MIRAv = MIRAv + MIRAv.div(100).mul(bonus);      // + bonus\r\n        MIRAv = MIRAv.mul(100000000);\r\n        \r\n        address(wallet).send(msg.value); //send eth\r\n        MIRAtoken.transfer(buyer,MIRAv); //send tokens\r\n    }\r\n\r\n    function getMIRABALANCE() public  constant returns (uint256) {  \r\n        require(msg.sender == owner);\r\n        return MIRAtoken.balanceOf(address(this)).div(100000000); \r\n        }\r\n    function getADR() public constant returns (address) {   return address(this);  }\r\n\r\n}\r\n\r\n\r\n\r\n// Please, visit https://miramind.io/risks.pdf to know more about the risks","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newBonus\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getADR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMIRABALANCE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiat\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Transaction","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3612ed6ebf9371215d2faaeb768c5fbf9f27954d2766232724f4c2780b135824"}]}