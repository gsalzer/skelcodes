{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Global Mobile Industry Service Ecosystem Chain \r\n * @dev Developed By Jack 5/14 2018 \r\n * @dev contact:jack.koe@gmail.com\r\n */\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function isOwner() internal view returns(bool success) {\r\n        if (msg.sender == owner) return true;\r\n        return false;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n * @dev Implementation of the basic standard token.\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MSCE is Ownable, StandardToken {\r\n    using SafeMath for uint256;\r\n\r\n    uint8 public constant TOKEN_DECIMALS = 18;\r\n\r\n    string public name = \"Mobile Ecosystem\"; \r\n    string public symbol = \"MSCE\";\r\n    uint8 public decimals = TOKEN_DECIMALS;\r\n\r\n\r\n    uint256 public totalSupply = 500000000 *(10**uint256(TOKEN_DECIMALS)); \r\n    uint256 public soldSupply = 0; \r\n    uint256 public sellSupply = 0; \r\n    uint256 public buySupply = 0; \r\n    bool public stopSell = true;\r\n    bool public stopBuy = true;\r\n\r\n    uint256 public crowdsaleStartTime = block.timestamp;\r\n    uint256 public crowdsaleEndTime = block.timestamp;\r\n\r\n    uint256 public crowdsaleTotal = 0;\r\n\r\n\r\n    uint256 public buyExchangeRate = 10000;   \r\n    uint256 public sellExchangeRate = 60000;  \r\n    address public ethFundDeposit;  \r\n\r\n\r\n    bool public allowTransfers = true; \r\n\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    bool public enableInternalLock = true; \r\n    mapping (address => bool) public internalLockAccount;\r\n\r\n    mapping (address => uint256) public releaseLockAccount;\r\n\r\n\r\n    event FrozenFunds(address target, bool frozen);\r\n    event IncreaseSoldSaleSupply(uint256 _value);\r\n    event DecreaseSoldSaleSupply(uint256 _value);\r\n\r\n    function MSCE() public {\r\n\r\n\r\n        balances[msg.sender] = totalSupply;             \r\n\r\n        ethFundDeposit = msg.sender;                      \r\n        allowTransfers = false;\r\n    }\r\n\r\n    function _isUserInternalLock() internal view returns (bool) {\r\n\r\n        return getAccountLockState(msg.sender);\r\n\r\n    }\r\n\r\n    function increaseSoldSaleSupply (uint256 _value) onlyOwner public {\r\n        require (_value + soldSupply < totalSupply);\r\n        soldSupply = soldSupply.add(_value);\r\n        IncreaseSoldSaleSupply(_value);\r\n    }\r\n\r\n    function decreaseSoldSaleSupply (uint256 _value) onlyOwner public {\r\n        require (soldSupply - _value > 0);\r\n        soldSupply = soldSupply.sub(_value);\r\n        DecreaseSoldSaleSupply(_value);\r\n    }\r\n\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n        balances[target] = balances[target].add(mintedAmount);\r\n        totalSupply = totalSupply.add(mintedAmount);\r\n        Transfer(0, this, mintedAmount);\r\n        Transfer(this, target, mintedAmount);\r\n    }\r\n\r\n    function destroyToken(address target, uint256 amount) onlyOwner public {\r\n        balances[target] = balances[target].sub(amount);\r\n        totalSupply = totalSupply.sub(amount);\r\n        Transfer(target, this, amount);\r\n        Transfer(this, 0, amount);\r\n    }\r\n\r\n\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n\r\n    function setEthFundDeposit(address _ethFundDeposit) onlyOwner public {\r\n        require(_ethFundDeposit != address(0));\r\n        ethFundDeposit = _ethFundDeposit;\r\n    }\r\n\r\n    function transferETH() onlyOwner public {\r\n        require(ethFundDeposit != address(0));\r\n        require(this.balance != 0);\r\n        require(ethFundDeposit.send(this.balance));\r\n    }\r\n\r\n\r\n    function setExchangeRate(uint256 _sellExchangeRate, uint256 _buyExchangeRate) onlyOwner public {\r\n        sellExchangeRate = _sellExchangeRate;\r\n        buyExchangeRate = _buyExchangeRate;\r\n    }\r\n\r\n    function setName(string _name) onlyOwner public {\r\n        name = _name;\r\n    }\r\n\r\n    function setSymbol(string _symbol) onlyOwner public {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function setAllowTransfers(bool _allowTransfers) onlyOwner public {\r\n        allowTransfers = _allowTransfers;\r\n    }\r\n\r\n    function transferFromAdmin(address _from, address _to, uint256 _value) onlyOwner public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function setEnableInternalLock(bool _isEnable) onlyOwner public {\r\n        enableInternalLock = _isEnable;\r\n    }\r\n\r\n    function lockInternalAccount(address _target, bool _lock, uint256 _releaseTime) onlyOwner public {\r\n        require(_target != address(0));\r\n\r\n        internalLockAccount[_target] = _lock;\r\n        releaseLockAccount[_target] = _releaseTime;\r\n\r\n    }\r\n\r\n    function getAccountUnlockTime(address _target) public view returns(uint256) {\r\n\r\n        return releaseLockAccount[_target];\r\n\r\n    }\r\n    function getAccountLockState(address _target) public view returns(bool) {\r\n        if(enableInternalLock && internalLockAccount[_target]){\r\n            if((releaseLockAccount[_target] > 0)&&(releaseLockAccount[_target]<block.timestamp)){       \r\n                return false;\r\n            }          \r\n            return true;\r\n        }\r\n        return false;\r\n\r\n    }\r\n\r\n    function internalSellTokenFromAdmin(address _to, uint256 _value, bool _lock, uint256 _releaseTime) onlyOwner public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[owner]);\r\n\r\n        balances[owner] = balances[owner].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        soldSupply = soldSupply.add(_value);\r\n        sellSupply = sellSupply.add(_value);\r\n\r\n        Transfer(owner, _to, _value);\r\n        \r\n        lockInternalAccount(_to, _lock, _releaseTime);\r\n\r\n        return true;\r\n    }\r\n\r\n    /***************************************************/\r\n    /*              BASE Functions                     */\r\n    /***************************************************/\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        if (!isOwner()) {\r\n            require (allowTransfers);\r\n            require(!frozenAccount[_from]);                                         \r\n            require(!frozenAccount[_to]);                                        \r\n            require(!_isUserInternalLock());                                       \r\n        }\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if (!isOwner()) {\r\n            require (allowTransfers);\r\n            require(!frozenAccount[msg.sender]);                                       \r\n            require(!frozenAccount[_to]);                                             \r\n            require(!_isUserInternalLock());                                           \r\n        }\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function () internal payable{\r\n\r\n        uint256 currentTime = block.timestamp;\r\n        require((currentTime>crowdsaleStartTime)&&(currentTime<crowdsaleEndTime));\r\n        require(crowdsaleTotal>0);\r\n\r\n        require(buy());\r\n\r\n        crowdsaleTotal = crowdsaleTotal.sub(msg.value.mul(buyExchangeRate));\r\n\r\n    }\r\n\r\n    function buy() payable public returns (bool){\r\n\r\n\r\n        uint256 amount = msg.value.mul(buyExchangeRate);\r\n\r\n        require(!stopBuy);\r\n        require(amount <= balances[owner]);\r\n\r\n        balances[owner] = balances[owner].sub(amount);\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n\r\n        soldSupply = soldSupply.add(amount);\r\n        buySupply = buySupply.add(amount);\r\n\r\n        Transfer(owner, msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function sell(uint256 amount) public {\r\n        uint256 ethAmount = amount.div(sellExchangeRate);\r\n        require(!stopSell);\r\n        require(this.balance >= ethAmount);      \r\n        require(ethAmount >= 1);      \r\n\r\n        require(balances[msg.sender] >= amount);                 \r\n        require(balances[owner] + amount > balances[owner]);       \r\n        require(!frozenAccount[msg.sender]);                       \r\n        require(!_isUserInternalLock());                                          \r\n\r\n        balances[owner] = balances[owner].add(amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n\r\n        soldSupply = soldSupply.sub(amount);\r\n        sellSupply = sellSupply.add(amount);\r\n\r\n        Transfer(msg.sender, owner, amount);\r\n\r\n        msg.sender.transfer(ethAmount); \r\n    }\r\n\r\n    function setCrowdsaleStartTime(uint256 _crowdsaleStartTime) onlyOwner public {\r\n        crowdsaleStartTime = _crowdsaleStartTime;\r\n    }\r\n\r\n    function setCrowdsaleEndTime(uint256 _crowdsaleEndTime) onlyOwner public {\r\n        crowdsaleEndTime = _crowdsaleEndTime;\r\n    }\r\n   \r\n\r\n    function setCrowdsaleTotal(uint256 _crowdsaleTotal) onlyOwner public {\r\n        crowdsaleTotal = _crowdsaleTotal;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleEndTime\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleStartTime\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_lock\",\"type\":\"bool\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"internalSellTokenFromAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseSoldSaleSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enableInternalLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_lock\",\"type\":\"bool\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"lockInternalAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopSell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseSoldSaleSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isEnable\",\"type\":\"bool\"}],\"name\":\"setEnableInternalLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleTotal\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"internalLockAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getAccountUnlockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releaseLockAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getAccountLockState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethFundDeposit\",\"type\":\"address\"}],\"name\":\"setEthFundDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowTransfers\",\"type\":\"bool\"}],\"name\":\"setAllowTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sellExchangeRate\",\"type\":\"uint256\"},{\"name\":\"_buyExchangeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"IncreaseSoldSaleSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"DecreaseSoldSaleSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MSCE","CompilerVersion":"v0.4.24-nightly.2018.5.11+commit.43803b1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d172f6b61b3567e3f58faf4516a5954d410d5d78e4c135a721ad7362aaf454e6"}]}