{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n    /**\r\n    * @title ERC20Basic\r\n    * @dev Simpler version of ERC20 interface\r\n    * @dev see https://github.com/ethereum/EIPs/issues/179\r\n    */\r\n    contract ERC20Basic {\r\n        uint256 public totalSupply;\r\n        function balanceOf(address who) public constant returns (uint256);\r\n        function transfer(address to, uint256 value) public returns (bool);\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n    }\r\n\r\n    /**\r\n    * @title ERC20 interface\r\n    * @dev see https://github.com/ethereum/EIPs/issues/20\r\n    */\r\n    contract ERC20 is ERC20Basic {\r\n        function allowance(address owner, address spender) constant returns (uint256);\r\n        function transferFrom(address from, address to, uint256 value) returns (bool);\r\n        function approve(address spender, uint256 value) returns (bool);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n\r\n    /**\r\n    * @title SafeMath\r\n    * @dev Math operations with safety checks that throw on error\r\n    */\r\n    library SafeMath {\r\n    \r\n        function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n            uint256 c = a * b;\r\n            assert(a == 0 || c / a == b);\r\n            return c;\r\n        }\r\n\r\n        function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n            // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n            uint256 c = a / b;\r\n            // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n            return c;\r\n        }\r\n\r\n        function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n            assert(b <= a);\r\n            return a - b;\r\n        }\r\n\r\n        function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n            uint256 c = a + b;\r\n            assert(c >= a);\r\n            return c;\r\n        }\r\n  \r\n    }\r\n\r\n    /**\r\n    * @title Basic token\r\n    * @dev Basic version of StandardToken, with no allowances. \r\n    */\r\n    contract BasicToken is ERC20Basic {\r\n    \r\n        using SafeMath for uint256;\r\n\r\n        mapping(address => uint256) balances;\r\n\r\n        /**\r\n        * @dev transfer token for a specified address\r\n        * @param _to The address to transfer to.\r\n        * @param _value The amount to be transferred.\r\n        */\r\n        function transfer(address _to, uint256 _value) public returns (bool) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * @dev Gets the balance of the specified address.\r\n        * @param _owner The address to query the the balance of. \r\n        * @return An uint256 representing the amount owned by the passed address.\r\n        */\r\n        function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n            return balances[_owner];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @title Standard ERC20 token\r\n     *\r\n     * @dev Implementation of the basic standard token.\r\n     * @dev https://github.com/ethereum/EIPs/issues/20\r\n     * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n     */\r\n    contract StandardToken is ERC20, BasicToken {\r\n\r\n        mapping (address => mapping (address => uint256)) allowed;\r\n\r\n        /**\r\n        * @dev Transfer tokens from one address to another\r\n        * @param _from address The address which you want to send tokens from\r\n        * @param _to address The address which you want to transfer to\r\n        * @param _value uint256 the amout of tokens to be transfered\r\n        */\r\n        function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n            var _allowance = allowed[_from][msg.sender];\r\n\r\n            // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n            // require (_value <= _allowance);\r\n\r\n            balances[_to] = balances[_to].add(_value);\r\n            balances[_from] = balances[_from].sub(_value);\r\n            allowed[_from][msg.sender] = _allowance.sub(_value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n        * @param _spender The address which will spend the funds.\r\n        * @param _value The amount of tokens to be spent.\r\n        */\r\n        function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n            // To change the approve amount you first have to reduce the addresses`\r\n            //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n            //  already 0 to mitigate the race condition described here:\r\n            //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n            require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n    \r\n            allowed[msg.sender][_spender] = _value;\r\n            Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n        * @param _owner address The address which owns the funds.\r\n        * @param _spender address The address which will spend the funds.\r\n        * @return A uint256 specifing the amount of tokens still available for the spender.\r\n        */\r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n            return allowed[_owner][_spender];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @title Ownable\r\n    * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n    * functions, this simplifies the implementation of \"user permissions\".\r\n    */\r\n    contract Ownable {\r\n    \r\n        address public owner;\r\n\r\n        /**\r\n        * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n        * account.\r\n        */\r\n        function Ownable() {\r\n            owner = msg.sender;\r\n        }\r\n\r\n        /**\r\n        * @dev Throws if called by any account other than the owner.\r\n        */\r\n        modifier onlyOwner() {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n\r\n        /**\r\n        * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n        * @param newOwner The address to transfer ownership to.\r\n        */\r\n        function transferOwnership(address newOwner) onlyOwner {\r\n            require(newOwner != address(0));      \r\n            owner = newOwner;\r\n        }\r\n\r\n    }   \r\n\r\n    /**\r\n    * @title Burnable Token\r\n    * @dev Token that can be irreversibly burned (destroyed).\r\n    */\r\n    contract BurnableToken is StandardToken {\r\n\r\n        /**\r\n        * @dev Burns a specific amount of tokens.\r\n        * @param _value The amount of token to be burned.\r\n        */\r\n        function burn(uint _value) public {\r\n            require(_value > 0);\r\n            address burner = msg.sender;\r\n            balances[burner] = balances[burner].sub(_value);\r\n            totalSupply = totalSupply.sub(_value);\r\n            Burn(burner, _value);\r\n        }\r\n\r\n        event Burn(address indexed burner, uint indexed value);\r\n\r\n    }\r\n\r\n    contract WhiteWallToken is BurnableToken, Ownable {\r\n    \r\n        string public constant name = \"WhiteWall Token\";\r\n   \r\n        string public constant symbol = \"WHW\";\r\n    \r\n        uint32 public constant decimals = 18;\r\n\r\n        uint256 public INITIAL_SUPPLY = 4000000 * 1 ether;\r\n  \r\n        uint public constant start = 1523836800;\r\n  \r\n        uint public constant period = 0;\r\n\r\n        function transfer(address _to, uint256 _value) public returns (bool) {\r\n            if (now < start + period * 1 days){\r\n                require(msg.sender == owner);\r\n                balances[msg.sender] = balances[msg.sender].sub(_value);\r\n                balances[_to] = balances[_to].add(_value);\r\n                Transfer(msg.sender, _to, _value);\r\n                return true;\r\n            }else{\r\n                balances[msg.sender] = balances[msg.sender].sub(_value);\r\n                balances[_to] = balances[_to].add(_value);\r\n                Transfer(msg.sender, _to, _value);\r\n                return true; \r\n            }\r\n        }\r\n    \r\n        function WhiteWallToken() {\r\n            totalSupply = INITIAL_SUPPLY;\r\n            balances[msg.sender] = INITIAL_SUPPLY;\r\n        }\r\n    \r\n    }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"WhiteWallToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8eb6e128e8f26e7b986e0bbf5a9d47017a44d454e452d4c34ade1ce338790ece"}]}