{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract SelfllerySaleFoundation is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    // Amount of Ether paid from each address\r\n    mapping (address => uint) public paidEther;\r\n    // Pre-sale participant tokens for each address\r\n    mapping (address => uint) public preSaleParticipantTokens;\r\n    // Number of tokens was sent during the ICO for each address\r\n    mapping (address => uint) public sentTokens;\r\n\r\n    // SELFLLERY PTE LTD (manager wallet)\r\n    address public selflleryManagerWallet;\r\n    // The token contract used for this ICO\r\n    ERC20 public token;\r\n    // Number of cents for 1 YOU\r\n    uint public tokenCents;\r\n    // The token price from 1 wei\r\n    uint public tokenPriceWei;\r\n    // Number of tokens in cents for sale\r\n    uint public saleTokensCents;\r\n\r\n    // The amount purchased tokens at the moment\r\n    uint public currentCapTokens;\r\n    // The amount of Ether raised at the moment\r\n    uint public currentCapEther;\r\n    // Start date of the ICO\r\n    uint public startDate;\r\n    // End date of bonus time\r\n    uint public bonusEndDate;\r\n    // End date of the ICO\r\n    uint public endDate;\r\n    // Hard cap of tokens\r\n    uint public hardCapTokens;\r\n    // The minimum purchase for user\r\n    uint public minimumPurchaseAmount;\r\n    // The bonus percent for purchase first 48 hours\r\n    uint8 public bonusPercent;\r\n\r\n    event PreSalePurchase(address indexed purchasedBy, uint amountTokens);\r\n\r\n    event Purchase(address indexed purchasedBy, uint amountTokens, uint etherWei);\r\n\r\n    /**\r\n    * @dev Throws if date isn't between ICO dates.\r\n    */\r\n    modifier onlyDuringICODates() {\r\n        require(now >= startDate && now <= endDate);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize the ICO contract\r\n    */\r\n    function SelfllerySaleFoundation(\r\n        address _token,\r\n        address _selflleryManagerWallet,\r\n        uint _tokenCents,\r\n        uint _tokenPriceWei,\r\n        uint _saleTokensCents,\r\n        uint _startDate,\r\n        uint _bonusEndDate,\r\n        uint _endDate,\r\n        uint _hardCapTokens,\r\n        uint _minimumPurchaseAmount,\r\n        uint8 _bonusPercent\r\n    )\r\n        public\r\n        Ownable()\r\n    {\r\n        token = ERC20(_token);\r\n        selflleryManagerWallet = _selflleryManagerWallet;\r\n        tokenCents = _tokenCents;\r\n        tokenPriceWei = _tokenPriceWei;\r\n        saleTokensCents = _saleTokensCents;\r\n        startDate = _startDate;\r\n        bonusEndDate = _bonusEndDate;\r\n        endDate = _endDate;\r\n        hardCapTokens = _hardCapTokens;\r\n        minimumPurchaseAmount = _minimumPurchaseAmount;\r\n        bonusPercent = _bonusPercent;\r\n    }\r\n\r\n    /**\r\n     * @dev Purchase tokens for the amount of ether sent to this contract\r\n     */\r\n    function () public payable {\r\n        purchase();\r\n    }\r\n\r\n    /**\r\n     * @dev Purchase tokens for the amount of ether sent to this contract\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function purchase() public payable returns(bool) {\r\n        return purchaseFor(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Purchase tokens for the amount of ether sent to this contract for custom address\r\n     * @param _participant The address of the participant\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function purchaseFor(address _participant) public payable onlyDuringICODates() returns(bool) {\r\n        require(_participant != 0x0);\r\n        require(paidEther[_participant].add(msg.value) >= minimumPurchaseAmount);\r\n\r\n        selflleryManagerWallet.transfer(msg.value);\r\n\r\n        uint currentBonusPercent = getCurrentBonusPercent();\r\n        uint totalTokens = calcTotalTokens(msg.value, currentBonusPercent);\r\n        require(currentCapTokens.add(totalTokens) <= saleTokensCents);\r\n        require(token.transferFrom(owner, _participant, totalTokens));\r\n        sentTokens[_participant] = sentTokens[_participant].add(totalTokens);\r\n        currentCapTokens = currentCapTokens.add(totalTokens);\r\n        currentCapEther = currentCapEther.add(msg.value);\r\n        paidEther[_participant] = paidEther[_participant].add(msg.value);\r\n        Purchase(_participant, totalTokens, msg.value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Change minimum purchase amount any time only owner\r\n     * @param _newMinimumPurchaseAmount New minimum puchase amount\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function changeMinimumPurchaseAmount(uint _newMinimumPurchaseAmount) public onlyOwner returns(bool) {\r\n        require(_newMinimumPurchaseAmount >= 0);\r\n        minimumPurchaseAmount = _newMinimumPurchaseAmount;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Add pre-sale purchased tokens only owner\r\n     * @param _participant The address of the participant\r\n     * @param _totalTokens Total tokens amount for pre-sale participant\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function addPreSalePurchaseTokens(address _participant, uint _totalTokens) public onlyOwner returns(bool) {\r\n        require(_participant != 0x0);\r\n        require(_totalTokens > 0);\r\n        require(currentCapTokens.add(_totalTokens) <= saleTokensCents);\r\n\r\n        require(token.transferFrom(owner, _participant, _totalTokens));\r\n        sentTokens[_participant] = sentTokens[_participant].add(_totalTokens);\r\n        preSaleParticipantTokens[_participant] = preSaleParticipantTokens[_participant].add(_totalTokens);\r\n        currentCapTokens = currentCapTokens.add(_totalTokens);\r\n        PreSalePurchase(_participant, _totalTokens);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Is finish date ICO reached?\r\n     * @return A boolean that indicates if finish date ICO reached.\r\n     */\r\n    function isFinishDateReached() public constant returns(bool) {\r\n        return endDate <= now;\r\n    }\r\n\r\n    /**\r\n     * @dev Is hard cap tokens reached?\r\n     * @return A boolean that indicates if hard cap tokens reached.\r\n     */\r\n    function isHardCapTokensReached() public constant returns(bool) {\r\n        return hardCapTokens <= currentCapTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Is ICO Finished?\r\n     * @return A boolean that indicates if ICO finished.\r\n     */\r\n    function isIcoFinished() public constant returns(bool) {\r\n        return isFinishDateReached() || isHardCapTokensReached();\r\n    }\r\n\r\n    /**\r\n     * @dev Calc total tokens for fixed value and bonus percent\r\n     * @param _value Amount of ether\r\n     * @param _bonusPercent Bonus percent\r\n     * @return uint\r\n     */\r\n    function calcTotalTokens(uint _value, uint _bonusPercent) internal view returns(uint) {\r\n        uint tokensAmount = _value.mul(tokenCents).div(tokenPriceWei);\r\n        require(tokensAmount > 0);\r\n        uint bonusTokens = tokensAmount.mul(_bonusPercent).div(100);\r\n        uint totalTokens = tokensAmount.add(bonusTokens);\r\n        return totalTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Get current bonus percent for this transaction\r\n     * @return uint\r\n     */\r\n    function getCurrentBonusPercent() internal constant returns (uint) {\r\n        uint currentBonusPercent;\r\n        if (now <= bonusEndDate) {\r\n            currentBonusPercent = bonusPercent;\r\n        } else {\r\n            currentBonusPercent = 0;\r\n        }\r\n        return currentBonusPercent;\r\n    }\r\n}\r\n\r\ncontract SelfllerySale is SelfllerySaleFoundation {\r\n    address constant TOKEN_ADDRESS = 0x7e921CA9b78d9A6cCC39891BA545836365525C06; // Token YOU\r\n    address constant SELFLLERY_MANAGER_WALLET = 0xdABb398298192192e5d4Ed2f120Ff7Af312B06eb;// SELFLLERY PTE LTD\r\n    uint constant TOKEN_CENTS = 1e18;\r\n    uint constant TOKEN_PRICE_WEI = 1e15;\r\n    uint constant SALE_TOKENS_CENTS = 55000000 * TOKEN_CENTS;\r\n    uint constant SALE_HARD_CAP_TOKENS = 55000000 * TOKEN_CENTS;\r\n\r\n    uint8 constant BONUS_PERCENT = 5;\r\n    uint constant MINIMUM_PURCHASE_AMOUNT = 0.1 ether;\r\n\r\n    uint constant SALE_START_DATE = 1520240400; // 05.03.2018 9:00 UTC\r\n    uint constant SALE_BONUS_END_DATE = 1520413200; // 07.03.2018 9:00 UTC\r\n    uint constant SALE_END_DATE = 1522144800; // 27.03.2018 10:00 UTC\r\n\r\n    /**\r\n     * @dev Initialize the ICO contract\r\n    */\r\n    function SelfllerySale()\r\n        public\r\n        SelfllerySaleFoundation(\r\n            TOKEN_ADDRESS,\r\n            SELFLLERY_MANAGER_WALLET,\r\n            TOKEN_CENTS,\r\n            TOKEN_PRICE_WEI,\r\n            SALE_TOKENS_CENTS,\r\n            SALE_START_DATE,\r\n            SALE_BONUS_END_DATE,\r\n            SALE_END_DATE,\r\n            SALE_HARD_CAP_TOKENS,\r\n            MINIMUM_PURCHASE_AMOUNT,\r\n            BONUS_PERCENT\r\n        ) {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"preSaleParticipantTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinishDateReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"paidEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCapEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_totalTokens\",\"type\":\"uint256\"}],\"name\":\"addPreSalePurchaseTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCapTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumPurchaseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sentTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleTokensCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isHardCapTokensReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selflleryManagerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinimumPurchaseAmount\",\"type\":\"uint256\"}],\"name\":\"changeMinimumPurchaseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"purchaseFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchasedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"PreSalePurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchasedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherWei\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SelfllerySale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f9b64dcbf436907093b0422d5aa68ce8015e86db7a4477b59ff886c409190091"}]}