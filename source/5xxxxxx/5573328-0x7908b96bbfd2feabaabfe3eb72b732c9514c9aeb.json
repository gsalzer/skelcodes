{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ncontract Verification {\r\n\tusing SafeMath for uint256;\r\n    mapping(address => uint256) veruser;\r\n\tfunction RA(address _to) public view returns(bool){\r\n\t\tif(veruser[_to]>0){\r\n\t\t\treturn true;\r\n\t\t}else{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\tfunction VerificationAccountOnJullar() public {\r\n\t    if(RA(msg.sender) == false){\r\n\t\t    veruser[msg.sender] = veruser[msg.sender].add(1);\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tstring public TestText = \"Gaziali\";\r\n\t\r\n\tfunction RT() public view returns(string){\r\n\t\treturn TestText;\r\n\t}\r\n\t\r\n\tfunction CIzTezt(string _value) public{\r\n\t\tTestText = _value;\r\n\t}\r\n\t\r\n\tfunction VaN(address _to) public {\r\n\t\tif(RA(_to) == false){\r\n\t\t    veruser[_to] = veruser[_to].add(1);\t\r\n\t\t}\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"RA\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"VaN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TestText\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"VerificationAccountOnJullar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"CIzTezt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RT\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Verification","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7222f4d32e3cac9ca13cf329f92a118ec7731174e3edfcd8c53db16fd4ec81c8"}]}