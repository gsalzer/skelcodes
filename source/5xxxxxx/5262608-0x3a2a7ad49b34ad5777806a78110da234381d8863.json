{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.16;\r\n\r\n\r\ncontract Bond {\r\n    \r\n    uint public issuerDateMinutes;\r\n    string public issuerName;\r\n    string public name;\r\n    string public description;\r\n    uint128 public totalAssetUnits;\r\n    uint128 public totalFiatValue;\r\n    uint128 public fiatPerAssetUnit;\r\n    uint128 public interestRate;\r\n    string public fiatCurrency;\r\n    uint16 public paymentPeriods;\r\n\r\n    address public owner;\r\n    string bondID; \r\n    address public issuer;\r\n    address public escrowContract;\r\n    mapping(address => uint128) balances;\r\n    \r\n    bool public matured;\r\n    uint public matured_block_number;\r\n    uint public matured_timestamp;\r\n    \r\n    event TxExecuted(uint32 indexed event_id);\r\n\r\n    function Bond(\r\n        uint _issuerDateMinutes,\r\n        string _issuerName,\r\n        string _name,\r\n        string _description,\r\n        uint128 _totalAssetUnits,\r\n        uint128 _totalFiatValue,\r\n        uint128 _fiatPerAssetUnit,\r\n        uint128 _interestRate,\r\n        uint16 _paymentPeriods,\r\n        string _bondID,\r\n        string _fiatCurrency,\r\n        address _escrowContract) {\r\n            issuerDateMinutes = _issuerDateMinutes;\r\n            issuerName = _issuerName;\r\n            name = _name;\r\n            description = _description;\r\n            totalAssetUnits = _totalAssetUnits;\r\n            totalFiatValue = _totalFiatValue;\r\n            fiatPerAssetUnit = _fiatPerAssetUnit;\r\n            interestRate = _interestRate;\r\n            paymentPeriods = _paymentPeriods;\r\n            fiatCurrency = _fiatCurrency;\r\n                        \r\n            owner = msg.sender;\r\n            bondID = _bondID;\r\n            escrowContract = _escrowContract;\r\n            matured = false;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        if(msg.sender == owner) _;\r\n    }\r\n    \r\n    modifier onlyIssuer() {\r\n        if(msg.sender == issuer) _;\r\n    }\r\n    \r\n    function setMatured(uint32 event_id) onlyOwner returns (bool success) {\r\n        if(matured==false){\r\n            matured = true;\r\n            matured_block_number = block.number;\r\n            matured_timestamp = block.timestamp;\r\n            TxExecuted(event_id);\r\n        }        \r\n        return true;\r\n    }\r\n    \r\n    function checkBalance(address account) constant returns (uint128 _balance) {\r\n        if(matured)\r\n            return 0;\r\n        return balances[account];\r\n    }\r\n    \r\n    function getTotalSupply() constant returns (uint supply) {\r\n        return totalAssetUnits;\r\n    }\r\n    \r\n    function setIssuer(address _issuer, uint32 event_id) onlyOwner returns (bool success) {\r\n        if(matured==false && issuer==address(0)){\r\n            issuer = _issuer;\r\n            balances[_issuer] = totalAssetUnits;\r\n            TxExecuted(event_id);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function getIssuer() constant returns (address _issuer) {\r\n        return issuer;\r\n    }\r\n    \r\n    struct Transfer {\r\n        uint128 lockAmount;\r\n        bytes32 currencyAndBank;\r\n        address executingBond;\r\n        address lockFrom;\r\n        address issuer;\r\n        uint128 assetAmount;\r\n        uint128 balancesIssuer;\r\n        uint32 event_id;\r\n        bool first;\r\n        bool second;\r\n    }\r\n    mapping (bytes16 => Transfer) public transferBond; \r\n    function transfer(uint128 assetAmount, bytes16 lockID, uint32 event_id) onlyIssuer returns (bool success) {\r\n        if(matured==false){\r\n            uint128 lockAmount;\r\n            bytes32 currencyAndBank;\r\n            address executingBond;\r\n            address lockFrom;\r\n            transferBond[lockID].assetAmount = assetAmount;\r\n            transferBond[lockID].event_id = event_id;\r\n            Escrow escrow = Escrow(escrowContract);        \r\n            (lockAmount, currencyAndBank, lockFrom, executingBond) = escrow.lockedMoney(lockID);\r\n            transferBond[lockID].lockAmount = lockAmount;\r\n            transferBond[lockID].currencyAndBank = currencyAndBank;\r\n            transferBond[lockID].executingBond = executingBond;\r\n            transferBond[lockID].lockFrom = lockFrom;\r\n            transferBond[lockID].issuer = issuer;\r\n            transferBond[lockID].balancesIssuer = balances[issuer];\r\n            transferBond[lockID].first = balances[issuer]>=assetAmount;\r\n            transferBond[lockID].second = escrow.executeLock(lockID, issuer)==true;        \r\n            if(transferBond[lockID].first && transferBond[lockID].second){ \r\n                balances[lockFrom] += assetAmount;\r\n                balances[issuer] -= assetAmount;\r\n                TxExecuted(event_id);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract Escrow{\r\n    \r\n    function Escrow() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    mapping (address => mapping (bytes32 => uint128)) public balances;\r\n    mapping (bytes16 => Lock) public lockedMoney;\r\n    address public owner;\r\n    \r\n    struct Lock {\r\n        uint128 amount;\r\n        bytes32 currencyAndBank;\r\n        address from;\r\n        address executingBond;\r\n    }\r\n    \r\n    event TxExecuted(uint32 indexed event_id);\r\n    \r\n    modifier onlyOwner() {\r\n        if(msg.sender == owner)\r\n        _;\r\n    }\r\n    \r\n    function checkBalance(address acc, string currencyAndBank) constant returns (uint128 balance) {\r\n        bytes32 cab = sha3(currencyAndBank);\r\n        return balances[acc][cab];\r\n    }\r\n    \r\n    function getLocked(bytes16 lockID) returns (uint) {\r\n        return lockedMoney[lockID].amount;\r\n    }\r\n    \r\n    function deposit(address to, uint128 amount, string currencyAndBank, uint32 event_id) \r\n        onlyOwner returns(bool success) {\r\n            bytes32 cab = sha3(currencyAndBank);\r\n            balances[to][cab] += amount;\r\n            TxExecuted(event_id);\r\n            return true;\r\n    } \r\n    \r\n    function withdraw(uint128 amount, string currencyAndBank, uint32 event_id) \r\n        returns(bool success) {\r\n            bytes32 cab = sha3(currencyAndBank);\r\n            require(balances[msg.sender][cab] >= amount);\r\n            balances[msg.sender][cab] -= amount;\r\n            TxExecuted(event_id);\r\n            return true;\r\n    }\r\n    \r\n    function lock(uint128 amount, string currencyAndBank, address executingBond, bytes16 lockID, uint32 event_id) \r\n        returns(bool success) {   \r\n            bytes32 cab = sha3(currencyAndBank);\r\n            require(balances[msg.sender][cab] >= amount);\r\n            balances[msg.sender][cab] -= amount;\r\n            lockedMoney[lockID].currencyAndBank = cab;\r\n            lockedMoney[lockID].amount += amount;\r\n            lockedMoney[lockID].from = msg.sender;\r\n            lockedMoney[lockID].executingBond = executingBond;\r\n            TxExecuted(event_id);\r\n            return true; \r\n    }\r\n    \r\n    function executeLock(bytes16 lockID, address issuer) returns(bool success) {\r\n        if(msg.sender == lockedMoney[lockID].executingBond){\r\n\t        balances[issuer][lockedMoney[lockID].currencyAndBank] += lockedMoney[lockID].amount;            \r\n\t        delete lockedMoney[lockID];\r\n\t        return true;\r\n\t\t}else\r\n\t\t    return false;\r\n    }\r\n    \r\n    function unlock(bytes16 lockID, uint32 event_id) onlyOwner returns (bool success) {\r\n        balances[lockedMoney[lockID].from][lockedMoney[lockID].currencyAndBank] +=\r\n            lockedMoney[lockID].amount;\r\n        delete lockedMoney[lockID];\r\n        TxExecuted(event_id);\r\n        return true;\r\n    }\r\n    \r\n    function pay(address to, uint128 amount, string currencyAndBank, uint32 event_id) \r\n        returns (bool success){\r\n            bytes32 cab = sha3(currencyAndBank);\r\n            require(balances[msg.sender][cab] >= amount);\r\n            balances[msg.sender][cab] -= amount;\r\n            balances[to][cab] += amount;\r\n            TxExecuted(event_id);\r\n            return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiatCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAssetUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFiatValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"matured_block_number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetAmount\",\"type\":\"uint128\"},{\"name\":\"lockID\",\"type\":\"bytes16\"},{\"name\":\"event_id\",\"type\":\"uint32\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuerName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"event_id\",\"type\":\"uint32\"}],\"name\":\"setMatured\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"matured_timestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"matured\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIssuer\",\"outputs\":[{\"name\":\"_issuer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuerDateMinutes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentPeriods\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiatPerAssetUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_issuer\",\"type\":\"address\"},{\"name\":\"event_id\",\"type\":\"uint32\"}],\"name\":\"setIssuer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"transferBond\",\"outputs\":[{\"name\":\"lockAmount\",\"type\":\"uint128\"},{\"name\":\"currencyAndBank\",\"type\":\"bytes32\"},{\"name\":\"executingBond\",\"type\":\"address\"},{\"name\":\"lockFrom\",\"type\":\"address\"},{\"name\":\"issuer\",\"type\":\"address\"},{\"name\":\"assetAmount\",\"type\":\"uint128\"},{\"name\":\"balancesIssuer\",\"type\":\"uint128\"},{\"name\":\"event_id\",\"type\":\"uint32\"},{\"name\":\"first\",\"type\":\"bool\"},{\"name\":\"second\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrowContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_issuerDateMinutes\",\"type\":\"uint256\"},{\"name\":\"_issuerName\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_totalAssetUnits\",\"type\":\"uint128\"},{\"name\":\"_totalFiatValue\",\"type\":\"uint128\"},{\"name\":\"_fiatPerAssetUnit\",\"type\":\"uint128\"},{\"name\":\"_interestRate\",\"type\":\"uint128\"},{\"name\":\"_paymentPeriods\",\"type\":\"uint16\"},{\"name\":\"_bondID\",\"type\":\"string\"},{\"name\":\"_fiatCurrency\",\"type\":\"string\"},{\"name\":\"_escrowContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"event_id\",\"type\":\"uint32\"}],\"name\":\"TxExecuted\",\"type\":\"event\"}]","ContractName":"Bond","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000182d9e9000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000063eb89da4ed0000000000000000000000000000000000000000000000000018650127cc3dc800000000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000c86be6c70b8b029464c614f780435aeb53dc7bfc000000000000000000000000000000000000000000000000000000000000000f3175313532313135393334353535390000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f3161313532313136303835373737380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014a546869732069732061205072696e636970616c2050726f746563746564204e6f7465202850504e292070726f766964696e67206120636f6e646974696f6e616c207570736964652070617274696369706174696f6e20746f2074686520706572666f726d616e6365206f6620746865206953686172657320436f7265204654534520313030205543495453204554462064656e6f6d696e6174656420696e204742502e205468652063656e7472616c20637573746f6479206f6620746865206e6f7465206973207769746820436c65617273747265616d2042616e6b696e67204147204672616e6b667572742e2054686520756e6465726c79696e6720637265646974206f6e20746865206e6f7465206973206279204d6172657820536f6c7574696f6e732c20696e636c7564696e6720746865206465726976617469766520636f6d706f6e656e742e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010326172313532313136303837313632350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036762700000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://89a8de05631a54f647a2e61b058418bd6065df038302446ddc404716b60d69e2"}]}