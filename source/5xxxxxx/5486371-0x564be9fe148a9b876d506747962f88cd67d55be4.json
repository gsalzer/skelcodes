{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/MainFabric.sol\r\n\r\n//import \"./tokens/ERC20StandardToken.sol\";\r\n//import \"./tokens/ERC20MintableToken.sol\";\r\n//import \"./crowdsale/RefundCrowdsale.sol\";\r\n\r\ncontract MainFabric is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Contract {\r\n        address addr;\r\n        address owner;\r\n        address fabric;\r\n        string contractType;\r\n        uint256 index;\r\n    }\r\n\r\n    struct Fabric {\r\n        address addr;\r\n        address owner;\r\n        bool isActive;\r\n        uint256 index;\r\n    }\r\n\r\n    struct Admin {\r\n        address addr;\r\n        address[] contratcs;\r\n        uint256 numContratcs;\r\n        uint256 index;\r\n    }\r\n\r\n    // ---====== CONTRACTS ======---\r\n    /**\r\n     * @dev Get contract object by address\r\n     */\r\n    mapping(address => Contract) public contracts;\r\n\r\n    /**\r\n     * @dev Contracts addresses list\r\n     */\r\n    address[] public contractsAddr;\r\n\r\n    /**\r\n     * @dev Count of contracts in list\r\n     */\r\n    function numContracts() public view returns (uint256)\r\n    { return contractsAddr.length; }\r\n\r\n\r\n    // ---====== ADMINS ======---\r\n    /**\r\n     * @dev Get contract object by address\r\n     */\r\n    mapping(address => Admin) public admins;\r\n\r\n    /**\r\n     * @dev Contracts addresses list\r\n     */\r\n    address[] public adminsAddr;\r\n\r\n    /**\r\n     * @dev Count of contracts in list\r\n     */\r\n    function numAdmins() public view returns (uint256)\r\n    { return adminsAddr.length; }\r\n\r\n    function getAdminContract(address _adminAddress, uint256 _index) public view returns (\r\n        address\r\n    ) {\r\n        return (\r\n            admins[_adminAddress].contratcs[_index]\r\n        );\r\n    }\r\n\r\n    // ---====== FABRICS ======---\r\n    /**\r\n     * @dev Get fabric object by address\r\n     */\r\n    mapping(address => Fabric) public fabrics;\r\n\r\n    /**\r\n     * @dev Fabrics addresses list\r\n     */\r\n    address[] public fabricsAddr;\r\n\r\n    /**\r\n     * @dev Count of fabrics in list\r\n     */\r\n    function numFabrics() public view returns (uint256)\r\n    { return fabricsAddr.length; }\r\n\r\n    /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyFabric() {\r\n        require(fabrics[msg.sender].isActive);\r\n        _;\r\n    }\r\n\r\n    // ---====== CONSTRUCTOR ======---\r\n\r\n    function MainFabric() public {\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Add fabric\r\n     * @param _address Fabric address\r\n     */\r\n    function addFabric(\r\n        address _address\r\n    )\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n    {\r\n        fabrics[_address].addr = _address;\r\n        fabrics[_address].owner = msg.sender;\r\n        fabrics[_address].isActive = true;\r\n        fabrics[_address].index = fabricsAddr.push(_address) - 1;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove fabric\r\n     * @param _address Fabric address\r\n     */\r\n    function removeFabric(\r\n        address _address\r\n    )\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n    {\r\n        require(fabrics[_address].isActive);\r\n        fabrics[_address].isActive = false;\r\n\r\n        uint rowToDelete = fabrics[_address].index;\r\n        address keyToMove   = fabricsAddr[fabricsAddr.length-1];\r\n        fabricsAddr[rowToDelete] = keyToMove;\r\n        fabrics[keyToMove].index = rowToDelete;\r\n        fabricsAddr.length--;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Create refund crowdsale\r\n     * @param _address Fabric address\r\n     */\r\n    function addContract(\r\n        address _address,\r\n        address _owner,\r\n        string _contractType\r\n    )\r\n    public\r\n    onlyFabric\r\n    returns (bool)\r\n    {\r\n        contracts[_address].addr = _address;\r\n        contracts[_address].owner = _owner;\r\n        contracts[_address].fabric = msg.sender;\r\n        contracts[_address].contractType = _contractType;\r\n        contracts[_address].index = contractsAddr.push(_address) - 1;\r\n\r\n        if (admins[_owner].addr != _owner) {\r\n            admins[_owner].addr = _owner;\r\n            admins[_owner].index = adminsAddr.push(_owner) - 1;\r\n        }\r\n\r\n        admins[_owner].contratcs.push(contracts[_address].addr);\r\n        admins[_owner].numContratcs++;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/tokens/ERC223/ERC223_receiving_contract.sol\r\n\r\n/**\r\n* @title Contract that will work with ERC223 tokens.\r\n*/\r\n\r\ncontract ERC223ReceivingContract {\r\n    /**\r\n     * @dev Standard ERC223 function that will handle incoming token transfers.\r\n     *\r\n     * @param _from  Token sender address.\r\n     * @param _value Amount of tokens.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function tokenFallback(address _from, uint _value, bytes _data);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/tokens/ERC223/ERC223.sol\r\n\r\n/**\r\n * @title Reference implementation of the ERC223 standard token.\r\n */\r\ncontract ERC223 is StandardToken {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        bytes memory empty;\r\n        return transfer(_to, _value, empty);\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    * @param _data Optional metadata.\r\n    */\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\r\n        super.transfer(_to, _value);\r\n\r\n        if (isContract(_to)) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n            Transfer(msg.sender, _to, _value, _data);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        bytes memory empty;\r\n        return transferFrom(_from, _to, _value, empty);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint the amount of tokens to be transferred\r\n     * @param _data Optional metadata.\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value, bytes _data) public returns (bool) {\r\n        super.transferFrom(_from, _to, _value);\r\n\r\n        if (isContract(_to)) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(_from, _value, _data);\r\n        }\r\n\r\n        Transfer(_from, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool) {\r\n        uint length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length>0);\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/tokens/ERC223MintableToken.sol\r\n\r\ncontract ERC223MintableToken is MintableToken, ERC223 {\r\n\r\n    string public name = \"\";\r\n    string public symbol = \"\";\r\n    uint public decimals = 18;\r\n\r\n    function ERC223MintableToken(string _name, string _symbol, uint8 _decimals, address _owner) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        owner = _owner;\r\n    }\r\n}\r\n\r\n// File: contracts/factories/BaseFactory.sol\r\n\r\ncontract BaseFactory {\r\n\r\n    address public mainFabricAddress;\r\n    string public title;\r\n\r\n    struct Parameter {\r\n        string title;\r\n        string paramType;\r\n    }\r\n\r\n    /**\r\n     * @dev params list\r\n     */\r\n    Parameter[] public params;\r\n\r\n    /**\r\n     * @dev Count of parameters in factory\r\n     */\r\n    function numParameters() public view returns (uint256)\r\n    {\r\n        return params.length;\r\n    }\r\n\r\n    function getParam(uint _i) public view returns (\r\n        string title,\r\n        string paramType\r\n    ) {\r\n        return (\r\n        params[_i].title,\r\n        params[_i].paramType\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/factories/ERC223MintableTokenFactory.sol\r\n\r\ncontract ERC223MintableTokenFactory is BaseFactory {\r\n\r\n    function ERC223MintableTokenFactory(address _mainFactory) public {\r\n        require(_mainFactory != 0x0);\r\n        mainFabricAddress = _mainFactory;\r\n\r\n        title = \"ERC223MintableToken\";\r\n\r\n        params.push(Parameter({\r\n            title: \"Token name\",\r\n            paramType: \"string\"\r\n            }));\r\n\r\n        params.push(Parameter({\r\n            title: \"Token symbol\",\r\n            paramType: \"string\"\r\n            }));\r\n\r\n        params.push(Parameter({\r\n            title: \"Decimals\",\r\n            paramType: \"string\"\r\n            }));\r\n\r\n        params.push(Parameter({\r\n            title: \"Token owner\",\r\n            paramType: \"string\"\r\n            }));\r\n    }\r\n\r\n    function create(string _name, string _symbol, uint8 _decimals, address _owner) public returns (ERC223MintableToken) {\r\n        ERC223MintableToken newContract = new ERC223MintableToken(_name, _symbol, _decimals, _owner);\r\n\r\n        MainFabric fabric = MainFabric(mainFabricAddress);\r\n        fabric.addContract(address(newContract), msg.sender, title);\r\n\r\n        return newContract;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"title\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"getParam\",\"outputs\":[{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"paramType\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"params\",\"outputs\":[{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"paramType\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainFabricAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numParameters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mainFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"ERC223MintableTokenFactory","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000066e85ea83610bccde18058de7e6d1853c6ee63a2","Library":"","SwarmSource":"bzzr://0c719d9f56bb5ff8835be7af68f25886048000bd36106f464863e6fabcd0e21e"}]}