{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract ERC721 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract zombieMain is  ERC721,Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  struct Zombie {\r\n    bytes32 dna;\r\n    uint8 star;\r\n    uint16 roletype;\r\n    bool isFreeZombie;\r\n  }\r\n\r\n  Zombie[] public zombies;\r\n  \r\n  address public ZombiewCreator;\r\n\r\n  mapping (uint => address) public zombieToOwner;\r\n  mapping (address => uint) ownerZombieCount;\r\n  mapping (uint => address) zombieApprovals;\r\n\r\n  event Transfer(address _from, address _to,uint _tokenId);\r\n  event Approval(address _from, address _to,uint _tokenId);\r\n  event Take(address _to, address _from,uint _tokenId);\r\n  event Create(uint _tokenId, bytes32 dna,uint8 star, uint16 roletype);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance) {\r\n    return ownerZombieCount[_owner];\r\n  }\r\n\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner) {\r\n    return zombieToOwner[_tokenId];\r\n  }\r\n\r\n  function checkAllOwner(uint256[] _tokenId, address owner) public view returns (bool) {\r\n    for(uint i=0;i<_tokenId.length;i++){\r\n        if(owner != zombieToOwner[_tokenId[i]]){\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  function seeZombieDna(uint256 _tokenId) public view returns (bytes32 dna) {\r\n    return zombies[_tokenId].dna;\r\n  }\r\n\r\n  function seeZombieStar(uint256 _tokenId) public view returns (uint8 star) {\r\n    return zombies[_tokenId].star;\r\n  }\r\n  \r\n  function seeZombieRole(uint256 _tokenId) public view returns (uint16 roletype) {\r\n    return zombies[_tokenId].roletype;\r\n  }\r\n\r\n  function getZombiesByOwner(address _owner) external view returns(uint[]) {\r\n    uint[] memory result = new uint[](ownerZombieCount[_owner]);\r\n    uint counter = 0;\r\n    for (uint i = 0; i < zombies.length; i++) {\r\n      if (zombieToOwner[i] == _owner) {\r\n        result[counter] = i;\r\n        counter++;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _tokenId) public {\r\n    require(zombieToOwner[_tokenId] == msg.sender);\r\n    require(!zombies[_tokenId].isFreeZombie);\r\n    \r\n    ownerZombieCount[_to] = ownerZombieCount[_to].add(1);\r\n    ownerZombieCount[msg.sender] =  ownerZombieCount[msg.sender].sub(1);\r\n    zombieToOwner[_tokenId] = _to;\r\n    \r\n    Transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    require(zombieToOwner[_tokenId] == msg.sender);\r\n    require(!zombies[_tokenId].isFreeZombie);\r\n    \r\n    zombieApprovals[_tokenId] = _to;\r\n    \r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    require(zombieApprovals[_tokenId] == msg.sender);\r\n    require(!zombies[_tokenId].isFreeZombie);\r\n    \r\n    address owner = ownerOf(_tokenId);\r\n\r\n    ownerZombieCount[msg.sender] = ownerZombieCount[msg.sender].add(1);\r\n    ownerZombieCount[owner] = ownerZombieCount[owner].sub(1);\r\n    zombieToOwner[_tokenId] = msg.sender;\r\n    \r\n    Take(msg.sender, owner, _tokenId);\r\n  }\r\n  \r\n  function createZombie(uint8 star,bytes32 dna,uint16 roletype,bool isFreeZombie,address player) public {\r\n      require(msg.sender == ZombiewCreator); // only creator can call\r\n \r\n      uint id = zombies.push(Zombie(dna, star, roletype, isFreeZombie)) - 1;\r\n      zombieToOwner[id] = player;\r\n      ownerZombieCount[player]++;\r\n      \r\n      Create(id, dna, star, roletype);\r\n  }\r\n  \r\n  function changeZombieCreator(address _zombiewCreator) public onlyOwner{\r\n    ZombiewCreator = _zombiewCreator;\r\n  }\r\n\r\n  function getZombiesFullInfoByOwner(address _owner) external view returns(uint[] id,bytes32[] dna, uint8[] star,uint16[] roletype,bool[] isFreeZombie) {\r\n   uint[]  memory idb = new uint[](ownerZombieCount[_owner]);\r\n   bytes32[]  memory dnab = new bytes32[](ownerZombieCount[_owner]);\r\n   uint8[]  memory starb = new uint8[](ownerZombieCount[_owner]);\r\n   uint16[]  memory roletypeb = new uint16[](ownerZombieCount[_owner]);\r\n   bool[]  memory isFreeZombieb = new bool[](ownerZombieCount[_owner]);\r\n   uint counter = 0;\r\n   for (uint i = 0; i < zombies.length; i++) {\r\n     if (zombieToOwner[i] == _owner) {\r\n       idb[counter] = i;\r\n       dnab[counter] = zombies[i].dna;\r\n       starb[counter] = zombies[i].star;\r\n       roletypeb[counter] = zombies[i].roletype;\r\n       isFreeZombieb[counter] = zombies[i].isFreeZombie;\r\n       counter++;\r\n     }\r\n   }\r\n   return (idb,dnab,starb,roletypeb,isFreeZombieb);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_zombiewCreator\",\"type\":\"address\"}],\"name\":\"changeZombieCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ZombiewCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"zombies\",\"outputs\":[{\"name\":\"dna\",\"type\":\"bytes32\"},{\"name\":\"star\",\"type\":\"uint8\"},{\"name\":\"roletype\",\"type\":\"uint16\"},{\"name\":\"isFreeZombie\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getZombiesByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"zombieToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"star\",\"type\":\"uint8\"},{\"name\":\"dna\",\"type\":\"bytes32\"},{\"name\":\"roletype\",\"type\":\"uint16\"},{\"name\":\"isFreeZombie\",\"type\":\"bool\"},{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"createZombie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"seeZombieStar\",\"outputs\":[{\"name\":\"star\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getZombiesFullInfoByOwner\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256[]\"},{\"name\":\"dna\",\"type\":\"bytes32[]\"},{\"name\":\"star\",\"type\":\"uint8[]\"},{\"name\":\"roletype\",\"type\":\"uint16[]\"},{\"name\":\"isFreeZombie\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"seeZombieDna\",\"outputs\":[{\"name\":\"dna\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"checkAllOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"seeZombieRole\",\"outputs\":[{\"name\":\"roletype\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Take\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dna\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"star\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"roletype\",\"type\":\"uint16\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"zombieMain","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1aebb1c83f5c0b47a6a7a72e92919ef592531ead0b757e24f91c03c417689553"}]}