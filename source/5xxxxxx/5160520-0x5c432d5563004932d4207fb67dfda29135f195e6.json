{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\ncontract FootieToken {\r\n\r\n\t/*** EVENTS ***/\r\n\r\n\t/// @dev The Birth event is fired whenever a new team comes into existence.\r\n\tevent Birth(uint256 teamId, string name, address owner);\r\n\r\n\t/// @dev Transfer event as defined in current draft of ERC721. \r\n\t///  ownership is assigned, including births.\r\n\tevent Transfer(address from, address to, uint256 teamId);\r\n\r\n\t/// @dev The TeamSold event is fired, as you might expect, whenever a team is sold.\r\n\tevent TeamSold(uint256 index, uint256 oldPrice, uint256 newPrice, address prevOwner, address newOwne, string name);\r\n\r\n\r\n\t/*** CONSTANTS ***/\r\n\r\n\t/// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n\tstring public constant NAME = \"CryptoFootie\"; // solhint-disable-line\r\n\tstring public constant SYMBOL = \"FootieToken\"; // solhint-disable-line\r\n\r\n\tuint256 private startingPrice = 0.002 ether;\r\n\tuint256 private constant TEAM_CREATION_LIMIT = 1000;\r\n\tuint256 private princeIncreasePercentage = 24;\r\n\r\n\r\n\t/*** STORAGE ***/\r\n\r\n\t/// @dev A mapping from team IDs to the address that owns them. All teams have\r\n\t///  some valid owner address.\r\n\tmapping (uint256 => address) private teamIndexToOwner;\r\n\r\n\t// @dev A mapping from the owner address to count of teams that address owns.\r\n\t//  Used internally inside balanceOf() to resolve ownership count.\r\n\tmapping (address => uint256) private ownershipTeamCount;\r\n\r\n\t/// @dev A mapping from teamIDs to an address that has been approved to call\r\n\t///  transferFrom(). Each tram can only have one approved address for transfer\r\n\t///  at any time. A zero value means no approval is outstanding.\r\n\tmapping (uint256 => address) private teamIndexToApproved;\r\n\r\n\t// @dev A mapping from teamIDs to the price of the token.\r\n\tmapping (uint256 => uint256) private teamIndexToPrice;\r\n\r\n\t// @dev A mapping from teamIDs to the price of the token.\r\n\tmapping (uint256 => uint256) private teamIndexToGoals;\r\n\r\n\t// The address of the account that can execute actions within each roles.\r\n\taddress public creatorAddress;\r\n\r\n\t// Keeps track of how many teams have been created\r\n\tuint256 public teamsCreatedCount;\r\n\r\n\r\n\t/*** DATATYPES ***/\r\n\tstruct Team {\r\n\t\tstring name;\r\n\t}\r\n\tTeam[] private teams;\r\n\r\n\r\n\t/*** ACCESS MODIFIERS ***/\r\n\t/// @dev Access modifier for Creator-only functionality\r\n\tmodifier onlyCreator() {\r\n\t\trequire(msg.sender == creatorAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\t/*** CONSTRUCTOR ***/\r\n\tfunction FootieToken() public {\r\n\t\tcreatorAddress = msg.sender;\r\n\t}\r\n\r\n\tfunction _createTeam(string _name, uint256 _price) public onlyCreator {\r\n\t\trequire(teamsCreatedCount < TEAM_CREATION_LIMIT);\r\n\t\t// set initial price\r\n\t\tif (_price <= 0) {\r\n\t\t\t_price = startingPrice;\r\n\t\t}\r\n\r\n\t\t// increase the number of teams created so far\r\n\t\tteamsCreatedCount++;\r\n\r\n\t\tTeam memory _team = Team({\r\n\t\t\tname: _name\r\n\t\t});\r\n\t\tuint256 newteamId = teams.push(_team) - 1;\r\n\r\n\t\t// It's probably never going to happen, 4 billion tokens are A LOT, but\r\n\t\t// let's just be 100% sure we never let this happen.\r\n\t\trequire(newteamId == uint256(uint32(newteamId)));\r\n\r\n\t\t// send event to DAPP or anyone interested\r\n\t\tBirth(newteamId, _name, creatorAddress);\r\n\r\n\t\tteamIndexToPrice[newteamId] = _price;\r\n\r\n\t\t// This will assign ownership, and also emit the Transfer event as\r\n\t\t// per ERC721 draft\r\n\t\t_transfer(creatorAddress, creatorAddress, newteamId);\r\n\t}\r\n\r\n\t/// @notice Returns all the relevant information about a specific team.\r\n\t/// @param _index The index (teamId) of the team of interest.\r\n\tfunction getTeam(uint256 _index) public view returns (string teamName, uint256 sellingPrice, address owner, uint256 goals) {\r\n\t\tTeam storage team = teams[_index];\r\n\t\tteamName = team.name;\r\n\t\tsellingPrice = teamIndexToPrice[_index];\r\n\t\towner = teamIndexToOwner[_index];\r\n\t\tgoals = teamIndexToGoals[_index];\r\n\t}\r\n\t\r\n\t/// For querying balance of a particular account\r\n\t/// @param _owner The address for balance query\r\n\t/// @dev Required for ERC-721 compliance.\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn ownershipTeamCount[_owner];\r\n\t}\r\n\r\n\t/// For querying owner of token\r\n\t/// @param _index The teamID for owner inquiry\r\n\t/// @dev Required for ERC-721 compliance.\r\n\tfunction ownerOf(uint256 _index) public view returns (address owner) {\r\n\t\towner = teamIndexToOwner[_index];\r\n\t\trequire(owner != address(0));\r\n\t}\r\n\r\n\t// Allows someone to send ether and buy a team\r\n\tfunction buyTeam(uint256 _index) public payable {\r\n\t\taddress oldOwner = teamIndexToOwner[_index];\r\n\t\taddress newOwner = msg.sender;\r\n\r\n\t\tuint256 sellingPrice = teamIndexToPrice[_index];\r\n\r\n\t\t// Making sure token owner is not sending to self\r\n\t\trequire(oldOwner != newOwner);\r\n\r\n\t\t// Safety check to prevent against an unexpected 0x0 default.\r\n\t\trequire(_addressNotNull(newOwner));\r\n\r\n\t\t// Making sure sent amount is greater than or equal to the sellingPrice\r\n\t\trequire(msg.value >= sellingPrice);\r\n\r\n\r\n\t\t// 96% goes to old owner\r\n\t\tuint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 96), 100));\r\n\r\n\t\t// 4% goes to the contract creator address\r\n\t\tuint256 fee = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 4), 100));\r\n\t\t\r\n\t\t// any excess (the new owner payed more than needed) will be refunded to the new owner\r\n\t\tuint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n\r\n\t\t// Update price\r\n\t\tteamIndexToPrice[_index] = sellingPrice + SafeMath.div(SafeMath.mul(sellingPrice, princeIncreasePercentage), 100);\r\n\r\n\t\t//Update transaction count\r\n\t\tteamIndexToGoals[_index] = teamIndexToGoals[_index] + 1;\r\n\r\n\t\t// send the money to the previous owner\r\n\t\toldOwner.transfer(payment);\r\n\t\t// pay fee\r\n\t\tcreatorAddress.transfer(fee);\r\n\r\n\t\t// store the transfer\r\n\t\t_transfer(oldOwner, newOwner, _index);\r\n\r\n\t\tTeamSold(_index, sellingPrice, teamIndexToPrice[_index], oldOwner, newOwner, teams[_index].name);\r\n\r\n\t\tmsg.sender.transfer(purchaseExcess);\r\n\t}\r\n\r\n\r\n\r\n\t/*** PRIVATE FUNCTIONS ***/\r\n\r\n\t/// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n\tfunction _addressNotNull(address _to) private pure returns (bool) {\r\n\t\treturn _to != address(0);\r\n\t}\r\n\r\n\t/// @dev Assigns ownership of a specific Person to an address.\r\n\tfunction _transfer(address _from, address _to, uint256 _index) private {\r\n\t\t// Since the number of persons is capped to 2^32 we can't overflow this\r\n\t\townershipTeamCount[_to]++;\r\n\t\t//transfer ownership\r\n\t\tteamIndexToOwner[_index] = _to;\r\n\r\n\t\t// Emit the transfer event.\r\n\t\tTransfer(_from, _to, _index);\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t* @dev Multiplies two numbers, throws on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers, truncating the quotient.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, throws on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\treturn c;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTeam\",\"outputs\":[{\"name\":\"teamName\",\"type\":\"string\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"goals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamsCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"buyTeam\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"_createTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"teamId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwne\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TeamSold\",\"type\":\"event\"}]","ContractName":"FootieToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f82ccb8341e27cfbaa4e4713a13ad22f3fd5c8cd8b74bf3035ba264a4a1df3de"}]}