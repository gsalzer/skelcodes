{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract Universe{\r\n    // Universe contract\r\n    // It is possible to buy planets or other universe-objects from other accounts.\r\n    // If an object has an owner, fees will be paid to that owner until no owner has been found.\r\n    \r\n    struct Item{\r\n        uint256 id;\r\n        string name;\r\n        uint256 price;\r\n        uint256 id_owner;\r\n        address owner;\r\n    }\r\n    \r\n   // bool TESTMODE = true;\r\n    \r\n  //  event pushuint(uint256 push);\r\n //   event pushstr(string str);\r\n  //  event pusha(address addr);\r\n    \r\n    uint256[4] LevelLimits = [0.05 ether, 0.5 ether, 2 ether, 5 ether];\r\n    uint256[5] devFee = [5,4,3,2,2];\r\n    uint256[5] shareFee = [12,6,4,3,2];\r\n    uint256[5] raisePrice = [100, 35, 25, 17, 15];\r\n    \r\n    \r\n    mapping (uint256 => Item) public ItemList;\r\n    uint256 public current_item_index=1;\r\n    \r\n    address owner;\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function Universe() public{\r\n        owner=msg.sender;\r\n        AddItem(\"Sun\", 1 finney, 0);\r\n        AddItem(\"Mercury\", 1 finney, 1);\r\n        AddItem(\"Venus\", 1 finney, 1);\r\n        AddItem(\"Earth\", 1 finney, 1);\r\n        AddItem(\"Mars\", 1 finney, 1);\r\n        AddItem(\"Jupiter\", 1 finney, 1);\r\n        AddItem(\"Saturn\", 1 finney, 1);\r\n        AddItem(\"Uranus\", 1 finney, 1);\r\n        AddItem(\"Neptune\", 1  finney, 1);\r\n        AddItem(\"Pluto\", 1 finney, 1);\r\n        AddItem(\"Moon\", 1 finney, 4);\r\n    }\r\n    \r\n    function CheckItemExists(uint256 _id) internal returns (bool boolean){\r\n        if (ItemList[_id].price == 0){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    \r\n //   function AddItem(string _name, uint256 _price, uint256 _id_owner) public {\r\n    function AddItem(string _name, uint256 _price, uint256 _id_owner) public onlyOwner {\r\n//if (TESTMODE){\r\n//if (_price < (1 finney)){\r\n  //              _price = (1 finney);\r\n    //        }\r\n//}\r\n        //require(_id != 0);\r\n        //require(_id == current_item_index);\r\n        uint256 _id = current_item_index;\r\n\r\n        require(_id_owner != _id);\r\n        require(_id_owner < _id);\r\n\r\n        require(_price >= (1 finney));\r\n        require(_id_owner == 0 || CheckItemExists(_id_owner));\r\n        require(CheckItemExists(_id) != true);\r\n        \r\n     //   uint256 current_id_owner = _id_owner;\r\n        \r\n     //   uint256[] mem_owner;\r\n        \r\n        //pushuint(mem_owner.length);\r\n        \r\n        /*while (current_id_owner != 0){\r\n           \r\n            mem_owner[mem_owner.length-1] = current_id_owner;\r\n            current_id_owner = ItemList[current_id_owner].id_owner;\r\n            \r\n          \r\n            for(uint256 c=0; c<mem_owner.length; c++){\r\n               if(c != (mem_owner.length-1)){\r\n                   if(mem_owner[c] == current_id_owner){\r\n                        pushstr(\"false\");\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            mem_owner.length += 1;\r\n        }*/\r\n        \r\n        var NewItem = Item(_id, _name, _price, _id_owner, owner);\r\n        ItemList[current_item_index] = NewItem;\r\n        current_item_index++;\r\n        \r\n    }\r\n    \r\n    function ChangeItemOwnerID(uint256 _id, uint256 _new_owner) public onlyOwner {\r\n        require(_new_owner != _id);\r\n        require(_id <= (current_item_index-1));\r\n        require(_id != 0);\r\n        require(_new_owner != 0);\r\n        require(_new_owner <= (current_item_index-1));\r\n        require(ItemList[_id].id_owner == 0);\r\n       \r\n        uint256 current_id_owner = _new_owner;\r\n        uint256[] mem_owner;   \r\n        \r\n         while (current_id_owner != 0){\r\n           \r\n            mem_owner[mem_owner.length-1] = current_id_owner;\r\n            current_id_owner = ItemList[current_id_owner].id_owner;\r\n            \r\n          \r\n            for(uint256 c=0; c<mem_owner.length; c++){\r\n               if(c != (mem_owner.length-1)){\r\n                   if(mem_owner[c] == current_id_owner || mem_owner[c] == _new_owner || mem_owner[c] == _id){\r\n//pushstr(\"false\");\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            mem_owner.length += 1;\r\n        }  \r\n        \r\n        ItemList[_id].id_owner = _new_owner;\r\n        \r\n    }\r\n\r\n    function DoDividend(uint256 _current_index, uint256 valueShareFee, uint256 id_owner) internal returns (uint256){\r\n            uint256 pow = 0;\r\n            uint256 totalShareFee = 0;\r\n            uint256 current_index = _current_index;\r\n            while (current_index != 0){\r\n                pow = pow + 1;\r\n                current_index = ItemList[current_index].id_owner;\r\n            }\r\n        \r\n            uint256 total_sum = 0;\r\n        \r\n            for (uint256 c2=0; c2<pow; c2++){\r\n                total_sum = total_sum + 2**c2;\r\n            }\r\n        \r\n            if (total_sum != 0){\r\n               // uint256 tot_value = 2**(pow-1);\r\n        \r\n                current_index = id_owner;\r\n        \r\n                while (current_index != 0){\r\n                    uint256 amount = div(mul(valueShareFee, 2**(pow-1)), total_sum);\r\n                    totalShareFee = add(amount, totalShareFee);\r\n                    ItemList[current_index].owner.transfer(amount);\r\n                //    pusha(ItemList[current_index].owner);\r\n                 //   pushuint(amount);\r\n                    \r\n                    pow = sub(pow, 1);\r\n                    current_index = ItemList[current_index].id_owner;\r\n                }\r\n            }\r\n            else{\r\n                ItemList[current_index].owner.transfer(valueShareFee);\r\n            //    pusha(ItemList[current_index].owner);\r\n             //   pushuint(valueShareFee);\r\n                totalShareFee = valueShareFee;\r\n            }\r\n            return totalShareFee;\r\n    }    \r\n    \r\n    function BuyItem(uint256 _id) public payable{\r\n        require(_id > 0 && _id < current_item_index);\r\n        var TheItem = ItemList[_id];\r\n        require(TheItem.owner != msg.sender);\r\n        require(msg.value >= TheItem.price);\r\n    \r\n        uint256 index=0;\r\n        \r\n        for (uint256 c=0; c<LevelLimits.length; c++){\r\n            uint256 value = LevelLimits[c];\r\n            if (TheItem.price < value){\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n        \r\n        uint256 valueShareFee = div(mul(TheItem.price, shareFee[index]), 100);\r\n        uint256 totalShareFee = 0;\r\n        uint256 valueDevFee = div(mul(TheItem.price, devFee[index]), 100);\r\n        uint256 valueRaisePrice = div(mul(TheItem.price, 100 + raisePrice[index]), 100);\r\n        \r\n        uint256 current_index = TheItem.id_owner;\r\n        \r\n        if (current_index != 0){\r\n            totalShareFee = DoDividend(current_index, valueShareFee, current_index);\r\n        }\r\n        \r\n        owner.transfer(valueDevFee);\r\n        \r\n      //  pushstr(\"dev\");\r\n      //  pushuint(valueDevFee);\r\n        \r\n        \r\n        uint256 totalToOwner = sub(sub(TheItem.price, valueDevFee), totalShareFee);\r\n        \r\n        uint256 totalBack = sub(sub(sub(msg.value, totalToOwner), valueDevFee), totalShareFee);\r\n        \r\n        if (totalBack > 0){\r\n            msg.sender.transfer(totalBack);\r\n        }\r\n        \r\n       // pushstr(\"owner transfer\");\r\n       // pushuint(totalToOwner);\r\n        TheItem.owner.transfer(totalToOwner);\r\n        \r\n        TheItem.owner = msg.sender;\r\n        TheItem.price = valueRaisePrice;\r\n    }\r\n    \r\n   function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      if (a == 0) {\r\n         return 0;\r\n      }\r\n      uint256 c = a * b;\r\n      assert(c / a == b);\r\n      return c;\r\n   }\r\n\r\n   function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n      uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n      return c;\r\n   }\r\n\r\n   function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n   }\r\n\r\n   function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n   }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_id_owner\",\"type\":\"uint256\"}],\"name\":\"AddItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"BuyItem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_new_owner\",\"type\":\"uint256\"}],\"name\":\"ChangeItemOwnerID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_item_index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ItemList\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"id_owner\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Universe","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5c93fbcc00bea8757354811b110e5301dc8855b67d31bc17773555750a652980"}]}