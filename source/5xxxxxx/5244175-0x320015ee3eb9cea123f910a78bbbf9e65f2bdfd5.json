{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\n\r\n/**\r\n * @title Moderated\r\n * @dev restricts execution of 'onlyModerator' modified functions to the contract moderator\r\n * @dev restricts execution of 'ifUnrestricted' modified functions to when unrestricted \r\n *      boolean state is true\r\n * @dev allows for the extraction of ether or other ERC20 tokens mistakenly sent to this address\r\n */\r\ncontract Moderated {\r\n    \r\n    address public moderator;\r\n    \r\n    bool public unrestricted;\r\n    \r\n    modifier onlyModerator {\r\n        require(msg.sender == moderator);\r\n        _;\r\n    }\r\n    \r\n    modifier ifUnrestricted {\r\n        require(unrestricted);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyPayloadSize(uint256 numWords) {\r\n        assert(msg.data.length >= numWords * 32 + 4);\r\n        _;\r\n    }    \r\n    \r\n    function Moderated() public {\r\n        moderator = msg.sender;\r\n        unrestricted = true;\r\n    }\r\n    \r\n    function reassignModerator(address newModerator) public onlyModerator {\r\n        moderator = newModerator;\r\n    }\r\n    \r\n    function restrict() public onlyModerator {\r\n        unrestricted = false;\r\n    }\r\n    \r\n    function unrestrict() public onlyModerator {\r\n        unrestricted = true;\r\n    }  \r\n    \r\n    /// This method can be used to extract tokens mistakenly sent to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    function extract(address _token) public returns (bool) {\r\n        require(_token != address(0x0));\r\n        Token token = Token(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        return token.transfer(moderator, balance);\r\n    }\r\n    \r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(_addr) }\r\n        return (size > 0);\r\n    }  \r\n    \r\n    function getModerator() public view returns (address) {\r\n        return moderator;\r\n    }\r\n} \r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract Token { \r\n\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);    \r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);    \r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations that are safe for uint256 against overflow and negative values\r\n * @dev https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n */\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// @dev Assign moderation of contract to CrowdSale\r\n\r\ncontract LEON is Moderated {\t\r\n\tusing SafeMath for uint256;\r\n\r\n\t\tstring public name = \"LEONS Coin\";\t\r\n\t\tstring public symbol = \"LEONS\";\t\t\t\r\n\t\tuint8 public decimals = 18;\r\n\t\t\r\n\t\tmapping(address => uint256) internal balances;\r\n\t\tmapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\t\tuint256 internal totalSupply_;\r\n\r\n\t\t// the maximum number of LEONS there may exist is capped at 200 million tokens\r\n\t\tuint256 public constant maximumTokenIssue = 200000000 * 10**18;\r\n\t\t\r\n\t\tevent Approval(address indexed owner, address indexed spender, uint256 value); \r\n\t\tevent Transfer(address indexed from, address indexed to, uint256 value);\t\t\r\n\r\n\t\t/**\r\n\t\t* @dev total number of tokens in existence\r\n\t\t*/\r\n\t\tfunction totalSupply() public view returns (uint256) {\r\n\t\t\treturn totalSupply_;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev transfer token for a specified address\r\n\t\t* @param _to The address to transfer to.\r\n\t\t* @param _value The amount to be transferred.\r\n\t\t*/\r\n\t\tfunction transfer(address _to, uint256 _value) public ifUnrestricted onlyPayloadSize(2) returns (bool) {\r\n\t\t    return _transfer(msg.sender, _to, _value);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev Transfer tokens from one address to another\r\n\t\t* @param _from address The address which you want to send tokens from\r\n\t\t* @param _to address The address which you want to transfer to\r\n\t\t* @param _value uint256 the amount of tokens to be transferred\r\n\t\t*/\r\n\t\tfunction transferFrom(address _from, address _to, uint256 _value) public ifUnrestricted onlyPayloadSize(3) returns (bool) {\r\n\t\t    require(_value <= allowed[_from][msg.sender]);\r\n\t\t    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\t    return _transfer(_from, _to, _value);\r\n\t\t}\t\t\r\n\r\n\t\tfunction _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\r\n\t\t\t// Do not allow transfers to 0x0 or to this contract\r\n\t\t\trequire(_to != address(0x0) && _to != address(this));\r\n\t\t\t// Do not allow transfer of value greater than sender's current balance\r\n\t\t\trequire(_value <= balances[_from]);\r\n\t\t\t// Update balance of sending address\r\n\t\t\tbalances[_from] = balances[_from].sub(_value);\t\r\n\t\t\t// Update balance of receiving address\r\n\t\t\tbalances[_to] = balances[_to].add(_value);\t\t\r\n\t\t\t// An event to make the transfer easy to find on the blockchain\r\n\t\t\tTransfer(_from, _to, _value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev Gets the balance of the specified address.\r\n\t\t* @param _owner The address to query the the balance of.\r\n\t\t* @return An uint256 representing the amount owned by the passed address.\r\n\t\t*/\r\n\t\tfunction balanceOf(address _owner) public view returns (uint256) {\r\n\t\t\treturn balances[_owner];\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t\t*\r\n\t\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\t\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\t\t* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n\t\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t\t* @param _spender The address which will spend the funds.\r\n\t\t* @param _value The amount of tokens to be spent.\r\n\t\t*/\r\n\t\tfunction approve(address _spender, uint256 _value) public ifUnrestricted onlyPayloadSize(2) returns (bool sucess) {\r\n\t\t\t// Can only approve when value has not already been set or is zero\r\n\t\t\trequire(allowed[msg.sender][_spender] == 0 || _value == 0);\r\n\t\t\tallowed[msg.sender][_spender] = _value;\r\n\t\t\tApproval(msg.sender, _spender, _value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\t\t* @param _owner address The address which owns the funds.\r\n\t\t* @param _spender address The address which will spend the funds.\r\n\t\t* @return A uint256 specifying the amount of tokens still available for the spender.\r\n\t\t*/\r\n\t\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\r\n\t\t\treturn allowed[_owner][_spender];\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev Increase the amount of tokens that an owner allowed to a spender.\r\n\t\t*\r\n\t\t* approve should be called when allowed[_spender] == 0. To increment\r\n\t\t* allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t\t* the first transaction is mined)\r\n\t\t* From MonolithDAO Token.sol\r\n\t\t* @param _spender The address which will spend the funds.\r\n\t\t* @param _addedValue The amount of tokens to increase the allowance by.\r\n\t\t*/\r\n\t\tfunction increaseApproval(address _spender, uint256 _addedValue) public ifUnrestricted onlyPayloadSize(2) returns (bool) {\r\n\t\t\trequire(_addedValue > 0);\r\n\t\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n\t\t*\r\n\t\t* approve should be called when allowed[_spender] == 0. To decrement\r\n\t\t* allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t\t* the first transaction is mined)\r\n\t\t* From MonolithDAO Token.sol\r\n\t\t* @param _spender The address which will spend the funds.\r\n\t\t* @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n\t\t*/\r\n\t\tfunction decreaseApproval(address _spender, uint256 _subtractedValue) public ifUnrestricted onlyPayloadSize(2) returns (bool) {\r\n\t\t\tuint256 oldValue = allowed[msg.sender][_spender];\r\n\t\t\trequire(_subtractedValue > 0);\r\n\t\t\tif (_subtractedValue > oldValue) {\r\n\t\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t\t} else {\r\n\t\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t\t}\r\n\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev Function to mint tokens\r\n\t\t* @param _to The address that will receive the minted tokens.\r\n\t\t* @param _amount The amount of tokens to mint.\r\n\t\t* @return A boolean that indicates if the operation was successful.\r\n\t\t*/\r\n\t\tfunction generateTokens(address _to, uint _amount) public onlyModerator returns (bool) {\r\n\t\t    require(isContract(moderator));\r\n\t\t\trequire(totalSupply_.add(_amount) <= maximumTokenIssue);\r\n\t\t\ttotalSupply_ = totalSupply_.add(_amount);\r\n\t\t\tbalances[_to] = balances[_to].add(_amount);\r\n\t\t\tTransfer(address(0x0), _to, _amount);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t/**\r\n\t\t* @dev fallback function - reverts transaction\r\n\t\t*/\t\t\r\n    \tfunction () external payable {\r\n    \t    revert();\r\n    \t}\t\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"sucess\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unrestricted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moderator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newModerator\",\"type\":\"address\"}],\"name\":\"reassignModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getModerator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumTokenIssue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restrict\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unrestrict\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"extract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"LEON","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cb3d48610075037d7991efacc4d9d59087fe38f32ffbb3047e1278bd5ef43784"}]}