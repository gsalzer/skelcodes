{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: @0xcert/ethereum-erc20/contracts/tokens/ERC20.sol\r\n\r\n/**\r\n * @title A standard interface for tokens.\r\n */\r\ninterface ERC20 {\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name()\r\n    external\r\n    view\r\n    returns (string _name);\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token.\r\n   */\r\n  function symbol()\r\n    external\r\n    view\r\n    returns (string _symbol);\r\n\r\n  /**\r\n   * @dev Returns the number of decimals the token uses.\r\n   */\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (uint8 _decimals);\r\n\r\n  /**\r\n   * @dev Returns the total token supply.\r\n   */\r\n  function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256 _totalSupply);\r\n\r\n  /**\r\n   * @dev Returns the account balance of another account with address _owner.\r\n   * @param _owner The address from which the balance will be retrieved.\r\n   */\r\n  function balanceOf(\r\n    address _owner\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 _balance);\r\n\r\n  /**\r\n   * @dev Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. The\r\n   * function SHOULD throw if the _from account balance does not have enough tokens to spend.\r\n   * @param _to The address of the recipient.\r\n   * @param _value The amount of token to be transferred.\r\n   */\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool _success);\r\n\r\n  /**\r\n   * @dev Transfers _value amount of tokens from address _from to address _to, and MUST fire the\r\n   * Transfer event.\r\n   * @param _from The address of the sender.\r\n   * @param _to The address of the recipient.\r\n   * @param _value The amount of token to be transferred.\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool _success);\r\n\r\n  /**\r\n   * @dev Allows _spender to withdraw from your account multiple times, up to\r\n   * the _value amount. If this function is called again it overwrites the current\r\n   * allowance with _value.\r\n   * @param _spender The address of the account able to transfer the tokens.\r\n   * @param _value The amount of tokens to be approved for transfer.\r\n   */\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool _success);\r\n\r\n  /**\r\n   * @dev Returns the amount which _spender is still allowed to withdraw from _owner.\r\n   * @param _owner The address of the account owning tokens.\r\n   * @param _spender The address of the account able to transfer the tokens.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 _remaining);\r\n\r\n  /**\r\n   * @dev Triggers when tokens are transferred, including zero value transfers.\r\n   */\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 _value\r\n  );\r\n\r\n  /**\r\n   * @dev Triggers on any successful call to approve(address _spender, uint256 _value).\r\n   */\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _spender,\r\n    uint256 _value\r\n  );\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-utils/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Math operations with safety checks that throw on error. This contract is based\r\n * on the source code at https://goo.gl/iyQsmU.\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n   * @dev Multiplies two numbers, throws on overflow.\r\n   * @param _a Factor number.\r\n   * @param _b Factor number.\r\n   */\r\n  function mul(\r\n    uint256 _a,\r\n    uint256 _b\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two numbers, truncating the quotient.\r\n   * @param _a Dividend number.\r\n   * @param _b Divisor number.\r\n   */\r\n  function div(\r\n    uint256 _a,\r\n    uint256 _b\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    uint256 c = _a / _b;\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n   * @param _a Minuend number.\r\n   * @param _b Subtrahend number.\r\n   */\r\n  function sub(\r\n    uint256 _a,\r\n    uint256 _b\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two numbers, throws on overflow.\r\n   * @param _a Number.\r\n   * @param _b Number.\r\n   */\r\n  function add(\r\n    uint256 _a,\r\n    uint256 _b\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    uint256 c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-erc20/contracts/tokens/Token.sol\r\n\r\n/**\r\n * @title ERC20 standard token implementation.\r\n * @dev Standard ERC20 token. This contract follows the implementation at https://goo.gl/mLbAPJ.\r\n */\r\ncontract Token is\r\n  ERC20\r\n{\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n   * Token name.\r\n   */\r\n  string internal tokenName;\r\n\r\n  /**\r\n   * Token symbol.\r\n   */\r\n  string internal tokenSymbol;\r\n\r\n  /**\r\n   * Number of decimals.\r\n   */\r\n  uint8 internal tokenDecimals;\r\n\r\n  /**\r\n   * Total supply of tokens.\r\n   */\r\n  uint256 internal tokenTotalSupply;\r\n\r\n  /**\r\n   * Balance information map.\r\n   */\r\n  mapping (address => uint256) internal balances;\r\n\r\n  /**\r\n   * Token allowance mapping.\r\n   */\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Trigger when tokens are transferred, including zero value transfers.\r\n   */\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 _value\r\n  );\r\n\r\n  /**\r\n   * @dev Trigger on any successful call to approve(address _spender, uint256 _value).\r\n   */\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _spender,\r\n    uint256 _value\r\n  );\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name()\r\n    external\r\n    view\r\n    returns (string _name)\r\n  {\r\n    _name = tokenName;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token.\r\n   */\r\n  function symbol()\r\n    external\r\n    view\r\n    returns (string _symbol)\r\n  {\r\n    _symbol = tokenSymbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of decimals the token uses.\r\n   */\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (uint8 _decimals)\r\n  {\r\n    _decimals = tokenDecimals;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total token supply.\r\n   */\r\n  function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256 _totalSupply)\r\n  {\r\n    _totalSupply = tokenTotalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the account balance of another account with address _owner.\r\n   * @param _owner The address from which the balance will be retrieved.\r\n   */\r\n  function balanceOf(\r\n    address _owner\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 _balance)\r\n  {\r\n    _balance = balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. The\r\n   * function SHOULD throw if the _from account balance does not have enough tokens to spend.\r\n   * @param _to The address of the recipient.\r\n   * @param _value The amount of token to be transferred.\r\n   */\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool _success)\r\n  {\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    emit Transfer(msg.sender, _to, _value);\r\n    _success = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows _spender to withdraw from your account multiple times, up to the _value amount. If\r\n   * this function is called again it overwrites the current allowance with _value.\r\n   * @param _spender The address of the account able to transfer the tokens.\r\n   * @param _value The amount of tokens to be approved for transfer.\r\n   */\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool _success)\r\n  {\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n\r\n    emit Approval(msg.sender, _spender, _value);\r\n    _success = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the amount which _spender is still allowed to withdraw from _owner.\r\n   * @param _owner The address of the account owning tokens.\r\n   * @param _spender The address of the account able to transfer the tokens.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 _remaining)\r\n  {\r\n    _remaining = allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers _value amount of tokens from address _from to address _to, and MUST fire the\r\n   * Transfer event.\r\n   * @param _from The address of the sender.\r\n   * @param _to The address of the recipient.\r\n   * @param _value The amount of token to be transferred.\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool _success)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n    emit Transfer(_from, _to, _value);\r\n    _success = true;\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-utils/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @dev The contract has an owner address, and provides basic authorization control whitch\r\n * simplifies the implementation of user permissions. This contract is based on the source code\r\n * at https://goo.gl/n2ZGVt.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev An event which is triggered when the owner is changed.\r\n   * @param previousOwner The address of the previous owner.\r\n   * @param newOwner The address of the new owner.\r\n   */\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(\r\n    address _newOwner\r\n  )\r\n    onlyOwner\r\n    public\r\n  {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-utils/contracts/ownership/Claimable.sol\r\n\r\n/**\r\n * @dev The contract has an owner address, and provides basic authorization control whitch\r\n * simplifies the implementation of user permissions. This contract is based on the source code\r\n * at goo.gl/CfEAkv and upgrades Ownable contracts with additional claim step which makes ownership\r\n * transfers less prone to errors.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev An event which is triggered when the owner is changed.\r\n   * @param previousOwner The address of the previous owner.\r\n   * @param newOwner The address of the new owner.\r\n   */\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Allows the current owner to give new owner ability to claim the ownership of the contract.\r\n   * This differs from the Owner's function in that it allows setting pedingOwner address to 0x0,\r\n   * which effectively cancels an active claim.\r\n   * @param _newOwner The address which can claim ownership of the contract.\r\n   */\r\n  function transferOwnership(\r\n    address _newOwner\r\n  )\r\n    onlyOwner\r\n    public\r\n  {\r\n    pendingOwner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current pending owner to claim the ownership of the contract. It emits\r\n   * OwnershipTransferred event and resets pending owner to 0.\r\n   */\r\n  function claimOwnership()\r\n    public\r\n  {\r\n    require(msg.sender == pendingOwner);\r\n    address previousOwner = owner;\r\n    owner = pendingOwner;\r\n    pendingOwner = 0;\r\n    emit OwnershipTransferred(previousOwner, owner);\r\n  }\r\n}\r\n\r\n// File: contracts/tokens/Zxc.sol\r\n\r\n/*\r\n * @title ZXC protocol token.\r\n * @dev Standard ERC20 token used by the 0xcert protocol. This contract follows the implementation\r\n * at https://goo.gl/twbPwp.\r\n */\r\ncontract Zxc is\r\n  Token,\r\n  Claimable\r\n{\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n   * Transfer feature state.\r\n   */\r\n  bool internal transferEnabled;\r\n\r\n  /**\r\n   * Crowdsale smart contract address.\r\n   */\r\n  address public crowdsaleAddress;\r\n\r\n  /**\r\n   * @dev An event which is triggered when tokens are burned.\r\n   * @param _burner The address which burns tokens.\r\n   * @param _value The amount of burned tokens.\r\n   */\r\n  event Burn(\r\n    address indexed _burner,\r\n    uint256 _value\r\n  );\r\n\r\n  /**\r\n   * @dev Assures that the provided address is a valid destination to transfer tokens to.\r\n   * @param _to Target address.\r\n   */\r\n  modifier validDestination(\r\n    address _to\r\n  )\r\n  {\r\n    require(_to != address(0x0));\r\n    require(_to != address(this));\r\n    require(_to != address(crowdsaleAddress));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Assures that tokens can be transfered.\r\n   */\r\n  modifier onlyWhenTransferAllowed()\r\n  {\r\n    require(transferEnabled || msg.sender == crowdsaleAddress);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    tokenName = \"0xcert Protocol Token\";\r\n    tokenSymbol = \"ZXC\";\r\n    tokenDecimals = 18;\r\n    tokenTotalSupply = 500000000000000000000000000;\r\n    transferEnabled = false;\r\n\r\n    balances[owner] = tokenTotalSupply;\r\n    emit Transfer(address(0x0), owner, tokenTotalSupply);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers token to a specified address.\r\n   * @param _to The address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    onlyWhenTransferAllowed()\r\n    validDestination(_to)\r\n    public\r\n    returns (bool _success)\r\n  {\r\n    _success = super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers tokens from one address to another.\r\n   * @param _from address The address which you want to send tokens from.\r\n   * @param _to address The address which you want to transfer to.\r\n   * @param _value uint256 The amount of tokens to be transferred.\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    onlyWhenTransferAllowed()\r\n    validDestination(_to)\r\n    public\r\n    returns (bool _success)\r\n  {\r\n    _success = super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Enables token transfers.\r\n   */\r\n  function enableTransfer()\r\n    onlyOwner()\r\n    external\r\n  {\r\n    transferEnabled = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens. This function is based on BurnableToken implementation\r\n   * at goo.gl/GZEhaq.\r\n   * @notice Only owner is allowed to perform this operation.\r\n   * @param _value The amount of tokens to be burned.\r\n   */\r\n  function burn(\r\n    uint256 _value\r\n  )\r\n    onlyOwner()\r\n    external\r\n  {\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[owner] = balances[owner].sub(_value);\r\n    tokenTotalSupply = tokenTotalSupply.sub(_value);\r\n\r\n    emit Burn(owner, _value);\r\n    emit Transfer(owner, address(0x0), _value);\r\n  }\r\n\r\n  /**\r\n    * @dev Set crowdsale address which can distribute tokens even when onlyWhenTransferAllowed is\r\n    * false.\r\n    * @param crowdsaleAddr Address of token offering contract.\r\n    */\r\n  function setCrowdsaleAddress(\r\n    address crowdsaleAddr\r\n  )\r\n    external\r\n    onlyOwner()\r\n  {\r\n    crowdsaleAddress = crowdsaleAddr;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"crowdsaleAddr\",\"type\":\"address\"}],\"name\":\"setCrowdsaleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"_remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Zxc","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://36d05124dd6101a74018a2c04541adcf48d7b1bbfb9d7da91a9a7934b59ad7d8"}]}