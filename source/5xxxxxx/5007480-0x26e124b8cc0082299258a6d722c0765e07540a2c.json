{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\nNodepower ICO crowdsale contract\r\nBONUS SCHEDULE:\r\n        Bonus        start time               end time\r\n        45%     2017-12-31 23:59:59 - 2018-01-31 23:59:59 1517443199\r\n        40%     2018-02-01 00:00:00 - 2018-02-14 23:59:59 1518652799\r\n        30%     2018-02-15 00:00:00 - 2018-02-24 23:59:59 1519516799\r\n        20%     2018-02-25 00:00:00 - 2018-03-06 23:59:59 1520380799\r\n        15%     2018-03-07 00:00:00 - 2018-03-16 23:59:59 1521244799\r\n        10%     2018-03-17 00:00:00 - 2018-03-26 23:59:59 1522108799\r\n\r\nSee official resource for details https://nodepower.io/\r\n*/\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract NodeToken is StandardToken {\r\n    string public name = \"NodePower\";\r\n    string public symbol = \"NODE\";\r\n    uint8 public decimals = 2;\r\n    bool public mintingFinished = false;\r\n    mapping (address => bool) owners;\r\n    mapping (address => bool) minters;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    event OwnerAdded(address indexed newOwner);\r\n    event OwnerRemoved(address indexed removedOwner);\r\n    event MinterAdded(address indexed newMinter);\r\n    event MinterRemoved(address indexed removedMinter);\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function NodeToken() public {\r\n        owners[msg.sender] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyMinter public returns (bool) {\r\n        require(!mintingFinished);\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner public returns (bool) {\r\n        require(!mintingFinished);\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds administrative role to address\r\n     * @param _address The address that will get administrative privileges\r\n     */\r\n    function addOwner(address _address) onlyOwner public {\r\n        owners[_address] = true;\r\n        OwnerAdded(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes administrative role from address\r\n     * @param _address The address to remove administrative privileges from\r\n     */\r\n    function delOwner(address _address) onlyOwner public {\r\n        owners[_address] = false;\r\n        OwnerRemoved(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owners[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds minter role to address (able to create new tokens)\r\n     * @param _address The address that will get minter privileges\r\n     */\r\n    function addMinter(address _address) onlyOwner public {\r\n        minters[_address] = true;\r\n        MinterAdded(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes minter role from address\r\n     * @param _address The address to remove minter privileges\r\n     */\r\n    function delMinter(address _address) onlyOwner public {\r\n        minters[_address] = false;\r\n        MinterRemoved(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the minter.\r\n     */\r\n    modifier onlyMinter() {\r\n        require(minters[msg.sender]);\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * @title NodeCrowdsale\r\n * @dev NodeCrowdsale is a contract for managing a token crowdsale for NodePower project.\r\n * Crowdsale have 6 phases with start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate and bonuses. Collected funds are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract NodeCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    NodeToken public token;\r\n\r\n    // External wallet where funds get forwarded\r\n    address public wallet;\r\n\r\n    // Crowdsale administrators\r\n    mapping (address => bool) public owners;\r\n\r\n    // External bots updating rates\r\n    mapping (address => bool) public bots;\r\n\r\n    // USD cents per ETH exchange rate\r\n    uint256 public rateUSDcETH;\r\n\r\n    // Phases list, see schedule in constructor\r\n    mapping (uint => Phase) phases;\r\n\r\n    // The total number of phases (0...5)\r\n    uint public totalPhases = 6;\r\n\r\n    // Description for each phase\r\n    struct Phase {\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 bonusPercent;\r\n    }\r\n\r\n    // Minimum Deposit in USD cents\r\n    uint256 public constant minContributionUSDc = 1000;\r\n\r\n\r\n    // Amount of raised Ethers (in wei).\r\n    uint256 public weiRaised;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param bonusPercent free tokens percantage for the phase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 bonusPercent, uint256 amount);\r\n\r\n    // event for rate update logging\r\n    event RateUpdate(uint256 rate);\r\n\r\n    // event for wallet update\r\n    event WalletSet(address indexed wallet);\r\n\r\n    // owners management events\r\n    event OwnerAdded(address indexed newOwner);\r\n    event OwnerRemoved(address indexed removedOwner);\r\n\r\n    // bot management events\r\n    event BotAdded(address indexed newBot);\r\n    event BotRemoved(address indexed removedBot);\r\n\r\n    function NodeCrowdsale(address _tokenAddress, uint256 _initialRate) public {\r\n        require(_tokenAddress != address(0));\r\n        token = NodeToken(_tokenAddress);\r\n        rateUSDcETH = _initialRate;\r\n        wallet = msg.sender;\r\n        owners[msg.sender] = true;\r\n        bots[msg.sender] = true;\r\n        /*\r\n        ICO SCHEDULE\r\n        Bonus        start time               end time\r\n        45%     2017-12-31 23:59:59 1514764799 2018-01-31 23:59:59 1517443199\r\n        40%     2018-02-01 00:00:00 1517443200 2018-02-14 23:59:59 1518652799\r\n        30%     2018-02-15 00:00:00 1518652800 2018-02-24 23:59:59 1519516799\r\n        20%     2018-02-25 00:00:00 1519516800 2018-03-06 23:59:59 1520380799\r\n        15%     2018-03-07 00:00:00 1520380800 2018-03-16 23:59:59 1521244799\r\n        10%     2018-03-17 00:00:00 1521244800 2018-03-26 23:59:59 1522108799\r\n        00%     2018-03-27 00:00:00 1522108800 -\r\n        */\r\n        phases[0].bonusPercent = 45;\r\n        phases[0].startTime = 1514764799;\r\n        phases[0].endTime = 1517443199;\r\n        phases[1].bonusPercent = 40;\r\n        phases[1].startTime = 1517443200;\r\n        phases[1].endTime = 1518652799;\r\n        phases[2].bonusPercent = 30;\r\n        phases[2].startTime = 1518652800;\r\n        phases[2].endTime = 1519516799;\r\n        phases[3].bonusPercent = 20;\r\n        phases[3].startTime = 1519516800;\r\n        phases[3].endTime = 1520380799;\r\n        phases[4].bonusPercent = 15;\r\n        phases[4].startTime = 1520380800;\r\n        phases[4].endTime = 1521244799;\r\n        phases[5].bonusPercent = 10;\r\n        phases[5].startTime = 1521244800;\r\n        phases[5].endTime = 1522108799;\r\n    }\r\n\r\n    /**\r\n     * @dev Update collecting wallet address\r\n     * @param _address The address to send collected funds\r\n     */\r\n    function setWallet(address _address) onlyOwner public {\r\n        wallet = _address;\r\n        WalletSet(_address);\r\n    }\r\n\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != address(0));\r\n        require(msg.value != 0);\r\n\r\n        uint256 currentBonusPercent = getBonusPercent(now);\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        require(calculateUSDcValue(weiAmount) >= minContributionUSDc);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = calculateTokenAmount(weiAmount, currentBonusPercent);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, currentBonusPercent, tokens);\r\n\r\n        forwardFunds();\r\n    }\r\n\r\n    // If phase exists return corresponding bonus for the given date\r\n    // else return 0 (percent)\r\n    function getBonusPercent(uint256 datetime) public view returns (uint256) {\r\n        for (uint i = 0; i < totalPhases; i++) {\r\n            if (datetime >= phases[i].startTime && datetime <= phases[i].endTime) {\r\n                return phases[i].bonusPercent;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // set rate\r\n    function setRate(uint256 _rateUSDcETH) public onlyBot {\r\n        // don't allow to change rate more than 10%\r\n        assert(_rateUSDcETH < rateUSDcETH.mul(110).div(100));\r\n        assert(_rateUSDcETH > rateUSDcETH.mul(90).div(100));\r\n        rateUSDcETH = _rateUSDcETH;\r\n        RateUpdate(rateUSDcETH);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds administrative role to address\r\n     * @param _address The address that will get administrative privileges\r\n     */\r\n    function addOwner(address _address) onlyOwner public {\r\n        owners[_address] = true;\r\n        OwnerAdded(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes administrative role from address\r\n     * @param _address The address to remove administrative privileges from\r\n     */\r\n    function delOwner(address _address) onlyOwner public {\r\n        owners[_address] = false;\r\n        OwnerRemoved(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owners[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds rate updating bot\r\n     * @param _address The address of the rate bot\r\n     */\r\n    function addBot(address _address) onlyOwner public {\r\n        bots[_address] = true;\r\n        BotAdded(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes rate updating bot address\r\n     * @param _address The address of the rate bot\r\n     */\r\n    function delBot(address _address) onlyOwner public {\r\n        bots[_address] = false;\r\n        BotRemoved(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the bot.\r\n     */\r\n    modifier onlyBot() {\r\n        require(bots[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    // calculate deposit value in USD Cents\r\n    function calculateUSDcValue(uint256 _weiDeposit) public view returns (uint256) {\r\n\r\n        // wei per USD cent\r\n        uint256 weiPerUSDc = 1 ether/rateUSDcETH;\r\n\r\n        // Deposited value converted to USD cents\r\n        uint256 depositValueInUSDc = _weiDeposit.div(weiPerUSDc);\r\n        return depositValueInUSDc;\r\n    }\r\n\r\n    // calculates how much tokens will beneficiary get\r\n    // for given amount of wei\r\n    function calculateTokenAmount(uint256 _weiDeposit, uint256 _bonusTokensPercent) public view returns (uint256) {\r\n        uint256 mainTokens = calculateUSDcValue(_weiDeposit);\r\n        uint256 bonusTokens = mainTokens.mul(_bonusTokensPercent).div(100);\r\n        return mainTokens.add(bonusTokens);\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiDeposit\",\"type\":\"uint256\"},{\"name\":\"_bonusTokensPercent\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContributionUSDc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"delBot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rateUSDcETH\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPhases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiDeposit\",\"type\":\"uint256\"}],\"name\":\"calculateUSDcValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"delOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"getBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateUSDcETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addBot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_initialRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonusPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"removedOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newBot\",\"type\":\"address\"}],\"name\":\"BotAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"removedBot\",\"type\":\"address\"}],\"name\":\"BotRemoved\",\"type\":\"event\"}]","ContractName":"NodeCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ac956c72c262e5405a84dac655d5f3bea7ae9534000000000000000000000000000000000000000000000000000000000001abaf","Library":"","SwarmSource":"bzzr://f7a2bee1d5e640ef93d206a865af10c111ff699d65c0caf04e952dd84eae670b"}]}