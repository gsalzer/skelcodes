{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// ============================================================================\r\n// ERC Token Standard #20 Interface (For communication with DiipCoin Contract)\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ============================================================================\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ============================================================================\r\n// Owned contract\r\n// ============================================================================\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// ============================================================================\r\n// Tourpool contract\r\n// ============================================================================\r\ncontract TourPool is Owned{\r\n\t// state variables\r\n\tbool public startlistUploaded;\r\n\taddress diipCoinContract;\r\n\taddress public currentLeader;\r\n\tuint public highScore;\r\n\tuint public prizeMoney;\r\n\tuint public registrationDeadline;\r\n\tuint public maxTeamSize;\r\n\tuint public playerBudget;\r\n\tuint public playerCount;\r\n\r\n\t// Rider and Player structs\r\n\tstruct Rider {\r\n\t\tuint price;\r\n\t\tuint score;\r\n\t}\r\n\r\n\tstruct Player {\r\n\t\tuint status;\r\n\t\tuint[] team;\r\n\t\tuint teamPrice;\r\n\t}\r\n\r\n\t// mappings of riders and players\r\n\tmapping(address => Player) public players;\r\n\taddress[] public registrations;\r\n\tmapping(uint => Rider) public riders;\r\n\r\n\t// Events\r\n\tevent NewPlayer(address indexed player);\r\n\tevent TeamCommitted(address indexed player, uint indexed teamPrice, uint[] team);\r\n\tevent scoresUpdated(uint[] riderIDs, uint[] dayScores);\r\n\tevent scoresEdited(uint[] riderIDs, uint[] newScores);\r\n\tevent PrizeMoneyStored(uint Prize);\t\r\n\r\n\t// Function Modifiers\r\n\tmodifier beforeDeadline {\r\n\t\trequire(now <= registrationDeadline);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier diipCoinOnly {\r\n\t\trequire(msg.sender == diipCoinContract);\r\n\t\t_;\r\n\t}\r\n\r\n\t// -----------\r\n\t// Constructor\r\n\t// -----------\t\r\n\tfunction TourPool() public {\t\t\r\n\t\tdiipCoinContract = 0xc9E86029bd081af490ce39a3BcB1bccF99d33CfF;\t\t\r\n\t\tregistrationDeadline = 1530954000;\r\n\t\tmaxTeamSize = 8;\r\n\t\tplayerBudget = 100;\r\n\t\tstartlistUploaded = false;\t\t\r\n\t}\r\n\r\n\t// ---------------------------\r\n\t//  Public (player) functions\r\n\t// ---------------------------\r\n\tfunction register() public beforeDeadline returns (bool success){\t\t\r\n\t\t// players may register only once\r\n\t\trequire(players[msg.sender].status == 0);\t\t\r\n\t\t// update player status\r\n\t\tplayers[msg.sender].status = 1;\r\n\t\tplayers[msg.sender].teamPrice = 0;\r\n\t\tregistrations.push(msg.sender);\r\n\t\t// Broadcast event of player registration\r\n\t\temit NewPlayer(msg.sender);\r\n\t\t// sent 100 DIIP to contract caller\r\n\t\treturn transferPlayerBudget(msg.sender);\t\t\r\n\t}\r\n\r\n\t// This function is called from the diipcoin contract\r\n\tfunction tokenFallback(\r\n\t\taddress _sender,\r\n\t    uint _value,\t    \r\n\t    uint[] _team\r\n\t) \r\n\t\tpublic beforeDeadline diipCoinOnly returns (bool) \r\n\t{\r\n\t\trequire(startlistUploaded);\t    \r\n\t    return commitTeam(_sender, _value, _team);\r\n\t}\r\n\r\n\t// ---------------------------\r\n\t//  Only Owner functions\r\n\t// ---------------------------\r\n\tfunction uploadStartlist(uint[] prices) public onlyOwner beforeDeadline returns (bool success){\r\n\t\trequire(prices.length == 176);\t\r\n\t\tfor (uint i; i < prices.length; i++){\r\n\t\t\triders[i + 1].price = prices[i];\r\n\t\t}\r\n\t\tstartlistUploaded = true;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction editStartlist(uint[] riderIDs, uint[] prices) public onlyOwner beforeDeadline returns (bool success){\r\n\t\trequire(riderIDs.length == prices.length);\r\n\t\tfor (uint i = 0; i < riderIDs.length; i++){\r\n\t\t\triders[riderIDs[i]].price = prices[i];\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction commitScores(\r\n\t\tuint[] _riderIDs, \r\n\t\tuint[] _scores\t\t\r\n\t\t) \r\n\t\tpublic onlyOwner \r\n\t\t{\r\n\t\trequire(_riderIDs.length == _scores.length);\r\n\t\t// Update scores\r\n\t\tfor (uint i; i < _riderIDs.length; i++){\t\t\t\r\n\t\t\triders[_riderIDs[i]].score += _scores[i];\r\n\t\t}\t\t\r\n\t\temit scoresUpdated(_riderIDs, _scores);\r\n\t\t// Set new highscore\r\n\t\t(highScore, currentLeader) = getHighscore();\r\n\t}\r\n\r\n\tfunction editScores(uint[] _riderIDs, uint[] _newScores) public onlyOwner returns (bool success){\r\n\t\trequire(_riderIDs.length == _newScores.length);\r\n\t\tfor (uint i; i < _riderIDs.length; i++){\t\t\t\r\n\t\t\triders[_riderIDs[i]].score = _newScores[i];\r\n\t\t}\r\n\t\t(highScore, currentLeader) = getHighscore();\r\n\t\temit scoresEdited(_riderIDs, _newScores);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    function storePrizeMoney() public payable onlyOwner returns (bool success){\r\n    \temit PrizeMoneyStored(msg.value);\r\n    \tprizeMoney = msg.value;\r\n    \treturn true;\r\n    }\r\n\r\n    function payTheWinner() public payable onlyOwner returns (bool success){\r\n    \tuint toSend = prizeMoney;\r\n    \tprizeMoney -=  toSend;\r\n    \tcurrentLeader.transfer(toSend);\r\n    \treturn true;\r\n    }\r\n\r\n    // ---------------------------\r\n\t//  Getters\r\n\t// ---------------------------\r\n\tfunction getTeamPrice(uint[] team) public view returns (uint totalPrice){\r\n\t\ttotalPrice = 0;\r\n\t\tfor (uint i; i < team.length; i++){\r\n\t\t\ttotalPrice += riders[team[i]].price;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getPlayerScore(address _player) public view returns(uint score){\r\n\t\tuint[] storage team = players[_player].team;\t\t\t\r\n\t\tscore = 0;\r\n\t\tfor (uint i = 0; i < team.length; i++){\r\n\t\t\tuint dupCount = 0;\r\n\t\t\tfor (uint j = 0;j < team.length; j++){\r\n\t\t\t\tif (team[i] == team[j]){\r\n\t\t\t\t\tdupCount++;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\tif (dupCount == 1){\r\n\t\t\t\tscore += riders[team[i]].score;\t\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn score;\r\n\t}\r\n\r\n\tfunction getHighscore() public view returns (uint newHighscore, address leader){\r\n\t\tnewHighscore = 0;\t\t\r\n\t\tfor (uint i; i < registrations.length; i++){\r\n\t\t\tuint score = getPlayerScore(registrations[i]);\r\n\t\t\tif (score > newHighscore){\r\n\t\t\t\tnewHighscore = score;\r\n\t\t\t\tleader = registrations[i];\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\treturn (newHighscore, leader);\r\n\t}\r\n\r\n\tfunction getPlayerTeam(address _player) public view returns(uint[] team){\r\n\t\treturn players[_player].team;\r\n\t}\r\n\r\n\r\n    // ---------------------------\r\n\t//  Private functions\r\n\t// ---------------------------\r\n    function transferPlayerBudget(address playerAddress) private returns (bool success){\r\n    \treturn ERC20Interface(diipCoinContract).transfer(playerAddress, playerBudget);\r\n    }\r\n\r\n    function commitTeam(\r\n    \taddress _player, \r\n    \tuint _value, \r\n    \tuint[] _team\r\n    ) \r\n    \tprivate returns (bool success)\r\n    {\r\n\t    // check team size, price and player registration\r\n\t    require(players[_player].status >= 1);\r\n\t    require(_team.length <= maxTeamSize);\r\n\t    uint oldPrice = players[_player].teamPrice;\r\n\t    uint newPrice = getTeamPrice(_team);\r\n\t    require(oldPrice + _value >= newPrice);\r\n\t    require(oldPrice + _value <= playerBudget);\r\n\t    // commit team and emit event\r\n\t    if (newPrice < oldPrice){\r\n\t    \tERC20Interface(diipCoinContract).transfer(_player,  (oldPrice - newPrice));\r\n\t    }\r\n    \tplayers[_player].teamPrice = newPrice;\r\n    \tplayers[_player].team = _team;\r\n    \tplayers[_player].status = 2;\r\n    \temit TeamCommitted(_player, newPrice, _team);\t  \r\n    \treturn true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_riderIDs\",\"type\":\"uint256[]\"},{\"name\":\"_newScores\",\"type\":\"uint256[]\"}],\"name\":\"editScores\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"riderIDs\",\"type\":\"uint256[]\"},{\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"editStartlist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"register\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highScore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"team\",\"type\":\"uint256[]\"}],\"name\":\"getTeamPrice\",\"outputs\":[{\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_riderIDs\",\"type\":\"uint256[]\"},{\"name\":\"_scores\",\"type\":\"uint256[]\"}],\"name\":\"commitScores\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHighscore\",\"outputs\":[{\"name\":\"newHighscore\",\"type\":\"uint256\"},{\"name\":\"leader\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"riders\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"score\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payTheWinner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playerBudget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeMoney\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"storePrizeMoney\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_team\",\"type\":\"uint256[]\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerTeam\",\"outputs\":[{\"name\":\"team\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTeamSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerScore\",\"outputs\":[{\"name\":\"score\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint256\"},{\"name\":\"teamPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startlistUploaded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registrations\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"uploadStartlist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"}],\"name\":\"NewPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"teamPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"team\",\"type\":\"uint256[]\"}],\"name\":\"TeamCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"riderIDs\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"dayScores\",\"type\":\"uint256[]\"}],\"name\":\"scoresUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"riderIDs\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"newScores\",\"type\":\"uint256[]\"}],\"name\":\"scoresEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Prize\",\"type\":\"uint256\"}],\"name\":\"PrizeMoneyStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TourPool","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d67a903f14b643f49595d92fa4b03f64f4e53d20b86f5fcc1f01be4a2ee0e50f"}]}