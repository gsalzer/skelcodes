{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n// File: contracts/LifToken.sol\r\n\r\n/**\r\n   @title Líf, the Winding Tree token\r\n\r\n   Implementation of Líf, the ERC827 token for Winding Tree, an extension of the\r\n   ERC20 token with extra methods to transfer value and data to execute a call\r\n   on transfer.\r\n   Uses OpenZeppelin StandardToken, ERC827Token, MintableToken and PausableToken.\r\n */\r\ncontract LifToken is StandardToken, MintableToken, PausableToken {\r\n  // Token Name\r\n  string public constant NAME = \"Líf\";\r\n\r\n  // Token Symbol\r\n  string public constant SYMBOL = \"LIF\";\r\n\r\n  // Token decimals\r\n  uint public constant DECIMALS = 18;\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   *\r\n   * @param _value The amount of tokens to be burned.\r\n   */\r\n  function burn(uint256 _value) public whenNotPaused {\r\n\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n\r\n    // a Transfer event to 0x0 can be useful for observers to keep track of\r\n    // all the Lif by just looking at those events\r\n    Transfer(msg.sender, address(0), _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens of an address\r\n   * This function can be called only by the owner in the minting process\r\n   *\r\n   * @param _value The amount of tokens to be burned.\r\n   */\r\n  function burn(address burner, uint256 _value) public onlyOwner {\r\n\r\n    require(!mintingFinished);\r\n\r\n    require(_value <= balances[burner]);\r\n\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n\r\n    // a Transfer event to 0x0 can be useful for observers to keep track of\r\n    // all the Lif by just looking at those events\r\n    Transfer(burner, address(0), _value);\r\n  }\r\n}\r\n\r\n// File: contracts/LifMarketValidationMechanism.sol\r\n\r\n/**\r\n   @title Market Validation Mechanism (MVM)\r\n */\r\ncontract LifMarketValidationMechanism is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // The Lif token contract\r\n  LifToken public lifToken;\r\n\r\n  // The address of the foundation wallet. It can claim part of the eth funds\r\n  // following an exponential curve until the end of the MVM lifetime (24 or 48\r\n  // months). After that it can claim 100% of the remaining eth in the MVM.\r\n  address public foundationAddr;\r\n\r\n  // The amount of wei that the MVM received initially\r\n  uint256 public initialWei;\r\n\r\n  // Start timestamp since which the MVM begins to accept tokens via sendTokens\r\n  uint256 public startTimestamp;\r\n\r\n  // Quantity of seconds in every period, usually equivalent to 30 days\r\n  uint256 public secondsPerPeriod;\r\n\r\n  // Number of periods. It should be 24 or 48 (each period is roughly a month)\r\n  uint8 public totalPeriods;\r\n\r\n  // The total amount of wei that was claimed by the foundation so far\r\n  uint256 public totalWeiClaimed = 0;\r\n\r\n  // The price at which the MVM buys tokens at the beginning of its lifetime\r\n  uint256 public initialBuyPrice = 0;\r\n\r\n  // Amount of tokens that were burned by the MVM\r\n  uint256 public totalBurnedTokens = 0;\r\n\r\n  // Amount of wei that was reimbursed via sendTokens calls\r\n  uint256 public totalReimbursedWei = 0;\r\n\r\n  // Total supply of tokens when the MVM was created\r\n  uint256 public originalTotalSupply;\r\n\r\n  uint256 constant PRICE_FACTOR = 100000;\r\n\r\n  // Has the MVM been funded by calling `fund`? It can be funded only once\r\n  bool public funded = false;\r\n\r\n  // true when the market MVM is paused\r\n  bool public paused = false;\r\n\r\n  // total amount of seconds that the MVM was paused\r\n  uint256 public totalPausedSeconds = 0;\r\n\r\n  // the timestamp where the MVM was paused\r\n  uint256 public pausedTimestamp;\r\n\r\n  uint256[] public periods;\r\n\r\n  // Events\r\n  event Pause();\r\n  event Unpause(uint256 pausedSeconds);\r\n\r\n  event ClaimedWei(uint256 claimedWei);\r\n  event SentTokens(address indexed sender, uint256 price, uint256 tokens, uint256 returnedWei);\r\n\r\n  modifier whenNotPaused(){\r\n    assert(!paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused(){\r\n    assert(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n     @dev Constructor\r\n\r\n     @param lifAddr the lif token address\r\n     @param _startTimestamp see `startTimestamp`\r\n     @param _secondsPerPeriod see `secondsPerPeriod`\r\n     @param _totalPeriods see `totalPeriods`\r\n     @param _foundationAddr see `foundationAddr`\r\n    */\r\n  function LifMarketValidationMechanism(\r\n    address lifAddr, uint256 _startTimestamp, uint256 _secondsPerPeriod,\r\n    uint8 _totalPeriods, address _foundationAddr\r\n  ) {\r\n    require(lifAddr != address(0));\r\n    require(_startTimestamp > block.timestamp);\r\n    require(_secondsPerPeriod > 0);\r\n    require(_totalPeriods == 24 || _totalPeriods == 48);\r\n    require(_foundationAddr != address(0));\r\n\r\n    lifToken = LifToken(lifAddr);\r\n    startTimestamp = _startTimestamp;\r\n    secondsPerPeriod = _secondsPerPeriod;\r\n    totalPeriods = _totalPeriods;\r\n    foundationAddr = _foundationAddr;\r\n\r\n  }\r\n\r\n  /**\r\n     @dev Receives the initial funding from the Crowdsale. Calculates the\r\n     initial buy price as initialWei / totalSupply\r\n    */\r\n  function fund() public payable onlyOwner {\r\n    assert(!funded);\r\n\r\n    originalTotalSupply = lifToken.totalSupply();\r\n    initialWei = msg.value;\r\n    initialBuyPrice = initialWei.\r\n      mul(PRICE_FACTOR).\r\n      div(originalTotalSupply);\r\n\r\n    funded = true;\r\n  }\r\n\r\n  /**\r\n     @dev Change the LifToken address\r\n    */\r\n  function changeToken(address newToken) public onlyOwner {\r\n    lifToken = LifToken(newToken);\r\n  }\r\n\r\n  /**\r\n     @dev calculates the exponential distribution curve. It determines how much\r\n     wei can be distributed back to the foundation every month. It starts with\r\n     very low amounts ending with higher chunks at the end of the MVM lifetime\r\n    */\r\n  function calculateDistributionPeriods() public {\r\n    assert(totalPeriods == 24 || totalPeriods == 48);\r\n    assert(periods.length == 0);\r\n\r\n    // Table with the max delta % that can be distributed back to the foundation on\r\n    // each period. It follows an exponential curve (starts with lower % and ends\r\n    // with higher %) to keep the funds in the MVM longer. deltas24\r\n    // is used when MVM lifetime is 24 months, deltas48 when it's 48 months.\r\n    // The sum is less than 100% because the last % is missing: after the last period\r\n    // the 100% remaining can be claimed by the foundation. Values multipled by 10^5\r\n\r\n    uint256[24] memory accumDistribution24 = [\r\n      uint256(0), 18, 117, 351, 767, 1407,\r\n      2309, 3511, 5047, 6952, 9257, 11995,\r\n      15196, 18889, 23104, 27870, 33215, 39166,\r\n      45749, 52992, 60921, 69561, 78938, 89076\r\n    ];\r\n\r\n    uint256[48] memory accumDistribution48 = [\r\n      uint256(0), 3, 18, 54, 117, 214, 351, 534,\r\n      767, 1056, 1406, 1822, 2308, 2869, 3510, 4234,\r\n      5046, 5950, 6950, 8051, 9256, 10569, 11994, 13535,\r\n      15195, 16978, 18888, 20929, 23104, 25416, 27870, 30468,\r\n      33214, 36112, 39165, 42376, 45749, 49286, 52992, 56869,\r\n      60921, 65150, 69560, 74155, 78937, 83909, 89075, 94438\r\n    ];\r\n\r\n    for (uint8 i = 0; i < totalPeriods; i++) {\r\n\r\n      if (totalPeriods == 24) {\r\n        periods.push(accumDistribution24[i]);\r\n      } else {\r\n        periods.push(accumDistribution48[i]);\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n     @dev Returns the current period as a number from 0 to totalPeriods\r\n\r\n     @return the current period as a number from 0 to totalPeriods\r\n    */\r\n  function getCurrentPeriodIndex() public view returns(uint256) {\r\n    assert(block.timestamp >= startTimestamp);\r\n    return block.timestamp.sub(startTimestamp).\r\n      sub(totalPausedSeconds).\r\n      div(secondsPerPeriod);\r\n  }\r\n\r\n  /**\r\n     @dev calculates the accumulated distribution percentage as of now,\r\n     following the exponential distribution curve\r\n\r\n     @return the accumulated distribution percentage, used to calculate things\r\n     like the maximum amount that can be claimed by the foundation\r\n    */\r\n  function getAccumulatedDistributionPercentage() public view returns(uint256 percentage) {\r\n    uint256 period = getCurrentPeriodIndex();\r\n\r\n    assert(period < totalPeriods);\r\n\r\n    return periods[period];\r\n  }\r\n\r\n  /**\r\n     @dev returns the current buy price at which the MVM offers to buy tokens to\r\n     burn them\r\n\r\n     @return the current buy price (in eth/lif, multiplied by PRICE_FACTOR)\r\n    */\r\n  function getBuyPrice() public view returns (uint256 price) {\r\n    uint256 accumulatedDistributionPercentage = getAccumulatedDistributionPercentage();\r\n\r\n    return initialBuyPrice.\r\n      mul(PRICE_FACTOR.sub(accumulatedDistributionPercentage)).\r\n      div(PRICE_FACTOR);\r\n  }\r\n\r\n  /**\r\n     @dev Returns the maximum amount of wei that the foundation can claim. It's\r\n     a portion of the ETH that was not claimed by token holders\r\n\r\n     @return the maximum wei claimable by the foundation as of now\r\n    */\r\n  function getMaxClaimableWeiAmount() public view returns (uint256) {\r\n    if (isFinished()) {\r\n      return this.balance;\r\n    } else {\r\n      uint256 claimableFromReimbursed = initialBuyPrice.\r\n        mul(totalBurnedTokens).div(PRICE_FACTOR).\r\n        sub(totalReimbursedWei);\r\n      uint256 currentCirculation = lifToken.totalSupply();\r\n      uint256 accumulatedDistributionPercentage = getAccumulatedDistributionPercentage();\r\n      uint256 maxClaimable = initialWei.\r\n        mul(accumulatedDistributionPercentage).div(PRICE_FACTOR).\r\n        mul(currentCirculation).div(originalTotalSupply).\r\n        add(claimableFromReimbursed);\r\n\r\n      if (maxClaimable > totalWeiClaimed) {\r\n        return maxClaimable.sub(totalWeiClaimed);\r\n      } else {\r\n        return 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     @dev allows to send tokens to the MVM in exchange of Eth at the price\r\n     determined by getBuyPrice. The tokens are burned\r\n    */\r\n  function sendTokens(uint256 tokens) public whenNotPaused {\r\n    require(tokens > 0);\r\n\r\n    uint256 price = getBuyPrice();\r\n    uint256 totalWei = tokens.mul(price).div(PRICE_FACTOR);\r\n\r\n    lifToken.transferFrom(msg.sender, address(this), tokens);\r\n    lifToken.burn(tokens);\r\n    totalBurnedTokens = totalBurnedTokens.add(tokens);\r\n\r\n    SentTokens(msg.sender, price, tokens, totalWei);\r\n\r\n    totalReimbursedWei = totalReimbursedWei.add(totalWei);\r\n    msg.sender.transfer(totalWei);\r\n  }\r\n\r\n  /**\r\n     @dev Returns whether the MVM end-of-life has been reached. When that\r\n     happens no more tokens can be sent to the MVM and the foundation can claim\r\n     100% of the remaining balance in the MVM\r\n\r\n     @return true if the MVM end-of-life has been reached\r\n    */\r\n  function isFinished() public view returns (bool finished) {\r\n    return getCurrentPeriodIndex() >= totalPeriods;\r\n  }\r\n\r\n  /**\r\n     @dev Called from the foundation wallet to claim eth back from the MVM.\r\n     Maximum amount that can be claimed is determined by\r\n     getMaxClaimableWeiAmount\r\n    */\r\n  function claimWei(uint256 weiAmount) public whenNotPaused {\r\n    require(msg.sender == foundationAddr);\r\n\r\n    uint256 claimable = getMaxClaimableWeiAmount();\r\n\r\n    assert(claimable >= weiAmount);\r\n\r\n    foundationAddr.transfer(weiAmount);\r\n\r\n    totalWeiClaimed = totalWeiClaimed.add(weiAmount);\r\n\r\n    ClaimedWei(weiAmount);\r\n  }\r\n\r\n  /**\r\n     @dev Pauses the MVM. No tokens can be sent to the MVM and no eth can be\r\n     claimed from the MVM while paused. MVM total lifetime is extended by the\r\n     period it stays paused\r\n    */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    pausedTimestamp = block.timestamp;\r\n\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n     @dev Unpauses the MVM. See `pause` for more details about pausing\r\n    */\r\n  function unpause() public onlyOwner whenPaused {\r\n    uint256 pausedSeconds = block.timestamp.sub(pausedTimestamp);\r\n    totalPausedSeconds = totalPausedSeconds.add(pausedSeconds);\r\n    paused = false;\r\n\r\n    Unpause(pausedSeconds);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/VestedPayment.sol\r\n\r\n/**\r\n   @title Vested Payment Schedule for LifToken\r\n\r\n   An ownable vesting schedule for the LifToken, the tokens can only be\r\n   claimed by the owner. The contract has a start timestamp, a duration\r\n   of each period in seconds (it can be days, months, years), a total\r\n   amount of periods and a cliff. The available amount of tokens will\r\n   be calculated based on the balance of LifTokens of the contract at\r\n   that time.\r\n */\r\n\r\ncontract VestedPayment is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // When the vested schedule starts\r\n  uint256 public startTimestamp;\r\n\r\n  // How many seconds each period will last\r\n  uint256 public secondsPerPeriod;\r\n\r\n  // How many periods will have in total\r\n  uint256 public totalPeriods;\r\n\r\n  // The amount of tokens to be vested in total\r\n  uint256 public tokens;\r\n\r\n  // How many tokens were claimed\r\n  uint256 public claimed;\r\n\r\n  // The token contract\r\n  LifToken public token;\r\n\r\n  // Duration (in periods) of the initial cliff in the vesting schedule\r\n  uint256 public cliffDuration;\r\n\r\n  /**\r\n     @dev Constructor.\r\n\r\n     @param _startTimestamp see `startTimestamp`\r\n     @param _secondsPerPeriod see `secondsPerPeriod`\r\n     @param _totalPeriods see `totalPeriods\r\n     @param _cliffDuration see `cliffDuration`\r\n     @param _tokens see `tokens`\r\n     @param tokenAddress the address of the token contract\r\n   */\r\n  function VestedPayment(\r\n    uint256 _startTimestamp, uint256 _secondsPerPeriod,\r\n    uint256 _totalPeriods, uint256 _cliffDuration,\r\n    uint256 _tokens, address tokenAddress\r\n  ) {\r\n    require(_startTimestamp >= block.timestamp);\r\n    require(_secondsPerPeriod > 0);\r\n    require(_totalPeriods > 0);\r\n    require(tokenAddress != address(0));\r\n    require(_cliffDuration < _totalPeriods);\r\n    require(_tokens > 0);\r\n\r\n    startTimestamp = _startTimestamp;\r\n    secondsPerPeriod = _secondsPerPeriod;\r\n    totalPeriods = _totalPeriods;\r\n    cliffDuration = _cliffDuration;\r\n    tokens = _tokens;\r\n    token = LifToken(tokenAddress);\r\n  }\r\n\r\n  /**\r\n     @dev Change the LifToken address\r\n    */\r\n  function changeToken(address newToken) public onlyOwner {\r\n    token = LifToken(newToken);\r\n  }\r\n\r\n  /**\r\n     @dev Get how many tokens are available to be claimed\r\n   */\r\n  function getAvailableTokens() public view returns (uint256) {\r\n    uint256 period = block.timestamp.sub(startTimestamp)\r\n      .div(secondsPerPeriod);\r\n\r\n    if (period < cliffDuration) {\r\n      return 0;\r\n    } else if (period >= totalPeriods) {\r\n      return tokens.sub(claimed);\r\n    } else {\r\n      return tokens.mul(period.add(1)).div(totalPeriods).sub(claimed);\r\n    }\r\n  }\r\n\r\n  /**\r\n     @dev Claim the tokens, they can be claimed only by the owner\r\n     of the contract\r\n\r\n     @param amount how many tokens to be claimed\r\n   */\r\n  function claimTokens(uint256 amount) public onlyOwner {\r\n    assert(getAvailableTokens() >= amount);\r\n\r\n    claimed = claimed.add(amount);\r\n    token.transfer(owner, amount);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"secondsPerPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cliffDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPeriods\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"name\":\"_secondsPerPeriod\",\"type\":\"uint256\"},{\"name\":\"_totalPeriods\",\"type\":\"uint256\"},{\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"VestedPayment","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005e6d82d10000000000000000000000000000000000000000000000000000000000278d000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d38f3db288d250c6557d000000000000000000000000eb9951021698b42e4399f9cbb6267aa35f82d59d","Library":"","SwarmSource":"bzzr://e1fe55cd90fb093f603d1fd73a8b804bb1dba75b661b22efcbc844065b947d04"}]}