{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract SafeMath {\r\n    \r\n    uint256 constant MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function safeAdd(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        require(x <= MAX_UINT256 - y);\r\n        return x + y;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        require(x >= y);\r\n        return x - y;\r\n    }\r\n\r\n    function safeMul(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        if (y == 0) {\r\n            return 0;\r\n        }\r\n        require(x <= (MAX_UINT256 / y));\r\n        return x * y;\r\n    }\r\n}\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    function Owned() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n}\r\ncontract IERC20Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}   \r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract CreditGAMEInterface {\r\n    function isGameApproved(address _gameAddress) view public returns(bool);\r\n    function createLock(address _winner, uint _totalParticipationAmount, uint _tokenLockDuration) public;\r\n    function removeFailedGame() public;\r\n    function removeLock() public;\r\n    function cleanUp() public;\r\n    function checkIfLockCanBeRemoved(address _gameAddress) public view returns(bool);\r\n}\r\n\r\n\r\ncontract LuckyTree is Owned, SafeMath{\r\n    \r\n    uint public leafPrice;\r\n    uint public gameStart;\r\n    uint public gameDuration;\r\n    uint public tokenLockDuration;\r\n    uint public totalParticipationAmount;\r\n    uint public totalLockedAmount;\r\n    uint public numberOfLeafs;\r\n    uint public participantIndex;\r\n    bool public fundsTransfered;\r\n    address public winner;\r\n    mapping(uint => address) public participants;\r\n    mapping(uint => uint) public participationAmount;\r\n    mapping(address => bool) public hasParticipated;\r\n    mapping(address => bool) public hasWithdrawn;\r\n    mapping(address => uint) public participantIndexes;\r\n    mapping(uint => address) public leafOwners;\r\n    \r\n    event GameWinner(address winner);\r\n    event GameEnded(uint block);\r\n    event GameStarted(uint block);\r\n    event GameFailed(uint block);\r\n    event GameLocked(uint block);\r\n    event GameUnlocked(uint block);\r\n    \r\n    enum state{\r\n        pending,\r\n        running,\r\n        paused,\r\n        finished,\r\n        closed,\r\n        claimed\r\n    }\r\n    \r\n    state public gameState;\r\n    \r\n    //SET BEFORE DEPLOY\r\n    address public tokenAddress = 0xfc6b46d20584a7f736c0d9084ab8b1a8e8c01a38;\r\n    address public creditGameAddress = 0x7f135d5d5c1d2d44cf6abb7d09735466ba474799;\r\n\r\n    /**\r\n     *leafPrice = price in crb for one leafPrice\r\n     * _gamestart = block.number when the game _gamestart\r\n     * _gameduration = block.number when game ends\r\n     * _tokenLockDuration = number of block for when the tokens are locked\r\n     */\r\n    function LuckyTree(\r\n        uint _leafPrice,\r\n        uint _gameStart,\r\n        uint _gameDuration,\r\n        uint _tokenLockDuration) public{\r\n        \r\n        leafPrice = _leafPrice;\r\n        gameStart = _gameStart;\r\n        gameDuration = _gameDuration;\r\n        tokenLockDuration = _tokenLockDuration;\r\n        \r\n        gameState = state.pending;\r\n        totalParticipationAmount = 0;\r\n        numberOfLeafs = 0;\r\n        participantIndex = 0;\r\n        fundsTransfered = false;\r\n        winner = 0x0;\r\n    }\r\n    \r\n    /**\r\n     * Generate random winner.\r\n     * \r\n     **/\r\n    function random() internal view returns(uint){\r\n        return uint(keccak256(block.number, block.difficulty, numberOfLeafs));\r\n    }\r\n    \r\n    /**\r\n     * Set token address.\r\n     * \r\n     **/\r\n    function setTokenAddress(address _tokenAddress) public onlyOwner{\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n    \r\n    /**\r\n     * Set game address.\r\n     * \r\n     **/\r\n    function setCreditGameAddress(address _creditGameAddress) public onlyOwner{\r\n        creditGameAddress = _creditGameAddress;\r\n    }\r\n    \r\n    /**\r\n     * Method called when game ends. \r\n     * Check that more than 1 wallet contributed\r\n     **/\r\n    function pickWinner() internal{\r\n        if(numberOfLeafs > 0){\r\n            if(participantIndex == 1){\r\n                //a single account contributed - just transfer funds back\r\n                IERC20Token(tokenAddress).transfer(leafOwners[0], totalParticipationAmount);\r\n                hasWithdrawn[leafOwners[0]] = true;\r\n                CreditGAMEInterface(creditGameAddress).removeFailedGame();\r\n                emit GameFailed(block.number);\r\n            }else{\r\n                uint leafOwnerIndex = random() % numberOfLeafs;\r\n                winner = leafOwners[leafOwnerIndex];\r\n                emit GameWinner(winner);\r\n                lockFunds(winner);\r\n                \r\n            }\r\n        }\r\n        gameState = state.closed;\r\n    }\r\n    \r\n    /**\r\n     * Method called when winner is picked\r\n     * Funds are transferred to game contract and lock is created by calling game contract\r\n     **/\r\n    function lockFunds(address _winner) internal{\r\n        require(totalParticipationAmount != 0);\r\n        //transfer and lock tokens on game contract\r\n        IERC20Token(tokenAddress).transfer(creditGameAddress, totalParticipationAmount);\r\n        CreditGAMEInterface(creditGameAddress).createLock(_winner, totalParticipationAmount, tokenLockDuration);\r\n        totalLockedAmount = totalParticipationAmount;\r\n        emit GameLocked(block.number);\r\n    }\r\n    \r\n    /**\r\n     * Method for manually Locking fiunds\r\n     **/\r\n    function manualLockFunds() public onlyOwner{\r\n        require(totalParticipationAmount != 0);\r\n        require(CreditGAMEInterface(creditGameAddress).isGameApproved(address(this)) == true);\r\n        require(gameState == state.closed);\r\n        //pick winner\r\n        pickWinner();\r\n    }\r\n    \r\n    /**\r\n     * To manually allow game locking\r\n     */\r\n    function closeGame() public onlyOwner{\r\n        gameState = state.closed;\r\n    }\r\n    \r\n    /**\r\n     * Method called by participants to unlock and transfer their funds \r\n     * First call to method transfers tokens from game contract to this contractÄ‘\r\n     * Last call to method cleans up the game contract\r\n     **/\r\n    function unlockFunds() public {\r\n        require(gameState == state.closed);\r\n        require(hasParticipated[msg.sender] == true);\r\n        require(hasWithdrawn[msg.sender] == false);\r\n        \r\n        if(fundsTransfered == false){\r\n            require(CreditGAMEInterface(creditGameAddress).checkIfLockCanBeRemoved(address(this)) == true);\r\n            CreditGAMEInterface(creditGameAddress).removeLock();\r\n            fundsTransfered = true;\r\n            emit GameUnlocked(block.number);\r\n        }\r\n        \r\n        hasWithdrawn[msg.sender] = true;\r\n        uint index = participantIndexes[msg.sender];\r\n        uint amount = participationAmount[index];\r\n        IERC20Token(tokenAddress).transfer(msg.sender, amount);\r\n        totalLockedAmount = IERC20Token(tokenAddress).balanceOf(address(this));\r\n        if(totalLockedAmount == 0){\r\n            gameState = state.claimed;\r\n            CreditGAMEInterface(creditGameAddress).cleanUp();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Check internall balance of this.\r\n     * \r\n     **/\r\n    function checkInternalBalance() public view returns(uint256 tokenBalance) {\r\n        return IERC20Token(tokenAddress).balanceOf(address(this));\r\n    }\r\n    \r\n    /**\r\n     * Implemented token interface to transfer tokens to this.\r\n     * \r\n     **/\r\n    function receiveApproval(address _from, uint256 _value, address _to, bytes _extraData) public {\r\n        require(_to == tokenAddress);\r\n        require(_value == leafPrice);\r\n        require(gameState != state.closed);\r\n        //check if game approved;\r\n        require(CreditGAMEInterface(creditGameAddress).isGameApproved(address(this)) == true);\r\n\r\n        uint tokensToTake = processTransaction(_from, _value);\r\n        IERC20Token(tokenAddress).transferFrom(_from, address(this), tokensToTake);\r\n    }\r\n\r\n    /**\r\n     * Calibrate game state and take tokens.\r\n     * \r\n     **/\r\n    function processTransaction(address _from, uint _value) internal returns (uint) {\r\n        require(gameStart <= block.number);\r\n        \r\n        uint valueToProcess = 0;\r\n        \r\n        if(gameStart <= block.number && gameDuration >= block.number){\r\n            if(gameState != state.running){\r\n                gameState = state.running;\r\n                emit GameStarted(block.number);\r\n            }\r\n            // take tokens\r\n            leafOwners[numberOfLeafs] = _from;\r\n            numberOfLeafs++;\r\n            totalParticipationAmount += _value;\r\n            \r\n            //check if contributed before\r\n            if(hasParticipated[_from] == false){\r\n                hasParticipated[_from] = true;\r\n                \r\n                participants[participantIndex] = _from;\r\n                participationAmount[participantIndex] = _value;\r\n                participantIndexes[_from] = participantIndex;\r\n                participantIndex++;\r\n            }else{\r\n                uint index = participantIndexes[_from];\r\n                participationAmount[index] = participationAmount[index] + _value;\r\n            }\r\n            \r\n            valueToProcess = _value;\r\n            return valueToProcess;\r\n        //If block.number over game duration, pick winner\r\n        }else if(gameDuration < block.number){\r\n            gameState = state.finished;\r\n            pickWinner();\r\n            return valueToProcess;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return all variables needed for dapp in a single call\r\n     * \r\n     **/\r\n    function getVariablesForDapp() public view returns(uint, uint, uint, uint, uint, uint, state){\r\n      return(leafPrice, gameStart, gameDuration, tokenLockDuration, totalParticipationAmount, numberOfLeafs, gameState);\r\n    }\r\n\r\n    /**\r\n     * Manually send tokens to this.\r\n     * \r\n     **/\r\n    function manuallyProcessTransaction(address _from, uint _value) onlyOwner public {\r\n        require(_value == leafPrice);\r\n        require(IERC20Token(tokenAddress).balanceOf(address(this)) >= _value + totalParticipationAmount);\r\n\r\n        if(gameState == state.running && block.number < gameDuration){\r\n            uint tokensToTake = processTransaction(_from, _value);\r\n            IERC20Token(tokenAddress).transferFrom(_from, address(this), tokensToTake);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Salvage tokens from this.\r\n     * \r\n     **/\r\n    function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner public {\r\n        require(_tokenAddress != tokenAddress);\r\n        IERC20Token(_tokenAddress).transfer(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * Kill contract if needed\r\n     * \r\n     **/\r\n    function killContract() onlyOwner public {\r\n      selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalLockedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creditGameAddress\",\"type\":\"address\"}],\"name\":\"setCreditGameAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participationAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkInternalBalance\",\"outputs\":[{\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVariablesForDapp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manualLockFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsTransfered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"participantIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfLeafs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditGameAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvageTokensFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalParticipationAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasParticipated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leafOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"manuallyProcessTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenLockDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leafPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantIndexes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_leafPrice\",\"type\":\"uint256\"},{\"name\":\"_gameStart\",\"type\":\"uint256\"},{\"name\":\"_gameDuration\",\"type\":\"uint256\"},{\"name\":\"_tokenLockDuration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"GameWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"GameEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"GameFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"GameLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"GameUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"LuckyTree","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000579fc6000000000000000000000000000000000000000000000000000000000058dac6000000000000000000000000000000000000000000000000000000000002bf20","Library":"","SwarmSource":"bzzr://79760a49c3fa4c0811fedfcc9fc97564cbf3db51cb882f8df6bf1eff7ee2060e"}]}