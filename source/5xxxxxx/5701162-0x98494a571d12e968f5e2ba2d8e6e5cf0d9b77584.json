{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Zhoan {\r\n    string public token_name;\r\n    \r\n    //contract admin's address\r\n    address private admin_add;\r\n    //decimal setting\r\n    uint8 private decimals = 18;\r\n    //new user can get money when first register\r\n    uint private present_money=0;\r\n    //the circulation limit of token\r\n    uint256 private max_circulation;\r\n    \r\n    //transfer event\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    //save the msg of contract_users\r\n    mapping(address => uint) public contract_users;\r\n    \r\n    // constructor\r\n    constructor(uint limit,string symbol) public {\r\n        admin_add=msg.sender;\r\n        max_circulation=limit * 10 ** uint256(decimals);\r\n        contract_users[admin_add]=max_circulation;\r\n        token_name = symbol;\r\n    }\r\n    \r\n    //for admin user to change present_money\r\n    function setPresentMoney (uint money) public{\r\n        address opt_user=msg.sender;\r\n        if(opt_user == admin_add){\r\n            present_money = money;\r\n        }\r\n    }\r\n    \r\n    //add new user to contract\r\n    function addNewUser(address newUser) public{\r\n        address opt_user=msg.sender;\r\n        if(opt_user == admin_add){\r\n            transfer_opt(admin_add,newUser,present_money);\r\n        }\r\n    }\r\n    \r\n    //transfer action between users\r\n    function userTransfer(address from,address to,uint256 value) public{\r\n        transfer_opt(from,to,value);\r\n    }\r\n    \r\n    //admin account transfer money to users\r\n    function adminSendMoneyToUser(address to,uint256 value) public{\r\n        address opt_add=msg.sender;\r\n        if(opt_add == admin_add){\r\n            transfer_opt(admin_add,to,value);\r\n        }\r\n    }\r\n    \r\n    //burn account hold money\r\n    function burnAccountMoeny(address add,uint256 value) public{\r\n        address opt_add=msg.sender;\r\n        require(opt_add == admin_add);\r\n        require(contract_users[add]>value);\r\n        \r\n        contract_users[add]-=value;\r\n        max_circulation -=value;\r\n    }\r\n\r\n    //util for excute transfer action\r\n    function transfer_opt(address from,address to,uint value) private{\r\n        //sure target no be 0x0\r\n        require(to != 0x0);\r\n        //check balance of sender\r\n        require(contract_users[from] >= value);\r\n        //sure the amount of the transfer is greater than 0\r\n        require(contract_users[to] + value >= contract_users[to]);\r\n        \r\n        uint previousBalances = contract_users[from] + contract_users[to];\r\n        contract_users[from] -= value;\r\n        contract_users[to] += value;\r\n        \r\n        emit Transfer(from,to,value);\r\n        \r\n        assert(contract_users[from] + contract_users[to] == previousBalances);\r\n    }\r\n    \r\n    //view balance\r\n    function queryBalance(address add) public view returns(uint){\r\n        return contract_users[add];\r\n    }\r\n    \r\n    //view surplus\r\n    function surplus() public view returns(uint,uint){\r\n        return (contract_users[admin_add],max_circulation);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"userTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contract_users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"surplus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"}],\"name\":\"queryBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnAccountMoeny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"adminSendMoneyToUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"money\",\"type\":\"uint256\"}],\"name\":\"setPresentMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newUser\",\"type\":\"address\"}],\"name\":\"addNewUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"},{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Zhoan","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000989680000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000055a484f414e000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://1c83da0305c5911f70ab4cb99b22b49e4ad29542db19232910c637c1d0175d4c"}]}