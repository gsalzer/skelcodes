{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract MultiOwnable {\r\n  // FIELDS ========================\r\n\r\n  bool public isLocked;\r\n\r\n  address public owner1;\r\n  address public owner2;\r\n\r\n  // the ongoing operations.\r\n  mapping(bytes32 => PendingState) public m_pending;\r\n\r\n  // TYPES\r\n\r\n  // struct for the status of a pending operation.\r\n  struct PendingState {\r\n    bool confirmation1;\r\n    bool confirmation2;\r\n    uint exists; // used to know if array exists, solidity is strange\r\n  }\r\n\r\n  // EVENTS\r\n\r\n  event Confirmation(address owner, bytes32 operation);\r\n  event Revoke(address owner, bytes32 operation);\r\n  event ConfirmationNeeded(bytes32 operation, address from, uint value, address to);\r\n\r\n  modifier onlyOwner {\r\n    require(isOwner(msg.sender));\r\n    _;\r\n  }\r\n\r\n  modifier onlyManyOwners(bytes32 _operation) {\r\n    if (confirmAndCheck(_operation))\r\n      _;\r\n  }\r\n\r\n  modifier onlyIfUnlocked {\r\n    require(!isLocked);\r\n    _;\r\n  }\r\n\r\n\r\n  // constructor is given number of sigs required to do protected \"onlyManyOwners\" transactions\r\n  // as well as the selection of addresses capable of confirming them.\r\n  constructor(address _owner1, address _owner2) public {\r\n    require(_owner1 != address(0));\r\n    require(_owner2 != address(0));\r\n\r\n    owner1 = _owner1;\r\n    owner2 = _owner2;\r\n    isLocked = true;\r\n  }\r\n\r\n  function unlock() public onlyOwner {\r\n    isLocked = false;\r\n  }\r\n\r\n  // Revokes a prior confirmation of the given operation\r\n  function revoke(bytes32 _operation) external onlyOwner {\r\n    emit Revoke(msg.sender, _operation);\r\n    delete m_pending[_operation];\r\n  }\r\n\r\n  function isOwner(address _addr) public view returns (bool) {\r\n    return _addr == owner1 || _addr == owner2;\r\n  }\r\n\r\n  function hasConfirmed(bytes32 _operation, address _owner)\r\n    constant public onlyOwner\r\n    returns (bool) {\r\n\r\n    if (_owner == owner1) {\r\n      return m_pending[_operation].confirmation1;\r\n    }\r\n\r\n    if (_owner == owner2) {\r\n      return m_pending[_operation].confirmation2;\r\n    }\r\n  }\r\n\r\n  // INTERNAL METHODS\r\n\r\n  function confirmAndCheck(bytes32 _operation)\r\n    internal onlyOwner\r\n    returns (bool) {\r\n\r\n    // Confirmation doesn't exists so create it\r\n    if (m_pending[_operation].exists == 0) {\r\n      if (msg.sender == owner1) { m_pending[_operation].confirmation1 = true; }\r\n      if (msg.sender == owner2) { m_pending[_operation].confirmation2 = true; }\r\n      m_pending[_operation].exists = 1;\r\n\r\n      // early exit\r\n      return false;\r\n    }\r\n\r\n    // already confirmed\r\n    if (msg.sender == owner1 && m_pending[_operation].confirmation1 == true) {\r\n      return false;\r\n    }\r\n\r\n    // already confirmed\r\n    if (msg.sender == owner2 && m_pending[_operation].confirmation2 == true) {\r\n      return false;\r\n    }\r\n\r\n    if (msg.sender == owner1) {\r\n      m_pending[_operation].confirmation1 = true;\r\n    }\r\n\r\n    if (msg.sender == owner2) {\r\n      m_pending[_operation].confirmation2 = true;\r\n    }\r\n\r\n    // final verification\r\n    return m_pending[_operation].confirmation1 && m_pending[_operation].confirmation2;\r\n  }\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n  function totalSupply() public constant returns (uint);\r\n  function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n  function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and a\r\n// fixed supply\r\n// ----------------------------------------------------------------------------\r\n\r\n/* contract Goldchain is ERC20Interface, Owned { */\r\ncontract TruGold is ERC20Interface, MultiOwnable {\r\n  using SafeMath for uint;\r\n\r\n  string public symbol;\r\n  string public  name;\r\n  uint8 public decimals;\r\n  uint _totalSupply;\r\n\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping(address => uint)) allowed;\r\n  mapping (bytes32 => Transaction) public pendingTransactions; // pending transactions we have at present.\r\n\r\n  struct Transaction {\r\n    address from;\r\n    address to;\r\n    uint value;\r\n  }\r\n\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Constructor\r\n  // ------------------------------------------------------------------------\r\n  constructor(address target, address _owner1, address _owner2)\r\n    MultiOwnable(_owner1, _owner2) public {\r\n    symbol = \"TruGold\";\r\n    name = \"TruGold\";\r\n    decimals = 18;\r\n    _totalSupply = 300000000 * 10**uint(decimals);\r\n    balances[target] = _totalSupply;\r\n\r\n    emit Transfer(address(0), target, _totalSupply);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Total supply\r\n  // ------------------------------------------------------------------------\r\n  function totalSupply() public view returns (uint) {\r\n    return _totalSupply.sub(balances[address(0)]);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Get the token balance for account `tokenOwner`\r\n  // ------------------------------------------------------------------------\r\n  function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n    return balances[tokenOwner];\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Transfer the balance from token owner's account to `to` account\r\n  // - Owner's account must have sufficient balance to transfer\r\n  // - 0 value transfers are allowed\r\n  // ------------------------------------------------------------------------\r\n  /* function transfer(address to, uint tokens) public onlyOwnerIfLocked returns (bool success) { */\r\n  function transfer(address to, uint tokens)\r\n    public\r\n    onlyIfUnlocked\r\n    returns (bool success) {\r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n\r\n    emit Transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n\r\n  function ownerTransfer(address from, address to, uint value)\r\n    public onlyOwner\r\n    returns (bytes32 operation) {\r\n\r\n    operation = keccak256(abi.encodePacked(msg.data, block.number));\r\n\r\n    if (!approveOwnerTransfer(operation) && pendingTransactions[operation].to == 0) {\r\n      pendingTransactions[operation].from = from;\r\n      pendingTransactions[operation].to = to;\r\n      pendingTransactions[operation].value = value;\r\n\r\n      emit ConfirmationNeeded(operation, from, value, to);\r\n    }\r\n\r\n    return operation;\r\n  }\r\n\r\n  function approveOwnerTransfer(bytes32 operation)\r\n    public\r\n    onlyManyOwners(operation)\r\n    returns (bool success) {\r\n\r\n    // find transaction in storage\r\n    Transaction storage transaction = pendingTransactions[operation];\r\n\r\n    // update balances accordingly\r\n    balances[transaction.from] = balances[transaction.from].sub(transaction.value);\r\n    balances[transaction.to] = balances[transaction.to].add(transaction.value);\r\n\r\n    // delete current transaction\r\n    delete pendingTransactions[operation];\r\n\r\n    emit Transfer(transaction.from, transaction.to, transaction.value);\r\n\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n  // from the token owner's account\r\n  //\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n  // recommends that there are no checks for the approval double-spend attack\r\n  // as this should be implemented in user interfaces\r\n  // ------------------------------------------------------------------------\r\n  function approve(address spender, uint tokens) public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Transfer `tokens` from the `from` account to the `to` account\r\n  //\r\n  // The calling account must already have sufficient tokens approve(...)-d\r\n  // for spending from the `from` account and\r\n  // - From account must have sufficient balance to transfer\r\n  // - Spender must have sufficient allowance to transfer\r\n  // - 0 value transfers are allowed\r\n  // ------------------------------------------------------------------------\r\n  function transferFrom(address from, address to, uint tokens) public onlyIfUnlocked returns (bool success) {\r\n    balances[from] = balances[from].sub(tokens);\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n\r\n    emit Transfer(from, to, tokens);\r\n\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Returns the amount of tokens approved by the owner that can be\r\n  // transferred to the spender's account\r\n  // ------------------------------------------------------------------------\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n  // from the token owner's account. The `spender` contract function\r\n  // `receiveApproval(...)` is then executed\r\n  // ------------------------------------------------------------------------\r\n  function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Don't accept ETH\r\n  // ------------------------------------------------------------------------\r\n  function () public payable {\r\n    revert();\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Owner can transfer out any accidentally sent ERC20 tokens\r\n  // ------------------------------------------------------------------------\r\n  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n      return ERC20Interface(tokenAddress).transfer(owner1, tokens);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"m_pending\",\"outputs\":[{\"name\":\"confirmation1\",\"type\":\"bool\"},{\"name\":\"confirmation2\",\"type\":\"bool\"},{\"name\":\"exists\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"approveOwnerTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingTransactions\",\"outputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ownerTransfer\",\"outputs\":[{\"name\":\"operation\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"hasConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"_owner1\",\"type\":\"address\"},{\"name\":\"_owner2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConfirmationNeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TruGold","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a748ff64a52ff9e4b010c14f9c620efdcf45d619000000000000000000000000ba8ec774f56c7220c66d4de273db00646a2804fd00000000000000000000000025d24eb1925cb190920e257e6a88e15ca3e029ce","Library":"","SwarmSource":"bzzr://1ba34aa18c40bd08945e82bcde26f2449831ac884391165ef10e12179d0b1031"}]}