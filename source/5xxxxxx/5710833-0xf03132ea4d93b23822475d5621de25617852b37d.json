{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/TokenVesting.sol\r\n\r\n/**\r\n * @title Vesting contract for SDT\r\n * @dev see https://send.sd/token\r\n */\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  address public ico;\r\n  bool public initialized;\r\n  bool public active;\r\n  ERC20Basic public token;\r\n  mapping (address => TokenGrant[]) public grants;\r\n\r\n  uint256 public circulatingSupply = 0;\r\n\r\n  struct TokenGrant {\r\n    uint256 value;\r\n    uint256 claimed;\r\n    uint256 vesting;\r\n    uint256 start;\r\n  }\r\n\r\n  event NewTokenGrant (\r\n    address indexed to,\r\n    uint256 value,\r\n    uint256 start,\r\n    uint256 vesting\r\n  );\r\n\r\n  event NewTokenClaim (\r\n    address indexed holder,\r\n    uint256 value\r\n  );\r\n\r\n  modifier icoResticted() {\r\n    require(msg.sender == ico);\r\n    _;\r\n  }\r\n\r\n  modifier isActive() {\r\n    require(active);\r\n    _;\r\n  }\r\n\r\n  function TokenVesting() public {\r\n    active = false;\r\n  }\r\n\r\n  function init(address _token, address _ico) public onlyOwner {\r\n    token = ERC20Basic(_token);\r\n    ico = _ico;\r\n    initialized = true;\r\n    active = true;\r\n  }\r\n\r\n  function stop() public isActive onlyOwner {\r\n    active = false;\r\n  }\r\n\r\n  function resume() public onlyOwner {\r\n    require(!active);\r\n    require(initialized);\r\n    active = true;\r\n  }\r\n\r\n  /**\r\n  * @dev Grant vested tokens.\r\n  * @notice Only for ICO contract address.\r\n  * @param _to Addres to grant tokens to.\r\n  * @param _value Number of tokens granted.\r\n  * @param _vesting Vesting finish timestamp.\r\n  * @param _start Vesting start timestamp.\r\n  */\r\n  function grantVestedTokens(\r\n      address _to,\r\n      uint256 _value,\r\n      uint256 _start,\r\n      uint256 _vesting\r\n  ) public icoResticted isActive {\r\n    require(_value > 0);\r\n    require(_vesting > _start);\r\n    require(grants[_to].length < 10);\r\n\r\n    TokenGrant memory grant = TokenGrant(_value, 0, _vesting, _start);\r\n    grants[_to].push(grant);\r\n\r\n    NewTokenGrant(_to, _value, _start, _vesting);\r\n  }\r\n\r\n  /**\r\n  * @dev Claim all vested tokens up to current date for myself\r\n  */\r\n  function claimTokens() public {\r\n    claim(msg.sender);\r\n  }\r\n\r\n  /**\r\n  * @dev Claim all vested tokens up to current date in behaviour of an user\r\n  * @param _to address Addres to claim tokens\r\n  */\r\n  function claimTokensFor(address _to) public onlyOwner {\r\n    claim(_to);\r\n  }\r\n\r\n  /**\r\n  * @dev Get claimable tokens\r\n  */\r\n  function claimableTokens() public constant returns (uint256) {\r\n    address _to = msg.sender;\r\n    uint256 numberOfGrants = grants[_to].length;\r\n\r\n    if (numberOfGrants == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 claimable = 0;\r\n    uint256 claimableFor = 0;\r\n    for (uint256 i = 0; i < numberOfGrants; i++) {\r\n      claimableFor = calculateVestedTokens(\r\n        grants[_to][i].value,\r\n        grants[_to][i].vesting,\r\n        grants[_to][i].start,\r\n        grants[_to][i].claimed\r\n      );\r\n      claimable = claimable.add(claimableFor);\r\n    }\r\n    return claimable;\r\n  }\r\n\r\n  /**\r\n  * @dev Get all veted tokens\r\n  */\r\n  function totalVestedTokens() public constant returns (uint256) {\r\n    address _to = msg.sender;\r\n    uint256 numberOfGrants = grants[_to].length;\r\n\r\n    if (numberOfGrants == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 claimable = 0;\r\n    for (uint256 i = 0; i < numberOfGrants; i++) {\r\n      claimable = claimable.add(\r\n        grants[_to][i].value.sub(grants[_to][i].claimed)\r\n      );\r\n    }\r\n    return claimable;\r\n  }\r\n\r\n  /**\r\n  * @dev Calculate vested claimable tokens on current time\r\n  * @param _tokens Number of tokens granted\r\n  * @param _vesting Vesting finish timestamp\r\n  * @param _start Vesting start timestamp\r\n  * @param _claimed Number of tokens already claimed\r\n  */\r\n  function calculateVestedTokens(\r\n      uint256 _tokens,\r\n      uint256 _vesting,\r\n      uint256 _start,\r\n      uint256 _claimed\r\n  ) internal constant returns (uint256) {\r\n    uint256 time = block.timestamp;\r\n\r\n    if (time < _start) {\r\n      return 0;\r\n    }\r\n\r\n    if (time >= _vesting) {\r\n      return _tokens.sub(_claimed);\r\n    }\r\n\r\n    uint256 vestedTokens = _tokens.mul(time.sub(_start)).div(\r\n      _vesting.sub(_start)\r\n    );\r\n\r\n    return vestedTokens.sub(_claimed);\r\n  }\r\n\r\n  /**\r\n  * @dev Claim all vested tokens up to current date\r\n  */\r\n  function claim(address _to) internal {\r\n    uint256 numberOfGrants = grants[_to].length;\r\n\r\n    if (numberOfGrants == 0) {\r\n      return;\r\n    }\r\n\r\n    uint256 claimable = 0;\r\n    uint256 claimableFor = 0;\r\n    for (uint256 i = 0; i < numberOfGrants; i++) {\r\n      claimableFor = calculateVestedTokens(\r\n        grants[_to][i].value,\r\n        grants[_to][i].vesting,\r\n        grants[_to][i].start,\r\n        grants[_to][i].claimed\r\n      );\r\n      claimable = claimable.add(claimableFor);\r\n      grants[_to][i].claimed = grants[_to][i].claimed.add(claimableFor);\r\n    }\r\n\r\n    token.transfer(_to, claimable);\r\n    circulatingSupply += claimable;\r\n\r\n    NewTokenClaim(_to, claimable);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grants\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"claimed\",\"type\":\"uint256\"},{\"name\":\"vesting\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_vesting\",\"type\":\"uint256\"}],\"name\":\"grantVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokensFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_ico\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"vesting\",\"type\":\"uint256\"}],\"name\":\"NewTokenGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewTokenClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenVesting","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://97ac02b228781fd150220b8095f0a090ccc8b5e19bdcb5fb40d702780ffbbb10"}]}