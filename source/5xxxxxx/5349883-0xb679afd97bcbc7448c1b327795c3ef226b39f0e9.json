{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\ncontract owned {\r\naddress public owner;\r\n\r\nfunction owned() {\r\n    owner = msg.sender;\r\n}\r\n\r\nmodifier onlyOwner {\r\n    if (msg.sender != owner) throw;\r\n    _;\r\n}\r\n\r\nfunction transferOwnership(address newOwner) onlyOwner {\r\n    owner = newOwner;\r\n}\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract token {\r\n/* Public variables of the token */\r\nstring public standard = 'Token 0.1';\r\nstring public name;\r\nstring public symbol;\r\nuint8 public decimals;\r\nuint256 public totalSupply;\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n/* This creates an array with all balances */\r\nmapping (address => uint256) public balanceOf;\r\nmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n/* This generates a public event on the blockchain that will notify clients */\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n/* Initializes contract with initial supply tokens to the creator of the contract */\r\nfunction token(\r\n    uint256 initialSupply,\r\n    string tokenName,\r\n    uint8 decimalUnits,\r\n    string tokenSymbol\r\n    ) {\r\n    balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n    totalSupply = initialSupply;                        // Update total supply\r\n    name = tokenName;                                   // Set the name for display purposes\r\n    symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n    decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n}\r\n\r\n/* Send coins */\r\nfunction transfer(address _to, uint256 _value) {\r\n    if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\r\n    if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n    balanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n    balanceOf[_to] += _value;                            // Add the same to the recipient\r\n    Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n}\r\n\r\n/* Allow another contract to spend some tokens in your behalf */\r\nfunction approve(address _spender, uint256 _value)\r\n    returns (bool success) {\r\n    allowance[msg.sender][_spender] = _value;\r\n    return true;\r\n}\r\n\r\n/* Approve and then communicate the approved contract in a single tx */\r\nfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n    returns (bool success) {    \r\n    tokenRecipient spender = tokenRecipient(_spender);\r\n    if (approve(_spender, _value)) {\r\n        spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n        return true;\r\n    }\r\n}\r\n\r\n/* A contract attempts to get the coins */\r\nfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\r\n    if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\r\n    if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\r\n    balanceOf[_from] -= _value;                          // Subtract from the sender\r\n    balanceOf[_to] += _value;                            // Add the same to the recipient\r\n    allowance[_from][msg.sender] -= _value;\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n}\r\n\r\n/* This unnamed function is called whenever someone tries to send ether to it */\r\nfunction () {\r\n    throw;     // Prevents accidental sending of ether\r\n}\r\n}\r\n\r\ncontract MyAdvancedToken is owned, token {\r\n\r\nuint256 public sellPrice;\r\nuint256 public buyPrice;\r\n\r\nmapping (address => bool) public frozenAccount;\r\n\r\n/* This generates a public event on the blockchain that will notify clients */\r\nevent FrozenFunds(address target, bool frozen);\r\n\r\n/* Initializes contract with initial supply tokens to the creator of the contract */\r\nfunction MyAdvancedToken(\r\n    uint256 initialSupply,\r\n    string tokenName,\r\n    uint8 decimalUnits,\r\n    string tokenSymbol\r\n) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}\r\n\r\n/* Send coins */\r\nfunction transfer(address _to, uint256 _value) {\r\n    if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\r\n    if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n    if (frozenAccount[msg.sender]) throw;                // Check if frozen\r\n    balanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n    balanceOf[_to] += _value;                            // Add the same to the recipient\r\n    Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n}\r\n\r\n\r\n/* A contract attempts to get the coins */\r\nfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    if (frozenAccount[_from]) throw;                        // Check if frozen            \r\n    if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\r\n    if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\r\n    if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\r\n    balanceOf[_from] -= _value;                          // Subtract from the sender\r\n    balanceOf[_to] += _value;                            // Add the same to the recipient\r\n    allowance[_from][msg.sender] -= _value;\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n}\r\n\r\nfunction mintToken(address target, uint256 mintedAmount) onlyOwner {\r\n    balanceOf[target] += mintedAmount;\r\n    totalSupply += mintedAmount;\r\n    Transfer(0, this, mintedAmount);\r\n    Transfer(this, target, mintedAmount);\r\n}\r\n\r\nfunction freezeAccount(address target, bool freeze) onlyOwner {\r\n    frozenAccount[target] = freeze;\r\n    FrozenFunds(target, freeze);\r\n}\r\nfunction unfreezeAccount(address target, bool freeze) onlyOwner {\r\n    frozenAccount[target] = !freeze;\r\n    FrozenFunds(target, !freeze);\r\n}\r\n\r\n\r\nfunction setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\r\n    sellPrice = newSellPrice;\r\n    buyPrice = newBuyPrice;\r\n}\r\n\r\nfunction buy() payable {\r\n    uint amount = msg.value / buyPrice;                // calculates the amount\r\n    if (balanceOf[this] < amount) throw;               // checks if it has enough to sell\r\n    balanceOf[msg.sender] += amount;                   // adds the amount to buyer's balance\r\n    balanceOf[this] -= amount;                         // subtracts amount from seller's balance\r\n    Transfer(this, msg.sender, amount);                // execute an event reflecting the change\r\n}\r\n\r\nfunction sell(uint256 amount) {\r\n    if (balanceOf[msg.sender] < amount ) throw;        // checks if the sender has enough to sell\r\n    balanceOf[this] += amount;                         // adds the amount to owner's balance\r\n    balanceOf[msg.sender] -= amount;                   // subtracts the amount from seller's balance\r\n    if (!msg.sender.send(amount * sellPrice)) {        // sends ether to the seller. It's important\r\n        throw;                                         // to do this last to avoid recursion attacks\r\n    } else {\r\n        Transfer(msg.sender, this, amount);            // executes an event reflecting on the change\r\n    }               \r\n}\r\n    \r\n    function burn(uint256 _value) public returns (bool success) {        \r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(msg.sender, _value);        \r\n        return true;\r\n    }\r\n    \r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {        \r\n        require(balanceOf[_from] >= _value);\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        balanceOf[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(_from, _value);        \r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"unfreezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MyAdvancedToken","CompilerVersion":"v0.4.10+commit.f0d539ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000071afd498d00000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000d57696e204c617374204d696c65000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003574c4d0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://5d6e07eb80518f51789558c74572547efb74b6af2d6f04cfbc061b281d4dbb2b"}]}