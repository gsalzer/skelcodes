{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.19;\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    \r\n   \r\n}\r\n\r\n\r\ncontract CREDITS is Ownable{\r\n    /* Public variables of the token */\r\n    string public name = 'CREDITS';\r\n    string public symbol = 'CS';\r\n    uint8 public decimals = 6;\r\n    uint256 public totalSupply = 1000000000000000;\r\n    uint public TotalHoldersAmount;\r\n    /*Freeze transfer from all accounts */\r\n    bool public Frozen=true;\r\n    bool public CanChange=true;\r\n    address public Admin;\r\n    address public AddressForReturn;\r\n    address[] Accounts;\r\n    /* This creates an array with all balances */\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n   /*Individual Freeze*/\r\n    mapping(address => bool) public AccountIsFrozen;\r\n    /*Allow transfer for ICO, Admin accounts if IsFrozen==true*/\r\n    mapping(address => bool) public AccountIsNotFrozen;\r\n   /*Allow transfer tokens only to ReturnWallet*/\r\n    mapping(address => bool) public AccountIsNotFrozenForReturn;\r\n    mapping(address => uint) public AccountIsFrozenByDate;\r\n    \r\n    mapping (address => bool) public isHolder;\r\n    mapping (address => bool) public isArrAccountIsFrozen;\r\n    mapping (address => bool) public isArrAccountIsNotFrozen;\r\n    mapping (address => bool) public isArrAccountIsNotFrozenForReturn;\r\n    mapping (address => bool) public isArrAccountIsFrozenByDate;\r\n    address [] public Arrholders;\r\n    address [] public ArrAccountIsFrozen;\r\n    address [] public ArrAccountIsNotFrozen;\r\n    address [] public ArrAccountIsNotFrozenForReturn;\r\n    address [] public ArrAccountIsFrozenByDate;\r\n   \r\n    \r\n    \r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Burn(address indexed from, uint256 value);\r\n    \r\n    modifier IsNotFrozen{\r\n      require(((!Frozen&&AccountIsFrozen[msg.sender]!=true)||((Frozen)&&AccountIsNotFrozen[msg.sender]==true))&&now>AccountIsFrozenByDate[msg.sender]);\r\n      _;\r\n     }\r\n     \r\n     modifier isCanChange{\r\n      require((msg.sender==owner||msg.sender==Admin)&&CanChange==true);\r\n      _;\r\n     }\r\n     \r\n     \r\n     \r\n     \r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n   \r\n  function CREDITS() public {\r\n        balanceOf[msg.sender] = totalSupply;\r\n        Arrholders[Arrholders.length++]=msg.sender;\r\n        Admin=msg.sender;\r\n    }\r\n    \r\n     function setAdmin(address _address) public onlyOwner{\r\n        require(CanChange);\r\n        Admin=_address;\r\n    }\r\n    \r\n   function setFrozen(bool _Frozen)public onlyOwner{\r\n      require(CanChange);\r\n      Frozen=_Frozen;\r\n    }\r\n    \r\n    function setCanChange(bool _canChange)public onlyOwner{\r\n      require(CanChange);\r\n      CanChange=_canChange;\r\n    }\r\n    \r\n    function setAccountIsFrozen(address _address, bool _IsFrozen)public isCanChange{\r\n     AccountIsFrozen[_address]=_IsFrozen;\r\n     if (isArrAccountIsFrozen[_address] != true) {\r\n        ArrAccountIsFrozen[ArrAccountIsFrozen.length++] = _address;\r\n        isArrAccountIsFrozen[_address] = true;\r\n    }\r\n    }\r\n    \r\n    function setAccountIsNotFrozen(address _address, bool _IsFrozen)public isCanChange{\r\n     AccountIsNotFrozen[_address]=_IsFrozen;\r\n     if (isArrAccountIsNotFrozen[_address] != true) {\r\n        ArrAccountIsNotFrozen[ArrAccountIsNotFrozen.length++] = _address;\r\n        isArrAccountIsNotFrozen[_address] = true;\r\n    }\r\n    }\r\n    \r\n    function setAccountIsNotFrozenForReturn(address _address, bool _IsFrozen)public isCanChange{\r\n     AccountIsNotFrozenForReturn[_address]=_IsFrozen;\r\n      if (isArrAccountIsNotFrozenForReturn[_address] != true) {\r\n        ArrAccountIsNotFrozenForReturn[ArrAccountIsNotFrozenForReturn.length++] = _address;\r\n        isArrAccountIsNotFrozenForReturn[_address] = true;\r\n    }\r\n    }\r\n    \r\n    function setAccountIsFrozenByDate(address _address, uint _Date)public isCanChange{\r\n    \r\n        require (!isArrAccountIsFrozenByDate[_address]);\r\n        AccountIsFrozenByDate[_address]=_Date;\r\n        ArrAccountIsFrozenByDate[ArrAccountIsFrozenByDate.length++] = _address;\r\n        isArrAccountIsFrozenByDate[_address] = true;\r\n    \r\n    }\r\n    \r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) public  {\r\n        require(((!Frozen&&AccountIsFrozen[msg.sender]!=true)||((Frozen)&&AccountIsNotFrozen[msg.sender]==true)||(AccountIsNotFrozenForReturn[msg.sender]==true&&_to==AddressForReturn))&&now>AccountIsFrozenByDate[msg.sender]);\r\n        require(balanceOf[msg.sender] >= _value); // Check if the sender has enough\r\n        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\r\n        balanceOf[msg.sender] -= _value; // Subtract from the sender\r\n        balanceOf[_to] += _value; // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n        if (isHolder[_to] != true) {\r\n        Arrholders[Arrholders.length++] = _to;\r\n        isHolder[_to] = true;\r\n    }}\r\n    \r\n  \r\n \r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value)public\r\n    returns(bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n   \r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value)public IsNotFrozen returns(bool success)  {\r\n        require(((!Frozen&&AccountIsFrozen[_from]!=true)||((Frozen)&&AccountIsNotFrozen[_from]==true))&&now>AccountIsFrozenByDate[_from]);\r\n        require (balanceOf[_from] >= _value) ; // Check if the sender has enough\r\n        require (balanceOf[_to] + _value >= balanceOf[_to]) ; // Check for overflows\r\n        require (_value <= allowance[_from][msg.sender]) ; // Check allowance\r\n        balanceOf[_from] -= _value; // Subtract from the sender\r\n        balanceOf[_to] += _value; // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        if (isHolder[_to] != true) {\r\n        Arrholders[Arrholders.length++] = _to;\r\n        isHolder[_to] = true;\r\n        }\r\n        return true;\r\n    }\r\n /* @param _value the amount of money to burn*/\r\n   \r\n    function burn(uint256 _value) public IsNotFrozen  returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n     /* Destroy tokens from other account  */\r\n   \r\n    function burnFrom(address _from, uint256 _value) public IsNotFrozen returns (bool success) {\r\n        require(((!Frozen&&AccountIsFrozen[_from]!=true)||((Frozen)&&AccountIsNotFrozen[_from]==true))&&now>AccountIsFrozenByDate[_from]);\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n        \r\n   \r\n    \r\n    function GetHoldersCount () public view returns (uint _HoldersCount){\r\n  \r\n         return (Arrholders.length-1);\r\n    }\r\n    \r\n    function GetAccountIsFrozenCount () public view returns (uint _Count){\r\n  \r\n         return (ArrAccountIsFrozen.length);\r\n    }\r\n    \r\n    function GetAccountIsNotFrozenForReturnCount () public view returns (uint _Count){\r\n  \r\n         return (ArrAccountIsNotFrozenForReturn.length);\r\n    }\r\n    \r\n    function GetAccountIsNotFrozenCount () public view returns (uint _Count){\r\n  \r\n         return (ArrAccountIsNotFrozen.length);\r\n    }\r\n    \r\n     function GetAccountIsFrozenByDateCount () public view returns (uint _Count){\r\n  \r\n         return (ArrAccountIsFrozenByDate.length);\r\n    }\r\n     \r\n     function SetAddressForReturn (address _address) public isCanChange  returns (bool success ){\r\n         AddressForReturn=_address;\r\n         return true;\r\n    }\r\n    \r\n    function setSymbol(string _symbol) public onlyOwner {\r\n        require(CanChange);\r\n        symbol = _symbol;\r\n    }\r\n    \r\n    function setName(string _name) public onlyOwner {\r\n        require(CanChange);\r\n        name = _name;\r\n    }\r\n    \r\n    \r\n    /* This unnamed function is called whenever someone tries to send ether to it */\r\n   function () public payable {\r\n         revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ArrAccountIsFrozenByDate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetAccountIsFrozenByDateCount\",\"outputs\":[{\"name\":\"_Count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_IsFrozen\",\"type\":\"bool\"}],\"name\":\"setAccountIsFrozen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ArrAccountIsNotFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Arrholders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetAccountIsNotFrozenCount\",\"outputs\":[{\"name\":\"_Count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isArrAccountIsFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetAddressForReturn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetAccountIsNotFrozenForReturnCount\",\"outputs\":[{\"name\":\"_Count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Frozen\",\"type\":\"bool\"}],\"name\":\"setFrozen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_IsFrozen\",\"type\":\"bool\"}],\"name\":\"setAccountIsNotFrozen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ArrAccountIsFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CanChange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isArrAccountIsNotFrozenForReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetHoldersCount\",\"outputs\":[{\"name\":\"_HoldersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_Date\",\"type\":\"uint256\"}],\"name\":\"setAccountIsFrozenByDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AccountIsNotFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalHoldersAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AddressForReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_IsFrozen\",\"type\":\"bool\"}],\"name\":\"setAccountIsNotFrozenForReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ArrAccountIsNotFrozenForReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AccountIsFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AccountIsNotFrozenForReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetAccountIsFrozenCount\",\"outputs\":[{\"name\":\"_Count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AccountIsFrozenByDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isArrAccountIsNotFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isArrAccountIsFrozenByDate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_canChange\",\"type\":\"bool\"}],\"name\":\"setCanChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"CREDITS","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://591c0c6b31ab2d724c580ec591a21c5500108fdd4dbc73b9dd10a7d968d9cfd9"}]}