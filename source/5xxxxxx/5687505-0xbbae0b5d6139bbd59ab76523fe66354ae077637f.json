{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether there is code in the target address\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address address to check\r\n   * @return whether there is code in the target address\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\npragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\npragma solidity 0.4.21;\r\n\r\n\r\ncontract Restricted is Ownable {\r\n    bool private isActive = true;    \r\n    \r\n    modifier contractIsActive() {\r\n        require(isActive);\r\n        _;\r\n    }\r\n\r\n    function pauseContract() public onlyOwner {\r\n        isActive = false;\r\n    }\r\n\r\n    function activateContract() public onlyOwner {\r\n        isActive = true;\r\n    }\r\n\r\n    function withdrawContract() public onlyOwner {        \r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n}pragma solidity 0.4.21;\r\n\r\n\r\n\r\ncontract EtherPointers is Restricted {\r\n    using AddressUtils for address;\r\n    \r\n    Pointer[15] private pointers;  \r\n    \r\n    uint8 private useIndex = 0;\r\n\r\n    uint256 private expirationTime = 1 hours;\r\n    uint256 private defaultPointerValue = 0.002 ether;\r\n\r\n    struct Pointer {\r\n        bytes32 url;\r\n        byte[64] text;\r\n        uint256 timeOfPurchase;\r\n        address owner;\r\n    }\r\n\r\n    function buyPointer(bytes32 url, byte[64] text) external payable contractIsActive {  \r\n        uint256 requiredPrice = getRequiredPrice();\r\n        uint256 pricePaid = msg.value;\r\n        address sender = msg.sender;\r\n\r\n        require(!sender.isContract());\r\n        require(isPointerExpired(useIndex));\r\n        require(requiredPrice <= pricePaid);\r\n        \r\n        Pointer memory pointer = Pointer(url, text, now, msg.sender);\r\n        pointers[useIndex] = pointer;\r\n        setNewUseIndex();   \r\n    }\r\n\r\n    function getPointer(uint8 index) external view returns(bytes32, byte[64], uint256) {\r\n        return (pointers[index].url, pointers[index].text, pointers[index].timeOfPurchase);\r\n    }\r\n\r\n    function getPointerOwner(uint8 index) external view returns(address) {\r\n        return (pointers[index].owner);\r\n    }\r\n\r\n    function getRequiredPrice() public view returns(uint256) {\r\n        uint8 numOfActivePointers = 0;        \r\n        for (uint8 index = 0; index < pointers.length; index++) {\r\n            if (!isPointerExpired(index)) {\r\n                numOfActivePointers++;\r\n            }                       \r\n        }\r\n\r\n        return defaultPointerValue + defaultPointerValue * numOfActivePointers;\r\n    }\r\n\r\n    function isPointerExpired(uint8 pointerIndex) public view returns(bool) { \r\n        uint256 expireTime = pointers[pointerIndex].timeOfPurchase + expirationTime;\r\n        uint256 currentTime = now;\r\n        return (expireTime < currentTime);\r\n    }  \r\n\r\n    function setNewUseIndex() private {\r\n        useIndex = getNextIndex(useIndex);\r\n    }\r\n\r\n    function getNextIndex(uint8 fromIndex) private pure returns(uint8) {\r\n        uint8 oldestIndex = fromIndex + 1;             \r\n        return oldestIndex % 15;\r\n    }    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"pointerIndex\",\"type\":\"uint8\"}],\"name\":\"isPointerExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"url\",\"type\":\"bytes32\"},{\"name\":\"text\",\"type\":\"bytes1[64]\"}],\"name\":\"buyPointer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequiredPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getPointer\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes1[64]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getPointerOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EtherPointers","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://57539c53c3443036cc8f30dc98b12a899331f7d7c349d0442ec40b50002db1ef"}]}