{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n\r\n  function name() constant returns (string _name);\r\n  function symbol() constant returns (string _symbol);\r\n  function decimals() constant returns (uint8 _decimals);\r\n  function totalSupply() constant returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) returns (bool ok);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\r\n}\r\n\r\ncontract ContractReceiver {\r\n  function tokenFallback(address _from, uint _value, bytes _data);\r\n}\r\n\r\ncontract ERC223Token is ERC223 {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n\r\n\r\n  // Function to access name of token .\r\n  function name() constant returns (string _name) {\r\n      return name;\r\n  }\r\n  // Function to access symbol of token .\r\n  function symbol() constant returns (string _symbol) {\r\n      return symbol;\r\n  }\r\n  // Function to access decimals of token .\r\n  function decimals() constant returns (uint8 _decimals) {\r\n      return decimals;\r\n  }\r\n  // Function to access total supply of tokens .\r\n  function totalSupply() constant returns (uint256 _totalSupply) {\r\n      return totalSupply;\r\n  }\r\n\r\n  // Function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, _data);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n}\r\n\r\n  // Standard function transfer similar to ERC20 transfer with no _data .\r\n  // Added due to backwards compatibility reasons .\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n\r\n    //standard function transfer similar to ERC20 transfer with no _data\r\n    //added due to backwards compatibility reasons\r\n    bytes memory empty;\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, empty);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, empty);\r\n    }\r\n}\r\n\r\n//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) private returns (bool is_contract) {\r\n      uint length;\r\n      assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        if(length>0) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n  //function that is called when transaction target is an address\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    ERC223Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n    ContractReceiver reciever = ContractReceiver(_to);\r\n    reciever.tokenFallback(msg.sender, _value, _data);\r\n    Transfer(msg.sender, _to, _value);\r\n    ERC223Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract CoVEXTokenERC223 is ERC223Token{\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"CoVEX Coin\";\r\n    string public symbol = \"CoVEX\";\r\n    uint256 public decimals = 18;\r\n\r\n    // 250M\r\n    uint256 public totalSupply = 250*1000000 * (uint256(10) ** decimals);\r\n    uint256 public totalRaised; // total ether raised (in wei)\r\n\r\n    uint256 public startTimestamp; // timestamp after which ICO will start\r\n    uint256 public durationSeconds; // 1 month= 1 * 30 * 24 * 60 * 60\r\n\r\n    uint256 public maxCap;\r\n\r\n    uint256 coinsPerETH;\r\n\r\n    mapping(address => uint) etherBalance;\r\n\r\n    mapping(uint => uint) public weeklyRewards;\r\n\r\n    uint256 minPerUser = 0.1 ether;\r\n    uint256 maxPerUser = 100 ether;\r\n\r\n    /**\r\n     * Address which will receive raised funds \r\n     * and owns the total supply of tokens\r\n     */\r\n    address public fundsWallet;\r\n\r\n    function CoVEXTokenERC223() {\r\n        fundsWallet = msg.sender;\r\n        \r\n        startTimestamp = now;\r\n        durationSeconds = 0; //admin can set it later\r\n\r\n        //initially assign all tokens to the fundsWallet\r\n        balances[fundsWallet] = totalSupply;\r\n\r\n        Transfer(0x0, fundsWallet, totalSupply);\r\n    }\r\n\r\n    function() isIcoOpen checkMinMax payable{\r\n        totalRaised = totalRaised.add(msg.value);\r\n\r\n        uint256 tokenAmount = calculateTokenAmount(msg.value);\r\n        balances[fundsWallet] = balances[fundsWallet].sub(tokenAmount);\r\n        balances[msg.sender] = balances[msg.sender].add(tokenAmount);\r\n\r\n        etherBalance[msg.sender] = etherBalance[msg.sender].add(msg.value);\r\n\r\n        Transfer(fundsWallet, msg.sender, tokenAmount);\r\n\r\n        // immediately transfer ether to fundsWallet\r\n        fundsWallet.transfer(msg.value);\r\n    }\r\n\r\n    function calculateTokenAmount(uint256 weiAmount) constant returns(uint256) {\r\n        uint256 tokenAmount = weiAmount.mul(coinsPerETH);\r\n        // setting rewards is possible only for 4 weeks\r\n        for (uint i = 1; i <= 4; i++) {\r\n            if (now <= startTimestamp + (i * 7 days)) {\r\n                return tokenAmount.mul(100+weeklyRewards[i]).div(100);    \r\n            }\r\n        }\r\n        return tokenAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function adminBurn(uint256 _value) public {\r\n      require(_value <= balances[msg.sender]);\r\n      // no need to require value <= totalSupply, since that would imply the\r\n      // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n      address burner = msg.sender;\r\n      balances[burner] = balances[burner].sub(_value);\r\n      totalSupply = totalSupply.sub(_value);\r\n      Transfer(burner, address(0), _value);\r\n    }\r\n\r\n    function adminAddICO(uint256 _startTimestamp, uint256 _durationSeconds, \r\n        uint256 _coinsPerETH, uint256 _maxCap, uint _week1Rewards,\r\n        uint _week2Rewards, uint _week3Rewards, uint _week4Rewards) isOwner{\r\n\r\n        startTimestamp = _startTimestamp;\r\n        durationSeconds = _durationSeconds;\r\n        coinsPerETH = _coinsPerETH;\r\n        maxCap = _maxCap * 1 ether;\r\n\r\n        weeklyRewards[1] = _week1Rewards;\r\n        weeklyRewards[2] = _week2Rewards;\r\n        weeklyRewards[3] = _week3Rewards;\r\n        weeklyRewards[4] = _week4Rewards;\r\n\r\n        // reset totalRaised\r\n        totalRaised = 0;\r\n    }\r\n\r\n    modifier isIcoOpen() {\r\n        require(now >= startTimestamp);\r\n        require(now <= (startTimestamp + durationSeconds));\r\n        require(totalRaised <= maxCap);\r\n        _;\r\n    }\r\n\r\n    modifier checkMinMax(){\r\n      require(msg.value >= minPerUser);\r\n      require(msg.value <= maxPerUser);\r\n      _;\r\n    }\r\n\r\n    modifier isOwner(){\r\n        require(msg.sender == fundsWallet);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"durationSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weeklyRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"name\":\"_durationSeconds\",\"type\":\"uint256\"},{\"name\":\"_coinsPerETH\",\"type\":\"uint256\"},{\"name\":\"_maxCap\",\"type\":\"uint256\"},{\"name\":\"_week1Rewards\",\"type\":\"uint256\"},{\"name\":\"_week2Rewards\",\"type\":\"uint256\"},{\"name\":\"_week3Rewards\",\"type\":\"uint256\"},{\"name\":\"_week4Rewards\",\"type\":\"uint256\"}],\"name\":\"adminAddICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"adminBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC223Transfer\",\"type\":\"event\"}]","ContractName":"CoVEXTokenERC223","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://12d31e5bc4f52ffe836486dd2015a103c5293812e6d5d7da731cd4c666de32da"}]}