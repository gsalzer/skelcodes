{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Raindrop is Ownable {\r\n\r\n  // Event for when an address is authenticated\r\n  event AuthenticateEvent(\r\n      uint partnerId,\r\n      address indexed from,\r\n      uint value\r\n      );\r\n\r\n  // Event for when an address is whitelisted to authenticate\r\n  event WhitelistEvent(\r\n      uint partnerId,\r\n      address target,\r\n      bool whitelist\r\n      );\r\n\r\n  address public hydroContract = 0x0;\r\n\r\n  mapping (uint => mapping (address => bool)) public whitelist;\r\n  mapping (uint => mapping (address => partnerValues)) public partnerMap;\r\n  mapping (uint => mapping (address => hydroValues)) public hydroPartnerMap;\r\n\r\n  struct partnerValues {\r\n      uint value;\r\n      uint challenge;\r\n  }\r\n\r\n  struct hydroValues {\r\n      uint value;\r\n      uint timestamp;\r\n  }\r\n\r\n  function setHydroContractAddress(address _addr) public onlyOwner {\r\n      hydroContract = _addr;\r\n  }\r\n\r\n  /* Function to whitelist partner address. Can only be called by owner */\r\n  function whitelistAddress(address _target, bool _whitelistBool, uint _partnerId) public onlyOwner {\r\n      whitelist[_partnerId][_target] = _whitelistBool;\r\n      emit WhitelistEvent(_partnerId, _target, _whitelistBool);\r\n  }\r\n\r\n  /* Function to authenticate user\r\n     Restricted to whitelisted partners */\r\n  function authenticate(address _sender, uint _value, uint _challenge, uint _partnerId) public {\r\n      require(msg.sender == hydroContract);\r\n      require(whitelist[_partnerId][_sender]);         // Make sure the sender is whitelisted\r\n      require(hydroPartnerMap[_partnerId][_sender].value == _value);\r\n      updatePartnerMap(_sender, _value, _challenge, _partnerId);\r\n      emit AuthenticateEvent(_partnerId, _sender, _value);\r\n  }\r\n\r\n  function checkForValidChallenge(address _sender, uint _partnerId) public view returns (uint value){\r\n      if (hydroPartnerMap[_partnerId][_sender].timestamp > block.timestamp){\r\n          return hydroPartnerMap[_partnerId][_sender].value;\r\n      }\r\n      return 1;\r\n  }\r\n\r\n  /* Function to update the hydroValuesMap. Called exclusively from the Hydro API */\r\n  function updateHydroMap(address _sender, uint _value, uint _partnerId) public onlyOwner {\r\n      hydroPartnerMap[_partnerId][_sender].value = _value;\r\n      hydroPartnerMap[_partnerId][_sender].timestamp = block.timestamp + 1 days;\r\n  }\r\n\r\n  /* Function called by Hydro API to check if the partner has validated\r\n   * The partners value and data must match and it must be less than a day since the last authentication\r\n   */\r\n  function validateAuthentication(address _sender, uint _challenge, uint _partnerId) public constant returns (bool _isValid) {\r\n      if (partnerMap[_partnerId][_sender].value == hydroPartnerMap[_partnerId][_sender].value\r\n      && block.timestamp < hydroPartnerMap[_partnerId][_sender].timestamp\r\n      && partnerMap[_partnerId][_sender].challenge == _challenge) {\r\n          return true;\r\n      }\r\n      return false;\r\n  }\r\n\r\n  /* Function to update the partnerValuesMap with their amount and challenge string */\r\n  function updatePartnerMap(address _sender, uint _value, uint _challenge, uint _partnerId) internal {\r\n      partnerMap[_partnerId][_sender].value = _value;\r\n      partnerMap[_partnerId][_sender].challenge = _challenge;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_challenge\",\"type\":\"uint256\"},{\"name\":\"_partnerId\",\"type\":\"uint256\"}],\"name\":\"validateAuthentication\",\"outputs\":[{\"name\":\"_isValid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_partnerId\",\"type\":\"uint256\"}],\"name\":\"updateHydroMap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hydroPartnerMap\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setHydroContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hydroContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_whitelistBool\",\"type\":\"bool\"},{\"name\":\"_partnerId\",\"type\":\"uint256\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"partnerMap\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"challenge\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_partnerId\",\"type\":\"uint256\"}],\"name\":\"checkForValidChallenge\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_challenge\",\"type\":\"uint256\"},{\"name\":\"_partnerId\",\"type\":\"uint256\"}],\"name\":\"authenticate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"partnerId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AuthenticateEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"partnerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"WhitelistEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Raindrop","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://51ac5fc6cf0d5a1acdb2a086d0bdb748abef4630fc619058642260fd333931e5"}]}