{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\taddress public owner;\r\n\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\t/**\r\n\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\t * account.\r\n\t */\r\n\tfunction Ownable() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t* @param newOwner The address to transfer ownership to.\r\n\t\t*/\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\trequire(newOwner != address(0));\r\n\t\temit OwnershipTransferred(owner, newOwner);\r\n\t\towner = newOwner;\r\n\t}\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t * @dev Multiplies two numbers, throws on overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tc = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Integer division of two numbers, truncating the quotient.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\t// uint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Adds two numbers, throws on overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n\tfunction totalSupply() public view returns (uint256);\r\n\tfunction balanceOf(address who) public view returns (uint256);\r\n\tfunction transfer(address to, uint256 value) public returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) balances;\r\n\r\n\tuint256 totalSupply_;\r\n\r\n\t/**\r\n\t* @dev total number of tokens in existence\r\n\t*/\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn totalSupply_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev transfer token for a specified address\r\n\t* @param _to The address to transfer to.\r\n\t\t* @param _value The amount to be transferred.\r\n\t\t\t*/\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[msg.sender]);\r\n\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets the balance of the specified address.\r\n\t* @param _owner The address to query the the balance of.\r\n\t\t* @return An uint256 representing the amount owned by the passed address.\r\n\t\t*/\r\n\tfunction balanceOf(address _owner) public view returns (uint256) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n\tfunction allowance(address owner, address spender) public view returns (uint256);\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\tfunction approve(address spender, uint256 value) public returns (bool);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n\tmapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n\t/**\r\n\t* @dev Transfer tokens from one address to another\r\n\t* @param _from address The address which you want to send tokens from\r\n\t* @param _to address The address which you want to transfer to\r\n\t* @param _value uint256 the amount of tokens to be transferred\r\n\t*/\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[_from]);\r\n\t\trequire(_value <= allowed[_from][msg.sender]);\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t *\r\n\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\t * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t * @param _spender The address which will spend the funds.\r\n\t * @param _value The amount of tokens to be spent.\r\n\t */\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\t * @param _owner address The address which owns the funds.\r\n\t * @param _spender address The address which will spend the funds.\r\n\t * @return A uint256 specifying the amount of tokens still available for the spender.\r\n\t */\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n\t *\r\n\t * approve should be called when allowed[_spender] == 0. To increment\r\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t * the first transaction is mined)\r\n\t * From MonolithDAO Token.sol\r\n\t * @param _spender The address which will spend the funds.\r\n\t * @param _addedValue The amount of tokens to increase the allowance by.\r\n\t */\r\n\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n\t *\r\n\t * approve should be called when allowed[_spender] == 0. To decrement\r\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t * the first transaction is mined)\r\n\t * From MonolithDAO Token.sol\r\n\t * @param _spender The address which will spend the funds.\r\n\t * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n\t */\r\n\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n\t\tuint oldValue = allowed[msg.sender][_spender];\r\n\t\tif (_subtractedValue > oldValue) {\r\n\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t} else {\r\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t}\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n\tevent Pause();\r\n\tevent Unpause();\r\n\r\n\tbool public paused = false;\r\n\r\n\r\n\t/**\r\n\t* @dev Modifier to make a function callable only when the contract is not paused.\r\n\t*/\r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!paused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Modifier to make a function callable only when the contract is paused.\r\n\t*/\r\n\tmodifier whenPaused() {\r\n\t\trequire(paused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev called by the owner to pause, triggers stopped state\r\n\t*/\r\n\tfunction pause() onlyOwner whenNotPaused public {\r\n\t\tpaused = true;\r\n\t\temit Pause();\r\n\t}\r\n\r\n\t/**\r\n\t* @dev called by the owner to unpause, returns to normal state\r\n\t*/\r\n\tfunction unpause() onlyOwner whenPaused public {\r\n\t\tpaused = false;\r\n\t\temit Unpause();\r\n\t}\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale {\r\n\tusing SafeMath for uint256;\r\n\r\n\t// The token being sold\r\n\tERC20 public token;\r\n\r\n\t// Address where funds are collected\r\n\taddress public wallet;\r\n\r\n\t// How many token units a buyer gets per wei\r\n\tuint256 public rate;\r\n\r\n\t// Amount of wei raised\r\n\tuint256 public weiRaised;\r\n\r\n\t/**\r\n\t* Event for token purchase logging\r\n\t* @param purchaser who paid for the tokens\r\n\t\t* @param beneficiary who got the tokens\r\n\t* @param value weis paid for purchase\r\n\t\t* @param amount amount of tokens purchased\r\n\t*/\r\n\tevent TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\t/**\r\n\t* @param _rate Number of token units a buyer gets per wei\r\n\t* @param _wallet Address where collected funds will be forwarded to\r\n\t* @param _token Address of the token being sold\r\n\t*/\r\n\tfunction Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\r\n\t\trequire(_rate > 0);\r\n\t\trequire(_wallet != address(0));\r\n\t\trequire(_token != address(0));\r\n\r\n\t\trate = _rate;\r\n\t\twallet = _wallet;\r\n\t\ttoken = _token;\r\n\t}\r\n\r\n\t// -----------------------------------------\r\n\t// Crowdsale external interface\r\n\t// -----------------------------------------\r\n\r\n\t/**\r\n\t* @dev fallback function ***DO NOT OVERRIDE***\r\n\t*/\r\n\tfunction () external payable {\r\n\t\tbuyTokens(msg.sender);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev low level token purchase ***DO NOT OVERRIDE***\r\n\t* @param _beneficiary Address performing the token purchase\r\n\t*/\r\n\tfunction buyTokens(address _beneficiary) public payable {\r\n\r\n\t\tuint256 weiAmount = msg.value;\r\n\t\t_preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n\t\t// calculate token amount to be created\r\n\t\tuint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n\t\t// update state\r\n\t\tweiRaised = weiRaised.add(weiAmount);\r\n\r\n\t\t_processPurchase(_beneficiary, tokens);\r\n\t\temit TokenPurchase(\r\n\t\t\tmsg.sender,\r\n\t\t\t_beneficiary,\r\n\t\t\tweiAmount,\r\n\t\t\ttokens\r\n\t\t);\r\n\r\n\t\t_updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n\t\t_forwardFunds();\r\n\t\t_postValidatePurchase(_beneficiary, weiAmount);\r\n\t}\r\n\r\n\t// -----------------------------------------\r\n\t// Internal interface (extensible)\r\n\t// -----------------------------------------\r\n\r\n\t/**\r\n\t* @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n\t* @param _beneficiary Address performing the token purchase\r\n\t* @param _weiAmount Value in wei involved in the purchase\r\n\t*/\r\n\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n\t\trequire(_beneficiary != address(0));\r\n\t\trequire(_weiAmount != 0);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n\t* @param _beneficiary Address performing the token purchase\r\n\t* @param _weiAmount Value in wei involved in the purchase\r\n\t*/\r\n\tfunction _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n\t\t// optional override\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n\t* @param _beneficiary Address performing the token purchase\r\n\t* @param _tokenAmount Number of tokens to be emitted\r\n\t*/\r\n\tfunction _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n\t\ttoken.transfer(_beneficiary, _tokenAmount);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n\t* @param _beneficiary Address receiving the tokens\r\n\t* @param _tokenAmount Number of tokens to be purchased\r\n\t*/\r\n\tfunction _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n\t\t_deliverTokens(_beneficiary, _tokenAmount);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n\t* @param _beneficiary Address receiving the tokens\r\n\t* @param _weiAmount Value in wei involved in the purchase\r\n\t*/\r\n\tfunction _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n\t\t// optional override\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Override to extend the way in which ether is converted to tokens.\r\n\t* @param _weiAmount Value in wei to be converted into tokens\r\n\t* @return Number of tokens that can be purchased with the specified _weiAmount\r\n\t*/\r\n\tfunction _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n\t\treturn _weiAmount.mul(66666667).div(5000);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Determines how ETH is stored/forwarded on purchases.\r\n\t*/\r\n\tfunction _forwardFunds() internal {\r\n\t\twallet.transfer(msg.value);\r\n\t}\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Crowdsale with a limit for total contributions.\r\n */\r\ncontract CappedCrowdsale is Crowdsale {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 public cap;\r\n\r\n\t/**\r\n\t* @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\r\n\t* @param _cap Max amount of wei to be contributed\r\n\t*/\r\n\tfunction CappedCrowdsale(uint256 _cap) public {\r\n\t\trequire(_cap > 0);\r\n\t\tcap = _cap;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Checks whether the cap has been reached. \r\n\t* @return Whether the cap was reached\r\n\t*/\r\n\tfunction capReached() public view returns (bool) {\r\n\t\treturn weiRaised >= cap;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Extend parent behavior requiring purchase to respect the funding cap.\r\n\t* @param _beneficiary Token purchaser\r\n\t* @param _weiAmount Amount of wei contributed\r\n\t*/\r\n\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n\t\tsuper._preValidatePurchase(_beneficiary, _weiAmount);\r\n\t\trequire(weiRaised.add(_weiAmount) <= cap);\r\n\t}\r\n\r\n}\r\n\r\ncontract AmountLimitCrowdsale is Crowdsale, Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 public min;\r\n\tuint256 public max;\r\n\r\n\tmapping(address => uint256) public contributions;\r\n\r\n\tfunction AmountLimitCrowdsale(uint256 _min, uint256 _max) public {\r\n\t\trequire(_min > 0);\r\n\t\trequire(_max > _min);\r\n\t\t// each person should contribute between min-max amount of wei\r\n\t\tmin = _min;\r\n\t\tmax = _max;\r\n\t}\r\n\r\n\tfunction getUserContribution(address _beneficiary) public view returns (uint256) {\r\n\t\treturn contributions[_beneficiary];\r\n\t}\r\n\r\n\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n\t\tsuper._preValidatePurchase(_beneficiary, _weiAmount);\r\n\t\trequire(contributions[_beneficiary].add(_weiAmount) <= max);\r\n\t\trequire(contributions[_beneficiary].add(_weiAmount) >= min);\r\n\t}\r\n\r\n\tfunction _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n\t\tsuper._updatePurchasingState(_beneficiary, _weiAmount);\r\n\t\t// update total contribution\r\n\t\tcontributions[_beneficiary] = contributions[_beneficiary].add(_weiAmount);\r\n\t}\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\r\n\r\n/**\r\n * @title TimedCrowdsale\r\n * @dev Crowdsale accepting contributions only within a time frame.\r\n */\r\ncontract TimedCrowdsale is Crowdsale {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 public openingTime;\r\n\tuint256 public closingTime;\r\n\r\n\t/**\r\n\t* @dev Reverts if not in crowdsale time range.\r\n\t*/\r\n\tmodifier onlyWhileOpen {\r\n\t\t// solium-disable-next-line security/no-block-members\r\n\t\trequire(block.timestamp >= openingTime && block.timestamp <= closingTime);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Constructor, takes crowdsale opening and closing times.\r\n\t* @param _openingTime Crowdsale opening time\r\n\t* @param _closingTime Crowdsale closing time\r\n\t*/\r\n\tfunction TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\r\n\t\t// solium-disable-next-line security/no-block-members\r\n\t\trequire(_openingTime >= block.timestamp);\r\n\t\trequire(_closingTime >= _openingTime);\r\n\r\n\t\topeningTime = _openingTime;\r\n\t\tclosingTime = _closingTime;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n\t* @return Whether crowdsale period has elapsed\r\n\t*/\r\n\tfunction hasClosed() public view returns (bool) {\r\n\t\t// solium-disable-next-line security/no-block-members\r\n\t\treturn block.timestamp > closingTime;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Extend parent behavior requiring to be within contributing period\r\n\t* @param _beneficiary Token purchaser\r\n\t* @param _weiAmount Amount of wei contributed\r\n\t*/\r\n\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\r\n\t\tsuper._preValidatePurchase(_beneficiary, _weiAmount);\r\n\t}\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/crowdsale/validation/WhitelistedCrowdsale.sol\r\n\r\n/**\r\n * @title WhitelistedCrowdsale\r\n * @dev Crowdsale in which only whitelisted users can contribute.\r\n */\r\ncontract WhitelistedCrowdsale is Crowdsale, Ownable {\r\n\r\n\tmapping(address => bool) public whitelist;\r\n\r\n\t/**\r\n\t* @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\r\n\t*/\r\n\tmodifier isWhitelisted(address _beneficiary) {\r\n\t\trequire(whitelist[_beneficiary]);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds single address to whitelist.\r\n\t* @param _beneficiary Address to be added to the whitelist\r\n\t*/\r\n\tfunction addToWhitelist(address _beneficiary) external onlyOwner {\r\n\t\twhitelist[_beneficiary] = true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\r\n\t* @param _beneficiaries Addresses to be added to the whitelist\r\n\t*/\r\n\tfunction addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\r\n\t\tfor (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n\t\t\twhitelist[_beneficiaries[i]] = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Removes single address from whitelist.\r\n\t* @param _beneficiary Address to be removed to the whitelist\r\n\t*/\r\n\tfunction removeFromWhitelist(address _beneficiary) external onlyOwner {\r\n\t\twhitelist[_beneficiary] = false;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Extend parent behavior requiring beneficiary to be in whitelist.\r\n\t* @param _beneficiary Token beneficiary\r\n\t* @param _weiAmount Amount of wei contributed\r\n\t*/\r\n\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\r\n\t\tsuper._preValidatePurchase(_beneficiary, _weiAmount);\r\n\t}\r\n\r\n}\r\n\r\ncontract T2TCrowdsale is WhitelistedCrowdsale, AmountLimitCrowdsale, CappedCrowdsale,\r\nTimedCrowdsale, Pausable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 public distributeTime;\r\n\tmapping(address => uint256) public balances;\r\n\r\n\tfunction T2TCrowdsale(uint256 rate, \r\n\t\tuint256 openTime, \r\n\t\tuint256 closeTime, \r\n\t\tuint256 totalCap,\r\n\t\tuint256 userMin,\r\n\t\tuint256 userMax,\r\n\t\tuint256 _distributeTime,\r\n\t\taddress account,\r\n\t\tStandardToken token)\r\n\t\tCrowdsale(rate, account, token)\r\n\t\tTimedCrowdsale(openTime, closeTime)\r\n\t\tCappedCrowdsale(totalCap)\r\n\t\tAmountLimitCrowdsale(userMin, userMax) public {\r\n\t  distributeTime = _distributeTime;\r\n\t}\r\n\r\n\tfunction withdrawTokens(address _beneficiary) public {\r\n\t  require(block.timestamp > distributeTime);\r\n\t  uint256 amount = balances[_beneficiary];\r\n\t  require(amount > 0);\r\n\t  balances[_beneficiary] = 0;\r\n\t  _deliverTokens(_beneficiary, amount);\r\n\t}\r\n\r\n\tfunction distributeTokens(address[] _beneficiaries) external onlyOwner {\r\n\t\tfor (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n\t\t\trequire(block.timestamp > distributeTime);\r\n\t\t\taddress _beneficiary = _beneficiaries[i];\r\n\t\t\tuint256 amount = balances[_beneficiary];\r\n\t\t\tif(amount > 0) {\r\n\t\t\t\tbalances[_beneficiary] = 0;\r\n\t\t\t\t_deliverTokens(_beneficiary, amount);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction returnTokens(address _beneficiary, uint256 amount) external onlyOwner {\r\n\t\t_deliverTokens(_beneficiary, amount);\r\n\t}\r\n\r\n\tfunction _processPurchase(\r\n\t  address _beneficiary,\r\n\t  uint256 _tokenAmount\r\n\t)\r\n\tinternal {\r\n\t  balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\r\n\t}\r\n\r\n\tfunction buyTokens(address beneficiary) public payable whenNotPaused {\r\n\t  super.buyTokens(beneficiary);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"returnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"distributeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addManyToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributeTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getUserContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"openTime\",\"type\":\"uint256\"},{\"name\":\"closeTime\",\"type\":\"uint256\"},{\"name\":\"totalCap\",\"type\":\"uint256\"},{\"name\":\"userMin\",\"type\":\"uint256\"},{\"name\":\"userMax\",\"type\":\"uint256\"},{\"name\":\"_distributeTime\",\"type\":\"uint256\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"T2TCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000003415000000000000000000000000000000000000000000000000000000005b1a4590000000000000000000000000000000000000000000000000000000005b379aef00000000000000000000000000000000000000000000010f0cf064dd59200000000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000010f0cf064dd59200000000000000000000000000000000000000000000000000000000000005b379af0000000000000000000000000ea2de62ca9294a99a0f34fec9a4888a675733635000000000000000000000000e6824483e279d967ea6f8472ace7585862fa1185","Library":"","SwarmSource":"bzzr://cf8b0b676db6f290a5a8096dc944ad6b111e2a40cbf1245529a08afc7e9f093a"}]}