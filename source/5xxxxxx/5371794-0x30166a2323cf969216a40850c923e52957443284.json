{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/TokenController.sol\r\n\r\n/** The interface for a token contract to notify a controller of every transfers. */\r\ncontract TokenController {\r\n    bytes4 public constant INTERFACE = bytes4(keccak256(\"TokenController\"));\r\n\r\n    function allowTransfer(address _sender, address _from, address _to, uint256 _value, bytes _purpose) public returns (bool);\r\n}\r\n\r\n\r\n// Basic examples\r\n\r\ncontract YesController is TokenController {\r\n    function allowTransfer(address /* _sender */, address /* _from */, address /* _to */, uint256 /* _value */, bytes /* _purpose */)\r\n        public returns (bool)\r\n    {\r\n        return true; // allow all transfers\r\n    }\r\n}\r\n\r\n\r\ncontract NoController is TokenController {\r\n    function allowTransfer(address /* _sender */, address /* _from */, address /* _to */, uint256 /* _value */, bytes /* _purpose */)\r\n        public returns (bool)\r\n    {\r\n        return false; // veto all transfers\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/SaleController.sol\r\n\r\n/** Forbid trading, but allow transfers from a seller and from the owner.\r\n    Setting to 0 effectively pauses the sale.\r\n*/\r\ncontract SaleController is TokenController, Ownable {\r\n\r\n    address public seller = 0;\r\n\r\n    /** @dev `owner` can change the `seller`. */\r\n    function changeSeller(address _newSeller)\r\n        onlyOwner public\r\n    {\r\n        seller = _newSeller;\r\n    }\r\n\r\n    /** @dev Allow transfers from the `seller` and the `owner`, but nobody else. No state changes. */\r\n    function allowTransfer(address /* _sender */, address _from, address /* _to */, uint256 /* _value */, bytes /* _purpose */)\r\n        public returns (bool)\r\n    {\r\n        return _from == seller || _from == owner;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTERFACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"allowTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSeller\",\"type\":\"address\"}],\"name\":\"changeSeller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SaleController","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e37f0adf0737690ccb673f286c878a9e2b915f74d88d93e7d73ae33ba0baf1f4"}]}