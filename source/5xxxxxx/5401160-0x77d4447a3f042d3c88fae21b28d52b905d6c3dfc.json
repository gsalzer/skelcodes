{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract AccessControl {\r\n    address public creatorAddress;\r\n    uint16 public totalSeraphims = 0;\r\n    mapping (address => bool) public seraphims;\r\n\r\n    bool public isMaintenanceMode = true;\r\n \r\n    modifier onlyCREATOR() {\r\n        require(msg.sender == creatorAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlySERAPHIM() {\r\n        require(seraphims[msg.sender] == true);\r\n        _;\r\n    }\r\n    \r\n    modifier isContractActive {\r\n        require(!isMaintenanceMode);\r\n        _;\r\n    }\r\n    \r\n    // Constructor\r\n    function AccessControl() public {\r\n        creatorAddress = msg.sender;\r\n    }\r\n    \r\n\r\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\r\n        if (seraphims[_newSeraphim] == false) {\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims += 1;\r\n        }\r\n    }\r\n    \r\n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\r\n        if (seraphims[_oldSeraphim] == true) {\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }\r\n    }\r\n\r\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\r\n        isMaintenanceMode = _isMaintaining;\r\n    }\r\n\r\n  \r\n} \r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint x, uint y) pure internal returns(uint) {\r\n      assert(x >= y);\r\n      uint z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n    \r\n     function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\r\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\r\n        return uint8(genNum % (maxRandom - min + 1)+min);\r\n    }\r\n}\r\n\r\ncontract Enums {\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_OWNER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n\r\n    enum AngelAura { \r\n        Blue, \r\n        Yellow, \r\n        Purple, \r\n        Orange, \r\n        Red, \r\n        Green \r\n    }\r\n}\r\n\r\ncontract IAngelCardData is AccessControl, Enums {\r\n    uint8 public totalAngelCardSeries;\r\n    uint64 public totalAngels;\r\n\r\n    \r\n    // write\r\n    // angels\r\n    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8);\r\n    function updateAngelCardSeries(uint8 _angelCardSeriesId, uint64 _newPrice, uint64 _newMaxTotal) onlyCREATOR external;\r\n    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64);\r\n    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external;\r\n    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external;\r\n    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external;\r\n    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external;\r\n    function addAngelIdMapping(address _owner, uint64 _angelId) private;\r\n    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerAngelTransfer (address _to, uint64 _angelId)  public;\r\n    function updateAngelLock (uint64 _angelId, bool newValue) public;\r\n    function removeCreator() onlyCREATOR external;\r\n\r\n    // read\r\n    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime);\r\n    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner);\r\n    function getOwnerAngelCount(address _owner) constant public returns(uint);\r\n    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64);\r\n    function getTotalAngelCardSeries() constant public returns (uint8);\r\n    function getTotalAngels() constant public returns (uint64);\r\n    function getAngelLockStatus(uint64 _angelId) constant public returns (bool);\r\n}\r\ncontract IPetCardData is AccessControl, Enums {\r\n    uint8 public totalPetCardSeries;    \r\n    uint64 public totalPets;\r\n    \r\n    // write\r\n    function createPetCardSeries(uint8 _petCardSeriesId, uint32 _maxTotal) onlyCREATOR public returns(uint8);\r\n    function setPet(uint8 _petCardSeriesId, address _owner, string _name, uint8 _luck, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue) onlySERAPHIM external returns(uint64);\r\n    function setPetAuras(uint64 _petId, uint8 _auraRed, uint8 _auraBlue, uint8 _auraYellow) onlySERAPHIM external;\r\n    function setPetLastTrainingTime(uint64 _petId) onlySERAPHIM external;\r\n    function setPetLastBreedingTime(uint64 _petId) onlySERAPHIM external;\r\n    function addPetIdMapping(address _owner, uint64 _petId) private;\r\n    function transferPet(address _from, address _to, uint64 _petId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerPetTransfer (address _to, uint64 _petId)  public;\r\n    function setPetName(string _name, uint64 _petId) public;\r\n\r\n    // read\r\n    function getPetCardSeries(uint8 _petCardSeriesId) constant public returns(uint8 petCardSeriesId, uint32 currentPetTotal, uint32 maxPetTotal);\r\n    function getPet(uint _petId) constant public returns(uint petId, uint8 petCardSeriesId, string name, uint8 luck, uint16 auraRed, uint16 auraBlue, uint16 auraYellow, uint64 lastTrainingTime, uint64 lastBreedingTime, address owner);\r\n    function getOwnerPetCount(address _owner) constant public returns(uint);\r\n    function getPetByIndex(address _owner, uint _index) constant public returns(uint);\r\n    function getTotalPetCardSeries() constant public returns (uint8);\r\n    function getTotalPets() constant public returns (uint);\r\n}\r\n\r\ncontract IMedalData is AccessControl {\r\n  \r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n   \r\nfunction totalSupply() public view returns (uint256);\r\nfunction setMaxTokenNumbers()  onlyCREATOR external;\r\nfunction balanceOf(address _owner) public view returns (uint256);\r\nfunction tokensOf(address _owner) public view returns (uint256[]) ;\r\nfunction ownerOf(uint256 _tokenId) public view returns (address);\r\nfunction approvedFor(uint256 _tokenId) public view returns (address) ;\r\nfunction transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId);\r\nfunction approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId);\r\nfunction takeOwnership(uint256 _tokenId) public;\r\nfunction _createMedal(address _to, uint8 _seriesID) onlySERAPHIM public ;\r\nfunction getCurrentTokensByType(uint32 _seriesID) public constant returns (uint32);\r\nfunction getMedalType (uint256 _tokenId) public constant returns (uint8);\r\nfunction _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) external;\r\nfunction isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) ;\r\nfunction clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal;\r\nfunction clearApproval(address _owner, uint256 _tokenId) private;\r\nfunction addToken(address _to, uint256 _tokenId) private ;\r\nfunction removeToken(address _from, uint256 _tokenId) private;\r\n}\r\n\r\ncontract IBattleboardData is AccessControl  {\r\n\r\n  \r\n\r\n      // write functions\r\n  \r\nfunction createBattleboard(uint prize, uint8 restrictions) onlySERAPHIM external returns (uint16);\r\nfunction killMonster(uint16 battleboardId, uint8 monsterId)  onlySERAPHIM external;\r\nfunction createNullTile(uint16 _battleboardId) private ;\r\nfunction createTile(uint16 _battleboardId, uint8 _tileType, uint8 _value, uint8 _position, uint32 _hp, uint16 _petPower, uint64 _angelId, uint64 _petId, address _owner, uint8 _team) onlySERAPHIM external  returns (uint8);\r\nfunction killTile(uint16 battleboardId, uint8 tileId) onlySERAPHIM external ;\r\nfunction addTeamtoBoard(uint16 battleboardId, address owner, uint8 team) onlySERAPHIM external;\r\nfunction setTilePosition (uint16 battleboardId, uint8 tileId, uint8 _positionTo) onlySERAPHIM public ;\r\nfunction setTileHp(uint16 battleboardId, uint8 tileId, uint32 _hp) onlySERAPHIM external ;\r\nfunction addMedalBurned(uint16 battleboardId) onlySERAPHIM external ;\r\nfunction setLastMoveTime(uint16 battleboardId) onlySERAPHIM external ;\r\nfunction iterateTurn(uint16 battleboardId) onlySERAPHIM external ;\r\nfunction killBoard(uint16 battleboardId) onlySERAPHIM external ;\r\nfunction clearAngelsFromBoard(uint16 battleboardId) private;\r\n//Read functions\r\n     \r\nfunction getTileHp(uint16 battleboardId, uint8 tileId) constant external returns (uint32) ;\r\nfunction getMedalsBurned(uint16 battleboardId) constant external returns (uint8) ;\r\nfunction getTeam(uint16 battleboardId, uint8 tileId) constant external returns (uint8) ;\r\nfunction getMaxFreeTeams() constant public returns (uint8);\r\nfunction getBarrierNum(uint16 battleboardId) public constant returns (uint8) ;\r\nfunction getTileFromBattleboard(uint16 battleboardId, uint8 tileId) public constant returns (uint8 tileType, uint8 value, uint8 id, uint8 position, uint32 hp, uint16 petPower, uint64 angelId, uint64 petId, bool isLive, address owner)   ;\r\nfunction getTileIDByOwner(uint16 battleboardId, address _owner) constant public returns (uint8) ;\r\nfunction getPetbyTileId( uint16 battleboardId, uint8 tileId) constant public returns (uint64) ;\r\nfunction getOwner (uint16 battleboardId, uint8 team,  uint8 ownerNumber) constant external returns (address);\r\nfunction getTileIDbyPosition(uint16 battleboardId, uint8 position) public constant returns (uint8) ;\r\nfunction getPositionFromBattleboard(uint16 battleboardId, uint8 _position) public constant returns (uint8 tileType, uint8 value, uint8 id, uint8 position, uint32 hp, uint32 petPower, uint64 angelId, uint64 petId, bool isLive)  ;\r\nfunction getBattleboard(uint16 id) public constant returns (uint8 turn, bool isLive, uint prize, uint8 numTeams, uint8 numTiles, uint8 createdBarriers, uint8 restrictions, uint lastMoveTime, uint8 numTeams1, uint8 numTeams2, uint8 monster1, uint8 monster2) ;\r\nfunction isBattleboardLive(uint16 battleboardId) constant public returns (bool);\r\nfunction isTileLive(uint16 battleboardId, uint8 tileId) constant  external returns (bool) ;\r\nfunction getLastMoveTime(uint16 battleboardId) constant public returns (uint) ;\r\nfunction getNumTilesFromBoard (uint16 _battleboardId) constant public returns (uint8) ; \r\nfunction angelOnBattleboards(uint64 angelID) external constant returns (bool) ;\r\nfunction getTurn(uint16 battleboardId) constant public returns (address) ;\r\nfunction getNumTeams(uint16 battleboardId, uint8 team) public constant returns (uint8);\r\nfunction getMonsters(uint16 BattleboardId) external constant returns (uint8 monster1, uint8 monster2) ;\r\nfunction getTotalBattleboards() public constant returns (uint16) ;\r\n  \r\n        \r\n \r\n   \r\n}\r\n\r\n\r\ncontract Battleboards is AccessControl, SafeMath  {\r\n\r\n    /*** DATA TYPES ***/\r\n    address public angelCardDataContract = 0x6D2E76213615925c5fc436565B5ee788Ee0E86DC;\r\n    address public petCardDataContract = 0xB340686da996b8B3d486b4D27E38E38500A9E926;\r\n    address public medalDataContract =  0x33A104dCBEd81961701900c06fD14587C908EAa3;\r\n    address public battleboardDataContract =0xE60fC4632bD6713E923FE93F8c244635E6d5009e;\r\n\r\n     // events\r\n     event EventMonsterStrike(uint16 battleboardId, uint64 angel, uint16 amount);\r\n     event EventBarrier(uint16 battleboardId,uint64 angelId, uint8 color, uint8 damage);\r\n     event EventBattleResult(uint16 battleboardId, uint8 tile1Id, uint8 tile2Id, bool angel1win);\r\n    \r\n    \r\n    uint8 public delayHours = 12;\r\n    uint16 public petHpThreshold = 250;\r\n    uint16 public maxMonsterHit = 200;\r\n    uint16 public minMonsterHit = 50;\r\n         \r\n      struct Tile {\r\n        uint8 tileType;\r\n        uint8 value;\r\n        uint8 id;\r\n        uint8 position;\r\n        uint32 hp;\r\n        uint32 petPower;\r\n        uint64 angelId;\r\n        uint64 petId;\r\n        bool isLive;\r\n        address owner;\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    //Aura Boosts\r\n    // Red - Burning Strike - + 10 battle power  \r\n    // Green - Healing Light - 20% chance to heal 75 hp each battle\r\n    //Yellow - Guiding Path - 5 hp recovered each turn.\r\n    //Purple - Uncontroled Fury - 10% chance for sudden kill \r\n    //Orange - Radiant Power - +100 max hp on joining board. \r\n    //Blue - Friend to all - immunity from monster attacks \r\n    \r\n      \r\n          // Utility Functions\r\n    function DataContacts(address _angelCardDataContract, address _petCardDataContract,  address _medalDataContract, address _battleboardDataContract) onlyCREATOR external {\r\n        angelCardDataContract = _angelCardDataContract;\r\n        petCardDataContract = _petCardDataContract;\r\n        medalDataContract = _medalDataContract;\r\n        battleboardDataContract = _battleboardDataContract;\r\n    }\r\n    \r\n    function setVariables(uint8 _delayHours, uint16 _petHpThreshold,  uint16 _maxMonsterHit, uint16 _minMonsterHit) onlyCREATOR external {\r\n        delayHours = _delayHours;\r\n        petHpThreshold = _petHpThreshold;\r\n        maxMonsterHit = _maxMonsterHit;\r\n        minMonsterHit = _minMonsterHit;\r\n        \r\n    }\r\n      \r\n\r\n      \r\n    \r\n        function removeDeadTurns(uint16 battleboardId) private {\r\n            //This function iterates through turns of players whose tiles may already be dead \r\n            IBattleboardData battleboardData = IBattleboardData(battleboardDataContract);\r\n            uint8 oldTurnTileID;\r\n            for (uint8 i = 0; i<6; i++) {\r\n            oldTurnTileID = battleboardData.getTileIDByOwner(battleboardId, battleboardData.getTurn(battleboardId));\r\n            if (battleboardData.isTileLive(battleboardId, oldTurnTileID) == false) {battleboardData.iterateTurn(battleboardId);}\r\n            else {i=9;} //break loop\r\n            }\r\n        }\r\n    \r\n       function move(uint16 battleboardId, uint8 tileId, uint8 positionTo) external {\r\n           //Can't move off the board\r\n           if ((positionTo <= 0) || (positionTo >64)) {revert();}\r\n           IBattleboardData battleboardData = IBattleboardData(battleboardDataContract);\r\n           \r\n           //if it's not your turn. \r\n           if (msg.sender != battleboardData.getTurn(battleboardId)) {\r\n               //first check to see if the team whose turn it is is dead.\r\n              removeDeadTurns(battleboardId);\r\n              if (msg.sender != battleboardData.getTurn(battleboardId)) {\r\n                  //if it's still not your turn, revert if it's also not past the real turn's delay time. \r\n               if  (now  < battleboardData.getLastMoveTime(battleboardId) + (3600* delayHours)) {revert();}\r\n              }\r\n           }\r\n           Tile memory tile;\r\n            //get the tile to be moved. \r\n           (tile.tileType, tile.value ,, tile.position, tile.hp,,,, tile.isLive,tile.owner) = battleboardData.getTileFromBattleboard(battleboardId, tileId) ;\r\n           //first see if the move is legal\r\n           if (canMove(battleboardId, tile.position, positionTo) == false) {revert();}\r\n           \r\n           //Regardless of if the ower moves its tile normally or if someone else moves it, it has to move on its turn. \r\n           if (battleboardData.getTurn(battleboardId) != tile.owner) {revert();}\r\n           \r\n           //can't move if your tile isn't live. \r\n           if (tile.isLive == false) {revert();}\r\n           \r\n           \r\n            //Tile TYPES\r\n    // 0 - Empty Space\r\n    // 1 - Team (Angel + Pet)\r\n    // 3 - Red Barrier (red is hurt)\r\n    // 4 - Yellow barrier (yellow is hurt)\r\n    // 5 - Blue barrier (blue is hurt)\r\n    // 6 - Exp Boost (permanent)\r\n    // 7 - HP boost (temp)\r\n    // 8 - Eth boost\r\n    // 9 - Warp\r\n    // 10 - Medal\r\n    // 11 - Pet permanent Aura boost random color\r\n    \r\n           battleboardData.iterateTurn(battleboardId);\r\n           battleboardData.setLastMoveTime(battleboardId);\r\n           \r\n           //Tile 2 is the tile that the angel team will interact with. \r\n           Tile memory tile2;\r\n            tile2.id = battleboardData.getTileIDbyPosition(battleboardId, positionTo);\r\n           \r\n          (tile2.tileType, tile2.value ,,,,, tile2.angelId, tile2.petId, tile2.isLive,) = battleboardData.getTileFromBattleboard(battleboardId, tile2.id) ;\r\n           \r\n           if ((tile2.tileType == 0) || (tile2.isLive == false)) {\r\n               //Empty Space\r\n               battleboardData.setTilePosition(battleboardId,tileId, positionTo);\r\n           }\r\n           if (tile2.isLive == true) {\r\n            if (tile2.tileType == 1) {\r\n                if (battleboardData.getTeam(battleboardId, tileId) == battleboardData.getTeam(battleboardId, tile2.id)) {revert();}\r\n               //Fight Team\r\n               if (fightTeams(battleboardId, tileId, tile2.id) == true) {\r\n                   //challenger won. \r\n                   battleboardData.setTilePosition(battleboardId,tileId, positionTo);\r\n                   battleboardData.killTile(battleboardId, tile2.id);\r\n                   EventBattleResult(battleboardId, tileId, tile2.id, true);\r\n               }\r\n               else {battleboardData.killTile(battleboardId, tileId);\r\n                   EventBattleResult(battleboardId, tileId, tile2.id, false);\r\n               } //challenger lost\r\n              \r\n           }\r\n          \r\n             if (tile2.tileType == 3) {\r\n               //Red barrier\r\n               battleboardData.setTilePosition(battleboardId,tileId, positionTo);\r\n               if (isVulnerable (tile.angelId,1) == true) {\r\n                    if (tile.hp > tile2.value) {battleboardData.setTileHp(battleboardId, tileId, (tile.hp - tile2.value));}\r\n                    else {battleboardData.killTile(battleboardId, tileId);}\r\n               }\r\n               EventBarrier(battleboardId, tile.angelId,3, tile2.value);\r\n               \r\n           }\r\n             if (tile2.tileType == 4) {\r\n               //Yellow barrier\r\n             battleboardData.setTilePosition(battleboardId,tileId, positionTo);\r\n              if (isVulnerable (tile.angelId,2) == true) {\r\n                    if (tile.hp > tile2.value) {battleboardData.setTileHp(battleboardId, tileId, (tile.hp - tile2.value));}\r\n                    else {battleboardData.killTile(battleboardId, tileId);}\r\n                    \r\n               }\r\n               EventBarrier(battleboardId, tile.angelId,4, tile2.value);\r\n           }\r\n             if (tile2.tileType == 5) {\r\n               //Blue barrier\r\n               battleboardData.setTilePosition(battleboardId,tileId, positionTo);\r\n                if (isVulnerable (tile.angelId,3) == true) {\r\n                    if (tile.hp > tile2.value) {battleboardData.setTileHp(battleboardId, tileId, (tile.hp - tile2.value));}\r\n                    else {battleboardData.killTile(battleboardId, tileId);}\r\n               }\r\n               EventBarrier(battleboardId, tile.angelId,5, tile2.value);\r\n           }\r\n             if (tile2.tileType == 6) {\r\n               //Exp boost\r\n               battleboardData.setTilePosition(battleboardId,tileId, positionTo);\r\n               IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\r\n               angelCardData.addToAngelExperienceLevel(tile.angelId,tile2.value);\r\n               battleboardData.killTile(battleboardId,tile2.id);\r\n               \r\n           }\r\n             if (tile2.tileType == 7) {\r\n               //HP boost\r\n               battleboardData.setTileHp(battleboardId,tileId, tile.hp+ tile2.value);\r\n               battleboardData.setTilePosition(battleboardId,tileId, positionTo);\r\n               battleboardData.killTile(battleboardId,tile2.id);\r\n           }\r\n             if (tile2.tileType == 8){\r\n               //ETH Boost - to be used only in paid boards. \r\n               battleboardData.setTilePosition(battleboardId,tileId, positionTo);\r\n               battleboardData.killTile(battleboardId,tile2.id);\r\n           }\r\n             if (tile2.tileType ==9) {\r\n               //Warp tile\r\n               if  (battleboardData.getTileIDbyPosition(battleboardId, tile2.value) == 0) {battleboardData.setTilePosition(battleboardId,tileId, tile2.value);}\r\n               //check if warping directly onto another tile\r\n               else {battleboardData.setTilePosition(battleboardId,tileId, positionTo);}\r\n               //if warping directly onto another tile, just stay at the warp tile position. \r\n           }\r\n             if (tile2.tileType ==10){\r\n               //Medal\r\n               battleboardData.setTilePosition(battleboardId,tileId, positionTo);\r\n               IMedalData medalData = IMedalData(medalDataContract);\r\n               medalData._createMedal(tile.owner,uint8(tile2.value));\r\n               battleboardData.killTile(battleboardId,tile2.id);\r\n           }\r\n            if (tile2.tileType==11) {\r\n               //Pet Aura Boost\r\n               battleboardData.setTilePosition(battleboardId,tileId, positionTo);\r\n               randomPetAuraBoost(tile.petId,tile2.value);\r\n               battleboardData.killTile(battleboardId,tile2.id);\r\n            }\r\n            \r\n           }\r\n            //check if yellow HP Boost\r\n            if (getAuraColor(tile.angelId) == 1) {battleboardData.setTileHp(battleboardId,tileId, tile.hp+ 5);}\r\n            \r\n            //check if new position is vulnerable to monster attack. \r\n            checkMonsterAttack(battleboardId,tileId,positionTo);\r\n            \r\n       }\r\n       \r\n       function checkMonsterAttack(uint16 battleboardId, uint8 tileId, uint8 position) private  {\r\n            IBattleboardData battleboardData = IBattleboardData(battleboardDataContract);\r\n           //get the monster locations\r\n           uint8 m1;\r\n           uint8 m2;\r\n           (m1,m2) = battleboardData.getMonsters(battleboardId);\r\n           //If a monster is within 2 spots it will automatically attack. \r\n           if ((position == m1) || (position == m1 +1) || (position == m1 +2) || (position == m1 +8) || (position == m1 +16) || (position == m1 - 1) || (position == m1 -2) || (position == m1 -8) || (position == m1 -16)) {\r\n                if (m1 != 0) {\r\n               fightMonster(battleboardId, tileId, 1);\r\n                }\r\n           }\r\n           \r\n            if ((position == m2) || (position == m2 +1) || (position == m2 +2) || (position == m2 +8) || (position == m2 +16) || (position == m2 -1) || (position == m2 -2) || (position == m2 -8) || (position == m2 -16)) {\r\n                 if (m2 != 0) {\r\n               fightMonster(battleboardId, tileId, 2);\r\n                 }\r\n           }\r\n           \r\n       }\r\n    \r\n       function getAngelInfoByTile (uint16 battleboardId, uint8 tileId) public constant returns (uint16 bp, uint8 aura) {\r\n             IBattleboardData battleboardData = IBattleboardData(battleboardDataContract);\r\n             uint64 angelId;\r\n            (, ,,,,,angelId,,,) = battleboardData.getTileFromBattleboard(battleboardId, tileId);\r\n           IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\r\n           (,,bp,aura,,,,,,,) = angelCardData.getAngel(angelId);\r\n           return;\r\n       }\r\n       \r\n       function getFastest(uint16 battleboardId, uint8 tile1Id, uint8 tile2Id) public constant returns (bool) {\r\n          IBattleboardData battleboardData = IBattleboardData(battleboardDataContract);\r\n           uint8 speed1;\r\n           uint8 speed2;\r\n              (, speed1,,,,,,,,) = battleboardData.getTileFromBattleboard(battleboardId, tile1Id);\r\n            (, speed2,,,, ,,,,) = battleboardData.getTileFromBattleboard(battleboardId, tile2Id);\r\n            if (speed1 >= speed2) return true;\r\n            return false;\r\n           \r\n       }\r\n       function fightTeams(uint16 battleboardId, uint8 tile1Id, uint8 tile2Id) private returns (bool) {\r\n           //True return means that team 1 won, false return means team 2 won. \r\n           \r\n           //First get the parameters. \r\n           IBattleboardData battleboardData = IBattleboardData(battleboardDataContract);\r\n        \r\n           uint32 hp1;\r\n           uint32 hp2;\r\n    \r\n           uint16 petPower1;\r\n           uint16 petPower2;\r\n           (,,,,hp1, petPower1,,,,) = battleboardData.getTileFromBattleboard(battleboardId, tile1Id);\r\n           (,,,,hp2, petPower2,,,,) = battleboardData.getTileFromBattleboard(battleboardId, tile2Id);\r\n           \r\n          uint16 angel1BP;\r\n          uint16 angel2BP;\r\n          uint8 angel1aura;\r\n          uint8 angel2aura;\r\n          \r\n         (angel1BP, angel1aura) = getAngelInfoByTile(battleboardId, tile1Id);\r\n         (angel2BP, angel2aura) = getAngelInfoByTile(battleboardId, tile2Id);\r\n        \r\n        \r\n        //If red aura, boost battle power\r\n        if (angel1aura == 4) {angel1BP += 10;}\r\n        if (angel2aura == 4) {angel2BP += 10;}\r\n        \r\n        //if purple aura, 10% chance of sudden kill\r\n        if ((angel1aura == 2) && (getRandomNumber(100,0,msg.sender) <10)) {return true;}\r\n        if ((angel2aura == 2) && (getRandomNumber(100,0,msg.sender) <10)) {return false;}\r\n        \r\n        \r\n        //if green aura, 20% chance of +75 hp\r\n        if ((angel1aura == 5) && (getRandomNumber(100,0,msg.sender) <20)) {hp1 += 75;}\r\n        if ((angel2aura == 5) && (getRandomNumber(100,0,msg.sender) <20)) {hp2 +=75;}\r\n        \r\n        \r\n           uint16 strike;\r\n           \r\n           //attacker (team 1) gets the first strike.\r\n           //see if strike will be angel and pet or just angel. \r\n           strike = Strike(angel1BP,hp1,petPower1,1);\r\n           if (hp2 > strike) {hp2 = hp2 - strike;}\r\n           else {return true;}\r\n           \r\n           //defender gets the second strike if still alive.  \r\n           strike = Strike(angel2BP,hp2,petPower2,2);\r\n           if (hp1 > strike) {hp1 = hp1 - strike;}\r\n           else {\r\n               battleboardData.setTileHp(battleboardId, tile2Id, hp2);\r\n               return false;}\r\n           \r\n        // second round (if necessary)\r\n        \r\n        if (getFastest(battleboardId, tile1Id, tile2Id)==true) {\r\n            if (getRandomNumber(100,0,2) > 30) {\r\n                //team 1 attacks first. \r\n                   strike = Strike(angel1BP,hp1,petPower1,3);\r\n                   if (hp2 > strike) {hp2 = hp2 - strike;}\r\n                   else {\r\n                       battleboardData.setTileHp(battleboardId, tile1Id, hp1);\r\n                       return true;}\r\n            }\r\n            else {\r\n            //team 2 attacks first    \r\n            strike = Strike(angel2BP,hp2,petPower2,4);\r\n           if (hp1 > strike) {hp1 = hp1 - strike;}\r\n           else {\r\n           battleboardData.setTileHp(battleboardId, tile2Id, hp2);\r\n           return false;}\r\n        }\r\n        }\r\n        if (getFastest(battleboardId, tile1Id, tile2Id) == false) {\r\n               if (getRandomNumber(100,0,2) >70) {\r\n                //team 1 attacks first. \r\n                   strike = Strike(angel1BP,hp1,petPower1,5);\r\n                   if (hp2 > strike) {hp2 = hp2 - strike;}\r\n                   else {\r\n                       battleboardData.setTileHp(battleboardId, tile1Id, hp1);\r\n                       return true;}\r\n                 }\r\n            else {\r\n            //team 2 attacks first    \r\n            strike = Strike(angel2BP,hp2,petPower2,6);\r\n           if (hp1 > strike) {hp1 = hp1 - strike;}\r\n           else {\r\n           battleboardData.setTileHp(battleboardId, tile2Id, hp2);\r\n           return false;}\r\n            }\r\n           }\r\n           \r\n             // third round (if necessary)\r\n        \r\n        if (getFastest(battleboardId, tile1Id, tile2Id)==true) {\r\n            if (getRandomNumber(100,0,2) > 30) {\r\n                //team 1 attacks first. \r\n                   strike = Strike(angel1BP,hp1,petPower1,7);\r\n                   if (hp2 > strike) {hp2 = hp2 - strike;}\r\n                   else {\r\n                       battleboardData.setTileHp(battleboardId, tile1Id, hp1);\r\n                       return true;}\r\n            }\r\n        }\r\n            else {\r\n            //team 2 attacks first    \r\n            strike = Strike(angel2BP,hp2,petPower2,8);\r\n           if (hp1 > strike) {hp1 = hp1 - strike;}\r\n           else {battleboardData.setTileHp(battleboardId, tile2Id, hp2);\r\n               return false;}\r\n        }\r\n        if (getFastest(battleboardId, tile1Id, tile2Id) == false) {\r\n               if (getRandomNumber(100,0,2) >70) {\r\n                //team 1 attacks first. \r\n                   strike = Strike(angel1BP,hp1,petPower1,9);\r\n                   if (hp2 > strike) {hp2 = hp2 - strike;}\r\n                   else {\r\n                       battleboardData.setTileHp(battleboardId, tile1Id, hp1);\r\n                       return true;}\r\n                 }\r\n            else {\r\n            //team 2 attacks first    \r\n            strike = Strike(angel2BP,hp2,petPower2,10);\r\n           if (hp1 > strike) {hp1 = hp1 - strike;}\r\n           else {\r\n               battleboardData.setTileHp(battleboardId, tile2Id, hp2);\r\n               return false;}\r\n            }\r\n           }\r\n          \r\n          if (hp1 > hp2) {\r\n              battleboardData.setTileHp(battleboardId, tile1Id, hp1-hp2);\r\n              return true;\r\n          }\r\n          if (hp1 < hp2) {\r\n              battleboardData.setTileHp(battleboardId, tile2Id, hp2-hp1);\r\n              return false;\r\n          }\r\n            if (hp1 == hp2) {\r\n              battleboardData.setTileHp(battleboardId, tile1Id, 1);\r\n              return true;\r\n          }\r\n        //if these titans are still left after 3 rounds, the winner is the one with the most HP. \r\n        //The loser's HP goes to 0 and the winner's HP is reduced by the  losers. In the unlikely event of a tie, the winner gets 1 hp. \r\n        \r\n        }\r\n        function Strike(uint16 bp, uint32 hp, uint16 petPower, uint8 seed) public constant returns (uint16) {\r\n            if (hp > petHpThreshold) {return getRandomNumber(bp+petPower,20,seed);}\r\n            return getRandomNumber(bp,20,seed);\r\n            //Your strike is a return of a random from 20 to bp \r\n        }\r\n        \r\n           \r\n       function fightMonster(uint16 battleboardId, uint8 tile1Id, uint8 monsterId) private {\r\n             //First get the parameters. \r\n           IBattleboardData battleboardData = IBattleboardData(battleboardDataContract);\r\n          \r\n           uint32 hp;\r\n           uint16 monsterHit= getRandomNumber(maxMonsterHit, uint8(minMonsterHit), msg.sender);\r\n           uint64 angelId;\r\n           (, ,,, hp, ,angelId ,,,) = battleboardData.getTileFromBattleboard(battleboardId, tile1Id);\r\n      \r\n           if (getAuraColor(angelId) != 0) { // blue angels are immune to monsters. \r\n           //see if the angel team dies or just loses hp\r\n           if (hp > monsterHit) {\r\n               battleboardData.setTileHp(battleboardId, tile1Id, (hp-monsterHit));\r\n           }\r\n           else {battleboardData.killTile(battleboardId, tile1Id);}\r\n          battleboardData.killMonster(battleboardId, monsterId); \r\n           }\r\n           EventMonsterStrike(battleboardId, angelId, monsterHit);\r\n           \r\n       }\r\n       \r\n       \r\n       function canMove(uint16 battleboardId, uint8 position1, uint8 position2) public constant  returns (bool) {\r\n           //returns true if a piece can move from position 1 to position 2. \r\n           \r\n           //moves up and down are protected from moving off the board by the position numbers. \r\n           //Check if trying to move off the board to left \r\n           if (((position1 % 8) == 1) && ((position2 == position1-1 ) || (position2 == position1 -2))) {return false;}\r\n           if (((position1 % 8) == 2) && (position2 == (position1-2))) {return false;}\r\n           \r\n           //Now check if trying to move off board to right. \r\n            if (((position1 % 8) == 0) && ((position2 == position1+1 ) || (position2 == position1 +2))) {return false;}\r\n           if (((position1 % 8) == 7) && (position2 == (position1+2))) {return false;}\r\n           \r\n             IBattleboardData battleboardData = IBattleboardData(battleboardDataContract);\r\n           //legal move left. Either move one space or move two spaces, with nothing blocking the first move. \r\n           if ((position2 == uint8(safeSubtract(position1,1))) || ((position2 == uint8(safeSubtract(position1,2)))  && (battleboardData.getTileIDbyPosition(battleboardId,position1-1) == 0))) {return true;}\r\n           \r\n           //legal move right\r\n           if ((position2 == position1 +1) || ((position2 == position1 + 2) && (battleboardData.getTileIDbyPosition(battleboardId, position1+1) == 0))) {return true;}\r\n           \r\n           //legal move down\r\n           if ((position2 == position1 +8) || ((position2 == position1 + 16) && (battleboardData.getTileIDbyPosition(battleboardId, position1+8) == 0))) {return true;}\r\n           \r\n           //legal move up\r\n            if ((position2 == uint8(safeSubtract(position1,8))) || ((position2 == uint8(safeSubtract(position1,16)))  && (battleboardData.getTileIDbyPosition(battleboardId,position1-8) == 0))) {return true;}\r\n          return false;\r\n           \r\n       }\r\n       \r\n       \r\n\r\n       \r\n    \r\n       function randomPetAuraBoost (uint64 _petId, uint8 _boost) private  {\r\n       IPetCardData petCardData = IPetCardData(petCardDataContract);\r\n        uint16 auraRed;\r\n        uint16 auraBlue;\r\n        uint16 auraYellow;\r\n        (,,,,auraRed,auraBlue,auraYellow,,,) = petCardData.getPet(_petId);\r\n               uint8 chance = getRandomNumber(2,0,msg.sender);\r\n               if (chance ==0) {petCardData.setPetAuras(_petId, uint8(auraRed + _boost), uint8(auraBlue), uint8(auraYellow));}\r\n               if (chance ==1) {petCardData.setPetAuras(_petId, uint8(auraRed), uint8(auraBlue + _boost), uint8(auraYellow));}\r\n               if (chance ==2) {petCardData.setPetAuras(_petId, uint8(auraRed), uint8(auraBlue), uint8(auraYellow+ _boost));}\r\n               }\r\n         \r\n         \r\n\r\n\r\n\r\n       \r\n       \r\n       function getAuraColor(uint64 angelId) private constant returns (uint8) {\r\n              uint8 angelAura;\r\n            IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\r\n            (,,,angelAura,,,,,,,) = angelCardData.getAngel(angelId);\r\n           return angelAura;\r\n       }\r\n\r\n        function isVulnerable(uint64 _angelId, int8 color) public constant returns (bool) {\r\n            //Returns true if an angel is vulnerable to a certain color trap \r\n            //Red is 1, Yellow is 2, blue is 3\r\n            uint8 angelAura;\r\n            IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\r\n            (,,,angelAura,,,,,,,) = angelCardData.getAngel(_angelId);\r\n            \r\n            if (color == 1) {\r\n                if ((angelAura == 2) || (angelAura == 3) || (angelAura == 4)) {return true;}\r\n            }\r\n            \r\n            if (color == 2) {\r\n                if ((angelAura == 1) || (angelAura == 3) || (angelAura == 5)) {return true;}\r\n            }\r\n            \r\n            if (color == 3) {\r\n                if ((angelAura == 0) || (angelAura == 2) || (angelAura == 5)) {return true;}\r\n            }\r\n            \r\n            \r\n            \r\n        }\r\n  \r\n           function kill() onlyCREATOR external {\r\n        selfdestruct(creatorAddress);\r\n    }\r\n \r\n        \r\nfunction withdrawEther()  onlyCREATOR external {\r\n    creatorAddress.transfer(this.balance);\r\n}\r\n\r\n      \r\n        \r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"medalDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"petHpThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_angelCardDataContract\",\"type\":\"address\"},{\"name\":\"_petCardDataContract\",\"type\":\"address\"},{\"name\":\"_medalDataContract\",\"type\":\"address\"},{\"name\":\"_battleboardDataContract\",\"type\":\"address\"}],\"name\":\"DataContacts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"seraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battleboardDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minMonsterHit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"tileId\",\"type\":\"uint8\"},{\"name\":\"positionTo\",\"type\":\"uint8\"}],\"name\":\"move\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"updateMaintenanceMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_delayHours\",\"type\":\"uint8\"},{\"name\":\"_petHpThreshold\",\"type\":\"uint16\"},{\"name\":\"_maxMonsterHit\",\"type\":\"uint16\"},{\"name\":\"_minMonsterHit\",\"type\":\"uint16\"}],\"name\":\"setVariables\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"tileId\",\"type\":\"uint8\"}],\"name\":\"getAngelInfoByTile\",\"outputs\":[{\"name\":\"bp\",\"type\":\"uint16\"},{\"name\":\"aura\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_angelId\",\"type\":\"uint64\"},{\"name\":\"color\",\"type\":\"int8\"}],\"name\":\"isVulnerable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"maxRandom\",\"type\":\"uint16\"},{\"name\":\"min\",\"type\":\"uint8\"},{\"name\":\"privateAddress\",\"type\":\"address\"}],\"name\":\"getRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintenanceMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldSeraphim\",\"type\":\"address\"}],\"name\":\"removeSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"petCardDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"position1\",\"type\":\"uint8\"},{\"name\":\"position2\",\"type\":\"uint8\"}],\"name\":\"canMove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSeraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSeraphim\",\"type\":\"address\"}],\"name\":\"addSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delayHours\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"angelCardDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"tile1Id\",\"type\":\"uint8\"},{\"name\":\"tile2Id\",\"type\":\"uint8\"}],\"name\":\"getFastest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMonsterHit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bp\",\"type\":\"uint16\"},{\"name\":\"hp\",\"type\":\"uint32\"},{\"name\":\"petPower\",\"type\":\"uint16\"},{\"name\":\"seed\",\"type\":\"uint8\"}],\"name\":\"Strike\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"angel\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"EventMonsterStrike\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"angelId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"color\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"damage\",\"type\":\"uint8\"}],\"name\":\"EventBarrier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"tile1Id\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"tile2Id\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"angel1win\",\"type\":\"bool\"}],\"name\":\"EventBattleResult\",\"type\":\"event\"}]","ContractName":"Battleboards","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5565e1732492c58e71a6554daaece916df5bbddff37ec63a13ed9eb6ac691fec"}]}