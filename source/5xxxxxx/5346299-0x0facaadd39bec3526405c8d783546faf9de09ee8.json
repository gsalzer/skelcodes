{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\ncontract MarriageCertificates {\r\n\r\n    struct CertificateStruct {\r\n        uint256 value;\r\n        string names;\r\n        string partnerDetails;\r\n        uint blockNumber;\r\n        string message;\r\n        bool exists;\r\n    }\r\n\r\n    mapping (address => CertificateStruct) public CertificateStructs;\r\n\r\n    address private owner;\r\n    uint256 private constant minimumCost = 1 finney;\r\n    uint256 private constant maxHoldings = 200 finney;\r\n    address[] private keys;\r\n\r\n\r\n    function MarriageCertificates() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function getCertificateKeys() public constant returns (address[]) {\r\n        return keys;\r\n    }\r\n\r\n    function createCertificate (\r\n        string names,\r\n        string partnerDetails,\r\n        string message\r\n    ) payable public {\r\n        require(msg.value >= 1 finney);\r\n        require(!CertificateStructs[msg.sender].exists);\r\n\r\n        address key = msg.sender;\r\n\r\n        CertificateStructs[key].value = msg.value;\r\n        CertificateStructs[key].names = names;\r\n        CertificateStructs[key].partnerDetails = partnerDetails;\r\n        CertificateStructs[key].message = message;\r\n        CertificateStructs[key].blockNumber = block.number;\r\n        CertificateStructs[key].exists = true;\r\n\r\n        address contractAddress = this;\r\n        if (contractAddress.balance > maxHoldings) {\r\n            owner.transfer(maxHoldings);\r\n        }\r\n\r\n    }\r\n\r\n    function getCertificate (address key) public constant returns (uint256, string, string, string, uint) {\r\n        if (CertificateStructs[key].exists) {\r\n            return (\r\n                CertificateStructs[key].value,\r\n                CertificateStructs[key].names,\r\n                CertificateStructs[key].partnerDetails,\r\n                CertificateStructs[key].message,\r\n                CertificateStructs[key].blockNumber\r\n            );\r\n        }\r\n    }\r\n\r\n    function() public payable {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"CertificateStructs\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"names\",\"type\":\"string\"},{\"name\":\"partnerDetails\",\"type\":\"string\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"names\",\"type\":\"string\"},{\"name\":\"partnerDetails\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"createCertificate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCertificateKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"getCertificate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"MarriageCertificates","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5d4f95ee1d9049999b6414e9d4efd6713757aec45de0a3f2487241003b23ebcb"}]}