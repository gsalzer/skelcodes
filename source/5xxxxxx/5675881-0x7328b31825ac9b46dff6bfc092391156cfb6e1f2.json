{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract NamedToken is ERC20 {\r\n   string public name;\r\n   string public symbol;\r\n}\r\n\r\ncontract BitWich is Pausable {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for ERC20;\r\n    \r\n    event LogBought(address indexed buyer, uint buyCost, uint amount);\r\n    event LogSold(address indexed seller, uint sellValue, uint amount);\r\n    event LogPriceChanged(uint newBuyCost, uint newSellValue);\r\n\r\n    // ERC20 contract to operate over\r\n    ERC20 public erc20Contract;\r\n\r\n    // amount bought - amount sold = amount willing to buy from others\r\n    uint public netAmountBought;\r\n    \r\n    // number of tokens that can be bought from contract per wei sent\r\n    uint public buyCost;\r\n    \r\n    // number of tokens that can be sold to contract per wei received\r\n    uint public sellValue;\r\n    \r\n    constructor(uint _buyCost, \r\n                uint _sellValue,\r\n                address _erc20ContractAddress) public {\r\n        require(_buyCost > 0);\r\n        require(_sellValue > 0);\r\n        \r\n        buyCost = _buyCost;\r\n        sellValue = _sellValue;\r\n        erc20Contract = NamedToken(_erc20ContractAddress);\r\n    }\r\n    \r\n    /* ACCESSORS */\r\n    function tokenName() external view returns (string) {\r\n        return NamedToken(erc20Contract).name();\r\n    }\r\n    \r\n    function tokenSymbol() external view returns (string) {\r\n        return NamedToken(erc20Contract).symbol();\r\n    }\r\n    \r\n    function amountForSale() external view returns (uint) {\r\n        return erc20Contract.balanceOf(address(this));\r\n    }\r\n    \r\n    // Accessor for the cost in wei of buying a certain amount of tokens.\r\n    function getBuyCost(uint _amount) external view returns(uint) {\r\n        uint cost = _amount.div(buyCost);\r\n        if (_amount % buyCost != 0) {\r\n            cost = cost.add(1); // Handles truncating error for odd buyCosts\r\n        }\r\n        return cost;\r\n    }\r\n    \r\n    // Accessor for the value in wei of selling a certain amount of tokens.\r\n    function getSellValue(uint _amount) external view returns(uint) {\r\n        return _amount.div(sellValue);\r\n    }\r\n    \r\n    /* PUBLIC FUNCTIONS */\r\n    // Perform the buy of tokens for ETH and add to the net amount bought\r\n    function buy(uint _minAmountDesired) external payable whenNotPaused {\r\n        processBuy(msg.sender, _minAmountDesired);\r\n    }\r\n    \r\n    // Perform the sell of tokens, send ETH to the seller, and reduce the net amount bought\r\n    // NOTE: seller must call ERC20.approve() first before calling this,\r\n    //       unless they can use ERC20.approveAndCall() directly\r\n    function sell(uint _amount, uint _weiExpected) external whenNotPaused {\r\n        processSell(msg.sender, _amount, _weiExpected);\r\n    }\r\n    \r\n    /* INTERNAL FUNCTIONS */\r\n    // NOTE: _minAmountDesired protects against cost increase between send time and process time\r\n    function processBuy(address _buyer, uint _minAmountDesired) internal {\r\n        uint amountPurchased = msg.value.mul(buyCost);\r\n        require(erc20Contract.balanceOf(address(this)) >= amountPurchased);\r\n        require(amountPurchased >= _minAmountDesired);\r\n        \r\n        netAmountBought = netAmountBought.add(amountPurchased);\r\n        emit LogBought(_buyer, buyCost, amountPurchased);\r\n\r\n        erc20Contract.safeTransfer(_buyer, amountPurchased);\r\n    }\r\n    \r\n    // NOTE: _weiExpected protects against a value decrease between send time and process time\r\n    function processSell(address _seller, uint _amount, uint _weiExpected) internal {\r\n        require(netAmountBought >= _amount);\r\n        require(erc20Contract.allowance(_seller, address(this)) >= _amount);\r\n        uint value = _amount.div(sellValue); // tokens divided by (tokens per wei) equals wei\r\n        require(value >= _weiExpected);\r\n        assert(address(this).balance >= value); // contract should always have enough wei\r\n        _amount = value.mul(sellValue); // in case of rounding down, reduce the _amount sold\r\n        \r\n        netAmountBought = netAmountBought.sub(_amount);\r\n        emit LogSold(_seller, sellValue, _amount);\r\n        \r\n        erc20Contract.safeTransferFrom(_seller, address(this), _amount);\r\n        _seller.transfer(value);\r\n    }\r\n    \r\n    // NOTE: this should never return true unless this contract has a bug \r\n    function lacksFunds() external view returns(bool) {\r\n        return address(this).balance < getRequiredBalance(sellValue);\r\n    }\r\n    \r\n    /* OWNER FUNCTIONS */\r\n    // Owner function to check how much extra ETH is available to cash out\r\n    function amountAvailableToCashout() external view onlyOwner returns (uint) {\r\n        return address(this).balance.sub(getRequiredBalance(sellValue));\r\n    }\r\n\r\n    // Owner function for cashing out extra ETH not needed for buying tokens\r\n    function cashout() external onlyOwner {\r\n        uint requiredBalance = getRequiredBalance(sellValue);\r\n        assert(address(this).balance >= requiredBalance);\r\n        \r\n        owner.transfer(address(this).balance.sub(requiredBalance));\r\n    }\r\n    \r\n    // Owner function for closing the paused contract and cashing out all tokens and ETH\r\n    function close() public onlyOwner whenPaused {\r\n        erc20Contract.transfer(owner, erc20Contract.balanceOf(address(this)));\r\n        selfdestruct(owner);\r\n    }\r\n    \r\n    // Owner accessor to get how much ETH is needed to send \r\n    // in order to change sell price to proposed price\r\n    function extraBalanceNeeded(uint _proposedSellValue) external view onlyOwner returns (uint) {\r\n        uint requiredBalance = getRequiredBalance(_proposedSellValue);\r\n        return (requiredBalance > address(this).balance) ? requiredBalance.sub(address(this).balance) : 0;\r\n    }\r\n    \r\n    // Owner function for adjusting prices (might need to add ETH if raising sell price)\r\n    function adjustPrices(uint _buyCost, uint _sellValue) external payable onlyOwner whenPaused {\r\n        buyCost = _buyCost == 0 ? buyCost : _buyCost;\r\n        sellValue = _sellValue == 0 ? sellValue : _sellValue;\r\n        \r\n        uint requiredBalance = getRequiredBalance(sellValue);\r\n        require(msg.value.add(address(this).balance) >= requiredBalance);\r\n        \r\n        emit LogPriceChanged(buyCost, sellValue);\r\n    }\r\n    \r\n    function getRequiredBalance(uint _proposedSellValue) internal view returns (uint) {\r\n        return netAmountBought.div(_proposedSellValue).add(1);\r\n    }\r\n    \r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // excluding the token intended for this contract\r\n    function transferAnyERC20Token(address _address, uint _tokens) external onlyOwner {\r\n        require(_address != address(erc20Contract));\r\n        \r\n        ERC20(_address).safeTransfer(owner, _tokens);\r\n    }\r\n}\r\n\r\ncontract BitWichLoom is BitWich {\r\n    constructor() \r\n            BitWich(800, 1300, 0xA4e8C3Ec456107eA67d3075bF9e3DF3A75823DB0) public {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBuyCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposedSellValue\",\"type\":\"uint256\"}],\"name\":\"extraBalanceNeeded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getSellValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cashout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyCost\",\"type\":\"uint256\"},{\"name\":\"_sellValue\",\"type\":\"uint256\"}],\"name\":\"adjustPrices\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"netAmountBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20Contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lacksFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountAvailableToCashout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_weiExpected\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minAmountDesired\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sellValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newBuyCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newSellValue\",\"type\":\"uint256\"}],\"name\":\"LogPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BitWichLoom","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bf04941f348a130eecfc1ce467e196729971c028a0c72392f6e243413ecbc59f"}]}