{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title Maths\r\n * A library to make working with numbers in Solidity hurt your brain less.\r\n */\r\nlibrary Maths {\r\n  /**\r\n   * @dev Adds two addends together, returns the sum\r\n   * @param addendA the first addend\r\n   * @param addendB the second addend\r\n   * @return sum the sum of the equation (e.g. addendA + addendB)\r\n   */\r\n  function plus(\r\n    uint256 addendA,\r\n    uint256 addendB\r\n  ) public pure returns (uint256 sum) {\r\n    sum = addendA + addendB;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts the minuend from the subtrahend, returns the difference\r\n   * @param minuend the minuend\r\n   * @param subtrahend the subtrahend\r\n   * @return difference the difference (e.g. minuend - subtrahend)\r\n   */\r\n  function minus(\r\n    uint256 minuend,\r\n    uint256 subtrahend\r\n  ) public pure returns (uint256 difference) {\r\n    assert(minuend >= subtrahend);\r\n    difference = minuend - subtrahend;\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two factors, returns the product\r\n   * @param factorA the first factor\r\n   * @param factorB the second factor\r\n   * @return product the product of the equation (e.g. factorA * factorB)\r\n   */\r\n  function mul(\r\n    uint256 factorA,\r\n    uint256 factorB\r\n  ) public pure returns (uint256 product) {\r\n    if (factorA == 0 || factorB == 0) return 0;\r\n    product = factorA * factorB;\r\n    assert(product / factorA == factorB);\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two factors, returns the product\r\n   * @param factorA the first factor\r\n   * @param factorB the second factor\r\n   * @return product the product of the equation (e.g. factorA * factorB)\r\n   */\r\n  function times(\r\n    uint256 factorA,\r\n    uint256 factorB\r\n  ) public pure returns (uint256 product) {\r\n    return mul(factorA, factorB);\r\n  }\r\n\r\n  /**\r\n   * @dev Divides the dividend by divisor, returns the truncated quotient\r\n   * @param dividend the dividend\r\n   * @param divisor the divisor\r\n   * @return quotient the quotient of the equation (e.g. dividend / divisor)\r\n   */\r\n  function div(\r\n    uint256 dividend,\r\n    uint256 divisor\r\n  ) public pure returns (uint256 quotient) {\r\n    quotient = dividend / divisor;\r\n    assert(quotient * divisor == dividend);\r\n  }\r\n\r\n  /**\r\n   * @dev Divides the dividend by divisor, returns the truncated quotient\r\n   * @param dividend the dividend\r\n   * @param divisor the divisor\r\n   * @return quotient the quotient of the equation (e.g. dividend / divisor)\r\n   */\r\n  function dividedBy(\r\n    uint256 dividend,\r\n    uint256 divisor\r\n  ) public pure returns (uint256 quotient) {\r\n    return div(dividend, divisor);\r\n  }\r\n\r\n  /**\r\n   * @dev Divides the dividend by divisor, returns the quotient and remainder\r\n   * @param dividend the dividend\r\n   * @param divisor the divisor\r\n   * @return quotient the quotient of the equation (e.g. dividend / divisor)\r\n   * @return remainder the remainder of the equation (e.g. dividend % divisor)\r\n   */\r\n  function divideSafely(\r\n    uint256 dividend,\r\n    uint256 divisor\r\n  ) public pure returns (uint256 quotient, uint256 remainder) {\r\n    quotient = div(dividend, divisor);\r\n    remainder = dividend % divisor;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the lesser of two values.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return result the lesser of the two values\r\n   */\r\n  function min(\r\n    uint256 a,\r\n    uint256 b\r\n  ) public pure returns (uint256 result) {\r\n    result = a <= b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the greater of two values.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return result the greater of the two values\r\n   */\r\n  function max(\r\n    uint256 a,\r\n    uint256 b\r\n  ) public pure returns (uint256 result) {\r\n    result = a >= b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines whether a value is less than another.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return isTrue whether a is less than b\r\n   */\r\n  function isLessThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\r\n    isTrue = a < b;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines whether a value is equal to or less than another.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return isTrue whether a is less than or equal to b\r\n   */\r\n  function isAtMost(uint256 a, uint256 b) public pure returns (bool isTrue) {\r\n    isTrue = a <= b;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines whether a value is greater than another.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return isTrue whether a is greater than b\r\n   */\r\n  function isGreaterThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\r\n    isTrue = a > b;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines whether a value is equal to or greater than another.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return isTrue whether a is less than b\r\n   */\r\n  function isAtLeast(uint256 a, uint256 b) public pure returns (bool isTrue) {\r\n    isTrue = a >= b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Manageable\r\n */\r\ncontract Manageable {\r\n  address public owner;\r\n  address public manager;\r\n\r\n  event OwnershipChanged(address indexed previousOwner, address indexed newOwner);\r\n  event ManagementChanged(address indexed previousManager, address indexed newManager);\r\n\r\n  /**\r\n   * @dev The Manageable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Manageable() public {\r\n    owner = msg.sender;\r\n    manager = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner or manager.\r\n   */\r\n  modifier onlyManagement() {\r\n    require(msg.sender == owner || msg.sender == manager);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipChanged(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner or manager to replace the current manager\r\n   * @param newManager The address to give contract management rights.\r\n   */\r\n  function replaceManager(address newManager) public onlyManagement {\r\n    require(newManager != address(0));\r\n    emit ManagementChanged(manager, newManager);\r\n    manager = newManager;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using Maths for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].minus(_value);\r\n    balances[_to] = balances[_to].plus(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n  using Maths for uint256;\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].minus(_value);\r\n    balances[_to] = balances[_to].plus(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].minus(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].plus(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.minus(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Manageable {\r\n  using Maths for uint256;\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyManagement canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.plus(_amount);\r\n    balances[_to] = balances[_to].plus(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyManagement canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract MythexToken is MintableToken {\r\n  using Maths for uint256;\r\n\r\n  string public constant name     = \"Mythex\";\r\n  string public constant symbol   = \"MX\";\r\n  uint8  public constant decimals = 0;\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens assigned to a given address\r\n   * @param _burner The owner of the tokens to be burned\r\n   * @param _value The amount of token to be burned\r\n   * @return True if the operation was successful.\r\n   */\r\n  function burn(address _burner, uint256 _value) public onlyManagement returns (bool) {\r\n    require(_value <= balances[_burner]);\r\n    balances[_burner] = balances[_burner].minus(_value);\r\n    totalSupply_ = totalSupply_.minus(_value);\r\n    emit Burn(_burner, _value);\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"replaceManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagementChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MythexToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"Maths:b5f1efa8a3267cce1aea000dd2cc7a0778aa8299","SwarmSource":"bzzr://4783b487c745e1a8fd6e11efd5eff7e5990a19fa610f931ae80324121928255d"}]}