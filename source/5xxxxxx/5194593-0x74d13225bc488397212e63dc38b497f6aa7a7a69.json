{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract CoinStacks {\r\n\r\n  // Contract owner\r\n  address private admin;\r\n\r\n  // Game parameters\r\n  uint256 private constant BOTTOM_LAYER_BET = 0.005 ether;\r\n  uint16 private constant INITIAL_UNLOCKED_COLUMNS = 10;\r\n  uint256 private maintenanceFeePercent;\r\n  uint private  NUM_COINS_TO_HIT_JACKPOT = 30; // every 30th coin placed win a prize\r\n  uint private MIN_AVG_HEIGHT = 5;\r\n  uint256 private constant JACKPOT_PRIZE = 2 * BOTTOM_LAYER_BET;\r\n\r\n  // Coin stack data representation\r\n  //\r\n  // coordinates are represented by a uint32\r\n  // where the first 16 bits represents the _x value as a 16-bit unsigned int\r\n  // where the second 16 bits represents the _y value as a 16-bit unsigned int\r\n  // For example 0x0010000B corresponse to (_x,_y) = (0x10,0xB) = (16,11)\r\n  // Decoding from _coord to (_x,_y):\r\n  // _x = _coord >> 16\r\n  // _y = _coord & 0xFFFF\r\n  // Encoding (_x,_y) to _coord:\r\n  // _coord = (_x << 16) | _y\r\n\r\n  mapping(uint32 => address) public coordinatesToAddresses;\r\n  uint32[] public coinCoordinates;\r\n\r\n  // Prize\r\n  uint256 public reserveForJackpot;\r\n\r\n  // withdrawable address balance\r\n  mapping(address => uint256) public balances;\r\n\r\n  // Event\r\n  event coinPlacedEvent (\r\n    uint32 _coord,\r\n    address indexed _coinOwner\r\n  );\r\n\r\n  function CoinStacks() public {\r\n    admin = msg.sender;\r\n    maintenanceFeePercent = 1; // Default fee is 1%\r\n    reserveForJackpot = 0;\r\n\r\n    // Set the first coin at the leftmost of the bottom row (0,0)\r\n    coordinatesToAddresses[uint32(0)] = admin;\r\n    coinCoordinates.push(uint32(0));\r\n    coinPlacedEvent(uint32(0),admin);\r\n  }\r\n\r\n  function isThereACoinAtCoordinates(uint16 _x, uint16 _y) public view returns (bool){\r\n    return coordinatesToAddresses[(uint32(_x) << 16) | uint16(_y)] != 0;\r\n  }\r\n\r\n  function getNumCoins() external view returns (uint){\r\n    return coinCoordinates.length;\r\n  }\r\n\r\n  function getAllCoins() external view returns (uint32[]){\r\n    return coinCoordinates;\r\n  }\r\n\r\n  function placeCoin(uint16 _x, uint16 _y) external payable{\r\n    // check no coin has been placed at (_x,_y)\r\n    require(!isThereACoinAtCoordinates(_x,_y));\r\n    // check the coin below has been placed\r\n    require(_y==0 || isThereACoinAtCoordinates(_x,_y-1));\r\n    // cannot place to locked column\r\n    require(_x<INITIAL_UNLOCKED_COLUMNS || coinCoordinates.length >= MIN_AVG_HEIGHT * _x);\r\n\r\n    uint256 betAmount = BOTTOM_LAYER_BET * (uint256(1) << _y); // * pow(2,_y)\r\n\r\n    // check if the user has enough balance to place the current coin\r\n    require(balances[msg.sender] + msg.value >= betAmount);\r\n\r\n    // Add the transaction amount to the user's balance\r\n    // and deduct current coin cost from user's balance\r\n    balances[msg.sender] += (msg.value - betAmount);\r\n\r\n    uint32 coinCoord = (uint32(_x) << 16) | uint16(_y);\r\n\r\n    coinCoordinates.push(coinCoord);\r\n    coordinatesToAddresses[coinCoord] = msg.sender;\r\n\r\n    if(_y==0) { // placing a coin in the bottom layer\r\n      if(reserveForJackpot < JACKPOT_PRIZE) { // goes to jackpot reserve\r\n        reserveForJackpot += BOTTOM_LAYER_BET;\r\n      } else { // otherwise goes to admin\r\n        balances[admin]+= BOTTOM_LAYER_BET;\r\n      }\r\n    } else { // reward the owner of the coin below, minus maintenance fee\r\n      uint256 adminFee = betAmount * maintenanceFeePercent /100;\r\n      balances[coordinatesToAddresses[(uint32(_x) << 16) | _y-1]] +=\r\n        (betAmount - adminFee);\r\n      balances[admin] += adminFee;\r\n    }\r\n\r\n    // hitting jackpot: send jackpot prize if this is every 30 th coin\r\n    if(coinCoordinates.length % NUM_COINS_TO_HIT_JACKPOT == 0){\r\n      balances[msg.sender] += reserveForJackpot;\r\n      reserveForJackpot = 0;\r\n    }\r\n\r\n    //trigger the event\r\n    coinPlacedEvent(coinCoord,msg.sender);\r\n  }\r\n\r\n  // Withdrawing balance\r\n  function withdrawBalance(uint256 _amountToWithdraw) external{\r\n    require(_amountToWithdraw != 0);\r\n    require(balances[msg.sender] >= _amountToWithdraw);\r\n    // Subtract the withdrawn amount from the user's balance\r\n    balances[msg.sender] -= _amountToWithdraw;\r\n\r\n    msg.sender.transfer(_amountToWithdraw);\r\n  }\r\n\r\n  //transfer ownership of the contract\r\n  function transferOwnership(address _newOwner) external {\r\n    require (msg.sender == admin);\r\n    admin = _newOwner;\r\n  }\r\n\r\n  //change maintenance fee\r\n  function setFeePercent(uint256 _newPercent) external {\r\n    require (msg.sender == admin);\r\n    if(_newPercent<=2) // Fee will never exceed 2%\r\n      maintenanceFeePercent = _newPercent;\r\n  }\r\n\r\n  //fallback function for handling unexpected payment\r\n  function() external payable{\r\n    //if any ether is sent to the address, credit the admin balance\r\n    balances[admin] += msg.value;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"coordinatesToAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coinCoordinates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveForJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllCoins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumCoins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint16\"},{\"name\":\"_y\",\"type\":\"uint16\"}],\"name\":\"isThereACoinAtCoordinates\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint16\"},{\"name\":\"_y\",\"type\":\"uint16\"}],\"name\":\"placeCoin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_coord\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"_coinOwner\",\"type\":\"address\"}],\"name\":\"coinPlacedEvent\",\"type\":\"event\"}]","ContractName":"CoinStacks","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://780ed1bd7dcca6041e67ea6a5ce364f4ef88e8979c016971b1cd6f4e7cca2345"}]}