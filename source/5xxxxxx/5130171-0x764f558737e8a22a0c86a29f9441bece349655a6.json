{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// krypteum public sale contract\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// Owned contract\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Owned {\r\n\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  // Events ---------------------------\r\n\r\n  event OwnershipTransferProposed(address indexed _from, address indexed _to);\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  // Modifier -------------------------\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // Functions ------------------------\r\n\r\n  function Owned() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != owner);\r\n    require(_newOwner != address(0x0));\r\n    OwnershipTransferProposed(owner, _newOwner);\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Interface {\r\n\r\n  // Events ---------------------------\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n  // Functions ------------------------\r\n\r\n  function totalSupply() public constant returns (uint);\r\n  function balanceOf(address _owner) public constant returns (uint balance);\r\n  function transfer(address _to, uint _value) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n  function approve(address _spender, uint _value) public returns (bool success);\r\n  function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC Coin Standard #20\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Coin is ERC20Interface, Owned {\r\n  \r\n  using SafeMath for uint;\r\n\r\n  uint public coinsIssuedTotal = 0;\r\n  mapping(address => uint) public balances;\r\n  mapping(address => mapping (address => uint)) public allowed;\r\n\r\n  // Functions ------------------------\r\n\r\n  /* Total coin supply */\r\n\r\n  function totalSupply() public constant returns (uint) {\r\n    return coinsIssuedTotal;\r\n  }\r\n\r\n  /* Get the account balance for an address */\r\n\r\n  function balanceOf(address _owner) public constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /* Transfer the balance from owner's account to another account */\r\n\r\n  function transfer(address _to, uint _amount) public returns (bool success) {\r\n    // amount sent cannot exceed balance\r\n    require(balances[msg.sender] >= _amount);\r\n\r\n    // update balances\r\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n\r\n    // log event\r\n    Transfer(msg.sender, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /* Allow _spender to withdraw from your account up to _amount */\r\n\r\n  function approve(address _spender, uint _amount) public returns (bool success) {\r\n    // approval amount cannot exceed the balance\r\n    require (balances[msg.sender] >= _amount);\r\n      \r\n    // update allowed amount\r\n    allowed[msg.sender][_spender] = _amount;\r\n    \r\n    // log event\r\n    Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /* Spender of coins transfers coins from the owner's balance */\r\n  /* Must be pre-approved by owner */\r\n\r\n  function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\r\n    // balance checks\r\n    require(balances[_from] >= _amount);\r\n    require(allowed[_from][msg.sender] >= _amount);\r\n\r\n    // update balances and allowed amount\r\n    balances[_from] = balances[_from].sub(_amount);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n\r\n    // log event\r\n    Transfer(_from, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /* Returns the amount of coins approved by the owner */\r\n  /* that can be transferred by spender */\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract krypteum is ERC20Coin {\r\n\r\n  /* Basic coin data */\r\n\r\n  string public constant name = \"krypteum\";\r\n  string public constant symbol = \"KTM\";\r\n  uint8  public constant decimals = 2;\r\n\r\n  /* Wallet and Admin addresses - initially set to owner at deployment */\r\n\r\n  address public wallet;\r\n  address public administrator;\r\n\r\n  /* ICO dates */\r\n\r\n  uint public constant DATE_ICO_START = 1518480000; // 13-Feb-2018 00:00 GMT\r\n  uint public constant DATE_ICO_END   = 1522713540; // 2-Apr-2018 23:59 GMT\r\n\r\n  /* ICO coins per ETH */\r\n  uint public constant COIN_COST_ICO_TIER_1 = 110 finney; // 0.11 ETH\r\n  uint public constant COIN_COST_ICO_TIER_2 = 120 finney; // 0.12 ETH\r\n  uint public constant COIN_COST_ICO_TIER_3 = 130 finney; // 0.13 ETH\r\n\r\n  /* ICO and other coin supply parameters */\r\n\r\n  uint public constant COIN_SUPPLY_ICO_TIER_1 = 50000; // 50K coins\r\n  uint public constant COIN_SUPPLY_ICO_TIER_2 = 25000; // 25K coins\r\n  uint public constant COIN_SUPPLY_ICO_TIER_3 = 25000; // 25K coins\r\n  uint public constant COIN_SUPPLY_ICO_TOTAL =         // 100K coins\r\n    COIN_SUPPLY_ICO_TIER_1 + COIN_SUPPLY_ICO_TIER_2 + COIN_SUPPLY_ICO_TIER_3;\r\n\r\n  uint public constant COIN_SUPPLY_MARKETING_TOTAL =   200000; // 200K coins\r\n\r\n  /* Other ICO parameters */\r\n\r\n  uint public constant COOLDOWN_PERIOD =  24 hours;\r\n\r\n  /* Crowdsale variables */\r\n\r\n  uint public icoEtherReceived = 0; // Ether actually received by the contract\r\n  uint public coinsIssuedMkt = 0;\r\n  uint public coinsIssuedIco  = 0;\r\n  uint[] public numberOfCoinsAvailableInIcoTier;\r\n  uint[] public costOfACoinInWeiForTier;\r\n\r\n  /* Keep track of Ether contributed and coins received during Crowdsale */\r\n\r\n  mapping(address => uint) public icoEtherContributed;\r\n  mapping(address => uint) public icoCoinsReceived;\r\n\r\n  /* Keep track of participants who\r\n  /* - have reclaimed their contributions in case of failed Crowdsale */\r\n  /* - are locked */\r\n\r\n  mapping(address => bool) public locked;\r\n\r\n  // Events ---------------------------\r\n\r\n  event WalletUpdated(address _newWallet);\r\n  event AdministratorUpdated(address _newAdministrator);\r\n  event CoinsMinted(address indexed _owner, uint _coins, uint _balance);\r\n  event CoinsIssued(address indexed _owner, uint _coins, uint _balance, uint _etherContributed);\r\n  event LockRemoved(address indexed _participant);\r\n\r\n  // Basic Functions ------------------\r\n\r\n  /* Initialize (owner is set to msg.sender by Owned.Owned() */\r\n\r\n  function krypteum() public {\r\n    wallet = owner;\r\n    administrator = owner;\r\n\r\n    numberOfCoinsAvailableInIcoTier.length = 3;\r\n    numberOfCoinsAvailableInIcoTier[0] = COIN_SUPPLY_ICO_TIER_1;\r\n    numberOfCoinsAvailableInIcoTier[1] = COIN_SUPPLY_ICO_TIER_2;\r\n    numberOfCoinsAvailableInIcoTier[2] = COIN_SUPPLY_ICO_TIER_3;\r\n\r\n    costOfACoinInWeiForTier.length = 3;\r\n    costOfACoinInWeiForTier[0] = COIN_COST_ICO_TIER_1;\r\n    costOfACoinInWeiForTier[1] = COIN_COST_ICO_TIER_2;\r\n    costOfACoinInWeiForTier[2] = COIN_COST_ICO_TIER_3;\r\n  }\r\n\r\n  /* Fallback */\r\n\r\n  function () public payable {\r\n    buyCoins();\r\n  }\r\n\r\n  // Information functions ------------\r\n\r\n  /* What time is it? */\r\n\r\n  function atNow() public constant returns (uint) {\r\n    return now;\r\n  }\r\n\r\n    /* Are coins transferable? */\r\n\r\n  function isTransferable() public constant returns (bool transferable) {\r\n      return atNow() >= DATE_ICO_END + COOLDOWN_PERIOD;\r\n  }\r\n\r\n  // Lock functions -------------------\r\n\r\n  /* Manage locked */\r\n\r\n  function removeLock(address _participant) public {\r\n    require(msg.sender == administrator || msg.sender == owner);\r\n\r\n    locked[_participant] = false;\r\n    LockRemoved(_participant);\r\n  }\r\n\r\n  function removeLockMultiple(address[] _participants) public {\r\n    require(msg.sender == administrator || msg.sender == owner);\r\n\r\n    for (uint i = 0; i < _participants.length; i++) {\r\n      locked[_participants[i]] = false;\r\n      LockRemoved(_participants[i]);\r\n    }\r\n  }\r\n\r\n  // Owner Functions ------------------\r\n\r\n  /* Change the crowdsale wallet address */\r\n\r\n  function setWallet(address _wallet) public onlyOwner {\r\n    require(_wallet != address(0x0));\r\n    wallet = _wallet;\r\n    WalletUpdated(wallet);\r\n  }\r\n\r\n  /* Change the administrator address */\r\n\r\n  function setAdministrator(address _admin) public onlyOwner {\r\n    require(_admin != address(0x0));\r\n    administrator = _admin;\r\n    AdministratorUpdated(administrator);\r\n  }\r\n\r\n  /* Granting / minting of marketing coins by owner */\r\n\r\n  function grantCoins(address _participant, uint _coins) public onlyOwner {\r\n    // check amount\r\n    require(_coins <= COIN_SUPPLY_MARKETING_TOTAL.sub(coinsIssuedMkt));\r\n\r\n    // update balances\r\n    balances[_participant] = balances[_participant].add(_coins);\r\n    coinsIssuedMkt = coinsIssuedMkt.add(_coins);\r\n    coinsIssuedTotal = coinsIssuedTotal.add(_coins);\r\n\r\n    // locked\r\n    locked[_participant] = true;\r\n\r\n    // log the minting\r\n    Transfer(0x0, _participant, _coins);\r\n    CoinsMinted(_participant, _coins, balances[_participant]);\r\n  }\r\n\r\n  /* Transfer out any accidentally sent ERC20 tokens */\r\n\r\n  function transferAnyERC20Token(address tokenAddress, uint amount) public onlyOwner returns (bool success) {\r\n      return ERC20Interface(tokenAddress).transfer(owner, amount);\r\n  }\r\n\r\n  // Private functions ----------------\r\n\r\n  /* Accept ETH during crowdsale (called by default function) */\r\n\r\n  function buyCoins() private {\r\n    uint ts = atNow();\r\n    uint coins = 0;\r\n    uint change = 0;\r\n\r\n    // check dates for ICO\r\n    require(DATE_ICO_START < ts && ts < DATE_ICO_END);\r\n\r\n    (coins, change) = calculateCoinsPerWeiAndUpdateAvailableIcoCoins(msg.value);\r\n\r\n    // ICO coins are available to be sold.\r\n    require(coins > 0);\r\n\r\n    // ICO coin volume cap\r\n    require(coinsIssuedIco.add(coins).add(sumOfAvailableIcoCoins()) == COIN_SUPPLY_ICO_TOTAL);\r\n\r\n    // change is not given back unless we're selling the last available ICO coins.\r\n    require(change == 0 || coinsIssuedIco.add(coins) == COIN_SUPPLY_ICO_TOTAL);\r\n\r\n    // register coins\r\n    balances[msg.sender] = balances[msg.sender].add(coins);\r\n    icoCoinsReceived[msg.sender] = icoCoinsReceived[msg.sender].add(coins);\r\n    coinsIssuedIco = coinsIssuedIco.add(coins);\r\n    coinsIssuedTotal = coinsIssuedTotal.add(coins);\r\n\r\n    // register Ether\r\n    icoEtherReceived = icoEtherReceived.add(msg.value).sub(change);\r\n    icoEtherContributed[msg.sender] = icoEtherContributed[msg.sender].add(msg.value).sub(change);\r\n\r\n    // locked\r\n    locked[msg.sender] = true;\r\n\r\n    // log coin issuance\r\n    Transfer(0x0, msg.sender, coins);\r\n    CoinsIssued(msg.sender, coins, balances[msg.sender], msg.value.sub(change));\r\n\r\n    // return a change if not enough ICO coins left\r\n    if (change > 0)\r\n       msg.sender.transfer(change);\r\n\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function sumOfAvailableIcoCoins() internal constant returns (uint totalAvailableIcoCoins) {\r\n    totalAvailableIcoCoins = 0;\r\n    for (uint8 i = 0; i < numberOfCoinsAvailableInIcoTier.length; i++) {\r\n      totalAvailableIcoCoins = totalAvailableIcoCoins.add(numberOfCoinsAvailableInIcoTier[i]);\r\n    }\r\n  }\r\n\r\n  function calculateCoinsPerWeiAndUpdateAvailableIcoCoins(uint value) internal returns (uint coins, uint change) {\r\n    coins = 0;\r\n    change = value;\r\n\r\n    for (uint8 i = 0; i < numberOfCoinsAvailableInIcoTier.length; i++) {\r\n      uint costOfAvailableCoinsInCurrentTier = numberOfCoinsAvailableInIcoTier[i].mul(costOfACoinInWeiForTier[i]);\r\n\r\n      if (change <= costOfAvailableCoinsInCurrentTier) {\r\n        uint coinsInCurrentTierToBuy = change.div(costOfACoinInWeiForTier[i]);\r\n        coins = coins.add(coinsInCurrentTierToBuy);\r\n        numberOfCoinsAvailableInIcoTier[i] = numberOfCoinsAvailableInIcoTier[i].sub(coinsInCurrentTierToBuy);\r\n        change = 0;\r\n        break;\r\n      }\r\n\r\n      coins = coins.add(numberOfCoinsAvailableInIcoTier[i]);\r\n      change = change.sub(costOfAvailableCoinsInCurrentTier);\r\n      numberOfCoinsAvailableInIcoTier[i] = 0;\r\n    }\r\n  }\r\n\r\n  // ERC20 functions ------------------\r\n\r\n  /* Override \"transfer\" (ERC20) */\r\n\r\n  function transfer(address _to, uint _amount) public returns (bool success) {\r\n    require(isTransferable());\r\n    require(locked[msg.sender] == false);\r\n    require(locked[_to] == false);\r\n\r\n    return super.transfer(_to, _amount);\r\n  }\r\n\r\n  /* Override \"transferFrom\" (ERC20) */\r\n\r\n  function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\r\n    require(isTransferable());\r\n    require(locked[_from] == false);\r\n    require(locked[_to] == false);\r\n\r\n    return super.transferFrom(_from, _to, _amount);\r\n  }\r\n\r\n  // External functions ---------------\r\n\r\n  /* Multiple coin transfers from one address to save gas */\r\n  /* (longer _amounts array not accepted = sanity check) */\r\n\r\n  function transferMultiple(address[] _addresses, uint[] _amounts) external {\r\n    require(isTransferable());\r\n    require(locked[msg.sender] == false);\r\n    require(_addresses.length == _amounts.length);\r\n\r\n    for (uint i = 0; i < _addresses.length; i++) {\r\n      if (locked[_addresses[i]] == false)\r\n         super.transfer(_addresses[i], _amounts[i]);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransferable\",\"outputs\":[{\"name\":\"transferable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"costOfACoinInWeiForTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoEtherContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"removeLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoCoinsReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinsIssuedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COOLDOWN_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COIN_SUPPLY_MARKETING_TOTAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COIN_SUPPLY_ICO_TIER_3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinsIssuedIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DATE_ICO_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COIN_COST_ICO_TIER_1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numberOfCoinsAvailableInIcoTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DATE_ICO_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COIN_SUPPLY_ICO_TIER_1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COIN_SUPPLY_ICO_TOTAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COIN_COST_ICO_TIER_3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinsIssuedMkt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COIN_SUPPLY_ICO_TIER_2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_coins\",\"type\":\"uint256\"}],\"name\":\"grantCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEtherReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COIN_COST_ICO_TIER_2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"removeLockMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"WalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newAdministrator\",\"type\":\"address\"}],\"name\":\"AdministratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_coins\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"CoinsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_coins\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_etherContributed\",\"type\":\"uint256\"}],\"name\":\"CoinsIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"LockRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"krypteum","CompilerVersion":"v0.4.20-nightly.2018.1.6+commit.2548228b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1d2cae4142af613602fafcfbd820f257d7bada2e3305baecaea7d887f040edaa"}]}