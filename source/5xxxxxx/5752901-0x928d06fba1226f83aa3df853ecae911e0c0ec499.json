{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/** \r\n* MonetaryCoin Distribution \r\n* full source code:\r\n* https://github.com/Monetary-Foundation/MonetaryCoin\r\n*/\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title MineableToken\r\n * @dev ERC20 Token with Pos mining.\r\n * The blockReward_ is controlled by a GDP oracle tied to the national identity or currency union identity of the subject MonetaryCoin.\r\n * This type of mining will be used during both the initial distribution period and when GDP growth is positive.\r\n * For mining during negative growth period please refer to MineableM5Token.sol. \r\n * Unlike standard erc20 token, the totalSupply is sum(all user balances) + totalStake instead of sum(all user balances).\r\n*/\r\ncontract MineableToken is MintableToken { \r\n  event Commit(address indexed from, uint value,uint atStake, int onBlockReward);\r\n  event Withdraw(address indexed from, uint reward, uint commitment);\r\n\r\n  uint256 totalStake_ = 0;\r\n  int256 blockReward_;         //could be positive or negative according to GDP\r\n\r\n  struct Commitment {\r\n    uint256 value;             // value commited to mining\r\n    uint256 onBlockNumber;     // commitment done on block\r\n    uint256 atStake;           // stake during commitment\r\n    int256 onBlockReward;\r\n  }\r\n\r\n  mapping( address => Commitment ) miners;\r\n\r\n  /**\r\n  * @dev commit _value for minning\r\n  * @notice the _value will be substructed from user balance and added to the stake.\r\n  * if user previously commited, add to an existing commitment. \r\n  * this is done by calling withdraw() then commit back previous commit + reward + new commit \r\n  * @param _value The amount to be commited.\r\n  * @return the commit value: _value OR prevCommit + reward + _value\r\n  */\r\n  function commit(uint256 _value) public returns (uint256 commitmentValue) {\r\n    require(0 < _value);\r\n    require(_value <= balances[msg.sender]);\r\n    \r\n    commitmentValue = _value;\r\n    uint256 prevCommit = miners[msg.sender].value;\r\n    //In case user already commited, withdraw and recommit \r\n    // new commitment value: prevCommit + reward + _value\r\n    if (0 < prevCommit) {\r\n      // withdraw Will revert if reward is negative\r\n      uint256 prevReward;\r\n      (prevReward, prevCommit) = withdraw();\r\n      commitmentValue = prevReward.add(prevCommit).add(_value);\r\n    }\r\n\r\n    // sub will revert if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(commitmentValue);\r\n    emit Transfer(msg.sender, address(0), commitmentValue);\r\n\r\n    totalStake_ = totalStake_.add(commitmentValue);\r\n\r\n    miners[msg.sender] = Commitment(\r\n      commitmentValue, // Commitment.value\r\n      block.number, // onBlockNumber\r\n      totalStake_, // atStake = current stake + commitments value\r\n      blockReward_ // onBlockReward\r\n      );\r\n    \r\n    emit Commit(msg.sender, commitmentValue, totalStake_, blockReward_); // solium-disable-line\r\n\r\n    return commitmentValue;\r\n  }\r\n\r\n  /**\r\n  * @dev withdraw reward\r\n  * @return {\r\n    \"uint256 reward\": the new supply\r\n    \"uint256 commitmentValue\": the commitment to be returned\r\n    }\r\n  */\r\n  function withdraw() public returns (uint256 reward, uint256 commitmentValue) {\r\n    require(miners[msg.sender].value > 0); \r\n\r\n    //will revert if reward is negative:\r\n    reward = getReward(msg.sender);\r\n\r\n    Commitment storage commitment = miners[msg.sender];\r\n    commitmentValue = commitment.value;\r\n\r\n    uint256 withdrawnSum = commitmentValue.add(reward);\r\n    \r\n    totalStake_ = totalStake_.sub(commitmentValue);\r\n    totalSupply_ = totalSupply_.add(reward);\r\n    \r\n    balances[msg.sender] = balances[msg.sender].add(withdrawnSum);\r\n    emit Transfer(address(0), msg.sender, commitmentValue.add(reward));\r\n    \r\n    delete miners[msg.sender];\r\n    \r\n    emit Withdraw(msg.sender, reward, commitmentValue);  // solium-disable-line\r\n    return (reward, commitmentValue);\r\n  }\r\n\r\n  /**\r\n  * @dev Calculate the reward if withdraw() happans on this block\r\n  * @notice The reward is calculated by the formula:\r\n  * (numberOfBlocks) * (effectiveBlockReward) * (commitment.value) / (effectiveStake) \r\n  * effectiveBlockReward is the average between the block reward during commit and the block reward during the call\r\n  * effectiveStake is the average between the stake during the commit and the stake during call (liniar aproximation)\r\n  * @return An uint256 representing the reward amount\r\n  */ \r\n  function getReward(address _miner) public view returns (uint256) {\r\n    if (miners[_miner].value == 0) {\r\n      return 0;\r\n    }\r\n\r\n    Commitment storage commitment = miners[_miner];\r\n\r\n    int256 averageBlockReward = signedAverage(commitment.onBlockReward, blockReward_);\r\n    \r\n    require(0 <= averageBlockReward);\r\n    \r\n    uint256 effectiveBlockReward = uint256(averageBlockReward);\r\n    \r\n    uint256 effectiveStake = average(commitment.atStake, totalStake_);\r\n    \r\n    uint256 numberOfBlocks = block.number.sub(commitment.onBlockNumber);\r\n\r\n    uint256 miningReward = numberOfBlocks.mul(effectiveBlockReward).mul(commitment.value).div(effectiveStake);\r\n       \r\n    return miningReward;\r\n  }\r\n\r\n  /**\r\n  * @dev Calculate the average of two integer numbers \r\n  * @notice 1.5 will be rounded toward zero\r\n  * @return An uint256 representing integer average\r\n  */\r\n  function average(uint256 a, uint256 b) public pure returns (uint256) {\r\n    return a.add(b).div(2);\r\n  }\r\n\r\n  /**\r\n  * @dev Calculate the average of two signed integers numbers \r\n  * @notice 1.5 will be toward zero\r\n  * @return An int256 representing integer average\r\n  */\r\n  function signedAverage(int256 a, int256 b) public pure returns (int256) {\r\n    int256 ans = a + b;\r\n\r\n    if (a > 0 && b > 0 && ans <= 0) {\r\n      require(false);\r\n    }\r\n    if (a < 0 && b < 0 && ans >= 0) {\r\n      require(false);\r\n    }\r\n\r\n    return ans / 2;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the commitment of the specified address.\r\n  * @param _miner The address to query the the commitment Of\r\n  * @return the amount commited.\r\n  */\r\n  function commitmentOf(address _miner) public view returns (uint256) {\r\n    return miners[_miner].value;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the all fields for the commitment of the specified address.\r\n  * @param _miner The address to query the the commitment Of\r\n  * @return {\r\n    \"uint256 value\": the amount commited.\r\n    \"uint256 onBlockNumber\": block number of commitment.\r\n    \"uint256 atStake\": stake when commited.\r\n    \"int256 onBlockReward\": block reward when commited.\r\n    }\r\n  */\r\n  function getCommitment(address _miner) public view \r\n  returns (\r\n    uint256 value,             // value commited to mining\r\n    uint256 onBlockNumber,     // commited on block\r\n    uint256 atStake,           // stake during commit\r\n    int256 onBlockReward       // block reward during commit\r\n    ) \r\n  {\r\n    value = miners[_miner].value;\r\n    onBlockNumber = miners[_miner].onBlockNumber;\r\n    atStake = miners[_miner].atStake;\r\n    onBlockReward = miners[_miner].onBlockReward;\r\n  }\r\n\r\n  /**\r\n  * @dev the total stake\r\n  * @return the total stake\r\n  */\r\n  function totalStake() public view returns (uint256) {\r\n    return totalStake_;\r\n  }\r\n\r\n  /**\r\n  * @dev the block reward\r\n  * @return the current block reward\r\n  */\r\n  function blockReward() public view returns (int256) {\r\n    return blockReward_;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title MCoinDistribution\r\n * @dev MCoinDistribution\r\n * MCoinDistribution is used to distribute a fixed amount of token per window of time.\r\n * Users may commit Ether to a window of their choice.\r\n * After a window closes, a user may withdraw their reward using the withdraw(uint256 window) function or use the withdrawAll() \r\n * function to get tokens from all windows in a single transaction.\r\n * The amount of tokens allocated to a user for a given window equals (window allocation) * (user eth) / (total eth).\r\n * A user can get the details of the current window with the detailsOfWindow() function.\r\n * The first-period allocation is larger than second-period allocation (per window). \r\n */\r\ncontract MCoinDistribution is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  event Commit(address indexed from, uint256 value, uint256 window);\r\n  event Withdraw(address indexed from, uint256 value, uint256 window);\r\n  event MoveFunds(uint256 value);\r\n\r\n  MineableToken public MCoin;\r\n\r\n  uint256 public firstPeriodWindows;\r\n  uint256 public firstPeriodSupply;\r\n \r\n  uint256 public secondPeriodWindows;\r\n  uint256 public secondPeriodSupply;\r\n  \r\n  uint256 public totalWindows;  // firstPeriodWindows + secondPeriodSupply\r\n\r\n  address public foundationWallet;\r\n\r\n  uint256 public startTimestamp;\r\n  uint256 public windowLength;         // in seconds\r\n\r\n  mapping (uint256 => uint256) public totals;\r\n  mapping (address => mapping (uint256 => uint256)) public commitment;\r\n  \r\n  constructor(\r\n    uint256 _firstPeriodWindows,\r\n    uint256 _firstPeriodSupply,\r\n    uint256 _secondPeriodWindows,\r\n    uint256 _secondPeriodSupply,\r\n    address _foundationWallet,\r\n    uint256 _startTimestamp,\r\n    uint256 _windowLength\r\n  ) public \r\n  {\r\n    require(0 < _firstPeriodWindows);\r\n    require(0 < _firstPeriodSupply);\r\n    require(0 < _secondPeriodWindows);\r\n    require(0 < _secondPeriodSupply);\r\n    require(0 < _startTimestamp);\r\n    require(0 < _windowLength);\r\n    require(_foundationWallet != address(0));\r\n    \r\n    firstPeriodWindows = _firstPeriodWindows;\r\n    firstPeriodSupply = _firstPeriodSupply;\r\n    secondPeriodWindows = _secondPeriodWindows;\r\n    secondPeriodSupply = _secondPeriodSupply;\r\n    foundationWallet = _foundationWallet;\r\n    startTimestamp = _startTimestamp;\r\n    windowLength = _windowLength;\r\n\r\n    totalWindows = firstPeriodWindows.add(secondPeriodWindows);\r\n    require(currentWindow() == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Commit used as a fallback\r\n   */\r\n  function () public payable {\r\n    commit();\r\n  }\r\n\r\n  /**\r\n  * @dev initiate the distribution\r\n  * @param _MCoin the token to distribute\r\n  */\r\n  function init(MineableToken _MCoin) public onlyOwner {\r\n    require(address(MCoin) == address(0));\r\n    require(_MCoin.owner() == address(this));\r\n    require(_MCoin.totalSupply() == 0);\r\n\r\n    MCoin = _MCoin;\r\n    MCoin.mint(address(this), firstPeriodSupply.add(secondPeriodSupply));\r\n    MCoin.finishMinting();\r\n  }\r\n\r\n  /**\r\n  * @dev return allocation for given window\r\n  * @param window the desired window\r\n  * @return the number of tokens to distribute in the given window\r\n  */\r\n  function allocationFor(uint256 window) view public returns (uint256) {\r\n    require(window < totalWindows);\r\n    \r\n    return (window < firstPeriodWindows) \r\n      ? firstPeriodSupply.div(firstPeriodWindows) \r\n      : secondPeriodSupply.div(secondPeriodWindows);\r\n  }\r\n\r\n  /**\r\n  * @dev Return the window number for given timestamp\r\n  * @param timestamp \r\n  * @return number of the current window in [0,inf)\r\n  * zero will be returned before distribution start and during the first window.\r\n  */\r\n  function windowOf(uint256 timestamp) view public returns (uint256) {\r\n    return (startTimestamp < timestamp) \r\n      ? timestamp.sub(startTimestamp).div(windowLength) \r\n      : 0;\r\n  }\r\n\r\n  /**\r\n  * @dev Return information about the selected window\r\n  * @param window number: [0-totalWindows)\r\n  * @return {\r\n    \"uint256 start\": window start timestamp\r\n    \"uint256 end\": window end timestamp\r\n    \"uint256 remainingTime\": remaining time (sec), zero if ended\r\n    \"uint256 allocation\": number of tokens to be distributed\r\n    \"uint256 totalEth\": total eth commited this window\r\n    \"uint256 number\": # of requested window\r\n    }\r\n  */\r\n  function detailsOf(uint256 window) view public \r\n    returns (\r\n      uint256 start,  // window start timestamp\r\n      uint256 end,    // window end timestamp\r\n      uint256 remainingTime, // remaining time (sec), zero if ended\r\n      uint256 allocation,    // number of tokens to be distributed\r\n      uint256 totalEth,      // total eth commited this window\r\n      uint256 number         // # of requested window\r\n    ) \r\n    {\r\n    require(window < totalWindows);\r\n    start = startTimestamp.add(windowLength.mul(window));\r\n    end = start.add(windowLength);\r\n    remainingTime = (block.timestamp < end) // solium-disable-line\r\n      ? end.sub(block.timestamp)            // solium-disable-line\r\n      : 0; \r\n\r\n    allocation = allocationFor(window);\r\n    totalEth = totals[window];\r\n    return (start, end, remainingTime, allocation, totalEth, window);\r\n  }\r\n\r\n  /**\r\n  * @dev Return information for the current window\r\n  * @return {\r\n    \"uint256 start\": window start timestamp\r\n    \"uint256 end\": window end timestamp\r\n    \"uint256 remainingTime\": remaining time (sec), zero if ended\r\n    \"uint256 allocation\": number of tokens to be distributed\r\n    \"uint256 totalEth\": total eth commited this window\r\n    \"uint256 number\": # of requested window\r\n    }\r\n  */\r\n  function detailsOfWindow() view public\r\n    returns (\r\n      uint256 start,  // window start timestamp\r\n      uint256 end,    // window end timestamp\r\n      uint256 remainingTime, // remaining time (sec), zero if ended\r\n      uint256 allocation,    // number of tokens to be distributed\r\n      uint256 totalEth,      // total eth commited this window\r\n      uint256 number         // current window\r\n    )\r\n  {\r\n    return (detailsOf(currentWindow()));\r\n  }\r\n\r\n  /**\r\n  * @dev return the number of the current window\r\n  * @return the window, range: [0-totalWindows)\r\n  */\r\n  function currentWindow() view public returns (uint256) {\r\n    return windowOf(block.timestamp); // solium-disable-line\r\n  }\r\n\r\n  /**\r\n  * @dev commit funds for a given window\r\n  * Tokens for commited window need to be withdrawn after\r\n  * window closes using withdraw(uint256 window) function\r\n  * first window: 0\r\n  * last window: totalWindows - 1\r\n  * @param window to commit [0-totalWindows)\r\n  */\r\n  function commitOn(uint256 window) public payable {\r\n    // Distribution didn't ended\r\n    require(currentWindow() < totalWindows);\r\n    // Commit only for present or future windows\r\n    require(currentWindow() <= window);\r\n    // Don't commit after distribution is finished\r\n    require(window < totalWindows);\r\n    // Minimum commitment\r\n    require(0.01 ether <= msg.value);\r\n\r\n    // Add commitment for user on given window\r\n    commitment[msg.sender][window] = commitment[msg.sender][window].add(msg.value);\r\n    // Add to window total\r\n    totals[window] = totals[window].add(msg.value);\r\n    // Log\r\n    emit Commit(msg.sender, msg.value, window);\r\n  }\r\n\r\n  /**\r\n  * @dev commit funds for the current window\r\n  */\r\n  function commit() public payable {\r\n    commitOn(currentWindow());\r\n  }\r\n  \r\n  /**\r\n  * @dev Withdraw tokens after the window has closed\r\n  * @param window to withdraw \r\n  * @return the calculated number of tokens\r\n  */\r\n  function withdraw(uint256 window) public returns (uint256 reward) {\r\n    // Requested window already been closed\r\n    require(window < currentWindow());\r\n    // The sender hasn't made a commitment for requested window\r\n    if (commitment[msg.sender][window] == 0) {\r\n      return 0;\r\n    }\r\n\r\n    // The Price for given window is allocation / total_commitment\r\n    // uint256 price = allocationFor(window).div(totals[window]);\r\n    // The reward is price * commitment\r\n    // uint256 reward = price.mul(commitment[msg.sender][window]);\r\n    \r\n    // Same calculation optimized for accuracy (without the .div rounding for price calculation):\r\n    reward = allocationFor(window).mul(commitment[msg.sender][window]).div(totals[window]);\r\n    \r\n    // Init the commitment\r\n    commitment[msg.sender][window] = 0;\r\n    // Transfer the tokens\r\n    MCoin.transfer(msg.sender, reward);\r\n    // Log\r\n    emit Withdraw(msg.sender, reward, window);\r\n    return reward;\r\n  }\r\n\r\n  /**\r\n  * @dev get the reward from all closed windows\r\n  */\r\n  function withdrawAll() public {\r\n    for (uint256 i = 0; i < currentWindow(); i++) {\r\n      withdraw(i);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev returns a array which contains reward for every closed window\r\n  * a convinience function to be called for updating a GUI. \r\n  * To get the reward tokens use withdrawAll(), which consumes less gas.\r\n  * @return uint256[] rewards - the calculated number of tokens for every closed window\r\n  */\r\n  function getAllRewards() public view returns (uint256[]) {\r\n    uint256[] memory rewards = new uint256[](totalWindows);\r\n    // lastClosedWindow = min(currentWindow(),totalWindows);\r\n    uint256 lastWindow = currentWindow() < totalWindows ? currentWindow() : totalWindows;\r\n    for (uint256 i = 0; i < lastWindow; i++) {\r\n      rewards[i] = withdraw(i);\r\n    }\r\n    return rewards;\r\n  }\r\n\r\n  /**\r\n  * @dev returns a array filled with commitments of address for every window\r\n  * a convinience function to be called for updating a GUI. \r\n  * @return uint256[] commitments - the commited Eth per window of a given address\r\n  */\r\n  function getCommitmentsOf(address from) public view returns (uint256[]) {\r\n    uint256[] memory commitments = new uint256[](totalWindows);\r\n    for (uint256 i = 0; i < totalWindows; i++) {\r\n      commitments[i] = commitment[from][i];\r\n    }\r\n    return commitments;\r\n  }\r\n\r\n  /**\r\n  * @dev returns a array filled with eth totals for every window\r\n  * a convinience function to be called for updating a GUI. \r\n  * @return uint256[] ethTotals - the totals for commited Eth per window\r\n  */\r\n  function getTotals() public view returns (uint256[]) {\r\n    uint256[] memory ethTotals = new uint256[](totalWindows);\r\n    for (uint256 i = 0; i < totalWindows; i++) {\r\n      ethTotals[i] = totals[i];\r\n    }\r\n    return ethTotals;\r\n  }\r\n\r\n  /**\r\n  * @dev moves Eth to the foundation wallet.\r\n  * @return the amount to be moved.\r\n  */\r\n  function moveFunds() public onlyOwner returns (uint256 value) {\r\n    value = address(this).balance;\r\n    require(0 < value);\r\n\r\n    foundationWallet.transfer(value);\r\n    \r\n    emit MoveFunds(value);\r\n    return value;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title MCoinDistributionWrap\r\n * @dev MCoinDistribution wrapper contract.\r\n * This contracts wraps MCoinDistribution.sol and is used to create the distribution contract. \r\n * See MCoinDistribution.sol for full distribution details.\r\n */\r\ncontract MCoinDistributionWrap is MCoinDistribution {\r\n  using SafeMath for uint256;\r\n  \r\n  uint8 public constant decimals = 18;  // solium-disable-line uppercase\r\n\r\n  constructor(\r\n    uint256 firstPeriodWindows,\r\n    uint256 firstPeriodSupply,\r\n    uint256 secondPeriodWindows,\r\n    uint256 secondPeriodSupply,\r\n    address foundationWallet,\r\n    uint256 startTime,\r\n    uint256 windowLength\r\n    )\r\n    MCoinDistribution (\r\n      firstPeriodWindows,              // uint _firstPeriodWindows\r\n      toDecimals(firstPeriodSupply),   // uint _firstPeriodSupply,\r\n      secondPeriodWindows,             // uint _secondPeriodDays,\r\n      toDecimals(secondPeriodSupply),  // uint _secondPeriodSupply,\r\n      foundationWallet,                // address _foundationMultiSig,\r\n      startTime,                       // uint _startTime\r\n      windowLength                     // uint _windowLength\r\n    ) public \r\n  {}    \r\n\r\n  function toDecimals(uint256 _value) pure internal returns (uint256) {\r\n    return _value.mul(10 ** uint256(decimals));\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_MCoin\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPeriodWindows\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPeriodSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getCommitmentsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"allocationFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"windowLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"detailsOfWindow\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"remainingTime\",\"type\":\"uint256\"},{\"name\":\"allocation\",\"type\":\"uint256\"},{\"name\":\"totalEth\",\"type\":\"uint256\"},{\"name\":\"number\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWindows\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentWindow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"detailsOf\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"remainingTime\",\"type\":\"uint256\"},{\"name\":\"allocation\",\"type\":\"uint256\"},{\"name\":\"totalEth\",\"type\":\"uint256\"},{\"name\":\"number\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"commitOn\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"moveFunds\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPeriodSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPeriodWindows\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"windowOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"firstPeriodWindows\",\"type\":\"uint256\"},{\"name\":\"firstPeriodSupply\",\"type\":\"uint256\"},{\"name\":\"secondPeriodWindows\",\"type\":\"uint256\"},{\"name\":\"secondPeriodSupply\",\"type\":\"uint256\"},{\"name\":\"foundationWallet\",\"type\":\"address\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"windowLength\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"Commit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MoveFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MCoinDistributionWrap","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000032569c4200000000000000000000000000000000000000000000000000000000000000ad000000000000000000000000000000000000000000000000000000026e09af7e000000000000000000000000286d39aae5953fa2d6cac8fe6585cdce190d66ea000000000000000000000000000000000000000000000000000000005b43f7010000000000000000000000000000000000000000000000000000000000014370","Library":"","SwarmSource":"bzzr://25bedf2d4198d280851a66a354d4158a7a6411b2f8e0525c3039ab72d58be662"}]}