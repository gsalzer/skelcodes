{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n  /**\r\n  * @dev Exponentiation two numbers, throws on overflow.\r\n  */\r\n  function pow(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(a ** b > 0);\r\n    return a ** b;\r\n  }\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20StandardToken {\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n}\r\n\r\ncontract MultiTransfer {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  /*\r\n   * @dev. Get ERC20 Standard Token detail information\r\n   */\r\n  function name(address _token) public view returns(string) { return ERC20StandardToken(_token).name(); }\r\n  function symbol(address _token) public view returns(string) { return ERC20StandardToken(_token).symbol(); }\r\n  function decimals(address _token) public view returns(uint8) { return ERC20StandardToken(_token).decimals(); }\r\n  \r\n  /*\r\n   * @dev. Get allowed balance of contract at token\r\n   */\r\n  function allowance(address _token) public view returns(uint256) { return ERC20StandardToken(_token).allowance(msg.sender, address(this)); }\r\n  \r\n  /*\r\n   * @dev. Transfer allowed token\r\n   */\r\n  function transfer(address _token, address[] _to, uint256[] _value) public returns(bool) {\r\n\r\n    // Check invalid request\r\n    require(_to.length != 0);\r\n    require(_value.length != 0);\r\n    require(_to.length == _value.length);\r\n\r\n    uint256 sum = 0;\r\n\r\n    // Check receiver effectiveness\r\n    for (uint256 i = 0; i < _to.length; i++) {\r\n      require(_to[i] != address(0));\r\n      sum.add(_value[i]);\r\n    }\r\n\r\n    // Check allowed token balance effectiveness\r\n    assert(allowance(_token) >= sum);\r\n\r\n    // Send token\r\n    for (i = 0; i < _to.length; i++) {\r\n      require(ERC20StandardToken(_token).transferFrom(msg.sender, _to[i], _value[i]));\r\n    }\r\n\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MultiTransfer","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9800d164990b2519e67d79e987de743c4522d9293a43f17964ae8ffab6984cd3"}]}