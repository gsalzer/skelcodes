{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\nVERSION DATE: 04/06/2018\r\n\r\nCREATED BY: CRYPTO SPORTZ\r\nENJOY YOUR TEAM AND SPORTS AND EMAIL US IF YOU HAVE ANY QUESTIONS\r\n*/\r\n\r\ncontract ERC721Abstract\r\n{\r\n\tfunction implementsERC721() public pure returns (bool);\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance);\r\n\tfunction ownerOf(uint256 _tokenId) public view returns (address owner);\r\n\tfunction approve(address _to, uint256 _tokenId) public;\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\tfunction transfer(address _to, uint256 _tokenId) public;\r\n \r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n\t// Optional\r\n\t// function totalSupply() public view returns (uint256 total);\r\n\t// function name() public view returns (string name);\r\n\t// function symbol() public view returns (string symbol);\r\n\t// function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n\t// function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\ncontract ERC721 is ERC721Abstract\r\n{\r\n\tstring constant public   name = \"CryptoSportZ\";\r\n\tstring constant public symbol = \"CSZ\";\r\n\r\n\tuint256 public totalSupply;\r\n\tstruct Token\r\n\t{\r\n\t\tuint256 price;\t\t\t//  value of stake\r\n\t\tuint256\toption;\t\t\t//  [payout]96[idGame]64[combination]32[dateBuy]0\r\n\t}\r\n\tmapping (uint256 => Token) tokens;\r\n\t\r\n\t// A mapping from tokens IDs to the address that owns them. All tokens have some valid owner address\r\n\tmapping (uint256 => address) public tokenIndexToOwner;\r\n\t\r\n\t// A mapping from owner address to count of tokens that address owns.\t\r\n\tmapping (address => uint256) ownershipTokenCount; \r\n\r\n\t// A mapping from tokenIDs to an address that has been approved to call transferFrom().\r\n\t// Each token can only have one approved address for transfer at any time.\r\n\t// A zero value means no approval is outstanding.\r\n\tmapping (uint256 => address) public tokenIndexToApproved;\r\n\t\r\n\tfunction implementsERC721() public pure returns (bool)\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256 count) \r\n\t{\r\n\t\treturn ownershipTokenCount[_owner];\r\n\t}\r\n\t\r\n\tfunction ownerOf(uint256 _tokenId) public view returns (address owner)\r\n\t{\r\n\t\towner = tokenIndexToOwner[_tokenId];\r\n\t\trequire(owner != address(0));\r\n\t}\r\n\t\r\n\t// Marks an address as being approved for transferFrom(), overwriting any previous approval. \r\n\t// Setting _approved to address(0) clears all transfer approval.\r\n\tfunction _approve(uint256 _tokenId, address _approved) internal \r\n\t{\r\n\t\ttokenIndexToApproved[_tokenId] = _approved;\r\n\t}\r\n\t\r\n\t// Checks if a given address currently has transferApproval for a particular token.\r\n\t// param _claimant the address we are confirming token is approved for.\r\n\t// param _tokenId token id, only valid when > 0\r\n\tfunction _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n\t\treturn tokenIndexToApproved[_tokenId] == _claimant;\r\n\t}\r\n\t\r\n\tfunction approve( address _to, uint256 _tokenId ) public\r\n\t{\r\n\t\t// Only an owner can grant transfer approval.\r\n\t\trequire(_owns(msg.sender, _tokenId));\r\n\r\n\t\t// Register the approval (replacing any previous approval).\r\n\t\t_approve(_tokenId, _to);\r\n\r\n\t\t// Emit approval event.\r\n\t\tApproval(msg.sender, _to, _tokenId);\r\n\t}\r\n\t\r\n\tfunction transferFrom( address _from, address _to, uint256 _tokenId ) public\r\n\t{\r\n\t\t// Check for approval and valid ownership\r\n\t\trequire(_approvedFor(msg.sender, _tokenId));\r\n\t\trequire(_owns(_from, _tokenId));\r\n\r\n\t\t// Reassign ownership (also clears pending approvals and emits Transfer event).\r\n\t\t_transfer(_from, _to, _tokenId);\r\n\t}\r\n\t\r\n\tfunction _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n\t\treturn tokenIndexToOwner[_tokenId] == _claimant;\r\n\t}\r\n\t\r\n\tfunction _transfer(address _from, address _to, uint256 _tokenId) internal \r\n\t{\r\n\t\townershipTokenCount[_to]++;\r\n\t\ttokenIndexToOwner[_tokenId] = _to;\r\n\r\n\t\tif (_from != address(0)) \r\n\t\t{\r\n\t\t\townershipTokenCount[_from]--;\r\n\t\t\t// clear any previously approved ownership exchange\r\n\t\t\tdelete tokenIndexToApproved[_tokenId];\r\n\t\t\tTransfer(_from, _to, _tokenId);\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\tfunction transfer(address _to, uint256 _tokenId) public\r\n\t{\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_owns(msg.sender, _tokenId));\r\n\t\t_transfer(msg.sender, _to, _tokenId);\r\n\t}\r\n\r\n}\r\n\r\ncontract Owned \r\n{\r\n    address private candidate;\r\n\taddress public owner;\r\n\r\n\tmapping(address => bool) public admins;\r\n\t\r\n    function Owned() public \r\n\t{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public \r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n        candidate = newOwner;\r\n    }\r\n\t\r\n\tfunction confirmOwner() public \r\n\t{\r\n        require(candidate == msg.sender); // run by name=candidate\r\n\t\towner = candidate;\r\n    }\r\n\t\r\n    function addAdmin(address addr) external \r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n        admins[addr] = true;\r\n    }\r\n\r\n    function removeAdmin(address addr) external\r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n        admins[addr] = false;\r\n    }\r\n}\r\n\r\ncontract Functional\r\n{\r\n\t// parseInt(parseFloat*10^_b)\r\n\tfunction parseInt(string _a, uint _b) internal pure returns (uint) \r\n\t{\r\n\t\tbytes memory bresult = bytes(_a);\r\n\t\tuint mint = 0;\r\n\t\tbool decimals = false;\r\n\t\tfor (uint i=0; i<bresult.length; i++){\r\n\t\t\tif ((bresult[i] >= 48)&&(bresult[i] <= 57)){\r\n\t\t\t\tif (decimals){\r\n\t\t\t\t   if (_b == 0) break;\r\n\t\t\t\t\telse _b--;\r\n\t\t\t\t}\r\n\t\t\t\tmint *= 10;\r\n\t\t\t\tmint += uint(bresult[i]) - 48;\r\n\t\t\t} else if (bresult[i] == 46) decimals = true;\r\n\t\t}\r\n\t\tif (_b > 0) mint *= 10**_b;\r\n\t\treturn mint;\r\n\t}\r\n\t\r\n\tfunction uint2str(uint i) internal pure returns (string)\r\n\t{\r\n\t\tif (i == 0) return \"0\";\r\n\t\tuint j = i;\r\n\t\tuint len;\r\n\t\twhile (j != 0){\r\n\t\t\tlen++;\r\n\t\t\tj /= 10;\r\n\t\t}\r\n\t\tbytes memory bstr = new bytes(len);\r\n\t\tuint k = len - 1;\r\n\t\twhile (i != 0){\r\n\t\t\tbstr[k--] = byte(48 + i % 10);\r\n\t\t\ti /= 10;\r\n\t\t}\r\n\t\treturn string(bstr);\r\n\t}\r\n\t\r\n\tfunction strConcat(string _a, string _b, string _c) internal pure returns (string)\r\n\t{\r\n\t\tbytes memory _ba = bytes(_a);\r\n\t\tbytes memory _bb = bytes(_b);\r\n\t\tbytes memory _bc = bytes(_c);\r\n\t\tstring memory abc;\r\n\t\tuint k = 0;\r\n\t\tuint i;\r\n\t\tbytes memory babc;\r\n\t\tif (_ba.length==0)\r\n\t\t{\r\n\t\t\tabc = new string(_bc.length);\r\n\t\t\tbabc = bytes(abc);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tabc = new string(_ba.length + _bb.length+ _bc.length);\r\n\t\t\tbabc = bytes(abc);\r\n\t\t\tfor (i = 0; i < _ba.length; i++) babc[k++] = _ba[i];\r\n\t\t\tfor (i = 0; i < _bb.length; i++) babc[k++] = _bb[i];\r\n\t\t}\r\n        for (i = 0; i < _bc.length; i++) babc[k++] = _bc[i];\r\n\t\treturn string(babc);\r\n\t}\r\n\t\r\n\tfunction timenow() public view returns(uint32) { return uint32(block.timestamp); }\r\n}\r\n\r\ncontract CryptoSportZ is ERC721, Functional, Owned\r\n{\r\n\tuint256 public feeGame;\r\n\t\r\n\tenum Status {\r\n\t\tNOTFOUND,\t\t//0 game not created\r\n\t\tPLAYING,\t\t//1 buying tickets\r\n\t\tPROCESSING,\t\t//2 waiting for result\r\n\t\tPAYING,\t \t\t//3 redeeming\r\n\t\tCANCELING\t\t//4 canceling the game\r\n\t}\r\n\t\r\n\tstruct Game {\r\n\t\tstring  nameGame;\r\n\t\tuint32  countCombinations;\r\n\t\tuint32  dateStopBuy;\r\n\t\tuint32  winCombination;\r\n\t\tuint256 betsSumIn;\t\t\t\t// amount bets\r\n\t\tuint256 feeValue;\t\t\t\t// amount fee\r\n\t\tStatus status;\t\t\t\t\t// status of game\r\n\t\tbool isFreezing;\r\n\t}\r\n\r\n\tmapping (uint256 => Game) private game;\r\n\tuint32 public countGames;\r\n\t\r\n\tuint32 private constant shiftGame = 0;\r\n\tuint32 private constant FEECONTRACT = 5;\r\n\t\r\n\tstruct Stake {\r\n\t\tuint256 sum;\t\t// amount bets\r\n\t\tuint32 count;\t\t// count bets \r\n\t}\r\n\tmapping(uint32 => mapping (uint32 => Stake)) public betsAll; // ID-game => combination => Stake\r\n\tmapping(bytes32 => uint32) private queryRes;  // ID-query => ID-game\r\n\t\r\n\tevent LogEvent(string _event, string nameGame, uint256 value);\r\n\tevent LogToken(string _event, address user, uint32 idGame, uint256 idToken, uint32 combination, uint256 amount);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\t\r\n\tmodifier onlyAdmin {\r\n        require(msg.sender == owner || admins[msg.sender]);\r\n        _;\r\n    }\r\n\r\n\tfunction getPriceTicket() public view returns ( uint32 )\r\n\t{\r\n\t\tif ( timenow() >= 1531339200 ) return 8000;\t// after 11.07 20:00\r\n\t\tif ( timenow() >= 1530993600 ) return 4000;\t// after 07.07 20:00\r\n\t\tif ( timenow() >= 1530648000 ) return 2000;\t// after 03.06 20:00\r\n\t\tif ( timenow() >= 1530302400 ) return 1000;\t// after 29.06 20:00\r\n\t\tif ( timenow() >= 1529870400 ) return 500;\t// after 24.06 20:00\r\n\t\tif ( timenow() >= 1529438400 ) return 400;\t// after 19.06 20:00\r\n\t\tif ( timenow() >= 1529006400 ) return 300;\t// after 14.06 20:00\r\n\t\tif ( timenow() >= 1528747200 ) return 200;\t// after 11.06 20:00\r\n\t\tif ( timenow() >= 1528401600 ) return 100;\t// after 07.06 20:00\r\n\t\treturn 50;\r\n\t}\r\n\t\r\n\tfunction getGameByID(uint32 _id) public view returns (\r\n\t\tstring  nameGame,\r\n\t\tuint32 countCombinations,\r\n\t\tuint32 dateStopBuy,\r\n\t\tuint32 priceTicket,\r\n\t\tuint32 winCombination,\r\n\t\tuint32 betsCount,\r\n\t\tuint256 betsSumIn,\r\n\t\tuint256 feeValue,\r\n\t\tStatus status,\r\n\t\tbool isFreezing\r\n\t){\r\n\t\tGame storage gm = game[_id];\r\n\t\tnameGame = gm.nameGame;\r\n\t\tcountCombinations = gm.countCombinations;\r\n\t\tdateStopBuy = gm.dateStopBuy;\r\n\t\tpriceTicket = getPriceTicket();\r\n\t\twinCombination = gm.winCombination;\r\n\t\tbetsCount = getCountTokensByGame(_id);\r\n\t\tbetsSumIn = gm.betsSumIn;  \r\n\t\tif (betsSumIn==0) betsSumIn = getSumInByGame(_id);\r\n\t\tfeeValue = gm.feeValue;\r\n\t\tstatus = gm.status;\r\n\t\tif ( status == Status.PLAYING && timenow() > dateStopBuy ) status = Status.PROCESSING;\r\n\t\tisFreezing = gm.isFreezing;\r\n\t}\r\n\t\r\n\tfunction getBetsMas(uint32 idGame) public view returns (uint32[33])\r\n\t{\r\n\t\tGame storage curGame = game[idGame];\r\n\t\tuint32[33] memory res;\r\n\t\tfor(uint32 i=1;i<=curGame.countCombinations;i++) res[i] = betsAll[idGame][i].count;\r\n\t\treturn res;\r\n\t}\r\n\t\r\n\tfunction getCountTokensByGame(uint32 idGame) internal view returns (uint32)\r\n\t{\r\n\t\tGame storage curGame = game[idGame];\r\n\t\tuint32 count = 0;\r\n\t\tfor(uint32 i=1;i<=curGame.countCombinations;i++) count += betsAll[idGame][i].count;\r\n\t\treturn count;\r\n\t}\r\n\t\r\n\tfunction getSumInByGame(uint32 idGame) internal view returns (uint256)\r\n\t{\r\n\t\tGame storage curGame = game[idGame];\r\n\t\tuint256 sum = 0;\r\n\t\tfor(uint32 i=1;i<=curGame.countCombinations;i++) sum += betsAll[idGame][i].sum;\r\n\t\treturn sum;\r\n\t}\r\n\t\r\n\tfunction getTokenByID(uint256 _id) public view returns ( \r\n\t\t\tuint256 price,\r\n\t\t\tuint256 payment,\r\n\t\t\tuint32 combination,\r\n\t\t\tuint32 dateBuy,\r\n\t\t\tuint32 idGame,\r\n\t\t\taddress ownerToken,\r\n\t\t\tbool payout\r\n\t){\r\n\t\tToken storage tkn = tokens[_id];\r\n\r\n\t\tprice = tkn.price;\r\n\t\t\r\n\t\tuint256 packed = tkn.option;\r\n\t\tpayout \t\t= uint8((packed >> (12*8)) & 0xFF)==1?true:false;\r\n\t\tidGame  \t= uint32((packed >> (8*8)) & 0xFFFFFFFF);\r\n\t\tcombination = uint32((packed >> (4*8)) & 0xFFFFFFFF);\r\n\t\tdateBuy     = uint32(packed & 0xFFFFFFFF);\r\n\r\n\t\tpayment = 0;\r\n\t\tGame storage curGame = game[idGame];\r\n\t\t\r\n\t\tuint256 betsSumIn = curGame.betsSumIn;  \r\n\t\tif (betsSumIn==0) betsSumIn = getSumInByGame(idGame);\r\n\r\n\t\tif (curGame.winCombination==combination) payment = betsSumIn / betsAll[idGame][ curGame.winCombination ].count;\r\n\t\tif (curGame.status == Status.CANCELING) payment = tkn.price;\r\n\t\t\r\n\t\townerToken = tokenIndexToOwner[_id];\r\n\t}\r\n\r\n\tfunction getUserTokens(address user, uint32 count) public view returns ( string res )\r\n\t{\r\n\t\tres=\"\";\r\n\t\trequire(user!=0x0);\r\n\t\tuint32 findCount=0;\r\n\t\tfor (uint256 i = totalSupply-1; i >= 0; i--)\r\n\t\t{\r\n\t\t\tif(i>totalSupply) break;\r\n\t\t\tif (user == tokenIndexToOwner[i]) \r\n\t\t\t{\r\n\t\t\t\tres = strConcat( res, \",\", uint2str(i) );\r\n\t\t\t\tfindCount++;\r\n\t\t\t\tif (count!=0 && findCount>=count) break;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getUserTokensByGame(address user, uint32 idGame) public view returns ( string res )\r\n\t{\r\n\t\tres=\"\";\r\n\t\trequire(user!=0x0);\r\n\t\tfor(uint256 i=0;i<totalSupply;i++) \r\n\t\t{\r\n\t\t\tif (user == tokenIndexToOwner[i]) \r\n\t\t\t{\r\n\t\t\t\tuint256 packed = tokens[i].option;\r\n\t\t\t\tuint32 idGameToken = uint32((packed >> (8*8)) & 0xFFFFFFFF);\r\n\t\t\t\tif (idGameToken == idGame) res = strConcat( res, \",\", uint2str(i) );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getTokensByGame(uint32 idGame) public view returns (string res)\r\n\t{\r\n\t\tres=\"\";\r\n\t\tfor(uint256 i=0;i<totalSupply;i++) \r\n\t\t{\r\n\t\t\tuint256 packed = tokens[i].option;\r\n\t\t\tuint32 idGameToken = uint32((packed >> (8*8)) & 0xFFFFFFFF);\r\n\t\t\tif (idGameToken == idGame) res = strConcat( res, \",\", uint2str(i) );\r\n\t\t}\r\n\t}\t\r\n\t\r\n\tfunction getStatGames() public view returns ( \r\n\t\t\tuint32 countAll,\r\n\t\t\tuint32 countPlaying,\r\n\t\t\tuint32 countProcessing,\r\n\t\t\tstring listPlaying,\r\n\t\t\tstring listProcessing\r\n\t){\r\n\t\tcountAll = countGames;\r\n\t\tcountPlaying = 0;\r\n\t\tcountProcessing = 0;\r\n\t\tlistPlaying=\"\";\r\n\t\tlistProcessing=\"\";\r\n\t\tuint32 curtime = timenow();\r\n\t\tfor(uint32 i=shiftGame; i<countAll+shiftGame; i++)\r\n\t\t{\r\n\t\t\tif (game[i].status!=Status.PLAYING) continue;\r\n\t\t\tif (curtime <  game[i].dateStopBuy) { countPlaying++; listPlaying = strConcat( listPlaying, \",\", uint2str(i) ); }\r\n\t\t\tif (curtime >= game[i].dateStopBuy) { countProcessing++; listProcessing = strConcat( listProcessing, \",\", uint2str(i) ); }\r\n\t\t}\r\n\t}\r\n\tfunction CryptoSportZ() public \r\n\t{\r\n\t}\r\n\r\n\tfunction freezeGame(uint32 idGame, bool freeze) public onlyAdmin \r\n\t{\r\n\t\tGame storage curGame = game[idGame];\r\n\t\trequire( curGame.isFreezing != freeze );\r\n\t\tcurGame.isFreezing = freeze; \r\n\t}\r\n\t\r\n\tfunction addGame( string _nameGame ) onlyAdmin public \r\n\t{\r\n\t\trequire( bytes(_nameGame).length > 2 );\r\n\r\n\t\tGame memory _game;\r\n\t\t_game.nameGame = _nameGame;\r\n\t\t_game.countCombinations = 32;\r\n\t\t_game.dateStopBuy = 1531666800;\r\n\t\t_game.status = Status.PLAYING;\r\n\r\n\t\tuint256 newGameId = countGames + shiftGame;\r\n\t\tgame[newGameId] = _game;\r\n\t\tcountGames++;\r\n\t\t\r\n\t\tLogEvent( \"AddGame\", _nameGame, newGameId );\r\n\t}\r\n\r\n\tfunction () payable public { require (msg.value == 0x0); }\r\n\t\r\n\tfunction buyToken(uint32 idGame, uint32 combination, address captainAddress) payable public\r\n\t{\r\n\t\tGame storage curGame = game[idGame];\r\n\t\trequire( curGame.status == Status.PLAYING );\r\n\t\trequire( timenow() < curGame.dateStopBuy );\r\n\t\trequire( combination > 0 && combination <= curGame.countCombinations );\r\n\t\trequire( curGame.isFreezing == false );\r\n\t\t\r\n\t\tuint256 userStake = msg.value;\r\n\t\tuint256 ticketPrice = uint256(getPriceTicket()) * 1 finney;\r\n\t\t\r\n\t\t// check money for stake\r\n\t\trequire( userStake >= ticketPrice );\r\n\t\t\r\n\t\tif ( userStake > ticketPrice )\r\n\t\t{\r\n\t\t\tuint256 change = userStake - ticketPrice;\r\n\t\t\tuserStake = userStake - change;\r\n\t\t\trequire( userStake == ticketPrice );\r\n\t\t\tmsg.sender.transfer(change);\r\n\t\t}\r\n\t\t\r\n\t\tuint256 feeValue = userStake * FEECONTRACT / 100;\t\t// fee for contract\r\n\r\n\t\tif (captainAddress!=0x0 && captainAddress != msg.sender) \r\n\t\t{\r\n\t\t\tuint256 captainValue = feeValue * 20 / 100;\t\t// bonus for captain = 1%\r\n\t\t\tfeeValue = feeValue - captainValue;\r\n\t\t\tcaptainAddress.transfer(captainValue);\r\n\t\t}\r\n\r\n\t\tuserStake = userStake - feeValue;\t\r\n\t\tcurGame.feeValue  = curGame.feeValue + feeValue;\r\n\t\t\r\n\t\tbetsAll[idGame][combination].sum += userStake;\r\n\t\tbetsAll[idGame][combination].count += 1;\r\n\r\n\t\tuint256 packed;\r\n\t\tpacked = ( uint128(idGame) << 8*8 ) + ( uint128(combination) << 4*8 ) + uint128(block.timestamp);\r\n\r\n\t\tToken memory _token = Token({\r\n\t\t\tprice: userStake,\r\n\t\t\toption : packed\r\n\t\t});\r\n\r\n\t\tuint256 newTokenId = totalSupply++;\r\n\t\ttokens[newTokenId] = _token;\r\n\t\t_transfer(0x0, msg.sender, newTokenId);\r\n\t\tLogToken( \"Buy\", msg.sender, idGame, newTokenId, combination, userStake);\r\n\t}\r\n\t\r\n\t// take win money or money for canceling game\r\n\tfunction redeemToken(uint256 _tokenId) public \r\n\t{\r\n\t\tToken storage tkn = tokens[_tokenId];\r\n\r\n\t\tuint256 packed = tkn.option;\r\n\t\tbool payout = uint8((packed >> (12*8)) & 0xFF)==1?true:false;\r\n\t\tuint32 idGame = uint32((packed >> (8*8)) & 0xFFFFFFFF);\r\n\t\tuint32 combination = uint32((packed >> (4*8)) & 0xFFFFFFFF);\r\n\r\n\t\tGame storage curGame = game[idGame];\r\n\t\t\r\n\t\trequire( curGame.status == Status.PAYING || curGame.status == Status.CANCELING);\r\n\r\n\t\trequire( msg.sender == tokenIndexToOwner[_tokenId] );\t// only onwer`s token\r\n\t\trequire( payout == false ); // has not paid\r\n\t\trequire( combination == curGame.winCombination || curGame.status == Status.CANCELING );\r\n\r\n\t\tuint256 sumPayment = 0;\r\n\t\tif ( curGame.status == Status.CANCELING ) sumPayment = tkn.price;\r\n\t\tif ( curGame.status == Status.PAYING ) sumPayment = curGame.betsSumIn / betsAll[idGame][curGame.winCombination].count;\r\n\r\n\t\tpayout = true;\r\n\t\tpacked += uint128(payout?1:0) << 12*8;\r\n\t\ttkn.option = packed;\r\n\t\r\n\t\tmsg.sender.transfer(sumPayment);\r\n\t\t\r\n\t\tLogToken( \"Redeem\", msg.sender, idGame, uint32(_tokenId), combination, sumPayment);\r\n\t}\r\n\t\r\n\tfunction cancelGame(uint32 idGame) public \r\n\t{\r\n\t\tGame storage curGame = game[idGame];\r\n\t\t\r\n\t\trequire( curGame.status == Status.PLAYING );\r\n\t\t// only owner/admin or anybody after 60 days\r\n\t\trequire( msg.sender == owner || admins[msg.sender] || timenow() > curGame.dateStopBuy + 60 days );\r\n\r\n\t\tcurGame.status = Status.CANCELING;\r\n\r\n//\t\tLogEvent( \"CancelGame\", curGame.nameGame, idGame );\r\n\t\t\r\n\t\ttakeFee(idGame);\r\n\t}\r\n\r\n\tfunction resolveGameByHand(uint32 idGame, uint32 combination) onlyAdmin public \r\n\t{\r\n\t\tGame storage curGame = game[idGame];\r\n\t\t\r\n\t\trequire( curGame.status == Status.PLAYING );\r\n\t\trequire( combination <= curGame.countCombinations );\r\n\t\trequire( combination != 0 );\r\n\r\n\t\trequire( timenow() > curGame.dateStopBuy + 2*60*60 );\r\n\r\n\t\tcurGame.winCombination = combination;\r\n\t\t\r\n//\t\tLogEvent( \"ResolveGameByHand\", curGame.nameGame, curGame.winCombination );\r\n\t\t\r\n\t\tcheckWinNobody(idGame);\r\n\t}\r\n\t\r\n\tfunction checkWinNobody(uint32 idGame) internal\r\n\t{\r\n\t\tGame storage curGame = game[idGame];\r\n\t\t\r\n\t\tcurGame.status = Status.PAYING;\r\n\t\tcurGame.betsSumIn = getSumInByGame(idGame);\r\n\t\t\r\n\t\t// nobody win = send all to feeGame\r\n\t\tif ( betsAll[idGame][curGame.winCombination].count == 0 )\r\n\t\t{\r\n\t\t\tif (curGame.betsSumIn+curGame.feeValue!=0) feeGame = feeGame + curGame.betsSumIn + curGame.feeValue;\r\n\t\t\tLogEvent( \"NobodyWin\", curGame.nameGame, curGame.betsSumIn+curGame.feeValue );\r\n\t\t}\r\n\t\telse \r\n\t\t\ttakeFee(idGame);\r\n\t}\r\n\t\r\n\tfunction takeFee(uint32 idGame) internal\r\n\t{\r\n\t\tGame storage curGame = game[idGame];\r\n\t\t\r\n\t\t// take fee\r\n\t\tif ( curGame.feeValue > 0 )\r\n\t\t{\r\n\t\t\tfeeGame = feeGame + curGame.feeValue;\r\n\t\t\tLogEvent( \"TakeFee\", curGame.nameGame, curGame.feeValue );\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction withdraw() onlyOwner public\r\n\t{\r\n\t\trequire( feeGame > 0 );\r\n\r\n\t\tuint256 tmpFeeGame = feeGame;\r\n\t\tfeeGame = 0;\r\n\t\t\r\n\t\towner.transfer(tmpFeeGame);\r\n//\t\tLogEvent( \"Withdraw\", \"\", tmpFeeGame);\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"redeemToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTokenByID\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"payment\",\"type\":\"uint256\"},{\"name\":\"combination\",\"type\":\"uint32\"},{\"name\":\"dateBuy\",\"type\":\"uint32\"},{\"name\":\"idGame\",\"type\":\"uint32\"},{\"name\":\"ownerToken\",\"type\":\"address\"},{\"name\":\"payout\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"betsAll\",\"outputs\":[{\"name\":\"sum\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getGameByID\",\"outputs\":[{\"name\":\"nameGame\",\"type\":\"string\"},{\"name\":\"countCombinations\",\"type\":\"uint32\"},{\"name\":\"dateStopBuy\",\"type\":\"uint32\"},{\"name\":\"priceTicket\",\"type\":\"uint32\"},{\"name\":\"winCombination\",\"type\":\"uint32\"},{\"name\":\"betsCount\",\"type\":\"uint32\"},{\"name\":\"betsSumIn\",\"type\":\"uint256\"},{\"name\":\"feeValue\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"isFreezing\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"idGame\",\"type\":\"uint32\"}],\"name\":\"getUserTokensByGame\",\"outputs\":[{\"name\":\"res\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idGame\",\"type\":\"uint32\"},{\"name\":\"combination\",\"type\":\"uint32\"}],\"name\":\"resolveGameByHand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timenow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idGame\",\"type\":\"uint32\"}],\"name\":\"getBetsMas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[33]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countGames\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint32\"}],\"name\":\"getUserTokens\",\"outputs\":[{\"name\":\"res\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idGame\",\"type\":\"uint32\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idGame\",\"type\":\"uint32\"}],\"name\":\"getTokensByGame\",\"outputs\":[{\"name\":\"res\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idGame\",\"type\":\"uint32\"},{\"name\":\"combination\",\"type\":\"uint32\"},{\"name\":\"captainAddress\",\"type\":\"address\"}],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatGames\",\"outputs\":[{\"name\":\"countAll\",\"type\":\"uint32\"},{\"name\":\"countPlaying\",\"type\":\"uint32\"},{\"name\":\"countProcessing\",\"type\":\"uint32\"},{\"name\":\"listPlaying\",\"type\":\"string\"},{\"name\":\"listProcessing\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameGame\",\"type\":\"string\"}],\"name\":\"addGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idGame\",\"type\":\"uint32\"}],\"name\":\"cancelGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_event\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"nameGame\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_event\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"idGame\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"idToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"combination\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CryptoSportZ","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b8d067db12588c977eaf6baf9193053d942ceb294498cb3219d4081ff11afd7b"}]}