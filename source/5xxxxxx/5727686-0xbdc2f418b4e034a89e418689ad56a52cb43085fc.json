{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n\r\n    Copyright 2018, Angelo A. M. & Vicent Nos & Mireia Puig\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n */\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() internal {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////////\r\n//                                                          //\r\n//                  ESS PUBLIC ENGAGEMENT                   //\r\n//                                                          //\r\n//////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\ncontract ESS is Ownable {\r\n\r\n    // Contract variables and constants\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public tokenPrice=0;\r\n    address public addrFWD;\r\n    address public token;\r\n    uint256 public decimals=18;\r\n    string public name=\"ESS PUBLIC ENGAGEMENT\";\r\n\r\n    mapping (address => uint256) public sold;\r\n\r\n    uint256 public pubEnd=0;\r\n    // constant to simplify conversion of token amounts into integer form\r\n    uint256 public tokenUnit = uint256(10)**decimals;\r\n\r\n\r\n\r\n    // destAddr is the address to which the contributions are forwarded\r\n    // mastTokCon is the address of the main token contract correspondant to the erc20 to sell\r\n    // NOTE the contract will sell only its token balance of the erc20 specified in mastTokCon\r\n\r\n\r\n    constructor\r\n        (\r\n        address destAddr,\r\n        address mastTokCon\r\n        ) public {\r\n        addrFWD = destAddr;\r\n        token = mastTokCon;\r\n    }\r\n\r\n\r\n\r\n    function () public payable {\r\n        buy();   // Allow to buy tokens sending ether directly to the contract\r\n    }\r\n\r\n\r\n\r\n    function setPrice(uint256 _value) public onlyOwner{\r\n      tokenPrice=_value;   // Set the price token default 0\r\n\r\n    }\r\n\r\n    function setaddrFWD(address _value) public onlyOwner{\r\n      addrFWD=_value;   // Set forward address\r\n\r\n    }\r\n\r\n    function setPubEnd(uint256 _value) public onlyOwner{\r\n      pubEnd=_value;   // Set the END of engagement unixtime default 0\r\n\r\n    }\r\n\r\n\r\n\r\n    function buy()  public payable {\r\n        require(block.timestamp<pubEnd);\r\n        require(msg.value>0);\r\n        uint256 tokenAmount = (msg.value * tokenUnit) / tokenPrice ;  // Calculate the amount of tokens\r\n\r\n        transferBuy(msg.sender, tokenAmount);\r\n        addrFWD.transfer(msg.value);\r\n    }\r\n\r\n\r\n\r\n    function withdrawPUB() public returns(bool){\r\n        require(block.timestamp>pubEnd);   // Finalize and transfer\r\n        require(sold[msg.sender]>0);\r\n\r\n\r\n        bool result=token.call(bytes4(keccak256(\"transfer(address,uint256)\")), msg.sender, sold[msg.sender]);\r\n        delete sold[msg.sender];\r\n        return result;\r\n    }\r\n\r\n\r\n\r\n    function transferBuy(address _to, uint256 _value) internal returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        sold[_to]=sold[_to].add(_value);   // Account for multiple txs from the same address\r\n\r\n        return true;\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrFWD\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pubEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPubEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setaddrFWD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPUB\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"destAddr\",\"type\":\"address\"},{\"name\":\"mastTokCon\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ESS","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ade725ed2dc637bd68040c0c3636d1872aa0ae5a000000000000000000000000d83d2c4a92387af97237c8be9f7cda4ddfd054ff","Library":"","SwarmSource":"bzzr://87fabc7143c031198173284732b915f38ffa7650dbb671bc6d02dbd09501e57e"}]}