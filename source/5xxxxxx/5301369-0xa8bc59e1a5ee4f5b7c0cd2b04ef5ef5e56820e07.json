{"status":"1","message":"OK","result":[{"SourceCode":"contract EscrowMyEther  {\r\n       \r\n\r\n        \r\n        address public owner;\r\n\r\n       \r\n        //Each buyer address consist of an array of EscrowStruct\r\n        //Used to store buyer's transactions and for buyers to interact with his transactions. (Such as releasing funds to seller)\r\n        struct EscrowStruct\r\n        {    \r\n            address buyer;          //Person who is making payment\r\n            address seller;         //Person who will receive funds\r\n            address escrow_agent;   //Escrow agent to resolve disputes, if any\r\n                                       \r\n            uint escrow_fee;        //Fee charged by escrow\r\n            uint amount;            //Amount of Ether (in Wei) seller will receive after fees\r\n\r\n            bool escrow_intervention; //Buyer or Seller can call for Escrow intervention\r\n            bool release_approval;   //Buyer or Escrow(if escrow_intervention is true) can approve release of funds to seller\r\n            bool refund_approval;    //Seller or Escrow(if escrow_intervention is true) can approve refund of funds to buyer \r\n\r\n            bytes32 notes;             //Notes for Seller\r\n            \r\n        }\r\n\r\n        struct TransactionStruct\r\n        {                        \r\n            //Links to transaction from buyer\r\n            address buyer;          //Person who is making payment\r\n            uint buyer_nounce;         //Nounce of buyer transaction                            \r\n        }\r\n\r\n\r\n        \r\n        //Database of Buyers. Each buyer then contain an array of his transactions\r\n        mapping(address => EscrowStruct[]) public buyerDatabase;\r\n\r\n        //Database of Seller and Escrow Agent\r\n        mapping(address => TransactionStruct[]) public sellerDatabase;        \r\n        mapping(address => TransactionStruct[]) public escrowDatabase;\r\n               \r\n        //Every address have a Funds bank. All refunds, sales and escrow comissions are sent to this bank. Address owner can withdraw them at any time.\r\n        mapping(address => uint) public Funds;\r\n\r\n        mapping(address => uint) public escrowFee;\r\n\r\n\r\n\r\n        //Run once the moment contract is created. Set contract creator\r\n        function EscrowMyEther () public {\r\n            owner = msg.sender;\r\n        }\r\n\r\n        function() internal payable\r\n        {\r\n            //LogFundsReceived(msg.sender, msg.value);\r\n        }\r\n\r\n        function setEscrowFee(uint fee) public {\r\n\r\n            //Allowed fee range: 0.1% to 10%, in increments of 0.1%\r\n            require (fee >= 1 && fee <= 100);\r\n            escrowFee[msg.sender] = fee;\r\n        }\r\n\r\n        function getEscrowFee(address escrowAddress) public constant returns (uint) {\r\n            return (escrowFee[escrowAddress]);\r\n        }\r\n\r\n        \r\n        function newEscrow(address sellerAddress, address escrowAddress, bytes32 notes) public payable returns (bool) {\r\n\r\n            require(msg.value > 0 && msg.sender != escrowAddress);\r\n        \r\n            //Store escrow details in memory\r\n            EscrowStruct memory currentEscrow;\r\n            TransactionStruct memory currentTransaction;\r\n            \r\n            currentEscrow.buyer = msg.sender;\r\n            currentEscrow.seller = sellerAddress;\r\n            currentEscrow.escrow_agent = escrowAddress;\r\n\r\n            //Calculates and stores Escrow Fee.\r\n            currentEscrow.escrow_fee = getEscrowFee(escrowAddress)*msg.value/1000;\r\n            \r\n            //0.25% dev fee\r\n            uint dev_fee = msg.value/400;\r\n            Funds[owner] += dev_fee;   \r\n\r\n            //Amount seller receives = Total amount - 0.25% dev fee - Escrow Fee\r\n            currentEscrow.amount = msg.value;\r\n\r\n            //These default to false, no need to set them again\r\n            /*currentEscrow.escrow_intervention = false;\r\n            currentEscrow.release_approval = false;\r\n            currentEscrow.refund_approval = false;  */ \r\n            \r\n            currentEscrow.notes = notes;\r\n \r\n            //Links this transaction to Seller and Escrow's list of transactions.\r\n            currentTransaction.buyer = msg.sender;\r\n            currentTransaction.buyer_nounce = buyerDatabase[msg.sender].length;\r\n\r\n            sellerDatabase[sellerAddress].push(currentTransaction);\r\n            escrowDatabase[escrowAddress].push(currentTransaction);\r\n            buyerDatabase[msg.sender].push(currentEscrow);\r\n            \r\n            return true;\r\n\r\n        }\r\n\r\n        //switcher 0 for Buyer, 1 for Seller, 2 for Escrow\r\n        function getNumTransactions(address inputAddress, uint switcher) public constant returns (uint)\r\n        {\r\n\r\n            if (switcher == 0) return (buyerDatabase[inputAddress].length);\r\n\r\n            else if (switcher == 1) return (sellerDatabase[inputAddress].length);\r\n\r\n            else return (escrowDatabase[inputAddress].length);\r\n        }\r\n\r\n        //switcher 0 for Buyer, 1 for Seller, 2 for Escrow\r\n        function getSpecificTransaction(address inputAddress, uint switcher, uint ID) public constant returns (address, address, address, uint, bytes32, uint, bytes32)\r\n\r\n        {\r\n            bytes32 status;\r\n            EscrowStruct memory currentEscrow;\r\n            if (switcher == 0)\r\n            {\r\n                currentEscrow = buyerDatabase[inputAddress][ID];\r\n                status = checkStatus(inputAddress, ID);\r\n            } \r\n            \r\n            else if (switcher == 1)\r\n\r\n            {  \r\n                currentEscrow = buyerDatabase[sellerDatabase[inputAddress][ID].buyer][sellerDatabase[inputAddress][ID].buyer_nounce];\r\n                status = checkStatus(currentEscrow.buyer, sellerDatabase[inputAddress][ID].buyer_nounce);\r\n            }\r\n\r\n                        \r\n            else if (switcher == 2)\r\n            \r\n            {        \r\n                currentEscrow = buyerDatabase[escrowDatabase[inputAddress][ID].buyer][escrowDatabase[inputAddress][ID].buyer_nounce];\r\n                status = checkStatus(currentEscrow.buyer, escrowDatabase[inputAddress][ID].buyer_nounce);\r\n            }\r\n\r\n            return (currentEscrow.buyer, currentEscrow.seller, currentEscrow.escrow_agent, currentEscrow.amount, status, currentEscrow.escrow_fee, currentEscrow.notes);\r\n        }   \r\n\r\n\r\n        function buyerHistory(address buyerAddress, uint startID, uint numToLoad) public constant returns (address[], address[],uint[], bytes32[]){\r\n\r\n\r\n            uint length;\r\n            if (buyerDatabase[buyerAddress].length < numToLoad)\r\n                length = buyerDatabase[buyerAddress].length;\r\n            \r\n            else \r\n                length = numToLoad;\r\n            \r\n            address[] memory sellers = new address[](length);\r\n            address[] memory escrow_agents = new address[](length);\r\n            uint[] memory amounts = new uint[](length);\r\n            bytes32[] memory statuses = new bytes32[](length);\r\n           \r\n            for (uint i = 0; i < length; i++)\r\n            {\r\n  \r\n                sellers[i] = (buyerDatabase[buyerAddress][startID + i].seller);\r\n                escrow_agents[i] = (buyerDatabase[buyerAddress][startID + i].escrow_agent);\r\n                amounts[i] = (buyerDatabase[buyerAddress][startID + i].amount);\r\n                statuses[i] = checkStatus(buyerAddress, startID + i);\r\n            }\r\n            \r\n            return (sellers, escrow_agents, amounts, statuses);\r\n        }\r\n\r\n\r\n                 \r\n        function SellerHistory(address inputAddress, uint startID , uint numToLoad) public constant returns (address[], address[], uint[], bytes32[]){\r\n\r\n            address[] memory buyers = new address[](numToLoad);\r\n            address[] memory escrows = new address[](numToLoad);\r\n            uint[] memory amounts = new uint[](numToLoad);\r\n            bytes32[] memory statuses = new bytes32[](numToLoad);\r\n\r\n            for (uint i = 0; i < numToLoad; i++)\r\n            {\r\n                if (i >= sellerDatabase[inputAddress].length)\r\n                    break;\r\n                buyers[i] = sellerDatabase[inputAddress][startID + i].buyer;\r\n                escrows[i] = buyerDatabase[buyers[i]][sellerDatabase[inputAddress][startID +i].buyer_nounce].escrow_agent;\r\n                amounts[i] = buyerDatabase[buyers[i]][sellerDatabase[inputAddress][startID + i].buyer_nounce].amount;\r\n                statuses[i] = checkStatus(buyers[i], sellerDatabase[inputAddress][startID + i].buyer_nounce);\r\n            }\r\n            return (buyers, escrows, amounts, statuses);\r\n        }\r\n\r\n        function escrowHistory(address inputAddress, uint startID, uint numToLoad) public constant returns (address[], address[], uint[], bytes32[]){\r\n        \r\n            address[] memory buyers = new address[](numToLoad);\r\n            address[] memory sellers = new address[](numToLoad);\r\n            uint[] memory amounts = new uint[](numToLoad);\r\n            bytes32[] memory statuses = new bytes32[](numToLoad);\r\n\r\n            for (uint i = 0; i < numToLoad; i++)\r\n            {\r\n                if (i >= escrowDatabase[inputAddress].length)\r\n                    break;\r\n                buyers[i] = escrowDatabase[inputAddress][startID + i].buyer;\r\n                sellers[i] = buyerDatabase[buyers[i]][escrowDatabase[inputAddress][startID +i].buyer_nounce].seller;\r\n                amounts[i] = buyerDatabase[buyers[i]][escrowDatabase[inputAddress][startID + i].buyer_nounce].amount;\r\n                statuses[i] = checkStatus(buyers[i], escrowDatabase[inputAddress][startID + i].buyer_nounce);\r\n            }\r\n            return (buyers, sellers, amounts, statuses);\r\n    }\r\n\r\n        function checkStatus(address buyerAddress, uint nounce) public constant returns (bytes32){\r\n\r\n            bytes32 status = \"\";\r\n\r\n            if (buyerDatabase[buyerAddress][nounce].release_approval){\r\n                status = \"Complete\";\r\n            } else if (buyerDatabase[buyerAddress][nounce].refund_approval){\r\n                status = \"Refunded\";\r\n            } else if (buyerDatabase[buyerAddress][nounce].escrow_intervention){\r\n                status = \"Pending Escrow Decision\";\r\n            } else\r\n            {\r\n                status = \"In Progress\";\r\n            }\r\n       \r\n            return (status);\r\n        }\r\n\r\n        \r\n        //When transaction is complete, buyer will release funds to seller\r\n        //Even if EscrowEscalation is raised, buyer can still approve fund release at any time\r\n        function buyerFundRelease(uint ID) public\r\n        {\r\n            require(ID < buyerDatabase[msg.sender].length && \r\n            buyerDatabase[msg.sender][ID].release_approval == false &&\r\n            buyerDatabase[msg.sender][ID].refund_approval == false);\r\n            \r\n            //Set release approval to true. Ensure approval for each transaction can only be called once.\r\n            buyerDatabase[msg.sender][ID].release_approval = true;\r\n\r\n            address seller = buyerDatabase[msg.sender][ID].seller;\r\n            address escrow_agent = buyerDatabase[msg.sender][ID].escrow_agent;\r\n\r\n            uint amount = buyerDatabase[msg.sender][ID].amount;\r\n            uint escrow_fee = buyerDatabase[msg.sender][ID].escrow_fee;\r\n\r\n            //Move funds under seller's owership\r\n            Funds[seller] += amount;\r\n            Funds[escrow_agent] += escrow_fee;\r\n\r\n\r\n        }\r\n\r\n        //Seller can refund the buyer at any time\r\n        function sellerRefund(uint ID) public\r\n        {\r\n            address buyerAddress = sellerDatabase[msg.sender][ID].buyer;\r\n            uint buyerID = sellerDatabase[msg.sender][ID].buyer_nounce;\r\n\r\n            require(\r\n            buyerDatabase[buyerAddress][buyerID].release_approval == false &&\r\n            buyerDatabase[buyerAddress][buyerID].refund_approval == false); \r\n\r\n            address escrow_agent = buyerDatabase[buyerAddress][buyerID].escrow_agent;\r\n            uint escrow_fee = buyerDatabase[buyerAddress][buyerID].escrow_fee;\r\n            uint amount = buyerDatabase[buyerAddress][buyerID].amount;\r\n        \r\n            //Once approved, buyer can invoke WithdrawFunds to claim his refund\r\n            buyerDatabase[buyerAddress][buyerID].refund_approval = true;\r\n\r\n            Funds[buyerAddress] += amount;\r\n            Funds[escrow_agent] += escrow_fee;\r\n            \r\n        }\r\n        \r\n        \r\n\r\n        //Either buyer or seller can raise escalation with escrow agent. \r\n        //Once escalation is activated, escrow agent can release funds to seller OR make a full refund to buyer\r\n\r\n        //Switcher = 0 for Buyer, Switcher = 1 for Seller\r\n        function EscrowEscalation(uint switcher, uint ID) public\r\n        {\r\n            //To activate EscrowEscalation\r\n            //1) Buyer must not have approved fund release.\r\n            //2) Seller must not have approved a refund.\r\n            //3) EscrowEscalation is being activated for the first time\r\n\r\n            //There is no difference whether the buyer or seller activates EscrowEscalation.\r\n            address buyerAddress;\r\n            uint buyerID; //transaction ID of in buyer's history\r\n            if (switcher == 0) // Buyer\r\n            {\r\n                buyerAddress = msg.sender;\r\n                buyerID = ID;\r\n            } else if (switcher == 1) //Seller\r\n            {\r\n                buyerAddress = sellerDatabase[msg.sender][ID].buyer;\r\n                buyerID = sellerDatabase[msg.sender][ID].buyer_nounce;\r\n            }\r\n\r\n            require(buyerDatabase[buyerAddress][buyerID].escrow_intervention == false  &&\r\n            buyerDatabase[buyerAddress][buyerID].release_approval == false &&\r\n            buyerDatabase[buyerAddress][buyerID].refund_approval == false);\r\n\r\n            //Activate the ability for Escrow Agent to intervent in this transaction\r\n            buyerDatabase[buyerAddress][buyerID].escrow_intervention = true;\r\n\r\n            \r\n        }\r\n        \r\n        //ID is the transaction ID from Escrow's history. \r\n        //Decision = 0 is for refunding Buyer. Decision = 1 is for releasing funds to Seller\r\n        function escrowDecision(uint ID, uint Decision) public\r\n        {\r\n            //Escrow can only make the decision IF\r\n            //1) Buyer has not yet approved fund release to seller\r\n            //2) Seller has not yet approved a refund to buyer\r\n            //3) Escrow Agent has not yet approved fund release to seller AND not approved refund to buyer\r\n            //4) Escalation Escalation is activated\r\n\r\n            address buyerAddress = escrowDatabase[msg.sender][ID].buyer;\r\n            uint buyerID = escrowDatabase[msg.sender][ID].buyer_nounce;\r\n            \r\n\r\n            require(\r\n            buyerDatabase[buyerAddress][buyerID].release_approval == false &&\r\n            buyerDatabase[buyerAddress][buyerID].escrow_intervention == true &&\r\n            buyerDatabase[buyerAddress][buyerID].refund_approval == false);\r\n            \r\n            uint escrow_fee = buyerDatabase[buyerAddress][buyerID].escrow_fee;\r\n            uint amount = buyerDatabase[buyerAddress][buyerID].amount;\r\n\r\n            if (Decision == 0) //Refund Buyer\r\n            {\r\n                buyerDatabase[buyerAddress][buyerID].refund_approval = true;    \r\n                Funds[buyerAddress] += amount;\r\n                Funds[msg.sender] += escrow_fee;\r\n                \r\n            } else if (Decision == 1) //Release funds to Seller\r\n            {                \r\n                buyerDatabase[buyerAddress][buyerID].release_approval = true;\r\n                Funds[buyerDatabase[buyerAddress][buyerID].seller] += amount;\r\n                Funds[msg.sender] += escrow_fee;\r\n            }  \r\n        }\r\n        \r\n        function WithdrawFunds() public\r\n        {\r\n            uint amount = Funds[msg.sender];\r\n            Funds[msg.sender] = 0;\r\n            if (!msg.sender.send(amount))\r\n                Funds[msg.sender] = amount;\r\n        }\r\n\r\n\r\n        function CheckBalance(address fromAddress) public constant returns (uint){\r\n            return (Funds[fromAddress]);\r\n        }\r\n     \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"inputAddress\",\"type\":\"address\"},{\"name\":\"startID\",\"type\":\"uint256\"},{\"name\":\"numToLoad\",\"type\":\"uint256\"}],\"name\":\"SellerHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setEscrowFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellerDatabase\",\"outputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"buyer_nounce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buyerAddress\",\"type\":\"address\"},{\"name\":\"startID\",\"type\":\"uint256\"},{\"name\":\"numToLoad\",\"type\":\"uint256\"}],\"name\":\"buyerHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"escrowFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"CheckBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"switcher\",\"type\":\"uint256\"},{\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"EscrowEscalation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"inputAddress\",\"type\":\"address\"},{\"name\":\"switcher\",\"type\":\"uint256\"},{\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"getSpecificTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"escrowAddress\",\"type\":\"address\"}],\"name\":\"getEscrowFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buyerAddress\",\"type\":\"address\"},{\"name\":\"nounce\",\"type\":\"uint256\"}],\"name\":\"checkStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"sellerRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ID\",\"type\":\"uint256\"},{\"name\":\"Decision\",\"type\":\"uint256\"}],\"name\":\"escrowDecision\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyerDatabase\",\"outputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"escrow_agent\",\"type\":\"address\"},{\"name\":\"escrow_fee\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"escrow_intervention\",\"type\":\"bool\"},{\"name\":\"release_approval\",\"type\":\"bool\"},{\"name\":\"refund_approval\",\"type\":\"bool\"},{\"name\":\"notes\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"inputAddress\",\"type\":\"address\"},{\"name\":\"switcher\",\"type\":\"uint256\"}],\"name\":\"getNumTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"inputAddress\",\"type\":\"address\"},{\"name\":\"startID\",\"type\":\"uint256\"},{\"name\":\"numToLoad\",\"type\":\"uint256\"}],\"name\":\"escrowHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"buyerFundRelease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellerAddress\",\"type\":\"address\"},{\"name\":\"escrowAddress\",\"type\":\"address\"},{\"name\":\"notes\",\"type\":\"bytes32\"}],\"name\":\"newEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrowDatabase\",\"outputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"buyer_nounce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Funds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EscrowMyEther","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ae7912d16ed5f41b2049108b28f252f92046740ff5b1c569f2fe48534e79c3e8"}]}