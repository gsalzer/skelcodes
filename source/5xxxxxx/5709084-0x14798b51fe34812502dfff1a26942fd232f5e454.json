{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract EIP20Interface {\r\n    function name() public view returns (string);\r\n    \r\n    function symbol() public view returns (string);\r\n    \r\n    function decimals() public view returns (uint8);\r\n    \r\n    function totalSupply() public view returns (uint256);\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract EIP20 is EIP20Interface {\r\n\r\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    /*\r\n    NOTE:\r\n    The following variables are OPTIONAL vanities. One does not have to include them.\r\n    They allow one to customise the token contract & in no way influences the core functionality.\r\n    Some wallets/interfaces might not even bother to look at this information.\r\n    */\r\n    string public tokenName;                   //fancy name: eg Simon Bucks\r\n    uint8 public tokenDecimals;                //How many decimals to show.\r\n    string public tokenSymbol;                 //An identifier: eg SBX\r\n    uint256 public tokenTotalSupply;\r\n\r\n    constructor(\r\n        uint256 _initialAmount,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol\r\n    ) public {\r\n        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\r\n        tokenTotalSupply = _initialAmount;                        // Update total supply\r\n        tokenName = _tokenName;                                   // Set the name for display purposes\r\n        tokenDecimals = _decimalUnits;                            // Amount of decimals for display purposes\r\n        tokenSymbol = _tokenSymbol;                               // Set the symbol for display purposes\r\n    }\r\n    \r\n    function name() public view returns (string) {\r\n        return tokenName;\r\n    }\r\n    \r\n    function symbol() public view returns (string) {\r\n        return tokenSymbol;\r\n    }\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return tokenDecimals;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return tokenTotalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowance >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        if (allowance < MAX_UINT256) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n        emit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract TimeBankToken is EIP20 {\r\n  using SafeMath for uint;\r\n\r\n  struct Vesting {\r\n    uint256 startTime; // vesting start time\r\n    uint256 initReleaseAmount;\r\n    uint256 amount;\r\n    uint256 interval; // release N% of amount each interval.\r\n    uint256 periods; // count of periods\r\n    uint256 withdrawed; // already used amount of released part\r\n  }\r\n\r\n  mapping (address => Vesting[]) vestings;\r\n  \r\n  address[] managerList;\r\n  mapping (address => bool) managers;\r\n  mapping (bytes32 => mapping (address => bool)) confirms;\r\n  \r\n  /*\r\n  at least <threshold> confirmations\r\n  */\r\n  uint majorityThreshold;\r\n  uint managementThreshold;\r\n\r\n  address coinbase;\r\n  address master;\r\n  bool public paused;\r\n\r\n  function checkAddress(address _addr) internal pure returns (bool) {\r\n    return _addr != address(0);\r\n  }\r\n\r\n  // 1 with 28 zeros\r\n  constructor(address _master, address[] _managers, uint _majorityThreshold, uint _managementThreshold) EIP20(10000000000000000000000000000, \"Time Bank Token\", 18, \"TBT\") public {\r\n    require(checkAddress(_master));\r\n    require(_managers.length >= _majorityThreshold);\r\n    require(_managers.length >= _managementThreshold);\r\n    \r\n    paused = false;\r\n    master = _master;\r\n    coinbase = msg.sender;\r\n    majorityThreshold = _majorityThreshold;\r\n    managementThreshold = _managementThreshold;\r\n\r\n    for (uint i=0; i<_managers.length; i++) {\r\n      require(checkAddress(_managers[i]));\r\n      managers[_managers[i]] = true;\r\n    }\r\n    managerList = _managers;\r\n\r\n    // initial batch operations\r\n    // internalPresaleVesting(0x0095F9DffeE386B650230eD3eC28891c1053aBE0, 10000, 60, 120, 240);\r\n    // internalPresaleVesting(0x00D4fC2CC18B96c44D9755afB6D4e6804cF827ee, 20000, 60, 120, 240);\r\n    // internalPresale(0x0092E41D42E834705fd07c9136Fd0b1028226bE3, 30000);\r\n  }\r\n\r\n  function pause() public isMaster isNotPaused {\r\n    require(isEnoughConfirmed(msg.data, 1));\r\n    paused = true;\r\n  }\r\n\r\n  function resume() public isMaster isPaused {\r\n    require(isEnoughConfirmed(msg.data, 1));\r\n    paused = false;\r\n  }\r\n\r\n  modifier isPaused {\r\n    require(paused == true);\r\n    _;\r\n  }\r\n\r\n  modifier isNotPaused {\r\n    require(paused == false);\r\n    _;\r\n  }\r\n\r\n  modifier isManager {\r\n    require(managers[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  modifier isMaster {\r\n    require(msg.sender == master);\r\n    _;\r\n  }\r\n\r\n  modifier isNotCoinbase {\r\n    require(msg.sender != coinbase);\r\n    _;\r\n  }\r\n\r\n  function managersCount() public view returns (uint) {\r\n    return managerList.length;\r\n  }\r\n\r\n  function isAddressManager(address _to) public view returns (bool) {\r\n    return managers[_to];\r\n  }\r\n\r\n  function getMajorityThreshold() public view  returns (uint) {\r\n    return majorityThreshold;\r\n  }\r\n\r\n  event MajorityThresholdChanged(uint oldThreshold, uint newThreshold);\r\n  event ReplaceManager(address oldAddr, address newAddr);\r\n  event RemoveManager(address manager);\r\n  event AddManager(address manager);\r\n\r\n  function setMajorityThreshold(uint _threshold) public isMaster isNotPaused {\r\n    require(_threshold > 0);\r\n    require(isEnoughConfirmed(msg.data, managementThreshold));\r\n    uint oldThreshold = majorityThreshold;\r\n    majorityThreshold = _threshold;\r\n    removeConfirm(msg.data);\r\n    emit MajorityThresholdChanged(oldThreshold, majorityThreshold);\r\n  }\r\n\r\n  function replaceManager(address _old, address _new) public isMaster isNotPaused {\r\n    require(checkAddress(_old));\r\n    require(checkAddress(_new));\r\n    require(isEnoughConfirmed(msg.data, managementThreshold));\r\n    internalRemoveManager(_old);\r\n    internalAddManager(_new);\r\n    rebuildManagerList();\r\n    removeConfirm(msg.data);\r\n    emit ReplaceManager(_old, _new);\r\n  }\r\n\r\n  function removeManager(address _manager) public isMaster isNotPaused {\r\n    require(checkAddress(_manager));\r\n    require(isEnoughConfirmed(msg.data, managementThreshold));\r\n    require(managerList.length > managementThreshold);\r\n    internalRemoveManager(_manager);\r\n    rebuildManagerList();\r\n    removeConfirm(msg.data);\r\n    emit RemoveManager(_manager);\r\n  }\r\n\r\n  function internalRemoveManager(address _manager) internal {\r\n    require(checkAddress(_manager));\r\n    managers[_manager] = false;\r\n  }\r\n\r\n  function addManager(address _manager) public isMaster isNotPaused {\r\n    require(checkAddress(_manager));\r\n    require(isEnoughConfirmed(msg.data, managementThreshold));\r\n    internalAddManager(_manager);\r\n    rebuildManagerList();\r\n    removeConfirm(msg.data);\r\n    emit AddManager(_manager);\r\n  }\r\n\r\n  function internalAddManager(address _manager) internal {\r\n    require(checkAddress(_manager));\r\n    managers[_manager] = true;\r\n    managerList.push(_manager);\r\n  }\r\n\r\n  mapping (address => bool) checked;\r\n\r\n  function rebuildManagerList() internal {\r\n    address[] memory res = new address[](managerList.length);\r\n    for (uint k=0; k<managerList.length; k++) {\r\n      checked[managerList[k]] = false;\r\n    }\r\n    uint j=0;\r\n    for (uint i=0; i<managerList.length; i++) {\r\n      address manager = managerList[i];\r\n      if (managers[manager] && checked[manager] == false) {\r\n        res[j] = manager;\r\n        checked[manager] = true;\r\n        j++;\r\n      }\r\n    }\r\n    managerList = res;\r\n    managerList.length = j;\r\n  }\r\n\r\n  function checkData(bytes data) internal pure returns (bool) {\r\n    return data.length != 0;\r\n  }\r\n\r\n  event Confirm(address manager, bytes data);\r\n  event Revoke(address manager, bytes data);\r\n\r\n  /*\r\n  manager use this function to confirm a operation\r\n  confirm will not be call inside other functions, so it can be external to save some gas\r\n  @param {bytes} data is the transaction's raw input\r\n  */\r\n  function confirm(bytes data) external isManager {\r\n    checkData(data);\r\n    bytes32 op = keccak256(data);\r\n    if (confirms[op][msg.sender] == false) {\r\n      confirms[op][msg.sender] = true;\r\n    }\r\n    emit Confirm(msg.sender, data);\r\n  }\r\n\r\n  /*\r\n  manager use this function to revoke a confirm of the operation\r\n  revoke will not be call inside other functions, so it can be external to save some gas\r\n  @param {bytes} data is the transaction's raw input\r\n  */\r\n  function revoke(bytes data) external isManager {\r\n    checkData(data);\r\n    bytes32 op = keccak256(data);\r\n    if (confirms[op][msg.sender] == true) {\r\n      confirms[op][msg.sender] = false;\r\n    }\r\n    emit Revoke(msg.sender, data);\r\n  }\r\n\r\n  /*\r\n  check a operation is confirmed or not\r\n  */\r\n  function isConfirmed(bytes data) public view isManager returns (bool) {\r\n    bytes32 op = keccak256(data);\r\n    return confirms[op][msg.sender];\r\n  }\r\n\r\n  function isConfirmedBy(bytes data, address manager) public view returns (bool) {\r\n    bytes32 op = keccak256(data);\r\n    return confirms[op][manager];\r\n  } \r\n\r\n  function isMajorityConfirmed(bytes data) public view returns (bool) {\r\n    return isEnoughConfirmed(data, majorityThreshold);\r\n  }\r\n\r\n  function isEnoughConfirmed(bytes data, uint count) internal view returns (bool) {\r\n    bytes32 op = keccak256(data);\r\n    uint confirmsCount = 0;\r\n    for (uint i=0; i<managerList.length; i++) {\r\n      if (confirms[op][managerList[i]] == true) {\r\n        confirmsCount = confirmsCount.add(1);\r\n      }\r\n    }\r\n    return confirmsCount >= count;\r\n  }\r\n\r\n  /*\r\n  once the operation is executed, the confirm of the operation should be removed\r\n  */\r\n  function removeConfirm(bytes data) internal {\r\n    bytes32 op = keccak256(data);\r\n    for (uint i=0; i<managerList.length; i++) {\r\n      confirms[op][managerList[i]] = false;\r\n    }\r\n  }\r\n\r\n  /*\r\n  sale coin with time locking\r\n  only the manager can call this function\r\n  and this operation should be confirmed\r\n  */\r\n  function presaleVesting(address _to, uint256 _startTime, uint256 _initReleaseAmount, uint256 _amount, uint256 _interval, uint256 _periods) public isManager isNotPaused {\r\n    checkAddress(_to);\r\n    require(isMajorityConfirmed(msg.data));\r\n    internalPresaleVesting(_to, _startTime, _initReleaseAmount, _amount, _interval, _periods);\r\n    removeConfirm(msg.data);\r\n  }\r\n\r\n  function batchPresaleVesting(address[] _to, uint256[] _startTime, uint256[] _initReleaseAmount, uint256[] _amount, uint256[] _interval, uint256[] _periods) public isManager isNotPaused {\r\n    require(isMajorityConfirmed(msg.data));\r\n    for (uint i=0; i<_to.length; i++) {\r\n      internalPresaleVesting(_to[i], _startTime[i], _initReleaseAmount[i], _amount[i], _interval[i], _periods[i]);\r\n    }\r\n    removeConfirm(msg.data);\r\n  }\r\n\r\n  function internalPresaleVesting(address _to, uint256 _startTime, uint256 _initReleaseAmount, uint256 _amount, uint256 _interval, uint256 _periods) internal {\r\n    require(balances[coinbase] >= _amount);\r\n    require(_initReleaseAmount <= _amount);\r\n    require(checkAddress(_to));\r\n    vestings[_to].push(Vesting(\r\n      _startTime, _initReleaseAmount, _amount, _interval, _periods, 0\r\n    ));\r\n    balances[coinbase] = balances[coinbase].sub(_amount);\r\n    emit PresaleVesting(_to, _startTime, _amount, _interval, _periods);\r\n  }\r\n\r\n  /*\r\n  sale coin without time locking\r\n  only the manager can call this function\r\n  and this operation should be confirmed\r\n  */\r\n  function presale(address _to, uint256 _value) public isManager isNotPaused {\r\n    require(isMajorityConfirmed(msg.data));\r\n    internalPresale(_to, _value);\r\n    removeConfirm(msg.data);\r\n  }\r\n\r\n  function batchPresale(address[] _to, uint256[] _amount) public isManager isNotPaused {\r\n    require(isMajorityConfirmed(msg.data));\r\n    for (uint i=0; i<_to.length; i++) {\r\n      internalPresale(_to[i], _amount[i]);\r\n    }\r\n    removeConfirm(msg.data);\r\n  }\r\n\r\n  function internalPresale(address _to, uint256 _value) internal {\r\n    require(balances[coinbase] >= _value);\r\n    require(checkAddress(_to));\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[coinbase] = balances[coinbase].sub(_value);\r\n    emit Presale(_to, _value);\r\n  }\r\n\r\n  /*\r\n  events\r\n  */\r\n  event Presale(address indexed to, uint256 value);\r\n  event PresaleVesting(address indexed to, uint256 startTime, uint256 amount, uint256 interval, uint256 periods);\r\n\r\n  /*\r\n  math function used to calculate vesting curve\r\n  */\r\n  function vestingFunc(uint256 _currentTime, uint256 _startTime, uint256 _initReleaseAmount, uint256 _amount, uint256 _interval, uint256 _periods) public pure returns (uint256) {\r\n    if (_currentTime < _startTime) {\r\n      return 0;\r\n    }\r\n    uint256 t = _currentTime.sub(_startTime);\r\n    uint256 end = _periods.mul(_interval);\r\n    if (t >= end) {\r\n      return _amount;\r\n    }\r\n    uint256 i_amount = _amount.sub(_initReleaseAmount).div(_periods);\r\n    uint256 i = t.div(_interval);\r\n    return i_amount.mul(i).add(_initReleaseAmount);\r\n  }\r\n\r\n  function queryWithdrawed(uint _idx) public view returns (uint256) {\r\n    return vestings[msg.sender][_idx].withdrawed;\r\n  }\r\n\r\n  function queryVestingRemain(uint256 _currentTime, uint _idx) public view returns (uint256) {\r\n    uint256 released = vestingFunc(\r\n      _currentTime,\r\n      vestings[msg.sender][_idx].startTime, vestings[msg.sender][_idx].initReleaseAmount, vestings[msg.sender][_idx].amount,\r\n      vestings[msg.sender][_idx].interval, vestings[msg.sender][_idx].periods\r\n    );\r\n    return released.sub(vestings[msg.sender][_idx].withdrawed);\r\n  }\r\n\r\n  /*\r\n  calculate the released amount of vesting coin\r\n  it cannot be view, because this function relays on 'now'\r\n  */\r\n  function vestingReleased(uint256 _startTime, uint256 _initReleaseAmount, uint256 _amount, uint256 _interval, uint256 _periods) internal view returns (uint256) {\r\n    return vestingFunc(now, _startTime, _initReleaseAmount, _amount, _interval, _periods);\r\n  }\r\n\r\n  /*\r\n  withdraw all released vesting coin to balance\r\n  */\r\n  function withdrawVestings(address _to) internal {\r\n    uint256 sum = 0;\r\n    for (uint i=0; i<vestings[_to].length; i++) {\r\n      if (vestings[_to][i].amount == vestings[_to][i].withdrawed) {\r\n        continue;\r\n      }\r\n\r\n      uint256 released = vestingReleased(\r\n        vestings[_to][i].startTime, vestings[_to][i].initReleaseAmount, vestings[_to][i].amount,\r\n        vestings[_to][i].interval, vestings[_to][i].periods\r\n      );\r\n      uint256 remain = released.sub(vestings[_to][i].withdrawed);\r\n      if (remain >= 0) {\r\n        vestings[_to][i].withdrawed = released;\r\n        sum = sum.add(remain);\r\n      }\r\n    }\r\n    balances[_to] = balances[_to].add(sum);\r\n  }\r\n\r\n  /*\r\n  sum of all vestings balance (regardless of released or not)\r\n  each vesting is amount - withdrawed\r\n  */\r\n  function vestingsBalance(address _to) public view returns (uint256) {\r\n    uint256 sum = 0;\r\n    for (uint i=0; i<vestings[_to].length; i++) {\r\n      sum = sum.add(vestings[_to][i].amount.sub(vestings[_to][i].withdrawed));\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  /*\r\n  sum of all remaining vestings balance (only the released part)\r\n  released - withdrawed\r\n  */\r\n  function vestingsReleasedRemain(address _to) internal view returns (uint256) {\r\n    uint256 sum = 0;\r\n    for (uint i=0; i<vestings[_to].length; i++) {\r\n      uint256 released = vestingReleased(\r\n        vestings[_to][i].startTime, vestings[_to][i].initReleaseAmount, vestings[_to][i].amount,\r\n        vestings[_to][i].interval, vestings[_to][i].periods\r\n      );\r\n      sum = sum.add(released.sub(vestings[_to][i].withdrawed));\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  /*\r\n  total balance\r\n  sum of vestings balance (includes not released part) and unlocking coin balance\r\n  */\r\n  function balanceOf(address _to) public view returns (uint256) {\r\n    uint256 vbalance = vestingsBalance(_to);\r\n    return vbalance.add(super.balanceOf(_to));\r\n  }\r\n\r\n  /*\r\n  sum of vestings balance and unlocking coin balance\r\n  */\r\n  function vestingsRemainBalance(address _to) internal view returns (uint256) {\r\n    return vestingsReleasedRemain(_to).add(super.balanceOf(_to));\r\n  }\r\n\r\n  /*\r\n  transfer <_value> coin from <msg.sender> to <_to> address\r\n  1. check remain balance\r\n  2. withdraw all vesting coin to balance\r\n  3. call original ERC20 transafer function\r\n  */\r\n  function transfer(address _to, uint256 _value) public isNotCoinbase isNotPaused returns (bool) {\r\n    checkAddress(_to);\r\n    uint256 remain = vestingsRemainBalance(msg.sender);\r\n    require(remain >= _value);\r\n    withdrawVestings(msg.sender);\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /*\r\n  transferFrom <_value> coin from <_from> to <_to> address\r\n  1. check remain balance\r\n  2. withdraw all vesting coin to balance\r\n  3. call original ERC20 transafer function\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _value) public isNotPaused returns (bool) {\r\n    checkAddress(_from);\r\n    checkAddress(_to);\r\n    uint256 remain = vestingsRemainBalance(_from);\r\n    require(remain >= _value);\r\n    withdrawVestings(_from);\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /*\r\n  approve <_value> coin from <_from> to <_to> address\r\n  1. check remain balance\r\n  2. withdraw all vesting coin to balance\r\n  3. call original ERC20 transafer function\r\n  */\r\n  function approve(address _spender, uint256 _value) public isNotCoinbase isNotPaused returns (bool) {\r\n    checkAddress(_spender);\r\n    uint256 remain = vestingsRemainBalance(msg.sender);\r\n    require(remain >= _value);\r\n    withdrawVestings(msg.sender);\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return super.allowance(_owner, _spender);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_old\",\"type\":\"address\"},{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"replaceManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_currentTime\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_initReleaseAmount\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_interval\",\"type\":\"uint256\"},{\"name\":\"_periods\",\"type\":\"uint256\"}],\"name\":\"vestingFunc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setMajorityThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"batchPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"queryWithdrawed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_startTime\",\"type\":\"uint256[]\"},{\"name\":\"_initReleaseAmount\",\"type\":\"uint256[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"name\":\"_interval\",\"type\":\"uint256[]\"},{\"name\":\"_periods\",\"type\":\"uint256[]\"}],\"name\":\"batchPresaleVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"isAddressManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_initReleaseAmount\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_interval\",\"type\":\"uint256\"},{\"name\":\"_periods\",\"type\":\"uint256\"}],\"name\":\"presaleVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"vestingsBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMajorityThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"isMajorityConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_currentTime\",\"type\":\"uint256\"},{\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"queryVestingRemain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"confirm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"presale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"isConfirmedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_master\",\"type\":\"address\"},{\"name\":\"_managers\",\"type\":\"address[]\"},{\"name\":\"_majorityThreshold\",\"type\":\"uint256\"},{\"name\":\"_managementThreshold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"MajorityThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"ReplaceManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"RemoveManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"AddManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Confirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Presale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"interval\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"periods\",\"type\":\"uint256\"}],\"name\":\"PresaleVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TimeBankToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a5ae2048af02cde6720b30b7ac17c9cb26092eb20000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004000000000000000000000000b6e44f6e5551718d1fd2adaf8a210fc4fd8e74f0000000000000000000000000b8da7ec01033007ab396d27b45253882484f93fa000000000000000000000000f28f8eb05252bc1e2a689cb8db9ee7aff5c8310c0000000000000000000000009fec6f021616e4fddd65d03faa6da1bbde9029c5","Library":"","SwarmSource":"bzzr://f5c9c277aa2e9e5056ad7f187a7c516ffafff2e69be67bdb32c08cba0ecfc2b8"}]}