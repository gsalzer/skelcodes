{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.20;\r\n\r\ncontract IAugur {\r\n    function createChildUniverse(bytes32 _parentPayoutDistributionHash, uint256[] _parentPayoutNumerators, bool _parentInvalid) public returns (IUniverse);\r\n    function isKnownUniverse(IUniverse _universe) public view returns (bool);\r\n    function trustedTransfer(ERC20 _token, address _from, address _to, uint256 _amount) public returns (bool);\r\n    function logMarketCreated(bytes32 _topic, string _description, string _extraInfo, IUniverse _universe, address _market, address _marketCreator, bytes32[] _outcomes, int256 _minPrice, int256 _maxPrice, IMarket.MarketType _marketType) public returns (bool);\r\n    function logMarketCreated(bytes32 _topic, string _description, string _extraInfo, IUniverse _universe, address _market, address _marketCreator, int256 _minPrice, int256 _maxPrice, IMarket.MarketType _marketType) public returns (bool);\r\n    function logInitialReportSubmitted(IUniverse _universe, address _reporter, address _market, uint256 _amountStaked, bool _isDesignatedReporter, uint256[] _payoutNumerators, bool _invalid) public returns (bool);\r\n    function disputeCrowdsourcerCreated(IUniverse _universe, address _market, address _disputeCrowdsourcer, uint256[] _payoutNumerators, uint256 _size, bool _invalid) public returns (bool);\r\n    function logDisputeCrowdsourcerContribution(IUniverse _universe, address _reporter, address _market, address _disputeCrowdsourcer, uint256 _amountStaked) public returns (bool);\r\n    function logDisputeCrowdsourcerCompleted(IUniverse _universe, address _market, address _disputeCrowdsourcer) public returns (bool);\r\n    function logInitialReporterRedeemed(IUniverse _universe, address _reporter, address _market, uint256 _amountRedeemed, uint256 _repReceived, uint256 _reportingFeesReceived, uint256[] _payoutNumerators) public returns (bool);\r\n    function logDisputeCrowdsourcerRedeemed(IUniverse _universe, address _reporter, address _market, uint256 _amountRedeemed, uint256 _repReceived, uint256 _reportingFeesReceived, uint256[] _payoutNumerators) public returns (bool);\r\n    function logFeeWindowRedeemed(IUniverse _universe, address _reporter, uint256 _amountRedeemed, uint256 _reportingFeesReceived) public returns (bool);\r\n    function logMarketFinalized(IUniverse _universe) public returns (bool);\r\n    function logMarketMigrated(IMarket _market, IUniverse _originalUniverse) public returns (bool);\r\n    function logReportingParticipantDisavowed(IUniverse _universe, IMarket _market) public returns (bool);\r\n    function logMarketParticipantsDisavowed(IUniverse _universe) public returns (bool);\r\n    function logOrderCanceled(IUniverse _universe, address _shareToken, address _sender, bytes32 _orderId, Order.Types _orderType, uint256 _tokenRefund, uint256 _sharesRefund) public returns (bool);\r\n    function logOrderCreated(Order.Types _orderType, uint256 _amount, uint256 _price, address _creator, uint256 _moneyEscrowed, uint256 _sharesEscrowed, bytes32 _tradeGroupId, bytes32 _orderId, IUniverse _universe, address _shareToken) public returns (bool);\r\n    function logOrderFilled(IUniverse _universe, address _shareToken, address _filler, bytes32 _orderId, uint256 _numCreatorShares, uint256 _numCreatorTokens, uint256 _numFillerShares, uint256 _numFillerTokens, uint256 _marketCreatorFees, uint256 _reporterFees, uint256 _amountFilled, bytes32 _tradeGroupId) public returns (bool);\r\n    function logCompleteSetsPurchased(IUniverse _universe, IMarket _market, address _account, uint256 _numCompleteSets) public returns (bool);\r\n    function logCompleteSetsSold(IUniverse _universe, IMarket _market, address _account, uint256 _numCompleteSets) public returns (bool);\r\n    function logTradingProceedsClaimed(IUniverse _universe, address _shareToken, address _sender, address _market, uint256 _numShares, uint256 _numPayoutTokens, uint256 _finalTokenBalance) public returns (bool);\r\n    function logUniverseForked() public returns (bool);\r\n    function logFeeWindowTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\r\n    function logReputationTokensTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\r\n    function logDisputeCrowdsourcerTokensTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\r\n    function logShareTokensTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\r\n    function logReputationTokenBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\r\n    function logReputationTokenMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\r\n    function logShareTokenBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\r\n    function logShareTokenMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\r\n    function logFeeWindowBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\r\n    function logFeeWindowMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\r\n    function logDisputeCrowdsourcerTokensBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\r\n    function logDisputeCrowdsourcerTokensMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\r\n    function logFeeWindowCreated(IFeeWindow _feeWindow, uint256 _id) public returns (bool);\r\n    function logFeeTokenTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\r\n    function logFeeTokenBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\r\n    function logFeeTokenMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\r\n    function logTimestampSet(uint256 _newTimestamp) public returns (bool);\r\n    function logInitialReporterTransferred(IUniverse _universe, IMarket _market, address _from, address _to) public returns (bool);\r\n    function logMarketTransferred(IUniverse _universe, address _from, address _to) public returns (bool);\r\n    function logMarketMailboxTransferred(IUniverse _universe, IMarket _market, address _from, address _to) public returns (bool);\r\n    function logEscapeHatchChanged(bool _isOn) public returns (bool);\r\n}\r\n\r\ncontract IControlled {\r\n    function getController() public view returns (IController);\r\n    function setController(IController _controller) public returns(bool);\r\n}\r\n\r\ncontract Controlled is IControlled {\r\n    IController internal controller;\r\n\r\n    modifier onlyWhitelistedCallers {\r\n        require(controller.assertIsWhitelisted(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyCaller(bytes32 _key) {\r\n        require(msg.sender == controller.lookup(_key));\r\n        _;\r\n    }\r\n\r\n    modifier onlyControllerCaller {\r\n        require(IController(msg.sender) == controller);\r\n        _;\r\n    }\r\n\r\n    modifier onlyInGoodTimes {\r\n        require(controller.stopInEmergency());\r\n        _;\r\n    }\r\n\r\n    modifier onlyInBadTimes {\r\n        require(controller.onlyInEmergency());\r\n        _;\r\n    }\r\n\r\n    function Controlled() public {\r\n        controller = IController(msg.sender);\r\n    }\r\n\r\n    function getController() public view returns(IController) {\r\n        return controller;\r\n    }\r\n\r\n    function setController(IController _controller) public onlyControllerCaller returns(bool) {\r\n        controller = _controller;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract IController {\r\n    function assertIsWhitelisted(address _target) public view returns(bool);\r\n    function lookup(bytes32 _key) public view returns(address);\r\n    function stopInEmergency() public view returns(bool);\r\n    function onlyInEmergency() public view returns(bool);\r\n    function getAugur() public view returns (IAugur);\r\n    function getTimestamp() public view returns (uint256);\r\n}\r\n\r\ncontract DelegationTarget is Controlled {\r\n    bytes32 public controllerLookupName;\r\n}\r\n\r\ncontract IOwnable {\r\n    function getOwner() public view returns (address);\r\n    function transferOwnership(address newOwner) public returns (bool);\r\n}\r\n\r\ncontract ITyped {\r\n    function getTypeName() public view returns (bytes32);\r\n}\r\n\r\ncontract Initializable {\r\n    bool private initialized = false;\r\n\r\n    modifier afterInitialized {\r\n        require(initialized);\r\n        _;\r\n    }\r\n\r\n    modifier beforeInitialized {\r\n        require(!initialized);\r\n        _;\r\n    }\r\n\r\n    function endInitialization() internal beforeInitialized returns (bool) {\r\n        initialized = true;\r\n        return true;\r\n    }\r\n\r\n    function getInitialized() public view returns (bool) {\r\n        return initialized;\r\n    }\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n    address internal owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner returns (bool) {\r\n        if (_newOwner != address(0)) {\r\n            onTransferOwnership(owner, _newOwner);\r\n            owner = _newOwner;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Subclasses of this token may want to send additional logs through the centralized Augur log emitter contract\r\n    function onTransferOwnership(address, address) internal returns (bool);\r\n}\r\n\r\nlibrary SafeMathUint256 {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a <= b) {\r\n            return a;\r\n        } else {\r\n            return b;\r\n        }\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a >= b) {\r\n            return a;\r\n        } else {\r\n            return b;\r\n        }\r\n    }\r\n\r\n    function getUint256Min() internal pure returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    function getUint256Max() internal pure returns (uint256) {\r\n        return 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    }\r\n\r\n    function isMultipleOf(uint256 a, uint256 b) internal pure returns (bool) {\r\n        return a % b == 0;\r\n    }\r\n\r\n    // Float [fixed point] Operations\r\n    function fxpMul(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {\r\n        return div(mul(a, b), base);\r\n    }\r\n\r\n    function fxpDiv(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {\r\n        return div(mul(a, base), b);\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function totalSupply() public view returns (uint256);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract IFeeToken is ERC20, Initializable {\r\n    function initialize(IFeeWindow _feeWindow) public returns (bool);\r\n    function getFeeWindow() public view returns (IFeeWindow);\r\n    function feeWindowBurn(address _target, uint256 _amount) public returns (bool);\r\n    function mintForReportingParticipant(address _target, uint256 _amount) public returns (bool);\r\n}\r\n\r\ncontract IFeeWindow is ITyped, ERC20 {\r\n    function initialize(IUniverse _universe, uint256 _feeWindowId) public returns (bool);\r\n    function getUniverse() public view returns (IUniverse);\r\n    function getReputationToken() public view returns (IReputationToken);\r\n    function getStartTime() public view returns (uint256);\r\n    function getEndTime() public view returns (uint256);\r\n    function getNumMarkets() public view returns (uint256);\r\n    function getNumInvalidMarkets() public view returns (uint256);\r\n    function getNumIncorrectDesignatedReportMarkets() public view returns (uint256);\r\n    function getNumDesignatedReportNoShows() public view returns (uint256);\r\n    function getFeeToken() public view returns (IFeeToken);\r\n    function isActive() public view returns (bool);\r\n    function isOver() public view returns (bool);\r\n    function onMarketFinalized() public returns (bool);\r\n    function buy(uint256 _attotokens) public returns (bool);\r\n    function redeem(address _sender) public returns (bool);\r\n    function redeemForReportingParticipant() public returns (bool);\r\n    function mintFeeTokens(uint256 _amount) public returns (bool);\r\n    function trustedUniverseBuy(address _buyer, uint256 _attotokens) public returns (bool);\r\n}\r\n\r\ncontract IMailbox {\r\n    function initialize(address _owner, IMarket _market) public returns (bool);\r\n    function depositEther() public payable returns (bool);\r\n}\r\n\r\ncontract IMarket is ITyped, IOwnable {\r\n    enum MarketType {\r\n        YES_NO,\r\n        CATEGORICAL,\r\n        SCALAR\r\n    }\r\n\r\n    function initialize(IUniverse _universe, uint256 _endTime, uint256 _feePerEthInAttoeth, ICash _cash, address _designatedReporterAddress, address _creator, uint256 _numOutcomes, uint256 _numTicks) public payable returns (bool _success);\r\n    function derivePayoutDistributionHash(uint256[] _payoutNumerators, bool _invalid) public view returns (bytes32);\r\n    function getUniverse() public view returns (IUniverse);\r\n    function getFeeWindow() public view returns (IFeeWindow);\r\n    function getNumberOfOutcomes() public view returns (uint256);\r\n    function getNumTicks() public view returns (uint256);\r\n    function getDenominationToken() public view returns (ICash);\r\n    function getShareToken(uint256 _outcome)  public view returns (IShareToken);\r\n    function getMarketCreatorSettlementFeeDivisor() public view returns (uint256);\r\n    function getForkingMarket() public view returns (IMarket _market);\r\n    function getEndTime() public view returns (uint256);\r\n    function getMarketCreatorMailbox() public view returns (IMailbox);\r\n    function getWinningPayoutDistributionHash() public view returns (bytes32);\r\n    function getWinningPayoutNumerator(uint256 _outcome) public view returns (uint256);\r\n    function getReputationToken() public view returns (IReputationToken);\r\n    function getFinalizationTime() public view returns (uint256);\r\n    function getInitialReporterAddress() public view returns (address);\r\n    function deriveMarketCreatorFeeAmount(uint256 _amount) public view returns (uint256);\r\n    function isContainerForShareToken(IShareToken _shadyTarget) public view returns (bool);\r\n    function isContainerForReportingParticipant(IReportingParticipant _reportingParticipant) public view returns (bool);\r\n    function isInvalid() public view returns (bool);\r\n    function finalize() public returns (bool);\r\n    function designatedReporterWasCorrect() public view returns (bool);\r\n    function designatedReporterShowed() public view returns (bool);\r\n    function isFinalized() public view returns (bool);\r\n    function finalizeFork() public returns (bool);\r\n    function assertBalances() public view returns (bool);\r\n}\r\n\r\ncontract IReportingParticipant {\r\n    function getStake() public view returns (uint256);\r\n    function getPayoutDistributionHash() public view returns (bytes32);\r\n    function liquidateLosing() public returns (bool);\r\n    function redeem(address _redeemer) public returns (bool);\r\n    function isInvalid() public view returns (bool);\r\n    function isDisavowed() public view returns (bool);\r\n    function migrate() public returns (bool);\r\n    function getPayoutNumerator(uint256 _outcome) public view returns (uint256);\r\n    function getMarket() public view returns (IMarket);\r\n    function getSize() public view returns (uint256);\r\n}\r\n\r\ncontract BaseReportingParticipant is Controlled, IReportingParticipant {\r\n    bool internal invalid;\r\n    IMarket internal market;\r\n    uint256 internal size;\r\n    bytes32 internal payoutDistributionHash;\r\n    IFeeWindow internal feeWindow;\r\n    uint256[] internal payoutNumerators;\r\n    IReputationToken internal reputationToken;\r\n    ICash internal cash;\r\n\r\n    function migrate() public onlyInGoodTimes returns (bool) {\r\n        require(IMarket(msg.sender) == market);\r\n        uint256 _balance = feeWindow.getFeeToken().balanceOf(this);\r\n        feeWindow = market.getFeeWindow();\r\n        feeWindow.mintFeeTokens(_balance);\r\n        return true;\r\n    }\r\n\r\n    function liquidateLosing() public onlyInGoodTimes returns (bool) {\r\n        require(IMarket(msg.sender) == market);\r\n        require(market.getWinningPayoutDistributionHash() != getPayoutDistributionHash() && market.getWinningPayoutDistributionHash() != bytes32(0));\r\n        IReputationToken _reputationToken = market.getReputationToken();\r\n        require(_reputationToken.transfer(market, _reputationToken.balanceOf(this)));\r\n        return true;\r\n    }\r\n\r\n    function fork() internal onlyInGoodTimes returns (bool) {\r\n        require(market == market.getUniverse().getForkingMarket());\r\n        IUniverse _newUniverse = market.getUniverse().createChildUniverse(payoutNumerators, invalid);\r\n        IReputationToken _newReputationToken = _newUniverse.getReputationToken();\r\n        redeemForAllFeeWindows();\r\n        uint256 _balance = reputationToken.balanceOf(this);\r\n        reputationToken.migrateOut(_newReputationToken, _balance);\r\n        _newReputationToken.mintForReportingParticipant(_balance);\r\n        reputationToken = _newReputationToken;\r\n        controller.getAugur().logReportingParticipantDisavowed(market.getUniverse(), market);\r\n        market = IMarket(0);\r\n        return true;\r\n    }\r\n\r\n    function redeemForAllFeeWindows() internal returns (bool) {\r\n        IFeeWindow _curFeeWindow = feeWindow;\r\n        IUniverse _universe = feeWindow.getUniverse();\r\n        while (_curFeeWindow.getFeeToken().balanceOf(this) > 0) {\r\n            _curFeeWindow.redeemForReportingParticipant();\r\n            _curFeeWindow = _universe.getOrCreateFeeWindowBefore(_curFeeWindow);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function isInvalid() public view returns (bool) {\r\n        return invalid;\r\n    }\r\n\r\n    function getSize() public view returns (uint256) {\r\n        return size;\r\n    }\r\n\r\n    function getPayoutDistributionHash() public view returns (bytes32) {\r\n        return payoutDistributionHash;\r\n    }\r\n\r\n    function getMarket() public view returns (IMarket) {\r\n        return market;\r\n    }\r\n\r\n    function isDisavowed() public view returns (bool) {\r\n        return market == IMarket(0) || !market.isContainerForReportingParticipant(this);\r\n    }\r\n\r\n    function getPayoutNumerator(uint256 _outcome) public view returns (uint256) {\r\n        return payoutNumerators[_outcome];\r\n    }\r\n}\r\n\r\ncontract IDisputeCrowdsourcer is IReportingParticipant, ERC20 {\r\n    function initialize(IMarket market, uint256 _size, bytes32 _payoutDistributionHash, uint256[] _payoutNumerators, bool _invalid) public returns (bool);\r\n    function contribute(address _participant, uint256 _amount) public returns (uint256);\r\n}\r\n\r\ncontract IInitialReporter is IReportingParticipant {\r\n    function initialize(IMarket _market, address _designatedReporter) public returns (bool);\r\n    function report(address _reporter, bytes32 _payoutDistributionHash, uint256[] _payoutNumerators, bool _invalid) public returns (bool);\r\n    function resetReportTimestamp() public returns (bool);\r\n    function designatedReporterShowed() public view returns (bool);\r\n    function designatedReporterWasCorrect() public view returns (bool);\r\n    function getDesignatedReporter() public view returns (address);\r\n    function getReportTimestamp() public view returns (uint256);\r\n    function migrateREP() public returns (bool);\r\n}\r\n\r\ncontract IReputationToken is ITyped, ERC20 {\r\n    function initialize(IUniverse _universe) public returns (bool);\r\n    function migrateOut(IReputationToken _destination, uint256 _attotokens) public returns (bool);\r\n    function migrateIn(address _reporter, uint256 _attotokens) public returns (bool);\r\n    function trustedReportingParticipantTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\r\n    function trustedMarketTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\r\n    function trustedFeeWindowTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\r\n    function trustedUniverseTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\r\n    function getUniverse() public view returns (IUniverse);\r\n    function getTotalMigrated() public view returns (uint256);\r\n    function getTotalTheoreticalSupply() public view returns (uint256);\r\n    function mintForReportingParticipant(uint256 _amountMigrated) public returns (bool);\r\n}\r\n\r\ncontract IUniverse is ITyped {\r\n    function initialize(IUniverse _parentUniverse, bytes32 _parentPayoutDistributionHash) external returns (bool);\r\n    function fork() public returns (bool);\r\n    function getParentUniverse() public view returns (IUniverse);\r\n    function createChildUniverse(uint256[] _parentPayoutNumerators, bool _invalid) public returns (IUniverse);\r\n    function getChildUniverse(bytes32 _parentPayoutDistributionHash) public view returns (IUniverse);\r\n    function getReputationToken() public view returns (IReputationToken);\r\n    function getForkingMarket() public view returns (IMarket);\r\n    function getForkEndTime() public view returns (uint256);\r\n    function getForkReputationGoal() public view returns (uint256);\r\n    function getParentPayoutDistributionHash() public view returns (bytes32);\r\n    function getDisputeRoundDurationInSeconds() public view returns (uint256);\r\n    function getOrCreateFeeWindowByTimestamp(uint256 _timestamp) public returns (IFeeWindow);\r\n    function getOrCreateCurrentFeeWindow() public returns (IFeeWindow);\r\n    function getOrCreateNextFeeWindow() public returns (IFeeWindow);\r\n    function getOpenInterestInAttoEth() public view returns (uint256);\r\n    function getRepMarketCapInAttoeth() public view returns (uint256);\r\n    function getTargetRepMarketCapInAttoeth() public view returns (uint256);\r\n    function getOrCacheValidityBond() public returns (uint256);\r\n    function getOrCacheDesignatedReportStake() public returns (uint256);\r\n    function getOrCacheDesignatedReportNoShowBond() public returns (uint256);\r\n    function getOrCacheReportingFeeDivisor() public returns (uint256);\r\n    function getDisputeThresholdForFork() public view returns (uint256);\r\n    function getInitialReportMinValue() public view returns (uint256);\r\n    function calculateFloatingValue(uint256 _badMarkets, uint256 _totalMarkets, uint256 _targetDivisor, uint256 _previousValue, uint256 _defaultValue, uint256 _floor) public pure returns (uint256 _newValue);\r\n    function getOrCacheMarketCreationCost() public returns (uint256);\r\n    function getCurrentFeeWindow() public view returns (IFeeWindow);\r\n    function getOrCreateFeeWindowBefore(IFeeWindow _feeWindow) public returns (IFeeWindow);\r\n    function isParentOf(IUniverse _shadyChild) public view returns (bool);\r\n    function updateTentativeWinningChildUniverse(bytes32 _parentPayoutDistributionHash) public returns (bool);\r\n    function isContainerForFeeWindow(IFeeWindow _shadyTarget) public view returns (bool);\r\n    function isContainerForMarket(IMarket _shadyTarget) public view returns (bool);\r\n    function isContainerForReportingParticipant(IReportingParticipant _reportingParticipant) public view returns (bool);\r\n    function isContainerForShareToken(IShareToken _shadyTarget) public view returns (bool);\r\n    function isContainerForFeeToken(IFeeToken _shadyTarget) public view returns (bool);\r\n    function addMarketTo() public returns (bool);\r\n    function removeMarketFrom() public returns (bool);\r\n    function decrementOpenInterest(uint256 _amount) public returns (bool);\r\n    function decrementOpenInterestFromMarket(uint256 _amount) public returns (bool);\r\n    function incrementOpenInterest(uint256 _amount) public returns (bool);\r\n    function incrementOpenInterestFromMarket(uint256 _amount) public returns (bool);\r\n    function getWinningChildUniverse() public view returns (IUniverse);\r\n    function isForking() public view returns (bool);\r\n}\r\n\r\ncontract InitialReporter is DelegationTarget, Ownable, BaseReportingParticipant, Initializable, IInitialReporter {\r\n    address private designatedReporter;\r\n    address private actualReporter;\r\n    uint256 private reportTimestamp;\r\n\r\n    function initialize(IMarket _market, address _designatedReporter) public onlyInGoodTimes beforeInitialized returns (bool) {\r\n        endInitialization();\r\n        market = _market;\r\n        reputationToken = market.getUniverse().getReputationToken();\r\n        cash = market.getDenominationToken();\r\n        designatedReporter = _designatedReporter;\r\n        return true;\r\n    }\r\n\r\n    function redeem(address) public returns (bool) {\r\n        bool _isDisavowed = isDisavowed();\r\n        if (!_isDisavowed && !market.isFinalized()) {\r\n            market.finalize();\r\n        }\r\n        redeemForAllFeeWindows();\r\n        uint256 _repBalance = reputationToken.balanceOf(this);\r\n        require(reputationToken.transfer(owner, _repBalance));\r\n        uint256 _cashBalance = cash.balanceOf(this);\r\n        if (_cashBalance > 0) {\r\n            cash.withdrawEtherTo(owner, _cashBalance);\r\n        }\r\n        if (!_isDisavowed) {\r\n            controller.getAugur().logInitialReporterRedeemed(market.getUniverse(), owner, market, size, _repBalance, _cashBalance, payoutNumerators);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function report(address _reporter, bytes32 _payoutDistributionHash, uint256[] _payoutNumerators, bool _invalid) public onlyInGoodTimes returns (bool) {\r\n        require(IMarket(msg.sender) == market);\r\n        actualReporter = _reporter;\r\n        owner = _reporter;\r\n        payoutDistributionHash = _payoutDistributionHash;\r\n        reportTimestamp = controller.getTimestamp();\r\n        invalid = _invalid;\r\n        payoutNumerators = _payoutNumerators;\r\n        size = reputationToken.balanceOf(this);\r\n        feeWindow = market.getFeeWindow();\r\n        feeWindow.mintFeeTokens(size);\r\n        return true;\r\n    }\r\n\r\n    function withdrawInEmergency() public onlyInBadTimes returns (bool) {\r\n        require(reputationToken.transfer(owner, reputationToken.balanceOf(this)));\r\n        uint256 _cashBalance = cash.balanceOf(this);\r\n        if (_cashBalance > 0) {\r\n            cash.withdrawEtherTo(owner, _cashBalance);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function resetReportTimestamp() public onlyInGoodTimes returns (bool) {\r\n        require(IMarket(msg.sender) == market);\r\n        if (reportTimestamp == 0) {\r\n            return;\r\n        }\r\n        reportTimestamp = controller.getTimestamp();\r\n        return true;\r\n    }\r\n\r\n    function migrateREP() public returns (bool) {\r\n        require(IMarket(msg.sender) == market);\r\n        IUniverse _newUniverse = market.getUniverse();\r\n        IReputationToken _newReputationToken = _newUniverse.getReputationToken();\r\n        uint256 _balance = reputationToken.balanceOf(this);\r\n        if (_balance > 0) {\r\n            reputationToken.migrateOut(_newReputationToken, _balance);\r\n        }\r\n        reputationToken = _newReputationToken;\r\n        return true;\r\n    }\r\n\r\n    function forkAndRedeem() public onlyInGoodTimes returns (bool) {\r\n        if (!isDisavowed()) {\r\n            controller.getAugur().logInitialReporterRedeemed(market.getUniverse(), owner, market, size, reputationToken.balanceOf(this), cash.balanceOf(this), payoutNumerators);\r\n        }\r\n        fork();\r\n        redeem(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function getStake() public view returns (uint256) {\r\n        return size;\r\n    }\r\n\r\n    function getDesignatedReporter() public view returns (address) {\r\n        return designatedReporter;\r\n    }\r\n\r\n    function getReportTimestamp() public view returns (uint256) {\r\n        return reportTimestamp;\r\n    }\r\n\r\n    function designatedReporterShowed() public view returns (bool) {\r\n        return actualReporter == designatedReporter;\r\n    }\r\n\r\n    function getFeeWindow() public view returns (IFeeWindow) {\r\n        return feeWindow;\r\n    }\r\n\r\n    function getReputationToken() public view returns (IReputationToken) {\r\n        return reputationToken;\r\n    }\r\n\r\n    function designatedReporterWasCorrect() public view returns (bool) {\r\n        return payoutDistributionHash == market.getWinningPayoutDistributionHash();\r\n    }\r\n\r\n    function onTransferOwnership(address _owner, address _newOwner) internal returns (bool) {\r\n        controller.getAugur().logInitialReporterTransferred(market.getUniverse(), market, _owner, _newOwner);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ICash is ERC20 {\r\n    function depositEther() external payable returns(bool);\r\n    function depositEtherFor(address _to) external payable returns(bool);\r\n    function withdrawEther(uint256 _amount) external returns(bool);\r\n    function withdrawEtherTo(address _to, uint256 _amount) external returns(bool);\r\n    function withdrawEtherToIfPossible(address _to, uint256 _amount) external returns (bool);\r\n}\r\n\r\ncontract IOrders {\r\n    function saveOrder(Order.Types _type, IMarket _market, uint256 _fxpAmount, uint256 _price, address _sender, uint256 _outcome, uint256 _moneyEscrowed, uint256 _sharesEscrowed, bytes32 _betterOrderId, bytes32 _worseOrderId, bytes32 _tradeGroupId) public returns (bytes32 _orderId);\r\n    function removeOrder(bytes32 _orderId) public returns (bool);\r\n    function getMarket(bytes32 _orderId) public view returns (IMarket);\r\n    function getOrderType(bytes32 _orderId) public view returns (Order.Types);\r\n    function getOutcome(bytes32 _orderId) public view returns (uint256);\r\n    function getAmount(bytes32 _orderId) public view returns (uint256);\r\n    function getPrice(bytes32 _orderId) public view returns (uint256);\r\n    function getOrderCreator(bytes32 _orderId) public view returns (address);\r\n    function getOrderSharesEscrowed(bytes32 _orderId) public view returns (uint256);\r\n    function getOrderMoneyEscrowed(bytes32 _orderId) public view returns (uint256);\r\n    function getBetterOrderId(bytes32 _orderId) public view returns (bytes32);\r\n    function getWorseOrderId(bytes32 _orderId) public view returns (bytes32);\r\n    function getBestOrderId(Order.Types _type, IMarket _market, uint256 _outcome) public view returns (bytes32);\r\n    function getWorstOrderId(Order.Types _type, IMarket _market, uint256 _outcome) public view returns (bytes32);\r\n    function getLastOutcomePrice(IMarket _market, uint256 _outcome) public view returns (uint256);\r\n    function getOrderId(Order.Types _type, IMarket _market, uint256 _fxpAmount, uint256 _price, address _sender, uint256 _blockNumber, uint256 _outcome, uint256 _moneyEscrowed, uint256 _sharesEscrowed) public pure returns (bytes32);\r\n    function getTotalEscrowed(IMarket _market) public view returns (uint256);\r\n    function isBetterPrice(Order.Types _type, uint256 _price, bytes32 _orderId) public view returns (bool);\r\n    function isWorsePrice(Order.Types _type, uint256 _price, bytes32 _orderId) public view returns (bool);\r\n    function assertIsNotBetterPrice(Order.Types _type, uint256 _price, bytes32 _betterOrderId) public view returns (bool);\r\n    function assertIsNotWorsePrice(Order.Types _type, uint256 _price, bytes32 _worseOrderId) public returns (bool);\r\n    function recordFillOrder(bytes32 _orderId, uint256 _sharesFilled, uint256 _tokensFilled) public returns (bool);\r\n    function setPrice(IMarket _market, uint256 _outcome, uint256 _price) external returns (bool);\r\n    function incrementTotalEscrowed(IMarket _market, uint256 _amount) external returns (bool);\r\n    function decrementTotalEscrowed(IMarket _market, uint256 _amount) external returns (bool);\r\n}\r\n\r\ncontract IShareToken is ITyped, ERC20 {\r\n    function initialize(IMarket _market, uint256 _outcome) external returns (bool);\r\n    function createShares(address _owner, uint256 _amount) external returns (bool);\r\n    function destroyShares(address, uint256 balance) external returns (bool);\r\n    function getMarket() external view returns (IMarket);\r\n    function getOutcome() external view returns (uint256);\r\n    function trustedOrderTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\r\n    function trustedFillOrderTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\r\n    function trustedCancelOrderTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\r\n}\r\n\r\nlibrary Order {\r\n    using SafeMathUint256 for uint256;\r\n\r\n    enum Types {\r\n        Bid, Ask\r\n    }\r\n\r\n    enum TradeDirections {\r\n        Long, Short\r\n    }\r\n\r\n    struct Data {\r\n        // Contracts\r\n        IOrders orders;\r\n        IMarket market;\r\n        IAugur augur;\r\n\r\n        // Order\r\n        bytes32 id;\r\n        address creator;\r\n        uint256 outcome;\r\n        Order.Types orderType;\r\n        uint256 amount;\r\n        uint256 price;\r\n        uint256 sharesEscrowed;\r\n        uint256 moneyEscrowed;\r\n        bytes32 betterOrderId;\r\n        bytes32 worseOrderId;\r\n    }\r\n\r\n    //\r\n    // Constructor\r\n    //\r\n\r\n    // No validation is needed here as it is simply a librarty function for organizing data\r\n    function create(IController _controller, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data) {\r\n        require(_outcome < _market.getNumberOfOutcomes());\r\n        require(_price < _market.getNumTicks());\r\n\r\n        IOrders _orders = IOrders(_controller.lookup(\"Orders\"));\r\n        IAugur _augur = _controller.getAugur();\r\n\r\n        return Data({\r\n            orders: _orders,\r\n            market: _market,\r\n            augur: _augur,\r\n            id: 0,\r\n            creator: _creator,\r\n            outcome: _outcome,\r\n            orderType: _type,\r\n            amount: _attoshares,\r\n            price: _price,\r\n            sharesEscrowed: 0,\r\n            moneyEscrowed: 0,\r\n            betterOrderId: _betterOrderId,\r\n            worseOrderId: _worseOrderId\r\n        });\r\n    }\r\n\r\n    //\r\n    // \"public\" functions\r\n    //\r\n\r\n    function getOrderId(Order.Data _orderData) internal view returns (bytes32) {\r\n        if (_orderData.id == bytes32(0)) {\r\n            bytes32 _orderId = _orderData.orders.getOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);\r\n            require(_orderData.orders.getAmount(_orderId) == 0);\r\n            _orderData.id = _orderId;\r\n        }\r\n        return _orderData.id;\r\n    }\r\n\r\n    function getOrderTradingTypeFromMakerDirection(Order.TradeDirections _creatorDirection) internal pure returns (Order.Types) {\r\n        return (_creatorDirection == Order.TradeDirections.Long) ? Order.Types.Bid : Order.Types.Ask;\r\n    }\r\n\r\n    function getOrderTradingTypeFromFillerDirection(Order.TradeDirections _fillerDirection) internal pure returns (Order.Types) {\r\n        return (_fillerDirection == Order.TradeDirections.Long) ? Order.Types.Ask : Order.Types.Bid;\r\n    }\r\n\r\n    function escrowFunds(Order.Data _orderData) internal returns (bool) {\r\n        if (_orderData.orderType == Order.Types.Ask) {\r\n            return escrowFundsForAsk(_orderData);\r\n        } else if (_orderData.orderType == Order.Types.Bid) {\r\n            return escrowFundsForBid(_orderData);\r\n        }\r\n    }\r\n\r\n    function saveOrder(Order.Data _orderData, bytes32 _tradeGroupId) internal returns (bytes32) {\r\n        return _orderData.orders.saveOrder(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed, _orderData.betterOrderId, _orderData.worseOrderId, _tradeGroupId);\r\n    }\r\n\r\n    //\r\n    // Private functions\r\n    //\r\n\r\n    function escrowFundsForBid(Order.Data _orderData) private returns (bool) {\r\n        require(_orderData.moneyEscrowed == 0);\r\n        require(_orderData.sharesEscrowed == 0);\r\n        uint256 _attosharesToCover = _orderData.amount;\r\n        uint256 _numberOfOutcomes = _orderData.market.getNumberOfOutcomes();\r\n\r\n        // Figure out how many almost-complete-sets (just missing `outcome` share) the creator has\r\n        uint256 _attosharesHeld = 2**254;\r\n        for (uint256 _i = 0; _i < _numberOfOutcomes; _i++) {\r\n            if (_i != _orderData.outcome) {\r\n                uint256 _creatorShareTokenBalance = _orderData.market.getShareToken(_i).balanceOf(_orderData.creator);\r\n                _attosharesHeld = SafeMathUint256.min(_creatorShareTokenBalance, _attosharesHeld);\r\n            }\r\n        }\r\n\r\n        // Take shares into escrow if they have any almost-complete-sets\r\n        if (_attosharesHeld > 0) {\r\n            _orderData.sharesEscrowed = SafeMathUint256.min(_attosharesHeld, _attosharesToCover);\r\n            _attosharesToCover -= _orderData.sharesEscrowed;\r\n            for (_i = 0; _i < _numberOfOutcomes; _i++) {\r\n                if (_i != _orderData.outcome) {\r\n                    _orderData.market.getShareToken(_i).trustedOrderTransfer(_orderData.creator, _orderData.market, _orderData.sharesEscrowed);\r\n                }\r\n            }\r\n        }\r\n        // If not able to cover entire order with shares alone, then cover remaining with tokens\r\n        if (_attosharesToCover > 0) {\r\n            _orderData.moneyEscrowed = _attosharesToCover.mul(_orderData.price);\r\n            require(_orderData.augur.trustedTransfer(_orderData.market.getDenominationToken(), _orderData.creator, _orderData.market, _orderData.moneyEscrowed));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function escrowFundsForAsk(Order.Data _orderData) private returns (bool) {\r\n        require(_orderData.moneyEscrowed == 0);\r\n        require(_orderData.sharesEscrowed == 0);\r\n        IShareToken _shareToken = _orderData.market.getShareToken(_orderData.outcome);\r\n        uint256 _attosharesToCover = _orderData.amount;\r\n\r\n        // Figure out how many shares of the outcome the creator has\r\n        uint256 _attosharesHeld = _shareToken.balanceOf(_orderData.creator);\r\n\r\n        // Take shares in escrow if user has shares\r\n        if (_attosharesHeld > 0) {\r\n            _orderData.sharesEscrowed = SafeMathUint256.min(_attosharesHeld, _attosharesToCover);\r\n            _attosharesToCover -= _orderData.sharesEscrowed;\r\n            _shareToken.trustedOrderTransfer(_orderData.creator, _orderData.market, _orderData.sharesEscrowed);\r\n        }\r\n\r\n        // If not able to cover entire order with shares alone, then cover remaining with tokens\r\n        if (_attosharesToCover > 0) {\r\n            _orderData.moneyEscrowed = _orderData.market.getNumTicks().sub(_orderData.price).mul(_attosharesToCover);\r\n            require(_orderData.augur.trustedTransfer(_orderData.market.getDenominationToken(), _orderData.creator, _orderData.market, _orderData.moneyEscrowed));\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isInvalid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forkAndRedeem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"liquidateLosing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrateREP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"designatedReporterShowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reporter\",\"type\":\"address\"},{\"name\":\"_payoutDistributionHash\",\"type\":\"bytes32\"},{\"name\":\"_payoutNumerators\",\"type\":\"uint256[]\"},{\"name\":\"_invalid\",\"type\":\"bool\"}],\"name\":\"report\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_designatedReporter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDesignatedReporter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDisavowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"designatedReporterWasCorrect\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReportTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetReportTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReputationToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerLookupName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawInEmergency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_outcome\",\"type\":\"uint256\"}],\"name\":\"getPayoutNumerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPayoutDistributionHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeeWindow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InitialReporter","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9de07fb46f335b389273ce849d97b80a52e62437395961c1260361a828bb086e"}]}