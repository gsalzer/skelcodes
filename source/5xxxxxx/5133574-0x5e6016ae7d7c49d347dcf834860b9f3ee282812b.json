{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract EZToken {\r\n    using SafeMath for uint256;\r\n\r\n    // Public variables of the token\r\n    string public name = \"EZToken\" ;\r\n    string public symbol = \"EZT\";\r\n    uint8 public decimals = 8;\r\n    uint256 totalSupply_ = 0;\r\n    uint256 constant icoSupply = 11500000;\r\n    uint256 constant foundersSupply = 3500000;\r\n    uint256 constant yearlySupply = 3500000;\r\n    \r\n    \r\n    \r\n    mapping (address => uint) public freezedAccounts;\r\n\r\n    \r\n    uint constant founderFronzenUntil = 1530403200;  //2018-07-01\r\n    uint constant year1FronzenUntil = 1546300800; //2019-01-01\r\n    uint constant year2FronzenUntil = 1577836800; //2020-01-01\r\n    uint constant year3FronzenUntil = 1609459200; //2021-01-01\r\n    uint constant year4FronzenUntil = 1640995200; //2022-01-01\r\n    uint constant year5FronzenUntil = 1672531200; //2023-01-01\r\n    uint constant year6FronzenUntil = 1704067200; //2024-01-01\r\n    uint constant year7FronzenUntil = 1735689600; //2025-01-01\r\n    uint constant year8FronzenUntil = 1767225600; //2026-01-01\r\n    uint constant year9FronzenUntil = 1798761600; //2027-01-01\r\n    uint constant year10FronzenUntil = 1830297600; //2028-01-01\r\n    \r\n    // This creates an array with all balances\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function EZToken(address _founderAddress, address _year1, address _year2, address _year3, address _year4, address _year5, address _year6, address _year7, address _year8, address _year9, address _year10 ) public {\r\n        totalSupply_ = 50000000 * 10 ** uint256(decimals);\r\n        \r\n        balances[msg.sender] = icoSupply * 10 ** uint256(decimals);                 \r\n        Transfer(address(0), msg.sender, icoSupply);\r\n        \r\n        _setFreezedBalance(_founderAddress, foundersSupply, founderFronzenUntil);\r\n\r\n        _setFreezedBalance(_year1, yearlySupply, year1FronzenUntil);\r\n        _setFreezedBalance(_year2, yearlySupply, year2FronzenUntil);\r\n        _setFreezedBalance(_year3, yearlySupply, year3FronzenUntil);\r\n        _setFreezedBalance(_year4, yearlySupply, year4FronzenUntil);\r\n        _setFreezedBalance(_year5, yearlySupply, year5FronzenUntil);\r\n        _setFreezedBalance(_year6, yearlySupply, year6FronzenUntil);\r\n        _setFreezedBalance(_year7, yearlySupply, year7FronzenUntil);\r\n        _setFreezedBalance(_year8, yearlySupply, year8FronzenUntil);\r\n        _setFreezedBalance(_year9, yearlySupply, year9FronzenUntil);\r\n        _setFreezedBalance(_year10, yearlySupply, year10FronzenUntil);\r\n    }\r\n    \r\n    /**\r\n    * Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * Set balance and freeze time for address\r\n     */\r\n    function _setFreezedBalance(address _owner, uint256 _amount, uint _lockedUntil) internal {\r\n        require(_owner != address(0));\r\n        require(balances[_owner] == 0);\r\n        freezedAccounts[_owner] = _lockedUntil;\r\n        balances[_owner] = _amount * 10 ** uint256(decimals);     \r\n    }\r\n\r\n    /**\r\n     * Get the token balance for account `_owner`\r\n     */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    /**\r\n     * Returns the amount of tokens approved by the owner that can be\r\n     * transferred to the spender's account\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * Transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        require(freezedAccounts[msg.sender] == 0 || freezedAccounts[msg.sender] < now);\r\n        require(freezedAccounts[_to] == 0 || freezedAccounts[_to] < now);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(freezedAccounts[_from] == 0 || freezedAccounts[_from] < now);\r\n        require(freezedAccounts[_to] == 0 || freezedAccounts[_to] < now);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * Set allowed for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n    * Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    */\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezedAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_founderAddress\",\"type\":\"address\"},{\"name\":\"_year1\",\"type\":\"address\"},{\"name\":\"_year2\",\"type\":\"address\"},{\"name\":\"_year3\",\"type\":\"address\"},{\"name\":\"_year4\",\"type\":\"address\"},{\"name\":\"_year5\",\"type\":\"address\"},{\"name\":\"_year6\",\"type\":\"address\"},{\"name\":\"_year7\",\"type\":\"address\"},{\"name\":\"_year8\",\"type\":\"address\"},{\"name\":\"_year9\",\"type\":\"address\"},{\"name\":\"_year10\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EZToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000072449582488d73dbb8b07cec10f46fc2803ecd700000000000000000000000008cda0d41d8c9c8f4e2e9806c6d1cf5327395d54b00000000000000000000000017cdb167091e6d4d10df2c273056cd999c7c1208000000000000000000000000d716a0ea024c48123d154f567262b8f32787bc10000000000000000000000000a9c5a1a982188862aaa5ce0b12dfd09daba56a9900000000000000000000000009fcdd967b1ae593c0ea2bdc43f25882e99ef80d000000000000000000000000bccfe5ea1700d30c7c7e7d1cff0ced5edad5c84d000000000000000000000000bde08c84e2f51a1c88ea88403c0bd0006aab9965000000000000000000000000681b85b6a0ea36130bb458031d67584d12de59820000000000000000000000002a83999e72f35898f4dc4ed1649d6140a8f2d8a1000000000000000000000000aa175828fc4daa1e0740c003f23806c0c3b5de74","Library":"","SwarmSource":"bzzr://44cd985a5a86e9b3530d05421f12240f33189664d57b77c0f535ddaf96c6524e"}]}