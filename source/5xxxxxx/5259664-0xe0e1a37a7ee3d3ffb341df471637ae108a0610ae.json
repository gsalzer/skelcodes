{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner external {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) external constant returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) external constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title GameGoldTokenStandard\r\n * @dev the interface of GameGoldTokenStandard\r\n */\r\ncontract GameGoldTokenStandard {\r\n    uint256 public stakeStartTime;\r\n    uint256 public stakeMinAge;\r\n    uint256 public stakeMaxAge;\r\n    function mint() public returns (bool);\r\n    function coinAge() external constant returns (uint256);\r\n    function annualInterest() external constant returns (uint256);\r\n    event Mint(address indexed _address, uint _reward);\r\n}\r\n\r\n\r\ncontract GameGoldToken is ERC20,GameGoldTokenStandard,Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string constant name = \"Game Gold Token\";\r\n    string constant symbol = \"GGT\";\r\n    uint constant decimals = 18;\r\n\r\n    uint public chainStartTime; //chain start time\r\n    uint public chainStartBlockNumber; //chain start block number\r\n    uint public stakeStartTime; //stake start time\r\n    uint constant stakeMinAge = 3 days; // minimum age for coin age: 3D\r\n    uint constant stakeMaxAge = 90 days; // stake age of full weight: 90D\r\n    uint public maxMintProofOfStake;\r\n\r\n    uint public totalSupply;\r\n    uint public saleSupply; //founders initial supply 53%\r\n    uint public tokenPrice;\r\n    uint public alreadySold;\r\n\r\n    /*\r\n    uint public foundersAmountSupply = 83250000; //founders initial supply 15%\r\n    uint public teamAmountSupply = 27750000; //team initial supply 5%\r\n    uint public advisorsAmountSupply = 44400000; //advisors initial supply 8%\r\n    uint public gameFundAmountSupply = 83250000; //game ICO Fund initial supply 15\r\n    uint public airdropAmountSupply = 11100000; //airdrop initial supply 2%\r\n    uint public bountyAmountSupply = 11100000; //bounty initial supply 2%\r\n    */\r\n\r\n    bool public saleIsGoing;\r\n\r\n\r\n    struct transferInStruct {\r\n        uint128 amount;\r\n        uint64 time;\r\n    }\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    mapping(address => transferInStruct[]) transferIns;\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Fix for the ERC20 short address attack.\r\n     */\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfSaleIsGoing() {\r\n        require(saleIsGoing);\r\n        _;\r\n    }\r\n\r\n\r\n    function GameGoldToken() public {\r\n        chainStartTime = now;\r\n        chainStartBlockNumber = block.number;\r\n        totalSupply = 555000000*10**decimals; // 555 Millions;\r\n        saleSupply = 294150000*10**decimals; //53%\r\n\t    tokenPrice = 0.00035 ether;\r\n        alreadySold = 0;\r\n        balances[owner] = totalSupply;\r\n        Transfer(address(0), owner, totalSupply);\r\n\t    maxMintProofOfStake = 138750000*10**decimals; // 25% annual interest\r\n        saleIsGoing = true;\r\n    }\r\n\r\n    function updateSaleStatus() external onlyOwner returns(bool) {\r\n        saleIsGoing = !saleIsGoing;\r\n        return true;\r\n    }\r\n\r\n    function setPrice(uint _newPrice) external onlyOwner returns(bool) {\r\n        require(_newPrice >= 0);\r\n        tokenPrice = _newPrice;\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant external returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) external returns (bool) {\r\n        if(msg.sender == _to) return mint();\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\r\n        uint64 _now = uint64(now);\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\r\n        transferIns[_to].push(transferInStruct(uint128(_value),_now));\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) external returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        uint _allowance = uint(allowed[_from][msg.sender]);\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        if(transferIns[_from].length > 0) delete transferIns[_from];\r\n        uint64 _now = uint64(now);\r\n        transferIns[_from].push(transferInStruct(uint128(balances[_from]),_now));\r\n        transferIns[_to].push(transferInStruct(uint128(_value),_now));\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool) {\r\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function withdraw(uint amount) public onlyOwner returns(bool) {\r\n        require(amount <= address(this).balance);\r\n        owner.transfer(address(this).balance);\r\n        return true;\r\n    }\r\n    \r\n    function ownerMint(uint _amount) public onlyOwner returns (bool) {\r\n        uint amount = _amount * 10**decimals;\r\n        require(totalSupply.add(amount) <= 2**256 - 1 && balances[owner].add(amount) <= 2**256 - 1);\r\n        totalSupply = totalSupply.add(amount);\r\n        balances[owner] = balances[owner].add(amount);\r\n        Transfer(address(0), owner, amount);\r\n        return true;\r\n    }\r\n\r\n    function mint() public returns (bool) {\r\n        if(balances[msg.sender] <= 0 || transferIns[msg.sender].length <= 0) return false;\r\n\r\n        uint reward = getProofOfStakeReward(msg.sender);\r\n        if(reward <= 0) return false;\r\n\r\n        totalSupply = totalSupply.add(reward);\r\n        balances[msg.sender] = balances[msg.sender].add(reward);\r\n        delete transferIns[msg.sender];\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\r\n\r\n        Mint(msg.sender, reward);\r\n        return true;\r\n    }\r\n\r\n    function getBlockNumber() external constant returns (uint blockNumber) {\r\n        blockNumber = block.number.sub(chainStartBlockNumber);\r\n    }\r\n\r\n    function coinAge() external constant returns (uint myCoinAge) {\r\n        myCoinAge = getCoinAge(msg.sender,now);\r\n    }\r\n\r\n    function annualInterest() external constant returns(uint) {\r\n        return maxMintProofOfStake;\r\n    }\r\n\r\n    function getProofOfStakeReward(address _address) internal constant returns (uint) {\r\n        require( (now >= stakeStartTime) && (stakeStartTime > 0) );\r\n\r\n        uint _now = now;\r\n        uint _coinAge = getCoinAge(_address, _now);\r\n        if(_coinAge <= 0) return 0;\r\n\r\n        uint interest = maxMintProofOfStake;\r\n\r\n        return (_coinAge * interest).div(365 * (10**decimals));\r\n    }\r\n\r\n    function getCoinAge(address _address, uint _now) internal constant returns (uint _coinAge) {\r\n        if(transferIns[_address].length <= 0) return 0;\r\n\r\n        for (uint i = 0; i < transferIns[_address].length; i++){\r\n            if( _now < uint(transferIns[_address][i].time).add(stakeMinAge) ) continue;\r\n\r\n            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\r\n            if( nCoinSeconds > stakeMaxAge ) nCoinSeconds = stakeMaxAge;\r\n\r\n            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\r\n        }\r\n    }\r\n\r\n    function ownerSetStakeStartTime(uint timestamp) onlyOwner external {\r\n        require((stakeStartTime <= 0) && (timestamp >= chainStartTime));\r\n        stakeStartTime = timestamp;\r\n    }\r\n\r\n    function ownerBurnToken(uint _value) onlyOwner external {\r\n        require(_value > 0);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        delete transferIns[msg.sender];\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\r\n\r\n        totalSupply = totalSupply.sub(_value);\r\n\r\n        Burn(msg.sender, _value);\r\n    }\r\n\r\n    /* Batch token transfer. Used by contract creator to distribute initial tokens to holders */\r\n    function batchTransfer(address[] _recipients, uint[] _values) onlyOwner public returns (uint) {\r\n        require( _recipients.length > 0 && _recipients.length == _values.length);\r\n        uint total = 0;\r\n        assembly {\r\n            let len := mload(_values)\r\n            for { let i := 0 } lt(i, len) { i := add(i, 1) } {\r\n                total := add(total, mload(add(add(_values, 0x20), mul(i, 0x20))))\r\n            }\r\n        }\r\n        require(total <= balances[msg.sender]);\r\n        uint64 _now = uint64(now);\r\n        \r\n        for(uint j = 0; j < _recipients.length; j++){\r\n            balances[_recipients[j]] = balances[_recipients[j]].add(_values[j]);\r\n            transferIns[_recipients[j]].push(transferInStruct(uint128(_values[j]),_now));\r\n            Transfer(msg.sender, _recipients[j], _values[j]);\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(total);\r\n        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\r\n        if(balances[msg.sender] > 0) transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\r\n\r\n        return total;\r\n    }\r\n\r\n\r\n    /* buying tokens function */\r\n    function() public onlyIfSaleIsGoing payable {\r\n    \t require(msg.value >= tokenPrice);\r\n    \t uint tokenAmount = (msg.value / tokenPrice) * 10 ** decimals;\r\n    \t require(alreadySold.add(tokenAmount) <= saleSupply);\r\n\r\n    \t balances[owner] = balances[owner].sub(tokenAmount);\r\n    \t balances[msg.sender] = balances[msg.sender].add(tokenAmount);\r\n    \t alreadySold = alreadySold.add(tokenAmount);\r\n    \t Transfer(owner, msg.sender, tokenAmount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinAge\",\"outputs\":[{\"name\":\"myCoinAge\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleIsGoing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ownerSetStakeStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"alreadySold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerBurnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"annualInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateSaleStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMinAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainStartBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMaxAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMintProofOfStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"GameGoldToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://113b2f145d8b96cca3ba53abf9b32a2cc44c6cc1ac4b265c5deea38419d0f62b"}]}