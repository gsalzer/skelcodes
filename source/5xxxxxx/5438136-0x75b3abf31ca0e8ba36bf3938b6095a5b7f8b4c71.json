{"status":"1","message":"OK","result":[{"SourceCode":"// our mirrors:\r\n// ftec.io\r\n// ftec.ai \r\n// our official Telegram group:\r\n// t.me/FTECofficial\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract MultiOwnable {\r\n\r\n    mapping (address => bool) public isOwner;\r\n    address[] public ownerHistory;\r\n\r\n    event OwnerAddedEvent(address indexed _newOwner);\r\n    event OwnerRemovedEvent(address indexed _oldOwner);\r\n\r\n    function MultiOwnable() public {\r\n        // Add default owner\r\n        address owner = msg.sender;\r\n        ownerHistory.push(owner);\r\n        isOwner[owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    function ownerHistoryCount() public view returns (uint) {\r\n        return ownerHistory.length;\r\n    }\r\n\r\n    /** Add extra owner. */\r\n    function addOwner(address owner) onlyOwner public {\r\n        require(owner != address(0));\r\n        require(!isOwner[owner]);\r\n        ownerHistory.push(owner);\r\n        isOwner[owner] = true;\r\n        OwnerAddedEvent(owner);\r\n    }\r\n\r\n    /** Remove extra owner. */\r\n    function removeOwner(address owner) onlyOwner public {\r\n        require(isOwner[owner]);\r\n        isOwner[owner] = false;\r\n        OwnerRemovedEvent(owner);\r\n    }\r\n}\r\n\r\ncontract Pausable is MultiOwnable {\r\n\r\n    bool public paused;\r\n\r\n    modifier ifNotPaused {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier ifPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    // Called by the owner on emergency, triggers paused state\r\n    function pause() external onlyOwner ifNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    // Called by the owner on end of emergency, returns to normal state\r\n    function resume() external onlyOwner ifPaused {\r\n        paused = false;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n    \r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint256) balances;\r\n    \r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        \r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract CommonToken is StandardToken, MultiOwnable {\r\n    \r\n    string public constant name   = 'FTEC';\r\n    string public constant symbol = 'FTEC';\r\n    uint8 public constant decimals = 18;\r\n    \r\n    uint256 public saleLimit;   // 85% of tokens for sale.\r\n    uint256 public teamTokens;  // 7% of tokens goes to the team and will be locked for 1 year.\r\n    // 8% of the rest tokens will be used for bounty, advisors, and airdrops.\r\n    \r\n    // 7% of team tokens will be locked at this address for 1 year.\r\n    address public teamWallet; // Team address.\r\n    \r\n    uint public unlockTeamTokensTime = now + 1 years;\r\n\r\n    // The main account that holds all tokens at the beginning and during tokensale.\r\n    address public seller; // Seller address (main holder of tokens)\r\n\r\n    uint256 public tokensSold; // (e18) Number of tokens sold through all tiers or tokensales.\r\n    uint256 public totalSales; // Total number of sales (including external sales) made through all tiers or tokensales.\r\n\r\n    // Lock the transfer functions during tokensales to prevent price speculations.\r\n    bool public locked = true;\r\n    \r\n    event SellEvent(address indexed _seller, address indexed _buyer, uint256 _value);\r\n    event ChangeSellerEvent(address indexed _oldSeller, address indexed _newSeller);\r\n    event Burn(address indexed _burner, uint256 _value);\r\n    event Unlock();\r\n\r\n    function CommonToken(\r\n        address _seller,\r\n        address _teamWallet\r\n    ) MultiOwnable() public {\r\n        \r\n        totalSupply = 998400000 ether;\r\n        saleLimit   = 848640000 ether;\r\n        teamTokens  =  69888000 ether;\r\n\r\n        seller = _seller;\r\n        teamWallet = _teamWallet;\r\n\r\n        uint sellerTokens = totalSupply - teamTokens;\r\n        balances[seller] = sellerTokens;\r\n        Transfer(0x0, seller, sellerTokens);\r\n        \r\n        balances[teamWallet] = teamTokens;\r\n        Transfer(0x0, teamWallet, teamTokens);\r\n    }\r\n    \r\n    modifier ifUnlocked(address _from) {\r\n        require(!locked);\r\n        \r\n        // If requested a transfer from the team wallet:\r\n        if (_from == teamWallet) {\r\n            require(now >= unlockTeamTokensTime);\r\n        }\r\n        \r\n        _;\r\n    }\r\n    \r\n    /** Can be called once by super owner. */\r\n    function unlock() onlyOwner public {\r\n        require(locked);\r\n        locked = false;\r\n        Unlock();\r\n    }\r\n\r\n    /**\r\n     * An address can become a new seller only in case it has no tokens.\r\n     * This is required to prevent stealing of tokens  from newSeller via \r\n     * 2 calls of this function.\r\n     */\r\n    function changeSeller(address newSeller) onlyOwner public returns (bool) {\r\n        require(newSeller != address(0));\r\n        require(seller != newSeller);\r\n        \r\n        // To prevent stealing of tokens from newSeller via 2 calls of changeSeller:\r\n        require(balances[newSeller] == 0);\r\n\r\n        address oldSeller = seller;\r\n        uint256 unsoldTokens = balances[oldSeller];\r\n        balances[oldSeller] = 0;\r\n        balances[newSeller] = unsoldTokens;\r\n        Transfer(oldSeller, newSeller, unsoldTokens);\r\n\r\n        seller = newSeller;\r\n        ChangeSellerEvent(oldSeller, newSeller);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * User-friendly alternative to sell() function.\r\n     */\r\n    function sellNoDecimals(address _to, uint256 _value) public returns (bool) {\r\n        return sell(_to, _value * 1e18);\r\n    }\r\n\r\n    function sell(address _to, uint256 _value) onlyOwner public returns (bool) {\r\n\r\n        // Check that we are not out of limit and still can sell tokens:\r\n        require(tokensSold.add(_value) <= saleLimit);\r\n\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n        require(_value <= balances[seller]);\r\n\r\n        balances[seller] = balances[seller].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(seller, _to, _value);\r\n\r\n        totalSales++;\r\n        tokensSold = tokensSold.add(_value);\r\n        SellEvent(seller, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Until all tokens are sold, tokens can be transfered to/from owner's accounts.\r\n     */\r\n    function transfer(address _to, uint256 _value) ifUnlocked(msg.sender) public returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * Until all tokens are sold, tokens can be transfered to/from owner's accounts.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) ifUnlocked(_from) public returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool) {\r\n        require(_value > 0);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Transfer(msg.sender, 0x0, _value);\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract CommonTokensale is MultiOwnable, Pausable {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    address public beneficiary1;\r\n    address public beneficiary2;\r\n    address public beneficiary3;\r\n    \r\n    // Balances of beneficiaries:\r\n    uint public balance1;\r\n    uint public balance2;\r\n    uint public balance3;\r\n    \r\n    // Token contract reference.\r\n    CommonToken public token;\r\n\r\n    uint public minPaymentWei = 0.1 ether;\r\n    \r\n    uint public minCapWei;\r\n    uint public maxCapWei;\r\n\r\n    uint public startTime;\r\n    uint public endTime;\r\n    \r\n    // Stats for current tokensale:\r\n    \r\n    uint public totalTokensSold;  // Total amount of tokens sold during this tokensale.\r\n    uint public totalWeiReceived; // Total amount of wei received during this tokensale.\r\n    \r\n    // This mapping stores info on how many ETH (wei) have been sent to this tokensale from specific address.\r\n    mapping (address => uint256) public buyerToSentWei;\r\n    \r\n    event ReceiveEthEvent(address indexed _buyer, uint256 _amountWei);\r\n    \r\n    function CommonTokensale(\r\n        address _token,\r\n        address _beneficiary1,\r\n        address _beneficiary2,\r\n        address _beneficiary3,\r\n        uint _startTime,\r\n        uint _endTime\r\n    ) MultiOwnable() public {\r\n\r\n        require(_token != address(0));\r\n        token = CommonToken(_token);\r\n\r\n        beneficiary1 = _beneficiary1;\r\n        beneficiary2 = _beneficiary2;\r\n        beneficiary3 = _beneficiary3;\r\n\r\n        startTime = _startTime;\r\n        endTime   = _endTime;\r\n    }\r\n\r\n    /** The fallback function corresponds to a donation in ETH. */\r\n    function() public payable {\r\n        sellTokensForEth(msg.sender, msg.value);\r\n    }\r\n    \r\n    function sellTokensForEth(\r\n        address _buyer, \r\n        uint256 _amountWei\r\n    ) ifNotPaused internal {\r\n        \r\n        require(startTime <= now && now <= endTime);\r\n        require(_amountWei >= minPaymentWei);\r\n        require(totalWeiReceived.add(_amountWei) <= maxCapWei);\r\n\r\n        uint tokensE18 = weiToTokens(_amountWei);\r\n        // Transfer tokens to buyer.\r\n        require(token.sell(_buyer, tokensE18));\r\n        \r\n        // Update total stats:\r\n        totalTokensSold = totalTokensSold.add(tokensE18);\r\n        totalWeiReceived = totalWeiReceived.add(_amountWei);\r\n        buyerToSentWei[_buyer] = buyerToSentWei[_buyer].add(_amountWei);\r\n        ReceiveEthEvent(_buyer, _amountWei);\r\n        \r\n        // Split received amount between balances of three beneficiaries.\r\n        uint part = _amountWei / 3;\r\n        balance1 = balance1.add(_amountWei - part * 2);\r\n        balance2 = balance2.add(part);\r\n        balance3 = balance3.add(part);\r\n    }\r\n    \r\n    /** Calc how much tokens you can buy at current time. */\r\n    function weiToTokens(uint _amountWei) public view returns (uint) {\r\n        return _amountWei.mul(tokensPerWei(_amountWei));\r\n    }\r\n    \r\n    function tokensPerWei(uint _amountWei) public view returns (uint256) {\r\n        uint expectedTotal = totalWeiReceived.add(_amountWei);\r\n        \r\n        // Presale pricing rules:\r\n        if (expectedTotal <  1000 ether) return 39960;\r\n        if (expectedTotal <  2000 ether) return 37480;\r\n        if (expectedTotal <  4000 ether) return 35270;\r\n        \r\n        // Public sale pricing rules:\r\n        if (expectedTotal <  6000 ether) return 33300; \r\n        if (expectedTotal <  8000 ether) return 32580;\r\n        if (expectedTotal < 11000 ether) return 31880;\r\n        if (expectedTotal < 15500 ether) return 31220;\r\n        if (expectedTotal < 20500 ether) return 30590;\r\n        if (expectedTotal < 26500 ether) return 29970;\r\n        \r\n        return 29970; // Default token price with no bonuses.\r\n    }\r\n    \r\n    function canWithdraw() public view returns (bool);\r\n    \r\n    function withdraw1(address _to) public {\r\n        require(canWithdraw());\r\n        require(msg.sender == beneficiary1);\r\n        require(balance1 > 0);\r\n        \r\n        uint bal = balance1;\r\n        balance1 = 0;\r\n        _to.transfer(bal);\r\n    }\r\n    \r\n    function withdraw2(address _to) public {\r\n        require(canWithdraw());\r\n        require(msg.sender == beneficiary2);\r\n        require(balance2 > 0);\r\n        \r\n        uint bal = balance2;\r\n        balance2 = 0;\r\n        _to.transfer(bal);\r\n    }\r\n    \r\n    function withdraw3(address _to) public {\r\n        require(canWithdraw());\r\n        require(msg.sender == beneficiary3);\r\n        require(balance3 > 0);\r\n        \r\n        uint bal = balance3;\r\n        balance3 = 0;\r\n        _to.transfer(bal);\r\n    }\r\n}\r\n\r\ncontract Presale is CommonTokensale {\r\n    \r\n    // In case min (soft) cap is not reached, token buyers will be able to \r\n    // refund their contributions during 3 months after presale is finished.\r\n    uint public refundDeadlineTime;\r\n\r\n    // Total amount of wei refunded if min (soft) cap is not reached.\r\n    uint public totalWeiRefunded;\r\n    \r\n    event RefundEthEvent(address indexed _buyer, uint256 _amountWei);\r\n    \r\n    function Presale(\r\n        address _token,\r\n        address _beneficiary1,\r\n        address _beneficiary2,\r\n        address _beneficiary3,\r\n        uint _startTime,\r\n        uint _endTime\r\n    ) CommonTokensale(\r\n        _token,\r\n        _beneficiary1,\r\n        _beneficiary2,\r\n        _beneficiary3,\r\n        _startTime,\r\n        _endTime\r\n    ) public {\r\n        minCapWei = 2000 ether;\r\n        maxCapWei = 4000 ether;\r\n        refundDeadlineTime = _endTime + 3 * 30 days;\r\n    }\r\n\r\n    /** \r\n     * During presale it will be possible to withdraw only in two cases:\r\n     * min cap reached OR refund period expired.\r\n     */\r\n    function canWithdraw() public view returns (bool) {\r\n        return totalWeiReceived >= minCapWei || now > refundDeadlineTime;\r\n    }\r\n    \r\n    /** \r\n     * It will be possible to refund only if min (soft) cap is not reached and \r\n     * refund requested during 3 months after presale finished.\r\n     */\r\n    function canRefund() public view returns (bool) {\r\n        return totalWeiReceived < minCapWei && endTime < now && now <= refundDeadlineTime;\r\n    }\r\n\r\n    function refund() public {\r\n        require(canRefund());\r\n        \r\n        address buyer = msg.sender;\r\n        uint amount = buyerToSentWei[buyer];\r\n        require(amount > 0);\r\n        \r\n        // Redistribute left balance between three beneficiaries.\r\n        uint newBal = this.balance.sub(amount);\r\n        uint part = newBal / 3;\r\n        balance1 = newBal - part * 2;\r\n        balance2 = part;\r\n        balance3 = part;\r\n        \r\n        RefundEthEvent(buyer, amount);\r\n        buyerToSentWei[buyer] = 0;\r\n        totalWeiRefunded = totalWeiRefunded.add(amount);\r\n        buyer.transfer(amount);\r\n    }\r\n}\r\n\r\ncontract ProdPresale is Presale {\r\n    function ProdPresale() Presale(\r\n        0x6BeC54E4fEa5d541fB14de96993b8E11d81159b2,\r\n        0x5cAEDf960efC2F586B0260B8B4B3C5738067c3af, \r\n        0xec6014B7FF9E510D43889f49AE019BAD6EA35039, \r\n        0x234066EEa7B0E9539Ef1f6281f3Ca8aC5e922363, \r\n        1524578400, \r\n        1526997600 \r\n    ) public {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundDeadlineTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerHistoryCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"weiToTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPaymentWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyerToSentWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCapWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCapWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"tokensPerWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"RefundEthEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"ReceiveEthEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAddedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemovedEvent\",\"type\":\"event\"}]","ContractName":"ProdPresale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d2239898fd2d814bc08598a29403cea9350c0fe64c4f6ebe1eeab48c11adb78e"}]}