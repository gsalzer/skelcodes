{"status":"1","message":"OK","result":[{"SourceCode":"// Roman Storm Multi Sender\r\npragma solidity 0.4.20;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract MultiSender {\r\n    mapping(address => uint256) public txCount;\r\n    address public owner;\r\n    address public pendingOwner;\r\n    uint16 public arrayLimit = 150;\r\n    uint256 public fee = 0.05 ether;\r\n    \r\n    modifier onlyOwner(){\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier hasFee(){\r\n        // uint256 fee = txCount[msg.sender]\r\n        require(msg.value >= fee - discountRate(msg.sender));\r\n        _;\r\n    }\r\n    function MultiSender(address _owner, address _pendingOwner){\r\n        owner = _owner;\r\n        pendingOwner = _pendingOwner;\r\n    }\r\n    \r\n    function discountRate(address _customer) public view returns(uint256) {\r\n        uint256 count = txCount[_customer];\r\n        return count / (10) * 0.005 ether;\r\n    }\r\n    \r\n    function currentFee(address _customer) public view returns(uint256) {\r\n        return fee - discountRate(_customer);\r\n    }\r\n    \r\n    function claimOwner(address _newPendingOwner) public {\r\n        require(msg.sender == pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = _newPendingOwner;\r\n    }\r\n    \r\n    function changeTreshold(uint16 _newLimit) public onlyOwner {\r\n        arrayLimit = _newLimit;\r\n    }\r\n    \r\n    function changeFee(uint256 _newFee) public onlyOwner {\r\n        fee = _newFee;\r\n    }\r\n    \r\n    function() payable {\r\n    }\r\n    \r\n    function multisendToken(address token, address[] _contributors, uint256[] _balances) public hasFee payable {\r\n        require(_contributors.length <= arrayLimit);\r\n        ERC20 erc20token = ERC20(token);\r\n        uint8 i = 0;\r\n        require(erc20token.allowance(msg.sender, this) > 0);\r\n        for(i; i<_contributors.length;i++){\r\n            erc20token.transferFrom(msg.sender, _contributors[i], _balances[i]);\r\n        }\r\n        txCount[msg.sender]++;\r\n    }\r\n    \r\n    function multisendEther(address[] _contributors, uint256[] _balances) public hasFee payable{\r\n        // this function is always free, however if there is anything left over, I will keep it.\r\n        require(_contributors.length <= arrayLimit);\r\n        uint8 i = 0;\r\n        for(i; i<_contributors.length;i++){\r\n            _contributors[i].transfer(_balances[i]);\r\n        }\r\n        txCount[msg.sender]++;\r\n    }\r\n    \r\n    event ClaimedTokens(address token, address owner, uint256 balance);\r\n    function claimTokens(address _token) public onlyOwner {\r\n        if (_token == 0x0) {\r\n          owner.transfer(this.balance);\r\n          return;\r\n        }\r\n        ERC20 erc20token = ERC20(_token);\r\n        uint256 balance = erc20token.balanceOf(this);\r\n        erc20token.transfer(owner, balance);\r\n        ClaimedTokens(_token, owner, balance);\r\n   }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLimit\",\"type\":\"uint16\"}],\"name\":\"changeTreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"currentFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arrayLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"txCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPendingOwner\",\"type\":\"address\"}],\"name\":\"claimOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"discountRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_pendingOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"}]","ContractName":"MultiSender","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000039f22efb07a647557c7c5d17854cfd6d489ef30000000000000000000000005fc94341ba178e4ca1e2069baeb8e3fd1201cbb0","Library":"","SwarmSource":"bzzr://2a271e003487d74eeab04af0f42794400eb4d9edc20262f13a464009caa14e64"}]}