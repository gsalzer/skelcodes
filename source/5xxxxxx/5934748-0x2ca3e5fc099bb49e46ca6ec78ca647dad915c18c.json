{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\nlibrary StringUtils {\r\n  /// @dev Does a byte-by-byte lexicographical comparison of two strings.\r\n  /// @return a negative number if `_a` is smaller, zero if they are equal\r\n  /// and a positive numbe if `_b` is smaller.\r\n  function compare(string _a, string _b) public pure returns (int) {\r\n    bytes memory a = bytes(_a);\r\n    bytes memory b = bytes(_b);\r\n    uint minLength = a.length;\r\n    if (b.length < minLength) minLength = b.length;\r\n    //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\r\n    for (uint i = 0; i < minLength; i ++)\r\n      if (a[i] < b[i])\r\n        return -1;\r\n      else if (a[i] > b[i])\r\n        return 1;\r\n    if (a.length < b.length)\r\n      return -1;\r\n    else if (a.length > b.length)\r\n      return 1;\r\n    else\r\n      return 0;\r\n  }\r\n  /// @dev Compares two strings and returns true iff they are equal.\r\n  function equal(string _a, string _b) public pure returns (bool) {\r\n    return compare(_a, _b) == 0;\r\n  }\r\n  /// @dev Finds the index of the first occurrence of _needle in _haystack\r\n  function indexOf(string _haystack, string _needle) public pure returns (int) {\r\n   \tbytes memory h = bytes(_haystack);\r\n  \tbytes memory n = bytes(_needle);\r\n   \tif(h.length < 1 || n.length < 1 || (n.length > h.length)) \r\n      return -1;\r\n    else if(h.length > (2**128 -1)) // since we have to be able to return -1 (if the char isn't found or input error), this function must return an \"int\" type with a max length of (2^128 - 1)\r\n      return -1;\t\t\t\t\t\t\t\t\t\r\n    else {\r\n      uint subindex = 0;\r\n      for (uint i = 0; i < h.length; i ++) {\r\n        if (h[i] == n[0]) { // found the first char of b\r\n    \t  subindex = 1;\r\n    \t  while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]) {// search until the chars don't match or until we reach the end of a or b\r\n    \t\tsubindex++;\r\n    \t  }\t\r\n    \t  if(subindex == n.length) \r\n    \t\treturn int(i);\r\n    \t}\r\n      }\r\n      return -1;\r\n    }\t\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"compare\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"equal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_haystack\",\"type\":\"string\"},{\"name\":\"_needle\",\"type\":\"string\"}],\"name\":\"indexOf\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"StringUtils","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1037f7b1391f7af99b455a026daa9b722395d59562cacfb3d9b092ad8c8fd907"}]}