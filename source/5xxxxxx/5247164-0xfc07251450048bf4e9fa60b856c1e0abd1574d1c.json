{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// Etheremon ERC721\r\n\r\n// copyright contact@Etheremon.com\r\n\r\ncontract SafeMath {\r\n\r\n    /* function assert(bool assertion) internal { */\r\n    /*   if (!assertion) { */\r\n    /*     throw; */\r\n    /*   } */\r\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\r\n\r\n    function safeAdd(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = true;\r\n\r\n    function BasicAccessControl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n    \r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\n\r\ncontract EtheremonEnum {\r\n\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_TRAINER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n    \r\n    enum ArrayType {\r\n        CLASS_TYPE,\r\n        STAT_STEP,\r\n        STAT_START,\r\n        STAT_BASE,\r\n        OBJ_SKILL\r\n    }\r\n    \r\n    enum PropertyType {\r\n        ANCESTOR,\r\n        XFACTOR\r\n    }\r\n}\r\n\r\ncontract EtheremonDataBase is EtheremonEnum, BasicAccessControl, SafeMath {\r\n    \r\n    uint64 public totalMonster;\r\n    uint32 public totalClass;\r\n    \r\n    // write\r\n    function withdrawEther(address _sendTo, uint _amount) onlyOwner public returns(ResultCode);\r\n    function addElementToArrayType(ArrayType _type, uint64 _id, uint8 _value) onlyModerators public returns(uint);\r\n    function updateIndexOfArrayType(ArrayType _type, uint64 _id, uint _index, uint8 _value) onlyModerators public returns(uint);\r\n    function setMonsterClass(uint32 _classId, uint256 _price, uint256 _returnPrice, bool _catchable) onlyModerators public returns(uint32);\r\n    function addMonsterObj(uint32 _classId, address _trainer, string _name) onlyModerators public returns(uint64);\r\n    function setMonsterObj(uint64 _objId, string _name, uint32 _exp, uint32 _createIndex, uint32 _lastClaimIndex) onlyModerators public;\r\n    function increaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\r\n    function decreaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\r\n    function removeMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;\r\n    function addMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;\r\n    function clearMonsterReturnBalance(uint64 _monsterId) onlyModerators public returns(uint256 amount);\r\n    function collectAllReturnBalance(address _trainer) onlyModerators public returns(uint256 amount);\r\n    function transferMonster(address _from, address _to, uint64 _monsterId) onlyModerators public returns(ResultCode);\r\n    function addExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);\r\n    function deductExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);\r\n    function setExtraBalance(address _trainer, uint256 _amount) onlyModerators public;\r\n    \r\n    // read\r\n    function getSizeArrayType(ArrayType _type, uint64 _id) constant public returns(uint);\r\n    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\r\n    function getMonsterClass(uint32 _classId) constant public returns(uint32 classId, uint256 price, uint256 returnPrice, uint32 total, bool catchable);\r\n    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\r\n    function getMonsterName(uint64 _objId) constant public returns(string name);\r\n    function getExtraBalance(address _trainer) constant public returns(uint256);\r\n    function getMonsterDexSize(address _trainer) constant public returns(uint);\r\n    function getMonsterObjId(address _trainer, uint index) constant public returns(uint64);\r\n    function getExpectedBalance(address _trainer) constant public returns(uint256);\r\n    function getMonsterReturn(uint64 _objId) constant public returns(uint256 current, uint256 total);\r\n}\r\n\r\n\r\ninterface EtheremonBattle {\r\n    function isOnBattle(uint64 _objId) constant external returns(bool);\r\n}\r\n\r\ninterface EtheremonTradeInterface {\r\n    function isOnTrading(uint64 _objId) constant external returns(bool);\r\n}\r\n\r\ncontract ERC721 {\r\n    // ERC20 compatible functions\r\n    // function name() constant returns (string name);\r\n    // function symbol() constant returns (string symbol);\r\n    function totalSupply() public constant returns (uint256 supply);\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    // Functions that define ownership\r\n    function ownerOf(uint256 _tokenId) public constant returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function takeOwnership(uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public constant returns (uint tokenId);\r\n    // Token metadata\r\n    //function tokenMetadata(uint256 _tokenId) constant returns (string infoUrl);\r\n\r\n    // Events\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n}\r\n\r\ncontract EtheremonAsset is BasicAccessControl, ERC721 {\r\n    string public constant name = \"EtheremonAsset\";\r\n    string public constant symbol = \"EMONA\";\r\n    \r\n    mapping (address => mapping (uint256 => address)) public allowed;\r\n    \r\n    // data contract\r\n    address public dataContract;\r\n    address public battleContract;\r\n    address public tradeContract;\r\n    \r\n    // helper struct\r\n    struct MonsterClassAcc {\r\n        uint32 classId;\r\n        uint256 price;\r\n        uint256 returnPrice;\r\n        uint32 total;\r\n        bool catchable;\r\n    }\r\n\r\n    struct MonsterObjAcc {\r\n        uint64 monsterId;\r\n        uint32 classId;\r\n        address trainer;\r\n        string name;\r\n        uint32 exp;\r\n        uint32 createIndex;\r\n        uint32 lastClaimIndex;\r\n        uint createTime;\r\n    }\r\n\r\n    // modifier\r\n    \r\n    modifier requireDataContract {\r\n        require(dataContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    modifier requireBattleContract {\r\n        require(battleContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    modifier requireTradeContract {\r\n        require(tradeContract != address(0));\r\n        _;        \r\n    }\r\n    \r\n    function EtheremonAsset(address _dataContract, address _battleContract, address _tradeContract) public {\r\n        dataContract = _dataContract;\r\n        battleContract = _battleContract;\r\n        tradeContract = _tradeContract;\r\n    }\r\n\r\n    function setContract(address _dataContract, address _battleContract, address _tradeContract) onlyModerators external {\r\n        dataContract = _dataContract;\r\n        battleContract = _battleContract;\r\n        tradeContract = _tradeContract;\r\n    }\r\n    \r\n    \r\n    // public\r\n    \r\n    function totalSupply() public constant requireDataContract returns (uint256 supply){\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        return data.totalMonster();\r\n    }\r\n    \r\n    function balanceOf(address _owner) public constant requireDataContract returns (uint balance) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        return data.getMonsterDexSize(_owner);\r\n    }\r\n    \r\n    function ownerOf(uint256 _tokenId) public constant requireDataContract returns (address owner) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\r\n        require(obj.monsterId == uint64(_tokenId));\r\n        return obj.trainer;\r\n    }\r\n    \r\n    function approve(address _to, uint256 _tokenId) isActive external {\r\n        require(msg.sender == ownerOf(_tokenId));\r\n        require(msg.sender != _to);\r\n        allowed[msg.sender][_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n    \r\n    function takeOwnership(uint256 _tokenId) requireDataContract requireBattleContract requireTradeContract isActive external {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\r\n        \r\n        require(obj.monsterId == uint64(_tokenId));\r\n        require(msg.sender != obj.trainer);\r\n        \r\n        require(allowed[obj.trainer][_tokenId] == msg.sender);\r\n        \r\n        // check battle & trade contract \r\n        EtheremonBattle battle = EtheremonBattle(battleContract);\r\n        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\r\n        if (battle.isOnBattle(obj.monsterId) || trade.isOnTrading(obj.monsterId))\r\n            revert();\r\n        \r\n        // remove allowed\r\n        allowed[obj.trainer][_tokenId] = address(0);\r\n\r\n        // transfer owner\r\n        data.removeMonsterIdMapping(obj.trainer, obj.monsterId);\r\n        data.addMonsterIdMapping(msg.sender, obj.monsterId);\r\n        \r\n        Transfer(obj.trainer, msg.sender, _tokenId);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _tokenId) requireDataContract isActive external {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\r\n        \r\n        require(obj.monsterId == uint64(_tokenId));\r\n        require(obj.trainer == msg.sender);\r\n        require(msg.sender != _to);\r\n        require(_to != address(0));\r\n        \r\n        // check battle & trade contract \r\n        EtheremonBattle battle = EtheremonBattle(battleContract);\r\n        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\r\n        if (battle.isOnBattle(obj.monsterId) || trade.isOnTrading(obj.monsterId))\r\n            revert();\r\n        \r\n        // remove allowed\r\n        allowed[obj.trainer][_tokenId] = address(0);\r\n        \r\n        // transfer owner\r\n        data.removeMonsterIdMapping(obj.trainer, obj.monsterId);\r\n        data.addMonsterIdMapping(msg.sender, obj.monsterId);\r\n        \r\n        Transfer(obj.trainer, _to, _tokenId);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _tokenId) requireDataContract requireBattleContract requireTradeContract external {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\r\n        \r\n        require(obj.monsterId == uint64(_tokenId));\r\n        require(obj.trainer == _from);\r\n        require(_to != address(0));\r\n        require(_to != _from);\r\n        require(allowed[_from][_tokenId] == msg.sender);\r\n    \r\n        // check battle & trade contract \r\n        EtheremonBattle battle = EtheremonBattle(battleContract);\r\n        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\r\n        if (battle.isOnBattle(obj.monsterId) || trade.isOnTrading(obj.monsterId))\r\n            revert();\r\n        \r\n        // remove allowed\r\n        allowed[_from][_tokenId] = address(0);\r\n\r\n        // transfer owner\r\n        data.removeMonsterIdMapping(obj.trainer, obj.monsterId);\r\n        data.addMonsterIdMapping(_to, obj.monsterId);\r\n        \r\n        Transfer(obj.trainer, _to, _tokenId);\r\n    }\r\n    \r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public constant requireDataContract returns (uint tokenId) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        return data.getMonsterObjId(_owner, _index);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"},{\"name\":\"_battleContract\",\"type\":\"address\"},{\"name\":\"_tradeContract\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"},{\"name\":\"_battleContract\",\"type\":\"address\"},{\"name\":\"_tradeContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EtheremonAsset","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000abc1c404424bdf24c19a5cc5ef8f47781d18eb3e000000000000000000000000df6164efd12678bf6a7d5a1ddf73c831493f65740000000000000000000000004ba72f0f8dad13709ee28a992869e79d0fe47030","Library":"","SwarmSource":"bzzr://5993c62218858d49cd7b8ed7fea352653d00373d346c6411a18129833818a901"}]}