{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n\r\ncontract bettingGenerator{\r\n    address[] public deployedSportEvent;\r\n    address _teamAccount = 0x1b2a07BE84d8914526b51ce72bEDDB312656058e;\r\n    function createSportEvent(string _nameEvent,uint8 _feePercentage,uint _endTime) public {\r\n        require(msg.sender == _teamAccount);\r\n        deployedSportEvent.push(new sportEvent(_nameEvent,_feePercentage,_teamAccount,_endTime));       \r\n    }\r\n\r\n    function getDeployedEvents() public view returns (address[]){\r\n        return deployedSportEvent;\r\n    }\r\n    \r\n}\r\n\r\ncontract sportEvent{\r\n    bool eventEnded = false;\r\n    uint256 endTime;\r\n    address public manager ;\r\n    uint8 public devPercentage;\r\n    string public name;\r\n    mapping(address => uint) public index;\r\n\r\n    struct Player{\r\n        \r\n        uint[12] betsValue;\r\n        address playerAddress;\r\n        uint totalPlayerBet;\r\n        \r\n    }\r\n    Player[] private Bettors;\r\n    constructor(string nameEvent,uint8 feePercentage,address teamAccount,uint eventEndTime) public{\r\n        manager = teamAccount;\r\n        name = nameEvent;\r\n        devPercentage = feePercentage;\r\n        Bettors.push(\r\n            Player(\r\n                [uint256 (0),0,0,0,0,0,0,0,0,0,0,0],\r\n                address(this),\r\n                0\r\n        ));\r\n        endTime = eventEndTime;\r\n\r\n    }\r\n    function enterEvent(uint[12] playerValue) external payable{\r\n        require(validPurchase());\r\n        require(\r\n            msg.value == (playerValue[0] + playerValue[1]+playerValue[2]+playerValue[3]+playerValue[4]+playerValue[5]+playerValue[6]+playerValue[7]+playerValue[8]+playerValue[9]+playerValue[10]+playerValue[11])\r\n        );\r\n        \r\n        Bettors[0].totalPlayerBet += msg.value;\r\n        for(uint a = 0;a<12;a++){\r\n            Bettors[0].betsValue[a] += playerValue[a];    \r\n        }\r\n        \r\n        \r\n        if(index[msg.sender] == 0){ \r\n            Bettors.push(Player(playerValue,msg.sender,msg.value));\r\n            index[msg.sender] = Bettors.length-1;\r\n        }\r\n        else{ \r\n            Player storage bettor = Bettors[index[msg.sender]];\r\n            bettor.totalPlayerBet += msg.value;\r\n            for(uint b = 0;b<12;b++){\r\n                bettor.betsValue[b] += playerValue[b];    \r\n            }\r\n\r\n        }\r\n   \r\n    }\r\n\r\n\r\n    function splitWinnings(uint winnerIndex) public {\r\n        require(!eventEnded);\r\n        require(msg.sender == manager);\r\n        uint devFee = devPercentage*Bettors[0].totalPlayerBet/100;\r\n        manager.transfer(devFee);\r\n        uint newBalance = address(this).balance;\r\n        uint16 winnersCount;\r\n        uint share = 0;\r\n        for(uint l = 1; l<Bettors.length ;l++){\r\n            if(Bettors[l].betsValue[winnerIndex]>0){\r\n                share = Bettors[l].betsValue[winnerIndex]*newBalance/Bettors[0].betsValue[winnerIndex];\r\n                (Bettors[l].playerAddress).transfer(share);\r\n                winnersCount++;\r\n            }\r\n        }\r\n        if(winnersCount==0){\r\n            for(uint g = 1; g<Bettors.length ;g++){\r\n                \r\n                share=Bettors[g].totalPlayerBet*newBalance/Bettors[0].totalPlayerBet;\r\n                (Bettors[g].playerAddress).transfer(share);\r\n        }\r\n        }\r\n        eventEnded = true;\r\n\r\n    }\r\n    \r\n    function getDetails() public view returns(string ,uint,uint8){\r\n        return (\r\n                name,\r\n                address(this).balance,\r\n                devPercentage\r\n            );\r\n    }\r\n    function validPurchase()  internal  view\r\n        returns(bool) \r\n    {\r\n        bool withinPeriod = now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        bool nonInvalidAccount = msg.sender != 0;\r\n        return withinPeriod && nonZeroPurchase && nonInvalidAccount;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getDeployedEvents\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameEvent\",\"type\":\"string\"},{\"name\":\"_feePercentage\",\"type\":\"uint8\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"createSportEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedSportEvent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"bettingGenerator","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://95bf9563d059a05db1cba5c5b4a7eecfa04cac5d2a9b5f9b6f9ef80d7f1208f8"}]}