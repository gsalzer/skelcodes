{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n    uint           wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() constant returns (uint supply);\r\n    function balanceOf( address who ) constant returns (uint value);\r\n    function allowance( address owner, address spender ) constant returns (uint _allowance);\r\n\r\n    function transfer( address to, uint value) returns (bool ok);\r\n    function transferFrom( address from, address to, uint value) returns (bool ok);\r\n    function approve( address spender, uint value ) returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) constant returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    function DSAuth() {\r\n        owner = msg.sender;\r\n        LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        assert(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    modifier authorized(bytes4 sig) {\r\n        assert(isAuthorized(msg.sender, sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n\r\n    function assert(bool x) internal {\r\n        if (!x) throw;\r\n    }\r\n}\r\n\r\ncontract DSExec {\r\n    function tryExec( address target, bytes calldata, uint value)\r\n             internal\r\n             returns (bool call_ret)\r\n    {\r\n        return target.call.value(value)(calldata);\r\n    }\r\n    function exec( address target, bytes calldata, uint value)\r\n             internal\r\n    {\r\n        if(!tryExec(target, calldata, value)) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    // Convenience aliases\r\n    function exec( address t, bytes c )\r\n        internal\r\n    {\r\n        exec(t, c, 0);\r\n    }\r\n    function exec( address t, uint256 v )\r\n        internal\r\n    {\r\n        bytes memory c; exec(t, c, v);\r\n    }\r\n    function tryExec( address t, bytes c )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return tryExec(t, c, 0);\r\n    }\r\n    function tryExec( address t, uint256 v )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        bytes memory c; return tryExec(t, c, v);\r\n    }\r\n}\r\n\r\ncontract DSMath {\r\n    \r\n    /*\r\n    standard uint256 functions\r\n     */\r\n\r\n    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x * y) >= x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    /*\r\n    uint128 functions (h is for half)\r\n     */\r\n\r\n\r\n    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        assert((z = x * y) >= x);\r\n    }\r\n\r\n    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n\r\n    /*\r\n    int256 functions\r\n     */\r\n\r\n    function imin(int256 x, int256 y) constant internal returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int256 x, int256 y) constant internal returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    /*\r\n    WAD math\r\n     */\r\n\r\n    uint128 constant WAD = 10 ** 18;\r\n\r\n    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hadd(x, y);\r\n    }\r\n\r\n    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hsub(x, y);\r\n    }\r\n\r\n    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * y + WAD / 2) / WAD);\r\n    }\r\n\r\n    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * WAD + y / 2) / y);\r\n    }\r\n\r\n    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmin(x, y);\r\n    }\r\n    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmax(x, y);\r\n    }\r\n\r\n    /*\r\n    RAY math\r\n     */\r\n\r\n    uint128 constant RAY = 10 ** 27;\r\n\r\n    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hadd(x, y);\r\n    }\r\n\r\n    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hsub(x, y);\r\n    }\r\n\r\n    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * y + RAY / 2) / RAY);\r\n    }\r\n\r\n    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * RAY + y / 2) / y);\r\n    }\r\n\r\n    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\r\n        // This famous algorithm is called \"exponentiation by squaring\"\r\n        // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n        //\r\n        // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n        //\r\n        // These facts are why it works:\r\n        //\r\n        //  If n is even, then x^n = (x^2)^(n/2).\r\n        //  If n is odd,  then x^n = x * x^(n-1),\r\n        //   and applying the equation for even x gives\r\n        //    x^n = x * (x^2)^((n-1) / 2).\r\n        //\r\n        //  Also, EVM division is flooring and\r\n        //    floor[(n-1) / 2] = floor[n / 2].\r\n\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n\r\n    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmin(x, y);\r\n    }\r\n    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmax(x, y);\r\n    }\r\n\r\n    function cast(uint256 x) constant internal returns (uint128 z) {\r\n        assert((z = uint128(x)) == x);\r\n    }\r\n\r\n}\r\n\r\ncontract DSStop is DSAuth, DSNote {\r\n\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        assert (!stopped);\r\n        _;\r\n    }\r\n    function stop() auth note {\r\n        stopped = true;\r\n    }\r\n    function start() auth note {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\n\r\ncontract DSTokenBase is ERC20, DSMath {\r\n    uint256                                            _supply;\r\n    mapping (address => uint256)                       _balances;\r\n    mapping (address => mapping (address => uint256))  _approvals;\r\n    \r\n    function DSTokenBase(uint256 supply) {\r\n        _balances[msg.sender] = supply;\r\n        _supply = supply;\r\n    }\r\n    \r\n    function totalSupply() constant returns (uint256) {\r\n        return _supply;\r\n    }\r\n    function balanceOf(address src) constant returns (uint256) {\r\n        return _balances[src];\r\n    }\r\n    function allowance(address src, address guy) constant returns (uint256) {\r\n        return _approvals[src][guy];\r\n    }\r\n    \r\n    function transfer(address dst, uint wad) returns (bool) {\r\n        assert(_balances[msg.sender] >= wad);\r\n        \r\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n        \r\n        Transfer(msg.sender, dst, wad);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address src, address dst, uint wad) returns (bool) {\r\n        assert(_balances[src] >= wad);\r\n        assert(_approvals[src][msg.sender] >= wad);\r\n        \r\n        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n        \r\n        Transfer(src, dst, wad);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function approve(address guy, uint256 wad) returns (bool) {\r\n        _approvals[msg.sender][guy] = wad;\r\n        \r\n        Approval(msg.sender, guy, wad);\r\n        \r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract WhiteList {\r\n    \r\n    mapping (address => bool)   public  whiteList;\r\n    \r\n    address  public  owner;\r\n    \r\n    function WhiteList() public {\r\n        owner = msg.sender;\r\n        whiteList[owner] = true;\r\n    }\r\n    \r\n    function addToWhiteList(address [] _addresses) public {\r\n        require(msg.sender == owner);\r\n        \r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            whiteList[_addresses[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function removeFromWhiteList(address [] _addresses) public {\r\n        require (msg.sender == owner);\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            whiteList[_addresses[i]] = false;\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSToken is DSTokenBase(0), DSStop {\r\n\r\n    bytes32  public  symbol = \"GENEOS\";\r\n    uint256  public  decimals = 18; // standard token precision. override to customize\r\n    \r\n    WhiteList public wlcontract;\r\n\r\n    function DSToken(WhiteList wlc_) {\r\n        require(msg.sender == wlc_.owner());\r\n        wlcontract = wlc_;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) stoppable note returns (bool) {\r\n        require(wlcontract.whiteList(msg.sender));\r\n        require(wlcontract.whiteList(dst));\r\n        return super.transfer(dst, wad);\r\n    }\r\n    function transferFrom(\r\n        address src, address dst, uint wad\r\n    ) stoppable note returns (bool) {\r\n        require(wlcontract.whiteList(src));\r\n        require(wlcontract.whiteList(dst));\r\n        return super.transferFrom(src, dst, wad);\r\n    }\r\n    function approve(address guy, uint wad) stoppable note returns (bool) {\r\n        require(wlcontract.whiteList(msg.sender));\r\n        require(wlcontract.whiteList(guy));\r\n        return super.approve(guy, wad);\r\n    }\r\n\r\n    function push(address dst, uint128 wad) returns (bool) {\r\n        return transfer(dst, wad);\r\n    }\r\n    function pull(address src, uint128 wad) returns (bool) {\r\n        return transferFrom(src, msg.sender, wad);\r\n    }\r\n\r\n    function mint(uint128 wad) auth stoppable note {\r\n        require(wlcontract.whiteList(msg.sender));\r\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\r\n        _supply = add(_supply, wad);\r\n    }\r\n    function burn(uint128 wad) auth stoppable note {\r\n        require(wlcontract.whiteList(msg.sender));\r\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\r\n        _supply = sub(_supply, wad);\r\n    }\r\n\r\n    // Optional token name\r\n\r\n    bytes32   public  name = \"\";\r\n    \r\n    function setName(bytes32 name_) auth {\r\n        name = name_;\r\n    }\r\n\r\n}\r\n\r\ncontract GENEOSSale is DSAuth, DSExec, DSMath {\r\n    DSToken  public  GENEOS;               \r\n    uint128  public  totalSupply = 1000000000000000000000000000;         // Total GENEOS amount created\r\n    uint128  public  foundersAllocation = 100000000000000000000000000;   // Amount given to founders\r\n    string   public  foundersKey = \"GENEOS8DVTnJn7tNcQtTSi1XDo5ycXcsmQVksh8FGGrZqFLkBJeagUpJ\";          // Public key of founders\r\n\r\n    uint     public  createLastDay = 200000000000000000000000000;        // Tokens sold in last window\r\n    uint     public  createPerDay = 4000000000000000000000000;           // Tokens sold in each window\r\n\r\n    uint     public  numberOfDays = 175;        // Number of windows except last\r\n    uint     public  startTime;                 // Time of window 1 opening\r\n    uint     public  finalWindowTime;           // Time of window 176 opening\r\n    uint     public  finishTime;\r\n    address  public  foundersAddress = 0x98900a160a52c789210E118Fd3382FcA00a9d0a8;\r\n\r\n    mapping (uint => uint)                       public  dailyTotals;\r\n    mapping (uint => mapping (address => uint))  public  userBuys;\r\n    mapping (uint => mapping (address => bool))  public  claimed;\r\n    mapping (address => string)                  public  keys;\r\n\r\n    event LogBuy      (uint window, address user, uint amount);\r\n    event LogClaim    (uint window, address user, uint amount);\r\n    event LogRegister (address user, string key);\r\n    event LogCollect  (uint amount);\r\n    event LogFreeze   ();\r\n\r\n    function GENEOSSale(\r\n        uint     _startTime\r\n    ) {\r\n        startTime = _startTime;\r\n        finalWindowTime = startTime + (numberOfDays * 1 days);\r\n        finishTime = finalWindowTime + 5 days;\r\n\r\n    }\r\n\r\n    function initialize(DSToken geneos) auth {\r\n        assert(address(GENEOS) == address(0));\r\n        assert(geneos.owner() == address(this));\r\n        assert(geneos.authority() == DSAuthority(0));\r\n        assert(geneos.totalSupply() == 0);\r\n\r\n        GENEOS = geneos;\r\n        GENEOS.mint(totalSupply);\r\n\r\n        GENEOS.push(foundersAddress, foundersAllocation);\r\n        keys[foundersAddress] = foundersKey;\r\n        LogRegister(foundersAddress, foundersKey);\r\n    }\r\n\r\n    function time() constant returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function today() constant returns (uint) {\r\n        return dayFor(time());\r\n    }\r\n\r\n\r\n    function dayFor(uint timestamp) constant returns (uint) {\r\n        if (timestamp < startTime) {\r\n            return 0;\r\n        }\r\n        if (timestamp >= startTime && timestamp < finalWindowTime) {\r\n            return sub(timestamp, startTime) / 1 days + 1;\r\n        }\r\n        if (timestamp >= finalWindowTime && timestamp < finishTime) {\r\n            return 176;\r\n        }\r\n        return 999;\r\n    }\r\n\r\n    function createOnDay(uint day) constant returns (uint) {\r\n        assert(day >= 1 && day <= 176);\r\n        return day == 176 ? createLastDay : createPerDay;\r\n    }\r\n\r\n    // This method provides the buyer some protections regarding which\r\n    // day the buy order is submitted and the maximum price prior to\r\n    // applying this payment that will be allowed.\r\n    function buyWithLimit(uint day, uint limit) payable {\r\n        assert(today() > 0 && today() <= numberOfDays + 1);\r\n        assert(msg.value >= 0.01 ether);\r\n\r\n        assert(day >= today());\r\n        assert(day <= numberOfDays + 1);\r\n\r\n        userBuys[day][msg.sender] += msg.value;\r\n        dailyTotals[day] += msg.value;\r\n\r\n        if (limit != 0) {\r\n            assert(dailyTotals[day] <= limit);\r\n        }\r\n\r\n        LogBuy(day, msg.sender, msg.value);\r\n    }\r\n\r\n    function buy() payable {\r\n       buyWithLimit(today(), 0);\r\n    }\r\n\r\n    function () payable {\r\n       buy();\r\n    }\r\n\r\n    function claim(uint day) {\r\n        \r\n        assert(today() > day);\r\n\r\n        if (claimed[day][msg.sender] || dailyTotals[day] == 0) {\r\n            return;\r\n        }\r\n\r\n        // This will have small rounding errors, but the token is\r\n        // going to be truncated to 8 decimal places or less anyway\r\n        // when launched on its own chain.\r\n\r\n        var dailyTotal = cast(dailyTotals[day]);\r\n        var userTotal  = cast(userBuys[day][msg.sender]);\r\n        var price      = wdiv(cast(createOnDay(day)), dailyTotal);\r\n        var reward     = wmul(price, userTotal);\r\n\r\n        claimed[day][msg.sender] = true;\r\n        GENEOS.push(msg.sender, reward);\r\n\r\n        LogClaim(day, msg.sender, reward);\r\n    }\r\n\r\n    function claimAll() {\r\n        for (uint i = 1; i < today(); i++) {\r\n            claim(i);\r\n        }\r\n    }\r\n\r\n    function register(string key) {\r\n        assert(today() <=  numberOfDays + 1);\r\n        assert(bytes(key).length <= 64);\r\n\r\n        keys[msg.sender] = key;\r\n\r\n        LogRegister(msg.sender, key);\r\n    }\r\n\r\n    // Crowdsale owners can collect ETH any number of times\r\n    function collect() auth {\r\n        assert(today() > 0);\r\n        exec(msg.sender, this.balance);\r\n        LogCollect(this.balance);\r\n    }\r\n\r\n    // Anyone can freeze the token 1 day after the sale ends\r\n    function freeze() {\r\n        assert(time() > finishTime);\r\n        GENEOS.stop();\r\n        LogFreeze();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersKey\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBuys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"createOnDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createLastDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"keys\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyTotals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GENEOS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"geneos\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"dayFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"buyWithLimit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalWindowTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"window\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"window\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"key\",\"type\":\"string\"}],\"name\":\"LogRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogCollect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"GENEOSSale","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005b326300","Library":"","SwarmSource":"bzzr://587ad1058f647b692cfde983a3f91a71946d0b9f9a0458e239dc0443a03d661f"}]}