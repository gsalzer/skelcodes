{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------------------------\r\n//Bit Capital Vendor by BitCV Foundation.\r\n// An ERC20 standard\r\n//\r\n// author: BitCV Foundation Team\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint256 _totalSupply);\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract BCV is ERC20Interface {\r\n    uint256 public constant decimals = 8;\r\n\r\n    string public constant symbol = \"BCV\";\r\n    string public constant name = \"BitCapitalVendorToken\";\r\n\r\n    uint256 public _totalSupply = 120000000000000000; // total supply is 1.2 billion\r\n\r\n    // Owner of this contract\r\n    address public owner;\r\n\r\n    // Balances BCV for each account\r\n    mapping(address => uint256) private balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) private allowed;\r\n\r\n    // List of approved investors\r\n    mapping(address => bool) private approvedInvestorList;\r\n\r\n    // deposit\r\n    mapping(address => uint256) private deposit;\r\n\r\n\r\n    // totalTokenSold\r\n    uint256 public totalTokenSold = 0;\r\n\r\n\r\n    /**\r\n     * @dev Fix for the ERC20 short address attack.\r\n     */\r\n    modifier onlyPayloadSize(uint size) {\r\n      if(msg.data.length < size + 4) {\r\n        revert();\r\n      }\r\n      _;\r\n    }\r\n\r\n\r\n\r\n    /// @dev Constructor\r\n    function BCV()\r\n        public {\r\n        owner = msg.sender;\r\n        balances[owner] = _totalSupply;\r\n    }\r\n\r\n    /// @dev Gets totalSupply\r\n    /// @return Total supply\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /// @dev Gets account's balance\r\n    /// @param _addr Address of the account\r\n    /// @return Account balance\r\n    function balanceOf(address _addr)\r\n        public\r\n        constant\r\n        returns (uint256) {\r\n        return balances[_addr];\r\n    }\r\n\r\n    /// @dev check address is approved investor\r\n    /// @param _addr address\r\n    function isApprovedInvestor(address _addr)\r\n        public\r\n        constant\r\n        returns (bool) {\r\n        return approvedInvestorList[_addr];\r\n    }\r\n\r\n    /// @dev get ETH deposit\r\n    /// @param _addr address get deposit\r\n    /// @return amount deposit of an buyer\r\n    function getDeposit(address _addr)\r\n        public\r\n        constant\r\n        returns(uint256){\r\n        return deposit[_addr];\r\n    }\r\n\r\n\r\n    /// @dev Transfers the balance from msg.sender to an account\r\n    /// @param _to Recipient address\r\n    /// @param _amount Transfered amount in unit\r\n    /// @return Transfer status\r\n    function transfer(address _to, uint256 _amount)\r\n        public\r\n\r\n        returns (bool) {\r\n        // if sender's balance has enough unit and amount >= 0,\r\n        //      and the sum is not overflow,\r\n        // then do transfer\r\n        if ( (balances[msg.sender] >= _amount) &&\r\n             (_amount >= 0) &&\r\n             (balances[_to] + _amount > balances[_to]) ) {\r\n\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n    public\r\n\r\n    returns (bool success) {\r\n        if (balances[_from] >= _amount && _amount > 0 && allowed[_from][msg.sender] >= _amount) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount)\r\n        public\r\n\r\n        returns (bool success) {\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    // get allowance\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        constant\r\n        returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function () public payable{\r\n        revert();\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * SafeMath\r\n * Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract BCVTokenVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // team 2.4 * 10 ** 8, 3% every month after 2019-3-9\r\n    address public teamReserveWallet = 0x7e5C65b899Fb7Cd0c959e5534489B454B7c6c3dF;\r\n    // life 1.2 * 10 ** 8, 20% every month after 2018-6-1\r\n    address public lifeReserveWallet = 0xaed0363f76e4b906ef818b0f3199c580b5b01a43;\r\n    // finance 1.2 * 10 ** 8, 20% every month after 2018-6-1\r\n    address public finanReserveWallet = 0xd60A1D84835006499d5E6376Eb7CB9725643E25F;\r\n    // economic system 1.2 * 10 ** 8, 1200000 every month in first 6 years, left for last 14 years, release after 2018-6-1\r\n    address public econReserveWallet = 0x0C6e75e481cC6Ba8e32d6eF742768fc2273b1Bf0;\r\n    // chain development 1.2 * 10 ** 8, release all after 2018-9-30\r\n    address public developReserveWallet = 0x11aC32f89e874488890E5444723A644248609C0b;\r\n\r\n    // Token Allocations\r\n    uint256 public teamReserveAllocation = 2.4 * (10 ** 8) * (10 ** 8);\r\n    uint256 public lifeReserveAllocation = 1.2 * (10 ** 8) * (10 ** 8);\r\n    uint256 public finanReserveAllocation = 1.2 * (10 ** 8) * (10 ** 8);\r\n    uint256 public econReserveAllocation = 1.2 * (10 ** 8) * (10 ** 8);\r\n    uint256 public developReserveAllocation = 1.2 * (10 ** 8) * (10 ** 8);\r\n\r\n    // Total Token Allocations\r\n    uint256 public totalAllocation = 7.2 * (10 ** 8) * (10 ** 8);\r\n\r\n    uint256 public teamReserveTimeLock = 1552060800; // 2019-3-9\r\n    uint256 public lifeReserveTimeLock = 1527782400;  // 2018-6-1\r\n    uint256 public finanReserveTimeLock = 1527782400;  // 2018-6-1\r\n    uint256 public econReserveTimeLock = 1527782400;  // 2018-6-1\r\n    uint256 public developReserveTimeLock = 1538236800;  // 2018-9-30\r\n\r\n    uint256 public teamVestingStages = 34;   // 3% each month; total 34 stages.\r\n    uint256 public lifeVestingStages = 5;  // 20% each month; total 5 stages.\r\n    uint256 public finanVestingStages = 5;  // 20% each month; total 5 stages.\r\n    uint256 public econVestingStages = 240;  // 1200000 each month for first six years and 200000 each month for next forteen years; total 240 stages.\r\n\r\n    mapping(address => uint256) public allocations;\r\n    mapping(address => uint256) public timeLocks;\r\n    mapping(address => uint256) public claimed;\r\n    uint256 public lockedAt = 0;\r\n\r\n    BCV public token;\r\n\r\n    event Allocated(address wallet, uint256 value);\r\n    event Distributed(address wallet, uint256 value);\r\n    event Locked(uint256 lockTime);\r\n\r\n    // Any of the five reserve wallets\r\n    modifier onlyReserveWallets {\r\n        require(allocations[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    // Team reserve wallet\r\n    modifier onlyTeamReserve {\r\n        require(msg.sender == teamReserveWallet);\r\n        require(allocations[msg.sender] > 0);\r\n        require(allocations[msg.sender] > claimed[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    // Life token reserve wallet\r\n    modifier onlyTokenReserveLife {\r\n        require(msg.sender == lifeReserveWallet);\r\n        require(allocations[msg.sender] > 0);\r\n        require(allocations[msg.sender] > claimed[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    // Finance token reserve wallet\r\n    modifier onlyTokenReserveFinance {\r\n        require(msg.sender == finanReserveWallet);\r\n        require(allocations[msg.sender] > 0);\r\n        require(allocations[msg.sender] > claimed[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    // Economic token reserve wallet\r\n    modifier onlyTokenReserveEcon {\r\n        require(msg.sender == econReserveWallet);\r\n        require(allocations[msg.sender] > 0);\r\n        require(allocations[msg.sender] > claimed[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    // Develop token reserve wallet\r\n    modifier onlyTokenReserveDevelop {\r\n        require(msg.sender == developReserveWallet);\r\n        require(allocations[msg.sender] > 0);\r\n        require(allocations[msg.sender] > claimed[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    // Has not been locked yet\r\n    modifier notLocked {\r\n        require(lockedAt == 0);\r\n        _;\r\n    }\r\n\r\n    // Already locked\r\n    modifier locked {\r\n        require(lockedAt > 0);\r\n        _;\r\n    }\r\n\r\n    // Token allocations have not been set\r\n    modifier notAllocated {\r\n        require(allocations[teamReserveWallet] == 0);\r\n        require(allocations[lifeReserveWallet] == 0);\r\n        require(allocations[finanReserveWallet] == 0);\r\n        require(allocations[econReserveWallet] == 0);\r\n        require(allocations[developReserveWallet] == 0);\r\n        _;\r\n    }\r\n\r\n    function BCVTokenVault(ERC20Interface _token) public {\r\n        owner = msg.sender;\r\n        token = BCV(_token);\r\n    }\r\n\r\n    function allocate() public notLocked notAllocated onlyOwner {\r\n\r\n        // Makes sure Token Contract has the exact number of tokens\r\n        require(token.balanceOf(address(this)) == totalAllocation);\r\n\r\n        allocations[teamReserveWallet] = teamReserveAllocation;\r\n        allocations[lifeReserveWallet] = lifeReserveAllocation;\r\n        allocations[finanReserveWallet] = finanReserveAllocation;\r\n        allocations[econReserveWallet] = econReserveAllocation;\r\n        allocations[developReserveWallet] = developReserveAllocation;\r\n\r\n        Allocated(teamReserveWallet, teamReserveAllocation);\r\n        Allocated(lifeReserveWallet, lifeReserveAllocation);\r\n        Allocated(finanReserveWallet, finanReserveAllocation);\r\n        Allocated(econReserveWallet, econReserveAllocation);\r\n        Allocated(developReserveWallet, developReserveAllocation);\r\n\r\n        lock();\r\n    }\r\n\r\n    // Lock the vault for the wallets\r\n    function lock() internal notLocked onlyOwner {\r\n\r\n        lockedAt = block.timestamp;\r\n\r\n        timeLocks[teamReserveWallet] = teamReserveTimeLock;\r\n        timeLocks[lifeReserveWallet] = lifeReserveTimeLock;\r\n        timeLocks[finanReserveWallet] = finanReserveTimeLock;\r\n        timeLocks[econReserveWallet] = econReserveTimeLock;\r\n        timeLocks[developReserveWallet] = developReserveTimeLock;\r\n\r\n        Locked(lockedAt);\r\n    }\r\n\r\n    // Recover Tokens in case incorrect amount was sent to contract.\r\n    function recoverFailedLock() external notLocked notAllocated onlyOwner {\r\n\r\n        // Transfer all tokens on this contract back to the owner\r\n        require(token.transfer(owner, token.balanceOf(address(this))));\r\n    }\r\n\r\n    // Total number of tokens currently in the vault\r\n    function getTotalBalance() public view returns (uint256 tokensCurrentlyInVault) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    // Number of tokens that are still locked\r\n    function getLockedBalance() public view onlyReserveWallets returns (uint256 tokensLocked) {\r\n        return allocations[msg.sender].sub(claimed[msg.sender]);\r\n    }\r\n\r\n\r\n    // Claim tokens for team reserve wallet\r\n    function claimTeamReserve() onlyTeamReserve locked public {\r\n\r\n        address reserveWallet = msg.sender;\r\n        // Can't claim before Lock ends\r\n        require(block.timestamp > timeLocks[reserveWallet]);\r\n\r\n        uint256 vestingStage = teamVestingStage();\r\n\r\n        // Amount of tokens the team should have at this vesting stage\r\n        uint256 totalUnlocked = vestingStage.mul(7.2 * (10 ** 6) * (10 ** 8));\r\n\r\n        // For the last vesting stage, we will release all tokens\r\n        if (vestingStage == 34) {\r\n          totalUnlocked = allocations[teamReserveWallet];\r\n        }\r\n\r\n        // Total unlocked token must be smaller or equal to total locked token\r\n        require(totalUnlocked <= allocations[teamReserveWallet]);\r\n\r\n        // Previously claimed tokens must be less than what is unlocked\r\n        require(claimed[teamReserveWallet] < totalUnlocked);\r\n\r\n        // Number of tokens we can get\r\n        uint256 payment = totalUnlocked.sub(claimed[teamReserveWallet]);\r\n\r\n        // Update the claimed tokens in team wallet\r\n        claimed[teamReserveWallet] = totalUnlocked;\r\n\r\n        // Transfer to team wallet address\r\n        require(token.transfer(teamReserveWallet, payment));\r\n\r\n        Distributed(teamReserveWallet, payment);\r\n    }\r\n\r\n    //Current Vesting stage for team\r\n    function teamVestingStage() public view onlyTeamReserve returns(uint256) {\r\n\r\n        uint256 nowTime = block.timestamp;\r\n        // Number of months past our unlock time, which is the stage\r\n        uint256 stage = (nowTime.sub(teamReserveTimeLock)).div(2592000);\r\n\r\n        // Ensures team vesting stage doesn't go past teamVestingStages\r\n        if(stage > teamVestingStages) {\r\n            stage = teamVestingStages;\r\n        }\r\n        return stage;\r\n\r\n    }\r\n\r\n    // Claim tokens for life reserve wallet\r\n    function claimTokenReserveLife() onlyTokenReserveLife locked public {\r\n\r\n        address reserveWallet = msg.sender;\r\n\r\n        // Can't claim before Lock ends\r\n        require(block.timestamp > timeLocks[reserveWallet]);\r\n\r\n        // The vesting stage of life wallet\r\n        uint256 vestingStage = lifeVestingStage();\r\n\r\n        // Amount of tokens the life wallet should have at this vesting stage\r\n        uint256 totalUnlocked = vestingStage.mul(2.4 * (10 ** 7) * (10 ** 8));\r\n\r\n        // Total unlocked token must be smaller or equal to total locked token\r\n        require(totalUnlocked <= allocations[lifeReserveWallet]);\r\n\r\n        // Previously claimed tokens must be less than what is unlocked\r\n        require(claimed[lifeReserveWallet] < totalUnlocked);\r\n\r\n        // Number of tokens we can get\r\n        uint256 payment = totalUnlocked.sub(claimed[lifeReserveWallet]);\r\n\r\n        // Update the claimed tokens in finance wallet\r\n        claimed[lifeReserveWallet] = totalUnlocked;\r\n\r\n        // Transfer to life wallet address\r\n        require(token.transfer(reserveWallet, payment));\r\n\r\n        Distributed(reserveWallet, payment);\r\n    }\r\n\r\n    // Current Vesting stage for life wallet\r\n    function lifeVestingStage() public view onlyTokenReserveLife returns(uint256) {\r\n\r\n        uint256 nowTime = block.timestamp;\r\n        // Number of months past our unlock time, which is the stage\r\n        uint256 stage = (nowTime.sub(lifeReserveTimeLock)).div(2592000);\r\n\r\n        // Ensures life wallet vesting stage doesn't go past lifeVestingStages\r\n        if(stage > lifeVestingStages) {\r\n            stage = lifeVestingStages;\r\n        }\r\n\r\n        return stage;\r\n    }\r\n\r\n    // Claim tokens for finance reserve wallet\r\n    function claimTokenReserveFinan() onlyTokenReserveFinance locked public {\r\n\r\n        address reserveWallet = msg.sender;\r\n\r\n        // Can't claim before Lock ends\r\n        require(block.timestamp > timeLocks[reserveWallet]);\r\n\r\n        // The vesting stage of finance wallet\r\n        uint256 vestingStage = finanVestingStage();\r\n\r\n        // Amount of tokens the finance wallet should have at this vesting stage\r\n        uint256 totalUnlocked = vestingStage.mul(2.4 * (10 ** 7) * (10 ** 8));\r\n\r\n        // Total unlocked token must be smaller or equal to total locked token\r\n        require(totalUnlocked <= allocations[finanReserveWallet]);\r\n\r\n        // Previously claimed tokens must be less than what is unlocked\r\n        require(claimed[finanReserveWallet] < totalUnlocked);\r\n\r\n        // Number of tokens we can get\r\n        uint256 payment = totalUnlocked.sub(claimed[finanReserveWallet]);\r\n\r\n        // Update the claimed tokens in finance wallet\r\n        claimed[finanReserveWallet] = totalUnlocked;\r\n\r\n        // Transfer to finance wallet address\r\n        require(token.transfer(reserveWallet, payment));\r\n\r\n        Distributed(reserveWallet, payment);\r\n    }\r\n\r\n    // Current Vesting stage for finance wallet\r\n    function finanVestingStage() public view onlyTokenReserveFinance returns(uint256) {\r\n\r\n        uint256 nowTime = block.timestamp;\r\n\r\n        // Number of months past our unlock time, which is the stage\r\n        uint256 stage = (nowTime.sub(finanReserveTimeLock)).div(2592000);\r\n\r\n        // Ensures finance wallet vesting stage doesn't go past finanVestingStages\r\n        if(stage > finanVestingStages) {\r\n            stage = finanVestingStages;\r\n        }\r\n\r\n        return stage;\r\n\r\n    }\r\n\r\n    // Claim tokens for economic reserve wallet\r\n    function claimTokenReserveEcon() onlyTokenReserveEcon locked public {\r\n\r\n        address reserveWallet = msg.sender;\r\n\r\n        // Can't claim before Lock ends\r\n        require(block.timestamp > timeLocks[reserveWallet]);\r\n\r\n        uint256 vestingStage = econVestingStage();\r\n\r\n        // Amount of tokens the economic wallet should have at this vesting stage\r\n        uint256 totalUnlocked;\r\n\r\n        // For first 6 years stages\r\n        if (vestingStage <= 72) {\r\n          totalUnlocked = vestingStage.mul(1200000 * (10 ** 8));\r\n        } else {        // For the next 14 years stages\r\n          totalUnlocked = ((vestingStage.sub(72)).mul(200000 * (10 ** 8))).add(86400000 * (10 ** 8));\r\n        }\r\n\r\n        // Total unlocked token must be smaller or equal to total locked token\r\n        require(totalUnlocked <= allocations[econReserveWallet]);\r\n\r\n        // Previously claimed tokens must be less than what is unlocked\r\n        require(claimed[econReserveWallet] < totalUnlocked);\r\n\r\n        // Number of tokens we can get\r\n        uint256 payment = totalUnlocked.sub(claimed[econReserveWallet]);\r\n\r\n        // Update the claimed tokens in economic wallet\r\n        claimed[econReserveWallet] = totalUnlocked;\r\n\r\n        // Transfer to economic wallet address\r\n        require(token.transfer(reserveWallet, payment));\r\n\r\n        Distributed(reserveWallet, payment);\r\n    }\r\n\r\n    // Current Vesting stage for economic wallet\r\n    function econVestingStage() public view onlyTokenReserveEcon returns(uint256) {\r\n\r\n        uint256 nowTime = block.timestamp;\r\n\r\n        // Number of months past our unlock time, which is the stage\r\n        uint256 stage = (nowTime.sub(timeLocks[econReserveWallet])).div(2592000);\r\n\r\n        // Ensures economic wallet vesting stage doesn't go past econVestingStages\r\n        if(stage > econVestingStages) {\r\n            stage = econVestingStages;\r\n        }\r\n\r\n        return stage;\r\n\r\n    }\r\n\r\n    // Claim tokens for development reserve wallet\r\n    function claimTokenReserveDevelop() onlyTokenReserveDevelop locked public {\r\n\r\n      address reserveWallet = msg.sender;\r\n\r\n      // Can't claim before Lock ends\r\n      require(block.timestamp > timeLocks[reserveWallet]);\r\n\r\n      // Must Only claim once\r\n      require(claimed[reserveWallet] == 0);\r\n\r\n      // Number of tokens we can get, which is all tokens in developReserveWallet\r\n      uint256 payment = allocations[reserveWallet];\r\n\r\n      // Update the claimed tokens in development wallet\r\n      claimed[reserveWallet] = payment;\r\n\r\n      // Transfer to development wallet address\r\n      require(token.transfer(reserveWallet, payment));\r\n\r\n      Distributed(reserveWallet, payment);\r\n    }\r\n\r\n\r\n    // Checks if msg.sender can collect tokens\r\n    function canCollect() public view onlyReserveWallets returns(bool) {\r\n\r\n        return block.timestamp > timeLocks[msg.sender] && claimed[msg.sender] == 0;\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"name\":\"tokensCurrentlyInVault\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockedBalance\",\"outputs\":[{\"name\":\"tokensLocked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lifeReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"econReserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lifeVestingStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokenReserveLife\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTeamReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokenReserveEcon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"econVestingStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokenReserveDevelop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"econVestingStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVestingStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVestingStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeLocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"econReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokenReserveFinan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lifeReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developReserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finanReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finanVestingStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lifeVestingStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"econReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCollect\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finanReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finanVestingStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lifeReserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finanReserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recoverFailedLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BCVTokenVault","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001014613e2b3cbc4d575054d4982e580d9b99d7b1","Library":"","SwarmSource":"bzzr://8069fa7bb1aafbcccb3ff7d3ffa59acfa4e796d637620480918ed81d0e040f16"}]}