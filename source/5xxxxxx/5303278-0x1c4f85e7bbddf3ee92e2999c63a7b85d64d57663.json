{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.17;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint a, uint b) internal pure returns(uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure  returns(uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal  pure returns(uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n\r\n    function balanceOf(address who) public view returns(uint);\r\n\r\n    function allowance(address owner, address spender) public view returns(uint);\r\n\r\n    function transfer(address to, uint value) public returns(bool ok);\r\n\r\n    function transferFrom(address from, address to, uint value) public returns(bool ok);\r\n\r\n    function approve(address spender, uint value) public returns(bool ok);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n// DeployTokenContract Smart Contract \r\n// This smart contract collects ETH and in return creates Token contract\r\n// based on the amount of money sent it will create two kinds of contract\r\n// 1. Simple ERC20 token contract\r\n// 2. As aboove with option to purchase tokens with set exchange rate to ETH\r\ncontract DeployTokenContract is Ownable {\r\n    \r\n    address public commissionAddress;           // address to deposit commissions\r\n    uint public deploymentCost;                 // cost of deployment with exchange feature\r\n    uint public tokenOnlyDeploymentCost;        // cost of deployment with basic ERC20 feature\r\n    uint public exchangeEnableCost;             // cost of upgrading existing ERC20 to exchange feature\r\n    uint public codeExportCost;                 // cost of exporting the code\r\n    MultiToken multiToken;                      // ERC20 token with exchange feature\r\n\r\n    event TokenDeployed(address newToken, uint amountPaid);    \r\n    event ExchangeEnabled(address token, uint amountPaid);\r\n    event CodeExportEnabled(address sender);\r\n\r\n    // @notice deploy token with exchnge functionality\r\n    // @param _initialSupply {uint} initial supply of token\r\n    // @param _tokenName {string} name of token\r\n    // @param _decimalUnits {uint} how many decimal units token will have\r\n    // @param _tokenSymbol {string} ticker for the token\r\n    // @param _version {string} version of the token\r\n    // @param _tokenPriceETH {uint} price of token for exchange functionality\r\n    function deployMultiToken () public returns (address) {\r\n\r\n        MultiToken token;\r\n\r\n        token = new MultiToken();                                                       \r\n        TokenDeployed(token, 0);\r\n        return token;                                                \r\n    }   \r\n\r\n    // @notice to enable code export functionality\r\n    // @param _token {address} to token contract \r\n    function enableCodeExport(address _token) public payable {\r\n\r\n        require(msg.value == codeExportCost);\r\n        require(_token != address(0));\r\n        multiToken = MultiToken(_token);\r\n        if (!multiToken.enableCodeExport())\r\n            revert();\r\n        commissionAddress.transfer(msg.value); \r\n        CodeExportEnabled(msg.sender);\r\n    }\r\n\r\n}\r\n\r\n\r\n// The  Exchange token\r\ncontract MultiToken is ERC20, Ownable {\r\n\r\n    using SafeMath for uint;\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals; // How many decimals to show.\r\n    string public version;\r\n    uint public totalSupply;\r\n    uint public tokenPrice;\r\n    bool public exchangeEnabled;\r\n    address public parentContract;\r\n    bool public codeExportEnabled;\r\n\r\n    mapping(address => uint) public balances;\r\n    mapping(address => mapping(address => uint)) public allowed;\r\n\r\n    modifier onlyAuthorized() {\r\n        if (msg.sender != parentContract) \r\n            revert();\r\n        _;\r\n    }\r\n\r\n    // The Token constructor     \r\n    function MultiToken() public \r\n    {\r\n\r\n        totalSupply = 10000 * (10**8);                                             \r\n        name = \"ICO\";          // Set the name for display purposes\r\n        symbol = \"ICO\";      // Set the symbol for display purposes\r\n        decimals = 8;   // Amount of decimals for display purposes\r\n        version = \"1.0\";         // Version of token\r\n        tokenPrice = 1 ether / 100;   // Token price in ETH\r\n        codeExportEnabled = true; // If true allow code export\r\n        exchangeEnabled = true;\r\n        balances[owner] = totalSupply;    \r\n        parentContract = msg.sender;    // save parent contract address to allow enabling of exchange                                       // feature if required later for onlyAuthorized()\r\n    }\r\n\r\n    event TransferSold(address indexed to, uint value);\r\n\r\n    // @noice To be called by parent contract to enable exchange functionality\r\n    // @param _tokenPrice {uint} costo of token in ETH\r\n    // @return true {bool} if successful\r\n    function enableExchange(uint _tokenPrice) public onlyAuthorized() returns(bool) {\r\n        exchangeEnabled = true;\r\n        tokenPrice = _tokenPrice;\r\n        return true; \r\n    }\r\n\r\n        // @notice to enable code export functionality\r\n    function enableCodeExport() public onlyAuthorized() returns(bool) {        \r\n        codeExportEnabled = true;\r\n        return true;\r\n    }\r\n\r\n    // @notice It will send tokens to sender based on the token price    \r\n    function swapTokens() public payable {     \r\n\r\n        require(exchangeEnabled);   \r\n        uint tokensToSend;\r\n        tokensToSend = (msg.value * (10**decimals)) / tokenPrice; \r\n        require(balances[owner] >= tokensToSend);\r\n        balances[msg.sender] += tokensToSend;\r\n        balances[owner] -= tokensToSend;\r\n        Transfer(owner, msg.sender, tokensToSend);\r\n        TransferSold(msg.sender, tokensToSend);       \r\n    }\r\n\r\n    // @notice will be able to mint tokens in the future\r\n    // @param _target {address} address to which new tokens will be assigned\r\n    // @parm _mintedAmount {uint256} amouont of tokens to mint\r\n    function mintToken(address _target, uint256 _mintedAmount) public onlyOwner() {        \r\n        \r\n        balances[_target] += _mintedAmount;\r\n        totalSupply += _mintedAmount;\r\n        Transfer(0, _target, _mintedAmount);       \r\n    }\r\n  \r\n    // @notice transfer tokens to given address\r\n    // @param _to {address} address or recipient\r\n    // @param _value {uint} amount to transfer\r\n    // @return  {bool} true if successful\r\n    function transfer(address _to, uint _value) public returns(bool) {\r\n\r\n        require(_to != address(0));\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // @notice transfer tokens from given address to another address\r\n    // @param _from {address} from whom tokens are transferred\r\n    // @param _to {address} to whom tokens are transferred\r\n    // @param _value {uint} amount of tokens to transfer\r\n    // @return  {bool} true if successful\r\n    function transferFrom(address _from, address _to, uint256 _value) public  returns(bool success) {\r\n\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value); // Check if the sender has enough\r\n        require(_value <= allowed[_from][msg.sender]); // Check if allowed is greater or equal\r\n        balances[_from] -= _value; // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        allowed[_from][msg.sender] -= _value;  // adjust allowed\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // @notice to query balance of account\r\n    // @return _owner {address} address of user to query balance\r\n    function balanceOf(address _owner) public view returns(uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    *\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint _value) public returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // @notice to query of allowance of one user to the other\r\n    // @param _owner {address} of the owner of the account\r\n    // @param _spender {address} of the spender of the account\r\n    // @return remaining {uint} amount of remaining allowance\r\n    function allowance(address _owner, address _spender) public view returns(uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    */\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"enableExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"codeExportEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"swapTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableCodeExport\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MultiToken","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://64f50f8a94693dba19e7e8a880fa1ff6b315d25ac676f041967af544ae801c47"}]}