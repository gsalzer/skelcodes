{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract dapEscrow{\r\n    \r\n    struct Bid{\r\n        bytes32 name;\r\n        address oracle;\r\n        address seller;\r\n        address buyer;\r\n        uint price;\r\n        uint timeout;\r\n        dealStatus status;\r\n        uint fee;\r\n        bool isLimited;\r\n    }\r\n    \r\n    enum dealStatus{ unPaid, Pending, Closed, Rejected, Refund }\r\n    \r\n    mapping (address => Bid[]) public bids;\r\n    mapping (address => uint) public pendingWithdrawals;\r\n    \r\n    event amountRecieved(\r\n        address seller,\r\n        uint bidId\r\n    );\r\n    \r\n    event bidClosed(\r\n        address seller,\r\n        uint bidId\r\n        );\r\n        \r\n    event bidCreated(\r\n        address seller,\r\n        bytes32 name,\r\n        uint bidId\r\n        );\r\n        \r\n    event refundDone(\r\n        address seller,\r\n        uint bidId\r\n        );\r\n        \r\n    event withdrawDone(\r\n        address person,\r\n        uint amount\r\n        );\r\n    \r\n    event bidRejected(\r\n        address seller,\r\n        uint bidId\r\n        );\r\n        \r\n    function getBidIndex(address seller, bytes32 name) public constant returns (uint){\r\n        for (uint8 i=0;i<bids[seller].length;i++){\r\n            if (bids[seller][i].name == name){\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getBidsNum (address seller) public constant returns (uint bidsNum) {\r\n        return bids[seller].length;\r\n    }\r\n    \r\n    function sendAmount (address seller, uint bidId) external payable{\r\n        Bid storage a = bids[seller][bidId];\r\n        require(msg.value == a.price && a.status == dealStatus.unPaid);\r\n        if (a.isLimited == true){\r\n            require(a.timeout > block.number);\r\n        }\r\n        a.status = dealStatus.Pending;\r\n        amountRecieved(seller, bidId);\r\n    }\r\n    \r\n    function createBid (bytes32 name, address seller, address oracle, address buyer, uint price, uint timeout, uint fee) external{\r\n        require(name.length != 0 && price !=0);\r\n        bool limited = true;\r\n        if (timeout == 0){\r\n            limited = false;\r\n        }\r\n        bids[seller].push(Bid({\r\n            name: name, \r\n            oracle: oracle, \r\n            seller: seller, \r\n            buyer: buyer,\r\n            price: price,\r\n            timeout: block.number+timeout,\r\n            status: dealStatus.unPaid,\r\n            fee: fee,\r\n            isLimited: limited\r\n        }));\r\n        uint bidId = bids[seller].length-1;\r\n        bidCreated(seller, name, bidId);\r\n    }\r\n    \r\n    function closeBid(address seller, uint bidId) external returns (bool){\r\n        Bid storage bid = bids[seller][bidId];\r\n        if (bid.isLimited == true){\r\n            require(bid.timeout > block.number);\r\n        }\r\n        require(msg.sender == bid.oracle && bid.status == dealStatus.Pending);\r\n        bid.status = dealStatus.Closed;\r\n        pendingWithdrawals[bid.seller]+=bid.price-bid.fee;\r\n        pendingWithdrawals[bid.oracle]+=bid.fee;\r\n        withdraw(bid.seller);\r\n        withdraw(bid.oracle);\r\n        bidClosed(seller, bidId);\r\n        return true;\r\n    }\r\n    \r\n    function refund(address seller, uint bidId) external returns (bool){\r\n        require(bids[seller][bidId].buyer == msg.sender && bids[seller][bidId].isLimited == true && bids[seller][bidId].timeout < block.number && bids[seller][bidId].status == dealStatus.Pending);\r\n        Bid storage a = bids[seller][bidId];\r\n        a.status = dealStatus.Refund;\r\n        pendingWithdrawals[a.buyer] = a.price;\r\n        withdraw(a.buyer);\r\n        refundDone(seller,bidId);\r\n        return true;\r\n    }\r\n    function rejectBid(address seller, uint bidId) external returns (bool){\r\n        if (bids[seller][bidId].isLimited == true){\r\n            require(bids[seller][bidId].timeout > block.number);\r\n        }\r\n        require(msg.sender == bids[seller][bidId].oracle && bids[seller][bidId].status == dealStatus.Pending);\r\n        Bid storage bid = bids[seller][bidId];\r\n        bid.status = dealStatus.Rejected;\r\n        pendingWithdrawals[bid.oracle] = bid.fee;\r\n        pendingWithdrawals[bid.buyer] = bid.price-bid.fee;\r\n        withdraw(bid.buyer);\r\n        withdraw(bid.oracle);\r\n        bidRejected(seller, bidId);\r\n        return true;\r\n    }\r\n    \r\n    function withdraw(address person) private{\r\n        uint amount = pendingWithdrawals[person];\r\n        pendingWithdrawals[person] = 0;\r\n        person.transfer(amount);\r\n        withdrawDone(person, amount);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"oracle\",\"type\":\"address\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"timeout\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"isLimited\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getBidIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"sendAmount\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"oracle\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"timeout\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"rejectBid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"closeBid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getBidsNum\",\"outputs\":[{\"name\":\"bidsNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"amountRecieved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"bidClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"bidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"refundDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"person\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"bidRejected\",\"type\":\"event\"}]","ContractName":"dapEscrow","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://429faff93b42708c2359351363992631f12917d3f8db17caae79e8dcd92530bd"}]}