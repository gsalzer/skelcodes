{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract HasManager {\r\n  address public manager;\r\n\r\n  modifier onlyManager {\r\n    require(msg.sender == manager);\r\n    _;\r\n  }\r\n\r\n  function transferManager(address _newManager) public onlyManager() {\r\n    require(_newManager != address(0));\r\n    manager = _newManager;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  function Ownable() public { owner = msg.sender; }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {owner = newOwner;}\r\n}contract IERC20 {\r\n\r\n  function totalSupply() public constant returns (uint256);\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint256);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Crowdsale contracts interface\r\ncontract ICrowdsaleProcessor is Ownable, HasManager {\r\n  modifier whenCrowdsaleAlive() {\r\n    require(isActive());\r\n    _;\r\n  }\r\n\r\n  modifier whenCrowdsaleFailed() {\r\n    require(isFailed());\r\n    _;\r\n  }\r\n\r\n  modifier whenCrowdsaleSuccessful() {\r\n    require(isSuccessful());\r\n    _;\r\n  }\r\n\r\n  modifier hasntStopped() {\r\n    require(!stopped);\r\n    _;\r\n  }\r\n\r\n  modifier hasBeenStopped() {\r\n    require(stopped);\r\n    _;\r\n  }\r\n\r\n  modifier hasntStarted() {\r\n    require(!started);\r\n    _;\r\n  }\r\n\r\n  modifier hasBeenStarted() {\r\n    require(started);\r\n    _;\r\n  }\r\n\r\n  // Minimal acceptable hard cap\r\n  uint256 constant public MIN_HARD_CAP = 1 ether;\r\n\r\n  // Minimal acceptable duration of crowdsale\r\n  uint256 constant public MIN_CROWDSALE_TIME = 3 days;\r\n\r\n  // Maximal acceptable duration of crowdsale\r\n  uint256 constant public MAX_CROWDSALE_TIME = 50 days;\r\n\r\n  // Becomes true when timeframe is assigned\r\n  bool public started;\r\n\r\n  // Becomes true if cancelled by owner\r\n  bool public stopped;\r\n\r\n  // Total collected Ethereum: must be updated every time tokens has been sold\r\n  uint256 public totalCollected;\r\n\r\n  // Total amount of project's token sold: must be updated every time tokens has been sold\r\n  uint256 public totalSold;\r\n\r\n  // Crowdsale minimal goal, must be greater or equal to Forecasting min amount\r\n  uint256 public minimalGoal;\r\n\r\n  // Crowdsale hard cap, must be less or equal to Forecasting max amount\r\n  uint256 public hardCap;\r\n\r\n  // Crowdsale duration in seconds.\r\n  // Accepted range is MIN_CROWDSALE_TIME..MAX_CROWDSALE_TIME.\r\n  uint256 public duration;\r\n\r\n  // Start timestamp of crowdsale, absolute UTC time\r\n  uint256 public startTimestamp;\r\n\r\n  // End timestamp of crowdsale, absolute UTC time\r\n  uint256 public endTimestamp;\r\n\r\n  // Allows to transfer some ETH into the contract without selling tokens\r\n  function deposit() public payable {}\r\n\r\n  // Returns address of crowdsale token, must be ERC20 compilant\r\n  function getToken() public returns(address);\r\n\r\n  // Transfers ETH rewards amount (if ETH rewards is configured) to Forecasting contract\r\n  function mintETHRewards(address _contract, uint256 _amount) public onlyManager();\r\n\r\n  // Mints token Rewards to Forecasting contract\r\n  function mintTokenRewards(address _contract, uint256 _amount) public onlyManager();\r\n\r\n  // Releases tokens (transfers crowdsale token from mintable to transferrable state)\r\n  function releaseTokens() public onlyManager() hasntStopped() whenCrowdsaleSuccessful();\r\n\r\n  // Stops crowdsale. Called by CrowdsaleController, the latter is called by owner.\r\n  // Crowdsale may be stopped any time before it finishes.\r\n  function stop() public onlyManager() hasntStopped();\r\n\r\n  // Validates parameters and starts crowdsale\r\n  function start(uint256 _startTimestamp, uint256 _endTimestamp, address _fundingAddress)\r\n    public onlyManager() hasntStarted() hasntStopped();\r\n\r\n  // Is crowdsale failed (completed, but minimal goal wasn't reached)\r\n  function isFailed() public constant returns (bool);\r\n\r\n  // Is crowdsale active (i.e. the token can be sold)\r\n  function isActive() public constant returns (bool);\r\n\r\n  // Is crowdsale completed successfully\r\n  function isSuccessful() public constant returns (bool);\r\n}\r\n\r\n// Basic crowdsale implementation both for regualt and 3rdparty Crowdsale contracts\r\ncontract BasicCrowdsale is ICrowdsaleProcessor {\r\n  event CROWDSALE_START(uint256 startTimestamp, uint256 endTimestamp, address fundingAddress);\r\n\r\n  // Where to transfer collected ETH\r\n  address public fundingAddress;\r\n\r\n  // Ctor.\r\n  function BasicCrowdsale(\r\n    address _owner,\r\n    address _manager\r\n  )\r\n    public\r\n  {\r\n    owner = _owner;\r\n    manager = _manager;\r\n  }\r\n\r\n  // called by CrowdsaleController to transfer reward part of ETH\r\n  // collected by successful crowdsale to Forecasting contract.\r\n  // This call is made upon closing successful crowdfunding process\r\n  // iff agreed ETH reward part is not zero\r\n  function mintETHRewards(\r\n    address _contract,  // Forecasting contract\r\n    uint256 _amount     // agreed part of totalCollected which is intended for rewards\r\n  )\r\n    public\r\n    onlyManager() // manager is CrowdsaleController instance\r\n  {\r\n    require(_contract.call.value(_amount)());\r\n  }\r\n\r\n  // cancels crowdsale\r\n  function stop() public onlyManager() hasntStopped()  {\r\n    // we can stop only not started and not completed crowdsale\r\n    if (started) {\r\n      require(!isFailed());\r\n      require(!isSuccessful());\r\n    }\r\n    stopped = true;\r\n  }\r\n\r\n  // called by CrowdsaleController to setup start and end time of crowdfunding process\r\n  // as well as funding address (where to transfer ETH upon successful crowdsale)\r\n  function start(\r\n    uint256 _startTimestamp,\r\n    uint256 _endTimestamp,\r\n    address _fundingAddress\r\n  )\r\n    public\r\n    onlyManager()   // manager is CrowdsaleController instance\r\n    hasntStarted()  // not yet started\r\n    hasntStopped()  // crowdsale wasn't cancelled\r\n  {\r\n    require(_fundingAddress != address(0));\r\n\r\n    // start time must not be earlier than current time\r\n    require(_startTimestamp >= block.timestamp);\r\n\r\n    // range must be sane\r\n    require(_endTimestamp > _startTimestamp);\r\n    duration = _endTimestamp - _startTimestamp;\r\n\r\n    // duration must fit constraints\r\n    require(duration >= MIN_CROWDSALE_TIME && duration <= MAX_CROWDSALE_TIME);\r\n\r\n    startTimestamp = _startTimestamp;\r\n    endTimestamp = _endTimestamp;\r\n    fundingAddress = _fundingAddress;\r\n\r\n    // now crowdsale is considered started, even if the current time is before startTimestamp\r\n    started = true;\r\n\r\n    CROWDSALE_START(_startTimestamp, _endTimestamp, _fundingAddress);\r\n  }\r\n\r\n  // must return true if crowdsale is over, but it failed\r\n  function isFailed()\r\n    public\r\n    constant\r\n    returns(bool)\r\n  {\r\n    return (\r\n      // it was started\r\n      started &&\r\n\r\n      // crowdsale period has finished\r\n      block.timestamp >= endTimestamp &&\r\n\r\n      // but collected ETH is below the required minimum\r\n      totalCollected < minimalGoal\r\n    );\r\n  }\r\n\r\n  // must return true if crowdsale is active (i.e. the token can be bought)\r\n  function isActive()\r\n    public\r\n    constant\r\n    returns(bool)\r\n  {\r\n    return (\r\n      // it was started\r\n      started &&\r\n\r\n      // hard cap wasn't reached yet\r\n      totalCollected < hardCap &&\r\n\r\n      // and current time is within the crowdfunding period\r\n      block.timestamp >= startTimestamp &&\r\n      block.timestamp < endTimestamp\r\n    );\r\n  }\r\n\r\n  // must return true if crowdsale completed successfully\r\n  function isSuccessful()\r\n    public\r\n    constant\r\n    returns(bool)\r\n  {\r\n    return (\r\n      // either the hard cap is collected\r\n      totalCollected >= hardCap ||\r\n\r\n      // ...or the crowdfunding period is over, but the minimum has been reached\r\n      (block.timestamp >= endTimestamp && totalCollected >= minimalGoal)\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract SmartOToken is Ownable, IERC20 {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  /* Public variables of the token */\r\n  string public constant name = \"STO\";\r\n  string public constant symbol = \"STO\";\r\n  uint public constant decimals = 18;\r\n  uint256 public constant initialSupply = 12000000000 * 1 ether;\r\n  uint256 public totalSupply;\r\n\r\n  /* This creates an array with all balances */\r\n  mapping (address => uint256) public balances;\r\n  mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n  /* Events */\r\n  event Burn(address indexed burner, uint256 value);\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  /* Constuctor: Initializes contract with initial supply tokens to the creator of the contract */\r\n  function SmartOToken() public {\r\n      balances[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n      totalSupply = initialSupply;                        // Update total supply\r\n  }\r\n\r\n\r\n  /* Implementation of ERC20Interface */\r\n\r\n  function totalSupply() public constant returns (uint256) { return totalSupply; }\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256) { return balances[_owner]; }\r\n\r\n  /* Internal transfer, only can be called by this contract */\r\n  function _transfer(address _from, address _to, uint _amount) internal {\r\n      require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n      require (balances[_from] >= _amount);                // Check if the sender has enough\r\n      balances[_from] = balances[_from].sub(_amount);\r\n      balances[_to] = balances[_to].add(_amount);\r\n      Transfer(_from, _to, _amount);\r\n\r\n  }\r\n\r\n  function transfer(address _to, uint256 _amount) public returns (bool) {\r\n    _transfer(msg.sender, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require (_value <= allowed[_from][msg.sender]);     // Check allowance\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    _transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _amount) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _amount;\r\n    Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n// Custom crowdsale example\r\ncontract SmatrOCrowdsale is BasicCrowdsale {\r\n  // Crowdsale participants\r\n  mapping(address => uint256) participants;\r\n\r\n  // tokens per ETH fixed price\r\n  uint256 tokensPerEthPrice;\r\n\r\n  // Crowdsale token\r\n  SmartOToken crowdsaleToken;\r\n\r\n  // Ctor. In this example, minimalGoal, hardCap, and price are not changeable.\r\n  // In more complex cases, those parameters may be changed until start() is called.\r\n  function SmatrOCrowdsale(\r\n    uint256 _minimalGoal,\r\n    uint256 _hardCap,\r\n    uint256 _tokensPerEthPrice,\r\n    address _token\r\n  )\r\n    public\r\n    // simplest case where manager==owner. See onlyOwner() and onlyManager() modifiers\r\n    // before functions to figure out the cases in which those addresses should differ\r\n    BasicCrowdsale(msg.sender, msg.sender)\r\n  {\r\n    // just setup them once...\r\n    minimalGoal = _minimalGoal;\r\n    hardCap = _hardCap;\r\n    tokensPerEthPrice = _tokensPerEthPrice;\r\n    crowdsaleToken = SmartOToken(_token);\r\n  }\r\n\r\n// Here goes ICrowdsaleProcessor implementation\r\n\r\n  // returns address of crowdsale token. The token must be ERC20-compliant\r\n  function getToken()\r\n    public\r\n    returns(address)\r\n  {\r\n    return address(crowdsaleToken);\r\n  }\r\n\r\n  // called by CrowdsaleController to transfer reward part of\r\n  // tokens sold by successful crowdsale to Forecasting contract.\r\n  // This call is made upon closing successful crowdfunding process.\r\n  function mintTokenRewards(\r\n    address _contract,  // Forecasting contract\r\n    uint256 _amount     // agreed part of totalSold which is intended for rewards\r\n  )\r\n    public\r\n    onlyManager() // manager is CrowdsaleController instance\r\n  {\r\n    // crowdsale token is mintable in this example, tokens are created here\r\n    crowdsaleToken.transfer(_contract, _amount);\r\n  }\r\n\r\n  // transfers crowdsale token from mintable to transferrable state\r\n  function releaseTokens()\r\n    public\r\n    onlyManager()             // manager is CrowdsaleController instance\r\n    hasntStopped()            // crowdsale wasn't cancelled\r\n    whenCrowdsaleSuccessful() // crowdsale was successful\r\n  {\r\n    // do nothing\r\n  }\r\n\r\n// Here go crowdsale process itself and token manipulations\r\n\r\n  function setRate(uint256 _tokensPerEthPrice)\r\n    public\r\n    onlyOwner\r\n  {\r\n    tokensPerEthPrice = _tokensPerEthPrice;\r\n  }\r\n\r\n  // default function allows for ETH transfers to the contract\r\n  function () payable public {\r\n    require(msg.value >= 0.1 * 1 ether);\r\n\r\n    // and it sells the token\r\n    sellTokens(msg.sender, msg.value);\r\n  }\r\n\r\n  // sels the project's token to buyers\r\n  function sellTokens(address _recepient, uint256 _value)\r\n    internal\r\n    hasBeenStarted()     // crowdsale started\r\n    hasntStopped()       // wasn't cancelled by owner\r\n    whenCrowdsaleAlive() // in active state\r\n  {\r\n    uint256 newTotalCollected = totalCollected + _value;\r\n\r\n    if (hardCap < newTotalCollected) {\r\n      // don't sell anything above the hard cap\r\n\r\n      uint256 refund = newTotalCollected - hardCap;\r\n      uint256 diff = _value - refund;\r\n\r\n      // send the ETH part which exceeds the hard cap back to the buyer\r\n      _recepient.transfer(refund);\r\n      _value = diff;\r\n    }\r\n\r\n    // token amount as per price (fixed in this example)\r\n    uint256 tokensSold = _value * tokensPerEthPrice;\r\n\r\n    // create new tokens for this buyer\r\n    crowdsaleToken.transfer(_recepient, tokensSold);\r\n\r\n    // remember the buyer so he/she/it may refund its ETH if crowdsale failed\r\n    participants[_recepient] += _value;\r\n\r\n    // update total ETH collected\r\n    totalCollected += _value;\r\n\r\n    // update totel tokens sold\r\n    totalSold += tokensSold;\r\n  }\r\n\r\n  // project's owner withdraws ETH funds to the funding address upon successful crowdsale\r\n  function withdraw(\r\n    uint256 _amount // can be done partially\r\n  )\r\n    public\r\n    onlyOwner() // project's owner\r\n    hasntStopped()  // crowdsale wasn't cancelled\r\n    whenCrowdsaleSuccessful() // crowdsale completed successfully\r\n  {\r\n    require(_amount <= this.balance);\r\n    fundingAddress.transfer(_amount);\r\n  }\r\n\r\n  // backers refund their ETH if the crowdsale was cancelled or has failed\r\n  function refund()\r\n    public\r\n  {\r\n    // either cancelled or failed\r\n    require(stopped || isFailed());\r\n\r\n    uint256 amount = participants[msg.sender];\r\n\r\n    // prevent from doing it twice\r\n    require(amount > 0);\r\n    participants[msg.sender] = 0;\r\n\r\n    msg.sender.transfer(amount);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CROWDSALE_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintETHRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerEthPrice\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CROWDSALE_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"name\":\"_fundingAddress\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokenRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"transferManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSuccessful\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFailed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_minimalGoal\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"_tokensPerEthPrice\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"CROWDSALE_START\",\"type\":\"event\"}]","ContractName":"SmatrOCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000410d586a20a4c000000000000000000000000000000000000000000000000036e342998b8b020000000000000000000000000000000000000000000000000000000000000000065ce8000000000000000000000000a60f03b5cf456ac37d24fb6be16576c9fb91e358","Library":"","SwarmSource":"bzzr://9751632ec726eb0c0d1ea8158ccbf8cdf1a33d170164f81500415abc83d394fa"}]}