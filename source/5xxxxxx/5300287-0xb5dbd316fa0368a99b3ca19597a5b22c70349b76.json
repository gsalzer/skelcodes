{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------\r\n// SencTokenSale - SENC Token Sale Contract\r\n//\r\n// Copyright (c) 2018 InfoCorp Technologies Pte Ltd.\r\n// http://www.sentinel-chain.org/\r\n//\r\n// The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// Total tokens 500m\r\n// * Founding Team 10% - 5 tranches of 20% of 50,000,000 in **arrears** every 24 weeks from the activation date.\r\n// * Early Support 20% - 4 tranches of 25% of 100,000,000 in **advance** every 4 weeks from activation date.\r\n// * Pre-sale 20% - 4 tranches of 25% of 100,000,000 in **advance** every 4 weeks from activation date.\r\n//   * To be separated into ~ 28 presale addresses\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n \r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract OperatableBasic {\r\n    function setPrimaryOperator (address addr) public;\r\n    function setSecondaryOperator (address addr) public;\r\n    function isPrimaryOperator(address addr) public view returns (bool);\r\n    function isSecondaryOperator(address addr) public view returns (bool);\r\n}\r\n\r\ncontract Operatable is Ownable, OperatableBasic {\r\n    address public primaryOperator;\r\n    address public secondaryOperator;\r\n\r\n    modifier canOperate() {\r\n        require(msg.sender == primaryOperator || msg.sender == secondaryOperator || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Operatable() public {\r\n        primaryOperator = owner;\r\n        secondaryOperator = owner;\r\n    }\r\n\r\n    function setPrimaryOperator (address addr) public onlyOwner {\r\n        primaryOperator = addr;\r\n    }\r\n\r\n    function setSecondaryOperator (address addr) public onlyOwner {\r\n        secondaryOperator = addr;\r\n    }\r\n\r\n    function isPrimaryOperator(address addr) public view returns (bool) {\r\n        return (addr == primaryOperator);\r\n    }\r\n\r\n    function isSecondaryOperator(address addr) public view returns (bool) {\r\n        return (addr == secondaryOperator);\r\n    }\r\n}\r\n\r\ncontract Salvageable is Operatable {\r\n    // Salvage other tokens that are accidentally sent into this token\r\n    function emergencyERC20Drain(ERC20 oddToken, uint amount) public canOperate {\r\n        if (address(oddToken) == address(0)) {\r\n            owner.transfer(amount);\r\n            return;\r\n        }\r\n        oddToken.transfer(owner, amount);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract SencTokenConfig {\r\n    string public constant NAME = \"Sentinel Chain Token\";\r\n    string public constant SYMBOL = \"SENC\";\r\n    uint8 public constant DECIMALS = 18;\r\n    uint public constant DECIMALSFACTOR = 10 ** uint(DECIMALS);\r\n    uint public constant TOTALSUPPLY = 500000000 * DECIMALSFACTOR;\r\n}\r\n\r\ncontract SencToken is PausableToken, SencTokenConfig, Salvageable {\r\n    using SafeMath for uint;\r\n\r\n    string public name = NAME;\r\n    string public symbol = SYMBOL;\r\n    uint8 public decimals = DECIMALS;\r\n    bool public mintingFinished = false;\r\n\r\n    event Mint(address indexed to, uint amount);\r\n    event MintFinished();\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function SencToken() public {\r\n        paused = true;\r\n    }\r\n\r\n    function pause() onlyOwner public {\r\n        revert();\r\n    }\r\n\r\n    function unpause() onlyOwner public {\r\n        super.unpause();\r\n    }\r\n\r\n    function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {\r\n        require(totalSupply_.add(_amount) <= TOTALSUPPLY);\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n\r\n    // Airdrop tokens from bounty wallet to contributors as long as there are enough balance\r\n    function airdrop(address bountyWallet, address[] dests, uint[] values) public onlyOwner returns (uint) {\r\n        require(dests.length == values.length);\r\n        uint i = 0;\r\n        while (i < dests.length && balances[bountyWallet] >= values[i]) {\r\n            this.transferFrom(bountyWallet, dests[i], values[i]);\r\n            i += 1;\r\n        }\r\n        return(i);\r\n    }\r\n}\r\n\r\ncontract SencVesting is Salvageable {\r\n    using SafeMath for uint;\r\n\r\n    SencToken public token;\r\n\r\n    bool public started = false;\r\n    uint public startTimestamp;\r\n    uint public totalTokens;\r\n\r\n    struct Entry {\r\n        uint tokens;\r\n        bool advance;\r\n        uint periods;\r\n        uint periodLength;\r\n        uint withdrawn;\r\n    }\r\n    mapping (address => Entry) public entries;\r\n\r\n    event NewEntry(address indexed beneficiary, uint tokens, bool advance, uint periods, uint periodLength);\r\n    event Withdrawn(address indexed beneficiary, uint withdrawn);\r\n\r\n    function SencVesting(SencToken _token) public {\r\n        require(_token != address(0));\r\n        token = _token;\r\n    }\r\n\r\n    function addEntryIn4WeekPeriods(address beneficiary, uint tokens, bool advance, uint periods) public onlyOwner {\r\n        addEntry(beneficiary, tokens, advance, periods, 4 * 7 days);\r\n    }\r\n    function addEntryIn24WeekPeriods(address beneficiary, uint tokens, bool advance, uint periods) public onlyOwner {\r\n        addEntry(beneficiary, tokens, advance, periods, 24 * 7 days);\r\n    }\r\n    function addEntryInSecondsPeriods(address beneficiary, uint tokens, bool advance, uint periods, uint secondsPeriod) public onlyOwner {\r\n        addEntry(beneficiary, tokens, advance, periods, secondsPeriod);\r\n    }\r\n\r\n    function addEntry(address beneficiary, uint tokens, bool advance, uint periods, uint periodLength) internal {\r\n        require(!started);\r\n        require(beneficiary != address(0));\r\n        require(tokens > 0);\r\n        require(periods > 0);\r\n        require(entries[beneficiary].tokens == 0);\r\n        entries[beneficiary] = Entry({\r\n            tokens: tokens,\r\n            advance: advance,\r\n            periods: periods,\r\n            periodLength: periodLength,\r\n            withdrawn: 0\r\n        });\r\n        totalTokens = totalTokens.add(tokens);\r\n        NewEntry(beneficiary, tokens, advance, periods, periodLength);\r\n    }\r\n\r\n    function start() public onlyOwner {\r\n        require(!started);\r\n        require(totalTokens > 0);\r\n        require(totalTokens == token.balanceOf(this));\r\n        started = true;\r\n        startTimestamp = now;\r\n    }\r\n\r\n    function vested(address beneficiary, uint time) public view returns (uint) {\r\n        uint result = 0;\r\n        if (startTimestamp > 0 && time >= startTimestamp) {\r\n            Entry memory entry = entries[beneficiary];\r\n            if (entry.tokens > 0) {\r\n                uint periods = time.sub(startTimestamp).div(entry.periodLength);\r\n                if (entry.advance) {\r\n                    periods++;\r\n                }\r\n                if (periods >= entry.periods) {\r\n                    result = entry.tokens;\r\n                } else {\r\n                    result = entry.tokens.mul(periods).div(entry.periods);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function withdrawable(address beneficiary) public view returns (uint) {\r\n        uint result = 0;\r\n        Entry memory entry = entries[beneficiary];\r\n        if (entry.tokens > 0) {\r\n            uint _vested = vested(beneficiary, now);\r\n            result = _vested.sub(entry.withdrawn);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function withdraw() public {\r\n        withdrawInternal(msg.sender);\r\n    }\r\n\r\n    function withdrawOnBehalfOf(address beneficiary) public onlyOwner {\r\n        withdrawInternal(beneficiary);\r\n    }\r\n\r\n    function withdrawInternal(address beneficiary) internal {\r\n        Entry storage entry = entries[beneficiary];\r\n        require(entry.tokens > 0);\r\n        uint _vested = vested(beneficiary, now);\r\n        uint _withdrawn = entry.withdrawn;\r\n        require(_vested > _withdrawn);\r\n        uint _withdrawable = _vested.sub(_withdrawn);\r\n        entry.withdrawn = _vested;\r\n        require(token.transfer(beneficiary, _withdrawable));\r\n        Withdrawn(beneficiary, _withdrawable);\r\n    }\r\n\r\n    function tokens(address beneficiary) public view returns (uint) {\r\n        return entries[beneficiary].tokens;\r\n    }\r\n\r\n    function withdrawn(address beneficiary) public view returns (uint) {\r\n        return entries[beneficiary].withdrawn;\r\n    }\r\n\r\n    function emergencyERC20Drain(ERC20 oddToken, uint amount) public canOperate {\r\n        // Cannot withdraw SencToken if vesting started\r\n        require(!started || address(oddToken) != address(token));\r\n        super.emergencyERC20Drain(oddToken,amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawOnBehalfOf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"vested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isSecondaryOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isPrimaryOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setSecondaryOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"advance\",\"type\":\"bool\"},{\"name\":\"periods\",\"type\":\"uint256\"},{\"name\":\"secondsPeriod\",\"type\":\"uint256\"}],\"name\":\"addEntryInSecondsPeriods\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"advance\",\"type\":\"bool\"},{\"name\":\"periods\",\"type\":\"uint256\"}],\"name\":\"addEntryIn24WeekPeriods\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setPrimaryOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"advance\",\"type\":\"bool\"},{\"name\":\"periods\",\"type\":\"uint256\"}],\"name\":\"addEntryIn4WeekPeriods\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primaryOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"entries\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"advance\",\"type\":\"bool\"},{\"name\":\"periods\",\"type\":\"uint256\"},{\"name\":\"periodLength\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondaryOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"advance\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"periods\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"periodLength\",\"type\":\"uint256\"}],\"name\":\"NewEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SencVesting","CompilerVersion":"v0.4.22-nightly.2018.3.16+commit.2b2527f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a13f0743951b4f6e3e3aa039f682e17279f52bc3","Library":"","SwarmSource":"bzzr://8eeb89776e6a4ac241adfb18e7d84925be8ea654d7649a644d7e4b387e04ed6c"}]}