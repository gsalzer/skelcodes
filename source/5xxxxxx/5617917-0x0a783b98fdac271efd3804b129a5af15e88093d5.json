{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nThe goico_kasko2go Contract is free software: you can redistribute it and/or\r\nmodify it under the terms of the GNU lesser General Public License as published\r\nby the Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThe goico_kasko2go Contract is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\nGNU lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU lesser General Public License\r\nalong with the goico_kasko2go Contract. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n@author Ilya Svirin <i.svirin@prover.io>\r\n*/\r\n\r\npragma solidity ^0.4.19;\r\n\r\ncontract owned {\r\n\r\n    address public owner;\r\n    address public candidate;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _owner) onlyOwner public {\r\n        candidate = _owner;\r\n    }\r\n\r\n    function confirmOwner() public {\r\n        require(candidate == msg.sender);\r\n        owner = candidate;\r\n        delete candidate;\r\n    }\r\n}\r\n\r\ncontract BaseERC20 {\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public;\r\n}\r\n\r\ncontract Token is owned {\r\n\r\n    string  public standard = 'Token 0.1';\r\n    string  public name     = '_K2G';\r\n    string  public symbol   = '_K2G';\r\n    uint8   public decimals = 8;\r\n\r\n    uint                      public totalSupply;\r\n    mapping (address => uint) public balanceOf;\r\n\r\n    uint                      public numberOfInvestors;\r\n    mapping (address => bool) public investors;\r\n    mapping (address => uint) public depositedCPT;\r\n    mapping (address => uint) public depositedWei;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    enum State {\r\n        NotStarted,\r\n        Started,\r\n        Finished\r\n    }\r\n\r\n    address public backend;\r\n    address public cryptaurToken = 0x88d50B466BE55222019D71F9E8fAe17f5f45FCA1;\r\n    uint    public tokenPriceInWei;\r\n    State   public state;\r\n\r\n    event Mint(address indexed minter, uint tokens, bytes32 originalTxHash);\r\n\r\n    constructor() public owned() {}\r\n\r\n    function startCrowdsale() public onlyOwner {\r\n        require(state==State.NotStarted);\r\n        state=State.Started;\r\n    }\r\n\r\n    function finishCrowdsale() public onlyOwner {\r\n        require(state==State.Started);\r\n        state=State.Finished;\r\n    }\r\n\r\n    function changeBackend(address _backend) public onlyOwner {\r\n        backend = _backend;\r\n    }\r\n\r\n    function setTokenPriceInWei(uint _tokenPriceInWei) public {\r\n        require(msg.sender == owner || msg.sender == backend);\r\n        tokenPriceInWei = _tokenPriceInWei;\r\n    }\r\n\r\n    function () payable public {\r\n        require(state==State.Started);\r\n        uint tokens = msg.value / tokenPriceInWei * 100000000;\r\n        require(balanceOf[msg.sender] + tokens > balanceOf[msg.sender]); // overflow\r\n        require(tokens > 0);\r\n        depositedWei[msg.sender]+=msg.value;\r\n        balanceOf[msg.sender] += tokens;\r\n        if (!investors[msg.sender]) {\r\n            investors[msg.sender] = true;\r\n            ++numberOfInvestors;\r\n        }\r\n        emit Transfer(this, msg.sender, tokens);\r\n        totalSupply += tokens;\r\n    }\r\n\r\n    function depositCPT(address _who, uint _valueCPT, bytes32 _originalTxHash) public {\r\n        require(msg.sender == backend || msg.sender == owner);\r\n        require(state==State.Started);\r\n        // decimals in K2G and PROOF are the same and equal 8\r\n        uint tokens = (_valueCPT * 10000) / 238894; // 1 K2G = 23,8894 CPT\r\n        depositedCPT[_who]+=_valueCPT;\r\n        require(balanceOf[_who] + tokens > balanceOf[_who]); // overflow\r\n        require(tokens > 0);\r\n        balanceOf[_who] += tokens;\r\n        totalSupply += tokens;\r\n        if (!investors[_who]) {\r\n            investors[_who] = true;\r\n            ++numberOfInvestors;\r\n        }\r\n        emit Transfer(this, _who, tokens);\r\n        emit Mint(_who, tokens, _originalTxHash);\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        require(msg.sender.call.gas(3000000).value(address(this).balance)());\r\n        uint balance = BaseERC20(cryptaurToken).balanceOf(this);\r\n        BaseERC20(cryptaurToken).transfer(msg.sender, balance);\r\n    }\r\n\r\n    // untistupids function\r\n    function transferAnyTokens(address _erc20, address _receiver, uint _amount) public onlyOwner {\r\n        BaseERC20(_erc20).transfer(_receiver, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backend\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_erc20\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptaurToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_valueCPT\",\"type\":\"uint256\"},{\"name\":\"_originalTxHash\",\"type\":\"bytes32\"}],\"name\":\"depositCPT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPriceInWei\",\"type\":\"uint256\"}],\"name\":\"setTokenPriceInWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_backend\",\"type\":\"address\"}],\"name\":\"changeBackend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedCPT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"originalTxHash\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9b772ecf204a0e50e5b6a78c883edbd561e51edc18ee6e14933d53c009d5fc47"}]}