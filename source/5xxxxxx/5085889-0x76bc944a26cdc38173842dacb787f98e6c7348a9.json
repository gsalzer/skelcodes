{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\nContract interface:\r\n1. Standars ERC20 methods: balanceOf, totalSupply, transfer, transferFrom, approve, allowance\r\n\r\n*/\r\n\r\npragma solidity ^0.4.11;\r\n\r\n/* \r\ncontract Gold {\r\n  struct FakeBlock {\r\n    uint timestamp;\r\n  }\r\n\r\n  FakeBlock block;\r\n\r\n  uint now = 0;\r\n\r\n  function setBlockTime(uint val) {\r\n    now = val;\r\n    block.timestamp = val;\r\n  }\r\n\r\n  function addBlockTime(uint val) {\r\n    now += val;\r\n    block.timestamp += val;\r\n  }\r\n}\r\n*/\r\n\r\n//contract Gold is Gold_ {\r\ncontract Gold {\r\n    // totalSupply is zero by default, owner can issue and destroy coins any amount any time\r\n    uint constant totalSupplyDefault = 0;\r\n\r\n    string public constant symbol = \"Gold\";\r\n    string public constant name = \"AssetBase Gold\";\r\n    uint8 public constant decimals = 7;\r\n    // minimum fee is 0.00001\r\n    uint32 public constant minFee = 1;\r\n    uint32 public constant minTransfer = 10;\r\n\r\n    uint public totalSupply = 0;\r\n\r\n    // transfer fee default = 0.17% (0.0017)\r\n    uint32 public transferFeeNum = 17;\r\n    uint32 public transferFeeDenum = 10000;\r\n\r\n    // demurring fee default = 0,7 % per year\r\n    // 0.007 per year = 0.007 / 365 per day = 0.000019178 per day\r\n    // 0.000019178 / (24*60) per minute = 0.000000013 per minute\r\n    uint32 public demurringFeeNum = 13;\r\n    uint32 public demurringFeeDenum = 1000000000;\r\n\r\n    \r\n    // Owner of this contract\r\n    address public owner;\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n    address public demurringFeeOwner;\r\n    address public transferFeeOwner;\r\n \r\n    // Balances for each account\r\n    mapping(address => uint) balances;\r\n\r\n    // demurring fee deposit payed date for each account\r\n    mapping(address => uint64) timestamps;\r\n \r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint)) allowed;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from , address indexed to , uint256 value);\r\n    event DemurringFee(address indexed to , uint256 value);\r\n    event TransferFee(address indexed to , uint256 value);\r\n\r\n    // if supply provided is 0, then default assigned\r\n    function Gold(uint supply) {\r\n        if (supply > 0) {\r\n            totalSupply = supply;\r\n        } else {\r\n            totalSupply = totalSupplyDefault;\r\n        }\r\n        owner = msg.sender;\r\n        demurringFeeOwner = owner;\r\n        transferFeeOwner = owner;\r\n        balances[this] = totalSupply;\r\n    }\r\n\r\n    function changeDemurringFeeOwner(address addr) onlyOwner {\r\n        demurringFeeOwner = addr;\r\n    }\r\n    function changeTransferFeeOwner(address addr) onlyOwner {\r\n        transferFeeOwner = addr;\r\n    }\r\n \r\n    function balanceOf(address addr) constant returns (uint) {\r\n        return balances[addr];\r\n    }\r\n\r\n    // charge demurring fee for previuos period\r\n    // fee is not applied to owners\r\n    function chargeDemurringFee(address addr) internal {\r\n        if (addr != owner && addr != transferFeeOwner && addr != demurringFeeOwner && balances[addr] > 0 && now > timestamps[addr] + 60) {\r\n            var mins = (now - timestamps[addr]) / 60;\r\n            var fee = balances[addr] * mins * demurringFeeNum / demurringFeeDenum;\r\n            if (fee < minFee) {\r\n                fee = minFee;\r\n            } else if (fee > balances[addr]) {\r\n                fee = balances[addr];\r\n            }\r\n\r\n            balances[addr] -= fee;\r\n            balances[demurringFeeOwner] += fee;\r\n            Transfer(addr, demurringFeeOwner, fee);\r\n            DemurringFee(addr, fee);\r\n\r\n            timestamps[addr] = uint64(now);\r\n        }\r\n    }\r\n\r\n    // fee is not applied to owners\r\n    function chargeTransferFee(address addr, uint amount) internal returns (uint) {\r\n        if (addr != owner && addr != transferFeeOwner && addr != demurringFeeOwner && balances[addr] > 0) {\r\n            var fee = amount * transferFeeNum / transferFeeDenum;\r\n            if (fee < minFee) {\r\n                fee = minFee;\r\n            } else if (fee > balances[addr]) {\r\n                fee = balances[addr];\r\n            }\r\n            amount = amount - fee;\r\n\r\n            balances[addr] -= fee;\r\n            balances[transferFeeOwner] += fee;\r\n            Transfer(addr, transferFeeOwner, fee);\r\n            TransferFee(addr, fee);\r\n        }\r\n        return amount;\r\n    }\r\n \r\n    function transfer(address to, uint amount) returns (bool) {\r\n        if (amount >= minTransfer\r\n            && balances[msg.sender] >= amount\r\n            && balances[to] + amount > balances[to]\r\n            ) {\r\n                chargeDemurringFee(msg.sender);\r\n\r\n                if (balances[msg.sender] >= amount) {\r\n                    amount = chargeTransferFee(msg.sender, amount);\r\n\r\n                    // charge recepient with demurring fee\r\n                    if (balances[to] > 0) {\r\n                        chargeDemurringFee(to);\r\n                    } else {\r\n                        timestamps[to] = uint64(now);\r\n                    }\r\n\r\n                    balances[msg.sender] -= amount;\r\n                    balances[to] += amount;\r\n                    Transfer(msg.sender, to, amount);\r\n                }\r\n                return true;\r\n          } else {\r\n              return false;\r\n          }\r\n    }\r\n \r\n    function transferFrom(address from, address to, uint amount) returns (bool) {\r\n        if ( amount >= minTransfer\r\n            && allowed[from][msg.sender] >= amount\r\n            && balances[from] >= amount\r\n            && balances[to] + amount > balances[to]\r\n            ) {\r\n                allowed[from][msg.sender] -= amount;\r\n\r\n                chargeDemurringFee(msg.sender);\r\n\r\n                if (balances[msg.sender] >= amount) {\r\n                    amount = chargeTransferFee(msg.sender, amount);\r\n\r\n                    // charge recepient with demurring fee\r\n                    if (balances[to] > 0) {\r\n                        chargeDemurringFee(to);\r\n                    } else {\r\n                        timestamps[to] = uint64(now);\r\n                    }\r\n\r\n                    balances[msg.sender] -= amount;\r\n                    balances[to] += amount;\r\n                    Transfer(msg.sender, to, amount);\r\n                }\r\n                return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    function approve(address spender, uint amount) returns (bool) {\r\n        allowed[msg.sender][spender] = amount;\r\n        Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address addr, address spender) constant returns (uint) {\r\n        return allowed[addr][spender];\r\n    }\r\n\r\n    function setTransferFee(uint32 numinator, uint32 denuminator) onlyOwner {\r\n        require(denuminator > 0 && numinator < denuminator);\r\n        transferFeeNum = numinator;\r\n        transferFeeDenum = denuminator;\r\n    }\r\n\r\n    function setDemurringFee(uint32 numinator, uint32 denuminator) onlyOwner {\r\n        require(denuminator > 0 && numinator < denuminator);\r\n        demurringFeeNum = numinator;\r\n        demurringFeeDenum = denuminator;\r\n    }\r\n\r\n    function sell(address to, uint amount) onlyOwner {\r\n        require(amount > minTransfer && balances[this] >= amount);\r\n\r\n        // charge recepient with demurring fee\r\n        if (balances[to] > 0) {\r\n            chargeDemurringFee(to);\r\n        } else {\r\n            timestamps[to] = uint64(now);\r\n        }\r\n        balances[this] -= amount;\r\n        balances[to] += amount;\r\n        Transfer(this, to, amount);\r\n    }\r\n\r\n    // issue new coins\r\n    function issue(uint amount) onlyOwner {\r\n         if (totalSupply + amount > totalSupply) {\r\n             totalSupply += amount;\r\n             balances[this] += amount;\r\n         }\r\n    }\r\n\r\n    // destroy existing coins\r\n    function destroy(uint amount) onlyOwner {\r\n          require(amount>0 && balances[this] >= amount);\r\n          balances[this] -= amount;\r\n          totalSupply -= amount;\r\n    }\r\n\r\n    // kill contract only if all wallets are empty\r\n    function kill() onlyOwner {\r\n        require (totalSupply == 0);\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    // payments ar reverted back\r\n    function () payable {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"demurringFeeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFeeNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFeeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"demurringFeeDenum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeTransferFeeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numinator\",\"type\":\"uint32\"},{\"name\":\"denuminator\",\"type\":\"uint32\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"demurringFeeNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numinator\",\"type\":\"uint32\"},{\"name\":\"denuminator\",\"type\":\"uint32\"}],\"name\":\"setDemurringFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeDemurringFeeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFeeDenum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DemurringFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferFee\",\"type\":\"event\"}]","ContractName":"Gold","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000989680","Library":"","SwarmSource":"bzzr://bd5691fbc3fd20ac648133711e0a42c9ed349e653509ffcc3111f367a9c46bb0"}]}