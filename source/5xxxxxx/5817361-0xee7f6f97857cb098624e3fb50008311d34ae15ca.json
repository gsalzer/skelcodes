{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract Factory{\r\n    \r\n    //Adress of creator\r\n    address private creator;\r\n\r\n    // Addresses of owners\r\n    address private owner1 = 0x6CAa636cFFbCbb2043A3322c04dE3f26b1fa6555;\r\n    address private owner2 = 0xbc2d90C2D3A87ba3fC8B23aA951A9936A6D68121;\r\n    address private owner3 = 0x680d821fFE703762E7755c52C2a5E8556519EEDc;\r\n  \r\n    //List of deployed Forwarders\r\n    address[] public deployed_forwarders;\r\n    \r\n    //Get number of forwarders created\r\n    uint public forwarders_count = 0;\r\n    \r\n    //Last forwarder create\r\n    address public last_forwarder_created;\r\n  \r\n    //Only owners can generate a forwarder\r\n    modifier onlyOwnerOrCreator {\r\n      require(msg.sender == owner1 || msg.sender == owner2 || msg.sender == owner3 || msg.sender == creator);\r\n      _;\r\n    }\r\n  \r\n    //Constructor\r\n    constructor() public {\r\n        creator = msg.sender;\r\n    }\r\n  \r\n    //Create new Forwarder\r\n    function create_forwarder() public onlyOwnerOrCreator {\r\n        address new_forwarder = new Forwarder();\r\n        deployed_forwarders.push(new_forwarder);\r\n        last_forwarder_created = new_forwarder;\r\n        forwarders_count += 1;\r\n    }\r\n    \r\n    //Get deployed forwarders\r\n    function get_deployed_forwarders() public view returns (address[]) {\r\n        return deployed_forwarders;\r\n    }\r\n\r\n}\r\n\r\ncontract Forwarder {\r\n    \r\n  // Address to which any funds sent to this contract will be forwarded\r\n  address private parentAddress = 0x7aeCf441966CA8486F4cBAa62fa9eF2D557f9ba7;\r\n  \r\n  // Addresses of people who can flush ethers and tokenContractAddress\r\n  address private owner1 = 0x6CAa636cFFbCbb2043A3322c04dE3f26b1fa6555;\r\n  address private owner2 = 0xbc2d90C2D3A87ba3fC8B23aA951A9936A6D68121;\r\n  address private owner3 = 0x680d821fFE703762E7755c52C2a5E8556519EEDc;\r\n  \r\n  event ForwarderDeposited(address from, uint value, bytes data);\r\n\r\n  /**\r\n   * Create the contract.\r\n   */\r\n  constructor() public {\r\n  }\r\n\r\n  /**\r\n   * Modifier that will execute internal code block only if the sender is among owners.\r\n   */\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner1 || msg.sender == owner2 || msg.sender == owner3);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Default function; Gets called when Ether is deposited, and forwards it to the parent address\r\n   */\r\n  function() public payable {\r\n    // throws on failure\r\n    parentAddress.transfer(msg.value);\r\n    // Fire off the deposited event if we can forward it\r\n    emit ForwarderDeposited(msg.sender, msg.value, msg.data);\r\n  }\r\n\r\n\r\n  /**\r\n   * Execute a token transfer of the full balance from the forwarder token to the parent address\r\n   * @param tokenContractAddress the address of the erc20 token contract\r\n   */\r\n  function flushTokens(address tokenContractAddress) public onlyOwner {\r\n    ERC20Interface instance = ERC20Interface(tokenContractAddress);\r\n    address forwarderAddress = address(this);\r\n    uint forwarderBalance = instance.balanceOf(forwarderAddress);\r\n    if (forwarderBalance == 0) {\r\n      return;\r\n    }\r\n    if (!instance.transfer(parentAddress, forwarderBalance)) {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * It is possible that funds were sent to this address before the contract was deployed.\r\n   * We can flush those funds to the parent address.\r\n   */\r\n  function flush() public onlyOwner {\r\n    // throws on failure\r\n    uint my_balance = address(this).balance;\r\n    if (my_balance == 0){\r\n        return;\r\n    } else {\r\n        parentAddress.transfer(address(this).balance);\r\n    }\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n  // Send _value amount of tokens to address _to\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n  // Get the account balance of another account with address _owner\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"create_forwarder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_forwarder_created\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forwarders_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_deployed_forwarders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployed_forwarders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Factory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9f732dfd79ea5c2a03b42126e4ec64accf58382e8dada7fcd4733734b248fb45"}]}