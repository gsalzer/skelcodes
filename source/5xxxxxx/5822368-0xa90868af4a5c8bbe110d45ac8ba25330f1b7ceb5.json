{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract AgrolotToken is StandardToken {\r\n    \r\n  string public constant name = \"Agrolot Token\";\r\n   \r\n  string public constant symbol = \"AGLT\";\r\n    \r\n  uint32 public constant decimals = 18;\r\n\r\n  uint256 public INITIAL_SUPPLY = 100000000 * 1 ether;\r\n\r\n  function AgrolotToken() {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n    \r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n    \r\n  using SafeMath for uint;\r\n    \r\n  address multisig;\r\n\r\n  uint restrictedTeam;\r\n  \r\n  uint restrictedVIA;\r\n  \r\n  uint restrictedAirdrop;\r\n\r\n  address restricted_address;\r\n  \r\n  address airdropAddress;\r\n\r\n  AgrolotToken public token = new AgrolotToken();\r\n\r\n  uint public minPaymentWei = 0.1 ether;\r\n    \r\n  uint public maxCapTokenPresale;\r\n  \r\n  uint public maxCapTokenTotal;\r\n  \r\n  uint public totalTokensSold;\r\n  \r\n  uint public totalWeiReceived;\r\n  \r\n  uint startPresale;\r\n    \r\n  uint periodPresale;\r\n  \r\n  uint startSale;\r\n    \r\n  uint periodSale;\r\n\r\n  uint rate;\r\n\r\n  function Crowdsale() {\r\n    multisig = 0x7c8Ef6E9437E8B1554dCd22a00AB1B3a709998d9;\r\n    restricted_address = 0x3a5d3146Cd9f1157F2d36488B99429500A257b13;\r\n    airdropAddress = 0xe86AC25B3d2fe81951A314BA1042Fc17A096F3a2;\r\n    restrictedTeam = 20000000 * 1 ether;\r\n    restrictedVIA = 45250000 * 1 ether;\r\n    restrictedAirdrop = 1250000 * 1 ether;\r\n    rate = 530 * 1 ether;\r\n    maxCapTokenPresale = 3000000 * 1 ether;\r\n    maxCapTokenTotal = 23000000 * 1 ether;\r\n    \r\n    startPresale = 1529496000;\r\n    periodPresale = 10;\r\n    \r\n    startSale = 1530446400;\r\n    periodSale = 90;\r\n    \r\n    token.transfer(airdropAddress, restrictedAirdrop);\r\n    \r\n    //privatesale \r\n    token.transfer(0xA44ceA410e7D1100e05bC8CDe6C63cee947A28f7, 1500000 * 1 ether);\r\n    token.transfer(0x4d044d2921e25Abda8D279d21FED919fB150F8C8, 600000 * 1 ether);\r\n    token.transfer(0x076A7E0A69Da48ac928508c1ac0E9cDCeDCeE903, 350000 * 1 ether);\r\n    token.transfer(0x60a7536b58ba2BEBB25165c09E39365c9d7Fb49A, 800000 * 1 ether);\r\n    token.transfer(0x41B05379ba55954D9e1Db10fd464cEc6cA8b085D, 750000 * 1 ether);\r\n\r\n  }\r\n\r\n  modifier saleIsOn() {\r\n    require ((now > startPresale && now < startPresale + (periodPresale * 1 days)) || (now > startSale && now < startSale + (periodSale * 1 days)));\r\n    \r\n    _;\r\n  }\r\n\r\n  function createTokens() saleIsOn payable {\r\n    require(msg.value >= minPaymentWei);\r\n    uint tokens = rate.mul(msg.value).div(1 ether);\r\n    uint bonusTokens = 0;\r\n    if (now <= startPresale + (periodPresale * 1 days)) {\r\n        require(totalTokensSold.add(tokens) <= maxCapTokenPresale);\r\n        bonusTokens = tokens.div(100).mul(50);\r\n    } else {\r\n        require(totalTokensSold.add(tokens) <= maxCapTokenTotal);\r\n        if(now < startSale + (15 * 1 days)) {\r\n            bonusTokens = tokens.div(100).mul(25);\r\n        } else if(now < startSale + (25 * 1 days)) {\r\n            bonusTokens = tokens.div(100).mul(15);\r\n        } else if(now < startSale + (35 * 1 days)) {\r\n            bonusTokens = tokens.div(100).mul(7);\r\n        }\r\n    }\r\n\r\n    totalTokensSold = totalTokensSold.add(tokens);\r\n    totalWeiReceived = totalWeiReceived.add(msg.value);\r\n    uint tokensWithBonus = tokens.add(bonusTokens);\r\n    multisig.transfer(msg.value);\r\n    token.transfer(msg.sender, tokensWithBonus);\r\n  }\r\n\r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n  \r\n \r\n  function getVIATokens() public {\r\n    require(now > startSale + (91 * 1 days));\r\n    address contractAddress = address(this);\r\n    uint allTokens = token.balanceOf(contractAddress).sub(restrictedTeam);\r\n    token.transfer(restricted_address, allTokens);\r\n  }\r\n  \r\n  function getTeamTokens() public {\r\n    require(now > startSale + (180 * 1 days));\r\n    \r\n    token.transfer(restricted_address, restrictedTeam);\r\n  }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"getVIATokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPaymentWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCapTokenPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCapTokenTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://73c2c927caf23d91f1e9422da4a0552dc8555ef96fc787eea77adf503b501823"}]}