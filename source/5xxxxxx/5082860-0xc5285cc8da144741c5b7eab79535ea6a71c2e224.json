{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract Dignity {\r\n\r\n   string public standard = 'Token 0.1';\r\n   string public name;\r\n   string public symbol;\r\n   uint8 public decimals;\r\n   uint256 public totalSupply;\r\n\r\n    //Admins declaration\r\n    address private admin1;\r\n    address private admin2;\r\n    address private admin3;\r\n\r\n    //User struct\r\n    struct User {\r\n        bool frozen;\r\n        bool banned;\r\n        uint256 balance;\r\n        bool isset;\r\n    }\r\n    //Mappings\r\n    mapping(address => User) private users;\r\n\r\n    address[] private balancesKeys;\r\n\r\n    //Events\r\n    event FrozenFunds(address indexed target, bool indexed frozen);\r\n    event BanAccount(address indexed account, bool indexed banned);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Minted(address indexed to, uint256 indexed value);\r\n\r\n    //Main contract function\r\n    function tan (uint256 initialSupply, string tokenName,string tokenSymbol) public {\r\n        //setting up admins\r\n        admin1 = 0xA0dE1197643Bc8177CC8897d939E94BD85871f37;\r\n        admin2 = 0x6D2442881345B474cfb205D9B8701419B56bb6D5;\r\n        admin3 = 0x6A8E0CDCc06706E267C8a0DE86f8fcaBA6cB1a70;\r\n\r\n        //user creation\r\n        users[0xA0dE1197643Bc8177CC8897d939E94BD85871f37] = User(false, false, initialSupply, true);\r\n\r\n        if(!hasKey(0xA0dE1197643Bc8177CC8897d939E94BD85871f37)) {\r\n            balancesKeys.push(msg.sender);\r\n        }\r\n        totalSupply = initialSupply;\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        decimals = 8;                            // Amount of decimals for display purposes\r\n    }\r\n\r\n    //Modifier to limit access to admin functions\r\n    modifier onlyAdmin {\r\n        if(!(msg.sender == admin1 || msg.sender == admin2 || msg.sender == admin3)) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier unbanned {\r\n        if(users[msg.sender].banned) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier unfrozen {\r\n        if(users[msg.sender].frozen) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function setSecondAdmin(address newAdmin) onlyAdmin public {\r\n        admin2 = newAdmin;\r\n    }\r\n\r\n    function setThirdAdmin(address newAdmin) onlyAdmin public {\r\n        admin3 = newAdmin;\r\n    }\r\n\r\n    //Admins getters\r\n    function getFirstAdmin() onlyAdmin public constant returns (address) {\r\n        return admin1;\r\n    }\r\n\r\n    function getSecondAdmin() onlyAdmin public constant returns (address) {\r\n        return admin2;\r\n    }\r\n\r\n    function getThirdAdmin() onlyAdmin public constant returns (address) {\r\n        return admin3;\r\n    }\r\n\r\n    //Administrative actions\r\n    function mintToken(uint256 mintedAmount) onlyAdmin public {\r\n        if(!users[msg.sender].isset){\r\n            users[msg.sender] = User(false, false, 0, true);\r\n        }\r\n        if(!hasKey(msg.sender)){\r\n            balancesKeys.push(msg.sender);\r\n        }\r\n        users[msg.sender].balance += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        Minted(msg.sender, mintedAmount);\r\n    }\r\n\r\n    function userBanning (address banUser) onlyAdmin public {\r\n        if(!users[banUser].isset){\r\n            users[banUser] = User(false, false, 0, true);\r\n        }\r\n        users[banUser].banned = true;\r\n        var userBalance = users[banUser].balance;\r\n        \r\n        users[getFirstAdmin()].balance += userBalance;\r\n        users[banUser].balance = 0;\r\n        \r\n        BanAccount(banUser, true);\r\n    }\r\n    \r\n    function destroyCoins (address addressToDestroy, uint256 amount) onlyAdmin public {\r\n        users[addressToDestroy].balance -= amount;    \r\n        totalSupply -= amount;\r\n    }\r\n\r\n    function tokenFreezing (address freezAccount, bool isFrozen) onlyAdmin public{\r\n        if(!users[freezAccount].isset){\r\n            users[freezAccount] = User(false, false, 0, true);\r\n        }\r\n        users[freezAccount].frozen = isFrozen;\r\n        FrozenFunds(freezAccount, isFrozen);\r\n    }\r\n\r\n    function balanceOf(address target) public returns (uint256){\r\n        if(!users[target].isset){\r\n            users[target] = User(false, false, 0, true);\r\n        }\r\n        return users[target].balance;\r\n    }\r\n\r\n    function hasKey(address key) private constant returns (bool){\r\n        for(uint256 i=0;i<balancesKeys.length;i++){\r\n            address value = balancesKeys[i];\r\n            if(value == key){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //User actions\r\n    function transfer(address _to, uint256 _value) unbanned unfrozen public returns (bool success)  {\r\n        if(!users[msg.sender].isset){\r\n            users[msg.sender] = User(false, false, 0, true);\r\n        }\r\n        if(!users[_to].isset){\r\n            users[_to] = User(false, false, 0, true);\r\n        }\r\n        if(!hasKey(msg.sender)){\r\n            balancesKeys.push(msg.sender);\r\n        }\r\n        if(!hasKey(_to)){\r\n            balancesKeys.push(_to);\r\n        }\r\n        if(users[msg.sender].balance < _value || users[_to].balance + _value < users[_to].balance){\r\n            revert();\r\n        }\r\n\r\n        users[msg.sender].balance -= _value;\r\n        users[_to].balance += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function hasNextKey(uint256 balancesIndex) onlyAdmin public constant returns (bool) {\r\n        return balancesIndex < balancesKeys.length;\r\n    }\r\n\r\n    function nextKey(uint256 balancesIndex) onlyAdmin public constant returns (address) {\r\n        if(!hasNextKey(balancesIndex)){\r\n            revert();\r\n        }\r\n        return balancesKeys[balancesIndex];\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"banUser\",\"type\":\"address\"}],\"name\":\"userBanning\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"tan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"balancesIndex\",\"type\":\"uint256\"}],\"name\":\"hasNextKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setThirdAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"balancesIndex\",\"type\":\"uint256\"}],\"name\":\"nextKey\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFirstAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setSecondAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSecondAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getThirdAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"freezAccount\",\"type\":\"address\"},{\"name\":\"isFrozen\",\"type\":\"bool\"}],\"name\":\"tokenFreezing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressToDestroy\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroyCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"banned\",\"type\":\"bool\"}],\"name\":\"BanAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"}]","ContractName":"Dignity","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://100f030a31561c8fe6d40cc619b05bed33253bafd30664a1707dd26d2ea22f33"}]}