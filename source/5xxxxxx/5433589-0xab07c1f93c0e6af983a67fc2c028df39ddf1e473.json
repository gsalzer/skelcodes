{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.20;\r\n\r\n/*\r\n* ===========================\r\n* Welcome To Ramen Coin! The FIRST and ONLY Proof of Ramen Cryptocurrency!\r\n* Our cryptocurrency not only provides an opportunity to earn from playing our dApp but we will use funds in the long run \r\n* to help those who suffer from hunger and starvation in the world. By taking part in our dApp you are doing your part to help!\r\n* |\r\n*         |  /           \r\n*         | /\r\n*   .~^(,&|/o.   \r\n*  |`-------^|\r\n*  \\         /\r\n*   `======='  \r\n* \r\n* https://ramencoin.me\r\n*\r\n* \r\n* /======== A Community Marketing Fund Project for RAMEN ========/\r\n*\r\n* -> Another Contract????\r\n* In short, this is a contract to accept RAMEN token / ETH donations from community members\r\n* as a way of gathering funds for regular marketing, contest and helping to fight hunger.\r\n* [✓] Hands of Titanium! This contract never sells, it can't and just simply don't know how to sell!\r\n* [✓] Community Goods: All rewards will be used for promotional costs / contest prizes and our initiative to fight hunger, when the accumulated rewards reaches a certain amount, we'll begin some campaigns.\r\n* [✓] Transparency: How rewards will be used will be regularly updated and sometimes voted on by the community in website and/or discord announcement.\r\n* [✓] Security: This is an honor system and the dev asks that you trust in the efforts as this is a serious and long term project.\r\n* \r\n*\r\n*\r\n*/\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title PullPayment\r\n * @dev Base contract supporting async send for pull payments. Inherit from this\r\n * contract and use asyncSend instead of send.\r\n */\r\ncontract PullPayment {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public payments;\r\n  uint256 public totalPayments;\r\n\r\n  /**\r\n   * @dev withdraw accumulated balance, called by payee.\r\n   */\r\n  function withdrawPayments() public {\r\n    address payee = msg.sender;\r\n    uint256 payment = payments[payee];\r\n\r\n    require(payment != 0);\r\n    require(this.balance >= payment);\r\n\r\n    totalPayments = totalPayments.sub(payment);\r\n    payments[payee] = 0;\r\n\r\n    assert(payee.send(payment));\r\n  }\r\n\r\n  /**\r\n   * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n   * @param dest The destination address of the funds.\r\n   * @param amount The amount to transfer.\r\n   */\r\n  function asyncSend(address dest, uint256 amount) internal {\r\n    payments[dest] = payments[dest].add(amount);\r\n    totalPayments = totalPayments.add(amount);\r\n  }\r\n  \r\n}\r\n\r\n/// @dev Interface to the RAMEN contract.\r\ncontract RAMENInterface {\r\n\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS           =\r\n    =======================================*/\r\n\r\n    /// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\r\n    function buy(address _referredBy) public payable returns (uint256);\r\n\r\n    /// @dev Converts all of caller's dividends to tokens.\r\n    function reinvest() public;\r\n\r\n    /// @dev Alias of sell() and withdraw().\r\n    function exit() public;\r\n\r\n    /// @dev Withdraws all of the callers earnings.\r\n    function withdraw() public;\r\n\r\n    /// @dev Liquifies tokens to ethereum.\r\n    function sell(uint256 _amountOfTokens) public;\r\n\r\n    /**\r\n     * @dev Transfer tokens from the caller to a new holder.\r\n     *  Remember, there's a 15% fee here as well.\r\n     */\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) public returns (bool);\r\n\r\n\r\n    /*=====================================\r\n    =      HELPERS AND CALCULATORS        =\r\n    =====================================*/\r\n\r\n    /**\r\n     * @dev Method to view the current Ethereum stored in the contract\r\n     *  Example: totalEthereumBalance()\r\n     */\r\n    function totalEthereumBalance() public view returns (uint256);\r\n\r\n    /// @dev Retrieve the total token supply.\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    /// @dev Retrieve the tokens owned by the caller.\r\n    function myTokens() public view returns (uint256);\r\n\r\n    /**\r\n     * @dev Retrieve the dividends owned by the caller.\r\n     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\r\n     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n     *  But in the internal calculations, we want them separate.\r\n     */\r\n    function myDividends(bool _includeReferralBonus) public view returns (uint256);\r\n\r\n    /// @dev Retrieve the token balance of any single address.\r\n    function balanceOf(address _customerAddress) public view returns (uint256);\r\n\r\n    /// @dev Retrieve the dividend balance of any single address.\r\n    function dividendsOf(address _customerAddress) public view returns (uint256);\r\n\r\n    /// @dev Return the sell price of 1 individual token.\r\n    function sellPrice() public view returns (uint256);\r\n\r\n    /// @dev Return the buy price of 1 individual token.\r\n    function buyPrice() public view returns (uint256);\r\n\r\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256);\r\n\r\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256);\r\n\r\n\r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n\r\n    /// @dev Internal function to actually purchase the tokens.\r\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256);\r\n\r\n    /**\r\n     * @dev Calculate Token price based on an amount of incoming ethereum\r\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256);\r\n\r\n    /**\r\n     * @dev Calculate token sell value.\r\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256);\r\n\r\n    /// @dev This is where all your gas goes.\r\n    function sqrt(uint256 x) internal pure returns (uint256 y);\r\n\r\n\r\n}\r\n\r\n/// @dev Core Contract\r\ncontract RAMENCommunityFund is Ownable, PullPayment {\r\n\r\n\r\n    /*=================================\r\n    =            CONTRACTS            =\r\n    =================================*/\r\n\r\n    /// @dev The address of the EtherDungeonCore contract.\r\n    RAMENInterface public RamenContract = RAMENInterface(0xc463aa806958f3BdD20081Cc5caB89FBB35B650D);\r\n\r\n\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n\r\n    event LogDonateETH(\r\n        address indexed donarAddress,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS           =\r\n    =======================================*/\r\n    \r\n    /// @dev Besides donating RAMEN tokens, you can also donate ETH as well.\r\n    function donateETH() public payable {\r\n        // When you make an ETH donation, it will use your address as referrer / masternode.\r\n        RamenContract.buy.value(msg.value)(msg.sender);\r\n        \r\n        // Emit LogDonateETH event.\r\n        LogDonateETH(msg.sender, msg.value, now);\r\n    }\r\n\r\n    /// @dev Converts ETH dividends to RAMEN tokens.\r\n    function reinvestDividend() onlyOwner public {\r\n       RamenContract.reinvest();\r\n    }\r\n\r\n    /// @dev Withdraw ETH dividends and put it to this contract.\r\n    function withdrawDividend() onlyOwner public {\r\n        RamenContract.withdraw();\r\n    }\r\n\r\n    /// @dev Assign who can get how much of the dividends.\r\n    function assignFundReceiver(address _fundReceiver, uint _amount) onlyOwner public {\r\n        // Ensure there are sufficient available balance.\r\n        require(_amount <= this.balance - totalPayments);\r\n\r\n        // Using the asyncSend function of PullPayment, fund receiver can withdraw it anytime.\r\n        asyncSend(_fundReceiver, _amount);\r\n    }\r\n\r\n    /// @dev Fallback function to allow receiving funds from RAMEN contract.\r\n    function() public payable {}\r\n\r\n    /*=======================================\r\n    =           SETTER FUNCTIONS            =\r\n    =======================================*/\r\n\r\n    function setRamenContract(address _newRamenContractAddress) onlyOwner external {\r\n        RamenContract = RAMENInterface(_newRamenContractAddress);\r\n    }\r\n\r\n    \r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donateETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RamenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundReceiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"assignFundReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRamenContractAddress\",\"type\":\"address\"}],\"name\":\"setRamenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"donarAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogDonateETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RAMENCommunityFund","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9ff30cfc8712141d7da7983f3351f7f5272896c0517e0c08df57f8c890c63fbd"}]}