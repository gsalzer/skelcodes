{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Owned\r\n * @author Adria Massanet <adria@codecontext.io>\r\n * @notice The Owned contract has an owner address, and provides basic\r\n *  authorization control functions, this simplifies & the implementation of\r\n *  user permissions; this contract has three work flows for a change in\r\n *  ownership, the first requires the new owner to validate that they have the\r\n *  ability to accept ownership, the second allows the ownership to be\r\n *  directly transferred without requiring acceptance, and the third allows for\r\n *  the ownership to be removed to allow for decentralization\r\n */\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public newOwnerCandidate;\r\n\r\n    event OwnershipRequested(address indexed by, address indexed to);\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n    event OwnershipRemoved();\r\n\r\n    /**\r\n     * @dev The constructor sets the `msg.sender` as the`owner` of the contract\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev `owner` is the only address that can call a function with this\r\n     * modifier\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev In this 1st option for ownership transfer `proposeOwnership()` must\r\n     *  be called first by the current `owner` then `acceptOwnership()` must be\r\n     *  called by the `newOwnerCandidate`\r\n     * @notice `onlyOwner` Proposes to transfer control of the contract to a\r\n     *  new owner\r\n     * @param _newOwnerCandidate The address being proposed as the new owner\r\n     */\r\n    function proposeOwnership(address _newOwnerCandidate) external onlyOwner {\r\n        newOwnerCandidate = _newOwnerCandidate;\r\n        emit OwnershipRequested(msg.sender, newOwnerCandidate);\r\n    }\r\n\r\n    /**\r\n     * @notice Can only be called by the `newOwnerCandidate`, accepts the\r\n     *  transfer of ownership\r\n     */\r\n    function acceptOwnership() external {\r\n        require(msg.sender == newOwnerCandidate);\r\n\r\n        address oldOwner = owner;\r\n        owner = newOwnerCandidate;\r\n        newOwnerCandidate = 0x0;\r\n\r\n        emit OwnershipTransferred(oldOwner, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev In this 2nd option for ownership transfer `changeOwnership()` can\r\n     *  be called and it will immediately assign ownership to the `newOwner`\r\n     * @notice `owner` can step down and assign some other address to this role\r\n     * @param _newOwner The address of the new owner\r\n     */\r\n    function changeOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != 0x0);\r\n\r\n        address oldOwner = owner;\r\n        owner = _newOwner;\r\n        newOwnerCandidate = 0x0;\r\n\r\n        emit OwnershipTransferred(oldOwner, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev In this 3rd option for ownership transfer `removeOwnership()` can\r\n     *  be called and it will immediately assign ownership to the 0x0 address;\r\n     *  it requires a 0xdece be input as a parameter to prevent accidental use\r\n     * @notice Decentralizes the contract, this operation cannot be undone\r\n     * @param _dac `0xdac` has to be entered for this function to work\r\n     */\r\n    function removeOwnership(address _dac) external onlyOwner {\r\n        require(_dac == 0xdac);\r\n        owner = 0x0;\r\n        newOwnerCandidate = 0x0;\r\n        emit OwnershipRemoved();\r\n    }\r\n}\r\n\r\n/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\r\n\r\ninterface ERC777TokensRecipient {\r\n    function tokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint amount,\r\n        bytes userData,\r\n        bytes operatorData\r\n    ) public;\r\n}\r\n\r\n/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\r\n\r\ninterface ERC777TokensSender {\r\n    function tokensToSend(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint amount,\r\n        bytes userData,\r\n        bytes operatorData\r\n    ) public;\r\n}\r\n\r\n/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\r\n\r\ninterface ERC777Token {\r\n    function name() public view returns (string);\r\n\r\n    function symbol() public view returns (string);\r\n\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function granularity() public view returns (uint256);\r\n\r\n    function balanceOf(address owner) public view returns (uint256);\r\n\r\n    function send(address to, uint256 amount) public;\r\n\r\n    function send(address to, uint256 amount, bytes userData) public;\r\n\r\n    function authorizeOperator(address operator) public;\r\n\r\n    function revokeOperator(address operator) public;\r\n\r\n    function isOperatorFor(address operator, address tokenHolder) public view returns (bool);\r\n\r\n    function operatorSend(address from, address to, uint256 amount, bytes userData, bytes operatorData) public;\r\n\r\n    event Sent(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        bytes userData,\r\n        bytes operatorData\r\n    ); // solhint-disable-next-line separate-by-one-line-in-contract\r\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes operatorData);\r\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes userData, bytes operatorData);\r\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\r\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\r\n}\r\n\r\n/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\r\n\r\ninterface ERC20Token {\r\n    function name() public view returns (string);\r\n\r\n    function symbol() public view returns (string);\r\n\r\n    function decimals() public view returns (uint8);\r\n\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address owner) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) public returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n\r\ncontract ERC820Registry {\r\n    function getManager(address addr) public view returns(address);\r\n    function setManager(address addr, address newManager) public;\r\n    function getInterfaceImplementer(address addr, bytes32 iHash) public constant returns (address);\r\n    function setInterfaceImplementer(address addr, bytes32 iHash, address implementer) public;\r\n}\r\n\r\ncontract ERC820Implementer {\r\n    ERC820Registry public erc820Registry;\r\n\r\n    constructor(address _registry) public {\r\n        erc820Registry = ERC820Registry(_registry);\r\n    }\r\n\r\n    function setInterfaceImplementation(string ifaceLabel, address impl) internal {\r\n        bytes32 ifaceHash = keccak256(ifaceLabel);\r\n        erc820Registry.setInterfaceImplementer(this, ifaceHash, impl);\r\n    }\r\n\r\n    function interfaceAddr(address addr, string ifaceLabel) internal constant returns(address) {\r\n        bytes32 ifaceHash = keccak256(ifaceLabel);\r\n        return erc820Registry.getInterfaceImplementer(addr, ifaceHash);\r\n    }\r\n\r\n    function delegateManagement(address newManager) internal {\r\n        erc820Registry.setManager(this, newManager);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC777 Helper Contract\r\n * @author Panos\r\n */\r\ncontract ERC777Helper is ERC777Token, ERC20Token, ERC820Implementer {\r\n    using SafeMath for uint256;\r\n\r\n    bool internal mErc20compatible;\r\n    uint256 internal mGranularity;\r\n    mapping(address => uint) internal mBalances;\r\n\r\n    /**\r\n     * @notice Internal function that ensures `_amount` is multiple of the granularity\r\n     * @param _amount The quantity that want's to be checked\r\n     */\r\n    function requireMultiple(uint256 _amount) internal view {\r\n        require(_amount.div(mGranularity).mul(mGranularity) == _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether an address is a regular address or not.\r\n     * @param _addr Address of the contract that has to be checked\r\n     * @return `true` if `_addr` is a regular address (not a contract)\r\n     */\r\n    function isRegularAddress(address _addr) internal view returns(bool) {\r\n        if (_addr == 0) { return false; }\r\n        uint size;\r\n        assembly { size := extcodesize(_addr) } // solhint-disable-line no-inline-assembly\r\n        return size == 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function actually performing the sending of tokens.\r\n     * @param _from The address holding the tokens being sent\r\n     * @param _to The address of the recipient\r\n     * @param _amount The number of tokens to be sent\r\n     * @param _userData Data generated by the user to be passed to the recipient\r\n     * @param _operatorData Data generated by the operator to be passed to the recipient\r\n     * @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\r\n     *  implementing `erc777_tokenHolder`.\r\n     *  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\r\n     *  functions SHOULD set this parameter to `false`.\r\n     */\r\n    function doSend(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes _userData,\r\n        address _operator,\r\n        bytes _operatorData,\r\n        bool _preventLocking\r\n    )\r\n    internal\r\n    {\r\n        requireMultiple(_amount);\r\n\r\n        callSender(_operator, _from, _to, _amount, _userData, _operatorData);\r\n\r\n        require(_to != address(0));          // forbid sending to 0x0 (=burning)\r\n        require(mBalances[_from] >= _amount); // ensure enough funds\r\n\r\n        mBalances[_from] = mBalances[_from].sub(_amount);\r\n        mBalances[_to] = mBalances[_to].add(_amount);\r\n\r\n        callRecipient(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\r\n\r\n        emit Sent(_operator, _from, _to, _amount, _userData, _operatorData);\r\n        if (mErc20compatible) { emit Transfer(_from, _to, _amount); }\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\r\n     *  May throw according to `_preventLocking`\r\n     * @param _from The address holding the tokens being sent\r\n     * @param _to The address of the recipient\r\n     * @param _amount The number of tokens to be sent\r\n     * @param _userData Data generated by the user to be passed to the recipient\r\n     * @param _operatorData Data generated by the operator to be passed to the recipient\r\n     * @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\r\n     *  implementing `ERC777TokensRecipient`.\r\n     *  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\r\n     *  functions SHOULD set this parameter to `false`.\r\n     */\r\n    function callRecipient(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes _userData,\r\n        bytes _operatorData,\r\n        bool _preventLocking\r\n    ) internal {\r\n        address recipientImplementation = interfaceAddr(_to, \"ERC777TokensRecipient\");\r\n        if (recipientImplementation != 0) {\r\n            ERC777TokensRecipient(recipientImplementation).tokensReceived(\r\n                _operator, _from, _to, _amount, _userData, _operatorData);\r\n        } else if (_preventLocking) {\r\n            require(isRegularAddress(_to));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\r\n     *  May throw according to `_preventLocking`\r\n     * @param _from The address holding the tokens being sent\r\n     * @param _to The address of the recipient\r\n     * @param _amount The amount of tokens to be sent\r\n     * @param _userData Data generated by the user to be passed to the recipient\r\n     * @param _operatorData Data generated by the operator to be passed to the recipient\r\n     *  implementing `ERC777TokensSender`.\r\n     *  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\r\n     *  functions SHOULD set this parameter to `false`.\r\n     */\r\n    function callSender(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes _userData,\r\n        bytes _operatorData\r\n    ) internal {\r\n        address senderImplementation = interfaceAddr(_from, \"ERC777TokensSender\");\r\n        if (senderImplementation != 0) {\r\n            ERC777TokensSender(senderImplementation).tokensToSend(\r\n                _operator, _from, _to, _amount, _userData, _operatorData);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 Compatibility Contract\r\n * @author Panos\r\n */\r\ncontract ERC20TokenCompat is ERC777Helper, Owned {\r\n\r\n    mapping(address => mapping(address => uint256)) private mAllowed;\r\n\r\n    /**\r\n     * @notice Contract construction\r\n     */\r\n    constructor() public {\r\n        mErc20compatible = true;\r\n        setInterfaceImplementation(\"ERC20Token\", this);\r\n    }\r\n\r\n    /**\r\n     * @notice This modifier is applied to erc20 obsolete methods that are\r\n     * implemented only to maintain backwards compatibility. When the erc20\r\n     * compatibility is disabled, this methods will fail.\r\n     */\r\n    modifier erc20 () {\r\n        require(mErc20compatible);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Disables the ERC20 interface. This function can only be called\r\n     * by the owner.\r\n     */\r\n    function disableERC20() public onlyOwner {\r\n        mErc20compatible = false;\r\n        setInterfaceImplementation(\"ERC20Token\", 0x0);\r\n    }\r\n\r\n    /**\r\n     * @notice Re enables the ERC20 interface. This function can only be called\r\n     *  by the owner.\r\n     */\r\n    function enableERC20() public onlyOwner {\r\n        mErc20compatible = true;\r\n        setInterfaceImplementation(\"ERC20Token\", this);\r\n    }\r\n\r\n    /*\r\n     * @notice For Backwards compatibility\r\n     * @return The decimals of the token. Forced to 18 in ERC777.\r\n     */\r\n    function decimals() public erc20 view returns (uint8) {return uint8(18);}\r\n\r\n    /**\r\n     * @notice ERC20 backwards compatible transfer.\r\n     * @param _to The address of the recipient\r\n     * @param _amount The number of tokens to be transferred\r\n     * @return `true`, if the transfer can't be done, it should fail.\r\n     */\r\n    function transfer(address _to, uint256 _amount) public erc20 returns (bool success) {\r\n        doSend(msg.sender, _to, _amount, \"\", msg.sender, \"\", false);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice ERC20 backwards compatible transferFrom.\r\n     * @param _from The address holding the tokens being transferred\r\n     * @param _to The address of the recipient\r\n     * @param _amount The number of tokens to be transferred\r\n     * @return `true`, if the transfer can't be done, it should fail.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _amount) public erc20 returns (bool success) {\r\n        require(_amount <= mAllowed[_from][msg.sender]);\r\n\r\n        // Cannot be after doSend because of tokensReceived re-entry\r\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\r\n        doSend(_from, _to, _amount, \"\", msg.sender, \"\", false);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice ERC20 backwards compatible approve.\r\n     *  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _amount The number of tokens to be approved for transfer\r\n     * @return `true`, if the approve can't be done, it should fail.\r\n     */\r\n    function approve(address _spender, uint256 _amount) public erc20 returns (bool success) {\r\n        mAllowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice ERC20 backwards compatible allowance.\r\n     *  This function makes it easy to read the `allowed[]` map\r\n     * @param _owner The address of the account that owns the token\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens of _owner that _spender is allowed\r\n     *  to spend\r\n     */\r\n    function allowance(address _owner, address _spender) public erc20 view returns (uint256 remaining) {\r\n        return mAllowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC777 Standard Contract\r\n * @author Panos\r\n */\r\ncontract ERC777StandardToken is ERC777Helper, Owned {\r\n    string private mName;\r\n    string private mSymbol;\r\n    uint256 private mTotalSupply;\r\n\r\n    mapping(address => mapping(address => bool)) private mAuthorized;\r\n\r\n    /**\r\n     * @notice Constructor to create a ERC777StandardToken\r\n     * @param _name Name of the new token\r\n     * @param _symbol Symbol of the new token.\r\n     * @param _totalSupply Total tokens issued\r\n     * @param _granularity Minimum transferable chunk.\r\n     */\r\n    constructor(\r\n        string _name,\r\n        string _symbol,\r\n        uint256 _totalSupply,\r\n        uint256 _granularity\r\n    )\r\n    public {\r\n        require(_granularity >= 1);\r\n        require(_totalSupply > 0);\r\n\r\n        mName = _name;\r\n        mSymbol = _symbol;\r\n        mTotalSupply = _totalSupply;\r\n        mGranularity = _granularity;\r\n        mBalances[msg.sender] = mTotalSupply;\r\n\r\n        setInterfaceImplementation(\"ERC777Token\", this);\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token\r\n     */\r\n    function name() public view returns (string) {return mName;}\r\n\r\n    /**\r\n     * @return the symbol of the token\r\n     */\r\n    function symbol() public view returns (string) {return mSymbol;}\r\n\r\n    /**\r\n     * @return the granularity of the token\r\n     */\r\n    function granularity() public view returns (uint256) {return mGranularity;}\r\n\r\n    /**\r\n     * @return the total supply of the token\r\n     */\r\n    function totalSupply() public view returns (uint256) {return mTotalSupply;}\r\n\r\n    /**\r\n     * @notice Return the account balance of some account\r\n     * @param _tokenHolder Address for which the balance is returned\r\n     * @return the balance of `_tokenAddress`.\r\n     */\r\n    function balanceOf(address _tokenHolder) public view returns (uint256) {return mBalances[_tokenHolder];}\r\n\r\n    /**\r\n     * @notice Send `_amount` of tokens to address `_to`\r\n     * @param _to The address of the recipient\r\n     * @param _amount The number of tokens to be sent\r\n     */\r\n    function send(address _to, uint256 _amount) public {\r\n        doSend(msg.sender, _to, _amount, \"\", msg.sender, \"\", true);\r\n    }\r\n\r\n    /**\r\n     * @notice Send `_amount` of tokens to address `_to` passing `_userData` to the recipient\r\n     * @param _to The address of the recipient\r\n     * @param _amount The number of tokens to be sent\r\n     * @param _userData The user supplied data\r\n     */\r\n    function send(address _to, uint256 _amount, bytes _userData) public {\r\n        doSend(msg.sender, _to, _amount, _userData, msg.sender, \"\", true);\r\n    }\r\n\r\n    /**\r\n     * @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\r\n     * @param _operator The operator that wants to be Authorized\r\n     */\r\n    function authorizeOperator(address _operator) public {\r\n        require(_operator != msg.sender);\r\n        mAuthorized[_operator][msg.sender] = true;\r\n        emit AuthorizedOperator(_operator, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\r\n     * @param _operator The operator that wants to be Revoked\r\n     */\r\n    function revokeOperator(address _operator) public {\r\n        require(_operator != msg.sender);\r\n        mAuthorized[_operator][msg.sender] = false;\r\n        emit RevokedOperator(_operator, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\r\n     * @param _operator address to check if it has the right to manage the tokens\r\n     * @param _tokenHolder address which holds the tokens to be managed\r\n     * @return `true` if `_operator` is authorized for `_tokenHolder`\r\n     */\r\n    function isOperatorFor(address _operator, address _tokenHolder) public view returns (bool) {\r\n        return _operator == _tokenHolder || mAuthorized[_operator][_tokenHolder];\r\n    }\r\n\r\n    /**\r\n     * @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\r\n     * @param _from The address holding the tokens being sent\r\n     * @param _to The address of the recipient\r\n     * @param _amount The number of tokens to be sent\r\n     * @param _userData Data generated by the user to be sent to the recipient\r\n     * @param _operatorData Data generated by the operator to be sent to the recipient\r\n     */\r\n    function operatorSend(address _from, address _to, uint256 _amount, bytes _userData, bytes _operatorData) public {\r\n        require(isOperatorFor(msg.sender, _from));\r\n        doSend(_from, _to, _amount, _userData, msg.sender, _operatorData, true);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 Multi Transfer Contract\r\n * @author Panos\r\n */\r\ncontract ERC20Multi is ERC20TokenCompat {\r\n\r\n    /**\r\n     * @dev Transfer the specified amounts of tokens to the specified addresses.\r\n     * @dev Be aware that there is no check for duplicate recipients.\r\n     * @param _toAddresses Receiver addresses.\r\n     * @param _amounts Amounts of tokens that will be transferred.\r\n     */\r\n    function multiPartyTransfer(address[] _toAddresses, uint256[] _amounts) external erc20 {\r\n        /* Ensures _toAddresses array is less than or equal to 255 */\r\n        require(_toAddresses.length <= 255);\r\n        /* Ensures _toAddress and _amounts have the same number of entries. */\r\n        require(_toAddresses.length == _amounts.length);\r\n\r\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\r\n            transfer(_toAddresses[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer the specified amounts of tokens to the specified addresses from authorized balance of sender.\r\n    * @dev Be aware that there is no check for duplicate recipients.\r\n    * @param _from The address of the sender\r\n    * @param _toAddresses The addresses of the recipients (MAX 255)\r\n    * @param _amounts The amounts of tokens to be transferred\r\n    */\r\n    function multiPartyTransferFrom(address _from, address[] _toAddresses, uint256[] _amounts) external erc20 {\r\n        /* Ensures _toAddresses array is less than or equal to 255 */\r\n        require(_toAddresses.length <= 255);\r\n        /* Ensures _toAddress and _amounts have the same number of entries. */\r\n        require(_toAddresses.length == _amounts.length);\r\n\r\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\r\n            transferFrom(_from, _toAddresses[i], _amounts[i]);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC777 Multi Transfer Contract\r\n * @author Panos\r\n */\r\ncontract ERC777Multi is ERC777Helper {\r\n\r\n    /**\r\n     * @dev Transfer the specified amounts of tokens to the specified addresses as `_from`.\r\n     * @dev Be aware that there is no check for duplicate recipients.\r\n     * @param _from Address to use as sender\r\n     * @param _to Receiver addresses.\r\n     * @param _amounts Amounts of tokens that will be transferred.\r\n     * @param _userData User supplied data\r\n     * @param _operatorData Operator supplied data\r\n     */\r\n    function multiOperatorSend(address _from, address[] _to, uint256[] _amounts, bytes _userData, bytes _operatorData)\r\n    external {\r\n        /* Ensures _toAddresses array is less than or equal to 255 */\r\n        require(_to.length <= 255);\r\n        /* Ensures _toAddress and _amounts have the same number of entries. */\r\n        require(_to.length == _amounts.length);\r\n\r\n        for (uint8 i = 0; i < _to.length; i++) {\r\n            operatorSend(_from, _to[i], _amounts[i], _userData, _operatorData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the specified amounts of tokens to the specified addresses.\r\n     * @dev Be aware that there is no check for duplicate recipients.\r\n     * @param _toAddresses Receiver addresses.\r\n     * @param _amounts Amounts of tokens that will be transferred.\r\n     * @param _userData User supplied data\r\n     */\r\n    function multiPartySend(address[] _toAddresses, uint256[] _amounts, bytes _userData) public {\r\n        /* Ensures _toAddresses array is less than or equal to 255 */\r\n        require(_toAddresses.length <= 255);\r\n        /* Ensures _toAddress and _amounts have the same number of entries. */\r\n        require(_toAddresses.length == _amounts.length);\r\n\r\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\r\n            doSend(msg.sender, _toAddresses[i], _amounts[i], _userData, msg.sender, \"\", true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the specified amounts of tokens to the specified addresses.\r\n     * @dev Be aware that there is no check for duplicate recipients.\r\n     * @param _toAddresses Receiver addresses.\r\n     * @param _amounts Amounts of tokens that will be transferred.\r\n     */\r\n    function multiPartySend(address[] _toAddresses, uint256[] _amounts) public {\r\n        /* Ensures _toAddresses array is less than or equal to 255 */\r\n        require(_toAddresses.length <= 255);\r\n        /* Ensures _toAddress and _amounts have the same number of entries. */\r\n        require(_toAddresses.length == _amounts.length);\r\n\r\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\r\n            doSend(msg.sender, _toAddresses[i], _amounts[i], \"\", msg.sender, \"\", true);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Safe Guard Contract\r\n * @author Panos\r\n */\r\ncontract SafeGuard is Owned {\r\n\r\n    event Transaction(address indexed destination, uint value, bytes data);\r\n\r\n    /**\r\n     * @dev Allows owner to execute a transaction.\r\n     */\r\n    function executeTransaction(address destination, uint value, bytes data)\r\n    public\r\n    onlyOwner\r\n    {\r\n        require(externalCall(destination, value, data.length, data));\r\n        emit Transaction(destination, value, data);\r\n    }\r\n\r\n    /**\r\n     * @dev call has been separated into its own function in order to take advantage\r\n     *  of the Solidity's code generator to produce a loop that copies tx.data into memory.\r\n     */\r\n    function externalCall(address destination, uint value, uint dataLength, bytes data)\r\n    private\r\n    returns (bool) {\r\n        bool result;\r\n        assembly { // solhint-disable-line no-inline-assembly\r\n        let x := mload(0x40)   // \"Allocate\" memory for output\r\n            // (0x40 is where \"free memory\" pointer is stored by convention)\r\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n            sub(gas, 34710), // 34710 is the value that solidity is currently emitting\r\n            // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n            // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n            destination,\r\n            value,\r\n            d,\r\n            dataLength, // Size of the input (in bytes) - this is what fixes the padding problem\r\n            x,\r\n            0                  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC664 Standard Balances Contract\r\n * @author chrisfranko\r\n */\r\ncontract ERC664Balances is SafeGuard {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    event BalanceAdj(address indexed module, address indexed account, uint amount, string polarity);\r\n    event ModuleSet(address indexed module, bool indexed set);\r\n\r\n    mapping(address => bool) public modules;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n    modifier onlyModule() {\r\n        require(modules[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Constructor to create ERC664Balances\r\n     * @param _initialAmount Database initial amount\r\n     */\r\n    constructor(uint256 _initialAmount) public {\r\n        balances[msg.sender] = _initialAmount;\r\n        totalSupply = _initialAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Set allowance of `_spender` in behalf of `_sender` at `_value`\r\n     * @param _sender Owner account\r\n     * @param _spender Spender account\r\n     * @param _value Value to approve\r\n     * @return Operation status\r\n     */\r\n    function setApprove(address _sender, address _spender, uint256 _value) external onlyModule returns (bool) {\r\n        allowed[_sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrease allowance of `_spender` in behalf of `_from` at `_value`\r\n     * @param _from Owner account\r\n     * @param _spender Spender account\r\n     * @param _value Value to decrease\r\n     * @return Operation status\r\n     */\r\n    function decApprove(address _from, address _spender, uint _value) external onlyModule returns (bool) {\r\n        allowed[_from][_spender] = allowed[_from][_spender].sub(_value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Increase total supply by `_val`\r\n    * @param _val Value to increase\r\n    * @return Operation status\r\n    */\r\n    function incTotalSupply(uint _val) external onlyOwner returns (bool) {\r\n        totalSupply = totalSupply.add(_val);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrease total supply by `_val`\r\n     * @param _val Value to decrease\r\n     * @return Operation status\r\n     */\r\n    function decTotalSupply(uint _val) external onlyOwner returns (bool) {\r\n        totalSupply = totalSupply.sub(_val);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Set/Unset `_acct` as an authorized module\r\n     * @param _acct Module address\r\n     * @param _set Module set status\r\n     * @return Operation status\r\n     */\r\n    function setModule(address _acct, bool _set) external onlyOwner returns (bool) {\r\n        modules[_acct] = _set;\r\n        emit ModuleSet(_acct, _set);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Get `_acct` balance\r\n     * @param _acct Target account to get balance.\r\n     * @return The account balance\r\n     */\r\n    function getBalance(address _acct) external view returns (uint256) {\r\n        return balances[_acct];\r\n    }\r\n\r\n    /**\r\n     * @notice Get allowance of `_spender` in behalf of `_owner`\r\n     * @param _owner Owner account\r\n     * @param _spender Spender account\r\n     * @return Allowance\r\n     */\r\n    function getAllowance(address _owner, address _spender) external view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Get if `_acct` is an authorized module\r\n     * @param _acct Module address\r\n     * @return Operation status\r\n     */\r\n    function getModule(address _acct) external view returns (bool) {\r\n        return modules[_acct];\r\n    }\r\n\r\n    /**\r\n     * @notice Get total supply\r\n     * @return Total supply\r\n     */\r\n    function getTotalSupply() external view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Increment `_acct` balance by `_val`\r\n     * @param _acct Target account to increment balance.\r\n     * @param _val Value to increment\r\n     * @return Operation status\r\n     */\r\n    function incBalance(address _acct, uint _val) public onlyModule returns (bool) {\r\n        balances[_acct] = balances[_acct].add(_val);\r\n        emit BalanceAdj(msg.sender, _acct, _val, \"+\");\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrement `_acct` balance by `_val`\r\n     * @param _acct Target account to decrement balance.\r\n     * @param _val Value to decrement\r\n     * @return Operation status\r\n     */\r\n    function decBalance(address _acct, uint _val) public onlyModule returns (bool) {\r\n        balances[_acct] = balances[_acct].sub(_val);\r\n        emit BalanceAdj(msg.sender, _acct, _val, \"-\");\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC664 Database Contract\r\n * @author Panos\r\n */\r\ncontract CStore is ERC664Balances, ERC820Implementer {\r\n\r\n    mapping(address => mapping(address => bool)) private mAuthorized;\r\n\r\n    /**\r\n     * @notice Database construction\r\n     * @param _totalSupply The total supply of the token\r\n     * @param _registry The ERC820 Registry Address\r\n     */\r\n    constructor(uint256 _totalSupply, address _registry) public\r\n    ERC664Balances(_totalSupply)\r\n    ERC820Implementer(_registry) {\r\n        setInterfaceImplementation(\"ERC664Balances\", this);\r\n    }\r\n\r\n    /**\r\n     * @notice Increase total supply by `_val`\r\n     * @param _val Value to increase\r\n     * @return Operation status\r\n     */\r\n    // solhint-disable-next-line no-unused-vars\r\n    function incTotalSupply(uint _val) external onlyOwner returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrease total supply by `_val`\r\n     * @param _val Value to decrease\r\n     * @return Operation status\r\n     */\r\n    // solhint-disable-next-line no-unused-vars\r\n    function decTotalSupply(uint _val) external onlyOwner returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice moving `_amount` from `_from` to `_to`\r\n     * @param _from The sender address\r\n     * @param _to The receiving address\r\n     * @param _amount The moving amount\r\n     * @return bool The move result\r\n     */\r\n    function move(address _from, address _to, uint256 _amount) external\r\n    onlyModule\r\n    returns (bool) {\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        emit BalanceAdj(msg.sender, _from, _amount, \"-\");\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit BalanceAdj(msg.sender, _to, _amount, \"+\");\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Setting operator `_operator` for `_tokenHolder`\r\n     * @param _operator The operator to set status\r\n     * @param _tokenHolder The token holder to set operator\r\n     * @param _status The operator status\r\n     * @return bool Status of operation\r\n     */\r\n    function setOperator(address _operator, address _tokenHolder, bool _status) external\r\n    onlyModule\r\n    returns (bool) {\r\n        mAuthorized[_operator][_tokenHolder] = _status;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Getting operator `_operator` for `_tokenHolder`\r\n     * @param _operator The operator address to get status\r\n     * @param _tokenHolder The token holder address\r\n     * @return bool Operator status\r\n     */\r\n    function getOperator(address _operator, address _tokenHolder) external\r\n    view\r\n    returns (bool) {\r\n        return mAuthorized[_operator][_tokenHolder];\r\n    }\r\n\r\n    /**\r\n     * @notice Increment `_acct` balance by `_val`\r\n     * @param _acct Target account to increment balance.\r\n     * @param _val Value to increment\r\n     * @return Operation status\r\n     */\r\n    // solhint-disable-next-line no-unused-vars\r\n    function incBalance(address _acct, uint _val) public onlyModule returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrement `_acct` balance by `_val`\r\n     * @param _acct Target account to decrement balance.\r\n     * @param _val Value to decrement\r\n     * @return Operation status\r\n     */\r\n    // solhint-disable-next-line no-unused-vars\r\n    function decBalance(address _acct, uint _val) public onlyModule returns (bool) {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC777 CALL Contract\r\n * @author Panos\r\n */\r\ncontract CALL is ERC820Implementer, ERC777StandardToken, ERC20TokenCompat, ERC20Multi, ERC777Multi, SafeGuard {\r\n    using SafeMath for uint256;\r\n\r\n    CStore public balancesDB;\r\n\r\n    /**\r\n     * @notice Token construction\r\n     * @param _intRegistry The ERC820 Registry Address\r\n     * @param _name The name of the token\r\n     * @param _symbol The symbol of the token\r\n     * @param _totalSupply The total supply of the token\r\n     * @param _granularity The granularity of the token\r\n     * @param _balancesDB The address of balances database\r\n     */\r\n    constructor(address _intRegistry, string _name, string _symbol, uint256 _totalSupply,\r\n        uint256 _granularity, address _balancesDB) public\r\n    ERC820Implementer(_intRegistry)\r\n    ERC777StandardToken(_name, _symbol, _totalSupply, _granularity) {\r\n        balancesDB = CStore(_balancesDB);\r\n        setInterfaceImplementation(\"ERC777CALLToken\", this);\r\n    }\r\n\r\n    /**\r\n     * @notice change the balances database to `_newDB`\r\n     * @param _newDB The new balances database address\r\n     */\r\n    function changeBalancesDB(address _newDB) public onlyOwner {\r\n        balancesDB = CStore(_newDB);\r\n    }\r\n\r\n    /**\r\n     * @notice ERC20 backwards compatible transferFrom using backendDB.\r\n     * @param _from The address holding the tokens being transferred\r\n     * @param _to The address of the recipient\r\n     * @param _amount The number of tokens to be transferred\r\n     * @return `true`, if the transfer can't be done, it should fail.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _amount) public erc20 returns (bool success) {\r\n        uint256 allowance = balancesDB.getAllowance(_from, msg.sender);\r\n        require(_amount <= allowance);\r\n\r\n        // Cannot be after doSend because of tokensReceived re-entry\r\n        require(balancesDB.decApprove(_from, msg.sender, _amount));\r\n        doSend(_from, _to, _amount, \"\", msg.sender, \"\", false);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice ERC20 backwards compatible approve.\r\n     *  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _amount The number of tokens to be approved for transfer\r\n     * @return `true`, if the approve can't be done, it should fail.\r\n     */\r\n    function approve(address _spender, uint256 _amount) public erc20 returns (bool success) {\r\n        require(balancesDB.setApprove(msg.sender, _spender, _amount));\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice ERC20 backwards compatible allowance.\r\n     *  This function makes it easy to read the `allowed[]` map\r\n     * @param _owner The address of the account that owns the token\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens of _owner that _spender is allowed\r\n     *  to spend\r\n     */\r\n    function allowance(address _owner, address _spender) public erc20 view returns (uint256 remaining) {\r\n        return balancesDB.getAllowance(_owner, _spender);\r\n    }\r\n\r\n    /**\r\n     * @return the total supply of the token\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return balancesDB.getTotalSupply();\r\n    }\r\n\r\n    /**\r\n     * @notice Return the account balance of some account\r\n     * @param _tokenHolder Address for which the balance is returned\r\n     * @return the balance of `_tokenAddress`.\r\n     */\r\n    function balanceOf(address _tokenHolder) public view returns (uint256) {\r\n        return balancesDB.getBalance(_tokenHolder);\r\n    }\r\n\r\n    /**\r\n         * @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens at remote database.\r\n         * @param _operator The operator that wants to be Authorized\r\n         */\r\n    function authorizeOperator(address _operator) public {\r\n        require(_operator != msg.sender);\r\n        require(balancesDB.setOperator(_operator, msg.sender, true));\r\n        emit AuthorizedOperator(_operator, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens at remote database.\r\n     * @param _operator The operator that wants to be Revoked\r\n     */\r\n    function revokeOperator(address _operator) public {\r\n        require(_operator != msg.sender);\r\n        require(balancesDB.setOperator(_operator, msg.sender, false));\r\n        emit RevokedOperator(_operator, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder`\r\n     *  address at remote database.\r\n     * @param _operator address to check if it has the right to manage the tokens\r\n     * @param _tokenHolder address which holds the tokens to be managed\r\n     * @return `true` if `_operator` is authorized for `_tokenHolder`\r\n     */\r\n    function isOperatorFor(address _operator, address _tokenHolder) public view returns (bool) {\r\n        return _operator == _tokenHolder || balancesDB.getOperator(_operator, _tokenHolder);\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function actually performing the sending of tokens using a backend database.\r\n     * @param _from The address holding the tokens being sent\r\n     * @param _to The address of the recipient\r\n     * @param _amount The number of tokens to be sent\r\n     * @param _userData Data generated by the user to be passed to the recipient\r\n     * @param _operatorData Data generated by the operator to be passed to the recipient\r\n     * @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\r\n     *  implementing `erc777_tokenHolder`.\r\n     *  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\r\n     *  functions SHOULD set this parameter to `false`.\r\n     */\r\n    function doSend(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes _userData,\r\n        address _operator,\r\n        bytes _operatorData,\r\n        bool _preventLocking\r\n    )\r\n    internal\r\n    {\r\n        requireMultiple(_amount);\r\n\r\n        callSender(_operator, _from, _to, _amount, _userData, _operatorData);\r\n\r\n        require(_to != address(0));          // forbid sending to 0x0 (=burning)\r\n        // require(mBalances[_from] >= _amount); // ensure enough funds\r\n        // (Not Required due to SafeMath throw if underflow in database and false check)\r\n\r\n        require(balancesDB.move(_from, _to, _amount));\r\n\r\n        callRecipient(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\r\n\r\n        emit Sent(_operator, _from, _to, _amount, _userData, _operatorData);\r\n        if (mErc20compatible) { emit Transfer(_from, _to, _amount); }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balancesDB\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiPartySend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDB\",\"type\":\"address\"}],\"name\":\"changeBalancesDB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_userData\",\"type\":\"bytes\"},{\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_userData\",\"type\":\"bytes\"},{\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"multiOperatorSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dac\",\"type\":\"address\"}],\"name\":\"removeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_toAddresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiPartyTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_userData\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc820Registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiPartyTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_userData\",\"type\":\"bytes\"}],\"name\":\"multiPartySend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_intRegistry\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_granularity\",\"type\":\"uint256\"},{\"name\":\"_balancesDB\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userData\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userData\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"}]","ContractName":"CALL","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000991a1bcb077599290d7305493c9a630c20f8b79800000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000282b82666abfd3da9000000000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000df2efe5338934ffe4443cde678822d6f3f696196000000000000000000000000000000000000000000000000000000000000000443414c4c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000443414c4c00000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://d1300ac28503c5a00a4a1970d2429843934f6c657d9733d8acfcc0ec1915f3e8"}]}