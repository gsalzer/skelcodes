{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\ncontract ERC721 {\r\n    function isERC721() public pure returns (bool b);\r\n    function implementsERC721() public pure returns (bool b);\r\n    function name() public pure returns (string name);\r\n    function symbol() public pure returns (string symbol);\r\n    function totalSupply() public view returns (uint256 totalSupply);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function takeOwnership(uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) constant returns (uint tokenId);\r\n    function tokenMetadata(uint256 _tokenId) constant returns (string infoUrl);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n}\r\n\r\ncontract HumanityCard is ERC721 {\r\n\r\n    ///////////////////////////////////////////////////////////////\r\n    /// Modifiers\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    event Mined(address indexed owner, uint16 human);\r\n\r\n    ///////////////////////////////////////////////////////////////\r\n    /// Structures\r\n\r\n    struct Human {\r\n        string name;\r\n        uint8 max;\r\n        uint mined;\r\n    }\r\n\r\n    struct Card {\r\n        uint16 human;\r\n        address owner;\r\n        uint indexUser;\r\n    }\r\n\r\n    struct SellOrder {\r\n        address seller;\r\n        uint card;\r\n        uint price;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////\r\n    /// Constants\r\n\r\n    string constant NAME = \"HumanityCards\";\r\n    string constant SYMBOL = \"HCX\";\r\n\r\n    ///////////////////////////////////////////////////////////////\r\n    /// Attributes\r\n\r\n    address owner;\r\n    uint cardPrice;\r\n    uint humanNumber;\r\n    Human[] humanArray;\r\n    uint cardNumber;\r\n    uint cardMined;\r\n    Card[] cardArray;\r\n    mapping (address => uint256) cardCount;\r\n    mapping (uint256 => address) approveMap;\r\n    SellOrder[] sellOrderList;\r\n\r\n    // Index of the card for the user\r\n    mapping (address => mapping (uint => uint)) indexCard;\r\n\r\n    ///////////////////////////////////////////////////////////////\r\n    /// Constructor\r\n\r\n    function HumanityCard() public {\r\n        owner = msg.sender;\r\n        cardPrice = 1 finney;\r\n        humanNumber = 0;\r\n        cardNumber = 0;\r\n        cardMined = 0;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////\r\n    /// Admin functions\r\n\r\n    function addHuman(string name, uint8 max) public onlyOwner {\r\n        Human memory newHuman = Human(name, max, 0);\r\n        humanArray.push(newHuman);\r\n        humanNumber += 1;\r\n        cardNumber += max;\r\n    }\r\n\r\n    // Used only if ether price increase (decrease the price card)\r\n    function changeCardPrice(uint newPrice) public onlyOwner {\r\n        cardPrice = newPrice;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////\r\n    /// Implementation ERC721\r\n\r\n    function isERC721() public pure returns (bool b) {\r\n        return true;\r\n    }\r\n\r\n    function implementsERC721() public pure returns (bool b) {\r\n        return true;\r\n    }\r\n\r\n    function name() public pure returns (string _name) {\r\n        return NAME;\r\n    }\r\n\r\n    function symbol() public pure returns (string _symbol) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 _totalSupply) {\r\n        return cardMined;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return cardCount[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner) {\r\n        require(_tokenId < cardMined);\r\n        Card c = cardArray[_tokenId];\r\n        return c.owner;\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        require(msg.sender == ownerOf(_tokenId));\r\n        require(msg.sender != _to);\r\n        approveMap[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n        require(_tokenId < cardMined);\r\n        require(_from == ownerOf(_tokenId));\r\n        require(_from != _to);\r\n        require(approveMap[_tokenId] == _to);\r\n\r\n        cardCount[_from] -= 1;\r\n\r\n        // Change the indexCard of _from\r\n        indexCard[_from][cardArray[_tokenId].indexUser] = indexCard[_from][cardCount[_from]];\r\n        cardArray[indexCard[_from][cardCount[_from]]].indexUser = cardArray[_tokenId].indexUser;\r\n\r\n        // This card is the last one for the new owner\r\n        cardArray[_tokenId].indexUser = cardCount[_to];\r\n        indexCard[_to][cardCount[_to]] = _tokenId;\r\n\r\n        cardArray[_tokenId].owner = _to;\r\n        cardCount[_to] += 1;\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        require(_tokenId < cardMined);\r\n        address oldOwner = ownerOf(_tokenId);\r\n        address newOwner = msg.sender;\r\n        require(newOwner != oldOwner);\r\n        require(approveMap[_tokenId] == msg.sender);\r\n\r\n        cardCount[oldOwner] -= 1;\r\n\r\n        // Change the indexCard of _from\r\n        indexCard[oldOwner][cardArray[_tokenId].indexUser] = indexCard[oldOwner][cardCount[oldOwner]];\r\n        cardArray[indexCard[oldOwner][cardCount[oldOwner]]].indexUser = cardArray[_tokenId].indexUser;\r\n\r\n        // This card is the last one for the new owner\r\n        cardArray[_tokenId].indexUser = cardCount[newOwner];\r\n        indexCard[newOwner][cardCount[newOwner]] = _tokenId;\r\n\r\n        cardArray[_tokenId].owner = newOwner;\r\n        cardCount[newOwner] += 1;\r\n        Transfer(oldOwner, newOwner, _tokenId);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public {\r\n        require(_tokenId < cardMined);\r\n        address oldOwner = msg.sender;\r\n        address newOwner = _to;\r\n        require(oldOwner == ownerOf(_tokenId));\r\n        require(oldOwner != newOwner);\r\n        require(newOwner != address(0));\r\n\r\n        cardCount[oldOwner] -= 1;\r\n\r\n        // Change the indexCard of _from\r\n        indexCard[oldOwner][cardArray[_tokenId].indexUser] = indexCard[oldOwner][cardCount[oldOwner]];\r\n        cardArray[indexCard[oldOwner][cardCount[oldOwner]]].indexUser = cardArray[_tokenId].indexUser;\r\n\r\n        // This card is the last one for the new owner\r\n        cardArray[_tokenId].indexUser = cardCount[newOwner];\r\n        indexCard[newOwner][cardCount[newOwner]] = _tokenId;\r\n\r\n        cardArray[_tokenId].owner = newOwner;\r\n        cardCount[newOwner] += 1;\r\n        Transfer(oldOwner, newOwner, _tokenId);\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) constant returns (uint tokenId) {\r\n        require(_index < cardCount[_owner]);\r\n\r\n        return indexCard[_owner][_index];\r\n    }\r\n\r\n    // For this case the only metadata is the name of the human\r\n    function tokenMetadata(uint256 _tokenId) constant returns (string infoUrl) {\r\n        require(_tokenId < cardMined);\r\n\r\n        uint16 humanId = cardArray[_tokenId].human;\r\n        return humanArray[humanId].name;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////\r\n    /// HumanityCard functions\r\n\r\n    // Mine a new card\r\n    function mineCard() public payable returns(bool success) {\r\n        require(msg.value == cardPrice);\r\n        require(cardMined < cardNumber);\r\n\r\n        int remaining = (int)(cardNumber - cardMined);\r\n\r\n        // Choosing the card\r\n        int numero = int(keccak256(block.timestamp))%remaining;\r\n        if(numero < 0) {\r\n            numero *= -1;\r\n        }\r\n        uint16 chosenOne = 0;\r\n        while (numero >= 0) {\r\n            numero -= (int)(humanArray[chosenOne].max-humanArray[chosenOne].mined);\r\n            if (numero >= 0) {\r\n                chosenOne += 1;\r\n            }\r\n        }\r\n\r\n        // Adding the card to the user\r\n        address newOwner = msg.sender;\r\n        Card memory newCard = Card(chosenOne, newOwner, cardCount[newOwner]);\r\n        cardArray.push(newCard);\r\n\r\n        // This card is the last one\r\n        indexCard[newOwner][cardCount[newOwner]] = cardMined;\r\n        cardCount[newOwner] += 1;\r\n\r\n        // Updating cards informations\r\n        cardMined += 1;\r\n        humanArray[chosenOne].mined += 1;\r\n\r\n        // Sending the fund to the owner\r\n        if(!owner.send(cardPrice)) {\r\n           revert();\r\n        }\r\n\r\n         Mined(newOwner, chosenOne);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Sale functions\r\n    function createSellOrder(uint256 _tokenId, uint price) public {\r\n        require(_tokenId < cardMined);\r\n        require(msg.sender == ownerOf(_tokenId));\r\n\r\n        SellOrder memory newOrder = SellOrder(msg.sender, _tokenId, price);\r\n        sellOrderList.push(newOrder);\r\n\r\n        cardArray[_tokenId].owner = address(0);\r\n        cardCount[msg.sender] -= 1;\r\n\r\n        // Change the indexCard of sender\r\n        indexCard[msg.sender][cardArray[_tokenId].indexUser] = indexCard[msg.sender][cardCount[msg.sender]];\r\n        cardArray[indexCard[msg.sender][cardCount[msg.sender]]].indexUser = cardArray[_tokenId].indexUser;\r\n    }\r\n\r\n    function processSellOrder(uint id, uint256 _tokenId) payable public {\r\n        require(id < sellOrderList.length);\r\n\r\n        SellOrder memory order = sellOrderList[id];\r\n        require(order.card == _tokenId);\r\n        require(msg.value == order.price);\r\n        require(msg.sender != order.seller);\r\n\r\n        // Sending fund to the seller\r\n        if(!order.seller.send(msg.value)) {\r\n           revert();\r\n        }\r\n\r\n        // Adding card to the buyer\r\n        cardArray[_tokenId].owner = msg.sender;\r\n\r\n        // This card is the last one for the new owner\r\n        cardArray[_tokenId].indexUser = cardCount[msg.sender];\r\n        indexCard[msg.sender][cardCount[msg.sender]] = _tokenId;\r\n\r\n        cardCount[msg.sender] += 1;\r\n\r\n        // Update list\r\n        sellOrderList[id] = sellOrderList[sellOrderList.length-1];\r\n        delete sellOrderList[sellOrderList.length-1];\r\n        sellOrderList.length--;\r\n    }\r\n\r\n    function cancelSellOrder(uint id, uint256 _tokenId) public {\r\n        require(id < sellOrderList.length);\r\n\r\n        SellOrder memory order = sellOrderList[id];\r\n        require(order.seller == msg.sender);\r\n        require(order.card == _tokenId);\r\n\r\n        // Give back card to seller\r\n        cardArray[_tokenId].owner = msg.sender;\r\n\r\n        // This card is the last one for the new owner\r\n        cardArray[_tokenId].indexUser = cardCount[msg.sender];\r\n        indexCard[msg.sender][cardCount[msg.sender]] = _tokenId;\r\n\r\n        cardCount[msg.sender] += 1;\r\n\r\n        // Update list\r\n        sellOrderList[id] = sellOrderList[sellOrderList.length-1];\r\n        delete sellOrderList[sellOrderList.length-1];\r\n        sellOrderList.length--;\r\n    }\r\n\r\n    function getSellOrder(uint id) public view returns(address seller, uint card, uint price) {\r\n        require(id < sellOrderList.length);\r\n\r\n        SellOrder memory ret = sellOrderList[id];\r\n        return(ret.seller, ret.card, ret.price);\r\n    }\r\n\r\n    function getNbSellOrder() public view returns(uint nb) {\r\n        return sellOrderList.length;\r\n    }\r\n\r\n\r\n    // Get functions\r\n    function getOwner() public view returns(address ret) {\r\n        return owner;\r\n    }\r\n\r\n    function getCardPrice() public view returns(uint ret) {\r\n        return cardPrice;\r\n    }\r\n\r\n    function getHumanNumber() public view returns(uint ret) {\r\n        return humanNumber;\r\n    }\r\n\r\n    function getHumanInfo(uint i) public view returns(string name, uint8 max, uint mined) {\r\n        require(i < humanNumber);\r\n        Human memory h = humanArray[i];\r\n        return (h.name, h.max, h.mined);\r\n    }\r\n\r\n    function getCardNumber() public view returns(uint ret) {\r\n        return cardNumber;\r\n    }\r\n\r\n    function getCardInfo(uint256 _tokenId) public view returns(uint16 human, address owner) {\r\n        require(_tokenId < cardMined);\r\n        Card memory c = cardArray[_tokenId];\r\n        return (c.human, c.owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCardNumber\",\"outputs\":[{\"name\":\"ret\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"b\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNbSellOrder\",\"outputs\":[{\"name\":\"nb\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getHumanInfo\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"max\",\"type\":\"uint8\"},{\"name\":\"mined\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"createSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeCardPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSellOrder\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"card\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"ret\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCardInfo\",\"outputs\":[{\"name\":\"human\",\"type\":\"uint16\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"processSellOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isERC721\",\"outputs\":[{\"name\":\"b\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCardPrice\",\"outputs\":[{\"name\":\"ret\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHumanNumber\",\"outputs\":[{\"name\":\"ret\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"addHuman\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mineCard\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"human\",\"type\":\"uint16\"}],\"name\":\"Mined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"HumanityCard","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://89cff650b2bb9596cc313d6ecedab44f6cabe6815415461f44cde1209b746958"}]}