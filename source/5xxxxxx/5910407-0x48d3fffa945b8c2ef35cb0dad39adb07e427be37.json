{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  ERC20 public token;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // How many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  /**\r\n   * @param _rate Number of token units a buyer gets per wei\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   * @param _token Address of the token being sold\r\n   */\r\n  function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    token = _token;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(_beneficiary, tokens);\r\n    emit TokenPurchase(\r\n      msg.sender,\r\n      _beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    _updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n    _forwardFunds();\r\n    _postValidatePurchase(_beneficiary, weiAmount);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n    token.transfer(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n    return _weiAmount.mul(rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\r\n\r\n/**\r\n * @title TimedCrowdsale\r\n * @dev Crowdsale accepting contributions only within a time frame.\r\n */\r\ncontract TimedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public openingTime;\r\n  uint256 public closingTime;\r\n\r\n  /**\r\n   * @dev Reverts if not in crowdsale time range.\r\n   */\r\n  modifier onlyWhileOpen {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor, takes crowdsale opening and closing times.\r\n   * @param _openingTime Crowdsale opening time\r\n   * @param _closingTime Crowdsale closing time\r\n   */\r\n  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(_openingTime >= block.timestamp);\r\n    require(_closingTime >= _openingTime);\r\n\r\n    openingTime = _openingTime;\r\n    closingTime = _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n   * @return Whether crowdsale period has elapsed\r\n   */\r\n  function hasClosed() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp > closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring to be within contributing period\r\n   * @param _beneficiary Token purchaser\r\n   * @param _weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is TimedCrowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasClosed());\r\n\r\n    finalization();\r\n    emit Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol\r\n\r\n/**\r\n * @title MintedCrowdsale\r\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\r\n * Token ownership should be transferred to MintedCrowdsale for minting. \r\n */\r\ncontract MintedCrowdsale is Crowdsale {\r\n\r\n  /**\r\n   * @dev Overrides delivery by minting tokens upon purchase.\r\n   * @param _beneficiary Token purchaser\r\n   * @param _tokenAmount Number of tokens to be minted\r\n   */\r\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\r\n  }\r\n}\r\n\r\n// File: contracts/PostKYCCrowdsale.sol\r\n\r\n/// @title PostKYCCrowdsale\r\n/// @author Sicos et al.\r\ncontract PostKYCCrowdsale is Crowdsale, Ownable {\r\n\r\n    struct Investment {\r\n        bool isVerified;         // wether or not the investor passed the KYC process\r\n        uint totalWeiInvested;   // total invested wei regardless of verification state\r\n        // amount of token an unverified investor bought. should be zero for verified investors\r\n        uint pendingTokenAmount;\r\n    }\r\n\r\n    // total amount of wei held by unverified investors should never be larger than this.balance\r\n    uint public pendingWeiAmount = 0;\r\n\r\n    // maps investor addresses to investment information\r\n    mapping(address => Investment) public investments;\r\n\r\n    /// @dev Log entry on investor verified\r\n    /// @param investor the investor's Ethereum address\r\n    event InvestorVerified(address investor);\r\n\r\n    /// @dev Log entry on tokens delivered\r\n    /// @param investor the investor's Ethereum address\r\n    /// @param amount token amount delivered\r\n    event TokensDelivered(address investor, uint amount);\r\n\r\n    /// @dev Log entry on investment withdrawn\r\n    /// @param investor the investor's Ethereum address\r\n    /// @param value the wei amount withdrawn\r\n    event InvestmentWithdrawn(address investor, uint value);\r\n\r\n    /// @dev Verify investors\r\n    /// @param _investors list of investors' Ethereum addresses\r\n    function verifyInvestors(address[] _investors) public onlyOwner {\r\n        for (uint i = 0; i < _investors.length; ++i) {\r\n            address investor = _investors[i];\r\n            Investment storage investment = investments[investor];\r\n\r\n            if (!investment.isVerified) {\r\n                investment.isVerified = true;\r\n\r\n                emit InvestorVerified(investor);\r\n\r\n                uint pendingTokenAmount = investment.pendingTokenAmount;\r\n                // now we issue tokens to the verfied investor\r\n                if (pendingTokenAmount > 0) {\r\n                    investment.pendingTokenAmount = 0;\r\n\r\n                    _forwardFunds(investment.totalWeiInvested);\r\n                    _deliverTokens(investor, pendingTokenAmount);\r\n\r\n                    emit TokensDelivered(investor, pendingTokenAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Withdraw investment\r\n    /// @dev Investors that are not verified can withdraw their funds\r\n    function withdrawInvestment() public {\r\n        Investment storage investment = investments[msg.sender];\r\n\r\n        require(!investment.isVerified);\r\n\r\n        uint totalWeiInvested = investment.totalWeiInvested;\r\n\r\n        require(totalWeiInvested > 0);\r\n\r\n        investment.totalWeiInvested = 0;\r\n        investment.pendingTokenAmount = 0;\r\n\r\n        pendingWeiAmount = pendingWeiAmount.sub(totalWeiInvested);\r\n\r\n        msg.sender.transfer(totalWeiInvested);\r\n\r\n        emit InvestmentWithdrawn(msg.sender, totalWeiInvested);\r\n\r\n        assert(pendingWeiAmount <= address(this).balance);\r\n    }\r\n\r\n    /// @dev Prevalidate purchase\r\n    /// @param _beneficiary the investor's Ethereum address\r\n    /// @param _weiAmount the wei amount invested\r\n    function _preValidatePurchase(address _beneficiary, uint _weiAmount) internal {\r\n        // We only want the msg.sender to buy tokens\r\n        require(_beneficiary == msg.sender);\r\n\r\n        super._preValidatePurchase(_beneficiary, _weiAmount);\r\n    }\r\n\r\n    /// @dev Process purchase\r\n    /// @param _tokenAmount the token amount purchased\r\n    function _processPurchase(address, uint _tokenAmount) internal {\r\n        Investment storage investment = investments[msg.sender];\r\n        investment.totalWeiInvested = investment.totalWeiInvested.add(msg.value);\r\n\r\n        if (investment.isVerified) {\r\n            // If the investor's KYC is already verified we issue the tokens imediatly\r\n            _deliverTokens(msg.sender, _tokenAmount);\r\n            emit TokensDelivered(msg.sender, _tokenAmount);\r\n        } else {\r\n            // If the investor's KYC is not verified we store the pending token amount\r\n            investment.pendingTokenAmount = investment.pendingTokenAmount.add(_tokenAmount);\r\n            pendingWeiAmount = pendingWeiAmount.add(msg.value);\r\n        }\r\n    }\r\n\r\n    /// @dev Forward funds\r\n    function _forwardFunds() internal {\r\n        // Ensure the investor was verified, i.e. his purchased tokens were delivered,\r\n        // before forwarding funds.\r\n        if (investments[msg.sender].isVerified) {\r\n            super._forwardFunds();\r\n        }\r\n    }\r\n\r\n    /// @dev Forward funds\r\n    /// @param _weiAmount the amount to be transfered\r\n    function _forwardFunds(uint _weiAmount) internal {\r\n        pendingWeiAmount = pendingWeiAmount.sub(_weiAmount);\r\n        wallet.transfer(_weiAmount);\r\n    }\r\n\r\n    /// @dev Postvalidate purchase\r\n    /// @param _weiAmount the amount invested\r\n    function _postValidatePurchase(address, uint _weiAmount) internal {\r\n        super._postValidatePurchase(msg.sender, _weiAmount);\r\n        // checking invariant\r\n        assert(pendingWeiAmount <= address(this).balance);\r\n    }\r\n\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/CappedToken.sol\r\n\r\n/**\r\n * @title Capped token\r\n * @dev Mintable token with a token cap.\r\n */\r\ncontract CappedToken is MintableToken {\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedToken(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    require(totalSupply_.add(_amount) <= cap);\r\n\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n// File: contracts/VreoToken.sol\r\n\r\n/// @title VreoToken\r\n/// @author Sicos et al.\r\ncontract VreoToken is CappedToken, PausableToken, BurnableToken {\r\n\r\n    uint public constant TOTAL_TOKEN_CAP = 700000000e18;  // = 700.000.000 e18\r\n\r\n    string public name = \"MERO Token\";\r\n    string public symbol = \"MERO\";\r\n    uint8 public decimals = 18;\r\n\r\n    /// @dev Constructor\r\n    constructor() public CappedToken(TOTAL_TOKEN_CAP) {\r\n        pause();\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/VreoTokenSale.sol\r\n\r\n/// @title VreoTokenSale\r\n/// @author Sicos et al.\r\ncontract VreoTokenSale is PostKYCCrowdsale, FinalizableCrowdsale, MintedCrowdsale {\r\n\r\n    // Maxmimum number of tokens sold in Presale+Iconiq+Vreo sales\r\n    uint public constant TOTAL_TOKEN_CAP_OF_SALE = 450000000e18;  // = 450.000.000 e18\r\n\r\n    // Extra tokens minted upon finalization\r\n    uint public constant TOKEN_SHARE_OF_TEAM     =  85000000e18;  // =  85.000.000 e18\r\n    uint public constant TOKEN_SHARE_OF_ADVISORS =  58000000e18;  // =  58.000.000 e18\r\n    uint public constant TOKEN_SHARE_OF_LEGALS   =  57000000e18;  // =  57.000.000 e18\r\n    uint public constant TOKEN_SHARE_OF_BOUNTY   =  50000000e18;  // =  50.000.000 e18\r\n\r\n    // Extra token percentages\r\n    uint public constant BONUS_PCT_IN_ICONIQ_SALE       = 30;  // TBD\r\n    uint public constant BONUS_PCT_IN_VREO_SALE_PHASE_1 = 20;\r\n    uint public constant BONUS_PCT_IN_VREO_SALE_PHASE_2 = 10;\r\n\r\n    // Date/time constants\r\n    uint public constant ICONIQ_SALE_OPENING_TIME   = 1531123200;  // 2018-07-09 10:00:00 CEST\r\n    uint public constant ICONIQ_SALE_CLOSING_TIME   = 1532376000;  // 2018-07-23 22:00:00 CEST\r\n    uint public constant VREO_SALE_OPENING_TIME     = 1533369600;  // 2018-08-04 10:00:00 CEST\r\n    uint public constant VREO_SALE_PHASE_1_END_TIME = 1533672000;  // 2018-08-07 22:00:00 CEST\r\n    uint public constant VREO_SALE_PHASE_2_END_TIME = 1534276800;  // 2018-08-14 22:00:00 CEST\r\n    uint public constant VREO_SALE_CLOSING_TIME     = 1535832000;  // 2018-09-01 22:00:00 CEST\r\n    uint public constant KYC_VERIFICATION_END_TIME  = 1537041600;  // 2018-09-15 22:00:00 CEST\r\n\r\n    // Amount of ICONIQ token investors need per Wei invested in ICONIQ PreSale.\r\n    uint public constant ICONIQ_TOKENS_NEEDED_PER_INVESTED_WEI = 450;\r\n\r\n    // ICONIQ Token\r\n    ERC20Basic public iconiqToken;\r\n\r\n    // addresses token shares are minted to in finalization\r\n    address public teamAddress;\r\n    address public advisorsAddress;\r\n    address public legalsAddress;\r\n    address public bountyAddress;\r\n\r\n    // Amount of token available for purchase\r\n    uint public remainingTokensForSale;\r\n\r\n    /// @dev Log entry on rate changed\r\n    /// @param newRate the new rate\r\n    event RateChanged(uint newRate);\r\n\r\n    /// @dev Constructor\r\n    /// @param _token A VreoToken\r\n    /// @param _rate the initial rate.\r\n    /// @param _iconiqToken An IconiqInterface\r\n    /// @param _teamAddress Ethereum address of Team\r\n    /// @param _advisorsAddress Ethereum address of Advisors\r\n    /// @param _legalsAddress Ethereum address of Legals\r\n    /// @param _bountyAddress A VreoTokenBounty\r\n    /// @param _wallet MultiSig wallet address the ETH is forwarded to.\r\n    constructor(\r\n        VreoToken _token,\r\n        uint _rate,\r\n        ERC20Basic _iconiqToken,\r\n        address _teamAddress,\r\n        address _advisorsAddress,\r\n        address _legalsAddress,\r\n        address _bountyAddress,\r\n        address _wallet\r\n    )\r\n        public\r\n        Crowdsale(_rate, _wallet, _token)\r\n        TimedCrowdsale(ICONIQ_SALE_OPENING_TIME, VREO_SALE_CLOSING_TIME)\r\n    {\r\n        // Token sanity check\r\n        require(_token.cap() >= TOTAL_TOKEN_CAP_OF_SALE\r\n                                + TOKEN_SHARE_OF_TEAM\r\n                                + TOKEN_SHARE_OF_ADVISORS\r\n                                + TOKEN_SHARE_OF_LEGALS\r\n                                + TOKEN_SHARE_OF_BOUNTY);\r\n\r\n        // Sanity check of addresses\r\n        require(address(_iconiqToken) != address(0)\r\n                && _teamAddress != address(0)\r\n                && _advisorsAddress != address(0)\r\n                && _legalsAddress != address(0)\r\n                && _bountyAddress != address(0));\r\n\r\n        iconiqToken = _iconiqToken;\r\n        teamAddress = _teamAddress;\r\n        advisorsAddress = _advisorsAddress;\r\n        legalsAddress = _legalsAddress;\r\n        bountyAddress = _bountyAddress;\r\n\r\n        remainingTokensForSale = TOTAL_TOKEN_CAP_OF_SALE;\r\n    }\r\n\r\n    /// @dev Distribute presale\r\n    /// @param _investors  list of investor addresses\r\n    /// @param _amounts  list of token amounts purchased by investors\r\n    function distributePresale(address[] _investors, uint[] _amounts) public onlyOwner {\r\n        require(!hasClosed());\r\n        require(_investors.length == _amounts.length);\r\n\r\n        uint totalAmount = 0;\r\n\r\n        for (uint i = 0; i < _investors.length; ++i) {\r\n            VreoToken(token).mint(_investors[i], _amounts[i]);\r\n            totalAmount = totalAmount.add(_amounts[i]);\r\n        }\r\n\r\n        require(remainingTokensForSale >= totalAmount);\r\n        remainingTokensForSale = remainingTokensForSale.sub(totalAmount);\r\n    }\r\n\r\n    /// @dev Set rate\r\n    /// @param _newRate the new rate\r\n    function setRate(uint _newRate) public onlyOwner {\r\n        // A rate change by a magnitude order of ten and above is rather a typo than intention.\r\n        // If it was indeed desired, several setRate transactions have to be sent.\r\n        require(rate / 10 < _newRate && _newRate < 10 * rate);\r\n\r\n        rate = _newRate;\r\n\r\n        emit RateChanged(_newRate);\r\n    }\r\n\r\n    /// @dev unverified investors can withdraw their money only after the VREO Sale ended\r\n    function withdrawInvestment() public {\r\n        require(hasClosed());\r\n\r\n        super.withdrawInvestment();\r\n    }\r\n\r\n    /// @dev Is the sale for ICONIQ investors ongoing?\r\n    /// @return bool\r\n    function iconiqSaleOngoing() public view returns (bool) {\r\n        return ICONIQ_SALE_OPENING_TIME <= now && now <= ICONIQ_SALE_CLOSING_TIME;\r\n    }\r\n\r\n    /// @dev Is the Vreo main sale ongoing?\r\n    /// @return bool\r\n    function vreoSaleOngoing() public view returns (bool) {\r\n        return VREO_SALE_OPENING_TIME <= now && now <= VREO_SALE_CLOSING_TIME;\r\n    }\r\n\r\n    /// @dev Get maximum possible wei investment while Iconiq sale\r\n    /// @param _investor an investors Ethereum address\r\n    /// @return Maximum allowed wei investment\r\n    function getIconiqMaxInvestment(address _investor) public view returns (uint) {\r\n        uint iconiqBalance = iconiqToken.balanceOf(_investor);\r\n        uint prorataLimit = iconiqBalance.div(ICONIQ_TOKENS_NEEDED_PER_INVESTED_WEI);\r\n\r\n        // Substract Wei amount already invested.\r\n        require(prorataLimit >= investments[_investor].totalWeiInvested);\r\n        return prorataLimit.sub(investments[_investor].totalWeiInvested);\r\n    }\r\n\r\n    /// @dev Pre validate purchase\r\n    /// @param _beneficiary an investors Ethereum address\r\n    /// @param _weiAmount wei amount invested\r\n    function _preValidatePurchase(address _beneficiary, uint _weiAmount) internal {\r\n        super._preValidatePurchase(_beneficiary, _weiAmount);\r\n\r\n        require(iconiqSaleOngoing() && getIconiqMaxInvestment(msg.sender) >= _weiAmount || vreoSaleOngoing());\r\n    }\r\n\r\n    /// @dev Get token amount\r\n    /// @param _weiAmount wei amount invested\r\n    /// @return token amount with bonus\r\n    function _getTokenAmount(uint _weiAmount) internal view returns (uint) {\r\n        uint tokenAmount = super._getTokenAmount(_weiAmount);\r\n\r\n        if (now <= ICONIQ_SALE_CLOSING_TIME) {\r\n            return tokenAmount.mul(100 + BONUS_PCT_IN_ICONIQ_SALE).div(100);\r\n        }\r\n\r\n        if (now <= VREO_SALE_PHASE_1_END_TIME) {\r\n            return tokenAmount.mul(100 + BONUS_PCT_IN_VREO_SALE_PHASE_1).div(100);\r\n        }\r\n\r\n        if (now <= VREO_SALE_PHASE_2_END_TIME) {\r\n            return tokenAmount.mul(100 + BONUS_PCT_IN_VREO_SALE_PHASE_2).div(100);\r\n        }\r\n\r\n        return tokenAmount;  // No bonus\r\n    }\r\n\r\n    /// @dev Deliver tokens\r\n    /// @param _beneficiary an investors Ethereum address\r\n    /// @param _tokenAmount token amount to deliver\r\n    function _deliverTokens(address _beneficiary, uint _tokenAmount) internal {\r\n        require(remainingTokensForSale >= _tokenAmount);\r\n        remainingTokensForSale = remainingTokensForSale.sub(_tokenAmount);\r\n\r\n        super._deliverTokens(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    /// @dev Finalization\r\n    function finalization() internal {\r\n        require(now >= KYC_VERIFICATION_END_TIME);\r\n\r\n        VreoToken(token).mint(teamAddress, TOKEN_SHARE_OF_TEAM);\r\n        VreoToken(token).mint(advisorsAddress, TOKEN_SHARE_OF_ADVISORS);\r\n        VreoToken(token).mint(legalsAddress, TOKEN_SHARE_OF_LEGALS);\r\n        VreoToken(token).mint(bountyAddress, TOKEN_SHARE_OF_BOUNTY);\r\n\r\n        VreoToken(token).finishMinting();\r\n        VreoToken(token).unpause();\r\n\r\n        super.finalization();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"advisorsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VREO_SALE_PHASE_1_END_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"legalsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingWeiAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iconiqToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getIconiqMaxInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SHARE_OF_ADVISORS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYC_VERIFICATION_END_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SHARE_OF_TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investments\",\"outputs\":[{\"name\":\"isVerified\",\"type\":\"bool\"},{\"name\":\"totalWeiInvested\",\"type\":\"uint256\"},{\"name\":\"pendingTokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VREO_SALE_OPENING_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SHARE_OF_BOUNTY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_PCT_IN_VREO_SALE_PHASE_1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investors\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributePresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_TOKEN_CAP_OF_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investors\",\"type\":\"address[]\"}],\"name\":\"verifyInvestors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SHARE_OF_LEGALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_PCT_IN_ICONIQ_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_PCT_IN_VREO_SALE_PHASE_2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VREO_SALE_CLOSING_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICONIQ_SALE_OPENING_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iconiqSaleOngoing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICONIQ_TOKENS_NEEDED_PER_INVESTED_WEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VREO_SALE_PHASE_2_END_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICONIQ_SALE_CLOSING_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vreoSaleOngoing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_iconiqToken\",\"type\":\"address\"},{\"name\":\"_teamAddress\",\"type\":\"address\"},{\"name\":\"_advisorsAddress\",\"type\":\"address\"},{\"name\":\"_legalsAddress\",\"type\":\"address\"},{\"name\":\"_bountyAddress\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"InvestorVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InvestmentWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"VreoTokenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bf952ed8472a47cc6b5119cde96565553c187c300000000000000000000000000000000000000000000000000000000000002508000000000000000000000000b3e2cb7cccfe139f8ff84013823bf22da6b6390a000000000000000000000000481481dd253fed1888254805944c9412eb0a987d000000000000000000000000021b92178144bdf2288f4986efb7d06aaadb19f8000000000000000000000000a085ed2744ab0e502bd3694ffcb7610b54c627ad0000000000000000000000005d8afc47687abfa7ae41147669bd4a0d503052bd000000000000000000000000850b320ab48db9015f64c41f260283287e50d047","Library":"","SwarmSource":"bzzr://d9feef13bf588358f997e77243d9b3ca7e07c94ed2778f99cdcb443b5f2e3cfa"}]}