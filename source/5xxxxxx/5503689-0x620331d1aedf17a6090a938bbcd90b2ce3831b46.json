{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title BitImageToken\r\n * @dev ERC20 burnable token based on OpenZeppelin's implementation.\r\n */\r\ncontract BitImageToken is StandardToken, BurnableToken, Ownable {\r\n\r\n    /**\r\n     * @dev Event for tokens timelock logging.\r\n     * @param _holder {address} the holder of tokens after they are released.\r\n     * @param _releaseTime {uint256} the UNIX timestamp when token release is enabled.\r\n     */\r\n    event Timelock(address indexed _holder, uint256 _releaseTime);\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    bool public released;\r\n    address public saleAgent;\r\n\r\n    mapping (address => uint256) public timelock;\r\n\r\n    modifier onlySaleAgent() {\r\n        require(msg.sender == saleAgent);\r\n        _;\r\n    }\r\n\r\n    modifier whenReleased() {\r\n        if (timelock[msg.sender] != 0) {\r\n            require(released && now > timelock[msg.sender]);\r\n        } else {\r\n            require(released || msg.sender == saleAgent);\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Constructor instantiates token supply and allocates balanace to the owner.\r\n     */\r\n    function BitImageToken() public {\r\n        name = \"Bitimage Token\";\r\n        symbol = \"BIM\";\r\n        decimals = 18;\r\n        released = false;\r\n        totalSupply = 10000000000 ether;\r\n        balances[msg.sender] = totalSupply;\r\n        Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Associates this token with a specified sale agent. The sale agent will be able\r\n     * to call transferFrom() function to transfer tokens during crowdsale.\r\n     * @param _saleAgent {address} the address of a sale agent that will sell this token.\r\n     */\r\n    function setSaleAgent(address _saleAgent) public onlyOwner {\r\n        require(_saleAgent != address(0));\r\n        require(saleAgent == address(0));\r\n        saleAgent = _saleAgent;\r\n        super.approve(saleAgent, totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the released flag to true which enables to transfer tokens after crowdsale is end.\r\n     * Once released, it is not possible to disable transfers.\r\n     */\r\n    function release() public onlySaleAgent {\r\n        released = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets time when token release is enabled for specified holder.\r\n     * @param _holder {address} the holder of tokens after they are released.\r\n     * @param _releaseTime {uint256} the UNIX timestamp when token release is enabled.\r\n     */\r\n    function lock(address _holder, uint256 _releaseTime) public onlySaleAgent {\r\n        require(_holder != address(0));\r\n        require(_releaseTime > now);\r\n        timelock[_holder] = _releaseTime;\r\n        Timelock(_holder, _releaseTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers tokens to specified address.\r\n     * Overrides the transfer() function with modifier that prevents the ability to transfer\r\n     * tokens by holders unitl release time. Only sale agent can transfer tokens unitl release time.\r\n     * @param _to {address} the address to transfer to.\r\n     * @param _value {uint256} the amount of tokens to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public whenReleased returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers tokens from one address to another.\r\n     * Overrides the transferFrom() function with modifier that prevents the ability to transfer\r\n     * tokens by holders unitl release time. Only sale agent can transfer tokens unitl release time.\r\n     * @param _from {address} the address to send from.\r\n     * @param _to {address} the address to transfer to.\r\n     * @param _value {uint256} the amount of tokens to be transferred.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenReleased returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Overrides the approve() function with  modifier that prevents the ability to approve the passed\r\n     * address to spend the specified amount of tokens until release time.\r\n     * @param _spender {address} the address which will spend the funds.\r\n     * @param _value {uint256} the amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public whenReleased returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increment allowed value.\r\n     * Overrides the increaseApproval() function with modifier that prevents the ability to increment\r\n     * allowed value until release time.\r\n     * @param _spender {address} the address which will spend the funds.\r\n     * @param _addedValue {uint} the amount of tokens to be added.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public whenReleased returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Dicrement allowed value.\r\n     * Overrides the decreaseApproval() function with modifier that prevents the ability to dicrement\r\n     * allowed value until release time.\r\n     * @param _spender {address} the address which will spend the funds.\r\n     * @param _subtractedValue {uint} the amount of tokens to be subtracted.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenReleased returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specified amount of tokens.\r\n     * Overrides the burn() function with modifier that prevents the ability to burn tokens\r\n     * by holders excluding the sale agent.\r\n     * @param _value {uint256} the amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public onlySaleAgent {\r\n        super.burn(_value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specified amount of tokens from specified address.\r\n     * @param _from {address} the address to burn from.\r\n     * @param _value {uint256} the amount of token to be burned.\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public onlySaleAgent {\r\n        require(_value > 0);\r\n        require(_value <= balances[_from]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(_from, _value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title BitImageCrowdsale\r\n * @dev The BitImageCrowdsale contract is used for selling BitImageToken tokens (BIM).\r\n */\r\ncontract BitImageTokenSale is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Event for token purchase logging.\r\n     * @param _investor {address} the address of investor.\r\n     * @param _weiAmount {uint256} the amount of contributed Ether.\r\n     * @param _tokenAmount {uint256} the amount of tokens purchased.\r\n     */\r\n    event TokenPurchase(address indexed _investor, uint256 _weiAmount, uint256 _tokenAmount);\r\n\r\n    /**\r\n     * @dev Event for Ether Refunding logging.\r\n     * @param _investor {address} the address of investor.\r\n     * @param _weiAmount {uint256} the amount of Ether to be refunded.\r\n     */\r\n    event Refunded(address indexed _investor, uint256 _weiAmount);\r\n\r\n    BitImageToken public token;\r\n\r\n    address public walletEtherPresale;\r\n    address public walletEhterCrowdsale;\r\n\r\n    address public walletTokenTeam;\r\n    address[] public walletTokenAdvisors;\r\n    address public walletTokenBounty;\r\n    address public walletTokenReservation;\r\n\r\n    uint256 public startTime;\r\n    uint256 public period;\r\n    uint256 public periodPresale;\r\n    uint256 public periodCrowdsale;\r\n    uint256 public periodWeek;\r\n\r\n    uint256 public weiMinInvestment;\r\n    uint256 public weiMaxInvestment;\r\n\r\n    uint256 public rate;\r\n\r\n    uint256 public softCap;\r\n    uint256 public goal;\r\n    uint256 public goalIncrement;\r\n    uint256 public hardCap;\r\n\r\n    uint256 public tokenIcoAllocated;\r\n    uint256 public tokenTeamAllocated;\r\n    uint256 public tokenAdvisorsAllocated;\r\n    uint256 public tokenBountyAllocated;\r\n    uint256 public tokenReservationAllocated;\r\n\r\n    uint256 public weiTotalReceived;\r\n\r\n    uint256 public tokenTotalSold;\r\n\r\n    uint256 public weiTotalRefunded;\r\n\r\n    uint256 public bonus;\r\n    uint256 public bonusDicrement;\r\n    uint256 public bonusAfterPresale;\r\n\r\n    struct Investor {\r\n        uint256 weiContributed;\r\n        uint256 tokenBuyed;\r\n        bool refunded;\r\n    }\r\n\r\n    mapping (address => Investor) private investors;\r\n    address[] private investorsIndex;\r\n\r\n    enum State { NEW, PRESALE, CROWDSALE, CLOSED }\r\n    State public state;\r\n\r\n\r\n    /**\r\n     * @dev Constructor for a crowdsale of BitImageToken tokens.\r\n     */\r\n    function BitImageTokenSale() public {\r\n        walletEtherPresale = 0xE19f0ccc003a36396FE9dA4F344157B2c60A4B8E;\r\n        walletEhterCrowdsale = 0x10e5f0e94A43FA7C9f7F88F42a6a861312aD1d31;\r\n        walletTokenTeam = 0x35425E32fE41f167990DBEa1010132E9669Fa500;\r\n        walletTokenBounty = 0x91325c4a25893d80e26b4dC14b964Cf5a27fECD8;\r\n        walletTokenReservation = 0x4795eC1E7C24B80001eb1F43206F6e075fCAb4fc;\r\n        walletTokenAdvisors = [\r\n            0x2E308F904C831e41329215a4807d9f1a82B67eE2,\r\n            0x331274f61b3C976899D6FeB6f18A966A50E98C8d,\r\n            0x6098b02d10A1f27E39bCA219CeB56355126EC74f,\r\n            0xC14C105430C13e6cBdC8DdB41E88fD88b9325927\r\n        ];\r\n        periodPresale = 4 weeks;\r\n        periodCrowdsale = 6 weeks;\r\n        periodWeek = 1 weeks;\r\n        weiMinInvestment = 0.1 ether;\r\n        weiMaxInvestment = 500 ether;\r\n        rate = 130000;\r\n        softCap = 2000 ether;\r\n        goal = 6000 ether;\r\n        goalIncrement = goal;\r\n        hardCap = 42000 ether;\r\n        bonus = 30;\r\n        bonusDicrement = 5;\r\n        state = State.NEW;\r\n        pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function is called whenever Ether is sent to the contract.\r\n     */\r\n    function() external payable {\r\n        purchase(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Initilizes the token with given address and allocates tokens.\r\n     * @param _token {address} the address of token contract.\r\n     */\r\n    function setToken(address _token) external onlyOwner whenPaused {\r\n        require(state == State.NEW);\r\n        require(_token != address(0));\r\n        require(token == address(0));\r\n        token = BitImageToken(_token);\r\n        tokenIcoAllocated = token.totalSupply().mul(62).div(100);\r\n        tokenTeamAllocated = token.totalSupply().mul(18).div(100);\r\n        tokenAdvisorsAllocated = token.totalSupply().mul(4).div(100);\r\n        tokenBountyAllocated = token.totalSupply().mul(6).div(100);\r\n        tokenReservationAllocated = token.totalSupply().mul(10).div(100);\r\n        require(token.totalSupply() == tokenIcoAllocated.add(tokenTeamAllocated).add(tokenAdvisorsAllocated).add(tokenBountyAllocated).add(tokenReservationAllocated));\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the start time.\r\n     * @param _startTime {uint256} the UNIX timestamp when to start the sale.\r\n     */\r\n    function start(uint256 _startTime) external onlyOwner whenPaused {\r\n        require(_startTime >= now);\r\n        require(token != address(0));\r\n        if (state == State.NEW) {\r\n            state = State.PRESALE;\r\n            period = periodPresale;\r\n        } else if (state == State.PRESALE && weiTotalReceived >= softCap) {\r\n            state = State.CROWDSALE;\r\n            period = periodCrowdsale;\r\n            bonusAfterPresale = bonus.sub(bonusDicrement);\r\n            bonus = bonusAfterPresale;\r\n        } else {\r\n            revert();\r\n        }\r\n        startTime = _startTime;\r\n        unpause();\r\n    }\r\n\r\n    /**\r\n     * @dev Finalizes the sale.\r\n     */\r\n    function finalize() external onlyOwner {\r\n        require(weiTotalReceived >= softCap);\r\n        require(now > startTime.add(period) || weiTotalReceived >= hardCap);\r\n\r\n        if (state == State.PRESALE) {\r\n            require(this.balance > 0);\r\n            walletEtherPresale.transfer(this.balance);\r\n            pause();\r\n        } else if (state == State.CROWDSALE) {\r\n            uint256 tokenTotalUnsold = tokenIcoAllocated.sub(tokenTotalSold);\r\n            tokenReservationAllocated = tokenReservationAllocated.add(tokenTotalUnsold);\r\n\r\n            require(token.transferFrom(token.owner(), walletTokenBounty, tokenBountyAllocated));\r\n            require(token.transferFrom(token.owner(), walletTokenReservation, tokenReservationAllocated));\r\n            require(token.transferFrom(token.owner(), walletTokenTeam, tokenTeamAllocated));\r\n            token.lock(walletTokenReservation, now + 0.5 years);\r\n            token.lock(walletTokenTeam, now + 1 years);\r\n            uint256 tokenAdvisor = tokenAdvisorsAllocated.div(walletTokenAdvisors.length);\r\n            for (uint256 i = 0; i < walletTokenAdvisors.length; i++) {\r\n                require(token.transferFrom(token.owner(), walletTokenAdvisors[i], tokenAdvisor));\r\n                token.lock(walletTokenAdvisors[i], now + 0.5 years);\r\n            }\r\n\r\n            token.release();\r\n            state = State.CLOSED;\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows investors to get refund in case when ico is failed.\r\n     */\r\n    function refund() external whenNotPaused {\r\n        require(state == State.PRESALE);\r\n        require(now > startTime.add(period));\r\n        require(weiTotalReceived < softCap);\r\n\r\n        require(this.balance > 0);\r\n\r\n        Investor storage investor = investors[msg.sender];\r\n\r\n        require(investor.weiContributed > 0);\r\n        require(!investor.refunded);\r\n\r\n        msg.sender.transfer(investor.weiContributed);\r\n        token.burnFrom(msg.sender, investor.tokenBuyed);\r\n        investor.refunded = true;\r\n        weiTotalRefunded = weiTotalRefunded.add(investor.weiContributed);\r\n\r\n        Refunded(msg.sender, investor.weiContributed);\r\n    }\r\n\r\n    function purchase(address _investor) private whenNotPaused {\r\n        require(state == State.PRESALE || state == State.CROWDSALE);\r\n        require(now >= startTime && now <= startTime.add(period));\r\n\r\n        if (state == State.CROWDSALE) {\r\n            uint256 timeFromStart = now.sub(startTime);\r\n            if (timeFromStart > periodWeek) {\r\n                uint256 currentWeek = timeFromStart.div(1 weeks);\r\n                uint256 bonusWeek = bonusAfterPresale.sub(bonusDicrement.mul(currentWeek));\r\n                if (bonus > bonusWeek) {\r\n                    bonus = bonusWeek;\r\n                }\r\n                currentWeek++;\r\n                periodWeek = currentWeek.mul(1 weeks);\r\n            }\r\n        }\r\n\r\n        uint256 weiAmount = msg.value;\r\n        require(weiAmount >= weiMinInvestment && weiAmount <= weiMaxInvestment);\r\n\r\n        uint256 tokenAmount = weiAmount.mul(rate);\r\n        uint256 tokenBonusAmount = tokenAmount.mul(bonus).div(100);\r\n        tokenAmount = tokenAmount.add(tokenBonusAmount);\r\n\r\n        weiTotalReceived = weiTotalReceived.add(weiAmount);\r\n        tokenTotalSold = tokenTotalSold.add(tokenAmount);\r\n        require(tokenTotalSold <= tokenIcoAllocated);\r\n\r\n        require(token.transferFrom(token.owner(), _investor, tokenAmount));\r\n\r\n        Investor storage investor = investors[_investor];\r\n        if (investor.weiContributed == 0) {\r\n            investorsIndex.push(_investor);\r\n        }\r\n        investor.tokenBuyed = investor.tokenBuyed.add(tokenAmount);\r\n        investor.weiContributed = investor.weiContributed.add(weiAmount);\r\n\r\n        if (state == State.CROWDSALE) {\r\n            walletEhterCrowdsale.transfer(weiAmount);\r\n        }\r\n        TokenPurchase(_investor, weiAmount, tokenAmount);\r\n\r\n        if (weiTotalReceived >= goal) {\r\n            if (state == State.PRESALE) {\r\n                startTime = now;\r\n                period = 1 weeks;\r\n            }\r\n            uint256 delta = weiTotalReceived.sub(goal);\r\n            goal = goal.add(goalIncrement).add(delta);\r\n            bonus = bonus.sub(bonusDicrement);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenIcoAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"walletTokenAdvisors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalIncrement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiMinInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletTokenReservation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAdvisorsAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusDicrement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTotalSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletEhterCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiTotalRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTeamAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiTotalReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletTokenTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletTokenBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiMaxInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletEtherPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusAfterPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReservationAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBountyAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BitImageTokenSale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://db0d70b4866d358997ae97008c35b45aad83feaf01ee409e7995906eed5e5d24"}]}