{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title owned\r\n * @dev The owned contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Controlled\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Controlled is owned {\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken.\r\n */\r\ncontract BasicToken is Controlled{\r\n    using SafeMath for uint256;\r\n    \r\n    uint256       _supply;\r\n    mapping (address => uint256)    _balances;\r\n    \r\n    event Transfer( address indexed from, address indexed to, uint256 value);\r\n\r\n    function BasicToken() public {    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _supply;\r\n    }\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return _balances[_owner];\r\n    }\r\n    \r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(_balances[msg.sender] >= _value && _value > 0);\r\n        \r\n        _balances[msg.sender] =_balances[msg.sender].sub(_value);\r\n        _balances[_to] =_balances[_to].add(_value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n  \r\n}\r\n\r\ncontract AicToken is BasicToken {\r\n    string  constant public symbol = \"AIC\";\r\n    string  constant public name = \"AicBlock\";\r\n    uint256 constant public decimals = 18;\r\n    uint256 public lockedCounts = 0;\r\n\r\n    struct LockStruct {\r\n        uint256 unlockTime;\r\n        bool locked;\r\n    }\r\n    \r\n    uint256[][] public unlockCountArray;\r\n    address[] public addressArray;\r\n    LockStruct[] public unlockTimeMap;\r\n\r\n    function AicToken() public {\r\n        \r\n        _supply = 10*(10**8)*(10**18);\r\n        _balances[0x01] = _supply;\r\n        lockedCounts = _supply;\r\n        \r\n        //2018\r\n        unlockTimeMap.push(LockStruct({unlockTime:1527782400, locked: true})); \r\n        unlockTimeMap.push(LockStruct({unlockTime:1535731200, locked: true})); \r\n        unlockTimeMap.push(LockStruct({unlockTime:1543593600, locked: true})); \r\n        //2019\r\n        unlockTimeMap.push(LockStruct({unlockTime:1551369600, locked: true})); \r\n        unlockTimeMap.push(LockStruct({unlockTime:1559318400, locked: true})); \r\n        unlockTimeMap.push(LockStruct({unlockTime:1567267200, locked: true})); \r\n        unlockTimeMap.push(LockStruct({unlockTime:1575129600, locked: true})); \r\n        //2020\r\n        unlockTimeMap.push(LockStruct({unlockTime:1582992000, locked: true})); \r\n        unlockTimeMap.push(LockStruct({unlockTime:1590940800, locked: true})); \r\n        unlockTimeMap.push(LockStruct({unlockTime:1598889600, locked: true}));\r\n        unlockTimeMap.push(LockStruct({unlockTime:1606752000, locked: true}));\r\n        \r\n        unlockCountArray = new uint256[][](7);\r\n        unlockCountArray[0] = [28000000,10500000,10500000,10500000,10500000,0,0,0,0,0,0];\r\n        unlockCountArray[1] = [70000000,17500000,17500000,17500000,17500000,0,0,0,0,0,0];\r\n        unlockCountArray[2] = [168000000,18000000,18000000,18000000,18000000,0,0,0,0,0,0];\r\n        unlockCountArray[3] = [0,0,25000000,0,25000000,0,0,0,0,0,0];\r\n        unlockCountArray[4] = [0,0,20000000,0,20000000,0,20000000,0,20000000,0,20000000];\r\n        unlockCountArray[5] = [0,0,50000000,0,50000000,0,50000000,0,50000000,0,50000000];\r\n        unlockCountArray[6] = [0,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000];\r\n    \r\n    }\r\n  \r\n    \r\n    function setAddressArr(address[] self) onlyOwner public {\r\n        //Only call once\r\n        require(unlockTimeMap[0].locked);\r\n        require (self.length==7);\r\n        \r\n        addressArray = new address[](self.length);\r\n        for (uint i = 0; i < self.length; i++){\r\n           addressArray[i]=self[i]; \r\n        }\r\n    \r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require (now >= unlockTimeMap[0].unlockTime);\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n     /**\r\n     * @dev unlock , only can be called by owner.\r\n     */\r\n    function unlock(uint256 _index) onlyOwner public {\r\n         \r\n        require (addressArray.length == 7);\r\n        require(_index >= 0 && _index < unlockTimeMap.length);\r\n        require(now >= unlockTimeMap[_index].unlockTime && unlockTimeMap[_index].locked);\r\n\r\n        for (uint _addressIndex = 0; _addressIndex < addressArray.length; _addressIndex++) {\r\n            \r\n          uint256 unlockCount = unlockCountArray[_addressIndex][_index].mul(10**18);\r\n\r\n          require(_balances[0x01] >= unlockCount);\r\n\r\n          _balances[addressArray[_addressIndex]] = _balances[addressArray[_addressIndex]].add(unlockCount);\r\n          _balances[0x01] = _balances[0x01].sub(unlockCount);\r\n          \r\n          lockedCounts = lockedCounts.sub(unlockCount);\r\n\r\n          emit Transfer(0x01, addressArray[_addressIndex], unlockCount);  \r\n        }\r\n\r\n        unlockTimeMap[_index].locked = false;\r\n    }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedCounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockTimeMap\",\"outputs\":[{\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"name\":\"locked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"address[]\"}],\"name\":\"setAddressArr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockCountArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"AicToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://25f80efe5d3191e148401b339122217d702600f8f21228fd8a4c94951106de3b"}]}