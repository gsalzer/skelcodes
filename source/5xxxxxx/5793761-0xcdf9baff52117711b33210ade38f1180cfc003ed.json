{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface ERC20 {\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool);\r\n    function approve(address _spender, uint _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ninterface ERC223 {\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\ncontract ERC223ReceivingContract {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\ncontract Token {\r\n\r\n    string internal _symbol;\r\n    string internal _name;\r\n\r\n    uint8 internal _decimals;\r\n    uint internal _totalSupply;\r\n\r\n    mapping (address => uint) internal _balanceOf;\r\n    mapping (address => mapping (address => uint)) internal _allowances;\r\n\r\n    constructor(string symbol, string name, uint8 decimals, uint totalSupply) public {\r\n        _symbol = symbol;\r\n        _name = name;\r\n        _decimals = decimals;\r\n        _totalSupply = totalSupply;\r\n    }\r\n\r\n    function name()\r\n        public\r\n        view\r\n        returns (string) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol()\r\n        public\r\n        view\r\n        returns (string) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals()\r\n        public\r\n        view\r\n        returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _addr) public view returns (uint);\r\n    function transfer(address _to, uint _value) public returns (bool);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint _base, uint _value)\r\n        internal\r\n        pure\r\n        returns (uint) {\r\n        assert(_value <= _base);\r\n        return _base - _value;\r\n    }\r\n\r\n    function add(uint _base, uint _value)\r\n        internal\r\n        pure\r\n        returns (uint _ret) {\r\n        _ret = _base + _value;\r\n        assert(_ret >= _base);\r\n    }\r\n\r\n    function div(uint _base, uint _value)\r\n        internal\r\n        pure\r\n        returns (uint) {\r\n        assert(_value > 0 && (_base % _value) == 0);\r\n        return _base / _value;\r\n    }\r\n\r\n    function mul(uint _base, uint _value)\r\n        internal\r\n        pure\r\n        returns (uint _ret) {\r\n        _ret = _base * _value;\r\n        assert(0 == _base || _ret / _base == _value);\r\n    }\r\n}\r\n\r\nlibrary Addresses {\r\n    function isContract(address _base) internal view returns (bool) {\r\n        uint codeSize;\r\n            assembly {\r\n            codeSize := extcodesize(_base)\r\n            }\r\n        return codeSize > 0;\r\n    }\r\n}\r\n\r\ncontract MyToken is Token(\"LOCA\", \"Locanza\", 8, 5000000000000000), ERC20, ERC223 {\r\n\r\n    using SafeMath for uint;\r\n    using Addresses for address;\r\n\r\n    address owner;\r\n\r\n    struct lockDetail {\r\n        uint amount;\r\n        uint lockedDate;\r\n        uint daysLocked;\r\n        bool Locked;\r\n    }\r\n\r\n// to keep track of the minting stages\r\n// The meaning of the 5 stages have yet to be determined\r\n// minting will be done after 25 years or earlier when mining bounties are relevant\r\n\r\n    enum Stages {\r\n        FirstLoyaltyProgram,\r\n        Stage1,\r\n        Stage2,\r\n        Stage3,\r\n        Stage4,\r\n        Stage5\r\n    }\r\n    Stages internal stage = Stages.FirstLoyaltyProgram;\r\n\r\n// Locked Balance + Balance = total _totalsupply\r\n    mapping(address=>lockDetail)  _Locked;\r\n\r\n//Lock event\r\n    event Locked(address indexed _locker, uint _amount);\r\n// Unlock event\r\n    event Unlock(address indexed _receiver, uint _amount);\r\n\r\n    modifier onlyOwner () {\r\n        require (owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n//checked\r\n    constructor()\r\n        public {\r\n        owner = msg.sender;\r\n        _balanceOf[msg.sender] = _totalSupply;\r\n    }\r\n\r\n//checked\r\n    function balanceOf(address _addr)\r\n        public\r\n        view\r\n        returns (uint) {\r\n        return _balanceOf[_addr];\r\n    }\r\n//checked\r\n    function transfer(address _to, uint _value)\r\n        public\r\n        returns (bool) {\r\n        return transfer(_to, _value, \"\");\r\n    }\r\n//checked\r\n    function transfer(address _to, uint _value, bytes _data)\r\n        public\r\n        returns (bool) {\r\n        require (_value > 0 &&\r\n            _value <= _balanceOf[msg.sender]); \r\n        \r\n        _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\r\n        _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n            if (_to.isContract()) {\r\n                ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\r\n                _contract.tokenFallback(msg.sender, _value, _data);\r\n            }\r\n  \r\n        \r\n\r\n        return true;\r\n    }\r\n//checked\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public\r\n        returns (bool) {\r\n        return transferFrom(_from, _to, _value, \"\");\r\n    }\r\n\r\n//checked\r\n    function transferFrom(address _from, address _to, uint _value, bytes _data)\r\n        public\r\n        returns (bool) {\r\n        require (_allowances[_from][msg.sender] > 0 && \r\n            _value > 0 &&\r\n            _allowances[_from][msg.sender] >= _value &&\r\n            _balanceOf[_from] >= _value); \r\n\r\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\r\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n        _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        if (_to.isContract()) {\r\n            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\r\n            _contract.tokenFallback(msg.sender, _value, _data);\r\n              }\r\n\r\n        return true;\r\n        \r\n    }\r\n// checked\r\n    function approve(address _spender, uint _value)\r\n        public\r\n        returns (bool) {\r\n        require (_balanceOf[msg.sender] >= _value && _value >= 0); \r\n            _allowances[msg.sender][_spender] = _value;\r\n            emit Approval(msg.sender, _spender, _value);\r\n            return true;\r\n    }\r\n// checked\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint) {\r\n        \r\n        return _allowances[_owner][_spender];\r\n       \r\n    }\r\n\r\n// minting and locking functionality\r\n\r\n\r\n// Minted coins are added to the total supply\r\n// Minted coins have to be locked between 30 and 365 to protect tokenholders\r\n// Only minting sets a new stage (first stage is the FirstLoyaltyProgram after initial token creation)\r\n\r\n    function coinMinter (uint _amount, uint _days) public onlyOwner  returns (bool) {\r\n        require(_amount > 0);\r\n        // max 1 year lock only\r\n        require(_days > 30 && _days <= 365);\r\n    // this is where we eventualy set the total supply\r\n        require (_amount + _totalSupply <= 10000000000000000);\r\n        _totalSupply += _amount;\r\n        stage = Stages(uint(stage)+1);\r\n        lockAfterMinting(_amount, _days);\r\n        return true;\r\n    }\r\n// Only one stage at a time can be minted\r\n// Because of the internal call to lockAfterMinting\r\n\r\n    function lockAfterMinting( uint _amount, uint _days) internal onlyOwner returns(bool) {\r\n     // only one token lock (per stage) is possible\r\n        require(_amount > 0);\r\n        require(_days > 30 && _days <= 365);\r\n        require(_Locked[msg.sender].Locked != true);\r\n        _Locked[msg.sender].amount = _amount;\r\n        _Locked[msg.sender].lockedDate = now;\r\n        _Locked[msg.sender].daysLocked = _days;\r\n        _Locked[msg.sender].Locked = true;\r\n        emit Locked(msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function lockOwnerBalance( uint _amount, uint _days) public onlyOwner returns(bool) {\r\n   // max 1 year lock only\r\n        require(_amount > 0);\r\n        require(_days > 30 && _days <= 365);\r\n        require(_balanceOf[msg.sender] >= _amount);\r\n   // only one token lock (per stage) is possible\r\n        require(_Locked[msg.sender].Locked != true);\r\n  // extract tokens from the owner balance\r\n        _balanceOf[msg.sender] -= _amount;\r\n\r\n        _Locked[msg.sender].amount = _amount;\r\n        _Locked[msg.sender].lockedDate = now;\r\n        _Locked[msg.sender].daysLocked = _days;\r\n        _Locked[msg.sender].Locked = true;\r\n        emit Locked(msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function lockedBalance() public view returns(uint,uint,uint){\r\n        \r\n        return (_Locked[owner].amount,_Locked[owner].lockedDate,_Locked[owner].daysLocked) ;\r\n    }\r\n\r\n// This functions adds te locked tokens to the owner balance\r\n    function unlockOwnerBalance() public onlyOwner returns(bool){\r\n\r\n        require(_Locked[msg.sender].Locked == true);\r\n// require statement regarding the date time require for unlock\r\n// for testing purposes only in seconds\r\n        require(now > _Locked[msg.sender].lockedDate + _Locked[msg.sender].daysLocked * 1 days);\r\n        _balanceOf[msg.sender] += _Locked[msg.sender].amount;\r\n        delete _Locked[msg.sender];\r\n\r\n        emit Unlock(msg.sender, _Locked[msg.sender].amount);\r\n        return true;\r\n    }\r\n\r\n    function getStage() public view returns(string){\r\n\r\n        if (uint(stage)==0) {\r\n            return \"FirstLoyalty\";\r\n        } else if(uint(stage)==1){\r\n            return \"Stage1\";\r\n         } else if (uint(stage)==2){\r\n            return \"Stage2\";\r\n        }  else if(uint(stage)==3){\r\n            return \"Stage3\" ;\r\n        } else if(uint(stage)==4){\r\n            return \"Stage4\" ;\r\n        }else if(uint(stage)==5){\r\n            return \"Stage5\" ;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockOwnerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"lockOwnerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"coinMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_locker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MyToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fd643fe6acbcbf04a899cf24056a212e0c6cea2d2e73748a704434b10a9dad2f"}]}