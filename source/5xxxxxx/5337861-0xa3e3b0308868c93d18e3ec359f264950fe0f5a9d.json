{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function totalSupply() public constant returns (uint256);\r\n\r\n  function balanceOf(address who) public constant returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 token\r\n *\r\n * @dev Implementation of the ERC20 token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20Token is ERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address.\r\n   * @param _owner The address to query the the balance of.\r\n   * @return An uint256 representing the amount owned by the passed address.\r\n   */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev transfer token for a specified address\r\n   * @param _to The address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    public returns (bool success)\r\n  {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    public returns (bool success)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address[] public owners;\r\n\r\n  event OwnerAdded(address indexed authorizer, address indexed newOwner, uint256 index);\r\n\r\n  event OwnerRemoved(address indexed authorizer, address indexed oldOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owners.push(msg.sender);\r\n    OwnerAdded(0x0, msg.sender, 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than one owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    bool isOwner = false;\r\n\r\n    for (uint256 i = 0; i < owners.length; i++) {\r\n      if (msg.sender == owners[i]) {\r\n        isOwner = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    require(isOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows one of the current owners to add a new owner\r\n   * @param newOwner The address give ownership to.\r\n   */\r\n  function addOwner(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    uint256 i = owners.push(newOwner) - 1;\r\n    OwnerAdded(msg.sender, newOwner, i);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows one of the owners to remove other owner\r\n   */\r\n  function removeOwner(uint256 index) onlyOwner public {\r\n    address owner = owners[index];\r\n    owners[index] = owners[owners.length - 1];\r\n    delete owners[owners.length - 1];\r\n    OwnerRemoved(msg.sender, owner);\r\n  }\r\n\r\n  function ownersCount() constant public returns (uint256) {\r\n    return owners.length;\r\n  }\r\n}\r\n\r\n\r\ncontract UpgradableStorage is Ownable {\r\n\r\n  // Address of the current implementation\r\n  address internal _implementation;\r\n\r\n  event NewImplementation(address implementation);\r\n\r\n  /**\r\n  * @dev Tells the address of the current implementation\r\n  * @return address of the current implementation\r\n  */\r\n  function implementation() public view returns (address) {\r\n    return _implementation;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Upgradable\r\n * @dev This contract represents an upgradable contract\r\n */\r\ncontract Upgradable is UpgradableStorage {\r\n  function initialize() public payable { }\r\n}\r\n\r\n\r\n/**\r\n * Base Contract (KNW)\r\n * Upgradable Standard ECR20 Token\r\n */\r\ncontract Base is Upgradable, ERC20Token {\r\n  function name() pure public returns (string) {\r\n    return 'Knowledge.io';\r\n  }\r\n\r\n  function symbol() pure public returns (string) {\r\n    return 'KNW';\r\n  }\r\n\r\n  function decimals() pure public returns (uint8) {\r\n    return 8;\r\n  }\r\n\r\n  function INITIAL_SUPPLY() pure public returns (uint) {\r\n    /** 150,000,000.00000000 KNW tokens */\r\n    return 15000000000000000;\r\n  }\r\n\r\n  function totalSupply() view public returns (uint) {\r\n    return INITIAL_SUPPLY();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * A token upgrade mechanism where users can upgrade tokens\r\n * to the next smart contract revision.\r\n *\r\n * First envisioned by Golem and Lunyr projects.\r\n */\r\ncontract Legacy is Base {\r\n  using SafeMath for uint256;\r\n\r\n  /** The contract from which we upgrade */\r\n  Legacy public prevContract;\r\n\r\n  /**\r\n   * Somebody has upgraded some of their tokens.\r\n   */\r\n  event UpgradeFrom(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * Previous contract available.\r\n   */\r\n  event PrevContractSet(address contractAddress);\r\n\r\n  modifier fromPrevContract() {\r\n    require(msg.sender == address(prevContract));\r\n    _;\r\n  }\r\n\r\n  function upgradeFrom(address holder, uint256 value) fromPrevContract public returns (bool) {\r\n    balances[holder] = value;\r\n    Transfer(address(0), holder, value);\r\n    UpgradeFrom(address(prevContract), holder, value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function setPrevContract(address contractAddress) onlyOwner public returns (bool) {\r\n    require(contractAddress != 0x0);\r\n    prevContract = Legacy(contractAddress);\r\n    PrevContractSet(contractAddress);\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Payable is meant to execute the `transfer` method of the ERC20 Token\r\n * and log a Pay message with a reference message to bind the payment to an\r\n * order id or some other identifier\r\n */\r\ncontract Payable is Legacy {\r\n  struct PaymentRequest {\r\n    uint256 fee;\r\n    uint256 value;\r\n    address seller;\r\n  }\r\n\r\n  mapping (address => mapping(string => PaymentRequest)) private pendingPayments;\r\n\r\n  event Pay(\r\n    address indexed from,\r\n    address indexed seller,\r\n    address indexed store,\r\n    uint256 value,\r\n    uint256 fee,\r\n    string ref\r\n  );\r\n\r\n  function requestPayment(uint256 value, uint256 fee, string ref, address to) public {\r\n    pendingPayments[msg.sender][ref] = PaymentRequest(fee, value, to);\r\n  }\r\n\r\n  function cancelPayment(string ref) public {\r\n    delete pendingPayments[msg.sender][ref];\r\n  }\r\n\r\n  function paymentInfo(address store, string ref) public view returns (uint256 value, uint256 fee, address seller) {\r\n    PaymentRequest memory paymentRequest = pendingPayments[store][ref];\r\n    value = paymentRequest.value;\r\n    fee = paymentRequest.fee;\r\n    seller = paymentRequest.seller;\r\n  }\r\n\r\n  function pay(address store, string ref) public returns (bool) {\r\n    PaymentRequest memory paymentRequest = pendingPayments[store][ref];\r\n\r\n    if (paymentRequest.fee > 0) {\r\n      assert(transfer(store, paymentRequest.fee));\r\n    }\r\n\r\n    assert(transfer(paymentRequest.seller, paymentRequest.value));\r\n\r\n    Pay(msg.sender, paymentRequest.seller, store, paymentRequest.value, paymentRequest.fee, ref);\r\n    delete pendingPayments[store][ref];\r\n\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setPrevContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"ref\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"requestPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgradeFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"cancelPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"store\",\"type\":\"address\"},{\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"paymentInfo\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"store\",\"type\":\"address\"},{\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"pay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"store\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"UpgradeFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"PrevContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"}]","ContractName":"Payable","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cbe9e6846613cc7a1bb0fbfea3ec864b04ca2a985063479d603325f3b11f1c50"}]}