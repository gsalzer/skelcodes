{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\npragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    // precision of division\r\n    uint constant private DIV_PRECISION = 3;\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function percent(uint numerator, uint denominator, uint precision)\r\n    internal\r\n    pure\r\n    returns (uint quotient) {\r\n        // caution, check safe-to-multiply here\r\n        uint _numerator = mul(numerator, 10 ** (precision + 1));\r\n\r\n        // with rounding of last digit\r\n        uint _quotient = add((_numerator / denominator), 5) / 10;\r\n        return (_quotient);\r\n    }\r\n}\r\n\r\ncontract HotPotato {\r\n    using SafeMath for uint;\r\n\r\n    event GameStarted(uint indexed gameId, address hotPotatoOwner, uint gameStart);\r\n    event GameEnded(uint indexed gameId);\r\n    event HotPotatoPassed(uint indexed gameId, address receiver);\r\n    event PlayerJoined(uint indexed gameId, address player, uint stake, uint totalStake, uint players);\r\n    event PlayerWithdrew(address indexed player);\r\n    event NewMaxTimeHolder(uint indexed gameId, address maxTimeHolder);\r\n    event AddressHeldFor(uint indexed gameId, address player, uint timeHeld);\r\n\r\n    struct Game {\r\n        // whether the game is running and the timer has started\r\n        bool running;\r\n\r\n        // game has completed it's whole run\r\n        bool finished;\r\n\r\n        // who owns the hot potato in the game\r\n        address hotPotatoOwner;\r\n\r\n        // the unix timestamp of when the game when started\r\n        uint gameStart;\r\n\r\n        // players to their stakes (a stake >0 indicates the address is playing)\r\n        mapping(address => uint) stakes;\r\n\r\n        // the total amount of Ether staked on the game\r\n        uint totalStake;\r\n\r\n        // players in the game\r\n        uint players;\r\n\r\n        // whether an address has withdrawed there stake or not\r\n        mapping(address => bool) withdrawals;\r\n\r\n        // the time the addresses held the potato for in seconds\r\n        mapping(address => uint) holdTimes;\r\n\r\n        // the block the game was created on (i.e. when players could join it)\r\n        uint blockCreated;\r\n\r\n        // the time the hot potato was received last\r\n        uint hotPotatoReceiveTime;\r\n\r\n        // the address which has held the hot potato the longest so far\r\n        address maxTimeHolder;\r\n    }\r\n\r\n    // fees taken per stake as a percent of 1 ether\r\n    uint constant private FEE_TAKE = 0.02 ether;\r\n\r\n    // the degree of precision for division\r\n    uint constant private DIV_DEGREE_PRECISION = 3;\r\n\r\n    // the minimum amount of ether to enter the game\r\n    uint constant public MIN_STAKE = 0.01 ether;\r\n\r\n    // the minimum amount of players to start a game\r\n    uint constant public MIN_PLAYERS = 3;\r\n\r\n    // duration of a game in seconds (10 mins)\r\n    uint constant public GAME_DURATION = 600;\r\n\r\n    // who owns/publishes the contract\r\n    address private contractOwner;\r\n\r\n    // the amount of fees collected\r\n    uint public feesTaken;\r\n\r\n    // the current game id\r\n    uint public currentGameId;\r\n\r\n    // game ids to games\r\n    mapping(uint => Game) public games;\r\n\r\n    modifier gameRunning(uint gameId) {\r\n        require(games[gameId].running);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier gameStopped(uint gameId) {\r\n        require(!games[gameId].running);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier gameFinished(uint gameId) {\r\n        require(games[gameId].finished);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier hasValue(uint amount) {\r\n        require(msg.value >= amount);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier notInGame(uint gameId, address player) {\r\n        require(games[gameId].stakes[player] == 0);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier inGame(uint gameId, address player) {\r\n        require(games[gameId].stakes[player] > 0);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier enoughPlayers(uint gameId) {\r\n        require(games[gameId].players >= MIN_PLAYERS);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier hasHotPotato(uint gameId, address player) {\r\n        require(games[gameId].hotPotatoOwner == player);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier notLost(uint gameId, address player) {\r\n        require(games[gameId].hotPotatoOwner != player && games[gameId].maxTimeHolder != player);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier gameTerminable(uint gameId) {\r\n        require(block.timestamp.sub(games[gameId].gameStart) >= GAME_DURATION);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier notWithdrew(uint gameId) {\r\n        require(!games[gameId].withdrawals[msg.sender]);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyContractOwner() {\r\n        require(msg.sender == contractOwner);\r\n\r\n        _;\r\n    }\r\n\r\n    function HotPotato()\r\n    public\r\n    payable {\r\n        contractOwner = msg.sender;\r\n        games[0].blockCreated = block.number;\r\n    }\r\n\r\n    function enterGame()\r\n    public\r\n    payable\r\n    gameStopped(currentGameId)\r\n    hasValue(MIN_STAKE)\r\n    notInGame(currentGameId, msg.sender) {\r\n        Game storage game = games[currentGameId];\r\n\r\n        uint feeTake = msg.value.mul(FEE_TAKE) / (1 ether);\r\n\r\n        feesTaken = feesTaken.add(feeTake);\r\n\r\n        game.stakes[msg.sender] = msg.value.sub(feeTake);\r\n        game.totalStake = game.totalStake.add(msg.value.sub(feeTake));\r\n        game.players = game.players.add(1);\r\n\r\n        PlayerJoined(currentGameId, msg.sender, msg.value.sub(feeTake),\r\n            game.totalStake, game.players);\r\n    }\r\n\r\n    function startGame(address receiver)\r\n    public\r\n    payable\r\n    gameStopped(currentGameId)\r\n    inGame(currentGameId, msg.sender)\r\n    inGame(currentGameId, receiver)\r\n    enoughPlayers(currentGameId) {\r\n        Game storage game = games[currentGameId];\r\n\r\n        game.running = true;\r\n        game.hotPotatoOwner = receiver;\r\n        game.hotPotatoReceiveTime = block.timestamp;\r\n        game.gameStart = block.timestamp;\r\n        game.maxTimeHolder = receiver;\r\n\r\n        GameStarted(currentGameId, game.hotPotatoOwner, game.gameStart);\r\n    }\r\n\r\n    function passHotPotato(address receiver)\r\n    public\r\n    payable\r\n    gameRunning(currentGameId)\r\n    hasHotPotato(currentGameId, msg.sender)\r\n    inGame(currentGameId, receiver) {\r\n        Game storage game = games[currentGameId];\r\n\r\n        game.hotPotatoOwner = receiver;\r\n\r\n        uint timeHeld = block.timestamp.sub(game.hotPotatoReceiveTime);\r\n        game.holdTimes[msg.sender] = game.holdTimes[msg.sender].add(timeHeld);\r\n        AddressHeldFor(currentGameId, msg.sender, game.holdTimes[msg.sender]);\r\n\r\n        if (game.holdTimes[msg.sender] > game.holdTimes[game.maxTimeHolder]) {\r\n            game.maxTimeHolder = msg.sender;\r\n            NewMaxTimeHolder(currentGameId, game.maxTimeHolder);\r\n        }\r\n\r\n        game.hotPotatoReceiveTime = block.timestamp;\r\n\r\n        HotPotatoPassed(currentGameId, receiver);\r\n    }\r\n\r\n    function endGame()\r\n    public\r\n    payable\r\n    gameRunning(currentGameId)\r\n    inGame(currentGameId, msg.sender)\r\n    gameTerminable(currentGameId) {\r\n        Game storage game = games[currentGameId];\r\n\r\n        game.running = false;\r\n        game.finished = true;\r\n\r\n        uint timeHeld = block.timestamp.sub(game.hotPotatoReceiveTime);\r\n        game.holdTimes[game.hotPotatoOwner] = game.holdTimes[game.hotPotatoOwner].add(timeHeld);\r\n        AddressHeldFor(currentGameId, game.hotPotatoOwner, game.holdTimes[msg.sender]);\r\n\r\n        if (game.holdTimes[game.hotPotatoOwner] > game.holdTimes[game.maxTimeHolder]) {\r\n            game.maxTimeHolder = game.hotPotatoOwner;\r\n            NewMaxTimeHolder(currentGameId, game.maxTimeHolder);\r\n        }\r\n\r\n        GameEnded(currentGameId);\r\n\r\n        currentGameId = currentGameId.add(1);\r\n        games[currentGameId].blockCreated = block.number;\r\n    }\r\n\r\n    function withdraw(uint gameId)\r\n    public\r\n    payable\r\n    gameFinished(gameId)\r\n    inGame(gameId, msg.sender)\r\n    notLost(gameId, msg.sender)\r\n    notWithdrew(gameId) {\r\n        Game storage game = games[gameId];\r\n\r\n        uint banishedStake = 0;\r\n\r\n        if (game.hotPotatoOwner == game.maxTimeHolder) {\r\n            banishedStake = game.stakes[game.hotPotatoOwner];\r\n        } else {\r\n            banishedStake = game.stakes[game.hotPotatoOwner].add(game.stakes[game.maxTimeHolder]);\r\n        }\r\n\r\n        uint collectiveStake = game.totalStake.sub(banishedStake);\r\n\r\n        uint stake = game.stakes[msg.sender];\r\n\r\n        uint percentageClaim = SafeMath.percent(stake, collectiveStake, DIV_DEGREE_PRECISION);\r\n\r\n        uint claim = stake.add(banishedStake.mul(percentageClaim) / (10 ** DIV_DEGREE_PRECISION));\r\n\r\n        game.withdrawals[msg.sender] = true;\r\n\r\n        msg.sender.transfer(claim);\r\n\r\n        PlayerWithdrew(msg.sender);\r\n    }\r\n\r\n    function withdrawFees()\r\n    public\r\n    payable\r\n    onlyContractOwner {\r\n        uint feesToTake = feesTaken;\r\n        feesTaken = 0;\r\n        contractOwner.transfer(feesToTake);\r\n    }\r\n\r\n    // GETTERS\r\n    function getGame(uint gameId)\r\n    public\r\n    constant\r\n    returns (bool, bool, address, uint, uint, uint, uint, address, uint) {\r\n        Game storage game = games[gameId];\r\n        return (\r\n        game.running,\r\n        game.finished,\r\n        game.hotPotatoOwner,\r\n        game.gameStart,\r\n        game.totalStake,\r\n        game.players,\r\n        game.blockCreated,\r\n        game.maxTimeHolder,\r\n        currentGameId);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"running\",\"type\":\"bool\"},{\"name\":\"finished\",\"type\":\"bool\"},{\"name\":\"hotPotatoOwner\",\"type\":\"address\"},{\"name\":\"gameStart\",\"type\":\"uint256\"},{\"name\":\"totalStake\",\"type\":\"uint256\"},{\"name\":\"players\",\"type\":\"uint256\"},{\"name\":\"blockCreated\",\"type\":\"uint256\"},{\"name\":\"hotPotatoReceiveTime\",\"type\":\"uint256\"},{\"name\":\"maxTimeHolder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enterGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentGameId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"passHotPotato\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_PLAYERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"startGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAME_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesTaken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hotPotatoOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameStart\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"HotPotatoPassed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalStake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"players\",\"type\":\"uint256\"}],\"name\":\"PlayerJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"}],\"name\":\"PlayerWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxTimeHolder\",\"type\":\"address\"}],\"name\":\"NewMaxTimeHolder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timeHeld\",\"type\":\"uint256\"}],\"name\":\"AddressHeldFor\",\"type\":\"event\"}]","ContractName":"HotPotato","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1981f03b0214248300e7923813a76bc9aac97d4ea22ffe937675e8589ddab139"}]}