{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ForeignToken {\r\n    function balanceOf(address _owner) constant public returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract ContractReceiver {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public returns (bool);\r\n}\r\n\r\ncontract ERC223Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transfer(address to, uint256 value, bytes data) public returns (bool);\r\n    function transfer(address to, uint256 value, bytes data, string custom_fallback) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC223 is ERC223Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface Token { \r\n    function distr(address _to, uint256 _value) public returns (bool);\r\n    function totalSupply() constant public returns (uint256 supply);\r\n    function balanceOf(address _owner) constant public returns (uint256 balance);\r\n}\r\n\r\ncontract LearnChain is ERC223 {\r\n    \r\n    using SafeMath for uint256;\r\n    address public owner;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    \r\n    mapping (address => bool) public blacklist;\r\n    mapping(address => uint256) public proposals;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals;\r\n    uint256 public totalSupply;\r\n    \r\n    address public otherTokenAddress;\r\n    address public tokenSender;\r\n    uint256 public tokenApproves;\r\n    uint256 public tokenValue;\r\n    \r\n    uint256 public totalDistributed;\r\n    uint256 public totalRemaining;\r\n    uint256 public value;\r\n    uint256 public dividend;\r\n    uint256 public divisor;\r\n    uint256 public inviteReward = 2;\r\n    uint256 public proposalTimeout = 9999 days;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event LOG_Transfer(address indexed from, address indexed to, uint256 value, bytes indexed data);\r\n    \r\n    event Distr(address indexed to, uint256 amount);\r\n    event InviteInit(address indexed to, uint256 amount);\r\n    event Invite(address indexed from, address indexed to, uint256 other_amount);\r\n    \r\n    event DistrFinished();\r\n    event DistrStarted();\r\n    \r\n    event Other_DistrFinished();\r\n    event Other_DistrStarted();\r\n    \r\n    event LOG_receiveApproval(address _sender,uint256 _tokenValue,address _otherTokenAddress,bytes _extraData);\r\n    event LOG_callTokenTransferFrom(address tokenSender,address _to,uint256 _value);\r\n    \r\n    event Burn(address indexed burner, uint256 value);\r\n    event Mint(address indexed minter, uint256 value);\r\n    \r\n    bool public distributionFinished = false;\r\n    bool public otherDistributionFinished = false;\r\n    \r\n    modifier canDistr() {\r\n        require(!distributionFinished);\r\n        _;\r\n    }\r\n    \r\n    modifier canNotDistr() {\r\n        require(distributionFinished);\r\n        _;\r\n    }\r\n    \r\n    modifier canDistrOther() {\r\n        require(!otherDistributionFinished);\r\n        _;\r\n    }\r\n    \r\n    modifier canNotDistrOther() {\r\n        require(otherDistributionFinished);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyWhitelistOrTimeout() {\r\n        require(blacklist[msg.sender] == false || (blacklist[msg.sender] == true && proposals[msg.sender].add(proposalTimeout) <= now));\r\n        _;\r\n    }\r\n    \r\n    function LearnChain (string _tokenName, string _tokenSymbol, uint256 _decimalUnits, uint256 _initialAmount, uint256 _totalDistributed, uint256 _value, uint256 _dividend, uint256 _divisor) public {\r\n        require(_decimalUnits != 0);\r\n        require(_initialAmount != 0);\r\n        require(_value != 0);\r\n        require(_dividend != 0);\r\n        require(_divisor != 0);\r\n        \r\n        \r\n        owner = msg.sender;\r\n        name = _tokenName;\r\n        symbol = _tokenSymbol;\r\n        decimals = _decimalUnits;\r\n        totalSupply = _initialAmount;\r\n        totalDistributed = _totalDistributed;\r\n        totalRemaining = totalSupply.sub(totalDistributed);\r\n        value = _value;\r\n        dividend = _dividend;\r\n        divisor = _divisor;\r\n        \r\n        balances[owner] = totalDistributed;\r\n        Transfer(address(0), owner, totalDistributed);\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    function changeOtherTokenAddress(address newOtherTokenAddress) onlyOwner public {\r\n        if (newOtherTokenAddress != address(0)) {\r\n            otherTokenAddress = newOtherTokenAddress;\r\n        }\r\n    }\r\n    \r\n    function changeTokenSender(address newTokenSender) onlyOwner public {\r\n        if (newTokenSender != address(0)) {\r\n            tokenSender = newTokenSender;\r\n        }\r\n    }\r\n    \r\n    function changeTokenValue(uint256 newTokenValue) onlyOwner public {\r\n        tokenValue = newTokenValue;\r\n    }\r\n    \r\n    function changeProposalTimeout(uint256 newProposalTimeout) onlyOwner public {\r\n        proposalTimeout = newProposalTimeout;\r\n    }\r\n    \r\n    function changeTokenApproves(uint256 newTokenApproves) onlyOwner public {\r\n        tokenApproves = newTokenApproves;\r\n    }\r\n    \r\n    function enableWhitelist(address[] addresses) onlyOwner public {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            blacklist[addresses[i]] = false;\r\n        }\r\n    }\r\n\r\n    function disableWhitelist(address[] addresses) onlyOwner public {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            blacklist[addresses[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\r\n        distributionFinished = true;\r\n        DistrFinished();\r\n        return true;\r\n    }\r\n    \r\n    function startDistribution() onlyOwner canNotDistr public returns (bool) {\r\n        distributionFinished = false;\r\n        DistrStarted();\r\n        return true;\r\n    }\r\n    \r\n    function finishOtherDistribution() onlyOwner canDistrOther public returns (bool) {\r\n        otherDistributionFinished = true;\r\n        Other_DistrFinished();\r\n        return true;\r\n    }\r\n    \r\n    function startOtherDistribution() onlyOwner canNotDistrOther public returns (bool) {\r\n        otherDistributionFinished = false;\r\n        Other_DistrStarted();\r\n        return true;\r\n    }\r\n    \r\n    function changeTotalDistributed(uint256 newTotalDistributed) onlyOwner public {\r\n        totalDistributed = newTotalDistributed;\r\n    }\r\n    \r\n    function changeTotalRemaining(uint256 newTotalRemaining) onlyOwner public {\r\n        totalRemaining = newTotalRemaining;\r\n    }\r\n    \r\n    function changeValue(uint256 newValue) onlyOwner public {\r\n        value = newValue;\r\n    }\r\n    \r\n    function changeTotalSupply(uint256 newTotalSupply) onlyOwner public {\r\n        totalSupply = newTotalSupply;\r\n    }\r\n    \r\n    function changeDecimals(uint256 newDecimals) onlyOwner public {\r\n        decimals = newDecimals;\r\n    }\r\n    \r\n    function changeName(string newName) onlyOwner public {\r\n        name = newName;\r\n    }\r\n    \r\n    function changeSymbol(string newSymbol) onlyOwner public {\r\n        symbol = newSymbol;\r\n    }\r\n    \r\n    function changeDivisor(uint256 newDivisor) onlyOwner public {\r\n        divisor = newDivisor;\r\n    }\r\n    \r\n    function changeDividend(uint256 newDividend) onlyOwner public {\r\n        dividend = newDividend;\r\n    }\r\n    \r\n    function changeInviteReward(uint256 newInviteReward) onlyOwner public {\r\n        inviteReward = newInviteReward;\r\n    }\r\n    \r\n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\r\n        totalDistributed = totalDistributed.add(_amount);\r\n        totalRemaining = totalRemaining.sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Distr(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n        \r\n        if (totalDistributed >= totalSupply) {\r\n            distributionFinished = true;\r\n        }\r\n    }\r\n    \r\n    function airdrop(address[] addresses) onlyOwner canDistr public {\r\n        \r\n        require(addresses.length <= 255);\r\n        require(value <= totalRemaining);\r\n        \r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            require(value <= totalRemaining);\r\n            distr(addresses[i], value);\r\n        }\r\n\t\r\n        if (totalDistributed >= totalSupply) {\r\n            distributionFinished = true;\r\n        }\r\n    }\r\n    \r\n    function distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\r\n        \r\n        require(addresses.length <= 255);\r\n        require(amount <= totalRemaining);\r\n        \r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            require(amount <= totalRemaining);\r\n            distr(addresses[i], amount);\r\n        }\r\n\t\r\n        if (totalDistributed >= totalSupply) {\r\n            distributionFinished = true;\r\n        }\r\n    }\r\n    \r\n    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner canDistr public {\r\n\r\n        require(addresses.length <= 255);\r\n        require(addresses.length == amounts.length);\r\n        \r\n        for (uint8 i = 0; i < addresses.length; i++) {\r\n            require(amounts[i] <= totalRemaining);\r\n            distr(addresses[i], amounts[i]);\r\n            \r\n            if (totalDistributed >= totalSupply) {\r\n                distributionFinished = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function () external payable {\r\n            getTokens();\r\n     }\r\n    \r\n    function getTokens() payable canDistr onlyWhitelistOrTimeout public {\r\n        \r\n        if (value > totalRemaining) {\r\n            value = totalRemaining;\r\n        }\r\n        \r\n        require(value <= totalRemaining);\r\n        \r\n        address investor = msg.sender;\r\n        uint256 toGive = value;\r\n        \r\n        distr(investor, toGive);\r\n        \r\n        if (toGive > 0) {\r\n            blacklist[investor] = true;\r\n            proposals[investor] = now;\r\n        }\r\n\r\n        if (totalDistributed >= totalSupply) {\r\n            distributionFinished = true;\r\n        }\r\n        \r\n        value = value.div(dividend).mul(divisor);\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n\t    return getBalance(_owner);\r\n    }\r\n    \r\n    function getBalance(address _address) constant internal returns (uint256) {\r\n        if (_address !=address(0) && !distributionFinished && !blacklist[_address] && totalDistributed < totalSupply) {\r\n            return balances[_address].add(value);\r\n        }\r\n        else {\r\n            return balances[_address];\r\n        }\r\n    }\r\n\r\n    // mitigates the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _amount, bytes _data, string _custom_fallback) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n        if(isContract(_to)) {\r\n            require(balanceOf(msg.sender) >= _amount);\r\n            balances[msg.sender] = balanceOf(msg.sender).sub(_amount);\r\n            balances[_to] = balanceOf(_to).add(_amount);\r\n            ContractReceiver receiver = ContractReceiver(_to);\r\n            require(receiver.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _amount, _data));\r\n            \r\n            Transfer(msg.sender, _to, _amount);\r\n            LOG_Transfer(msg.sender, _to, _amount, _data);\r\n            return true;\r\n        }\r\n        else {\r\n            return transferToAddress(_to, _amount, _data);\r\n        }\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _amount, bytes _data) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n\r\n        require(_to != address(0));\r\n\r\n        if(isContract(_to)) {\r\n            return transferToContract(_to, _amount, _data);\r\n        }\r\n        else {\r\n            return transferToAddress(_to, _amount, _data);\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n        \r\n        require(_to != address(0));\r\n        \r\n        bytes memory empty;\r\n        \r\n        if(isContract(_to)) {\r\n            return transferToContract(_to, _amount, empty);\r\n        }\r\n        else {\r\n            require(invite(msg.sender, _to));\r\n            return transferToAddress(_to, _amount, empty);\r\n        }\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\r\n\r\n        require(_to != address(0));\r\n        require(_amount <= balances[_from]);\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n        \r\n        require(invite(_from, _to));\r\n        \r\n        bytes memory empty;\r\n        \r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        LOG_Transfer(_from, _to, _amount, empty);\r\n        return true;\r\n    }\r\n    \r\n    function invite(address _from, address _to) internal returns (bool success) {\r\n\r\n        if(inviteInit(_from, false)){\r\n            if(!otherDistributionFinished){\r\n                require(callTokenTransferFrom(_to, tokenValue));\r\n                Invite(_from, _to, tokenValue);\r\n            }\r\n            inviteInit(_to, true);\r\n            return true;\r\n        }\r\n        inviteInit(_to, false);\r\n        return true;\r\n    }\r\n    \r\n    function inviteInit(address _address, bool _isInvitor) internal returns (bool success) {\r\n        if (!distributionFinished && totalDistributed < totalSupply) {\r\n            \r\n            if(!_isInvitor && blacklist[_address] && proposals[_address].add(proposalTimeout) > now){\r\n                return false;\r\n            }\r\n            \r\n            if (value.mul(inviteReward) > totalRemaining) {\r\n                value = totalRemaining;\r\n            }\r\n            require(value.mul(inviteReward) <= totalRemaining);\r\n            \r\n            uint256 toGive = value.mul(inviteReward);\r\n            \r\n            totalDistributed = totalDistributed.add(toGive);\r\n            totalRemaining = totalRemaining.sub(toGive);\r\n            balances[_address] = balances[_address].add(toGive);\r\n            InviteInit(_address, toGive);\r\n            Transfer(address(0), _address, toGive);\r\n\r\n            if (toGive > 0) {\r\n                blacklist[_address] = true;\r\n                proposals[_address] = now;\r\n            }\r\n\r\n            if (totalDistributed >= totalSupply) {\r\n                distributionFinished = true;\r\n            }\r\n            \r\n            value = value.div(dividend).mul(divisor);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\r\n        ForeignToken t = ForeignToken(tokenAddress);\r\n        uint bal = t.balanceOf(who);\r\n        return bal;\r\n    }\r\n    \r\n    function withdraw() onlyOwner public {\r\n        uint256 etherBalance = this.balance;\r\n        owner.transfer(etherBalance);\r\n    }\r\n    \r\n    function mint(uint256 _value) onlyOwner public {\r\n\r\n        address minter = msg.sender;\r\n        balances[minter] = balances[minter].add(_value);\r\n        totalSupply = totalSupply.add(_value);\r\n        Mint(minter, _value);\r\n    }\r\n    \r\n    function burn(uint256 _value) onlyOwner public {\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n    \r\n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\r\n        ForeignToken token = ForeignToken(_tokenContract);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(owner, amount);\r\n    }\r\n    \r\n    function receiveApproval(address _sender,uint256 _tokenValue,address _otherTokenAddress,bytes _extraData) payable public returns (bool){\r\n        require(otherTokenAddress == _otherTokenAddress);\r\n        require(tokenSender == _sender);\r\n\r\n        tokenApproves = _tokenValue;\r\n        LOG_receiveApproval(_sender, _tokenValue ,_otherTokenAddress ,_extraData);\r\n        return true;\r\n    }\r\n    \r\n    function callTokenTransferFrom(address _to,uint256 _value) private returns (bool){\r\n        \r\n        require(tokenSender != address(0));\r\n        require(otherTokenAddress.call(bytes4(bytes32(keccak256(\"transferFrom(address,address,uint256)\"))), tokenSender, _to, _value));\r\n        \r\n        LOG_callTokenTransferFrom(tokenSender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) payable public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        \r\n        require(_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\r\n        return true;\r\n    }\r\n    \r\n    function isContract(address _addr) private constant returns (bool) {\r\n        uint length;\r\n        assembly {\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length>0);\r\n    }\r\n\r\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool) {\r\n        require(balanceOf(msg.sender) >= _value);\r\n        balances[msg.sender] =  balanceOf(msg.sender).sub(_value);\r\n        balances[_to] = balanceOf(_to).add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        LOG_Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool) {\r\n        require(balanceOf(msg.sender) >= _value);\r\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n        balances[_to] = balanceOf(_to).add(_value);\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        Transfer(msg.sender, _to, _value);\r\n        LOG_Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"inviteReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOtherTokenAddress\",\"type\":\"address\"}],\"name\":\"changeOtherTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenSender\",\"type\":\"address\"}],\"name\":\"changeTokenSender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenValue\",\"type\":\"uint256\"}],\"name\":\"changeTokenValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDivisor\",\"type\":\"uint256\"}],\"name\":\"changeDivisor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"changeTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newProposalTimeout\",\"type\":\"uint256\"}],\"name\":\"changeProposalTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInviteReward\",\"type\":\"uint256\"}],\"name\":\"changeInviteReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_tokenValue\",\"type\":\"uint256\"},{\"name\":\"_otherTokenAddress\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTotalRemaining\",\"type\":\"uint256\"}],\"name\":\"changeTotalRemaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenApproves\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"enableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"changeSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDecimals\",\"type\":\"uint256\"}],\"name\":\"changeDecimals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTotalDistributed\",\"type\":\"uint256\"}],\"name\":\"changeTotalDistributed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"otherTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishOtherDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenApproves\",\"type\":\"uint256\"}],\"name\":\"changeTokenApproves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startOtherDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"changeValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDividend\",\"type\":\"uint256\"}],\"name\":\"changeDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"otherDistributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint256\"},{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_totalDistributed\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_dividend\",\"type\":\"uint256\"},{\"name\":\"_divisor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LOG_Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InviteInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"other_amount\",\"type\":\"uint256\"}],\"name\":\"Invite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Other_DistrFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Other_DistrStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_otherTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"LOG_receiveApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LOG_callTokenTransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"}]","ContractName":"LearnChain","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000009b18ab5df7180b6b8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028a857425466f80000000000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000000000000000000000000000000000000001869f000000000000000000000000000000000000000000000000000000000000000a4c6561726e436861696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c454e0000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://61b88260e296f2a90bfd27dc154b575b8456569c4ea1da84bc0c27e047b97683"}]}