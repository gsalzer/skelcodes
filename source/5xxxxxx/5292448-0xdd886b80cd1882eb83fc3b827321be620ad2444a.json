{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  event Released(uint256 amount);\r\n  event Revoked();\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  uint256 public cliff;\r\n  uint256 public start;\r\n  uint256 public duration;\r\n\r\n  bool public revocable;\r\n\r\n  mapping (address => uint256) public released;\r\n  mapping (address => bool) public revoked;\r\n\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n   * of the balance will have vested.\r\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param _duration duration in seconds of the period in which the tokens will vest\r\n   * @param _revocable whether the vesting is revocable or not\r\n   */\r\n  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\r\n    require(_beneficiary != address(0));\r\n    require(_cliff <= _duration);\r\n\r\n    beneficiary = _beneficiary;\r\n    revocable = _revocable;\r\n    duration = _duration;\r\n    cliff = _start.add(_cliff);\r\n    start = _start;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function release(ERC20Basic token) public {\r\n    uint256 unreleased = releasableAmount(token);\r\n\r\n    require(unreleased > 0);\r\n\r\n    released[token] = released[token].add(unreleased);\r\n\r\n    token.safeTransfer(beneficiary, unreleased);\r\n\r\n    Released(unreleased);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n   * remain in the contract, the rest are returned to the owner.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function revoke(ERC20Basic token) public onlyOwner {\r\n    require(revocable);\r\n    require(!revoked[token]);\r\n\r\n    uint256 balance = token.balanceOf(this);\r\n\r\n    uint256 unreleased = releasableAmount(token);\r\n    uint256 refund = balance.sub(unreleased);\r\n\r\n    revoked[token] = true;\r\n\r\n    token.safeTransfer(owner, refund);\r\n\r\n    Revoked();\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\r\n    return vestedAmount(token).sub(released[token]);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(this);\r\n    uint256 totalBalance = currentBalance.add(released[token]);\r\n\r\n    if (now < cliff) {\r\n      return 0;\r\n    } else if (now >= start.add(duration) || revoked[token]) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(now.sub(start)).div(duration);\r\n    }\r\n  }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint internal returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract SafePayloadChecker {\r\n  modifier onlyPayloadSize(uint size) {\r\n    assert(msg.data.length == size + 4);\r\n    _;\r\n  }\r\n}\r\n\r\ncontract PATH is MintableToken, BurnableToken, SafePayloadChecker {\r\n  /**\r\n   * @dev the original supply, for posterity, since totalSupply will decrement on burn\r\n   */\r\n  uint256 public initialSupply = 400000000 * (10 ** uint256(decimals));\r\n\r\n  /**\r\n   * ERC20 Identification Functions\r\n   */\r\n  string public constant name    = \"PATH Token\"; // solium-disable-line uppercase\r\n  string public constant symbol  = \"PATH\"; // solium-disable-line uppercase\r\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\r\n\r\n  /**\r\n   * @dev the time at which token holders can begin transferring tokens\r\n   */\r\n  uint256 public transferableStartTime;\r\n\r\n  address privatePresaleWallet;\r\n  address publicPresaleContract;\r\n  address publicCrowdsaleContract;\r\n  address pathTeamMultisig;\r\n  TokenVesting public founderTokenVesting;\r\n\r\n  /**\r\n   * @dev the token sale contract(s) and team can move tokens\r\n   * @dev   before the lockup expires\r\n   */\r\n  modifier onlyWhenTransferEnabled()\r\n  {\r\n    if (now <= transferableStartTime) {\r\n      require(\r\n        msg.sender == privatePresaleWallet || // solium-disable-line operator-whitespace\r\n        msg.sender == publicPresaleContract || // solium-disable-line operator-whitespace\r\n        msg.sender == publicCrowdsaleContract || // solium-disable-line operator-whitespace\r\n        msg.sender == pathTeamMultisig\r\n      );\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev require that this contract cannot affect itself\r\n   */\r\n  modifier validDestination(address _addr)\r\n  {\r\n    require(_addr != address(this));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor\r\n   */\r\n  function PATH(uint256 _transferableStartTime)\r\n    public\r\n  {\r\n    transferableStartTime = _transferableStartTime;\r\n  }\r\n\r\n  /**\r\n   * @dev override transfer token for a specified address to add validDestination\r\n   * @param _to The address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value)\r\n    onlyPayloadSize(32 + 32) // address (32) + uint256 (32)\r\n    validDestination(_to)\r\n    onlyWhenTransferEnabled\r\n    public\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev override transferFrom token for a specified address to add validDestination\r\n   * @param _from The address to transfer from.\r\n   * @param _to The address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    onlyPayloadSize(32 + 32 + 32) // address (32) + address (32) + uint256 (32)\r\n    validDestination(_to)\r\n    onlyWhenTransferEnabled\r\n    public\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev burn tokens, but also include a Transfer(sender, 0x0, value) event\r\n   * @param _value The amount to be burned.\r\n   */\r\n  function burn(uint256 _value)\r\n    onlyWhenTransferEnabled\r\n    public\r\n  {\r\n    super.burn(_value);\r\n  }\r\n\r\n  /**\r\n   * @dev burn tokens on behalf of someone\r\n   * @param _from The address of the owner of the token.\r\n   * @param _value The amount to be burned.\r\n   */\r\n  function burnFrom(address _from, uint256 _value)\r\n    onlyPayloadSize(32 + 32) // address (32) + uint256 (32)\r\n    onlyWhenTransferEnabled\r\n    public\r\n  {\r\n    // require(_value <= allowed[_from][msg.sender]);\r\n    require(_value <= balances[_from]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(_from, _value);\r\n    Transfer(_from, address(0), _value);\r\n  }\r\n\r\n  /**\r\n   * @dev override approval functions to include safe payload checking\r\n   */\r\n  function approve(address _spender, uint256 _value)\r\n    onlyPayloadSize(32 + 32) // address (32) + uint256 (32)\r\n    public\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint256 _addedValue)\r\n    onlyPayloadSize(32 + 32) // address (32) + uint256 (32)\r\n    public\r\n    returns (bool)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint256 _subtractedValue)\r\n    onlyPayloadSize(32 + 32) // address (32) + uint256 (32)\r\n    public\r\n    returns (bool)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev distribute the tokens once the crowdsale addresses are known\r\n   * @dev only callable once and disables minting at the end\r\n   */\r\n  function distributeTokens(\r\n    address _privatePresaleWallet,\r\n    address _publicPresaleContract,\r\n    address _publicCrowdsaleContract,\r\n    address _pathCompanyMultisig,\r\n    address _pathAdvisorVault,\r\n    address _pathFounderAddress\r\n  )\r\n    onlyOwner\r\n    canMint\r\n    external\r\n  {\r\n    // Set addresses\r\n    privatePresaleWallet = _privatePresaleWallet;\r\n    publicPresaleContract = _publicPresaleContract;\r\n    publicCrowdsaleContract = _publicCrowdsaleContract;\r\n    pathTeamMultisig = _pathCompanyMultisig;\r\n\r\n    // Mint all tokens according to the established allocations\r\n    mint(_privatePresaleWallet, 200000000 * (10 ** uint256(decimals)));\r\n    // ^ 50%\r\n    mint(_publicPresaleContract, 32000000 * (10 ** uint256(decimals)));\r\n    // ^ 8%\r\n    mint(_publicCrowdsaleContract, 8000000 * (10 ** uint256(decimals)));\r\n    // ^ 2%\r\n    mint(_pathCompanyMultisig, 80000000 * (10 ** uint256(decimals)));\r\n    // ^ 20%\r\n    mint(_pathAdvisorVault, 40000000 * (10 ** uint256(decimals)));\r\n    // ^ 10%\r\n\r\n    // deploy a token vesting contract for the founder tokens\r\n    uint256 cliff = 6 * 4 weeks; // 4 months\r\n    founderTokenVesting = new TokenVesting(\r\n      _pathFounderAddress,\r\n      now,   // start vesting now\r\n      cliff, // cliff time\r\n      cliff, // 100% unlocked at cliff\r\n      false  // irrevocable\r\n    );\r\n    // and then mint tokens to the vesting contract\r\n    mint(address(founderTokenVesting), 40000000 * (10 ** uint256(decimals)));\r\n    // ^ 10%\r\n\r\n    // immediately finish minting\r\n    finishMinting();\r\n\r\n    assert(totalSupply_ == initialSupply);\r\n  }\r\n}\r\n\r\ncontract StandardCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  PATH public token;  // Path Modification\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  function StandardCrowdsale(\r\n    uint256 _startTime,\r\n    uint256 _endTime,\r\n    uint256 _rate,\r\n    address _wallet,\r\n    PATH _token\r\n  )\r\n    public\r\n  {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    token = _token;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    require(token.transfer(beneficiary, tokens)); // PATH Modification\r\n\r\n    TokenPurchase(\r\n      msg.sender,\r\n      beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n  // Override this method to have a way to add business logic to your crowdsale when buying\r\n  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n    return weiAmount.mul(rate);\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n}\r\n\r\ncontract FinalizableCrowdsale is StandardCrowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableCrowdsale is FinalizableCrowdsale {\r\n  /**\r\n   * @dev Burns any tokens held by this address.\r\n   */\r\n  function finalization() internal {\r\n    token.burn(token.balanceOf(address(this)));\r\n    super.finalization();\r\n  }\r\n}\r\n\r\ncontract RateConfigurable is StandardCrowdsale, Ownable {\r\n\r\n  modifier onlyBeforeStart() {\r\n    require(now < startTime);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev allow the owner to update the rate before the crowdsale starts\r\n   * @dev in order to account for ether valuation fluctuation\r\n   */\r\n  function updateRate(uint256 _rate)\r\n    onlyOwner\r\n    onlyBeforeStart\r\n    external\r\n  {\r\n    rate = _rate;\r\n  }\r\n}\r\n\r\ncontract ReallocatableCrowdsale is StandardCrowdsale, Ownable {\r\n\r\n  /**\r\n   * @dev reallocate funds from this crowdsale to another\r\n   */\r\n  function reallocate(uint256 _value)\r\n    external\r\n    onlyOwner\r\n  {\r\n    require(!hasEnded());\r\n    reallocation(_value);\r\n  }\r\n\r\n  /**\r\n   * @dev perform the actual reallocation\r\n   * @dev must be overridden to do anything\r\n   */\r\n  function reallocation(uint256 _value)\r\n    internal\r\n  {\r\n  }\r\n}\r\n\r\ncontract WhitelistedCrowdsale is StandardCrowdsale, Ownable {\r\n\r\n  mapping(address=>bool) public registered;\r\n\r\n  event RegistrationStatusChanged(address target, bool isRegistered);\r\n\r\n  /**\r\n    * @dev Changes registration status of an address for participation.\r\n    * @param target Address that will be registered/deregistered.\r\n    * @param isRegistered New registration status of address.\r\n    */\r\n  function changeRegistrationStatus(address target, bool isRegistered)\r\n    public\r\n    onlyOwner\r\n  {\r\n    registered[target] = isRegistered;\r\n    RegistrationStatusChanged(target, isRegistered);\r\n  }\r\n\r\n  /**\r\n    * @dev Changes registration statuses of addresses for participation.\r\n    * @param targets Addresses that will be registered/deregistered.\r\n    * @param isRegistered New registration status of addresses.\r\n    */\r\n  function changeRegistrationStatuses(address[] targets, bool isRegistered)\r\n    public\r\n    onlyOwner\r\n  {\r\n    for (uint i = 0; i < targets.length; i++) {\r\n      changeRegistrationStatus(targets[i], isRegistered);\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @dev overriding Crowdsale#validPurchase to add whilelist\r\n    * @return true if investors can buy at the moment, false otherwise\r\n    */\r\n  function validPurchase() internal view returns (bool) {\r\n    return super.validPurchase() && registered[msg.sender];\r\n  }\r\n}\r\n\r\ncontract PathPublicPresale is RateConfigurable, WhitelistedCrowdsale, BurnableCrowdsale, ReallocatableCrowdsale {\r\n\r\n  address public privatePresaleWallet;\r\n\r\n  function PathPublicPresale (\r\n    uint256 _startTime,\r\n    uint256 _endTime,\r\n    uint256 _rate,\r\n    address _wallet,\r\n    PATH _token,\r\n    address _privatePresaleWallet\r\n  )\r\n    WhitelistedCrowdsale()\r\n    BurnableCrowdsale()\r\n    StandardCrowdsale(_startTime, _endTime, _rate, _wallet, _token)\r\n    public\r\n  {\r\n    privatePresaleWallet = _privatePresaleWallet;\r\n  }\r\n\r\n  function reallocation(uint256 _value)\r\n    internal\r\n  {\r\n    require(token.transfer(privatePresaleWallet, _value));\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reallocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatePresaleWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"isRegistered\",\"type\":\"bool\"}],\"name\":\"changeRegistrationStatuses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"isRegistered\",\"type\":\"bool\"}],\"name\":\"changeRegistrationStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_privatePresaleWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isRegistered\",\"type\":\"bool\"}],\"name\":\"RegistrationStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"PathPublicPresale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005acf7470000000000000000000000000000000000000000000000000000000005ae72f700000000000000000000000000000000000000000000000000000000000000d05000000000000000000000000109426b47315e2c733b4881cf01bb6a28254eede000000000000000000000000c42a2b7c3217fe89982aae5ab07b6dadc53daea7000000000000000000000000109426b47315e2c733b4881cf01bb6a28254eede","Library":"","SwarmSource":"bzzr://d93453f3c16ff920f79164d641f5dfc8469128fb8575f865436349525d07ae89"}]}