{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts\\utils\\SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts\\utils\\Serialize.sol\r\n\r\ncontract Serialize {\r\n    using SafeMath for uint256;\r\n    function addAddress(uint _offst, bytes memory _output, address _input) internal pure returns(uint _offset) {\r\n      assembly {\r\n        mstore(add(_output, _offst), _input)\r\n      }\r\n      return _offst.sub(20);\r\n    }\r\n\r\n    function addUint(uint _offst, bytes memory _output, uint _input) internal pure returns (uint _offset) {\r\n      assembly {\r\n        mstore(add(_output, _offst), _input)\r\n      }\r\n      return _offst.sub(32);\r\n    }\r\n\r\n    function addUint8(uint _offst, bytes memory _output, uint _input) internal pure returns (uint _offset) {\r\n      assembly {\r\n        mstore(add(_output, _offst), _input)\r\n      }\r\n      return _offst.sub(1);\r\n    }\r\n\r\n    function addUint16(uint _offst, bytes memory _output, uint _input) internal pure returns (uint _offset) {\r\n      assembly {\r\n        mstore(add(_output, _offst), _input)\r\n      }\r\n      return _offst.sub(2);\r\n    }\r\n\r\n    function addUint64(uint _offst, bytes memory _output, uint _input) internal pure returns (uint _offset) {\r\n      assembly {\r\n        mstore(add(_output, _offst), _input)\r\n      }\r\n      return _offst.sub(8);\r\n    }\r\n\r\n    function getAddress(uint _offst, bytes memory _input) internal pure returns (address _output, uint _offset) {\r\n      assembly {\r\n        _output := mload(add(_input, _offst))\r\n      }\r\n      return (_output, _offst.sub(20));\r\n    }\r\n\r\n    function getUint(uint _offst, bytes memory _input) internal pure returns (uint _output, uint _offset) {\r\n      assembly {\r\n          _output := mload(add(_input, _offst))\r\n      }\r\n      return (_output, _offst.sub(32));\r\n    }\r\n\r\n    function getUint8(uint _offst, bytes memory _input) internal pure returns (uint8 _output, uint _offset) {\r\n      assembly {\r\n        _output := mload(add(_input, _offst))\r\n      }\r\n      return (_output, _offst.sub(1));\r\n    }\r\n\r\n    function getUint16(uint _offst, bytes memory _input) internal pure returns (uint16 _output, uint _offset) {\r\n      assembly {\r\n        _output := mload(add(_input, _offst))\r\n      }\r\n      return (_output, _offst.sub(2));\r\n    }\r\n\r\n    function getUint64(uint _offst, bytes memory _input) internal pure returns (uint64 _output, uint _offset) {\r\n      assembly {\r\n        _output := mload(add(_input, _offst))\r\n      }\r\n      return (_output, _offst.sub(8));\r\n    }\r\n}\r\n\r\n// File: contracts\\utils\\AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\utils\\Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\utils\\Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts\\ERC721\\ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: contracts\\ERC721\\ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\r\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\r\n   *  than the magic value MUST result in the transaction being reverted.\r\n   *  Note: the contract address is always the message sender.\r\n   * @param _from The sending address\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\r\n}\r\n\r\n// File: contracts\\ERC721\\ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is ERC721Basic, Pausable {\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n   * @dev Guarantees msg.sender is owner of the given token\r\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n   */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n   * @param _tokenId uint256 ID of the token to validate\r\n   */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existance of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * @dev The zero address indicates there is no approved address.\r\n   * @dev There can only be one approved address per token at a given time.\r\n   * @dev Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      emit Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for a the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  function transferBatch(address _from, address _to, uint[] _tokenIds) public {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    for(uint i=0; i<_tokenIds.length; i++) {\r\n      require(isApprovedOrOwner(msg.sender, _tokenIds[i]));\r\n      clearApproval(_from,  _tokenIds[i]);\r\n      removeTokenFrom(_from, _tokenIds[i]);\r\n      addTokenTo(_to, _tokenIds[i]);\r\n\r\n      emit Transfer(_from, _to, _tokenIds[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n   *  which is called upon a safe transfer, and return the magic value\r\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n   *  the transfer is reverted.\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n   *  which is called upon a safe transfer, and return the magic value\r\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n   *  the transfer is reverted.\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n    address owner = ownerOf(_tokenId);\r\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * @dev Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * @dev Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * @dev Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n      emit Approval(_owner, address(0), _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal whenNotPaused {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal whenNotPaused{\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * @dev The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: contracts\\ERC721\\GirlBasicToken.sol\r\n\r\n// add atomic swap feature in the token contract.\r\ncontract GirlBasicToken is ERC721BasicToken, Serialize {\r\n\r\n  event CreateGirl(address owner, uint256 tokenID, uint256 genes, uint64 birthTime, uint64 cooldownEndTime, uint16 starLevel);\r\n  event CoolDown(uint256 tokenId, uint64 cooldownEndTime);\r\n  event GirlUpgrade(uint256 tokenId, uint64 starLevel);\r\n\r\n  struct Girl{\r\n    /**\r\n    少女基因,生成以后不会改变\r\n    **/\r\n    uint genes;\r\n\r\n    /*\r\n    出生时间 少女创建时候的时间戳\r\n    */\r\n    uint64 birthTime;\r\n\r\n    /*\r\n    冷却结束时间\r\n    */\r\n    uint64 cooldownEndTime;\r\n    /*\r\n    star level\r\n    */\r\n    uint16 starLevel;\r\n  }\r\n\r\n  Girl[] girls;\r\n\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return girls.length;\r\n  }\r\n\r\n  function getGirlGene(uint _index) public view returns (uint) {\r\n    return girls[_index].genes;\r\n  }\r\n\r\n  function getGirlBirthTime(uint _index) public view returns (uint64) {\r\n    return girls[_index].birthTime;\r\n  }\r\n\r\n  function getGirlCoolDownEndTime(uint _index) public view returns (uint64) {\r\n    return girls[_index].cooldownEndTime;\r\n  }\r\n\r\n  function getGirlStarLevel(uint _index) public view returns (uint16) {\r\n    return girls[_index].starLevel;\r\n  }\r\n\r\n  function isNotCoolDown(uint _girlId) public view returns(bool) {\r\n    return uint64(now) > girls[_girlId].cooldownEndTime;\r\n  }\r\n\r\n  function _createGirl(\r\n      uint _genes,\r\n      address _owner,\r\n      uint16 _starLevel\r\n  ) internal returns (uint){\r\n      Girl memory _girl = Girl({\r\n          genes:_genes,\r\n          birthTime:uint64(now),\r\n          cooldownEndTime:0,\r\n          starLevel:_starLevel\r\n      });\r\n      uint256 girlId = girls.push(_girl) - 1;\r\n      _mint(_owner, girlId);\r\n      emit CreateGirl(_owner, girlId, _genes, _girl.birthTime, _girl.cooldownEndTime, _girl.starLevel);\r\n      return girlId;\r\n  }\r\n\r\n  function _setCoolDownTime(uint _tokenId, uint _coolDownTime) internal {\r\n    girls[_tokenId].cooldownEndTime = uint64(now.add(_coolDownTime));\r\n    emit CoolDown(_tokenId, girls[_tokenId].cooldownEndTime);\r\n  }\r\n\r\n  function _LevelUp(uint _tokenId) internal {\r\n    require(girls[_tokenId].starLevel < 65535);\r\n    girls[_tokenId].starLevel = girls[_tokenId].starLevel + 1;\r\n    emit GirlUpgrade(_tokenId, girls[_tokenId].starLevel);\r\n  }\r\n\r\n  // ---------------\r\n  // this is atomic swap for girl to be set cross chain.\r\n  // ---------------\r\n  uint8 constant public GIRLBUFFERSIZE = 50;  // buffer size need to serialize girl data; used for cross chain sync\r\n\r\n  struct HashLockContract {\r\n    address sender;\r\n    address receiver;\r\n    uint tokenId;\r\n    bytes32 hashlock;\r\n    uint timelock;\r\n    bytes32 secret;\r\n    States state;\r\n    bytes extraData;\r\n  }\r\n\r\n  enum States {\r\n    INVALID,\r\n    OPEN,\r\n    CLOSED,\r\n    REFUNDED\r\n  }\r\n\r\n  mapping (bytes32 => HashLockContract) private contracts;\r\n\r\n  modifier contractExists(bytes32 _contractId) {\r\n    require(_contractExists(_contractId));\r\n    _;\r\n  }\r\n\r\n  modifier hashlockMatches(bytes32 _contractId, bytes32 _secret) {\r\n    require(contracts[_contractId].hashlock == keccak256(_secret));\r\n    _;\r\n  }\r\n\r\n  modifier closable(bytes32 _contractId) {\r\n    require(contracts[_contractId].state == States.OPEN);\r\n    require(contracts[_contractId].timelock > now);\r\n    _;\r\n  }\r\n\r\n  modifier refundable(bytes32 _contractId) {\r\n    require(contracts[_contractId].state == States.OPEN);\r\n    require(contracts[_contractId].timelock <= now);\r\n    _;\r\n  }\r\n\r\n  event NewHashLockContract (\r\n    bytes32 indexed contractId,\r\n    address indexed sender,\r\n    address indexed receiver,\r\n    uint tokenId,\r\n    bytes32 hashlock,\r\n    uint timelock,\r\n    bytes extraData\r\n  );\r\n\r\n  event SwapClosed(bytes32 indexed contractId);\r\n  event SwapRefunded(bytes32 indexed contractId);\r\n\r\n  function open (\r\n    address _receiver,\r\n    bytes32 _hashlock,\r\n    uint _duration,\r\n    uint _tokenId\r\n  ) public\r\n    onlyOwnerOf(_tokenId)\r\n    returns (bytes32 contractId)\r\n  {\r\n    uint _timelock = now.add(_duration);\r\n\r\n    // compute girl data;\r\n    bytes memory _extraData = new bytes(GIRLBUFFERSIZE);\r\n    uint offset = GIRLBUFFERSIZE;\r\n\r\n    offset = addUint16(offset, _extraData, girls[_tokenId].starLevel);\r\n    offset = addUint64(offset, _extraData, girls[_tokenId].cooldownEndTime);\r\n    offset = addUint64(offset, _extraData, girls[_tokenId].birthTime);\r\n    offset = addUint(offset, _extraData, girls[_tokenId].genes);\r\n\r\n    contractId = keccak256 (\r\n      msg.sender,\r\n      _receiver,\r\n      _tokenId,\r\n      _hashlock,\r\n      _timelock,\r\n      _extraData\r\n    );\r\n\r\n    // the new contract must not exist\r\n    require(!_contractExists(contractId));\r\n\r\n    // temporary change the ownership to this contract address.\r\n    // the ownership will be change to user when close is called.\r\n    clearApproval(msg.sender, _tokenId);\r\n    removeTokenFrom(msg.sender, _tokenId);\r\n    addTokenTo(address(this), _tokenId);\r\n\r\n\r\n    contracts[contractId] = HashLockContract(\r\n      msg.sender,\r\n      _receiver,\r\n      _tokenId,\r\n      _hashlock,\r\n      _timelock,\r\n      0x0,\r\n      States.OPEN,\r\n      _extraData\r\n    );\r\n\r\n    emit NewHashLockContract(contractId, msg.sender, _receiver, _tokenId, _hashlock, _timelock, _extraData);\r\n  }\r\n\r\n  function close(bytes32 _contractId, bytes32 _secret)\r\n    public\r\n    contractExists(_contractId)\r\n    hashlockMatches(_contractId, _secret)\r\n    closable(_contractId)\r\n    returns (bool)\r\n  {\r\n    HashLockContract storage c = contracts[_contractId];\r\n    c.secret = _secret;\r\n    c.state = States.CLOSED;\r\n\r\n    // transfer token ownership from this contract address to receiver.\r\n    // clearApproval(address(this), c.tokenId);\r\n    removeTokenFrom(address(this), c.tokenId);\r\n    addTokenTo(c.receiver, c.tokenId);\r\n\r\n    emit SwapClosed(_contractId);\r\n    return true;\r\n  }\r\n\r\n  function refund(bytes32 _contractId)\r\n    public\r\n    contractExists(_contractId)\r\n    refundable(_contractId)\r\n    returns (bool)\r\n  {\r\n    HashLockContract storage c = contracts[_contractId];\r\n    c.state = States.REFUNDED;\r\n\r\n    // transfer token ownership from this contract address to receiver.\r\n    // clearApproval(address(this), c.tokenId);\r\n    removeTokenFrom(address(this), c.tokenId);\r\n    addTokenTo(c.sender, c.tokenId);\r\n\r\n\r\n    emit SwapRefunded(_contractId);\r\n    return true;\r\n  }\r\n\r\n  function _contractExists(bytes32 _contractId) internal view returns (bool exists) {\r\n    exists = (contracts[_contractId].sender != address(0));\r\n  }\r\n\r\n  function checkContract(bytes32 _contractId)\r\n    public\r\n    view\r\n    contractExists(_contractId)\r\n    returns (\r\n      address sender,\r\n      address receiver,\r\n      uint amount,\r\n      bytes32 hashlock,\r\n      uint timelock,\r\n      bytes32 secret,\r\n      bytes extraData\r\n    )\r\n  {\r\n    HashLockContract memory c = contracts[_contractId];\r\n    return (\r\n      c.sender,\r\n      c.receiver,\r\n      c.tokenId,\r\n      c.hashlock,\r\n      c.timelock,\r\n      c.secret,\r\n      c.extraData\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n// File: contracts\\GenesFactory.sol\r\n\r\ncontract GenesFactory{\r\n    function mixGenes(uint256 gene1, uint gene2) public returns(uint256);\r\n    function getPerson(uint256 genes) public pure returns (uint256 person);\r\n    function getRace(uint256 genes) public pure returns (uint256);\r\n    function getRarity(uint256 genes) public pure returns (uint256);\r\n    function getBaseStrengthenPoint(uint256 genesMain,uint256 genesSub) public pure returns (uint256);\r\n\r\n    function getCanBorn(uint256 genes) public pure returns (uint256 canBorn,uint256 cooldown);\r\n}\r\n\r\n// File: contracts\\equipments\\ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts\\equipments\\BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\equipments\\ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts\\equipments\\StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\equipments\\AtomicSwappableToken.sol\r\n\r\ncontract AtomicSwappableToken is StandardToken {\r\n  struct HashLockContract {\r\n    address sender;\r\n    address receiver;\r\n    uint amount;\r\n    bytes32 hashlock;\r\n    uint timelock;\r\n    bytes32 secret;\r\n    States state;\r\n  }\r\n\r\n  enum States {\r\n    INVALID,\r\n    OPEN,\r\n    CLOSED,\r\n    REFUNDED\r\n  }\r\n\r\n  mapping (bytes32 => HashLockContract) private contracts;\r\n\r\n  modifier futureTimelock(uint _time) {\r\n    // only requirement is the timelock time is after the last blocktime (now).\r\n    // probably want something a bit further in the future then this.\r\n    // but this is still a useful sanity check:\r\n    require(_time > now);\r\n    _;\r\n}\r\n\r\n  modifier contractExists(bytes32 _contractId) {\r\n    require(_contractExists(_contractId));\r\n    _;\r\n  }\r\n\r\n  modifier hashlockMatches(bytes32 _contractId, bytes32 _secret) {\r\n    require(contracts[_contractId].hashlock == keccak256(_secret));\r\n    _;\r\n  }\r\n\r\n  modifier closable(bytes32 _contractId) {\r\n    require(contracts[_contractId].state == States.OPEN);\r\n    require(contracts[_contractId].timelock > now);\r\n    _;\r\n  }\r\n\r\n  modifier refundable(bytes32 _contractId) {\r\n    require(contracts[_contractId].state == States.OPEN);\r\n    require(contracts[_contractId].timelock <= now);\r\n    _;\r\n  }\r\n\r\n  event NewHashLockContract (\r\n    bytes32 indexed contractId,\r\n    address indexed sender,\r\n    address indexed receiver,\r\n    uint amount,\r\n    bytes32 hashlock,\r\n    uint timelock\r\n  );\r\n\r\n  event SwapClosed(bytes32 indexed contractId);\r\n  event SwapRefunded(bytes32 indexed contractId);\r\n\r\n\r\n  function open (\r\n    address _receiver,\r\n    bytes32 _hashlock,\r\n    uint _timelock,\r\n    uint _amount\r\n  ) public\r\n    futureTimelock(_timelock)\r\n    returns (bytes32 contractId)\r\n  {\r\n    contractId = keccak256 (\r\n      msg.sender,\r\n      _receiver,\r\n      _amount,\r\n      _hashlock,\r\n      _timelock\r\n    );\r\n\r\n    // the new contract must not exist\r\n    require(!_contractExists(contractId));\r\n\r\n    // transfer token to this contract\r\n    require(transfer(address(this), _amount));\r\n\r\n    contracts[contractId] = HashLockContract(\r\n      msg.sender,\r\n      _receiver,\r\n      _amount,\r\n      _hashlock,\r\n      _timelock,\r\n      0x0,\r\n      States.OPEN\r\n    );\r\n\r\n    emit NewHashLockContract(contractId, msg.sender, _receiver, _amount, _hashlock, _timelock);\r\n  }\r\n\r\n  function close(bytes32 _contractId, bytes32 _secret)\r\n    public\r\n    contractExists(_contractId)\r\n    hashlockMatches(_contractId, _secret)\r\n    closable(_contractId)\r\n    returns (bool)\r\n  {\r\n    HashLockContract storage c = contracts[_contractId];\r\n    c.secret = _secret;\r\n    c.state = States.CLOSED;\r\n    require(this.transfer(c.receiver, c.amount));\r\n    emit SwapClosed(_contractId);\r\n    return true;\r\n  }\r\n\r\n  function refund(bytes32 _contractId)\r\n    public\r\n    contractExists(_contractId)\r\n    refundable(_contractId)\r\n    returns (bool)\r\n  {\r\n    HashLockContract storage c = contracts[_contractId];\r\n    c.state = States.REFUNDED;\r\n    require(this.transfer(c.sender, c.amount));\r\n    emit SwapRefunded(_contractId);\r\n    return true;\r\n  }\r\n\r\n  function _contractExists(bytes32 _contractId) internal view returns (bool exists) {\r\n    exists = (contracts[_contractId].sender != address(0));\r\n  }\r\n\r\n  function checkContract(bytes32 _contractId)\r\n    public\r\n    view\r\n    contractExists(_contractId)\r\n    returns (\r\n      address sender,\r\n      address receiver,\r\n      uint amount,\r\n      bytes32 hashlock,\r\n      uint timelock,\r\n      bytes32 secret\r\n    )\r\n  {\r\n    HashLockContract memory c = contracts[_contractId];\r\n    return (\r\n      c.sender,\r\n      c.receiver,\r\n      c.amount,\r\n      c.hashlock,\r\n      c.timelock,\r\n      c.secret\r\n    );\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\equipments\\TokenReceiver.sol\r\n\r\ncontract TokenReceiver {\r\n  function receiveApproval(address from, uint amount, address tokenAddress, bytes data) public;\r\n}\r\n\r\n// File: contracts\\equipments\\BaseEquipment.sol\r\n\r\ncontract BaseEquipment is Ownable, AtomicSwappableToken {\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  //cap==0 means no limits\r\n  uint256 public cap;\r\n\r\n  /**\r\n      properties = [\r\n          0, //validationDuration\r\n          1, //location\r\n          2, //applicableType\r\n      ];\r\n  **/\r\n  uint[] public properties;\r\n\r\n\r\n  address public controller;\r\n\r\n  modifier onlyController { require(msg.sender == controller); _; }\r\n\r\n  function setController(address _newController) public onlyOwner {\r\n    controller = _newController;\r\n  }\r\n\r\n  constructor(uint256 _cap, uint[] _properties) public {\r\n    cap = _cap;\r\n    properties = _properties;\r\n  }\r\n\r\n  function setProperty(uint256[] _properties) public onlyOwner {\r\n    properties = _properties;\r\n  }\r\n\r\n\r\n  function _mint(address _to, uint _amount) internal {\r\n    require(cap==0 || totalSupply_.add(_amount) <= cap);\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n  }\r\n\r\n\r\n  function mint(address _to, uint256 _amount) onlyController public returns (bool) {\r\n    _mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n\r\n  function mintFromOwner(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n    _mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n\r\n  function approveAndCall(address _spender, uint _amount, bytes _data) public {\r\n    if(approve(_spender, _amount)) {\r\n      TokenReceiver(_spender).receiveApproval(msg.sender, _amount, address(this), _data);\r\n    }\r\n  }\r\n\r\n\r\n  function checkCap(uint256 _amount) public view returns (bool) {\r\n  \treturn (cap==0 || totalSupply_.add(_amount) <= cap);\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n// File: contracts\\AvatarEquipments.sol\r\n\r\ncontract AvatarEquipments is Pausable{\r\n\r\n    event SetEquipment(address user, uint256 girlId, address tokenAddress, uint256 amount, uint validationDuration);\r\n\r\n    struct Equipment {\r\n        address BackgroundAddress;\r\n        uint BackgroundAmount;\r\n        uint64 BackgroundEndTime;\r\n\r\n        address photoFrameAddress;\r\n        uint photoFrameAmount;\r\n        uint64 photoFrameEndTime;\r\n\r\n        address armsAddress;\r\n        uint armsAmount;\r\n        uint64 armsEndTime;\r\n\r\n        address petAddress;\r\n        uint petAmount;\r\n        uint64 petEndTime;\r\n    }\r\n    GirlBasicToken girlBasicToken;\r\n    GenesFactory genesFactory;\r\n  /// @dev A mapping from girl IDs to their current equipment.\r\n    mapping (uint256 => Equipment) public GirlIndexToEquipment;\r\n\r\n    mapping (address => bool) public equipmentToStatus;\r\n\r\n    constructor(address _girlBasicToken, address _GenesFactory) public{\r\n        require(_girlBasicToken != address(0x0));\r\n        girlBasicToken = GirlBasicToken(_girlBasicToken);\r\n        genesFactory = GenesFactory(_GenesFactory);\r\n    }\r\n\r\n/* if the list goes to hundreds of equipment this transaction may out of gas.\r\n    function managerEquipment(address[] addressList, bool[] statusList) public onlyOwner {\r\n        require(addressList.length == statusList.length);\r\n        require(addressList.length > 0);\r\n        for (uint i = 0; i < addressList.length; i ++) {\r\n            equipmentToStatus[addressList[i]] = statusList[i];\r\n        }\r\n    }\r\n*/\r\n\r\n    function addTokenToWhitelist(address _eq) public onlyOwner {\r\n      equipmentToStatus[_eq] = true;\r\n    }\r\n\r\n\r\n    function removeFromWhitelist(address _eq) public onlyOwner {\r\n      equipmentToStatus[_eq] = false;\r\n    }\r\n\r\n    function addManyToWhitelist(address[] _eqs) public onlyOwner {\r\n      for(uint i=0; i<_eqs.length; i++) {\r\n        equipmentToStatus[_eqs[i]] = true;\r\n      }\r\n    }\r\n\r\n    // 新需求： 永久道具(validDuration=18446744073709551615)可拆卸  (18446744073709551615 is max of uint64 )\r\n    function withdrawEquipment(uint _girlId, address _equipmentAddress) public {\r\n       BaseEquipment baseEquipment = BaseEquipment(_equipmentAddress);\r\n       uint _validationDuration = baseEquipment.properties(0);\r\n       require(_validationDuration == 18446744073709551615); // the token must have infinite duration. validation duration 0 indicate infinite duration\r\n       Equipment storage equipment = GirlIndexToEquipment[_girlId];\r\n       uint location = baseEquipment.properties(1);\r\n       address owner = girlBasicToken.ownerOf(_girlId);\r\n       uint amount;\r\n       if (location == 1 && equipment.BackgroundAddress == _equipmentAddress) {\r\n          amount = equipment.BackgroundAmount;\r\n          \r\n          equipment.BackgroundAddress = address(0); \r\n          equipment.BackgroundAmount = 0; \r\n          equipment.BackgroundEndTime = 0;          \r\n       } else if (location == 2 && equipment.photoFrameAddress == _equipmentAddress) {\r\n          amount = equipment.photoFrameAmount;\r\n          \r\n          equipment.photoFrameAddress = address(0); \r\n          equipment.photoFrameAmount= 0; \r\n          equipment.photoFrameEndTime = 0;\r\n       } else if (location == 3 && equipment.armsAddress == _equipmentAddress) {\r\n          amount = equipment.armsAmount;\r\n          \r\n          equipment.armsAddress = address(0); \r\n          equipment.armsAmount = 0; \r\n          equipment.armsEndTime = 0; \r\n       } else if (location == 4 && equipment.petAddress == _equipmentAddress) {\r\n          amount = equipment.petAmount;\r\n          \r\n          equipment.petAddress = address(0); \r\n          equipment.petAmount = 0; \r\n          equipment.petEndTime = 0; \r\n       } else {\r\n          revert();\r\n       }\r\n       require(amount > 0);\r\n       baseEquipment.transfer(owner, amount);\r\n    }\r\n\r\n    function setEquipment(address _sender, uint _girlId, uint _amount, address _equipmentAddress, uint256[] _properties) whenNotPaused public {\r\n        require(isValid(_sender, _girlId , _amount, _equipmentAddress));\r\n        Equipment storage equipment = GirlIndexToEquipment[_girlId];\r\n\r\n        require(_properties.length >= 3);\r\n        uint _validationDuration = _properties[0];\r\n        uint _location = _properties[1];\r\n        uint _applicableType = _properties[2];\r\n\r\n        if(_applicableType < 16){\r\n          uint genes = girlBasicToken.getGirlGene(_girlId);\r\n          uint race = genesFactory.getRace(genes);\r\n          require(race == uint256(_applicableType));\r\n        }\r\n\r\n        uint _count = _amount / (1 ether);\r\n\r\n        if (_location == 1) {\r\n            if(_validationDuration == 18446744073709551615) { // 根据永久道具需求更改\r\n              equipment.BackgroundEndTime = 18446744073709551615;\r\n            } else if((equipment.BackgroundAddress == _equipmentAddress) && equipment.BackgroundEndTime > now ) {\r\n                equipment.BackgroundEndTime  += uint64(_count * _validationDuration);\r\n            } else {\r\n                equipment.BackgroundEndTime = uint64(now + (_count * _validationDuration));\r\n            }\r\n            equipment.BackgroundAddress = _equipmentAddress;\r\n            equipment.BackgroundAmount = _amount;\r\n        } else if (_location == 2){\r\n            if(_validationDuration == 18446744073709551615) {\r\n              equipment.photoFrameEndTime = 18446744073709551615;\r\n            } else if((equipment.photoFrameAddress == _equipmentAddress) && equipment.photoFrameEndTime > now ) {\r\n                equipment.photoFrameEndTime  += uint64(_count * _validationDuration);\r\n            } else {\r\n                equipment.photoFrameEndTime = uint64(now + (_count * _validationDuration));\r\n            }\r\n            equipment.photoFrameAddress = _equipmentAddress;\r\n            equipment.photoFrameAmount = _amount;\r\n        } else if (_location == 3) {\r\n            if(_validationDuration == 18446744073709551615) {\r\n              equipment.armsEndTime = 18446744073709551615;\r\n            } else if((equipment.armsAddress == _equipmentAddress) && equipment.armsEndTime > now ) {\r\n              equipment.armsEndTime  += uint64(_count * _validationDuration);\r\n            } else {\r\n              equipment.armsEndTime = uint64(now + (_count * _validationDuration));\r\n            }\r\n            equipment.armsAddress = _equipmentAddress;\r\n            equipment.armsAmount = _count;\r\n        } else if (_location == 4) {\r\n            if(_validationDuration == 18446744073709551615) {\r\n              equipment.petEndTime = 18446744073709551615;\r\n            } else if((equipment.petAddress == _equipmentAddress) && equipment.petEndTime > now ) {\r\n              equipment.petEndTime  += uint64(_count * _validationDuration);\r\n            } else {\r\n              equipment.petEndTime = uint64(now + (_count * _validationDuration));\r\n            }\r\n            equipment.petAddress = _equipmentAddress;\r\n            equipment.petAmount = _amount;\r\n        } else{\r\n            revert();\r\n        }\r\n        emit SetEquipment(_sender, _girlId, _equipmentAddress, _amount, _validationDuration);\r\n    }\r\n\r\n    function isValid (address _from, uint _GirlId, uint _amount, address _tokenContract) public returns (bool) {\r\n        BaseEquipment baseEquipment = BaseEquipment(_tokenContract);\r\n        require(equipmentToStatus[_tokenContract]);\r\n        // must send at least 1 token\r\n        require(_amount >= 1 ether);\r\n        require(_amount % 1 ether == 0); // basic unit is 1 token;\r\n        require(girlBasicToken.ownerOf(_GirlId) == _from || owner == _from); // must from girl owner or the owner of contract. \r\n        require(baseEquipment.transferFrom(_from, this, _amount));\r\n        return true;\r\n    }\r\n\r\n    function getGirlEquipmentStatus(uint256 _girlId) public view returns(\r\n        address BackgroundAddress,\r\n        uint BackgroundAmount,\r\n        uint BackgroundEndTime,\r\n\r\n        address photoFrameAddress,\r\n        uint photoFrameAmount,\r\n        uint photoFrameEndTime,\r\n\r\n        address armsAddress,\r\n        uint armsAmount,\r\n        uint armsEndTime,\r\n\r\n        address petAddress,\r\n        uint petAmount,\r\n        uint petEndTime\r\n  ){\r\n        Equipment storage equipment = GirlIndexToEquipment[_girlId];\r\n        if (equipment.BackgroundEndTime >= now) {\r\n            BackgroundAddress = equipment.BackgroundAddress;\r\n            BackgroundAmount = equipment.BackgroundAmount;\r\n            BackgroundEndTime = equipment.BackgroundEndTime;\r\n        }\r\n\r\n        if (equipment.photoFrameEndTime >= now) {\r\n            photoFrameAddress = equipment.photoFrameAddress;\r\n            photoFrameAmount = equipment.photoFrameAmount;\r\n            photoFrameEndTime = equipment.photoFrameEndTime;\r\n        }\r\n\r\n        if (equipment.armsEndTime >= now) {\r\n            armsAddress = equipment.armsAddress;\r\n            armsAmount = equipment.armsAmount;\r\n            armsEndTime = equipment.armsEndTime;\r\n        }\r\n\r\n        if (equipment.petEndTime >= now) {\r\n            petAddress = equipment.petAddress;\r\n            petAmount = equipment.petAmount;\r\n            petEndTime = equipment.petEndTime;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\equipments\\EquipmentToken.sol\r\n\r\ncontract EquipmentToken is BaseEquipment {\r\n    string public name;                //The shoes name: e.g. shining shoes\r\n    string public symbol;              //The shoes symbol: e.g. SS\r\n    uint8 public decimals;           //Number of decimals of the smallest unit\r\n\r\n\r\n    constructor (\r\n        string _name,\r\n        string _symbol,\r\n        uint256 _cap,\r\n        uint[] _properties\r\n    ) public BaseEquipment(_cap, _properties) {\r\n\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = 18;  // set as default\r\n    }\r\n\r\n    function setEquipment(address _target, uint _GirlId, uint256 _amount) public returns (bool success) {\r\n        AvatarEquipments eq = AvatarEquipments(_target);\r\n        if (approve(_target, _amount)) {\r\n            eq.setEquipment(msg.sender, _GirlId, _amount, this, properties);\r\n            return true;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_hashlock\",\"type\":\"bytes32\"},{\"name\":\"_timelock\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"open\",\"outputs\":[{\"name\":\"contractId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contractId\",\"type\":\"bytes32\"}],\"name\":\"checkContract\",\"outputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"hashlock\",\"type\":\"bytes32\"},{\"name\":\"timelock\",\"type\":\"uint256\"},{\"name\":\"secret\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_properties\",\"type\":\"uint256[]\"}],\"name\":\"setProperty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_GirlId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setEquipment\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintFromOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkCap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractId\",\"type\":\"bytes32\"},{\"name\":\"_secret\",\"type\":\"bytes32\"}],\"name\":\"close\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"properties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_properties\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hashlock\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timelock\",\"type\":\"uint256\"}],\"name\":\"NewHashLockContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractId\",\"type\":\"bytes32\"}],\"name\":\"SwapClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractId\",\"type\":\"bytes32\"}],\"name\":\"SwapRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EquipmentToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000013556e636f6d6d6f6e4261636b67726f756e643200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000355423200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000002a30000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002","Library":"","SwarmSource":"bzzr://420934133ca0d00516da3450808113d913a5e9900270cd20538df9fa4fdcd69b"}]}