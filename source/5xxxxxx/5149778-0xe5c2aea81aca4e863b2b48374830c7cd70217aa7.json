{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\n * v1.0\r\n * Created by MyEtheroll.com, feb 2018\r\n * Feel free to copy and share :)\r\n * Donations: 0x7e3dc9f40e7ff9db80c3c7a1847cb95f861b3aef\r\n*/\r\n\r\ncontract Billboard {\r\n\r\n    uint public cost = 100000000000000; // 0.0001 eth\r\n    uint16 public messageSpanStep = 1 minutes;\r\n    address owner;\r\n\r\n    bytes32 public head;\r\n    uint public length = 0;\r\n    mapping (bytes32 => Message) public messages;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    event MessageAdded(address indexed sender, uint validFrom, uint validTo, string message);\r\n    event MessageSpanStepChanged(uint16 newStep);\r\n    event CostChanged(uint newCost);\r\n\r\n    struct Message {\r\n    uint validFrom;\r\n    uint validTo;\r\n    address sender;\r\n    string message;\r\n    bytes32 next;\r\n    }\r\n\r\n    /*\r\n    * Init.\r\n    */\r\n    function Billboard() public {\r\n        _saveMessage(now, now, msg.sender, \"Welcome to MyEtheroll.com!\");\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /*\r\n    * Adds message to the billboard.\r\n    * If a message already exists that has not expired, the new message will be queued.\r\n    */\r\n    function addMessage(string _message) public payable {\r\n        require(msg.value >= cost || msg.sender == owner); // make sure enough eth is sent\r\n        uint validFrom = messages[head].validTo > now ? messages[head].validTo : now;\r\n        _saveMessage(validFrom, validFrom + calculateDuration(msg.value), msg.sender, _message);\r\n        if(msg.value>0)owner.transfer(msg.value);\r\n    }\r\n\r\n\r\n    /*\r\n    * Returns the current active message.\r\n    */\r\n    function getActiveMessage() public view returns (uint, uint, address, string, bytes32) {\r\n        bytes32 idx = _getActiveMessageId();\r\n        return (messages[idx].validFrom, messages[idx].validTo, messages[idx].sender, messages[idx].message, messages[idx].next);\r\n    }\r\n\r\n    /*\r\n    * Returns the timestamp of next queue opening.\r\n    */\r\n    function getQueueOpening() public view returns (uint) {\r\n        return messages[head].validTo;\r\n    }\r\n\r\n    /*\r\n    * Returns guaranteed duration of message based on amount of wei sent with message.\r\n    * For each multiple of the current cost, the duration guarantee is extended by the messageSpan.\r\n    */\r\n    function calculateDuration(uint _wei) public view returns (uint)  {\r\n        return (_wei / cost * messageSpanStep);\r\n    }\r\n\r\n    /*\r\n    * Owner can change the message span step, in seconds.\r\n    */\r\n    function setMessageSpan(uint16 _newMessageSpanStep) public onlyOwner {\r\n        messageSpanStep = _newMessageSpanStep;\r\n        MessageSpanStepChanged(_newMessageSpanStep);\r\n    }\r\n\r\n    /*\r\n    * Owner can change the cost, in wei.\r\n    */\r\n    function setCost(uint _newCost) public onlyOwner {\r\n        cost = _newCost;\r\n        CostChanged(_newCost);\r\n    }\r\n\r\n    /*\r\n    * Save message to the blockchain and add event.\r\n    */\r\n    function _saveMessage (uint _validFrom, uint _validTo, address _sender, string _message) private {\r\n        bytes32 id = _createId(Message(_validFrom, _validTo, _sender, _message, head));\r\n        messages[id] = Message(_validFrom, _validTo, _sender, _message, head);\r\n        length = length+1;\r\n        head = id;\r\n        MessageAdded(_sender, _validFrom, _validTo, _message);\r\n    }\r\n\r\n    /*\r\n    * Create message id for linked list.\r\n    */\r\n    function _createId(Message _message) private view returns (bytes32) {\r\n        return keccak256(_message.validFrom, _message.validTo, _message.sender, _message.message, length);\r\n    }\r\n\r\n    /*\r\n    * Get message id for current active message.\r\n    */\r\n    function _getActiveMessageId() private view returns (bytes32) {\r\n        bytes32 idx = head;\r\n        while(messages[messages[idx].next].validTo > now){\r\n            idx = messages[idx].next;\r\n        }\r\n        return idx;\r\n    }\r\n\r\n    /*\r\n    * Kill contract.\r\n    */\r\n    function kill() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"messages\",\"outputs\":[{\"name\":\"validFrom\",\"type\":\"uint256\"},{\"name\":\"validTo\",\"type\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"next\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMessageSpanStep\",\"type\":\"uint16\"}],\"name\":\"setMessageSpan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActiveMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"messageSpanStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"addMessage\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"calculateDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"head\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQueueOpening\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"validFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"validTo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"MessageAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newStep\",\"type\":\"uint16\"}],\"name\":\"MessageSpanStepChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newCost\",\"type\":\"uint256\"}],\"name\":\"CostChanged\",\"type\":\"event\"}]","ContractName":"Billboard","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5e6145fbecd8bd843f28e8d02a1a633b15932a73e9a24006cfbb86b04005e1b5"}]}