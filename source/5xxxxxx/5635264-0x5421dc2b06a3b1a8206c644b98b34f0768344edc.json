{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src,\r\n        address dst,\r\n        bytes4 sig\r\n        ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Exchange is DSAuth {\r\n\r\n    ERC20 public daiToken;\r\n    mapping(address => uint) public dai;\r\n    mapping(address => uint) public eth;\r\n\r\n    mapping(address => uint) public totalEth;\r\n    mapping(address => uint) public totalDai;\r\n\r\n    mapping(bytes32 => mapping(address => uint)) public callsOwned;\r\n    mapping(bytes32 => mapping(address => uint)) public putsOwned;\r\n    mapping(bytes32 => mapping(address => uint)) public callsSold;\r\n    mapping(bytes32 => mapping(address => uint)) public putsSold;\r\n\r\n    mapping(bytes32 => uint) public callsAssigned;\r\n    mapping(bytes32 => uint) public putsAssigned;\r\n    mapping(bytes32 => uint) public callsExercised;\r\n    mapping(bytes32 => uint) public putsExercised;\r\n\r\n    mapping(address => mapping(bytes32 => bool)) public cancelled;\r\n    mapping(address => mapping(bytes32 => uint)) public filled;\r\n\r\n    // fee values are actually in DAI, ether is just a keyword\r\n    uint public flatFee       = 7 ether;\r\n    uint public contractFee   = 1 ether;\r\n    uint public exerciseFee   = 20 ether;\r\n    uint public settlementFee = 20 ether;\r\n    uint public feesCollected = 0;\r\n\r\n    string precisionError = \"Precision\";\r\n\r\n    constructor(address daiAddress) public {\r\n        require(daiAddress != 0x0);\r\n        daiToken = ERC20(daiAddress);\r\n    }\r\n\r\n    function() public payable {\r\n        revert();\r\n    }\r\n\r\n    event Deposit(address indexed account, uint amount);\r\n    event Withdraw(address indexed account, uint amount, address to);\r\n    event DepositDai(address indexed account, uint amount);\r\n    event WithdrawDai(address indexed account, uint amount, address to);\r\n\r\n    function deposit() public payable {\r\n        _addEth(msg.value, msg.sender);\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function depositDai(uint amount) public {\r\n        require(daiToken.transferFrom(msg.sender, this, amount));\r\n        _addDai(amount, msg.sender);\r\n        emit DepositDai(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint amount, address to) public {\r\n        require(to != 0x0);\r\n        _subEth(amount, msg.sender);\r\n        to.transfer(amount);\r\n        emit Withdraw(msg.sender, amount, to);\r\n    }\r\n\r\n    function withdrawDai(uint amount, address to) public {\r\n        require(\r\n            to != 0x0 &&\r\n            daiToken.transfer(to, amount)\r\n        );\r\n        _subDai(amount, msg.sender);\r\n        emit WithdrawDai(msg.sender, amount, to);\r\n    }\r\n\r\n    function depositDaiFor(uint amount, address account) public {\r\n        require(\r\n            account != 0x0 &&\r\n            daiToken.transferFrom(msg.sender, this, amount)\r\n        );\r\n        _addDai(amount, account);\r\n        emit DepositDai(account, amount);\r\n    }\r\n\r\n    function _addEth(uint amount, address account) private {\r\n        eth[account] += amount;\r\n        totalEth[account] += amount;\r\n    }\r\n\r\n    function _subEth(uint amount, address account) private {\r\n        require(eth[account] >= amount);\r\n        eth[account] -= amount;\r\n        totalEth[account] -= amount;\r\n    }\r\n\r\n    function _addDai(uint amount, address account) private {\r\n        dai[account] += amount;\r\n        totalDai[account] += amount;\r\n    }\r\n\r\n    function _subDai(uint amount, address account) private {\r\n        require(dai[account] >= amount);\r\n        dai[account] -= amount;\r\n        totalDai[account] -= amount;\r\n    }\r\n\r\n    // ===== Admin functions ===== //\r\n\r\n    function setFeeSchedule(\r\n        uint _flatFee,\r\n        uint _contractFee,\r\n        uint _exerciseFee,\r\n        uint _settlementFee\r\n    ) public auth {\r\n        flatFee = _flatFee;\r\n        contractFee = _contractFee;\r\n        exerciseFee = _exerciseFee;\r\n        settlementFee = _settlementFee;\r\n\r\n        require(\r\n            contractFee < 5 ether &&\r\n            flatFee < 6.95 ether &&\r\n            exerciseFee < 20 ether &&\r\n            settlementFee < 20 ether\r\n        );\r\n    }\r\n\r\n    function withdrawFees(address to) public auth {\r\n        require(to != 0x0);\r\n        uint amount = feesCollected;\r\n        feesCollected = 0;\r\n        daiToken.transfer(to, amount);\r\n    }\r\n\r\n    // ===== End Admin Functions ===== //\r\n\r\n    modifier hasFee(uint amount) {\r\n        _;\r\n        _collectFee(msg.sender, calculateFee(amount));\r\n    }\r\n\r\n    enum Action {\r\n        BuyCallToOpen,\r\n        BuyCallToClose,\r\n        SellCallToOpen,\r\n        SellCallToClose,\r\n        BuyPutToOpen,\r\n        BuyPutToClose,\r\n        SellPutToOpen,\r\n        SellPutToClose\r\n    }\r\n\r\n    event CancelOrder(address indexed account, bytes32 h);\r\n    function cancelOrder(bytes32 h) public {\r\n        cancelled[msg.sender][h] = true;\r\n        emit CancelOrder(msg.sender, h);\r\n    }\r\n\r\n    function callBtoWithSto(\r\n        uint    amount,\r\n        uint    expiration,\r\n        bytes32 nonce,\r\n        uint    price,\r\n        uint    size,\r\n        uint    strike,\r\n        uint    validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8   v\r\n    ) public hasFee(amount) {\r\n        address maker = _validate(Action.SellCallToOpen, amount, expiration, nonce, price, size, strike, validUntil, r, s, v);\r\n        _bcto(amount, expiration, price, strike, msg.sender);\r\n        _scto(amount, expiration, price, strike, maker);\r\n    }\r\n\r\n    function callBtoWithStc(\r\n        uint    amount,\r\n        uint    expiration,\r\n        bytes32 nonce,\r\n        uint    price,\r\n        uint    size,\r\n        uint    strike,\r\n        uint    validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8   v\r\n    ) public hasFee(amount) {\r\n        address maker = _validate(Action.SellCallToClose, amount, expiration, nonce, price, size, strike, validUntil, r, s, v);\r\n        _bcto(amount, expiration, price, strike, msg.sender);\r\n        _sctc(amount, expiration, price, strike, maker);\r\n    }\r\n\r\n    function callBtcWithSto(\r\n        uint    amount,\r\n        uint    expiration,\r\n        bytes32 nonce,\r\n        uint    price,\r\n        uint    size,\r\n        uint    strike,\r\n        uint    validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8   v\r\n    ) public hasFee(amount) {\r\n        address maker = _validate(Action.SellCallToOpen, amount, expiration, nonce, price, size, strike, validUntil, r, s, v);\r\n        _bctc(amount, expiration, price, strike, msg.sender);\r\n        _scto(amount, expiration, price, strike, maker);\r\n    }\r\n\r\n    function callBtcWithStc(\r\n        uint    amount,\r\n        uint    expiration,\r\n        bytes32 nonce,\r\n        uint    price,\r\n        uint    size,\r\n        uint    strike,\r\n        uint    validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8   v\r\n    ) public hasFee(amount) {\r\n        address maker = _validate(Action.SellCallToClose, amount, expiration, nonce, price, size, strike, validUntil, r, s, v);\r\n        _bctc(amount, expiration, price, strike, msg.sender);\r\n        _sctc(amount, expiration, price, strike, maker);\r\n    }\r\n\r\n    function callStoWithBto(\r\n        uint    amount,\r\n        uint    expiration,\r\n        bytes32 nonce,\r\n        uint    price,\r\n        uint    size,\r\n        uint    strike,\r\n        uint    validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8   v\r\n    ) public hasFee(amount) {\r\n        address maker = _validate(Action.BuyCallToOpen, amount, expiration, nonce, price, size, strike, validUntil, r, s, v);\r\n        _scto(amount, expiration, price, strike, msg.sender);\r\n        _bcto(amount, expiration, price, strike, maker);\r\n    }\r\n\r\n    function callStoWithBtc(\r\n        uint    amount,\r\n        uint    expiration,\r\n        bytes32 nonce,\r\n        uint    price,\r\n        uint    size,\r\n        uint    strike,\r\n        uint    validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8   v\r\n    ) public hasFee(amount) {\r\n        address maker = _validate(Action.BuyCallToClose, amount, expiration, nonce, price, size, strike, validUntil, r, s, v);\r\n        _scto(amount, expiration, price, strike, msg.sender);\r\n        _bctc(amount, expiration, price, strike, maker);\r\n    }\r\n\r\n    function callStcWithBto(\r\n        uint    amount,\r\n        uint    expiration,\r\n        bytes32 nonce,\r\n        uint    price,\r\n        uint    size,\r\n        uint    strike,\r\n        uint    validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8   v\r\n    ) public hasFee(amount) {\r\n        address maker = _validate(Action.BuyCallToOpen, amount, expiration, nonce, price, size, strike, validUntil, r, s, v);\r\n        _sctc(amount, expiration, price, strike, msg.sender);\r\n        _bcto(amount, expiration, price, strike, maker);\r\n    }\r\n\r\n    function callStcWithBtc(\r\n        uint    amount,\r\n        uint    expiration,\r\n        bytes32 nonce,\r\n        uint    price,\r\n        uint    size,\r\n        uint    strike,\r\n        uint    validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8   v\r\n    ) public hasFee(amount) {\r\n        address maker = _validate(Action.BuyCallToClose, amount, expiration, nonce, price, size, strike, validUntil, r, s, v);\r\n        _sctc(amount, expiration, price, strike, msg.sender);\r\n        _bctc(amount, expiration, price, strike, maker);\r\n    }\r\n\r\n    event BuyCallToOpen(address indexed account, uint amount, uint expiration, uint price, uint strike);\r\n    event SellCallToOpen(address indexed account, uint amount, uint expiration, uint price, uint strike);\r\n    event BuyCallToClose(address indexed account, uint amount, uint expiration, uint price, uint strike);\r\n    event SellCallToClose(address indexed account, uint amount, uint expiration, uint price, uint strike);\r\n\r\n    function _bcto(uint amount, uint expiration, uint price, uint strike, address buyer) private {\r\n        bytes32 series = keccak256(expiration, strike);\r\n        uint premium = amount * price / 1 ether;\r\n        _subDai(premium, buyer);\r\n\r\n        require(callsOwned[series][buyer] + amount >= callsOwned[series][buyer]);\r\n        callsOwned[series][buyer] += amount;\r\n        emit BuyCallToOpen(buyer, amount, expiration, price, strike);\r\n    }\r\n\r\n    function _bctc(uint amount, uint expiration, uint price, uint strike, address buyer) private {\r\n        bytes32 series = keccak256(expiration, strike);\r\n        uint premium = amount * price / 1 ether;\r\n\r\n        _subDai(premium, buyer);\r\n        eth[buyer] += amount;\r\n        require(callsSold[series][buyer] >= amount);\r\n        callsSold[series][buyer] -= amount;\r\n        emit BuyCallToClose(buyer, amount, expiration, price, strike);\r\n    }\r\n\r\n    function _scto(uint amount, uint expiration, uint price, uint strike, address seller) private {\r\n        bytes32 series = keccak256(expiration, strike);\r\n        uint premium = amount * price / 1 ether;\r\n\r\n        _addDai(premium, seller);\r\n        require(\r\n            eth[seller] >= amount &&\r\n            callsSold[series][seller] + amount >= callsSold[series][seller]\r\n        );\r\n        eth[seller] -= amount;\r\n        callsSold[series][seller] += amount;\r\n        emit SellCallToOpen(seller, amount, expiration, price, strike);\r\n    }\r\n\r\n    function _sctc(uint amount, uint expiration, uint price, uint strike, address seller) private {\r\n        bytes32 series = keccak256(expiration, strike);\r\n        uint premium = amount * price / 1 ether;\r\n\r\n        _addDai(premium, seller);\r\n        require(callsOwned[series][seller] >= amount);\r\n        callsOwned[series][seller] -= amount;\r\n        emit SellCallToClose(seller, amount, expiration, price, strike);\r\n    }\r\n\r\n    event ExerciseCall(address indexed account, uint amount, uint expiration, uint strike);\r\n    function exerciseCall(\r\n        uint amount,\r\n        uint expiration,\r\n        uint strike\r\n    ) public {\r\n        uint cost = amount * strike / 1 ether;\r\n        bytes32 series = keccak256(expiration, strike);\r\n\r\n        require(\r\n            now < expiration &&\r\n            amount % 1 finney == 0 &&\r\n            callsOwned[series][msg.sender] >= amount &&\r\n            amount > 0\r\n        );\r\n\r\n        callsOwned[series][msg.sender] -= amount;\r\n        callsExercised[series] += amount;\r\n\r\n        _collectFee(msg.sender, exerciseFee);\r\n        _subDai(cost, msg.sender);\r\n        _addEth(amount, msg.sender);\r\n        emit ExerciseCall(msg.sender, amount, expiration, strike);\r\n    }\r\n\r\n    event AssignCall(address indexed account, uint amount, uint expiration, uint strike);\r\n    event SettleCall(address indexed account, uint expiration, uint strike);\r\n    function settleCall(uint expiration, uint strike, address writer) public {\r\n        bytes32 series = keccak256(expiration, strike);\r\n\r\n        require(\r\n            (msg.sender == writer || isAuthorized(msg.sender, msg.sig)) &&\r\n            now > expiration &&\r\n            callsSold[series][writer] > 0\r\n        );\r\n\r\n        if (callsAssigned[series] < callsExercised[series]) {\r\n            uint maximum = callsSold[series][writer];\r\n            uint needed = callsExercised[series] - callsAssigned[series];\r\n            uint assignment = needed > maximum ? maximum : needed;\r\n\r\n            totalEth[writer] -= assignment;\r\n            callsAssigned[series] += assignment;\r\n            callsSold[series][writer] -= assignment;\r\n\r\n            uint value = strike * assignment / 1 ether;\r\n            _addDai(value, writer);\r\n            emit AssignCall(msg.sender, assignment, expiration, strike);\r\n        }\r\n\r\n        _collectFee(writer, settlementFee);\r\n        eth[writer] += callsSold[series][writer];\r\n        callsSold[series][writer] = 0;\r\n        emit SettleCall(writer, expiration, strike);\r\n    }\r\n\r\n\r\n    // ========== PUT OPTIONS EXCHANGE ========== //\r\n\r\n    function putBtoWithSto(\r\n        uint    amount,\r\n        uint    expiration,\r\n        bytes32 nonce,\r\n        uint    price,\r\n        uint    size,\r\n        uint    strike,\r\n        uint    validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8   v\r\n    ) public hasFee(amount) {\r\n        address maker = _validate(Action.SellPutToOpen, amount, expiration, nonce, price, size, strike, validUntil, r, s, v);\r\n        _bpto(amount, expiration, price, strike, msg.sender);\r\n        _spto(amount, expiration, price, strike, maker);\r\n    }\r\n\r\n    function putBtoWithStc(\r\n        uint    amount,\r\n        uint    expiration,\r\n        bytes32 nonce,\r\n        uint    price,\r\n        uint    size,\r\n        uint    strike,\r\n        uint    validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8   v\r\n    ) public hasFee(amount) {\r\n        address maker = _validate(Action.SellPutToClose, amount, expiration, nonce, price, size, strike, validUntil, r, s, v);\r\n        _bpto(amount, expiration, price, strike, msg.sender);\r\n        _sptc(amount, expiration, price, strike, maker);\r\n    }\r\n\r\n    function putBtcWithSto(\r\n        uint    amount,\r\n        uint    expiration,\r\n        bytes32 nonce,\r\n        uint    price,\r\n        uint    size,\r\n        uint    strike,\r\n        uint    validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8   v\r\n    ) public hasFee(amount) {\r\n        address maker = _validate(Action.SellPutToOpen, amount, expiration, nonce, price, size, strike, validUntil, r, s, v);\r\n        _bptc(amount, expiration, price, strike, msg.sender);\r\n        _spto(amount, expiration, price, strike, maker);\r\n    }\r\n\r\n    function putBtcWithStc(\r\n        uint    amount,\r\n        uint    expiration,\r\n        bytes32 nonce,\r\n        uint    price,\r\n        uint    size,\r\n        uint    strike,\r\n        uint    validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8   v\r\n    ) public hasFee(amount) {\r\n        address maker = _validate(Action.SellPutToClose, amount, expiration, nonce, price, size, strike, validUntil, r, s, v);\r\n        _bptc(amount, expiration, price, strike, msg.sender);\r\n        _sptc(amount, expiration, price, strike, maker);\r\n    }\r\n\r\n    function putStoWithBto(\r\n        uint    amount,\r\n        uint    expiration,\r\n        bytes32 nonce,\r\n        uint    price,\r\n        uint    size,\r\n        uint    strike,\r\n        uint    validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8   v\r\n    ) public hasFee(amount) {\r\n        address maker = _validate(Action.BuyPutToOpen, amount, expiration, nonce, price, size, strike, validUntil, r, s, v);\r\n        _spto(amount, expiration, price, strike, msg.sender);\r\n        _bpto(amount, expiration, price, strike, maker);\r\n    }\r\n\r\n    function putStoWithBtc(\r\n        uint    amount,\r\n        uint    expiration,\r\n        bytes32 nonce,\r\n        uint    price,\r\n        uint    size,\r\n        uint    strike,\r\n        uint    validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8   v\r\n    ) public hasFee(amount) {\r\n        address maker = _validate(Action.BuyPutToClose, amount, expiration, nonce, price, size, strike, validUntil, r, s, v);\r\n        _spto(amount, expiration, price, strike, msg.sender);\r\n        _bptc(amount, expiration, price, strike, maker);\r\n    }\r\n\r\n    function putStcWithBto(\r\n        uint    amount,\r\n        uint    expiration,\r\n        bytes32 nonce,\r\n        uint    price,\r\n        uint    size,\r\n        uint    strike,\r\n        uint    validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8   v\r\n    ) public hasFee(amount) {\r\n        address maker = _validate(Action.BuyPutToOpen, amount, expiration, nonce, price, size, strike, validUntil, r, s, v);\r\n        _sptc(amount, expiration, price, strike, msg.sender);\r\n        _bpto(amount, expiration, price, strike, maker);\r\n    }\r\n\r\n    function putStcWithBtc(\r\n        uint    amount,\r\n        uint    expiration,\r\n        bytes32 nonce,\r\n        uint    price,\r\n        uint    size,\r\n        uint    strike,\r\n        uint    validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8   v\r\n    ) public hasFee(amount) {\r\n        address maker = _validate(Action.BuyPutToClose, amount, expiration, nonce, price, size, strike, validUntil, r, s, v);\r\n        _sptc(amount, expiration, price, strike, msg.sender);\r\n        _bptc(amount, expiration, price, strike, maker);\r\n    }\r\n\r\n    event BuyPutToOpen(address indexed account, uint amount, uint expiration, uint price, uint strike);\r\n    event SellPutToOpen(address indexed account, uint amount, uint expiration, uint price, uint strike);\r\n    event BuyPutToClose(address indexed account, uint amount, uint expiration, uint price, uint strike);\r\n    event SellPutToClose(address indexed account, uint amount, uint expiration, uint price, uint strike);\r\n\r\n    function _bpto(uint amount, uint expiration, uint price, uint strike, address buyer) private {\r\n        bytes32 series = keccak256(expiration, strike);\r\n        uint premium = amount * price / 1 ether;\r\n\r\n        _subDai(premium, buyer);\r\n        require(putsOwned[series][buyer] + amount >= putsOwned[series][buyer]);\r\n        putsOwned[series][buyer] += amount;\r\n        emit BuyPutToOpen(buyer, amount, expiration, price, strike);\r\n    }\r\n\r\n    function _bptc(uint amount, uint expiration, uint price, uint strike, address buyer) private {\r\n        bytes32 series = keccak256(expiration, strike);\r\n        uint premium = amount * price / 1 ether;\r\n\r\n        dai[buyer] += strike * amount / 1 ether;\r\n        _subDai(premium, buyer);\r\n        require(putsSold[series][buyer] >= amount);\r\n        putsSold[series][buyer] -= amount;\r\n        emit BuyPutToClose(buyer, amount, expiration, price, strike);\r\n    }\r\n\r\n    function _spto(uint amount, uint expiration, uint price, uint strike, address seller) private {\r\n        bytes32 series = keccak256(expiration, strike);\r\n        uint premium = amount * price / 1 ether;\r\n        uint escrow = strike * amount / 1 ether;\r\n\r\n        _addDai(premium, seller);\r\n        require(dai[seller] >= escrow);\r\n        dai[seller] -= escrow;\r\n        putsSold[series][seller] += amount;\r\n        emit SellPutToOpen(seller, amount, expiration, price, strike);\r\n    }\r\n\r\n    function _sptc(uint amount, uint expiration, uint price, uint strike, address seller) private {\r\n        bytes32 series = keccak256(expiration, strike);\r\n        uint premium = amount * price / 1 ether;\r\n\r\n        _addDai(premium, seller);\r\n        require(putsOwned[series][seller] >= amount);\r\n        putsOwned[series][seller] -= amount;\r\n        emit SellPutToClose(seller, amount, expiration, price, strike);\r\n    }\r\n\r\n    event ExercisePut(address indexed account, uint amount, uint expiration, uint strike);\r\n    function exercisePut(\r\n        uint amount,\r\n        uint expiration,\r\n        uint strike\r\n    ) public {\r\n        uint yield = amount * strike / 1 ether;\r\n        bytes32 series = keccak256(expiration, strike);\r\n\r\n        require(\r\n            now < expiration &&\r\n            amount % 1 finney == 0 &&\r\n            putsOwned[series][msg.sender] >= amount &&\r\n            amount > 0\r\n        );\r\n\r\n        putsOwned[series][msg.sender] -= amount;\r\n        putsExercised[series] += amount;\r\n\r\n        _subEth(amount, msg.sender);\r\n        _addDai(yield, msg.sender);\r\n        _collectFee(msg.sender, exerciseFee);\r\n        emit ExercisePut(msg.sender, amount, expiration, strike);\r\n    }\r\n\r\n    event AssignPut(address indexed account, uint amount, uint expiration, uint strike);\r\n    event SettlePut(address indexed account, uint expiration, uint strike);\r\n    function settlePut(uint expiration, uint strike, address writer) public {\r\n\r\n        bytes32 series = keccak256(expiration, strike);\r\n\r\n        require(\r\n            (msg.sender == writer || isAuthorized(msg.sender, msg.sig)) &&\r\n            now > expiration &&\r\n            putsSold[series][writer] > 0\r\n        );\r\n\r\n        if (putsAssigned[series] < putsExercised[series]) {\r\n            uint maximum = putsSold[series][writer];\r\n            uint needed = putsExercised[series] - putsAssigned[series];\r\n            uint assignment = maximum > needed ? needed : maximum;\r\n\r\n            totalDai[writer] -= assignment * strike / 1 ether;\r\n            putsSold[series][writer] -= assignment;\r\n            putsAssigned[series] += assignment;\r\n\r\n            _addEth(assignment, writer);\r\n            emit AssignPut(writer, assignment, expiration, strike);\r\n        }\r\n\r\n        uint yield = putsSold[series][writer] * strike / 1 ether;\r\n        _collectFee(writer, settlementFee);\r\n        dai[writer] += yield;\r\n        putsSold[series][writer] = 0;\r\n        emit SettlePut(writer, expiration, strike);\r\n    }\r\n\r\n    function calculateFee(uint amount) public view returns (uint) {\r\n        return amount * contractFee / 1 ether + flatFee;\r\n    }\r\n\r\n    function _validate(\r\n        Action action,\r\n        uint amount,\r\n        uint expiration,\r\n        bytes32 nonce,\r\n        uint price,\r\n        uint size,\r\n        uint strike,\r\n        uint validUntil,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8 v\r\n    ) private returns (address) {\r\n        bytes32 h = keccak256(action, expiration, nonce, price, size, strike, validUntil, this);\r\n        address maker = ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", h), v, r, s);\r\n        _validateOrder(amount, expiration, h, maker, price, validUntil, size, strike);\r\n        return maker;\r\n    }\r\n\r\n    event TakeOrder(address indexed account, address maker, uint amount, bytes32 h);\r\n    function _validateOrder(uint amount, uint expiration, bytes32 h, address maker, uint price, uint validUntil, uint size, uint strike) internal {\r\n        require(\r\n            strike % 1 ether == 0 &&\r\n            amount % 1 finney == 0 &&\r\n            price % 1 finney == 0 &&\r\n            expiration % 86400 == 0 &&\r\n            cancelled[maker][h] == false &&\r\n            amount <= size - filled[maker][h] &&\r\n            now < validUntil &&\r\n            now < expiration &&\r\n            strike > 10 ether &&\r\n            price < 1200000 ether &&\r\n            size < 1200000 ether &&\r\n            strike < 1200000 ether &&\r\n            price >= 1 finney\r\n        );\r\n\r\n        filled[maker][h] += amount;\r\n        emit TakeOrder(msg.sender, maker, amount, h);\r\n    }\r\n\r\n    function _collectFee(address account, uint amount) private {\r\n        _subDai(amount, account);\r\n        feesCollected += amount;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"callStoWithBtc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"writer\",\"type\":\"address\"}],\"name\":\"settlePut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"putStoWithBtc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"putBtoWithStc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"callsExercised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"putStoWithBto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"putBtcWithSto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"callBtoWithStc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"exerciseCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"putStcWithBtc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDai\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositDaiFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"putsAssigned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"callBtoWithSto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dai\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"callsOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"callBtcWithSto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"h\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settlementFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"exercisePut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"callStcWithBto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"filled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"callsSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"putsExercised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"callStoWithBto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"putBtcWithStc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"callStcWithBtc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"putsSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"writer\",\"type\":\"address\"}],\"name\":\"settleCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"putsOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"putBtoWithSto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exerciseFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_flatFee\",\"type\":\"uint256\"},{\"name\":\"_contractFee\",\"type\":\"uint256\"},{\"name\":\"_exerciseFee\",\"type\":\"uint256\"},{\"name\":\"_settlementFee\",\"type\":\"uint256\"}],\"name\":\"setFeeSchedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flatFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"callsAssigned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"callBtcWithStc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"strike\",\"type\":\"uint256\"},{\"name\":\"validUntil\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"putStcWithBto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"daiAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositDai\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"WithdrawDai\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"h\",\"type\":\"bytes32\"}],\"name\":\"CancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"BuyCallToOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"SellCallToOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"BuyCallToClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"SellCallToClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"ExerciseCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"AssignCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"SettleCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"BuyPutToOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"SellPutToOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"BuyPutToClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"SellPutToClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"ExercisePut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"AssignPut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"SettlePut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"h\",\"type\":\"bytes32\"}],\"name\":\"TakeOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"Exchange","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359","Library":"","SwarmSource":"bzzr://69386eee795c203b9c16426da99521f972d1e8d1180bd2d98117b82e1fcd6313"}]}