{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    \r\n  uint public constant startPreICO = 1521072000; // 15'th March\r\n  uint public constant endPreICO = startPreICO + 31 days;\r\n\r\n  uint public constant startICOStage1 = 1526342400; // 15'th May\r\n  uint public constant endICOStage1 = startICOStage1 + 3 days;\r\n\r\n  uint public constant startICOStage2 = 1526688000; // 19'th May\r\n  uint public constant endICOStage2 = startICOStage2 + 5 days;\r\n\r\n  uint public constant startICOStage3 = 1527206400; // 25'th May\r\n  uint public constant endICOStage3 = endICOStage2 + 6 days;\r\n\r\n  uint public constant startICOStage4 = 1527811200; // 1'st June\r\n  uint public constant endICOStage4 = startICOStage4 + 7 days;\r\n\r\n  uint public constant startICOStage5 = 1528502400;\r\n  uint public endICOStage5 = startICOStage5 + 11 days;\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS not paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(now < startPreICO || now > endICOStage5);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is Token, Pausable {\r\n  using SafeMath for uint256;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    require(_to != address(0));\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    */\r\n  function burn(uint256 _value) public {\r\n      require(_value > 0);\r\n      require(_value <= balances[msg.sender]);\r\n\r\n      address burner = msg.sender;\r\n      balances[burner] = balances[burner].sub(_value);\r\n      totalSupply = totalSupply.sub(_value);\r\n      Burn(burner, _value);\r\n  }\r\n}\r\n\r\ncontract MBEToken is BurnableToken {\r\n  string public constant name = \"MoBee\";\r\n  string public constant symbol = \"MBE\";\r\n  uint8 public constant decimals = 18;\r\n  address public tokenWallet;\r\n  address public founderWallet;\r\n  address public bountyWallet;\r\n  address public multisig=0xa74246dc71c0849accd564976b3093b0b2a522c3;\r\n  uint public currentFundrise = 0;\r\n  uint public raisedEthers = 0;\r\n\r\n  uint public constant INITIAL_SUPPLY = 20000000 ether;\r\n  \r\n  uint256 constant THOUSAND = 1000;\r\n  uint256 constant TEN_THOUSAND = 10000;\r\n  uint public tokenRate = THOUSAND.div(9); // tokens per 1 ether ( 1 ETH / 0.009 ETH = 111.11 MBE )\r\n  uint public tokenRate30 = tokenRate.mul(100).div(70); // tokens per 1 ether with 30% discount\r\n  uint public tokenRate20 = tokenRate.mul(100).div(80); // tokens per 1 ether with 20% discount\r\n  uint public tokenRate15 = tokenRate.mul(100).div(85); // tokens per 1 ether with 15% discount\r\n  uint public tokenRate10 = tokenRate.mul(100).div(90); // tokens per 1 ether with 10% discount\r\n  uint public tokenRate5 = tokenRate.mul(100).div(95); // tokens per 1 ether with 5% discount\r\n\r\n  /**\r\n    * @dev Constructor that gives msg.sender all of existing tokens.\r\n    */\r\n  function MBEToken(address tokenOwner, address founder, address bounty) public {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[tokenOwner] += INITIAL_SUPPLY / 100 * 85;\r\n    balances[founder] += INITIAL_SUPPLY / 100 * 10;\r\n    balances[bounty] += INITIAL_SUPPLY / 100 * 5;\r\n    tokenWallet = tokenOwner;\r\n    founderWallet = founder;\r\n    bountyWallet = bounty;\r\n    Transfer(0x0, tokenOwner, balances[tokenOwner]);\r\n    Transfer(0x0, founder, balances[founder]);\r\n    Transfer(0x0, bounty, balances[bounty]);\r\n  }\r\n  \r\n  function setupTokenRate(uint newTokenRate) public onlyOwner {\r\n    tokenRate = newTokenRate;\r\n    tokenRate30 = tokenRate.mul(100).div(70); // tokens per 1 ether with 30% discount\r\n    tokenRate20 = tokenRate.mul(100).div(80); // tokens per 1 ether with 20% discount\r\n    tokenRate15 = tokenRate.mul(100).div(85); // tokens per 1 ether with 15% discount\r\n    tokenRate10 = tokenRate.mul(100).div(90); // tokens per 1 ether with 10% discount\r\n    tokenRate5 = tokenRate.mul(100).div(95); // tokens per 1 ether with 5% discount\r\n  }\r\n  \r\n  function setupFinal(uint finalDate) public onlyOwner returns(bool) {\r\n    endICOStage5 = finalDate;\r\n    return true;\r\n  }\r\n\r\n  function sellManually(address _to, uint amount) public onlyOwner returns(bool) {\r\n    uint tokens = calcTokens(amount);\r\n    uint256 balance = balanceOf(owner);\r\n    if (balance < tokens) {\r\n      sendTokens(_to, balance);\r\n    } else {\r\n      sendTokens(_to, tokens);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function () payable public {\r\n    if (!isTokenSale()) revert();\r\n    buyTokens(msg.value);\r\n  }\r\n  \r\n  function isTokenSale() public view returns (bool) {\r\n    if (now >= startPreICO && now < endICOStage5) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function buyTokens(uint amount) internal {\r\n    uint tokens = calcTokens(amount);  \r\n    safeSend(tokens);\r\n  }\r\n  \r\n  function calcTokens(uint amount) public view returns(uint) {\r\n    uint rate = extraRate(amount, tokenRate);\r\n    uint tokens = amount.mul(rate);\r\n    if (now >= startPreICO && now < endPreICO) {\r\n      rate = extraRate(amount, tokenRate30);\r\n      tokens = amount.mul(rate);\r\n      return tokens;\r\n    } else if (now >= startICOStage1 && now < endICOStage1) {\r\n      rate = extraRate(amount, tokenRate20);\r\n      tokens = amount.mul(rate);\r\n      return tokens;\r\n    } else if (now >= startICOStage2 && now < endICOStage2) {\r\n      rate = extraRate(amount, tokenRate15);\r\n      tokens = amount.mul(rate);\r\n      return tokens;\r\n    } else if (now >= startICOStage3 && now < endICOStage3) {\r\n      rate = extraRate(amount, tokenRate10);\r\n      tokens = amount.mul(rate);\r\n      return tokens;\r\n    } else if (now >= startICOStage4 && now < endICOStage4) {\r\n      rate = extraRate(amount, tokenRate5);\r\n      tokens = amount.mul(rate);\r\n      return tokens;\r\n    } else if (now >= startICOStage5 && now < endICOStage5) {\r\n      return tokens;\r\n    }\r\n  }\r\n\r\n  function extraRate(uint amount, uint rate) public pure returns (uint) {\r\n    return ( ( rate * 10 ** 20 ) / ( 100 - extraDiscount(amount) ) ) / ( 10 ** 18 );\r\n  }\r\n\r\n  function extraDiscount(uint amount) public pure returns(uint) {\r\n    if ( 3 ether <= amount && amount <= 5 ether ) {\r\n      return 5;\r\n    } else if ( 5 ether < amount && amount <= 10 ether ) {\r\n      return 7;\r\n    } else if ( 10 ether < amount && amount <= 20 ether ) {\r\n      return 10;\r\n    } else if ( 20 ether < amount ) {\r\n      return 15;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function safeSend(uint tokens) private {\r\n    uint256 balance = balanceOf(owner);\r\n    if (balance < tokens) {\r\n      uint toReturn = tokenRate.mul(tokens.sub(balance));\r\n      sendTokens(msg.sender, balance);\r\n      msg.sender.transfer(toReturn);\r\n      multisig.transfer(msg.value.sub(toReturn));\r\n      raisedEthers += msg.value.sub(toReturn);\r\n    } else {\r\n      sendTokens(msg.sender, tokens);\r\n      multisig.transfer(msg.value);\r\n      raisedEthers += msg.value;\r\n    }\r\n  }\r\n\r\n  function sendTokens(address _to, uint tokens) private {\r\n    balances[owner] = balances[owner].sub(tokens);\r\n    balances[_to] += tokens;\r\n    Transfer(owner, _to, tokens);\r\n    currentFundrise += tokens;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"extraDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRate10\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICOStage4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICOStage2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICOStage5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICOStage3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endICOStage1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRate15\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endICOStage3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"finalDate\",\"type\":\"uint256\"}],\"name\":\"setupFinal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRate30\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenRate\",\"type\":\"uint256\"}],\"name\":\"setupTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICOStage1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"extraRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentFundrise\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellManually\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endICOStage5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRate5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRate20\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedEthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endICOStage2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endICOStage4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"founder\",\"type\":\"address\"},{\"name\":\"bounty\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MBEToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000616e87fc8534fc4729b3b2af788addda0043f9240000000000000000000000007a9ddad11ac2eea86b39a5ff22b772994b8ecfac0000000000000000000000008398e6bb9dff64c20a3b0890cd844888e334f971","Library":"","SwarmSource":"bzzr://c9cccd5e5c8ac73d40b6a8eeaf6a72eb39cc3d4e9bfc001393f1f855bdb3a6ed"}]}