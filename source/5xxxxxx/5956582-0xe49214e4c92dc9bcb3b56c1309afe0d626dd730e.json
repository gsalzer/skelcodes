{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/ownership/Claimable.sol\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/TokenTimelock.sol\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  // timestamp when token release is enabled\r\n  uint256 public releaseTime;\r\n\r\n  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(_releaseTime > block.timestamp);\r\n    token = _token;\r\n    beneficiary = _beneficiary;\r\n    releaseTime = _releaseTime;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   */\r\n  function release() public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= releaseTime);\r\n\r\n    uint256 amount = token.balanceOf(this);\r\n    require(amount > 0);\r\n\r\n    token.safeTransfer(beneficiary, amount);\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n// File: contracts/ERC223.sol\r\n\r\ncontract ERC223 is ERC20 {\r\n    function transfer(address to, uint256 value, bytes data) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value, bytes data) public returns (bool);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _value, bytes _data);\r\n}\r\n\r\n// File: contracts/ERC223Receiver.sol\r\n\r\n/*\r\n  * @title Contract that will work with ERC223 tokens.\r\n  */\r\n \r\ncontract ERC223Receiver { \r\n/*\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n// File: contracts/ERC223Token.sol\r\n\r\n/**\r\n * @title ERC223 token implementation.\r\n * @dev Standard ERC223 implementation with capability of deactivating ERC223 functionalities.\r\n *      Contracts that are known to support ERC20 tokens can be whitelisted to bypass tokenfallback call.\r\n */\r\ncontract ERC223Token is ERC223, StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // If true will invoke token fallback else it will act as an ERC20 token\r\n    bool public erc223Activated;\r\n    // List of contracts which are known to have support for ERC20 tokens.\r\n    // Needed to maintain compatibility with contracts that support ERC20 tokens but not ERC223 tokens.                      \r\n    mapping (address => bool) public supportedContracts;\r\n    // List of contracts which users allowed to bypass tokenFallback.\r\n    // Needed in case user wants to send tokens to contracts that do not support ERC223 tokens, i.e. multisig wallets.\r\n    mapping (address => mapping (address => bool)) public userAcknowledgedContracts;\r\n\r\n    function setErc223Activated(bool _activated) external onlyOwner {\r\n        erc223Activated = _activated;\r\n    }\r\n\r\n    function setSupportedContract(address _address, bool _supported) external onlyOwner {\r\n        supportedContracts[_address] = _supported;\r\n    }\r\n\r\n    function setUserAcknowledgedContract(address _address, bool _acknowledged) external {\r\n        userAcknowledgedContracts[msg.sender][_address] = _acknowledged;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if target address is a contract.\r\n     * @param _address The address to check.\r\n     */\r\n    function isContract(address _address) internal returns (bool) {\r\n        uint256 codeLength;\r\n        assembly {\r\n            // Retrieve the size of the code on target address\r\n            codeLength := extcodesize(_address)\r\n        }\r\n        return codeLength > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Calls the tokenFallback function of the token receiver.\r\n     * @param _from  Token sender address.\r\n     * @param _to  Token receiver address.\r\n     * @param _value Amount of tokens.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function invokeTokenReceiver(address _from, address _to, uint256 _value, bytes _data) internal {\r\n        ERC223Receiver receiver = ERC223Receiver(_to);\r\n        receiver.tokenFallback(_from, _value, _data);\r\n        emit Transfer(_from, _to, _value, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer specified amount of tokens to the specified address.\r\n     *      Added to maintain ERC20 compatibility.\r\n     * @param _to Receiver address.\r\n     * @param _value Amount of tokens to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        bytes memory emptyData;\r\n        return transfer(_to, _value, emptyData);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer specified amount of tokens to the specified address.\r\n     *      Invokes tokenFallback if the recipient is a contract.\r\n     *      Transaction to contracts without implementation of tokenFallback will revert.\r\n     * @param _to Receiver address.\r\n     * @param _value Amount of tokens to be transferred.\r\n     * @param _data Transaction metadata.\r\n     */\r\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\r\n        bool status = super.transfer(_to, _value);\r\n\r\n        // Invoke token receiver only when erc223 is activate, not listed on the whitelist and is a contract.\r\n        if (erc223Activated \r\n            && isContract(_to)\r\n            && supportedContracts[_to] == false \r\n            && userAcknowledgedContracts[msg.sender][_to] == false\r\n            && status == true) {\r\n            invokeTokenReceiver(msg.sender, _to, _value, _data);\r\n        }\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer specified amount of tokens from one address to another.\r\n     *      Added to maintain ERC20 compatibility.\r\n     * @param _from Sender address.\r\n     * @param _to Receiver address.\r\n     * @param _value Amount of tokens to be transferred.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        bytes memory emptyData;\r\n        return transferFrom(_from, _to, _value, emptyData);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer specified amount of tokens from one address to another.\r\n     *      Invokes tokenFallback if the recipient is a contract.\r\n     *      Transaction to contracts without implementation of tokenFallback will revert.\r\n     * @param _from Sender address.\r\n     * @param _to Receiver address.\r\n     * @param _value Amount of tokens to be transferred.\r\n     * @param _data Transaction metadata.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\r\n        bool status = super.transferFrom(_from, _to, _value);\r\n\r\n        if (erc223Activated \r\n            && isContract(_to)\r\n            && supportedContracts[_to] == false \r\n            && userAcknowledgedContracts[msg.sender][_to] == false\r\n            && status == true) {\r\n            invokeTokenReceiver(_from, _to, _value, _data);\r\n        }\r\n        return status;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/PausableERC223Token.sol\r\n\r\n/**\r\n * @title ERC223 token implementation.\r\n * @dev Standard ERC223 implementation with Pausable feature.      \r\n */\r\n\r\ncontract PausableERC223Token is ERC223Token, Pausable {\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value, _data);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value, _data);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/SynchroCoin.sol\r\n\r\n/* @title SynchroCoin SYC Token\r\n * @dev New SynchroCoin SYC Token migration from legacy contract.\r\n */\r\n\r\ncontract SynchroCoin is PausableERC223Token, Claimable {\r\n    string public constant name = \"SynchroCoin\";\r\n    string public constant symbol = \"SYC\";\r\n    uint8 public constant decimals = 18;\r\n    MigrationAgent public migrationAgent;\r\n\r\n    function SynchroCoin(address _legacySycAddress, uint256 _timelockReleaseTime) public {        \r\n        migrationAgent = new MigrationAgent(_legacySycAddress, this, _timelockReleaseTime);\r\n        migrationAgent.transferOwnership(msg.sender);\r\n\r\n        ERC20 legacySycContract = ERC20(_legacySycAddress);\r\n        totalSupply_ = legacySycContract.totalSupply();\r\n        balances[migrationAgent] = balances[migrationAgent].add(totalSupply_);\r\n\r\n        pause();\r\n    }\r\n}\r\n\r\n// File: contracts/MigrationAgent.sol\r\n\r\n/**\r\n *  @title MigrationAgent\r\n *  @dev Contract that keeps track of the migration process from one token contract to another. \r\n */\r\ncontract MigrationAgent is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    ERC20 public legacySycContract;    // Previous Token Contract\r\n    ERC20 public sycContract;       // New Token Contract to migrate to\r\n    uint256 public targetSupply;    // Target supply amount to meet\r\n    uint256 public migratedSupply;  // Total amount of tokens migrated\r\n\r\n    mapping (address => bool) public migrated;  // Flags to keep track of addresses already migrated\r\n\r\n    uint256 public timelockReleaseTime; // Timelocked token release time\r\n    TokenTimelock public tokenTimelock; // TokenTimelock for Synchrolife team, advisors and partners\r\n\r\n    event Migrate(address indexed holder, uint256 balance);\r\n\r\n    function MigrationAgent(address _legacySycAddress, address _sycAddress, uint256 _timelockReleaseTime) public {\r\n        require(_legacySycAddress != address(0));\r\n        require(_sycAddress != address(0));\r\n\r\n        legacySycContract = ERC20(_legacySycAddress);\r\n        targetSupply = legacySycContract.totalSupply();\r\n        timelockReleaseTime = _timelockReleaseTime;\r\n        sycContract = ERC20(_sycAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new timelock to replace the old one.\r\n     * @param _legacyVaultAddress Address of the vault contract from previous SynchroCoin contract.\r\n     */\r\n    function migrateVault(address _legacyVaultAddress) onlyOwner external { \r\n        require(_legacyVaultAddress != address(0));\r\n        require(!migrated[_legacyVaultAddress]);\r\n        require(tokenTimelock == address(0));\r\n\r\n        // Lock up the tokens for the team/advisors/partners.\r\n        migrated[_legacyVaultAddress] = true;        \r\n        uint256 timelockAmount = legacySycContract.balanceOf(_legacyVaultAddress);\r\n        tokenTimelock = new TokenTimelock(sycContract, msg.sender, timelockReleaseTime);\r\n        sycContract.transfer(tokenTimelock, timelockAmount);\r\n        migratedSupply = migratedSupply.add(timelockAmount);\r\n        emit Migrate(_legacyVaultAddress, timelockAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Copies the balance of given addresses from the legacy contract\r\n     * @param _tokenHolders Array of addresses to migrate balance from the legacy contract\r\n     * @return True if operation was completed\r\n     */\r\n    function migrateBalances(address[] _tokenHolders) onlyOwner external {\r\n        for (uint256 i = 0; i < _tokenHolders.length; i++) {\r\n            migrateBalance(_tokenHolders[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Copies the balance of a given address from the legacy contract\r\n     * @param _tokenHolder Address to migrate balance from the legacy contract\r\n     * @return True if balance was copied. False if balance had already been migrated or if address has zero balance in the legacy contract\r\n     */\r\n    function migrateBalance(address _tokenHolder) onlyOwner public returns (bool) {\r\n        if (migrated[_tokenHolder]) {\r\n            return false;   // Already migrated, therefore do nothing.\r\n        }\r\n\r\n        uint256 balance = legacySycContract.balanceOf(_tokenHolder);\r\n        if (balance == 0) {\r\n            return false;   // Has no balance in legacy contract, therefore do nothing.\r\n        }\r\n\r\n        // Copy balance\r\n        migrated[_tokenHolder] = true;\r\n        sycContract.transfer(_tokenHolder, balance);\r\n        migratedSupply = migratedSupply.add(balance);\r\n        emit Migrate(_tokenHolder, balance);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Destructs the contract and sends any remaining ETH/SYC to the owner.\r\n     */\r\n    function kill() onlyOwner public {\r\n        uint256 balance = sycContract.balanceOf(this);\r\n        sycContract.transfer(owner, balance);\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_acknowledged\",\"type\":\"bool\"}],\"name\":\"setUserAcknowledgedContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc223Activated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_activated\",\"type\":\"bool\"}],\"name\":\"setErc223Activated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAcknowledgedContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_supported\",\"type\":\"bool\"}],\"name\":\"setSupportedContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_legacySycAddress\",\"type\":\"address\"},{\"name\":\"_timelockReleaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SynchroCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f149230261f14f75c78206b7358e0cc391d85c98000000000000000000000000000000000000000000000000000000005bcb42f0","Library":"","SwarmSource":"bzzr://b7c09735f1add7843154b6cf3e95d790be8e4cac31f2fec14566c89854706b76"}]}