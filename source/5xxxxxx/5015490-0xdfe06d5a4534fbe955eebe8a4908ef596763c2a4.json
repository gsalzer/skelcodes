{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Application Asset Contract ABI\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n Any contract inheriting this will be usable as an Asset in the Application Entity\r\n\r\n*/\r\n\r\n\r\n\r\ncontract ABIApplicationAsset {\r\n\r\n    bytes32 public assetName;\r\n    uint8 public CurrentEntityState;\r\n    uint8 public RecordNum;\r\n    bool public _initialized;\r\n    bool public _settingsApplied;\r\n    address public owner;\r\n    address public deployerAddress;\r\n    mapping (bytes32 => uint8) public EntityStates;\r\n    mapping (bytes32 => uint8) public RecordStates;\r\n\r\n    function setInitialApplicationAddress(address _ownerAddress) public;\r\n    function setInitialOwnerAndName(bytes32 _name) external returns (bool);\r\n    function getRecordState(bytes32 name) public view returns (uint8);\r\n    function getEntityState(bytes32 name) public view returns (uint8);\r\n    function applyAndLockSettings() public returns(bool);\r\n    function transferToNewOwner(address _newOwner) public returns (bool);\r\n    function getApplicationAssetAddressByName(bytes32 _name) public returns(address);\r\n    function getApplicationState() public view returns (uint8);\r\n    function getApplicationEntityState(bytes32 name) public view returns (uint8);\r\n    function getAppBylawUint256(bytes32 name) public view returns (uint256);\r\n    function getAppBylawBytes32(bytes32 name) public view returns (bytes32);\r\n    function getTimestamp() view public returns (uint256);\r\n\r\n\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Token Manager Contract\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\ncontract ABITokenManager is ABIApplicationAsset {\r\n\r\n    address public TokenSCADAEntity;\r\n    address public TokenEntity;\r\n    address public MarketingMethodAddress;\r\n    bool OwnerTokenBalancesReleased = false;\r\n\r\n    function addSettings(address _scadaAddress, address _tokenAddress, address _marketing ) public;\r\n    function getTokenSCADARequiresHardCap() public view returns (bool);\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n    function finishMinting() public returns (bool);\r\n    function mintForMarketingPool(address _to, uint256 _amount) external returns (bool);\r\n    function ReleaseOwnersLockedTokens(address _multiSigOutputAddress) public returns (bool);\r\n\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Marketing Funding Input Contract\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n\r\n Classic funding method that receives ETH and mints tokens directly\r\n    - has hard cap.\r\n    - minted supply affects final token supply.\r\n    - does not use vaults, mints directly to sender address.\r\n    - accepts over cap payment and returns what's left back to sender.\r\n  Funds used exclusively for Marketing\r\n\r\n*/\r\n\r\n\r\n\r\n\r\ncontract ExtraFundingInputMarketing {\r\n\r\n    ABITokenManager public TokenManagerEntity;\r\n    address public outputWalletAddress;\r\n    uint256 public hardCap;\r\n    uint256 public tokensPerEth;\r\n\r\n    uint256 public start_time;\r\n    uint256 public end_time;\r\n\r\n    uint256 public AmountRaised = 0;\r\n\r\n    address public deployer;\r\n    bool public settings_added = false;\r\n\r\n    function ExtraFundingInputMarketing() public {\r\n        deployer = msg.sender;\r\n    }\r\n\r\n    function addSettings(\r\n        address _tokenManager,\r\n        address _outputWalletAddress,\r\n        uint256 _cap,\r\n        uint256 _price,\r\n        uint256 _start_time,\r\n        uint256 _endtime\r\n    )\r\n        public\r\n    {\r\n        require(msg.sender == deployer);\r\n        require(settings_added == false);\r\n\r\n        TokenManagerEntity = ABITokenManager(_tokenManager);\r\n        outputWalletAddress = _outputWalletAddress;\r\n        hardCap = _cap;\r\n        tokensPerEth = _price;\r\n        start_time = _start_time;\r\n        end_time = _endtime;\r\n        settings_added = true;\r\n    }\r\n\r\n    event EventInputPaymentReceived(address sender, uint amount);\r\n\r\n    function () public payable {\r\n        buy();\r\n    }\r\n\r\n    function buy() public payable returns(bool) {\r\n        if(msg.value > 0) {\r\n            if( canAcceptPayment() ) {\r\n\r\n                uint256 contributed_value = msg.value;\r\n                uint256 amountOverCap = getValueOverCurrentCap(contributed_value);\r\n                if ( amountOverCap > 0 ) {\r\n                    // calculate how much we can accept\r\n\r\n                    // update contributed value\r\n                    contributed_value -= amountOverCap;\r\n                }\r\n\r\n                // update raised value\r\n                AmountRaised+= contributed_value;\r\n\r\n                // allocate tokens to contributor based on value\r\n                uint256 tokenAmount = getTokensForValue( contributed_value );\r\n                TokenManagerEntity.mintForMarketingPool( msg.sender, tokenAmount);\r\n\r\n                // transfer contributed value to platform wallet\r\n                if( !outputWalletAddress.send(contributed_value) ) {\r\n                    revert();\r\n                }\r\n\r\n                if(amountOverCap > 0) {\r\n                    // last step, if we received more than we can accept, send remaining back\r\n                    // amountOverCap sent back\r\n                    if( msg.sender.send(this.balance) ) {\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        revert();\r\n                    }\r\n                } else {\r\n                    return true;\r\n                }\r\n            } else {\r\n                revert();\r\n            }\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function canAcceptPayment() public view returns (bool) {\r\n        if( (getTimestamp() >= start_time && getTimestamp() <= end_time) && (AmountRaised < hardCap) ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getTokensForValue( uint256 _value) public view returns (uint256) {\r\n        return _value * tokensPerEth;\r\n    }\r\n\r\n    function getValueOverCurrentCap(uint256 _amount) public view returns (uint256) {\r\n        uint256 remaining = hardCap - AmountRaised;\r\n        if( _amount > remaining ) {\r\n            return _amount - remaining;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getTimestamp() view public returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"canAcceptPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settings_added\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getTokensForValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenManagerEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AmountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenManager\",\"type\":\"address\"},{\"name\":\"_outputWalletAddress\",\"type\":\"address\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_start_time\",\"type\":\"uint256\"},{\"name\":\"_endtime\",\"type\":\"uint256\"}],\"name\":\"addSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getValueOverCurrentCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"outputWalletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventInputPaymentReceived\",\"type\":\"event\"}]","ContractName":"ExtraFundingInputMarketing","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e6e3f10a33f25eb8787a8e0e77665e098f4fc75dcf9216655f12d0798e260222"}]}