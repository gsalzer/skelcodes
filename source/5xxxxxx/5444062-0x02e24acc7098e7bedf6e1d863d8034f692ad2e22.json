{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title Ownable contract - base contract with an owner\r\n */\r\ncontract Ownable {\r\n  \r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address _from, address _to);\r\n  \r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    assert(_newOwner != address(0));      \r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Accept transferOwnership.\r\n   */\r\n  function acceptOwnership() public {\r\n    if (msg.sender == newOwner) {\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n\r\n  function safeSub(uint256 x, uint256 y) internal pure returns (uint256) {\r\n    uint256 z = x - y;\r\n    assert(z <= x);\r\n\t  return z;\r\n  }\r\n\r\n  function safeAdd(uint256 x, uint256 y) internal pure returns (uint256) {\r\n    uint256 z = x + y;\r\n\t  assert(z >= x);\r\n\t  return z;\r\n  }\r\n\t\r\n  function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n    uint256 z = x / y;\r\n    return z;\r\n  }\r\n\t\r\n  function safeMul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n    uint256 z = x * y;\r\n    assert(x == 0 || z / x == y);\r\n    return z;\r\n  }\r\n\r\n  function min(uint256 x, uint256 y) internal pure returns (uint256) {\r\n    uint256 z = x <= y ? x : y;\r\n    return z;\r\n  }\r\n\r\n  function max(uint256 x, uint256 y) internal pure returns (uint256) {\r\n    uint256 z = x >= y ? x : y;\r\n    return z;\r\n  }\r\n}\r\n\r\n /* New ERC23 contract interface */\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public view returns (uint);\r\n  \r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function decimals() public view returns (uint256 _decimals);\r\n  function totalSupply() public view returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\ncontract ContractReceiver {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public returns (bool success);\r\n}\r\n\r\n\r\ncontract ERC223Token is ERC223,SafeMath ,Ownable {\r\n\r\n  mapping(address => uint) balances;\r\n  \r\n  string public name;\r\n  string public symbol;\r\n  uint256 public decimals;\r\n  uint256 public totalSupply;\r\n  \r\n  address public crowdsaleAgent;\r\n  address[] public addrCotracts;\r\n  bool public released = false;  \r\n  mapping(address => bool) public privilegedAddr;\r\n  bool public privilege = false;\r\n  \r\n  /**\r\n   * @dev The function can be called only by crowdsale agent.\r\n   */\r\n  modifier onlyCrowdsaleAgent() {\r\n    assert(msg.sender == crowdsaleAgent);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev Limit token transfer until the crowdsale is over.\r\n   */\r\n  modifier canTransfer() {\r\n    if(msg.sender != address(this)){\r\n      if(!released){\r\n        if(!privilege){\r\n          revert();\r\n        }else if(!privilegedAddr[msg.sender]){\r\n          revert();\r\n        }\r\n      }\r\n    }\r\n    _;\r\n  } \r\n  \r\n  // Function to access name of token .\r\n  function name() public view returns (string _name) {\r\n      return name;\r\n  }\r\n  // Function to access symbol of token .\r\n  function symbol() public view returns (string _symbol) {\r\n      return symbol;\r\n  }\r\n  // Function to access decimals of token .\r\n  function decimals() public view returns (uint256 _decimals) {\r\n      return decimals;\r\n  }\r\n  // Function to access total supply of tokens .\r\n  function totalSupply() public view returns (uint256 _totalSupply) {\r\n      return totalSupply;\r\n  }\r\n  \r\n  \r\n  // Function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address _to, uint _value, bytes _data) public canTransfer returns (bool success) {\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, _data);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n  }\r\n  \r\n  // Standard function transfer similar to ERC20 transfer with no _data .\r\n  // Added due to backwards compatibility reasons .\r\n  function transfer(address _to, uint _value) public canTransfer returns (bool success) {\r\n    //standard function transfer similar to ERC20 transfer with no _data\r\n    //added due to backwards compatibility reasons\r\n    bytes memory empty;\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, empty);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, empty);\r\n    }\r\n  }\r\n\r\n  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) private view returns (bool is_contract) {\r\n      uint length;\r\n      assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n      }\r\n      return (length>0);\r\n    }\r\n\r\n  //function that is called when transaction target is an address\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n    balances[_to] = safeAdd(balanceOf(_to), _value);\r\n    emit Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n  \r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n    bool flag = false;\r\n    for(uint i = 0; i < addrCotracts.length; i++) {\r\n      if(_to == addrCotracts[i]) flag = true;\r\n    }\r\n    if(flag){\r\n      balances[this] = safeAdd(balanceOf(this), _value);\r\n    }else{\r\n      balances[_to] = safeAdd(balanceOf(_to), _value);\r\n    }\r\n    ContractReceiver receiver = ContractReceiver(_to);\r\n    if(receiver.tokenFallback(msg.sender, _value, _data)){\r\n      emit Transfer(msg.sender, _to, _value, _data);\r\n      return true;\r\n    }else{\r\n      revert();\r\n    }\r\n    if(flag){\r\n      emit Transfer(msg.sender, this, _value, _data);\r\n    }else{\r\n      emit Transfer(msg.sender, _to, _value, _data);\r\n    }\r\n    return true;\r\n}\r\n\r\n  function balanceOf(address _owner) public view returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n  /** \r\n   * @dev Create new tokens and allocate them to an address. Only callably by a crowdsale agent\r\n   * @param _to dest address\r\n   * @param _value tokens amount\r\n   * @return mint result\r\n   */ \r\n  function mint(address _to, uint _value, bytes _data) public onlyCrowdsaleAgent returns (bool success) {\r\n    totalSupply = safeAdd(totalSupply, _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    emit Transfer(0, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set the crowdsale Agent\r\n   * @param _crowdsaleAgent crowdsale contract address\r\n   */\r\n  function setCrowdsaleAgent(address _crowdsaleAgent) public onlyOwner {\r\n    crowdsaleAgent = _crowdsaleAgent;\r\n  }\r\n  \r\n  /**\r\n   * @dev One way function to release the tokens to the wild. Can be called only from the release agent that is the final ICO contract. \r\n   */\r\n  function releaseTokenTransfer() public onlyCrowdsaleAgent {\r\n    released = true;\r\n  }\r\n  \r\n  function releasePrivilege() public onlyCrowdsaleAgent {\r\n    privilege = true;\r\n  }\r\n  \r\n  function setAddrForPrivilege(address _owner) public onlyCrowdsaleAgent {\r\n    privilegedAddr[_owner] = true;\r\n  }\r\n  \r\n  function getAddrForPrivilege(address _owner) public view returns (bool success){\r\n    return privilegedAddr[_owner];\r\n  }\r\n\r\n}\r\n\r\n/** \r\n * @title Oil-T contract - standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\r\n */\r\ncontract OilToken is ERC223Token{\r\n  \r\n  /**\r\n   * @dev The function can be called only by agent.\r\n   */\r\n  modifier onlyAgent() {\r\n    bool flag = false;\r\n    for(uint i = 0; i < addrCotracts.length; i++) {\r\n      if(msg.sender == addrCotracts[i]) flag = true;\r\n    }\r\n   assert(flag);\r\n    _;\r\n  }\r\n\r\n  /** Name and symbol were updated. */\r\n  event UpdatedTokenInformation(string newName, string newSymbol);\r\n  \r\n  /**\r\n   * @param _name Token name\r\n   * @param _symbol Token symbol - should be all caps\r\n   * @param _decimals Number of decimal places\r\n   */\r\n   \r\n  function OilToken(string _name, string _symbol, uint256 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }   \r\n  \r\n   function tokenFallback(address _from, uint _value, bytes _data) public onlyAgent returns (bool success){\r\n    balances[this] = safeSub(balanceOf(this), _value);\r\n    balances[_from] = safeAdd(balanceOf(_from), _value);\r\n    emit Transfer(this, _from, _value, _data);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Owner can update token information here.\r\n   *\r\n   * It is often useful to conceal the actual token association, until\r\n   * the token operations, like central issuance or reissuance have been completed.\r\n   *\r\n   * This function allows the token owner to rename the token after the operations\r\n   * have been completed and then point the audience to use the token contract.\r\n   */\r\n  function setTokenInformation(string _name, string _symbol) public onlyOwner {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    emit UpdatedTokenInformation(name, symbol);\r\n  }\r\n  \r\n  function setAddr (address _addr) public onlyOwner {\r\n    addrCotracts.push(_addr);\r\n  }\r\n \r\n  function transferForICO(address _to, uint _value) public onlyCrowdsaleAgent returns (bool success) {\r\n    return this.transfer(_to, _value);\r\n  }\r\n \r\n  function delAddr (uint number) public onlyOwner {\r\n    require(number < addrCotracts.length);\r\n    for(uint i = number; i < addrCotracts.length-1; i++) {\r\n      addrCotracts[i] = addrCotracts[i+1];\r\n    }\r\n    addrCotracts.length = addrCotracts.length-1;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"privilegedAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setAddrForPrivilege\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleAgent\",\"type\":\"address\"}],\"name\":\"setCrowdsaleAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releasePrivilege\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addrCotracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setTokenInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"delAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privilege\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAddrForPrivilege\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferForICO\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"UpdatedTokenInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"OilToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000094f696c20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044f494c5400000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://084450c6c339cdf6e6de4b85cfe44d5c2b03e617103a6b1fd12bab91d5c6ea04"}]}