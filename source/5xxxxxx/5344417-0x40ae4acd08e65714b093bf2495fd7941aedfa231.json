{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface IApprovalRecipient {\r\n    /**\r\n     * @notice Signals that token holder approved spending of tokens and some action should be taken.\r\n     *\r\n     * @param _sender token holder which approved spending of his tokens\r\n     * @param _value amount of tokens approved to be spent\r\n     * @param _extraData any extra data token holder provided to the call\r\n     *\r\n     * @dev warning: implementors should validate sender of this message (it should be the token) and make no further\r\n     *      assumptions unless validated them via ERC20 methods.\r\n     */\r\n    function receiveApproval(address _sender, uint256 _value, bytes _extraData) public;\r\n}\r\n\r\ninterface IKYCProvider {\r\n    function isKYCPassed(address _address) public view returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ArgumentsChecker {\r\n\r\n    /// @dev check which prevents short address attack\r\n    modifier payloadSizeIs(uint size) {\r\n       require(msg.data.length == size + 4 /* function selector */);\r\n       _;\r\n    }\r\n\r\n    /// @dev check that address is valid\r\n    modifier validAddress(address addr) {\r\n        require(addr != address(0));\r\n        _;\r\n    }\r\n}\r\n\r\ncontract multiowned {\r\n\r\n\t// TYPES\r\n\r\n    // struct for the status of a pending operation.\r\n    struct MultiOwnedOperationPendingState {\r\n        // count of confirmations needed\r\n        uint yetNeeded;\r\n\r\n        // bitmap of confirmations where owner #ownerIndex's decision corresponds to 2**ownerIndex bit\r\n        uint ownersDone;\r\n\r\n        // position of this operation key in m_multiOwnedPendingIndex\r\n        uint index;\r\n    }\r\n\r\n\t// EVENTS\r\n\r\n    event Confirmation(address owner, bytes32 operation);\r\n    event Revoke(address owner, bytes32 operation);\r\n    event FinalConfirmation(address owner, bytes32 operation);\r\n\r\n    // some others are in the case of an owner changing.\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n    event OwnerAdded(address newOwner);\r\n    event OwnerRemoved(address oldOwner);\r\n\r\n    // the last one is emitted if the required signatures change\r\n    event RequirementChanged(uint newRequirement);\r\n\r\n\t// MODIFIERS\r\n\r\n    // simple single-sig function modifier.\r\n    modifier onlyowner {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n    // multi-sig function modifier: the operation must have an intrinsic hash in order\r\n    // that later attempts can be realised as the same underlying operation and\r\n    // thus count as confirmations.\r\n    modifier onlymanyowners(bytes32 _operation) {\r\n        if (confirmAndCheck(_operation)) {\r\n            _;\r\n        }\r\n        // Even if required number of confirmations has't been collected yet,\r\n        // we can't throw here - because changes to the state have to be preserved.\r\n        // But, confirmAndCheck itself will throw in case sender is not an owner.\r\n    }\r\n\r\n    modifier validNumOwners(uint _numOwners) {\r\n        require(_numOwners > 0 && _numOwners <= c_maxOwners);\r\n        _;\r\n    }\r\n\r\n    modifier multiOwnedValidRequirement(uint _required, uint _numOwners) {\r\n        require(_required > 0 && _required <= _numOwners);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address _address) {\r\n        require(isOwner(_address));\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address _address) {\r\n        require(!isOwner(_address));\r\n        _;\r\n    }\r\n\r\n    modifier multiOwnedOperationIsActive(bytes32 _operation) {\r\n        require(isOperationActive(_operation));\r\n        _;\r\n    }\r\n\r\n\t// METHODS\r\n\r\n    // constructor is given number of sigs required to do protected \"onlymanyowners\" transactions\r\n    // as well as the selection of addresses capable of confirming them (msg.sender is not added to the owners!).\r\n    function multiowned(address[] _owners, uint _required)\r\n        public\r\n        validNumOwners(_owners.length)\r\n        multiOwnedValidRequirement(_required, _owners.length)\r\n    {\r\n        assert(c_maxOwners <= 255);\r\n\r\n        m_numOwners = _owners.length;\r\n        m_multiOwnedRequired = _required;\r\n\r\n        for (uint i = 0; i < _owners.length; ++i)\r\n        {\r\n            address owner = _owners[i];\r\n            // invalid and duplicate addresses are not allowed\r\n            require(0 != owner && !isOwner(owner) /* not isOwner yet! */);\r\n\r\n            uint currentOwnerIndex = checkOwnerIndex(i + 1 /* first slot is unused */);\r\n            m_owners[currentOwnerIndex] = owner;\r\n            m_ownerIndex[owner] = currentOwnerIndex;\r\n        }\r\n\r\n        assertOwnersAreConsistent();\r\n    }\r\n\r\n    /// @notice replaces an owner `_from` with another `_to`.\r\n    /// @param _from address of owner to replace\r\n    /// @param _to address of new owner\r\n    // All pending operations will be canceled!\r\n    function changeOwner(address _from, address _to)\r\n        external\r\n        ownerExists(_from)\r\n        ownerDoesNotExist(_to)\r\n        onlymanyowners(keccak256(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_from]);\r\n        m_owners[ownerIndex] = _to;\r\n        m_ownerIndex[_from] = 0;\r\n        m_ownerIndex[_to] = ownerIndex;\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerChanged(_from, _to);\r\n    }\r\n\r\n    /// @notice adds an owner\r\n    /// @param _owner address of new owner\r\n    // All pending operations will be canceled!\r\n    function addOwner(address _owner)\r\n        external\r\n        ownerDoesNotExist(_owner)\r\n        validNumOwners(m_numOwners + 1)\r\n        onlymanyowners(keccak256(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        m_numOwners++;\r\n        m_owners[m_numOwners] = _owner;\r\n        m_ownerIndex[_owner] = checkOwnerIndex(m_numOwners);\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerAdded(_owner);\r\n    }\r\n\r\n    /// @notice removes an owner\r\n    /// @param _owner address of owner to remove\r\n    // All pending operations will be canceled!\r\n    function removeOwner(address _owner)\r\n        external\r\n        ownerExists(_owner)\r\n        validNumOwners(m_numOwners - 1)\r\n        multiOwnedValidRequirement(m_multiOwnedRequired, m_numOwners - 1)\r\n        onlymanyowners(keccak256(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_owner]);\r\n        m_owners[ownerIndex] = 0;\r\n        m_ownerIndex[_owner] = 0;\r\n        //make sure m_numOwners is equal to the number of owners and always points to the last owner\r\n        reorganizeOwners();\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerRemoved(_owner);\r\n    }\r\n\r\n    /// @notice changes the required number of owner signatures\r\n    /// @param _newRequired new number of signatures required\r\n    // All pending operations will be canceled!\r\n    function changeRequirement(uint _newRequired)\r\n        external\r\n        multiOwnedValidRequirement(_newRequired, m_numOwners)\r\n        onlymanyowners(keccak256(msg.data))\r\n    {\r\n        m_multiOwnedRequired = _newRequired;\r\n        clearPending();\r\n        RequirementChanged(_newRequired);\r\n    }\r\n\r\n    /// @notice Gets an owner by 0-indexed position\r\n    /// @param ownerIndex 0-indexed owner position\r\n    function getOwner(uint ownerIndex) public constant returns (address) {\r\n        return m_owners[ownerIndex + 1];\r\n    }\r\n\r\n    /// @notice Gets owners\r\n    /// @return memory array of owners\r\n    function getOwners() public constant returns (address[]) {\r\n        address[] memory result = new address[](m_numOwners);\r\n        for (uint i = 0; i < m_numOwners; i++)\r\n            result[i] = getOwner(i);\r\n\r\n        return result;\r\n    }\r\n\r\n    /// @notice checks if provided address is an owner address\r\n    /// @param _addr address to check\r\n    /// @return true if it's an owner\r\n    function isOwner(address _addr) public constant returns (bool) {\r\n        return m_ownerIndex[_addr] > 0;\r\n    }\r\n\r\n    /// @notice Tests ownership of the current caller.\r\n    /// @return true if it's an owner\r\n    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\r\n    // addOwner/changeOwner and to isOwner.\r\n    function amIOwner() external constant onlyowner returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /// @notice Revokes a prior confirmation of the given operation\r\n    /// @param _operation operation value, typically keccak256(msg.data)\r\n    function revoke(bytes32 _operation)\r\n        external\r\n        multiOwnedOperationIsActive(_operation)\r\n        onlyowner\r\n    {\r\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n        var pending = m_multiOwnedPending[_operation];\r\n        require(pending.ownersDone & ownerIndexBit > 0);\r\n\r\n        assertOperationIsConsistent(_operation);\r\n\r\n        pending.yetNeeded++;\r\n        pending.ownersDone -= ownerIndexBit;\r\n\r\n        assertOperationIsConsistent(_operation);\r\n        Revoke(msg.sender, _operation);\r\n    }\r\n\r\n    /// @notice Checks if owner confirmed given operation\r\n    /// @param _operation operation value, typically keccak256(msg.data)\r\n    /// @param _owner an owner address\r\n    function hasConfirmed(bytes32 _operation, address _owner)\r\n        external\r\n        constant\r\n        multiOwnedOperationIsActive(_operation)\r\n        ownerExists(_owner)\r\n        returns (bool)\r\n    {\r\n        return !(m_multiOwnedPending[_operation].ownersDone & makeOwnerBitmapBit(_owner) == 0);\r\n    }\r\n\r\n    // INTERNAL METHODS\r\n\r\n    function confirmAndCheck(bytes32 _operation)\r\n        private\r\n        onlyowner\r\n        returns (bool)\r\n    {\r\n        if (512 == m_multiOwnedPendingIndex.length)\r\n            // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\r\n            // we won't be able to do it because of block gas limit.\r\n            // Yes, pending confirmations will be lost. Dont see any security or stability implications.\r\n            // TODO use more graceful approach like compact or removal of clearPending completely\r\n            clearPending();\r\n\r\n        var pending = m_multiOwnedPending[_operation];\r\n\r\n        // if we're not yet working on this operation, switch over and reset the confirmation status.\r\n        if (! isOperationActive(_operation)) {\r\n            // reset count of confirmations needed.\r\n            pending.yetNeeded = m_multiOwnedRequired;\r\n            // reset which owners have confirmed (none) - set our bitmap to 0.\r\n            pending.ownersDone = 0;\r\n            pending.index = m_multiOwnedPendingIndex.length++;\r\n            m_multiOwnedPendingIndex[pending.index] = _operation;\r\n            assertOperationIsConsistent(_operation);\r\n        }\r\n\r\n        // determine the bit to set for this owner.\r\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n        // make sure we (the message sender) haven't confirmed this operation previously.\r\n        if (pending.ownersDone & ownerIndexBit == 0) {\r\n            // ok - check if count is enough to go ahead.\r\n            assert(pending.yetNeeded > 0);\r\n            if (pending.yetNeeded == 1) {\r\n                // enough confirmations: reset and run interior.\r\n                delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\r\n                delete m_multiOwnedPending[_operation];\r\n                FinalConfirmation(msg.sender, _operation);\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                // not enough: record that this owner in particular confirmed.\r\n                pending.yetNeeded--;\r\n                pending.ownersDone |= ownerIndexBit;\r\n                assertOperationIsConsistent(_operation);\r\n                Confirmation(msg.sender, _operation);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Reclaims free slots between valid owners in m_owners.\r\n    // TODO given that its called after each removal, it could be simplified.\r\n    function reorganizeOwners() private {\r\n        uint free = 1;\r\n        while (free < m_numOwners)\r\n        {\r\n            // iterating to the first free slot from the beginning\r\n            while (free < m_numOwners && m_owners[free] != 0) free++;\r\n\r\n            // iterating to the first occupied slot from the end\r\n            while (m_numOwners > 1 && m_owners[m_numOwners] == 0) m_numOwners--;\r\n\r\n            // swap, if possible, so free slot is located at the end after the swap\r\n            if (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0)\r\n            {\r\n                // owners between swapped slots should't be renumbered - that saves a lot of gas\r\n                m_owners[free] = m_owners[m_numOwners];\r\n                m_ownerIndex[m_owners[free]] = free;\r\n                m_owners[m_numOwners] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function clearPending() private onlyowner {\r\n        uint length = m_multiOwnedPendingIndex.length;\r\n        // TODO block gas limit\r\n        for (uint i = 0; i < length; ++i) {\r\n            if (m_multiOwnedPendingIndex[i] != 0)\r\n                delete m_multiOwnedPending[m_multiOwnedPendingIndex[i]];\r\n        }\r\n        delete m_multiOwnedPendingIndex;\r\n    }\r\n\r\n    function checkOwnerIndex(uint ownerIndex) private pure returns (uint) {\r\n        assert(0 != ownerIndex && ownerIndex <= c_maxOwners);\r\n        return ownerIndex;\r\n    }\r\n\r\n    function makeOwnerBitmapBit(address owner) private constant returns (uint) {\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[owner]);\r\n        return 2 ** ownerIndex;\r\n    }\r\n\r\n    function isOperationActive(bytes32 _operation) private constant returns (bool) {\r\n        return 0 != m_multiOwnedPending[_operation].yetNeeded;\r\n    }\r\n\r\n\r\n    function assertOwnersAreConsistent() private constant {\r\n        assert(m_numOwners > 0);\r\n        assert(m_numOwners <= c_maxOwners);\r\n        assert(m_owners[0] == 0);\r\n        assert(0 != m_multiOwnedRequired && m_multiOwnedRequired <= m_numOwners);\r\n    }\r\n\r\n    function assertOperationIsConsistent(bytes32 _operation) private constant {\r\n        var pending = m_multiOwnedPending[_operation];\r\n        assert(0 != pending.yetNeeded);\r\n        assert(m_multiOwnedPendingIndex[pending.index] == _operation);\r\n        assert(pending.yetNeeded <= m_multiOwnedRequired);\r\n    }\r\n\r\n\r\n   \t// FIELDS\r\n\r\n    uint constant c_maxOwners = 250;\r\n\r\n    // the number of owners that must confirm the same operation before it is run.\r\n    uint public m_multiOwnedRequired;\r\n\r\n\r\n    // pointer used to find a free slot in m_owners\r\n    uint public m_numOwners;\r\n\r\n    // list of owners (addresses),\r\n    // slot 0 is unused so there are no owner which index is 0.\r\n    // TODO could we save space at the end of the array for the common case of <10 owners? and should we?\r\n    address[256] internal m_owners;\r\n\r\n    // index on the list of owners to allow reverse lookup: owner address => index in m_owners\r\n    mapping(address => uint) internal m_ownerIndex;\r\n\r\n\r\n    // the ongoing operations.\r\n    mapping(bytes32 => MultiOwnedOperationPendingState) internal m_multiOwnedPending;\r\n    bytes32[] internal m_multiOwnedPendingIndex;\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n    event Burn(address indexed from, uint256 amount);\r\n\r\n    /**\r\n     * Function to burn msg.sender's tokens.\r\n     *\r\n     * @param _amount amount of tokens to burn\r\n     *\r\n     * @return boolean that indicates if the operation was successful\r\n     */\r\n    function burn(uint256 _amount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        address from = msg.sender;\r\n\r\n        require(_amount > 0);\r\n        require(_amount <= balances[from]);\r\n\r\n        totalSupply = totalSupply.sub(_amount);\r\n        balances[from] = balances[from].sub(_amount);\r\n        Burn(from, _amount);\r\n        Transfer(from, address(0), _amount);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract TokenWithApproveAndCallMethod is StandardToken {\r\n\r\n    /**\r\n     * @notice Approves spending tokens and immediately triggers token recipient logic.\r\n     *\r\n     * @param _spender contract which supports IApprovalRecipient and allowed to receive tokens\r\n     * @param _value amount of tokens approved to be spent\r\n     * @param _extraData any extra data which to be provided to the _spender\r\n     *\r\n     * By invoking this utility function token holder could do two things in one transaction: approve spending his\r\n     * tokens and execute some external contract which spends them on token holder's behalf.\r\n     * It can't be known if _spender's invocation succeed or not.\r\n     * This function will throw if approval failed.\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public {\r\n        require(approve(_spender, _value));\r\n        IApprovalRecipient(_spender).receiveApproval(msg.sender, _value, _extraData);\r\n    }\r\n}\r\n\r\ncontract SmartzToken is ArgumentsChecker, multiowned, BurnableToken, StandardToken, TokenWithApproveAndCallMethod {\r\n\r\n    /// @title Unit of frozen tokens - tokens which can't be spent until certain conditions is met.\r\n    struct FrozenCell {\r\n        /// @notice amount of frozen tokens\r\n        uint amount;\r\n\r\n        /// @notice until this unix time the cell is considered frozen\r\n        uint128 thawTS;\r\n\r\n        /// @notice is KYC required for a token holder to spend this cell?\r\n        uint128 isKYCRequired;\r\n    }\r\n\r\n\r\n    // MODIFIERS\r\n\r\n    modifier onlySale(address account) {\r\n        require(isSale(account));\r\n        _;\r\n    }\r\n\r\n    modifier validUnixTS(uint ts) {\r\n        require(ts >= 1522046326 && ts <= 1800000000);\r\n        _;\r\n    }\r\n\r\n    modifier checkTransferInvariant(address from, address to) {\r\n        uint initial = balanceOf(from).add(balanceOf(to));\r\n        _;\r\n        assert(balanceOf(from).add(balanceOf(to)) == initial);\r\n    }\r\n\r\n    modifier privilegedAllowed {\r\n        require(m_allowPrivileged);\r\n        _;\r\n    }\r\n\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /**\r\n     * @notice Constructs token.\r\n     *\r\n     * Initial owners have power over the token contract only during bootstrap phase (early investments and token\r\n     * sales). To be precise, the owners can set KYC provider and sales (which can freeze transfered tokens) during\r\n     * bootstrap phase. After final token sale any control over the token removed by issuing disablePrivileged call.\r\n     */\r\n    function SmartzToken()\r\n        public\r\n        payable\r\n        multiowned(getInitialOwners(), 2)\r\n    {\r\n        if (0 != 150000000000000000000000000) {\r\n            totalSupply = 150000000000000000000000000;\r\n            balances[msg.sender] = totalSupply;\r\n            Transfer(address(0), msg.sender, totalSupply);\r\n        }\r\n\r\n\r\ntotalSupply = totalSupply.add(0);\r\n\r\n        address(0xaacf78f8e1fbdcf7d941e80ff8b817be1f054af4).transfer(300000000000000000 wei);\r\n    }\r\n\r\n    function getInitialOwners() private pure returns (address[]) {\r\n        address[] memory result = new address[](3);\r\nresult[0] = address(0x4ff9A68a832398c6b013633BB5682595ebb7B92E);\r\nresult[1] = address(0xE4074bB7bD4828bAeD9d2beCe1e386408428dfB7);\r\nresult[2] = address(0xAACf78F8e1fbDcf7d941E80Ff8B817BE1F054Af4);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @notice Version of balanceOf() which includes all frozen tokens.\r\n     *\r\n     * @param _owner the address to query the balance of\r\n     *\r\n     * @return an uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        uint256 balance = balances[_owner];\r\n\r\n        for (uint cellIndex = 0; cellIndex < frozenBalances[_owner].length; ++cellIndex) {\r\n            balance = balance.add(frozenBalances[_owner][cellIndex].amount);\r\n        }\r\n\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n     * @notice Version of balanceOf() which includes only currently spendable tokens.\r\n     *\r\n     * @param _owner the address to query the balance of\r\n     *\r\n     * @return an uint256 representing the amount spendable by the passed address\r\n     */\r\n    function availableBalanceOf(address _owner) public view returns (uint256) {\r\n        uint256 balance = balances[_owner];\r\n\r\n        for (uint cellIndex = 0; cellIndex < frozenBalances[_owner].length; ++cellIndex) {\r\n            if (isSpendableFrozenCell(_owner, cellIndex))\r\n                balance = balance.add(frozenBalances[_owner][cellIndex].amount);\r\n        }\r\n\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n     * @notice Standard transfer() overridden to have a chance to thaw sender's tokens.\r\n     *\r\n     * @param _to the address to transfer to\r\n     * @param _value the amount to be transferred\r\n     *\r\n     * @return true iff operation was successfully completed\r\n     */\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        payloadSizeIs(2 * 32)\r\n        returns (bool)\r\n    {\r\n        thawSomeTokens(msg.sender, _value);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @notice Standard transferFrom overridden to have a chance to thaw sender's tokens.\r\n     *\r\n     * @param _from address the address which you want to send tokens from\r\n     * @param _to address the address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     *\r\n     * @return true iff operation was successfully completed\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        payloadSizeIs(3 * 32)\r\n        returns (bool)\r\n    {\r\n        thawSomeTokens(_from, _value);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Function to burn msg.sender's tokens. Overridden to have a chance to thaw sender's tokens.\r\n     *\r\n     * @param _amount amount of tokens to burn\r\n     *\r\n     * @return boolean that indicates if the operation was successful\r\n     */\r\n    function burn(uint256 _amount)\r\n        public\r\n        payloadSizeIs(1 * 32)\r\n        returns (bool)\r\n    {\r\n        thawSomeTokens(msg.sender, _amount);\r\n        return super.burn(_amount);\r\n    }\r\n\r\n\r\n    // INFORMATIONAL FUNCTIONS (VIEWS)\r\n\r\n    /**\r\n     * @notice Number of frozen cells of an account.\r\n     *\r\n     * @param owner account address\r\n     *\r\n     * @return number of frozen cells\r\n     */\r\n    function frozenCellCount(address owner) public view returns (uint) {\r\n        return frozenBalances[owner].length;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves information about account frozen tokens.\r\n     *\r\n     * @param owner account address\r\n     * @param index index of so-called frozen cell from 0 (inclusive) up to frozenCellCount(owner) exclusive\r\n     *\r\n     * @return amount amount of tokens frozen in this cell\r\n     * @return thawTS unix timestamp at which tokens'll become available\r\n     * @return isKYCRequired it's required to pass KYC to spend tokens iff isKYCRequired is true\r\n     */\r\n    function frozenCell(address owner, uint index) public view returns (uint amount, uint thawTS, bool isKYCRequired) {\r\n        require(index < frozenCellCount(owner));\r\n\r\n        amount = frozenBalances[owner][index].amount;\r\n        thawTS = uint(frozenBalances[owner][index].thawTS);\r\n        isKYCRequired = decodeKYCFlag(frozenBalances[owner][index].isKYCRequired);\r\n    }\r\n\r\n\r\n    // ADMINISTRATIVE FUNCTIONS\r\n\r\n    /**\r\n     * @notice Sets current KYC provider of the token.\r\n     *\r\n     * @param KYCProvider address of the IKYCProvider-compatible contract\r\n     *\r\n     * Function is used only during token sale phase, before disablePrivileged() is called.\r\n     */\r\n    function setKYCProvider(address KYCProvider)\r\n        external\r\n        validAddress(KYCProvider)\r\n        privilegedAllowed\r\n        onlymanyowners(keccak256(msg.data))\r\n    {\r\n        m_KYCProvider = IKYCProvider(KYCProvider);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets sale status of an account.\r\n     *\r\n     * @param account account address\r\n     * @param isSale is this account has access to frozen* functions\r\n     *\r\n     * Function is used only during token sale phase, before disablePrivileged() is called.\r\n     */\r\n    function setSale(address account, bool isSale)\r\n        external\r\n        validAddress(account)\r\n        privilegedAllowed\r\n        onlymanyowners(keccak256(msg.data))\r\n    {\r\n        m_sales[account] = isSale;\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Transfers tokens to a recipient and freezes it.\r\n     *\r\n     * @param _to account to which tokens are sent\r\n     * @param _value amount of tokens to send\r\n     * @param thawTS unix timestamp at which tokens'll become available\r\n     * @param isKYCRequired it's required to pass KYC to spend tokens iff isKYCRequired is true\r\n     *\r\n     * Function is used only during token sale phase and available only to sale accounts.\r\n     */\r\n    function frozenTransfer(address _to, uint256 _value, uint thawTS, bool isKYCRequired)\r\n        external\r\n        validAddress(_to)\r\n        validUnixTS(thawTS)\r\n        payloadSizeIs(4 * 32)\r\n        privilegedAllowed\r\n        onlySale(msg.sender)\r\n        checkTransferInvariant(msg.sender, _to)\r\n        returns (bool)\r\n    {\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        addFrozen(_to, _value, thawTS, isKYCRequired);\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers frozen tokens back.\r\n     *\r\n     * @param _from account to send tokens from\r\n     * @param _to account to which tokens are sent\r\n     * @param _value amount of tokens to send\r\n     * @param thawTS unix timestamp at which tokens'll become available\r\n     * @param isKYCRequired it's required to pass KYC to spend tokens iff isKYCRequired is true\r\n     *\r\n     * Function is used only during token sale phase to make a refunds and available only to sale accounts.\r\n     * _from account has to explicitly approve spending with the approve() call.\r\n     * thawTS and isKYCRequired parameters are required to withdraw exact \"same\" tokens (to not affect availability of\r\n     * other tokens of the account).\r\n     */\r\n    function frozenTransferFrom(address _from, address _to, uint256 _value, uint thawTS, bool isKYCRequired)\r\n        external\r\n        validAddress(_to)\r\n        validUnixTS(thawTS)\r\n        payloadSizeIs(5 * 32)\r\n        privilegedAllowed\r\n        //onlySale(msg.sender) too many local variables - compiler fails\r\n        //onlySale(_to)\r\n        checkTransferInvariant(_from, _to)\r\n        returns (bool)\r\n    {\r\n        require(isSale(msg.sender) && isSale(_to));\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        subFrozen(_from, _value, thawTS, isKYCRequired);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Disables further use of any privileged functions like freezing tokens.\r\n    function disablePrivileged()\r\n        external\r\n        privilegedAllowed\r\n        onlymanyowners(keccak256(msg.data))\r\n    {\r\n        m_allowPrivileged = false;\r\n    }\r\n\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    function isSale(address account) private view returns (bool) {\r\n        return m_sales[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to find existent FrozenCell that matches (thawTS, isKYCRequired).\r\n     *\r\n     * @return index in frozenBalances[_owner] which equals to frozenBalances[_owner].length in case cell is not found\r\n     *\r\n     * Because frozen* functions are only for token sales and token sale number is limited, expecting cellIndex\r\n     * to be ~ 1-5 and the following loop to be O(1).\r\n     */\r\n    function findFrozenCell(address owner, uint128 thawTSEncoded, uint128 isKYCRequiredEncoded)\r\n        private\r\n        view\r\n        returns (uint cellIndex)\r\n    {\r\n        for (cellIndex = 0; cellIndex < frozenBalances[owner].length; ++cellIndex) {\r\n            FrozenCell storage checkedCell = frozenBalances[owner][cellIndex];\r\n            if (checkedCell.thawTS == thawTSEncoded && checkedCell.isKYCRequired == isKYCRequiredEncoded)\r\n                break;\r\n        }\r\n\r\n        assert(cellIndex <= frozenBalances[owner].length);\r\n    }\r\n\r\n    /// @dev Says if the given cell could be spent now\r\n    function isSpendableFrozenCell(address owner, uint cellIndex)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        FrozenCell storage cell = frozenBalances[owner][cellIndex];\r\n        if (uint(cell.thawTS) > getTime())\r\n            return false;\r\n\r\n        if (0 == cell.amount)   // already spent\r\n            return false;\r\n\r\n        if (decodeKYCFlag(cell.isKYCRequired) && !m_KYCProvider.isKYCPassed(owner))\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Internal function to increment or create frozen cell.\r\n    function addFrozen(address _to, uint256 _value, uint thawTS, bool isKYCRequired)\r\n        private\r\n        validAddress(_to)\r\n        validUnixTS(thawTS)\r\n    {\r\n        uint128 thawTSEncoded = uint128(thawTS);\r\n        uint128 isKYCRequiredEncoded = encodeKYCFlag(isKYCRequired);\r\n\r\n        uint cellIndex = findFrozenCell(_to, thawTSEncoded, isKYCRequiredEncoded);\r\n\r\n        // In case cell is not found - creating new.\r\n        if (cellIndex == frozenBalances[_to].length) {\r\n            frozenBalances[_to].length++;\r\n            targetCell = frozenBalances[_to][cellIndex];\r\n            assert(0 == targetCell.amount);\r\n\r\n            targetCell.thawTS = thawTSEncoded;\r\n            targetCell.isKYCRequired = isKYCRequiredEncoded;\r\n        }\r\n\r\n        FrozenCell storage targetCell = frozenBalances[_to][cellIndex];\r\n        assert(targetCell.thawTS == thawTSEncoded && targetCell.isKYCRequired == isKYCRequiredEncoded);\r\n\r\n        targetCell.amount = targetCell.amount.add(_value);\r\n    }\r\n\r\n    /// @dev Internal function to decrement frozen cell.\r\n    function subFrozen(address _from, uint256 _value, uint thawTS, bool isKYCRequired)\r\n        private\r\n        validUnixTS(thawTS)\r\n    {\r\n        uint cellIndex = findFrozenCell(_from, uint128(thawTS), encodeKYCFlag(isKYCRequired));\r\n        require(cellIndex != frozenBalances[_from].length);   // has to be found\r\n\r\n        FrozenCell storage cell = frozenBalances[_from][cellIndex];\r\n        require(cell.amount >= _value);\r\n\r\n        cell.amount = cell.amount.sub(_value);\r\n    }\r\n\r\n    /// @dev Thaws tokens of owner until enough tokens could be spent or no more such tokens found.\r\n    function thawSomeTokens(address owner, uint requiredAmount)\r\n        private\r\n    {\r\n        if (balances[owner] >= requiredAmount)\r\n            return;     // fast path\r\n\r\n        // Checking that our goal is reachable before issuing expensive storage modifications.\r\n        require(availableBalanceOf(owner) >= requiredAmount);\r\n\r\n        for (uint cellIndex = 0; cellIndex < frozenBalances[owner].length; ++cellIndex) {\r\n            if (isSpendableFrozenCell(owner, cellIndex)) {\r\n                uint amount = frozenBalances[owner][cellIndex].amount;\r\n                frozenBalances[owner][cellIndex].amount = 0;\r\n                balances[owner] = balances[owner].add(amount);\r\n            }\r\n        }\r\n\r\n        assert(balances[owner] >= requiredAmount);\r\n    }\r\n\r\n    /// @dev to be overridden in tests\r\n    function getTime() internal view returns (uint) {\r\n        return now;\r\n    }\r\n\r\n    function encodeKYCFlag(bool isKYCRequired) private pure returns (uint128) {\r\n        return isKYCRequired ? uint128(1) : uint128(0);\r\n    }\r\n\r\n    function decodeKYCFlag(uint128 isKYCRequired) private pure returns (bool) {\r\n        return isKYCRequired != uint128(0);\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice current KYC provider of the token\r\n    IKYCProvider public m_KYCProvider;\r\n\r\n    /// @notice set of sale accounts which can freeze tokens\r\n    mapping (address => bool) public m_sales;\r\n\r\n    /// @notice frozen tokens\r\n    mapping (address => FrozenCell[]) public frozenBalances;\r\n\r\n    /// @notice allows privileged functions (token sale phase)\r\n    bool public m_allowPrivileged = true;\r\n\r\n\r\n    // CONSTANTS\r\n\r\n    string public constant name = 'Smartz token';\r\n    string public constant symbol = 'SMR';\r\n    uint8 public constant decimals = 18;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"isSale\",\"type\":\"bool\"}],\"name\":\"setSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_allowPrivileged\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"availableBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_numOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amIOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"thawTS\",\"type\":\"uint256\"},{\"name\":\"isKYCRequired\",\"type\":\"bool\"}],\"name\":\"frozenTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"frozenCellCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_multiOwnedRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"frozenBalances\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"thawTS\",\"type\":\"uint128\"},{\"name\":\"isKYCRequired\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"m_sales\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRequired\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"KYCProvider\",\"type\":\"address\"}],\"name\":\"setKYCProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"hasConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerIndex\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_KYCProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"thawTS\",\"type\":\"uint256\"},{\"name\":\"isKYCRequired\",\"type\":\"bool\"}],\"name\":\"frozenTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"frozenCell\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"thawTS\",\"type\":\"uint256\"},{\"name\":\"isKYCRequired\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disablePrivileged\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"FinalConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRequirement\",\"type\":\"uint256\"}],\"name\":\"RequirementChanged\",\"type\":\"event\"}]","ContractName":"SmartzToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://35b1ef3b969dd6707adb6b616aabbafa2971de1f46d7ace2103ecbc2b214f178"}]}