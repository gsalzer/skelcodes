{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable()public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner)public onlyOwner {\r\n        require(newOwner != address(0));      \r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n* @title ERC20Basic\r\n* @dev Simpler version of ERC20 interface\r\n* @dev https://github.com/ethereum/EIPs/issues/179\r\n*/\r\ncontract ERC20Basic is Ownable {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value)public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n* @title ERC20 interface\r\n* @dev https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value)public returns(bool);\r\n    function approve(address spender, uint256 value)public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    bool freeze = false;\r\n    \r\n    mapping(address => uint256) balances;\r\n    \r\n    uint endOfICO = 1527681600; // 05.30.2018 12:00\r\n    \r\n    /**\r\n    * @dev Sets the date of the ICO end.\r\n    * @param ICO_end The date of the ICO end.\r\n    */\r\n    function setEndOfICO(uint ICO_end) public onlyOwner {\r\n        endOfICO = ICO_end;\r\n    }\r\n    \r\n    /**\r\n    * @dev Throws if called before the end of ICO.\r\n    */\r\n    modifier restrictionOnUse() {\r\n        require(now > endOfICO);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev Transfers tokens to a specified address.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public restrictionOnUse isNotFrozen returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Changes the value of freeze variable.\r\n    */\r\n    function freezeToken()public onlyOwner {\r\n        freeze = !freeze;\r\n    }\r\n    \r\n    /**\r\n    * @dev Throws if called when contract is frozen.\r\n    */\r\n    modifier isNotFrozen(){\r\n        require(!freeze);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the balance of.\r\n    */\r\n    function balanceOf(address _owner)public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    \r\n    /**\r\n    * @dev Transfers tokens from one address to another.\r\n    * @param _from The address which you want to send tokens from.\r\n    * @param _to The address which you want to transfer to.\r\n    * @param _value The amount of tokens to be transfered.\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public restrictionOnUse isNotFrozen returns(bool) {\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        var _allowance = allowed[_from][msg.sender];\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Approves the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public restrictionOnUse isNotFrozen returns (bool) {\r\n        require((_value > 0)&&(_value <= balances[msg.sender]));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner The address which owns the funds.\r\n    * @param _spender The address which will spend the funds.\r\n    */\r\n    function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken {\r\n    \r\n    event Mint(address indexed to, uint256 amount);\r\n    \r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n    \r\n    /**\r\n    * @dev Throws if called when minting is finished.\r\n    */\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev Function to mint tokens\r\n    * @param _to The address that will recieve the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    */\r\n    function mint(address _to, uint256 _amount) internal canMint returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Function to stop minting new tokens.\r\n    */\r\n    function finishMinting() public onlyOwner returns (bool) {\r\n        mintingFinished = !mintingFinished;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is MintableToken {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    */\r\n    function burn(uint _value) restrictionOnUse isNotFrozen public returns (bool success) {\r\n        require((_value > 0) && (_value <= balances[msg.sender]));\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n \r\n    /**\r\n    * @dev Burns a specific amount of tokens from another address.\r\n    * @param _value The amount of tokens to be burned.\r\n    * @param _from The address which you want to burn tokens from.\r\n    */\r\n    function burnFrom(address _from, uint _value) restrictionOnUse isNotFrozen public returns (bool success) {\r\n        require((balances[_from] > _value) && (_value <= allowed[_from][msg.sender]));\r\n        var _allowance = allowed[_from][msg.sender];\r\n        balances[_from] = balances[_from].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    event Burn(address indexed burner, uint indexed value);\r\n}\r\n\r\n/**\r\n * @title SimpleTokenCoin\r\n * @dev SimpleToken is a standard ERC20 token with some additional functionality\r\n */\r\ncontract SimpleTokenCoin is BurnableToken {\r\n    \r\n    address public forBounty = 0xdd5Aea206449d610A9e0c45B6b3fdAc684e0c8bD;\r\n    address public forTeamCOT = 0x3FFeEcc08Dc94Fd5089A8C377a6e7Bf15F0D2f8d;\r\n    address public forTeamETH = 0x619E27C6BfEbc196BA048Fb79B397314cfA82d89;\r\n    address public forFund = 0x7b7c6d8ce28923e39611dD14A68DA6Af63c63FF7;\r\n    address public forLoyalty = 0x22152A186AaD84b0eaadAD00e3F19547C30CcB02;\r\n    \r\n    string public constant name = \"CoinTour\";\r\n    \r\n    string public constant symbol = \"COT\";\r\n    \r\n    uint32 public constant decimals = 8;\r\n    \r\n    address private contractAddress;\r\n    \r\n    /**\r\n    * @dev Sets the address of approveAndCall contract.\r\n    * @param _address The address of approveAndCall contract.\r\n    */\r\n    function setContractAddress (address _address) public onlyOwner {\r\n        contractAddress = _address;\r\n    }\r\n    \r\n    /**\r\n    * @dev The SimpleTokenCoin constructor mints tokens to four addresses.\r\n    */\r\n    function SimpleTokenCoin()public {\r\n        mint(forBounty, 4000000 * 10**8);\r\n        mint(forTeamCOT, 10000000 * 10**8); \r\n        mint(forFund, 10000000 * 10**8);\r\n        mint(forLoyalty, 2000000 * 10**8);\r\n    }\r\n    \r\n    /**\r\n    * @dev Function to send ETH from contract address to team ETH address.\r\n    */\r\n    function sendETHfromContract() public onlyOwner {\r\n        forTeamETH.transfer(this.balance);\r\n    }\r\n    \r\n    /**\r\n     * @dev Sends to multiple addresses using two arrays which\r\n     * include the address and the amount of tokens.\r\n     * @param users Array of addresses to send to.\r\n     * @param bonus Array of amount of tokens to send.\r\n     */\r\n    function multisend(address[] users, uint[] bonus) public {\r\n        for (uint i = 0; i < users.length; i++) {\r\n            transfer(users[i], bonus[i]);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Token owner can approve for spender to execute another function.\r\n     * @param tokens Amount of tokens to execute function.\r\n     * @param data Additional data.\r\n     */\r\n    function approveAndCall(uint tokens, bytes data) public restrictionOnUse returns (bool success) {\r\n        approve(contractAddress, tokens);\r\n        ApproveAndCallFallBack(contractAddress).receiveApproval(msg.sender, tokens, data);\r\n        return true;\r\n    }\r\n}\r\n\r\ninterface ApproveAndCallFallBack { function receiveApproval(address from, uint256 tokens, bytes data) external; }\r\n\r\n/**\r\n * @title Crowdsale \r\n * @dev Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\r\n */\r\ncontract Crowdsale is SimpleTokenCoin {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    uint public startPreICO;\r\n    \r\n    uint public startICO;\r\n    \r\n    uint public periodPreICO;\r\n    \r\n    uint public firstPeriodOfICO;\r\n    \r\n    uint public secondPeriodOfICO;\r\n    \r\n    uint public thirdPeriodOfICO;\r\n\r\n    uint public hardcap;\r\n\r\n    uint public rate;\r\n    \r\n    uint public softcap;\r\n    \r\n    uint public maxTokensAmount;\r\n    \r\n    uint public availableTokensAmount;\r\n    \r\n    mapping(address => uint) ethBalance;\r\n    \r\n    /**\r\n    * @dev Data type to save bonus system's information.\r\n    */\r\n    struct BonusSystem {\r\n        //Period number\r\n        uint period;\r\n        // UNIX timestamp of period start\r\n        uint start;\r\n        // UNIX timestamp of period finish\r\n        uint end;\r\n        //Amount of tokens available per period\r\n        uint tokensPerPeriod;\r\n        //Sold tokens Amount\r\n        uint soldTokens;\r\n        // How many % tokens will add\r\n        uint bonus;\r\n    }\r\n    \r\n    BonusSystem[] public bonus;\r\n    \r\n    /**\r\n    * @dev Function to change bonus system.\r\n    * @param percentageOfTokens Percentage of tokens for each period.\r\n    * @param bonuses Percentage of bonus for each period.\r\n    */\r\n    function changeBonusSystem(uint[] percentageOfTokens, uint[] bonuses) public onlyOwner{\r\n        for (uint i = 0; i < bonus.length; i++) {\r\n            bonus[i].tokensPerPeriod = availableTokensAmount / 100 * percentageOfTokens[i];\r\n            bonus[i].bonus = bonuses[i];\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @dev Function to set bonus system.\r\n    * @param preICOtokens , firstPeriodTokens, secondPeriodTokens, thirdPeriodTokens Percentage of tokens for each period.\r\n    * @param preICObonus , firstPeriodBonus, secondPeriodBonus, thirdPeriodBonus Percentage of bonus for each period.\r\n    */\r\n    function setBonusSystem(uint preICOtokens, uint preICObonus, uint firstPeriodTokens, uint firstPeriodBonus, \r\n                            uint secondPeriodTokens, uint secondPeriodBonus, uint thirdPeriodTokens, uint thirdPeriodBonus) private {\r\n        bonus.push(BonusSystem(0, startPreICO, startPreICO + periodPreICO * 1 days, availableTokensAmount / 100 * preICOtokens, 0, preICObonus));\r\n        bonus.push(BonusSystem(1, startICO, startICO + firstPeriodOfICO * 1 days, availableTokensAmount / 100 * firstPeriodTokens, 0, firstPeriodBonus));\r\n        bonus.push(BonusSystem(2, startICO + firstPeriodOfICO * 1 days, startICO + (firstPeriodOfICO + secondPeriodOfICO) * 1 days, availableTokensAmount / 100 * secondPeriodTokens, 0, secondPeriodBonus));\r\n        bonus.push(BonusSystem(3, startICO + (firstPeriodOfICO + secondPeriodOfICO) * 1 days, startICO + (firstPeriodOfICO + secondPeriodOfICO + thirdPeriodOfICO) * 1 days, availableTokensAmount / 100 * thirdPeriodTokens, 0, thirdPeriodBonus));\r\n    }\r\n    \r\n    /**\r\n    * @dev Gets current bonus system.\r\n    */\r\n    function getCurrentBonusSystem() public constant returns (BonusSystem) {\r\n      for (uint i = 0; i < bonus.length; i++) {\r\n        if (bonus[i].start <= now && bonus[i].end >= now) {\r\n          return bonus[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * @dev Sets values of periods.\r\n    * @param PreICO_start The value of pre ICO start.\r\n    * @param PreICO_period The duration of pre ICO period.\r\n    * @param ICO_firstPeriod , ICO_secondPeriod, ICO_thirdPeriod The duration of each period.\r\n    */\r\n    function setPeriods(uint PreICO_start, uint PreICO_period, uint ICO_start, uint ICO_firstPeriod, uint ICO_secondPeriod, uint ICO_thirdPeriod) public onlyOwner {\r\n        startPreICO = PreICO_start;\r\n        periodPreICO = PreICO_period;\r\n        startICO = ICO_start;\r\n        firstPeriodOfICO = ICO_firstPeriod;\r\n        secondPeriodOfICO = ICO_secondPeriod;\r\n        thirdPeriodOfICO = ICO_thirdPeriod;\r\n        bonus[0].start = PreICO_start;\r\n        bonus[0].end = PreICO_start + PreICO_period * 1 days;\r\n        bonus[1].start = ICO_start;\r\n        bonus[1].end = ICO_start + ICO_firstPeriod * 1 days;\r\n        bonus[2].start = bonus[1].end;\r\n        bonus[2].end = bonus[2].start + ICO_secondPeriod * 1 days;\r\n        bonus[3].start = bonus[2].end;\r\n        bonus[3].end = bonus[2].end + ICO_thirdPeriod * 1 days;\r\n    }\r\n    \r\n    /**\r\n    * @dev Sets the rate of COT.\r\n    */\r\n    function setRate (uint _rate) public onlyOwner {\r\n        rate = _rate * 10**8 ;\r\n    }\r\n    \r\n    /**\r\n    * @dev The Crowdsale constructor sets the first values to variables.\r\n    */\r\n    function Crowdsale() public{\r\n        rate = 16000 * 10**8 ;\r\n        startPreICO = 1522065600; // 03.26.2018 12:00\r\n        periodPreICO = 14;\r\n        startICO = 1525089600; // 04.30.2018 12:00\r\n        firstPeriodOfICO = secondPeriodOfICO = thirdPeriodOfICO = 10;\r\n        hardcap = 59694 * 10**17;\r\n        softcap = 400 * 10**18;\r\n        maxTokensAmount = 100000000 * 10**8;\r\n        availableTokensAmount = maxTokensAmount - totalSupply;\r\n        setBonusSystem(20, 40, 25, 25, 25, 15, 30, 0);\r\n    }\r\n    \r\n    /**\r\n    * @dev Throws if called when the period or tokens are over.\r\n    */\r\n    modifier isUnderPeriodLimit() {\r\n        require(getCurrentBonusSystem().start <= now && getCurrentBonusSystem().end >= now && getCurrentBonusSystem().tokensPerPeriod - getCurrentBonusSystem().soldTokens > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to mint tokens.\r\n    * @param _to The address that will recieve the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    */\r\n    function buyTokens(address _to, uint256 _amount) internal canMint isNotFrozen returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        bonus[getCurrentBonusSystem().period].soldTokens = getCurrentBonusSystem().soldTokens.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Refund 'msg.sender' in the case the Token Sale didn't \r\n    * reach the minimum funding goal.\r\n    */\r\n    function refund() restrictionOnUse isNotFrozen public {\r\n        require(this.balance < softcap);\r\n        uint value = ethBalance[msg.sender]; \r\n        ethBalance[msg.sender] = 0; \r\n        msg.sender.transfer(value); \r\n    }\r\n    \r\n    /**\r\n    * @dev Сalculates the required amount of tokens to be minted. \r\n    */\r\n    function createTokens()private isUnderPeriodLimit isNotFrozen {\r\n        uint tokens = rate.mul(msg.value).div(1 ether);\r\n        uint bonusTokens = tokens / 100 * getCurrentBonusSystem().bonus;\r\n        tokens += bonusTokens;\r\n        if (msg.value < 10 finney || (tokens > getCurrentBonusSystem().tokensPerPeriod.sub(getCurrentBonusSystem().soldTokens))) {\r\n            msg.sender.transfer(msg.value);\r\n        }\r\n        else {\r\n            forTeamETH.transfer(msg.value);\r\n            buyTokens(msg.sender, tokens);\r\n            ethBalance[msg.sender] = ethBalance[msg.sender].add(msg.value);\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * Called when ETH comes to the contract.\r\n    */\r\n    function() external payable {\r\n        createTokens();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"forFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokensAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonus\",\"outputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"tokensPerPeriod\",\"type\":\"uint256\"},{\"name\":\"soldTokens\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"PreICO_start\",\"type\":\"uint256\"},{\"name\":\"PreICO_period\",\"type\":\"uint256\"},{\"name\":\"ICO_start\",\"type\":\"uint256\"},{\"name\":\"ICO_firstPeriod\",\"type\":\"uint256\"},{\"name\":\"ICO_secondPeriod\",\"type\":\"uint256\"},{\"name\":\"ICO_thirdPeriod\",\"type\":\"uint256\"}],\"name\":\"setPeriods\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPeriodOfICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendETHfromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBonusSystem\",\"outputs\":[{\"components\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"tokensPerPeriod\",\"type\":\"uint256\"},{\"name\":\"soldTokens\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forTeamETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forTeamCOT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freezeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"bonus\",\"type\":\"uint256[]\"}],\"name\":\"multisend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableTokensAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ICO_end\",\"type\":\"uint256\"}],\"name\":\"setEndOfICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPeriodOfICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percentageOfTokens\",\"type\":\"uint256[]\"},{\"name\":\"bonuses\",\"type\":\"uint256[]\"}],\"name\":\"changeBonusSystem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdPeriodOfICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forLoyalty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d0c2c1d2a07c326e9c41a7547c9344d718d7d4b7d2586644e3c6ae435f83a186"}]}