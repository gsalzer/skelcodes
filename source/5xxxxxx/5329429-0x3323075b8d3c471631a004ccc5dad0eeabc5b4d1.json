{"status":"1","message":"OK","result":[{"SourceCode":"// Contract dividend.\r\n\r\ncontract Dividend{\r\n    uint256 constant div = 1000; // 10 % \r\n    uint256 public price = (0.01 ether);\r\n    uint256 public baseprice = price;\r\n    uint256 public previousprice = 0;\r\n    address public dev;\r\n    address public divholder;\r\n    address public current_start_divholder = divholder;\r\n    \r\n    \r\n    uint256 increase = 2000; // 20% \r\n    uint256 min = 1500; //15% (min increase in price, scales weird way)\r\n    uint256 minprofit = 1000;\r\n    \r\n    uint256 public divpaid = 0;\r\n    \r\n    \r\n    function Dividend(){\r\n        dev = msg.sender;\r\n    }\r\n    \r\n    event t(uint256 t);\r\n    function NewPrice() public  returns (uint256){\r\n\r\n        uint ret = price * (increase + 10000) / 10000;\r\n        \r\n        return ret;\r\n    }\r\n    \r\n    function Withdraw(){\r\n        \r\n        _withdraw(true);\r\n    }\r\n    \r\n    function _withdraw(bool devpay) internal {\r\n\r\n        if (divholder != current_start_divholder){\r\n            // pay divholder.\r\n            uint256 bal = address(this).balance;\r\n            uint256 pay = (bal * div) / 10000;\r\n            divholder.transfer(pay);\r\n            divpaid = divpaid + pay;\r\n        }\r\n \r\n        // subbal in balance.\r\n        if (devpay){\r\n            dev.transfer(address(this).balance);\r\n        }\r\n    }\r\n    \r\n    function Buy() payable{\r\n        var val = msg.value; \r\n        require(val >= price);\r\n        //excess\r\n        if (val > price){\r\n            msg.sender.transfer(val-price);\r\n        }\r\n        \r\n        _withdraw(false);\r\n        \r\n        if ((current_start_divholder != divholder) && divpaid < ((previousprice * (10000 + minprofit))/10000)){\r\n            uint256 nmake =  ((previousprice * (10000 + minprofit))/10000) - divpaid;\r\n            t(nmake / (1 finney));\r\n            divholder.transfer(nmake);\r\n            \r\n        }\r\n        \r\n        //dev.transfer(address(this).balance);\r\n        \r\n        // previous is paid in Withdraw\r\n        // if NOT enough made in above lines we give the previous owner the eth \r\n        // he has right on.\r\n        // rest transferred to dev.\r\n        dev.transfer(address(this).balance);\r\n        \r\n        divpaid = 0;\r\n        previousprice = price;\r\n        price = NewPrice();\r\n        divholder = msg.sender;\r\n    }\r\n    \r\n    \r\n    // send donations pl0x\r\n    function() payable {\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"divpaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousprice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseprice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_start_divholder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"NewPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divholder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"t\",\"type\":\"event\"}]","ContractName":"Dividend","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cbb6faffb7716730743f01a8c29ecde2d227f314b430aad831aa02d18716c026"}]}