{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract owned {\r\n    /* Owner definition. */\r\n    address public owner; // Owner address.\r\n    function owned() internal {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner); _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public{\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract token { \r\n    /* Base token definition. */\r\n    string public name; // Name for the token.\r\n    string public symbol; // Symbol for the token.\r\n    uint8 public decimals; // Number of decimals of the token.\r\n    uint256 public totalSupply; // Total of tokens created.\r\n\r\n    // Array containing the balance foreach address.\r\n    mapping (address => uint256) public balanceOf;\r\n    // Array containing foreach address, an array containing each approved address and the amount of tokens it can spend.\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify about a transfer done. */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* Initializes the contract */\r\n    function token(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) internal {\r\n        balanceOf[msg.sender] = initialSupply; // Gives the creator all initial tokens.\r\n        totalSupply = initialSupply; // Update total supply.\r\n        name = tokenName; // Set the name for display purposes.\r\n        symbol = tokenSymbol; // Set the symbol for display purposes.\r\n        decimals = decimalUnits; // Amount of decimals for display purposes.\r\n    }\r\n\r\n    /* Internal transfer, only can be called by this contract. */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0); // Prevent transfer to 0x0 address.\r\n        require(balanceOf[_from] > _value); // Check if the sender has enough.\r\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows.\r\n        balanceOf[_from] -= _value; // Subtract from the sender.\r\n        balanceOf[_to]   += _value; // Add the same to the recipient.\r\n        Transfer(_from, _to, _value); // Notifies the blockchain about the transfer.\r\n    }\r\n\r\n    /// @notice Send `_value` tokens to `_to` from your account.\r\n    /// @param _to The address of the recipient.\r\n    /// @param _value The amount to send.\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /// @notice Send `_value` tokens to `_to` in behalf of `_from`.\r\n    /// @param _from The address of the sender.\r\n    /// @param _to The address of the recipient.\r\n    /// @param _value The amount to send.\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]); // Check allowance.\r\n        allowance[_from][msg.sender] -= _value; // Update the allowance array, substracting the amount sent.\r\n        _transfer(_from, _to, _value); // Makes the transfer.\r\n        return true;\r\n    }\r\n\r\n    /// @notice Allows `_spender` to spend a maximum of `_value` tokens in your behalf.\r\n    /// @param _spender The address authorized to spend.\r\n    /// @param _value The max amount they can spend.\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value; // Adds a new register to allowance, permiting _spender to use _value of your tokens.\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract GFCToken is owned, token {\r\n    /* Specific token definition for -GFC Token- company. */\r\n    uint256 public sellPrice = 1; // Price applied when selling a token.\r\n    uint256 public buyPrice = 1; // Price applied when buying a token.\r\n    bool public closeBuy = false; // If true, nobody will be able to buy.\r\n    bool public closeSell = false; // If true, nobody will be able to sell.\r\n    address public commissionGetter = 0xCd8bf69ad65c5158F0cfAA599bBF90d7f4b52Bb0; // The address that gets the commissions paid.\r\n    mapping (address => bool) public frozenAccount; // Array containing foreach address if it's frozen or not.\r\n\r\n    /* This generates a public event on the blockchain that will notify about an address being freezed. */\r\n    event FrozenFunds(address target, bool frozen);\r\n    /* This generates a public event on the blockchain that will notify about an addition of Ether to the contract. */\r\n    event LogDeposit(address sender, uint amount);\r\n    /* This generates a public event on the blockchain that will notify about a Withdrawal of Ether from the contract. */\r\n    event LogWithdrawal(address receiver, uint amount);\r\n\r\n    /* Initializes the contract */\r\n    function GFCToken(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) public token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}\r\n\r\n    /* Overrides Internal transfer due to frozen accounts check */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0); // Prevent transfer to 0x0 address.\r\n        require(balanceOf[_from] >= _value); // Check if the sender has enough.\r\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows.\r\n        require(!frozenAccount[_from]); // Check if sender is frozen.\r\n        require(!frozenAccount[_to]); // Check if recipient is frozen.\r\n\t\tbalanceOf[_from] -= _value; // Subtracts _value tokens from the sender.\r\n        balanceOf[_to] += _value; // Adds the same amount to the recipient.\r\n        Transfer(_from, _to, _value); // Notifies the blockchain about the transfer.\r\n    }\r\n\r\n    /* Sends GFC from the owner to the smart-contract */\r\n    function refillTokens(uint256 _value) public onlyOwner{\r\n        _transfer(msg.sender, this, _value);\r\n    }\r\n\r\n    /* Overrides basic transfer function due to commission value */\r\n    function transfer(address _to, uint256 _value) public {\r\n        uint market_value = _value * sellPrice; //Market value for this amount\r\n        uint commission = market_value * 1 / 100; //Calculates the commission for this transaction\r\n        require(this.balance >= commission); // The smart-contract pays commission, else the transfer is not possible.\r\n        commissionGetter.transfer(commission); // Transfers commission to the commissionGetter.\r\n        _transfer(msg.sender, _to, _value); // Makes the transfer of tokens.\r\n    }\r\n\r\n    /* Overrides basic transferFrom function due to commission value */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]); // Check allowance.\r\n        uint market_value = _value * sellPrice; //Market value for this amount\r\n        uint commission = market_value * 1 / 100; //Calculates the commission for this transaction\r\n        require(this.balance >= commission); // The smart-contract pays commission, else the transfer is not possible.\r\n        commissionGetter.transfer(commission); // Transfers commission to the commissionGetter.\r\n        allowance[_from][msg.sender] -= _value; // Update the allowance array, substracting the amount sent.\r\n        _transfer(_from, _to, _value); // Makes the transfer of tokens.\r\n        return true;\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens.\r\n    /// @param target Address to be frozen.\r\n    /// @param freeze Either to freeze target or not.\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze; // Sets the target status. True if it's frozen, False if it's not.\r\n        FrozenFunds(target, freeze); // Notifies the blockchain about the change of state.\r\n    }\r\n\r\n    /// @notice Allow addresses to pay `newBuyPrice`ETH when buying and receive `newSellPrice`ETH when selling, foreach token bought/sold.\r\n    /// @param newSellPrice Price applied when an address sells its tokens, amount in WEI (1ETH = 10¹⁸WEI).\r\n    /// @param newBuyPrice Price applied when an address buys tokens, amount in WEI (1ETH = 10¹⁸WEI).\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n        sellPrice = newSellPrice; // Update the buying price.\r\n        buyPrice = newBuyPrice; // Update the selling price.\r\n    }\r\n\r\n    /// @notice Sets the state of buy and sell operations\r\n    /// @param isClosedBuy True if buy operations are closed, False if opened.\r\n    /// @param isClosedSell True if sell operations are closed, False if opened.\r\n    function setStatus(bool isClosedBuy, bool isClosedSell) onlyOwner public {\r\n        closeBuy = isClosedBuy; // Update the state of buy operations.\r\n        closeSell = isClosedSell; // Update the state of sell operations.\r\n    }\r\n\r\n    /// @notice Deposits Ether to the contract\r\n    function deposit() payable public returns(bool success) {\r\n        require((this.balance + msg.value) > this.balance); // Checks for overflows.\r\n        LogDeposit(msg.sender, msg.value); // Notifies the blockchain about the Ether received.\r\n        return true;\r\n    }\r\n\r\n    /// @notice The owner withdraws Ether from the contract.\r\n    /// @param amountInWeis Amount of ETH in WEI which will be withdrawed.\r\n    function withdraw(uint amountInWeis) onlyOwner public {\r\n        LogWithdrawal(msg.sender, amountInWeis); // Notifies the blockchain about the withdrawal.\r\n        owner.transfer(amountInWeis); // Sends the Ether to owner address.\r\n    }\r\n\r\n    /// @notice Buy tokens from contract by sending Ether.\r\n    function buy() public payable {\r\n        require(!closeBuy); //Buy operations must be opened\r\n        uint amount = msg.value / buyPrice; //Calculates the amount of tokens to be sent\r\n        uint market_value = amount * buyPrice; //Market value for this amount\r\n        uint commission = market_value * 1 / 100; //Calculates the commission for this transaction\r\n        require(this.balance >= commission); //The token smart-contract pays commission, else the operation is not possible.\r\n        commissionGetter.transfer(commission); //Transfers commission to the commissionGetter.\r\n        _transfer(this, msg.sender, amount); //Makes the transfer of tokens.\r\n    }\r\n\r\n    /// @notice Sell `amount` tokens to the contract.\r\n    /// @param amount amount of tokens to be sold.\r\n    function sell(uint256 amount) public {\r\n        require(!closeSell); //Sell operations must be opened\r\n        uint market_value = amount * sellPrice; //Market value for this amount\r\n        uint commission = market_value * 1 / 100; //Calculates the commission for this transaction\r\n        uint amount_weis = market_value + commission; //Total in weis that must be paid\r\n        require(this.balance >= amount_weis); //Contract must have enough weis\r\n        commissionGetter.transfer(commission); //Transfers commission to the commissionGetter\r\n        _transfer(msg.sender, this, amount); //Makes the transfer of tokens, the contract receives the tokens.\r\n        msg.sender.transfer(market_value); //Sends Ether to the seller.\r\n    }\r\n\r\n    /// Default function, sender buys tokens by sending ether to the contract\r\n    function () public payable { buy(); }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountInWeis\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionGetter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"refillTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isClosedBuy\",\"type\":\"bool\"},{\"name\":\"isClosedSell\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closeSell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closeBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"GFCToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000002faf0800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002b47464320652d61756374696f6e20706c6174666f726d20666f7220416772692d636f6d6d6f64697469657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034746430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://c5f48c057dd2e624a08ecc20503f7adfd8642c0d3bbdb0b1291420b4bcfe7553"}]}