{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n\r\n\r\ncontract ToyCo{\r\n    //uint256 STORES_PER_CENTER_PER_SECOND=1;\r\n    uint256 public STORES_TO_UPGRADE_1CENTER=86400;\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized=false;\r\n    address public ceoAddress;\r\n    mapping (address => uint256) public upgradingCenter;\r\n    mapping (address => uint256) public claimedStores;\r\n    mapping (address => uint256) public lastUpgrade;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketStores;\r\n    function ToyCo() public{\r\n        ceoAddress=msg.sender;\r\n    }\r\n    function upgradeStores(address ref) public{\r\n        require(initialized);\r\n        if(referrals[msg.sender]==0 && ref!=msg.sender){\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 storesUsed=getMyStores();\r\n        uint256 newCenter=SafeMath.div(storesUsed,STORES_TO_UPGRADE_1CENTER);\r\n        upgradingCenter[msg.sender]=SafeMath.add(upgradingCenter[msg.sender],newCenter);\r\n        claimedStores[msg.sender]=0;\r\n        lastUpgrade[msg.sender]=now;\r\n\r\n        //send referral stores\r\n        claimedStores[referrals[msg.sender]]=SafeMath.add(claimedStores[referrals[msg.sender]],SafeMath.div(storesUsed,10));\r\n\r\n        //boost market to nerf center hoarding\r\n        marketStores=SafeMath.add(marketStores,SafeMath.div(storesUsed,10));\r\n    }\r\n    function sellStores() public{\r\n        require(initialized);\r\n        uint256 hasStores=getMyStores();\r\n        uint256 storeValue=calculateStoreSell(hasStores);\r\n        uint256 fee=devFee(storeValue);\r\n        claimedStores[msg.sender]=0;\r\n        lastUpgrade[msg.sender]=now;\r\n        marketStores=SafeMath.add(marketStores,hasStores);\r\n        ceoAddress.transfer(fee);\r\n        msg.sender.transfer(SafeMath.sub(storeValue,fee));\r\n        upgradingCenter[msg.sender]=0;\r\n    }\r\n    function buyStores() public payable{\r\n        require(initialized);\r\n        uint256 storesBought=calculateStoreBuy(msg.value,SafeMath.sub(this.balance,msg.value));\r\n        storesBought=SafeMath.sub(storesBought,devFee(storesBought));\r\n        ceoAddress.transfer(devFee(msg.value));\r\n        claimedStores[msg.sender]=SafeMath.add(claimedStores[msg.sender],storesBought);\r\n    }\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculateStoreSell(uint256 stores) public view returns(uint256){\r\n        return calculateTrade(stores,marketStores,this.balance);\r\n    }\r\n    function calculateStoreBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth,contractBalance,marketStores);\r\n    }\r\n    function calculateStoreBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateStoreBuy(eth,this.balance);\r\n    }\r\n    function devFee(uint256 amount) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,4),100);\r\n    }\r\n    function seedMarket(uint256 stores) public payable{\r\n        require(marketStores==0);\r\n        initialized=true;\r\n        marketStores=stores;\r\n    }\r\n    function getBalance() public view returns(uint256){\r\n        return this.balance;\r\n    }\r\n    function getMyCenter() public view returns(uint256){\r\n        return upgradingCenter[msg.sender];\r\n    }\r\n    function getMyStores() public view returns(uint256){\r\n        return SafeMath.add(claimedStores[msg.sender],getStoresSinceLastUpgrade(msg.sender));\r\n    }\r\n    function getStoresSinceLastUpgrade(address adr) public view returns(uint256){\r\n        uint256 secondsPassed=min(STORES_TO_UPGRADE_1CENTER,SafeMath.sub(now,lastUpgrade[adr]));\r\n        return SafeMath.mul(secondsPassed,upgradingCenter[adr]);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyStores\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketStores\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stores\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STORES_TO_UPGRADE_1CENTER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyCenter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateStoreBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedStores\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"upgradingCenter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getStoresSinceLastUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellStores\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stores\",\"type\":\"uint256\"}],\"name\":\"calculateStoreSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyStores\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateStoreBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"upgradeStores\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"ToyCo","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b4ecdddce59b49c0669188a24b4630a27db8f353e1bfd8eb3cb215ecbccad91b"}]}