{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/// @title SafeMath contract - Math operations with safety checks.\r\n/// @author OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\ncontract SafeMath\r\n{\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint c = a ** b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable\r\n{\r\n    event NewOwner(address old, address current);\r\n    event NewPotentialOwner(address old, address potential);\r\n\r\n    address public owner = msg.sender;\r\n    address public potentialOwner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPotentialOwner {\r\n        require(msg.sender == potentialOwner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _new) public onlyOwner {\r\n        emit NewPotentialOwner(owner, _new);\r\n        potentialOwner = _new;\r\n    }\r\n\r\n    function confirmOwnership() public onlyPotentialOwner {\r\n        emit NewOwner(owner, potentialOwner);\r\n        owner = potentialOwner;\r\n        potentialOwner = 0;\r\n    }\r\n}\r\n\r\n/// @title Abstract Token, ERC20 token interface\r\ncontract ERC20I\r\n{\r\n    function name() constant public returns (string);\r\n    function symbol() constant public returns (string);\r\n    function decimals() constant public returns (uint8);\r\n    function totalSupply() constant public returns (uint256);\r\n    function balanceOf(address owner) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/// Full complete implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 is ERC20I, SafeMath\r\n{\r\n    //using SafeMath for uint;\r\n\r\n    string  public name;\r\n    string  public symbol;\r\n    uint8   public decimals;\r\n    uint256 public totalSupply;\r\n    string  public version;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    function name() public view returns (string) {\r\n        return name;\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    function symbol() public view returns (string) {\r\n        return symbol;\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    function decimals() public view returns (uint8) {\r\n        return decimals;\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n      return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n      require(_to != address(0x0));\r\n      require(_value <= balances[msg.sender]);\r\n\r\n      balances[msg.sender] = sub(balances[msg.sender], _value);\r\n      balances[_to] = add(balances[_to], _value);\r\n      emit Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n      require(_to != address(0));\r\n      require(_value <= balances[_from]);\r\n      require(_value <= allowed[_from][msg.sender]);\r\n\r\n      balances[_from] = sub(balances[_from], _value);\r\n      balances[_to] = add(balances[_to], _value);\r\n      allowed[_from][msg.sender] = sub( allowed[_from][msg.sender], _value);\r\n      emit Transfer(_from, _to, _value);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n      allowed[msg.sender][_spender] = _value;\r\n      emit Approval(msg.sender, _spender, _value);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n      allowed[msg.sender][_spender] = add(allowed[msg.sender][_spender], _addedValue);\r\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n      uint oldValue = allowed[msg.sender][_spender];\r\n      if (_subtractedValue > oldValue) {\r\n        allowed[msg.sender][_spender] = 0;\r\n      } else {\r\n        allowed[msg.sender][_spender] = sub(oldValue, _subtractedValue);\r\n      }\r\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n\r\n    event EPause(); //address owner, string event\r\n    event EUnpause();\r\n\r\n    bool public paused = true;\r\n\r\n    modifier whenNotPaused()\r\n    {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner\r\n    {\r\n        paused = true;\r\n        emit EPause();\r\n    }\r\n\r\n    function unpause() public onlyOwner\r\n    {\r\n        paused = false;\r\n        emit EUnpause();\r\n    }\r\n}\r\n\r\n/**\r\n   @title ERC827 interface, an extension of ERC20 token standard\r\n\r\n   Interface of a ERC827 token, following the ERC20 standard with extra\r\n   methods to transfer value and data and execute calls in transfers and\r\n   approvals.\r\n */\r\n\r\n\r\ncontract MintableToken is ERC20, Ownable\r\n{\r\n    uint256 maxSupply = 1e25; //tokens limit\r\n\r\n    // triggered when the total supply is increased\r\n    event Issuance(uint256 _amount);\r\n    // triggered when the total supply is decreased\r\n    event Destruction(uint256 _amount);\r\n\r\n    /**\r\n        @dev increases the token supply and sends the new tokens to an account\r\n        can only be called by the contract owner\r\n        @param _to         account to receive the new amount\r\n        @param _amount     amount to increase the supply by\r\n    */\r\n    function issue(address _to, uint256 _amount) public onlyOwner {\r\n        require(maxSupply >= totalSupply + _amount);\r\n        totalSupply +=  _amount;\r\n        balances[_to] += _amount;\r\n        emit Issuance(_amount);\r\n        emit Transfer(this, _to, _amount);\r\n    }\r\n\r\n    /**\r\n        @dev removes tokens from an account and decreases the token supply\r\n        can only be called by the contract owner\r\n        (if robbers detected, if will be consensus about token amount)\r\n        @param _from       account to remove the amount from\r\n        @param _amount     amount to decrease the supply by\r\n    */\r\n    function destroy(address _from, uint256 _amount) public onlyOwner {\r\n        balances[_from] -= _amount;\r\n        totalSupply -= _amount;\r\n        emit Transfer(_from, this, _amount);\r\n        emit Destruction(_amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is MintableToken, Pausable {\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue)\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue)\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n}\r\n\r\ncontract Workcoin is PausableToken {\r\n\r\n    address internal seller;\r\n\r\n    /**\r\n        @dev modified pausable/trustee seller contract\r\n    */\r\n    function transfer(address _to, uint256 _value) public\r\n        returns (bool)\r\n    {\r\n        if(paused) {\r\n            require(seller == msg.sender);\r\n            return super.transfer(_to, _value);\r\n        } else {\r\n            return super.transfer(_to, _value);\r\n        }\r\n    }\r\n\r\n    function sendToken(address _to, uint256 _value) public onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0x0));\r\n        require(_value <= balances[this]);\r\n        balances[this] = sub(balances[this], _value);\r\n        balances[_to] = add(balances[_to], _value);\r\n        emit Transfer(this, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function setSeller(address _seller) public onlyOwner {\r\n        seller = _seller;\r\n    }\r\n\r\n    /** @dev transfer ethereum from contract */\r\n    function transferEther(address _to, uint256 _value)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        _to.transfer(_value); // CHECK THIS\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev owner can transfer out any accidentally sent ERC20 tokens\r\n    */\r\n    function transferERC20Token(address tokenAddress, address to, uint256 tokens)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return ERC20(tokenAddress).transfer(to, tokens);\r\n    }\r\n\r\n    /**\r\n        @dev mass transfer\r\n        @param _holders addresses of the owners to be notified [\"address_1\", \"address_2\", ..]\r\n     */\r\n    function massTransfer(address [] _holders, uint256 [] _payments)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint256 hl = _holders.length;\r\n        uint256 pl = _payments.length;\r\n        require(hl <= 100 && hl == pl);\r\n        for (uint256 i = 0; i < hl; i++) {\r\n            transfer(_holders[i], _payments[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        @dev tokens constructor\r\n    */\r\n    function Workcoin() public\r\n    {\r\n        name = \"Workcoin\";\r\n        symbol = \"WRR\";\r\n        decimals = 18;\r\n        version = \"1.3\";\r\n        issue(this, 1e7 * 1e18);\r\n    }\r\n\r\n    function() public payable {}\r\n}\r\n\r\ncontract Helper {\r\n\r\n    function toString(address x) internal pure\r\n        returns (string)\r\n    {\r\n        bytes memory b = new bytes(20);\r\n        for (uint i = 0; i < 20; i++)\r\n            b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));\r\n        return string(b);\r\n    }\r\n}\r\n\r\ncontract WorkcoinCrowdsale is Ownable, SafeMath, Helper {\r\n\r\n    // triggered on token sell\r\n    event Invested(\r\n        address indexed investorEthAddr,\r\n        string  indexed currency,\r\n        uint256 indexed investedAmount,\r\n        string  txHash,\r\n        uint256 toknesSent\r\n    );\r\n    // triggered when crowdsale period is over\r\n    event CrowdSaleFinished();\r\n\r\n    Workcoin public tokenAddress;\r\n\r\n    uint256 public constant decimals = 18;\r\n    uint256 DEC = 10 ** uint256(decimals);\r\n    uint256 public receivedETH;\r\n    uint256 public price;\r\n\r\n    mapping (uint256 => Investment) public payments;\r\n\r\n    /**\r\n        @dev contract constructor\r\n    */\r\n    function WorkcoinCrowdsale(address _deployed) public {\r\n        tokenAddress = Workcoin(_deployed);\r\n        setPrice(10000);\r\n    }\r\n\r\n    function setPrice(uint256 _value) public\r\n       onlyOwner\r\n       returns (bool)\r\n    {\r\n        price = _value;\r\n        return true;\r\n    }\r\n\r\n    struct Crowdsale {\r\n        uint256 tokens;    // Tokens in crowdsale\r\n        uint    startDate; // Date when crowsale will be starting, after its starting that property will be the 0\r\n        uint    endDate;   // Date when crowdsale will be stop\r\n        uint8   bonus;     // Bonus\r\n    }\r\n\r\n    Crowdsale public Crowd;\r\n\r\n    /*\r\n        @dev start crowdsale (any)\r\n        @param _tokens - How much tokens will have the crowdsale - amount humanlike value (10000)\r\n        @param _startDate - When crowdsale will be start - unix timestamp (1512231703)\r\n        @param _endDate - When crowdsale will be end - humanlike value (7) same as 7 days\r\n        @param _bonus - Bonus for the crowd - humanlive value (7) same as 7 %\r\n    */\r\n    function startCrowdsale(\r\n        uint256 _tokens,\r\n        uint    _startDate,\r\n        uint    _endDate,\r\n        uint8   _bonus\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        Crowd = Crowdsale (\r\n            _tokens * DEC,\r\n            _startDate,\r\n            _startDate + _endDate * 1 days ,\r\n            _bonus\r\n            );\r\n        saleStat = true;\r\n    }\r\n\r\n    /*\r\n        @dev update crowdsale if smth incorrect\r\n    */\r\n    function updateCrowd(\r\n        uint256 tokens,\r\n        uint    startDate,\r\n        uint    endDate,\r\n        uint8   bonus\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        Crowd = Crowdsale(\r\n            tokens,\r\n            startDate,\r\n            endDate,\r\n            bonus\r\n            );\r\n    }\r\n\r\n    /*\r\n        @dev safe sales contoller\r\n    */\r\n    function confirmSell(uint256 _amount) internal view\r\n        returns (bool)\r\n    {\r\n        if (Crowd.tokens < _amount) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev count summ with bonus\r\n    */\r\n    function countBonus(uint256 amount) internal view\r\n        returns (uint256)\r\n    {\r\n        uint256 _amount = div(mul(amount, DEC), price);\r\n        return _amount = add(_amount, withBonus(_amount, Crowd.bonus));\r\n    }\r\n\r\n    /**\r\n        @dev sales manager\r\n    */\r\n    function paymentController(address sender, uint256 value) internal\r\n        returns (uint256)\r\n    {\r\n        uint256 bonusValue = countBonus(value);\r\n        bool conf = confirmSell(bonusValue);\r\n        uint256 result;\r\n        if (conf) {\r\n            result = bonusValue;\r\n            sell(sender, bonusValue);\r\n            if (now >= Crowd.endDate) {\r\n                saleStat = false;\r\n                emit CrowdSaleFinished(); // if time is up\r\n            }\r\n        }\r\n        else {\r\n            result = Crowd.tokens;\r\n            sell(sender, Crowd.tokens); // sell tokens which has been accessible\r\n            saleStat = false;\r\n            emit CrowdSaleFinished();  // if tokens sold\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n        @dev sell function implements\r\n    */\r\n    function sell(address _investor, uint256 _amount) internal\r\n    {\r\n        Crowd.tokens = sub(Crowd.tokens, _amount);\r\n        tokenAddress.transfer(_investor, _amount);\r\n        //if(!ethOwner.send(msg.value)) revert();\r\n    }\r\n\r\n    /**\r\n        @dev adding bonus\r\n    */\r\n    function withBonus(uint256 _amount, uint _percent) internal pure\r\n        returns (uint256)\r\n    {\r\n        return div(mul(_amount, _percent), 100);\r\n    }\r\n\r\n    // safe storage for all txs\r\n    uint256 public paymentId;\r\n\r\n    function setId() internal {\r\n        paymentId++;\r\n    }\r\n\r\n    function getId() public view\r\n        returns (uint256)\r\n    {\r\n        return paymentId;\r\n    }\r\n\r\n    struct Investment {\r\n        string  currency;\r\n        address investorEthAddr;\r\n        string  txHash;\r\n        uint256 investedAmount;\r\n        uint256 tokensSent;\r\n        uint256 priceInUsd;\r\n    }\r\n\r\n    function paymentManager(\r\n        string  currency,\r\n        address investorEthAddr,\r\n        string  txHash,\r\n        uint256 investedAmount,\r\n        uint256 tokensForSent\r\n    )\r\n        internal\r\n    {\r\n        require(bytes(currency).length != 0 &&\r\n                investorEthAddr != 0x0 &&\r\n                bytes(txHash).length != 0 &&\r\n                investedAmount != 0 &&\r\n                investorEthAddr != 0);\r\n        setId();\r\n        uint256 id = getId();\r\n        uint256 tokensWithBonus = paymentController(investorEthAddr, tokensForSent);\r\n        payments[id].currency = currency;\r\n        payments[id].investorEthAddr = investorEthAddr;\r\n        payments[id].txHash = txHash;\r\n        payments[id].investedAmount = investedAmount;\r\n        payments[id].tokensSent = tokensWithBonus;\r\n        emit Invested(investorEthAddr, currency, investedAmount, txHash, tokensWithBonus);\r\n    }\r\n\r\n    function addPayment(\r\n        string  currency,\r\n        address investorEthAddr,\r\n        string  txHash,\r\n        uint256 investedAmount,\r\n        uint256 tokensForSent\r\n    )\r\n        public onlyOwner\r\n    {\r\n        paymentManager(currency, investorEthAddr, txHash, investedAmount, tokensForSent);\r\n    }\r\n\r\n    bool internal saleStat = false;\r\n\r\n    function switchSale() public onlyOwner\r\n        returns(bool)\r\n    {\r\n        if(saleStat == true) {\r\n            saleStat = false;\r\n        } else {\r\n            saleStat = true;\r\n        }\r\n        return saleStat;\r\n    }\r\n\r\n    function saleIsOn() view public\r\n        returns(bool)\r\n    {\r\n        return saleStat;\r\n    }\r\n\r\n    /**\r\n     @dev Function payments handler\r\n    */\r\n    function() public payable\r\n    {\r\n        assert(msg.value >= 1 ether / 10);\r\n        require(Crowd.startDate <= now);\r\n\r\n        if (saleIsOn() == true) {\r\n            address(tokenAddress).transfer(msg.value); // transfer to the general contract\r\n            paymentManager(\"eth\", msg.sender, toString(tx.origin), msg.value, msg.value);\r\n            receivedETH = add(receivedETH, msg.value);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"startDate\",\"type\":\"uint256\"},{\"name\":\"endDate\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint8\"}],\"name\":\"updateCrowd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleIsOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Crowd\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"startDate\",\"type\":\"uint256\"},{\"name\":\"endDate\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receivedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"},{\"name\":\"_bonus\",\"type\":\"uint8\"}],\"name\":\"startCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"investorEthAddr\",\"type\":\"address\"},{\"name\":\"txHash\",\"type\":\"string\"},{\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"name\":\"tokensSent\",\"type\":\"uint256\"},{\"name\":\"priceInUsd\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"investorEthAddr\",\"type\":\"address\"},{\"name\":\"txHash\",\"type\":\"string\"},{\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"name\":\"tokensForSent\",\"type\":\"uint256\"}],\"name\":\"addPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_deployed\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investorEthAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"toknesSent\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdSaleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"potential\",\"type\":\"address\"}],\"name\":\"NewPotentialOwner\",\"type\":\"event\"}]","ContractName":"WorkcoinCrowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000080d45264dd23f4a690be5a0f1af310bfa6091c0f","Library":"","SwarmSource":"bzzr://60400d4d5fa3c37b785b44a434be898b4410f4b8714db1e470100c9e5236f555"}]}