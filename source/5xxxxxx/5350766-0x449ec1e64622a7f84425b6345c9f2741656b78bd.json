{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    modifier onlyOwner() { require(msg.sender == owner); _; }\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(owner, newOwner);\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    bool public paused = false;\r\n    event Pause();\r\n    event Unpause();\r\n    modifier whenNotPaused() { require(!paused); _; }\r\n    modifier whenPaused() { require(paused); _; }\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function balanceOf(address who) public view returns(uint256);\r\n    function transfer(address to, uint256 value) public returns(bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns(bool);\r\n    function allowance(address owner, address spender) public view returns(uint256);\r\n    function approve(address spender, uint256 value) public returns(bool);\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    function StandardToken(string _name, string _symbol, uint8 _decimals) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n}\r\n\r\nfunction balanceOf(address _owner) public view returns(uint256 balance) {\r\n        return balances[_owner];\r\n}\r\n\r\nfunction transfer(address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n}\r\nfunction multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\r\n        require(_to.length == _value.length);\r\n        for(uint i = 0; i < _to.length; i++) {\r\n            transfer(_to[i], _value[i]);\r\n        }\r\n        return true;\r\n}\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if(_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    bool public mintingFinished = false;\r\n    modifier canMint(){require(!mintingFinished); _;}\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n    function finishMinting() onlyOwner canMint public returns(bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract CappedToken is MintableToken {\r\n    uint256 public cap;\r\n\r\n    function CappedToken(uint256 _cap) public {\r\n        require(_cap > 0);\r\n        cap = _cap;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\r\n        require(totalSupply.add(_amount) <= cap);\r\n\r\n        return super.mint(_to, _amount);\r\n    }\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n}\r\n\r\ncontract RewardToken is StandardToken, Ownable {\r\n    struct Payment {\r\n        uint time;\r\n        uint amount;\r\n    }\r\n\r\n    Payment[] public repayments;\r\n    mapping(address => Payment[]) public rewards;\r\n\r\n    event Reward(address indexed to, uint256 amount);\r\n\r\n    function repayment() onlyOwner payable public {\r\n        require(msg.value >= 0.01 * 1 ether);\r\n\r\n        repayments.push(Payment({time : now, amount : msg.value}));\r\n    }\r\n\r\n    function _reward(address _to) private returns(bool) {\r\n        if(rewards[_to].length < repayments.length) {\r\n            uint sum = 0;\r\n            for(uint i = rewards[_to].length; i < repayments.length; i++) {\r\n                uint amount = balances[_to] > 0 ? (repayments[i].amount * balances[_to] / totalSupply) : 0;\r\n                rewards[_to].push(Payment({time : now, amount : amount}));\r\n                sum += amount;\r\n            }\r\n            if(sum > 0) {\r\n                _to.transfer(sum);\r\n                emit Reward(_to, sum);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function reward() public returns(bool) {\r\n        return _reward(msg.sender);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        _reward(msg.sender);\r\n        _reward(_to);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\r\n        _reward(msg.sender);\r\n        for(uint i = 0; i < _to.length; i++) {\r\n            _reward(_to[i]);\r\n        }\r\n\r\n        return super.multiTransfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        _reward(_from);\r\n        _reward(_to);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\ncontract Token is CappedToken, BurnableToken, RewardToken {\r\n    function Token() CappedToken(10000 * 1 ether) StandardToken(\"CRYPTtesttt\", \"CRYPTtesttt\", 18) public {\r\n        \r\n    }\r\n}\r\ncontract Crowdsale is Pausable {\r\n    using SafeMath for uint;\r\n\r\n    Token public token;\r\n    address public beneficiary = 0x8320449742D5094A410B75171c72328afDBBb70b; // Кошелек компании\r\n    address public bountyP = 0x1b640aD9909eAc9efc9D686909EE2D28702836BE;     // Кошелёк для Бонусов\r\n\t\r\n    uint public collectedWei; // Собранные Веи\r\n    uint public refundedWei; \r\n    uint private tokensSold; // Проданное количество Токенов\r\n\tuint private tokensForSale = 4500 * 1 ether; // Токены на продажу\r\n    uint public SoldToken = tokensSold / 1 ether;\r\n    uint public SaleToken = tokensForSale / 1 ether;\r\n\t\r\n    //uint public priceTokenWei = 7142857142857142; \r\n    uint private priceTokenWei = 12690355329949;  // 1 токен равен 0,01$ (1eth = 788$)\r\n    string public TokenPriceETH = \"0.000013\";  // Стоимость токена \r\n    //uint public bonusPercent = 0; // Бонусная часть\r\n    uint private Sb = 1 ether; // Цифры после запятой 18\r\n    uint private oSb = Sb * 5000; // Токены для Владельца \r\n    uint private BountyCRYPT = Sb * 500; // Токены для Баунти-компании  \r\n    uint private PRTC = Sb * 1000; // PreICO количество токенов для продажи \r\n    \r\n\tstring public IcoStatus = \"PreIco\";\r\n\r\n    bool public crowdsaleClosed = false;\r\n    bool public crowdsaleRefund = false;\r\n\t\r\n    mapping(address => uint256) public purchaseBalances; \r\n    event Rurchase(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\r\n    event Refund(address indexed holder, uint256 etherAmount); // Возврат Средств\r\n    event CrowdsaleClose();\r\n    event CrowdsaleRefund();\r\n\t\r\n\t\r\n\t\r\n    function Crowdsale() public {\r\n     token = new Token();\r\n\t \r\n\t/*Отправляем владельцу  и на Баунти кошелйк*/\r\n\t emit Rurchase(beneficiary, oSb, 0);\r\n\t token.mint(beneficiary, oSb);\r\n     emit Rurchase(bountyP, BountyCRYPT, 0); // Баунти\r\n\t token.mint(bountyP, BountyCRYPT); \r\n    }\r\n    function() payable public {\r\n     purchase();\r\n    }\r\n    function setTokenRate(uint _value, string _newpriceeth) onlyOwner whenPaused public {\r\n        require(!crowdsaleClosed);\r\n        priceTokenWei =  _value;\r\n        TokenPriceETH = _newpriceeth;\r\n        \r\n    }\r\n\tfunction purchase() whenNotPaused payable public {\r\n        require(!crowdsaleClosed);\r\n        require(tokensSold < tokensForSale);\r\n        require(msg.value >= 0.000013 ether);    // Минимальное количество Эфиров для покупки \r\n        uint sum = msg.value;         // Сумма на которую хочет купить Токены\r\n        uint amount = sum.mul(1 ether).div(priceTokenWei);\r\n        uint retSum = 0;\r\n    if(tokensSold.add(amount) > tokensForSale) {\r\n            uint retAmount = tokensSold.add(amount).sub(tokensForSale);\r\n            retSum = retAmount.mul(priceTokenWei).div(1 ether);\r\n            amount = amount.sub(retAmount);\r\n            sum = sum.sub(retSum);\r\n        }\r\n        tokensSold = tokensSold.add(amount);\r\n        collectedWei = collectedWei.add(sum);\r\n        purchaseBalances[msg.sender] = purchaseBalances[msg.sender].add(sum);\r\n        token.mint(msg.sender, amount);\r\n        if(retSum > 0) {\r\n            msg.sender.transfer(retSum);\r\n        }\r\n\t\t/*Меняем статус ICO*/\r\n\t\tif(tokensSold > PRTC){\r\n\t\t\tif(tokensForSale == tokensSold){\r\n\t\t\t\tIcoStatus = \"The End :D\";\r\n\t\t\t}else{\r\n\t\t\t\tIcoStatus = \"ICO\";\r\n\t\t\t}\r\n\t\t}\r\n        emit Rurchase(msg.sender, amount, sum);\r\n    }\r\n    function refund() public {\r\n        require(crowdsaleRefund);\r\n        require(purchaseBalances[msg.sender] > 0);\r\n        uint sum = purchaseBalances[msg.sender]; // Cсумма отправителя\r\n        purchaseBalances[msg.sender] = 0;\r\n        refundedWei = refundedWei.add(sum);\r\n        msg.sender.transfer(sum);   \r\n        emit Refund(msg.sender, sum);\r\n    }\r\n    function closeCrowdsale() onlyOwner public {\r\n        require(!crowdsaleClosed);\r\n        beneficiary.transfer(address(this).balance);\r\n        token.mint(beneficiary, token.cap().sub(token.totalSupply()));\r\n        token.transferOwnership(beneficiary);\r\n        crowdsaleClosed = true;\r\n        emit CrowdsaleClose();\r\n    }\r\n    function refundCrowdsale() onlyOwner public {\r\n        require(!crowdsaleClosed);\r\n        crowdsaleRefund = true;\r\n        crowdsaleClosed = true;\r\n        emit CrowdsaleRefund();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"repayment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"repayments\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bf4fefd65bbcfb26f9588213458d48057f87d7dd8f64f960f57c5e7cddd7b5a5"}]}