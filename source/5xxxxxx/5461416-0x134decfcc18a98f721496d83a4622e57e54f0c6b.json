{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * \r\n * \r\n *   __________                                                          \r\n *   \\______   \\ ____   ____   _____   ________________    ____    ____  \r\n *    |    |  _//  _ \\ /  _ \\ /     \\_/ __ \\_  __ \\__  \\  /    \\  / ___\\ \r\n *    |    |   (  <_> |  <_> )  Y Y  \\  ___/|  | \\// __ \\|   |  \\/ /_/  >\r\n *    |______  /\\____/ \\____/|__|_|  /\\___  >__|  (____  /___|  /\\___  / \r\n *           \\/                    \\/     \\/           \\/     \\//_____/  \r\n *          .____    .__             .__    .___.__  __                  \r\n *          |    |   |__| ________ __|__| __| _/|__|/  |_ ___.__.        \r\n *          |    |   |  |/ ____/  |  \\  |/ __ | |  \\   __<   |  |        \r\n *          |    |___|  < <_|  |  |  /  / /_/ | |  ||  |  \\___  |        \r\n *          |_______ \\__|\\__   |____/|__\\____ | |__||__|  / ____|        \r\n *                  \\/      |__|             \\/           \\/             \r\n *    _____          __               .__    ___________                .___\r\n *   /     \\  __ ___/  |_ __ _______  |  |   \\_   _____/_ __  ____    __| _/\r\n *  /  \\ /  \\|  |  \\   __\\  |  \\__  \\ |  |    |    __)|  |  \\/    \\  / __ | \r\n * /    Y    \\  |  /|  | |  |  // __ \\|  |__  |     \\ |  |  /   |  \\/ /_/ | \r\n * \\____|__  /____/ |__| |____/(____  /____/  \\___  / |____/|___|  /\\____ | \r\n *         \\/                       \\/            \\/             \\/      \\/ \r\n *     ___________            __               .__                          \r\n *     \\_   _____/___ _____ _/  |_ __ _________|__| ____    ____            \r\n *      |    __)/ __ \\\\__  \\\\   __\\  |  \\_  __ \\  |/    \\  / ___\\           \r\n *      |     \\\\  ___/ / __ \\|  | |  |  /|  | \\/  |   |  \\/ /_/  >          \r\n *      \\___  / \\___  >____  /__| |____/ |__|  |__|___|  /\\___  /           \r\n *          \\/      \\/     \\/                          \\//_____/           \r\n *                   _          _           _            _                      \r\n *                  /\\ \\       /\\ \\        /\\ \\         /\\ \\     _              \r\n *                  \\ \\ \\     /  \\ \\      /  \\ \\       /  \\ \\   /\\_\\            \r\n *                  /\\ \\_\\   / /\\ \\ \\    / /\\ \\ \\     / /\\ \\ \\_/ / /            \r\n *                 / /\\/_/  / / /\\ \\_\\  / / /\\ \\ \\   / / /\\ \\___/ /             \r\n *                / / /    / / /_/ / / / / /  \\ \\_\\ / / /  \\/____/              \r\n *               / / /    / / /__\\/ / / / /   / / // / /    / / /               \r\n *              / / /    / / /_____/ / / /   / / // / /    / / /                \r\n *          ___/ / /__  / / /\\ \\ \\  / / /___/ / // / /    / / /                 \r\n *         /\\__\\/_/___\\/ / /  \\ \\ \\/ / /____\\/ // / /    / / /                  \r\n *         \\/_________/\\/_/    \\_\\/\\/_________/ \\/_/     \\/_/                   \r\n *          _       _    _                   _             _            _        \r\n *         / /\\    / /\\ / /\\                /\\ \\     _    /\\ \\         / /\\      \r\n *        / / /   / / // /  \\              /  \\ \\   /\\_\\ /  \\ \\____   / /  \\     \r\n *       / /_/   / / // / /\\ \\            / /\\ \\ \\_/ / // /\\ \\_____\\ / / /\\ \\__  \r\n *      / /\\ \\__/ / // / /\\ \\ \\          / / /\\ \\___/ // / /\\/___  // / /\\ \\___\\ \r\n *     / /\\ \\___\\/ // / /  \\ \\ \\        / / /  \\/____// / /   / / / \\ \\ \\ \\/___/ \r\n *    / / /\\/___/ // / /___/ /\\ \\      / / /    / / // / /   / / /   \\ \\ \\       \r\n *   / / /   / / // / /_____/ /\\ \\    / / /    / / // / /   / / /_    \\ \\ \\      \r\n *  / / /   / / // /_________/\\ \\ \\  / / /    / / / \\ \\ \\__/ / //_/\\__/ / /      \r\n * / / /   / / // / /_       __\\ \\_\\/ / /    / / /   \\ \\___\\/ / \\ \\/___/ /       \r\n * \\/_/    \\/_/ \\_\\___\\     /____/_/\\/_/     \\/_/     \\/_____/   \\_____\\/        \r\n *                                                                                        \r\n *                          .___ __________________ ________                \r\n *       _____    ____    __| _/ \\______   \\_____  \\\\______ \\               \r\n *       \\__  \\  /    \\  / __ |   |     ___/ _(__  < |    |  \\              \r\n *        / __ \\|   |  \\/ /_/ |   |    |    /       \\|    `   \\             \r\n *       (____  /___|  /\\____ |   |____|   /______  /_______  /             \r\n *            \\/     \\/      \\/                   \\/        \\/                    \r\n *\r\n * ATTENTION!\r\n * \r\n * This code? IS NOT DESIGNED FOR ACTUAL USE.\r\n * \r\n * The author of this code really wishes you wouldn't send your ETH to it.\r\n * \r\n * No, seriously. It's probablly illegal anyway. So don't do it.\r\n * \r\n * Let me repeat that: Don't actually send money to this contract. You are \r\n * likely breaking several local and national laws in doing so.\r\n * \r\n * This code is intended to educate. Nothing else. If you use it, expect S.W.A.T \r\n * teams at your door. I wrote this code because I wanted to experiment\r\n * with smart contracts, and I think code should be open source. So consider\r\n * it public domain, No Rights Reserved. Participating in pyramid schemes\r\n * is genuinely illegal so just don't even think about going beyond\r\n * reading the code and understanding how it works.\r\n * \r\n * Seriously. I'm not kidding. It's probablly broken in some critical way anyway\r\n * and will suck all your money out your wallet, install a virus on your computer\r\n * sleep with your wife, kidnap your children and sell them into slavery,\r\n * make you forget to file your taxes, and give you cancer.\r\n * \r\n * So.... tl;dr: This contract sucks, don't send money to it.\r\n * \r\n * What it does:\r\n * \r\n * It takes 50% of the ETH in it and buys tokens.\r\n * It takes 50% of the ETH in it and pays back depositors.\r\n * Depositors get in line and are paid out in order of deposit, plus the deposit\r\n * percent.\r\n * The tokens collect dividends, which in turn pay into the payout pool\r\n * to be split 50/50.\r\n * \r\n * If your seeing this contract in it's initial configuration, it should be\r\n * set to 200% (double deposits), and pointed at PoWH:\r\n * 0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe\r\n * \r\n * But you should verify this for yourself.\r\n *  \r\n *  \r\n */\r\n\r\ncontract ERC20Interface {\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n}\r\n\r\ncontract POWH {\r\n    \r\n    function buy(address) public payable returns(uint256);\r\n    function withdraw() public;\r\n    function myTokens() public view returns(uint256);\r\n    function myDividends(bool) public view returns(uint256);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public ownerCandidate;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        ownerCandidate = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == ownerCandidate);  \r\n        owner = ownerCandidate;\r\n    }\r\n    \r\n}\r\n\r\ncontract IronHands is Owned {\r\n    \r\n    /**\r\n     * Modifiers\r\n     */\r\n     \r\n    /**\r\n     * Only owners are allowed.\r\n     */\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * The tokens can never be stolen.\r\n     */\r\n    modifier notPowh(address aContract){\r\n        require(aContract != address(weak_hands));\r\n        _;\r\n    }\r\n   \r\n    /**\r\n     * Events\r\n     */\r\n    event Deposit(uint256 amount, address depositer);\r\n    event Purchase(uint256 amountSpent, uint256 tokensReceived);\r\n    event Payout(uint256 amount, address creditor);\r\n    event Dividends(uint256 amount);\r\n    event Donation(uint256 amount, address donator);\r\n    event ContinuityBreak(uint256 position, address skipped, uint256 amount);\r\n    event ContinuityAppeal(uint256 oldPosition, uint256 newPosition, address appealer);\r\n\r\n    /**\r\n     * Structs\r\n     */\r\n    struct Participant {\r\n        address etherAddress;\r\n        uint256 payout;\r\n    }\r\n\r\n    //Total ETH managed over the lifetime of the contract\r\n    uint256 throughput;\r\n    //Total ETH received from dividends\r\n    uint256 dividends;\r\n    //The percent to return to depositers. 100 for 00%, 200 to double, etc.\r\n    uint256 public multiplier;\r\n    //Where in the line we are with creditors\r\n    uint256 public payoutOrder = 0;\r\n    //How much is owed to people\r\n    uint256 public backlog = 0;\r\n    //The creditor line\r\n    Participant[] public participants;\r\n    //The people who have been skipped\r\n    mapping(address => uint256[]) public appeals;\r\n    //Their position in line to skip\r\n    mapping(address => uint256) public appealPosition;\r\n    //How much each person is owed\r\n    mapping(address => uint256) public creditRemaining;\r\n    //What we will be buying\r\n    POWH weak_hands;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    function IronHands(uint multiplierPercent, address powh) public {\r\n        multiplier = multiplierPercent;\r\n        weak_hands = POWH(powh);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Fallback function allows anyone to send money for the cost of gas which\r\n     * goes into the pool. Used by withdraw/dividend payouts so it has to be cheap.\r\n     */\r\n    function() payable public {\r\n    }\r\n    \r\n    /**\r\n     * Deposit ETH to get in line to be credited back the multiplier as a percent,\r\n     * add that ETH to the pool, get the dividends and put them in the pool,\r\n     * then pay out who we owe and buy more tokens.\r\n     */ \r\n    function deposit() payable public {\r\n        //You have to send more than 10 wei.\r\n        require(msg.value > 10);\r\n        //Compute how much to pay them\r\n        uint256 amountCredited = (msg.value * multiplier) / 100;\r\n        //Get in line to be paid back.\r\n        participants.push(Participant(msg.sender, amountCredited));\r\n        //Increase the backlog by the amount owed\r\n        backlog += amountCredited;\r\n        //Increase the amount owed to this address\r\n        creditRemaining[msg.sender] += amountCredited;\r\n        //Emit a deposit event.\r\n        emit Deposit(msg.value, msg.sender);\r\n        //If I have dividends\r\n        if(myDividends() > 0){\r\n            //Withdraw dividends\r\n            withdraw();\r\n        }\r\n        //Pay people out and buy more tokens.\r\n        payout();\r\n    }\r\n    \r\n    /**\r\n     * Take 50% of the money and spend it on tokens, which will pay dividends later.\r\n     * Take the other 50%, and use it to pay off depositors.\r\n     */\r\n    function payout() public {\r\n        //Take everything in the pool\r\n        uint balance = address(this).balance;\r\n        //It needs to be something worth splitting up\r\n        require(balance > 1);\r\n        //Increase our total throughput\r\n        throughput += balance;\r\n        //Split it into two parts\r\n        uint investment = balance / 2;\r\n        //Take away the amount we are investing from the amount to send\r\n        balance -= investment;\r\n        //Invest it in more tokens.\r\n        uint256 tokens = weak_hands.buy.value(investment).gas(1000000)(msg.sender);\r\n        //Record that tokens were purchased\r\n        emit Purchase(investment, tokens);\r\n        //While we still have money to send\r\n        while (balance > 0) {\r\n            //Either pay them what they are owed or however much we have, whichever is lower.\r\n            uint payoutToSend = balance < participants[payoutOrder].payout ? balance : participants[payoutOrder].payout;\r\n            //if we have something to pay them\r\n            if(payoutToSend > 0){\r\n                //credit their account the amount they are being paid\r\n                participants[payoutOrder].payout -= payoutToSend;\r\n                //subtract how much we've spent\r\n                balance -= payoutToSend;\r\n                //subtract the amount paid from the amount owed\r\n                backlog -= payoutToSend;\r\n                //subtract the amount remaining they are owed\r\n                creditRemaining[participants[payoutOrder].etherAddress] -= payoutToSend;\r\n                //Try and pay them\r\n                participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)();\r\n                //Record that they were paid\r\n                emit Payout(payoutToSend, participants[payoutOrder].etherAddress);\r\n            }\r\n            //If we still have balance left over\r\n            if(balance > 0){\r\n                // go to the next person in line\r\n                payoutOrder += 1;\r\n            }\r\n            //If we've run out of people to pay, stop\r\n            if(payoutOrder >= participants.length){\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Number of tokens the contract owns.\r\n     */\r\n    function myTokens() public view returns(uint256){\r\n        return weak_hands.myTokens();\r\n    }\r\n    \r\n    /**\r\n     * Number of dividends owed to the contract.\r\n     */\r\n    function myDividends() public view returns(uint256){\r\n        return weak_hands.myDividends(true);\r\n    }\r\n    \r\n    /**\r\n     * Number of dividends received by the contract.\r\n     */\r\n    function totalDividends() public view returns(uint256){\r\n        return dividends;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Request dividends be paid out and added to the pool.\r\n     */\r\n    function withdraw() public {\r\n        uint256 balance = address(this).balance;\r\n        weak_hands.withdraw.gas(1000000)();\r\n        uint256 dividendsPaid = address(this).balance - balance;\r\n        dividends += dividendsPaid;\r\n        emit Dividends(dividendsPaid);\r\n    }\r\n    \r\n    /**\r\n     * A charitible contribution will be added to the pool.\r\n     */\r\n    function donate() payable public {\r\n        emit Donation(msg.value, msg.sender);\r\n    }\r\n    \r\n    /**\r\n     * Number of participants who are still owed.\r\n     */\r\n    function backlogLength() public view returns (uint256){\r\n        return participants.length - payoutOrder;\r\n    }\r\n    \r\n    /**\r\n     * Total amount still owed in credit to depositors.\r\n     */\r\n    function backlogAmount() public view returns (uint256){\r\n        return backlog;\r\n    } \r\n    \r\n    /**\r\n     * Total number of deposits in the lifetime of the contract.\r\n     */\r\n    function totalParticipants() public view returns (uint256){\r\n        return participants.length;\r\n    }\r\n    \r\n    /**\r\n     * Total amount of ETH that the contract has delt with so far.\r\n     */\r\n    function totalSpent() public view returns (uint256){\r\n        return throughput;\r\n    }\r\n    \r\n    /**\r\n     * Amount still owed to an individual address\r\n     */\r\n    function amountOwed(address anAddress) public view returns (uint256) {\r\n        return creditRemaining[anAddress];\r\n    }\r\n     \r\n     /**\r\n      * Amount owed to this person.\r\n      */\r\n    function amountIAmOwed() public view returns (uint256){\r\n        return amountOwed(msg.sender);\r\n    }\r\n    \r\n    /**\r\n     * A trap door for when someone sends tokens other than the intended ones so the overseers can decide where to send them.\r\n     */\r\n    function transferAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens) public onlyOwner notPowh(tokenAddress) returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\r\n    }\r\n    \r\n    /**\r\n     * This function is potentially dangerous and should never be used except in extreme cases.\r\n     * It's concievable that a malicious user could construct a contact with a payable function which expends\r\n     * all the gas in transfering ETH to it. Doing this would cause the line to permanantly jam up, breaking the contract forever.\r\n     * Calling this function will cause that address to be skipped over, allowing the contract to continue.\r\n     * The address who was skipped is allowed to call appeal to undo the damage and replace themselves in line in\r\n     * the event of a malicious operator.\r\n     */\r\n    function skip() public onlyOwner {\r\n        Participant memory skipped = participants[payoutOrder];\r\n        emit ContinuityBreak(payoutOrder, skipped.etherAddress, skipped.payout);\r\n        if(appeals[skipped.etherAddress].length == appealPosition[skipped.etherAddress]){\r\n            appeals[skipped.etherAddress].push(payoutOrder);\r\n        }else{\r\n            appeals[skipped.etherAddress][appealPosition[skipped.etherAddress]] = payoutOrder;\r\n        }\r\n        appealPosition[skipped.etherAddress] += 1;\r\n        payoutOrder += 1;\r\n    }\r\n\r\n    /**\r\n     * It's concievable that a malicious user could construct a contact with a payable function which expends\r\n     * all the gas in transfering ETH to it. Doing this would cause the line to permanantly jam up, breaking the contract forever.\r\n     * Calling this function will cause the line to be backed up to the skipped person's position.\r\n     * It can only be done by the person who was skipped.\r\n     */\r\n    function appealSkip() public {\r\n        require(appealPosition[msg.sender] > 0);\r\n        appealPosition[msg.sender] -= 1;\r\n        uint appeal = appeals[msg.sender][appealPosition[msg.sender]];\r\n        require(payoutOrder > appeal);\r\n        emit ContinuityAppeal(payoutOrder, appeal, msg.sender);\r\n        payoutOrder = appeal;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"amountIAmOwed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"skip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"name\":\"etherAddress\",\"type\":\"address\"},{\"name\":\"payout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backlog\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"appeals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backlogAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"appealSkip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"appealPosition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backlogLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"anAddress\",\"type\":\"address\"}],\"name\":\"amountOwed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSpent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"creditRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"multiplierPercent\",\"type\":\"uint256\"},{\"name\":\"powh\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"depositer\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creditor\",\"type\":\"address\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Dividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"donator\",\"type\":\"address\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"skipped\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ContinuityBreak\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldPosition\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPosition\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"appealer\",\"type\":\"address\"}],\"name\":\"ContinuityAppeal\",\"type\":\"event\"}]","ContractName":"IronHands","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000b3775fb83f7d12a36e0475abdd1fca35c091efbe","Library":"","SwarmSource":"bzzr://e17d95212b8644263709491bb66a1fb8045669c2812b27c64eef9680d97cf010"}]}