{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/// @title Ownable contract\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  \r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n  \r\n}\r\n\r\n/// @title Mortal contract - used to selfdestruct once we have no use of this contract\r\ncontract Mortal is Ownable {\r\n    function executeSelfdestruct() onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n/// @title CCWhitelist contract\r\ncontract CCWhitelist is Mortal {\r\n    \r\n    mapping (address => bool) public whitelisted;\r\n\r\n    /// @dev Whitelist a single address\r\n    /// @param addr Address to be whitelisted\r\n    function whitelist(address addr) public onlyOwner {\r\n        require(!whitelisted[addr]);\r\n        whitelisted[addr] = true;\r\n    }\r\n\r\n    /// @dev Remove an address from whitelist\r\n    /// @param addr Address to be removed from whitelist\r\n    function unwhitelist(address addr) public onlyOwner {\r\n        require(whitelisted[addr]);\r\n        whitelisted[addr] = false;\r\n    }\r\n\r\n    /// @dev Whitelist array of addresses\r\n    /// @param arr Array of addresses to be whitelisted\r\n    function bulkWhitelist(address[] arr) public onlyOwner {\r\n        for (uint i = 0; i < arr.length; i++) {\r\n            whitelisted[arr[i]] = true;\r\n        }\r\n    }\r\n\r\n    /// @dev Check if address is whitelisted\r\n    /// @param addr Address to be checked if it is whitelisted\r\n    /// @return Is address whitelisted?\r\n    function isWhitelisted(address addr) public constant returns (bool) {\r\n        return whitelisted[addr];\r\n    }   \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeSelfdestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unwhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"arr\",\"type\":\"address[]\"}],\"name\":\"bulkWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CCWhitelist","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://22992c1ca6324f8407c9d4122439ad42d6bd1f5e9b0d2e38e8bb2dd8ea8c7fe7"}]}