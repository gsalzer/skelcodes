{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/NextSaleAgentFeature.sol\r\n\r\ncontract NextSaleAgentFeature is Ownable {\r\n\r\n  address public nextSaleAgent;\r\n\r\n  function setNextSaleAgent(address newNextSaleAgent) public onlyOwner {\r\n    nextSaleAgent = newNextSaleAgent;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/DevWallet.sol\r\n\r\ncontract DevWallet {\r\n\r\n  uint public date = 1525255200;\r\n  uint public limit = 4500000000000000000;\r\n  address public wallet = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770;\r\n\r\n  function withdraw() public {\r\n    require(now >= date);\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function () public payable {}\r\n\r\n}\r\n\r\n// File: contracts/PercentRateProvider.sol\r\n\r\ncontract PercentRateProvider is Ownable {\r\n\r\n  uint public percentRate = 100;\r\n\r\n  function setPercentRate(uint newPercentRate) public onlyOwner {\r\n    percentRate = newPercentRate;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/MintableToken.sol\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  address public saleAgent;\r\n\r\n  function setSaleAgent(address newSaleAgnet) public {\r\n    require(msg.sender == saleAgent || msg.sender == owner);\r\n    saleAgent = newSaleAgnet;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) public returns (bool) {\r\n    require(msg.sender == saleAgent && !mintingFinished);\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public returns (bool) {\r\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/REPUToken.sol\r\n\r\ncontract REPUToken is MintableToken {\r\n\r\n  string public constant name = 'REPU';\r\n\r\n  string public constant symbol = 'REPU';\r\n\r\n  uint32 public constant decimals = 18;\r\n\r\n}\r\n\r\n// File: contracts/CommonSale.sol\r\n\r\ncontract CommonSale is PercentRateProvider {\r\n\r\n  using SafeMath for uint;\r\n\r\n  address public wallet;\r\n\r\n  address public directMintAgent;\r\n\r\n  uint public price;\r\n\r\n  uint public start;\r\n\r\n  uint public minInvestedLimit;\r\n\r\n  REPUToken public token;\r\n\r\n  DevWallet public devWallet;\r\n\r\n  bool public devWalletLocked;\r\n\r\n  uint public hardcap;\r\n\r\n  uint public invested;\r\n\r\n  modifier isUnderHardcap() {\r\n    require(invested < hardcap);\r\n    _;\r\n  }\r\n\r\n  function setHardcap(uint newHardcap) public onlyOwner {\r\n    hardcap = newHardcap;\r\n  }\r\n\r\n  modifier onlyDirectMintAgentOrOwner() {\r\n    require(directMintAgent == msg.sender || owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier minInvestLimited(uint value) {\r\n    require(value >= minInvestedLimit);\r\n    _;\r\n  }\r\n\r\n  function setStart(uint newStart) public onlyOwner {\r\n    start = newStart;\r\n  }\r\n\r\n  function setMinInvestedLimit(uint newMinInvestedLimit) public onlyOwner {\r\n    minInvestedLimit = newMinInvestedLimit;\r\n  }\r\n\r\n  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\r\n    directMintAgent = newDirectMintAgent;\r\n  }\r\n\r\n  function setWallet(address newWallet) public onlyOwner {\r\n    wallet = newWallet;\r\n  }\r\n\r\n  function setPrice(uint newPrice) public onlyOwner {\r\n    price = newPrice;\r\n  }\r\n\r\n  function setToken(address newToken) public onlyOwner {\r\n    token = REPUToken(newToken);\r\n  }\r\n\r\n  function setDevWallet(address newDevWallet) public onlyOwner {\r\n    require(!devWalletLocked);\r\n    devWallet = DevWallet(newDevWallet);\r\n    devWalletLocked = true;\r\n  }\r\n\r\n  function calculateTokens(uint _invested) internal returns(uint);\r\n\r\n  function mintTokensExternal(address to, uint tokens) public onlyDirectMintAgentOrOwner {\r\n    mintTokens(to, tokens);\r\n  }\r\n\r\n  function mintTokens(address to, uint tokens) internal {\r\n    token.mint(this, tokens);\r\n    token.transfer(to, tokens);\r\n  }\r\n\r\n  function endSaleDate() public view returns(uint);\r\n\r\n  function mintTokensByETHExternal(address to, uint _invested) public onlyDirectMintAgentOrOwner returns(uint) {\r\n    return mintTokensByETH(to, _invested);\r\n  }\r\n\r\n  function mintTokensByETH(address to, uint _invested) internal isUnderHardcap returns(uint) {\r\n    invested = invested.add(_invested);\r\n    uint tokens = calculateTokens(_invested);\r\n    mintTokens(to, tokens);\r\n    return tokens;\r\n  }\r\n\r\n  function devWithdraw() internal {\r\n    uint received = devWallet.balance;\r\n    uint limit = devWallet.limit();\r\n    if (received < limit) {\r\n      uint shouldSend = limit.sub(received);\r\n      uint value;\r\n      if (msg.value < shouldSend) {\r\n        value = msg.value;\r\n      } else {\r\n        value = shouldSend;\r\n      }\r\n      devWallet.transfer(value);\r\n    }\r\n  }\r\n\r\n  function fallback() internal minInvestLimited(msg.value) returns(uint) {\r\n    require(now >= start && now < endSaleDate());\r\n    if (devWallet != address(0)) {\r\n      devWithdraw();\r\n    }\r\n    wallet.transfer(this.balance);\r\n    return mintTokensByETH(msg.sender, msg.value);\r\n  }\r\n\r\n  function () public payable {\r\n    fallback();\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/RetrieveTokensFeature.sol\r\n\r\ncontract RetrieveTokensFeature is Ownable {\r\n\r\n  function retrieveTokens(address to, address anotherToken) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(to, alienToken.balanceOf(this));\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ValueBonusFeature.sol\r\n\r\ncontract ValueBonusFeature is PercentRateProvider {\r\n\r\n  using SafeMath for uint;\r\n\r\n  struct ValueBonus {\r\n    uint from;\r\n    uint bonus;\r\n  }\r\n\r\n  ValueBonus[] public valueBonuses;\r\n\r\n  function addValueBonus(uint from, uint bonus) public onlyOwner {\r\n    valueBonuses.push(ValueBonus(from, bonus));\r\n  }\r\n\r\n  function getValueBonusTokens(uint tokens, uint _invested) public view returns(uint) {\r\n    uint valueBonus = getValueBonus(_invested);\r\n    if (valueBonus == 0) {\r\n      return 0;\r\n    }\r\n    return tokens.mul(valueBonus).div(percentRate);\r\n  }\r\n\r\n  function getValueBonus(uint value) public view returns(uint) {\r\n    uint bonus = 0;\r\n    for (uint i = 0; i < valueBonuses.length; i++) {\r\n      if (value >= valueBonuses[i].from) {\r\n        bonus = valueBonuses[i].bonus;\r\n      } else {\r\n        return bonus;\r\n      }\r\n    }\r\n    return bonus;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/REPUCommonSale.sol\r\n\r\ncontract REPUCommonSale is ValueBonusFeature, RetrieveTokensFeature, CommonSale {\r\n\r\n\r\n}\r\n\r\n// File: contracts/StagedCrowdsale.sol\r\n\r\ncontract StagedCrowdsale is Ownable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  struct Milestone {\r\n    uint period;\r\n    uint bonus;\r\n  }\r\n\r\n  uint public totalPeriod;\r\n\r\n  Milestone[] public milestones;\r\n\r\n  function milestonesCount() public view returns(uint) {\r\n    return milestones.length;\r\n  }\r\n\r\n  function addMilestone(uint period, uint bonus) public onlyOwner {\r\n    require(period > 0);\r\n    milestones.push(Milestone(period, bonus));\r\n    totalPeriod = totalPeriod.add(period);\r\n  }\r\n\r\n  function removeMilestone(uint8 number) public onlyOwner {\r\n    require(number < milestones.length);\r\n    Milestone storage milestone = milestones[number];\r\n    totalPeriod = totalPeriod.sub(milestone.period);\r\n\r\n    delete milestones[number];\r\n\r\n    for (uint i = number; i < milestones.length - 1; i++) {\r\n      milestones[i] = milestones[i+1];\r\n    }\r\n\r\n    milestones.length--;\r\n  }\r\n\r\n  function changeMilestone(uint8 number, uint period, uint bonus) public onlyOwner {\r\n    require(number < milestones.length);\r\n    Milestone storage milestone = milestones[number];\r\n\r\n    totalPeriod = totalPeriod.sub(milestone.period);\r\n\r\n    milestone.period = period;\r\n    milestone.bonus = bonus;\r\n\r\n    totalPeriod = totalPeriod.add(period);\r\n  }\r\n\r\n  function insertMilestone(uint8 numberAfter, uint period, uint bonus) public onlyOwner {\r\n    require(numberAfter < milestones.length);\r\n\r\n    totalPeriod = totalPeriod.add(period);\r\n\r\n    milestones.length++;\r\n\r\n    for (uint i = milestones.length - 2; i > numberAfter; i--) {\r\n      milestones[i + 1] = milestones[i];\r\n    }\r\n\r\n    milestones[numberAfter + 1] = Milestone(period, bonus);\r\n  }\r\n\r\n  function clearMilestones() public onlyOwner {\r\n    require(milestones.length > 0);\r\n    for (uint i = 0; i < milestones.length; i++) {\r\n      delete milestones[i];\r\n    }\r\n    milestones.length -= milestones.length;\r\n    totalPeriod = 0;\r\n  }\r\n\r\n  function lastSaleDate(uint start) public view returns(uint) {\r\n    return start + totalPeriod * 1 days;\r\n  }\r\n\r\n  function currentMilestone(uint start) public view returns(uint) {\r\n    uint previousDate = start;\r\n    for (uint i = 0; i < milestones.length; i++) {\r\n      if (now >= previousDate && now < previousDate + milestones[i].period * 1 days) {\r\n        return i;\r\n      }\r\n      previousDate = previousDate.add(milestones[i].period * 1 days);\r\n    }\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Mainsale.sol\r\n\r\ncontract Mainsale is StagedCrowdsale, REPUCommonSale {\r\n\r\n  address public foundersTokensWallet;\r\n\r\n  address public advisorsTokensWallet;\r\n\r\n  address public bountyTokensWallet;\r\n\r\n  address public lotteryTokensWallet;\r\n\r\n  uint public foundersTokensPercent;\r\n\r\n  uint public advisorsTokensPercent;\r\n\r\n  uint public bountyTokensPercent;\r\n\r\n  uint public lotteryTokensPercent;\r\n\r\n  function setFoundersTokensPercent(uint newFoundersTokensPercent) public onlyOwner {\r\n    foundersTokensPercent = newFoundersTokensPercent;\r\n  }\r\n\r\n  function setAdvisorsTokensPercent(uint newAdvisorsTokensPercent) public onlyOwner {\r\n    advisorsTokensPercent = newAdvisorsTokensPercent;\r\n  }\r\n\r\n  function setBountyTokensPercent(uint newBountyTokensPercent) public onlyOwner {\r\n    bountyTokensPercent = newBountyTokensPercent;\r\n  }\r\n\r\n  function setLotteryTokensPercent(uint newLotteryTokensPercent) public onlyOwner {\r\n    lotteryTokensPercent = newLotteryTokensPercent;\r\n  }\r\n\r\n  function setFoundersTokensWallet(address newFoundersTokensWallet) public onlyOwner {\r\n    foundersTokensWallet = newFoundersTokensWallet;\r\n  }\r\n\r\n  function setAdvisorsTokensWallet(address newAdvisorsTokensWallet) public onlyOwner {\r\n    advisorsTokensWallet = newAdvisorsTokensWallet;\r\n  }\r\n\r\n  function setBountyTokensWallet(address newBountyTokensWallet) public onlyOwner {\r\n    bountyTokensWallet = newBountyTokensWallet;\r\n  }\r\n\r\n  function setLotteryTokensWallet(address newLotteryTokensWallet) public onlyOwner {\r\n    lotteryTokensWallet = newLotteryTokensWallet;\r\n  }\r\n\r\n  function calculateTokens(uint _invested) internal returns(uint) {\r\n    uint milestoneIndex = currentMilestone(start);\r\n    Milestone storage milestone = milestones[milestoneIndex];\r\n    uint tokens = _invested.mul(price).div(1 ether);\r\n    uint valueBonusTokens = getValueBonusTokens(tokens, _invested);\r\n    if (milestone.bonus > 0) {\r\n      tokens = tokens.add(tokens.mul(milestone.bonus).div(percentRate));\r\n    }\r\n    return tokens.add(valueBonusTokens);\r\n  }\r\n\r\n  function finish() public onlyOwner {\r\n    uint summaryTokensPercent = bountyTokensPercent.add(foundersTokensPercent).add(advisorsTokensPercent).add(lotteryTokensPercent);\r\n    uint mintedTokens = token.totalSupply();\r\n    uint allTokens = mintedTokens.mul(percentRate).div(percentRate.sub(summaryTokensPercent));\r\n    uint foundersTokens = allTokens.mul(foundersTokensPercent).div(percentRate);\r\n    uint advisorsTokens = allTokens.mul(advisorsTokensPercent).div(percentRate);\r\n    uint bountyTokens = allTokens.mul(bountyTokensPercent).div(percentRate);\r\n    uint lotteryTokens = allTokens.mul(lotteryTokensPercent).div(percentRate);\r\n    mintTokens(foundersTokensWallet, foundersTokens);\r\n    mintTokens(advisorsTokensWallet, advisorsTokens);\r\n    mintTokens(bountyTokensWallet, bountyTokens);\r\n    mintTokens(lotteryTokensWallet, lotteryTokens);\r\n    token.finishMinting();\r\n  }\r\n\r\n  function endSaleDate() public view returns(uint) {\r\n    return lastSaleDate(start);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Presale.sol\r\n\r\ncontract Presale is NextSaleAgentFeature, StagedCrowdsale, REPUCommonSale {\r\n\r\n  function calculateTokens(uint _invested) internal returns(uint) {\r\n    uint milestoneIndex = currentMilestone(start);\r\n    Milestone storage milestone = milestones[milestoneIndex];\r\n    uint tokens = _invested.mul(price).div(1 ether);\r\n    uint valueBonusTokens = getValueBonusTokens(tokens, _invested);\r\n    if (milestone.bonus > 0) {\r\n      tokens = tokens.add(tokens.mul(milestone.bonus).div(percentRate));\r\n    }\r\n    return tokens.add(valueBonusTokens);\r\n  }\r\n\r\n  function finish() public onlyOwner {\r\n    token.setSaleAgent(nextSaleAgent);\r\n  }\r\n\r\n  function endSaleDate() public view returns(uint) {\r\n    return lastSaleDate(start);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ClosedRound.sol\r\n\r\ncontract ClosedRound is NextSaleAgentFeature, REPUCommonSale {\r\n\r\n  uint public maxLimit; \r\n\r\n  uint public end;\r\n\r\n  function calculateTokens(uint _invested) internal returns(uint) {\r\n    uint tokens = _invested.mul(price).div(1 ether);\r\n    return tokens.add(getValueBonusTokens(tokens, _invested));\r\n  }\r\n\r\n  function setMaxLimit(uint newMaxLimit) public onlyOwner {\r\n    maxLimit = newMaxLimit;\r\n  }\r\n\r\n  function setEnd(uint newEnd) public onlyOwner {\r\n    end = newEnd;\r\n  }\r\n\r\n  function finish() public onlyOwner {\r\n    token.setSaleAgent(nextSaleAgent);\r\n  }\r\n\r\n  function fallback() internal returns(uint) {\r\n    require(msg.value <= maxLimit);\r\n    return super.fallback();\r\n  }\r\n\r\n  function endSaleDate() public view returns(uint) {\r\n    return end;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Configurator.sol\r\n\r\ncontract Configurator is Ownable {\r\n\r\n  REPUToken public token;\r\n\r\n  ClosedRound public closedRound;\r\n\r\n  Presale public presale;\r\n\r\n  Mainsale public mainsale;\r\n\r\n  DevWallet public devWallet;\r\n\r\n  function deploy() public onlyOwner {\r\n\r\n    token = new REPUToken();\r\n    closedRound = new ClosedRound();\r\n    presale = new Presale();\r\n    mainsale = new Mainsale();\r\n    devWallet = new DevWallet();\r\n\r\n    token.setSaleAgent(closedRound);\r\n\r\n    closedRound.setWallet(0x425dE1C67928834AE72FB7E6Fc17d88d1Db4484b);\r\n    closedRound.setStart(1517652000);\r\n    closedRound.setEnd(1519293600);\r\n    closedRound.setPrice(12500000000000000000000);        // 1 REPU = 0.00008 ETH\r\n    closedRound.setHardcap(1000000000000000000000);       // 1000 ETH\r\n    closedRound.setMinInvestedLimit(1000000000000000000); // 1 ETH\r\n    closedRound.setMaxLimit(250000000000000000000);       // 250 ETH\r\n    closedRound.addValueBonus(2000000000000000000, 2);    // > 2 ETH => 2%\r\n    closedRound.addValueBonus(11000000000000000000, 5);   // > 11 ETH => 5%\r\n    closedRound.addValueBonus(51000000000000000000, 7);   // > 51 ETH => 7%\r\n    closedRound.addValueBonus(101000000000000000000, 10); // > 101 ETH => 10%\r\n    closedRound.setToken(token);\r\n    closedRound.setNextSaleAgent(presale);\r\n    closedRound.setDevWallet(devWallet);\r\n\r\n\r\n    presale.setWallet(0x425dE1C67928834AE72FB7E6Fc17d88d1Db4484b);\r\n    presale.setStart(1519380000);\r\n    presale.setPrice(6854009595613434000000);             // 1 REPU = 0.0001459 ETH\r\n    presale.setPercentRate(10000);\r\n    presale.addMilestone(1, 2159);                        // 8333.7902 REPU / ETH\r\n    presale.addMilestone(1, 1580);                        // 7936.9431 REPU / ETH\r\n    presale.addMilestone(1, 1028);                        // 7558.6017 REPU / ETH\r\n    presale.addMilestone(1, 504);                         // 7199.4516 REPU / ETH\r\n    presale.addMilestone(3, 0);                           // 6854.0095 REPU / ETH\r\n\r\n    closedRound.transferOwnership(owner);\r\n    token.transferOwnership(owner);\r\n    presale.transferOwnership(owner);\r\n    mainsale.transferOwnership(owner);    \r\n\r\n/*    presale.setHardcap(1800000000000000000000);           // 1800 ETH\r\n    presale.setMinInvestedLimit(100000000000000000);      // 0.1 ETH\r\n    presale.addValueBonus(2000000000000000000, 200);      // > 2 ETH => 2%\r\n    presale.addValueBonus(11000000000000000000, 500);     // > 11 ETH => 5%\r\n    presale.addValueBonus(51000000000000000000, 700);     // > 51 ETH => 7%\r\n    presale.addValueBonus(101000000000000000000, 1000);   // > 101 ETH => 10%\r\n    presale.addValueBonus(301000000000000000000, 1500);   // > 301 ETH => 15%\r\n\r\n    presale.setToken(token);\r\n    presale.setNextSaleAgent(mainsale);\r\n    presale.setDevWallet(devWallet);\r\n\r\n    mainsale.setWallet(0x29b637Ca54Fc1A9d8d92475f8a64C199c91B82E4);\r\n    mainsale.setStart(1522663200);\r\n    mainsale.setPrice(3937007874015748300000);                // 1 REPU = 0.0002540 ETH\r\n    mainsale.setPercentRate(100000);\r\n    mainsale.addMilestone(7, 48200);                          // 5834.6456 REPU / ETH\r\n    mainsale.addMilestone(7, 29990);                          // 5117.7165 REPU / ETH\r\n    mainsale.addMilestone(7, 14010);                          // 4488.5826 REPU / ETH\r\n    mainsale.addMilestone(9, 0);                              // 3937.0078 REPU / ETH\r\n    mainsale.setHardcap(30000000000000000000000);             // 30 000 ETH\r\n    mainsale.setMinInvestedLimit(30000000000000000);          // 0.03 ETH\r\n    mainsale.addValueBonus(2000000000000000000, 2000);        // > 2 ETH => 2%\r\n    mainsale.addValueBonus(11000000000000000000, 3000);       // > 11 ETH => 3%\r\n    mainsale.addValueBonus(51000000000000000000, 5000);       // > 51 ETH => 5%\r\n    mainsale.addValueBonus(101000000000000000000, 7000);      // > 101 ETH => 7%\r\n    mainsale.addValueBonus(301000000000000000000, 10000);     // > 301 ETH => 10%\r\n    mainsale.addValueBonus(501000000000000000000, 15000);     // > 501 ETH => 15%\r\n    mainsale.addValueBonus(1000000000000000000000, 20000);    // > 1000 ETH => 20%\r\n    mainsale.setFoundersTokensWallet(0x650F7fcBd397AB0C722D9EfBBd6Cd885d02e8f8F);\r\n    mainsale.setFoundersTokensPercent(12500);\r\n    mainsale.setAdvisorsTokensWallet(0x93b103Ecc79f6ef79038E041704a1083E9C4e1A6);\r\n    mainsale.setAdvisorsTokensPercent(3330);\r\n    mainsale.setBountyTokensWallet(0xaAF9430b8B68146665acB4F05396d63a71d54C4d);\r\n    mainsale.setBountyTokensPercent(6250);\r\n    mainsale.setLotteryTokensWallet(0xDA7b920F54e14F0Cc5658f0635B45a0839Dbf18C);\r\n    mainsale.setLotteryTokensPercent(625);\r\n    mainsale.setDevWallet(devWallet);\r\n\r\n    address manager = 0x8c782FAF936ce57Dca60791a47E680e7A34A6315;\r\n    \r\n    closedRound.transferOwnership(manager);\r\n    token.transferOwnership(manager);\r\n    presale.transferOwnership(manager);\r\n    mainsale.transferOwnership(manager);*/\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"date\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"DevWallet","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9ec358bb452f0ef5828c909fe58bd847aecea1015908cd9311f21bc79a728ca0"}]}