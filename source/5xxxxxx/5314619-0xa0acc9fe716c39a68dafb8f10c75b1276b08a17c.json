{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract TittyBase {\r\n\r\n    event Transfer(address indexed from, address indexed to);\r\n    event Creation(address indexed from, uint256 tittyId, uint256 wpId);\r\n    event AddAccessory(uint256 tittyId, uint256 accessoryId);\r\n\r\n    struct Accessory {\r\n\r\n        uint256 id;\r\n        string name;\r\n        uint256 price;\r\n        bool isActive;\r\n\r\n    }\r\n\r\n    struct Titty {\r\n\r\n        uint256 id;\r\n        string name;\r\n        string gender;\r\n        uint256 originalPrice;\r\n        uint256 salePrice;\r\n        uint256[] accessories;\r\n        bool forSale;\r\n    }\r\n\r\n    //Storage\r\n    Titty[] Titties;\r\n    Accessory[] Accessories;\r\n    mapping (uint256 => address) public tittyIndexToOwner;\r\n    mapping (address => uint256) public ownerTittiesCount;\r\n    mapping (uint256 => address) public tittyApproveIndex;\r\n\r\n    function _transfer(address _from, address _to, uint256 _tittyId) internal {\r\n\r\n        ownerTittiesCount[_to]++;\r\n\r\n        tittyIndexToOwner[_tittyId] = _to;\r\n        if (_from != address(0)) {\r\n            ownerTittiesCount[_from]--;\r\n            delete tittyApproveIndex[_tittyId];\r\n        }\r\n\r\n        Transfer(_from, _to);\r\n\r\n    }\r\n\r\n    function _changeTittyPrice (uint256 _newPrice, uint256 _tittyId) internal {\r\n\r\n        require(tittyIndexToOwner[_tittyId] == msg.sender);\r\n        Titty storage _titty = Titties[_tittyId];\r\n        _titty.salePrice = _newPrice;\r\n\r\n        Titties[_tittyId] = _titty;\r\n    }\r\n\r\n    function _setTittyForSale (bool _forSale, uint256 _tittyId) internal {\r\n\r\n        require(tittyIndexToOwner[_tittyId] == msg.sender);\r\n        Titty storage _titty = Titties[_tittyId];\r\n        _titty.forSale = _forSale;\r\n\r\n        Titties[_tittyId] = _titty;\r\n    }\r\n\r\n    function _changeName (string _name, uint256 _tittyId) internal {\r\n\r\n        require(tittyIndexToOwner[_tittyId] == msg.sender);\r\n        Titty storage _titty = Titties[_tittyId];\r\n        _titty.name = _name;\r\n\r\n        Titties[_tittyId] = _titty;\r\n    }\r\n\r\n    function addAccessory (uint256 _id, string _name, uint256 _price, uint256 tittyId ) internal returns (uint) {\r\n\r\n        Accessory memory _accessory = Accessory({\r\n\r\n            id: _id,\r\n            name: _name,\r\n            price: _price,\r\n            isActive: true\r\n\r\n        });\r\n\r\n        Titty storage titty = Titties[tittyId];\r\n        uint256 newAccessoryId = Accessories.push(_accessory) - 1;\r\n        titty.accessories.push(newAccessoryId);\r\n        AddAccessory(tittyId, newAccessoryId);\r\n\r\n        return newAccessoryId;\r\n\r\n    }\r\n\r\n    function totalAccessories(uint256 _tittyId) public view returns (uint256) {\r\n\r\n        Titty storage titty = Titties[_tittyId];\r\n        return titty.accessories.length;\r\n\r\n    }\r\n\r\n    function getAccessory(uint256 _tittyId, uint256 _aId) public view returns (uint256 id, string name,  uint256 price, bool active) {\r\n\r\n        Titty storage titty = Titties[_tittyId];\r\n        uint256 accId = titty.accessories[_aId];\r\n        Accessory storage accessory = Accessories[accId];\r\n        id = accessory.id;\r\n        name = accessory.name;\r\n        price = accessory.price;\r\n        active = accessory.isActive;\r\n\r\n    }\r\n\r\n    function createTitty (uint256 _id, string _gender, uint256 _price, address _owner, string _name) internal returns (uint) {\r\n        \r\n        Titty memory _titty = Titty({\r\n            id: _id,\r\n            name: _name,\r\n            gender: _gender,\r\n            originalPrice: _price,\r\n            salePrice: _price,\r\n            accessories: new uint256[](0),\r\n            forSale: false\r\n        });\r\n\r\n        uint256 newTittyId = Titties.push(_titty) - 1;\r\n\r\n        Creation(\r\n            _owner,\r\n            newTittyId,\r\n            _id\r\n        );\r\n\r\n        _transfer(0, _owner, newTittyId);\r\n        return newTittyId;\r\n    }\r\n\r\n    \r\n\r\n}\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    function implementsERC721() public pure returns (bool);\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TittyOwnership is TittyBase, ERC721 {\r\n\r\n    string public name = \"CryptoTittes\";\r\n    string public symbol = \"CT\";\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function _isOwner(address _user, uint256 _tittyId) internal view returns (bool) {\r\n        return tittyIndexToOwner[_tittyId] == _user;\r\n    }\r\n\r\n    function _approve(uint256 _tittyId, address _approved) internal {\r\n         tittyApproveIndex[_tittyId] = _approved; \r\n    }\r\n\r\n    function _approveFor(address _user, uint256 _tittyId) internal view returns (bool) {\r\n         return tittyApproveIndex[_tittyId] == _user; \r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 total) {\r\n        return Titties.length - 1;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return ownerTittiesCount[_owner];\r\n    }\r\n    \r\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\r\n        owner = tittyIndexToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        require(_isOwner(msg.sender, _tokenId));\r\n        _approve(_tokenId, _to);\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n        require(_approveFor(msg.sender, _tokenId));\r\n        require(_isOwner(_from, _tokenId));\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n        \r\n\r\n    }\r\n    function transfer(address _to, uint256 _tokenId) public {\r\n        require(_to != address(0));\r\n        require(_isOwner(msg.sender, _tokenId));\r\n\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\ncontract TittyPurchase is TittyOwnership {\r\n\r\n    address private wallet;\r\n    address private boat;\r\n\r\n    function TittyPurchase(address _wallet, address _boat) public {\r\n        wallet = _wallet;\r\n        boat = _boat;\r\n\r\n        createTitty(0, \"unissex\", 1000000000, address(0), \"genesis\");\r\n    }\r\n\r\n    function purchaseNew(uint256 _id, string _name, string _gender, uint256 _price) public payable {\r\n\r\n        if (msg.value == 0 && msg.value != _price)\r\n            revert();\r\n\r\n        uint256 boatFee = calculateBoatFee(msg.value);\r\n        createTitty(_id, _gender, _price, msg.sender, _name);\r\n        wallet.transfer(msg.value - boatFee);\r\n        boat.transfer(boatFee);\r\n\r\n    }\r\n\r\n    function purchaseExistent(uint256 _tittyId) public payable {\r\n\r\n        Titty storage titty = Titties[_tittyId];\r\n        uint256 fee = calculateFee(titty.salePrice);\r\n        if (msg.value == 0 && msg.value != titty.salePrice)\r\n            revert();\r\n        \r\n        uint256 val = msg.value - fee;\r\n        address owner = tittyIndexToOwner[_tittyId];\r\n        _approve(_tittyId, msg.sender);\r\n        transferFrom(owner, msg.sender, _tittyId);\r\n        owner.transfer(val);\r\n        wallet.transfer(fee);\r\n\r\n    }\r\n\r\n    function purchaseAccessory(uint256 _tittyId, uint256 _accId, string _name, uint256 _price) public payable {\r\n\r\n        if (msg.value == 0 && msg.value != _price)\r\n            revert();\r\n\r\n        wallet.transfer(msg.value);\r\n        addAccessory(_accId, _name, _price,  _tittyId);\r\n        \r\n        \r\n    }\r\n\r\n    function getAmountOfTitties() public view returns(uint) {\r\n        return Titties.length;\r\n    }\r\n\r\n    function getLatestId() public view returns (uint) {\r\n        return Titties.length - 1;\r\n    }\r\n\r\n    function getTittyByWpId(address _owner, uint256 _wpId) public view returns (bool own, uint256 tittyId) {\r\n        \r\n        for (uint256 i = 1; i<=totalSupply(); i++) {\r\n            Titty storage titty = Titties[i];\r\n            bool isOwner = _isOwner(_owner, i);\r\n            if (titty.id == _wpId && isOwner) {\r\n                return (true, i);\r\n            }\r\n        }\r\n        \r\n        return (false, 0);\r\n    }\r\n\r\n    function belongsTo(address _account, uint256 _tittyId) public view returns (bool) {\r\n        return _isOwner(_account, _tittyId);\r\n    }\r\n\r\n    function changePrice(uint256 _price, uint256 _tittyId) public {\r\n        _changeTittyPrice(_price, _tittyId);\r\n    }\r\n\r\n    function changeName(string _name, uint256 _tittyId) public {\r\n        _changeName(_name, _tittyId);\r\n    }\r\n\r\n    function makeItSellable(uint256 _tittyId) public {\r\n        _setTittyForSale(true, _tittyId);\r\n    }\r\n\r\n    function calculateFee (uint256 _price) internal pure returns(uint) {\r\n        return (_price * 10)/100;\r\n    }\r\n\r\n    function calculateBoatFee (uint256 _price) internal pure returns(uint) {\r\n        return (_price * 25)/100;\r\n    }\r\n\r\n    function() external {}\r\n\r\n    function getATitty(uint256 _tittyId)\r\n        public \r\n        view \r\n        returns (\r\n        uint256 id,\r\n        string name,\r\n        string gender,\r\n        uint256 originalPrice,\r\n        uint256 salePrice,\r\n        bool forSale\r\n        ) {\r\n\r\n            Titty storage titty = Titties[_tittyId];\r\n            id = titty.id;\r\n            name = titty.name;\r\n            gender = titty.gender;\r\n            originalPrice = titty.originalPrice;\r\n            salePrice = titty.salePrice;\r\n            forSale = titty.forSale;\r\n        }\r\n\r\n}\r\n\r\ncontract CTAuction {\r\n\r\n    struct Auction {\r\n        // Parameters of the auction. Times are either\r\n        // absolute unix timestamps (seconds since 1970-01-01)\r\n        // or time periods in seconds.\r\n        uint auctionEnd;\r\n\r\n        // Current state of the auction.\r\n        address highestBidder;\r\n        uint highestBid;\r\n\r\n        //Minumin Bid Set by the beneficiary\r\n        uint minimumBid;\r\n\r\n        // Set to true at the end, disallows any change\r\n        bool ended;\r\n\r\n        //Titty being Auctioned\r\n        uint titty;\r\n\r\n        //Beneficiary\r\n        address beneficiary;\r\n\r\n        //buynow price\r\n        uint buyNowPrice;\r\n    }\r\n\r\n    Auction[] Auctions;\r\n\r\n    address public owner; \r\n    address public ctWallet; \r\n    address public tittyContractAddress;\r\n\r\n    // Allowed withdrawals of previous bids\r\n    mapping(address => uint) pendingReturns;\r\n\r\n    // CriptoTitty Contract\r\n    TittyPurchase public tittyContract;\r\n\r\n    // Events that will be fired on changes.\r\n    event HighestBidIncreased(uint auction, address bidder, uint amount);\r\n    event AuctionEnded(address winner, uint amount);\r\n    event BuyNow(address buyer, uint amount);\r\n    event AuctionCancel(uint auction);\r\n    event NewAuctionCreated(uint auctionId, uint titty);\r\n    event DidNotFinishYet(uint time, uint auctionTime);\r\n    event NotTheContractOwner(address owner, address sender);\r\n\r\n    // The following is a so-called natspec comment,\r\n    // recognizable by the three slashes.\r\n    // It will be shown when the user is asked to\r\n    // confirm a transaction.\r\n\r\n    /// Create a simple auction with `_biddingTime`\r\n    /// seconds bidding time on behalf of the\r\n    /// beneficiary address `_beneficiary`.\r\n    function CTAuction(\r\n        address _tittyPurchaseAddress,\r\n        address _wallet\r\n    ) public \r\n    {   \r\n        tittyContractAddress = _tittyPurchaseAddress;\r\n        tittyContract = TittyPurchase(_tittyPurchaseAddress);\r\n        ctWallet = _wallet;\r\n        owner = msg.sender; \r\n    }\r\n\r\n    function createAuction(uint _biddingTime, uint _titty, uint _minimumBid, uint _buyNowPrice) public {\r\n\r\n        address ownerAddress = tittyContract.ownerOf(_titty);\r\n        require(msg.sender == ownerAddress);\r\n\r\n        Auction memory auction = Auction({\r\n            auctionEnd: now + _biddingTime,\r\n            titty: _titty,\r\n            beneficiary: msg.sender,\r\n            highestBidder: 0,\r\n            highestBid: 0,\r\n            ended: false,\r\n            minimumBid: _minimumBid,\r\n            buyNowPrice: _buyNowPrice\r\n        });\r\n\r\n        uint auctionId = Auctions.push(auction) - 1;\r\n        NewAuctionCreated(auctionId, _titty);\r\n    }\r\n\r\n    function getTittyOwner(uint _titty) public view returns (address) {\r\n        address ownerAddress = tittyContract.ownerOf(_titty);\r\n        return ownerAddress;\r\n    } \r\n\r\n    /// Bid on an auction with the value sent\r\n    /// together with this transaction.\r\n    /// The value will only be refunded if the\r\n    /// auction is not won.\r\n    function bid(uint _auction) public payable {\r\n\r\n        Auction memory auction = Auctions[_auction];\r\n\r\n        // Revert the call if the bidding\r\n        // period is over.\r\n        require(now <= auction.auctionEnd);\r\n\r\n        // Revert the call value is less than the minimumBid.\r\n        require(msg.value >= auction.minimumBid);\r\n\r\n        // If the bid is not higher, send the\r\n        // money back.\r\n        require(msg.value > auction.highestBid);\r\n\r\n        if (auction.highestBid != 0) {\r\n            // Sending back the money by simply using\r\n            // highestBidder.send(highestBid) is a security risk\r\n            // because it could execute an untrusted contract.\r\n            // It is always safer to let the recipients\r\n            // withdraw their money themselves.\r\n            pendingReturns[auction.highestBidder] += auction.highestBid;\r\n        }\r\n        auction.highestBidder = msg.sender;\r\n        auction.highestBid = msg.value;\r\n        Auctions[_auction] = auction;\r\n        HighestBidIncreased(_auction, msg.sender, msg.value);\r\n    }\r\n\r\n    function buyNow(uint _auction) public payable {\r\n\r\n        Auction memory auction = Auctions[_auction];\r\n\r\n        require(now >= auction.auctionEnd); // auction has ended\r\n        require(!auction.ended); // this function has already been called\r\n\r\n        //Require that the value sent is the buyNowPrice Set by the Owner/Benneficary\r\n        require(msg.value == auction.buyNowPrice);\r\n\r\n        //Require that there are no bids\r\n        require(auction.highestBid == 0);\r\n\r\n        // End Auction\r\n        auction.ended = true;\r\n        Auctions[_auction] = auction;\r\n        BuyNow(msg.sender, msg.value);\r\n\r\n        // Send the Funds\r\n        tittyContract.transferFrom(auction.beneficiary, msg.sender, auction.titty);\r\n        uint fee = calculateFee(msg.value);\r\n        ctWallet.transfer(fee);\r\n        auction.beneficiary.transfer(msg.value-fee);\r\n    }\r\n\r\n    /// Withdraw a bid that was overbid.\r\n    function withdraw() public returns (bool) {\r\n        uint amount = pendingReturns[msg.sender];\r\n        require(amount > 0);\r\n        // It is important to set this to zero because the recipient\r\n        // can call this function again as part of the receiving call\r\n        // before `send` returns.\r\n        pendingReturns[msg.sender] = 0;\r\n\r\n        if (!msg.sender.send(amount)) {\r\n            // No need to call throw here, just reset the amount owing\r\n            pendingReturns[msg.sender] = amount;\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    function auctionCancel(uint _auction) public {\r\n\r\n        Auction memory auction = Auctions[_auction];\r\n\r\n        //has to be the beneficiary\r\n        require(msg.sender == auction.beneficiary);\r\n\r\n        //Auction Ended\r\n        require(now >= auction.auctionEnd);\r\n\r\n        //has no maxbid \r\n        require(auction.highestBid == 0);\r\n\r\n        auction.ended = true;\r\n        Auctions[_auction] = auction;\r\n        AuctionCancel(_auction);\r\n\r\n    }\r\n\r\n    /// End the auction and send the highest bid\r\n    /// to the beneficiary and 10% to CT.\r\n    function auctionEnd(uint _auction) public {\r\n\r\n        // Just cryptotitties CEO can end the auction\r\n        require (owner == msg.sender);\r\n\r\n        Auction memory auction = Auctions[_auction];\r\n\r\n        require (now >= auction.auctionEnd); // auction has ended\r\n        require(!auction.ended); // this function has already been called\r\n\r\n        // End Auction\r\n        auction.ended = true;\r\n        Auctions[_auction] = auction;\r\n        AuctionEnded(auction.highestBidder, auction.highestBid);\r\n        if (auction.highestBid != 0) {\r\n            // Send the Funds\r\n            tittyContract.transferFrom(auction.beneficiary, auction.highestBidder, auction.titty);\r\n            uint fee = calculateFee(auction.highestBid);\r\n            ctWallet.transfer(fee);\r\n            auction.beneficiary.transfer(auction.highestBid-fee);\r\n        }\r\n\r\n    }\r\n\r\n    function getAuctionInfo(uint _auction) public view returns (uint end, address beneficiary, uint maxBid, address maxBidder) {\r\n\r\n        Auction storage auction = Auctions[_auction];\r\n\r\n        end = auction.auctionEnd;\r\n        beneficiary = auction.beneficiary;\r\n        maxBid = auction.highestBid;\r\n        maxBidder = auction.highestBidder;\r\n    }\r\n\r\n    function calculateFee (uint256 _price) internal pure returns(uint) {\r\n        return (_price * 10)/100;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_auction\",\"type\":\"uint256\"}],\"name\":\"buyNow\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tittyContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auction\",\"type\":\"uint256\"}],\"name\":\"auctionEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auction\",\"type\":\"uint256\"}],\"name\":\"auctionCancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_biddingTime\",\"type\":\"uint256\"},{\"name\":\"_titty\",\"type\":\"uint256\"},{\"name\":\"_minimumBid\",\"type\":\"uint256\"},{\"name\":\"_buyNowPrice\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auction\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tittyContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ctWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_titty\",\"type\":\"uint256\"}],\"name\":\"getTittyOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_auction\",\"type\":\"uint256\"}],\"name\":\"getAuctionInfo\",\"outputs\":[{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"maxBid\",\"type\":\"uint256\"},{\"name\":\"maxBidder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tittyPurchaseAddress\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auction\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HighestBidIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyNow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auction\",\"type\":\"uint256\"}],\"name\":\"AuctionCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"titty\",\"type\":\"uint256\"}],\"name\":\"NewAuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auctionTime\",\"type\":\"uint256\"}],\"name\":\"DidNotFinishYet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotTheContractOwner\",\"type\":\"event\"}]","ContractName":"CTAuction","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b39d10435d7d0f2ea26a1c86c42be0fd8a94f59b0000000000000000000000000ad5fe68345484f2e37a20854361243d005febb8","Library":"","SwarmSource":"bzzr://8de589a180af3b4082ab8dd8f5a5e8e567e7b0d18aeb385eddf08325de29e1ea"}]}