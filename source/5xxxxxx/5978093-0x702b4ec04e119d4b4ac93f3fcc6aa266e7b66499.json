{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\ncontract ETHx2 {\r\n    \r\n    event NewParticipant(address owner, uint256 cost, uint256 new_price);\r\n\r\n    struct Cost {\r\n        address owner;\r\n        uint256 cost;\r\n    }\r\n\r\n    mapping(uint256 => Cost) public participant;\r\n    mapping(address => string) public msgs;\r\n\r\n    address public Address;\r\n    uint256 public seatPrice = 5000000000000000;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == Address);\r\n        _;\r\n    }\r\n\r\n    function participant() public {\r\n        Address = msg.sender;\r\n        participant[1] = Cost(msg.sender, 0);\r\n        participant[2] = Cost(msg.sender, 0);\r\n        participant[3] = Cost(msg.sender, 0);\r\n        participant[4] = Cost(msg.sender, 0);\r\n        participant[5] = Cost(msg.sender, 0);\r\n        participant[6] = Cost(msg.sender, 0);\r\n        participant[7] = Cost(msg.sender, 0);\r\n        participant[8] = Cost(msg.sender, 0);\r\n        participant[9] = Cost(msg.sender, 0);\r\n        participant[10] = Cost(msg.sender, 0);\r\n        msgs[msg.sender] = \"Claim this spot!\";\r\n    }\r\n\r\n    function getX2(uint256 _slot) public view returns(uint256 slot, address owner, uint256 cost, string message) {\r\n        slot = _slot;\r\n        owner = participant[_slot].owner;\r\n        cost = participant[_slot].cost;\r\n        message = msgs[participant[_slot].owner];\r\n    }\r\n\r\n    function purchase() public payable {\r\n        require(msg.sender != address(0));\r\n        require(msg.value >= seatPrice);\r\n        uint256 excess = SafeMath.sub(msg.value, seatPrice);\r\n        participant[1].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\r\n        participant[2].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\r\n        participant[3].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\r\n        participant[4].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\r\n        participant[5].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\r\n        participant[6].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\r\n        participant[7].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\r\n        participant[8].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\r\n        participant[9].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\r\n        participant[10] = participant[9];\r\n        participant[9] = participant[8];\r\n        participant[8] = participant[7];\r\n        participant[7] = participant[6];\r\n        participant[6] = participant[5];\r\n        participant[5] = participant[4];\r\n        participant[4] = participant[3];\r\n        participant[3] = participant[2];\r\n        participant[2] = participant[1];\r\n        participant[1] = Cost(msg.sender, seatPrice);\r\n        Address.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 15)));\r\n        NewParticipant(msg.sender, seatPrice, SafeMath.mul(SafeMath.div(seatPrice, 100), 115));\r\n        seatPrice = SafeMath.mul(SafeMath.div(seatPrice, 100), 115);\r\n        msg.sender.transfer(excess);\r\n    }\r\n\r\n    function setMessage(string message) public payable {\r\n        msgs[msg.sender] = message;\r\n    }\r\n\r\n    function payout() public onlyAdmin {\r\n        Address.transfer(this.balance);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"seatPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"msgs\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"setMessage\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"participant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participant\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"getX2\",\"outputs\":[{\"name\":\"slot\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cost\",\"type\":\"uint256\"},{\"name\":\"message\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_price\",\"type\":\"uint256\"}],\"name\":\"NewParticipant\",\"type\":\"event\"}]","ContractName":"ETHx2","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://61bc170ce7130b30be8353ab1f670d071ed0b50d7bcb0bcc329639175397f0c6"}]}