{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract APS{\r\n    string public name; // AutopaymentParkingSystem\r\n    string public symbol; // APS\r\n    uint256 public decimals = 18;\r\n    uint256 public totalSupply; \r\n    address public centralMinter; // Urbana\r\n    uint256 public divisor; // Denominator used with buyPrice, sellPrice. If value(APS) > value(ETH), divisor = 1. Otherwise, divisor = 10**N()\r\n    uint256 public buyPrice; // Numerator used with divisor. 1 APS = ($buyPrice) ETH.\r\n    uint256 public sellPrice;  // Numerator used with divisor. 1 APS = ($sellPrice) ETH.\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping(address => uint256)) allowed;\r\n    mapping (address => bool) public frozenAccount; // freezing balances of invalid account\r\n\r\n    event SetPrice(uint256 buyPrice, uint256 sellPrice);\r\n    event MintToken(uint256 amount);\r\n    event BurnToken(uint256 amount);\r\n    event FrozenAccounts(address target, bool frozen);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);    \r\n    function APS(\r\n        string tokenName,\r\n        string tokenSymbol,\r\n        uint256 initialSupply\r\n    ) public {\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        totalSupply = initialSupply * 10 ** decimals;\r\n        balanceOf[msg.sender] = totalSupply; \r\n        centralMinter = msg.sender;\r\n    }\r\n\r\n    modifier onlyCentralMinter {\r\n        require(msg.sender == centralMinter);\r\n        _;\r\n    }\r\n\r\n    /*  \r\n     * CentralMinter Functions \r\n     * Functions related with controlling amount of APS in circulation\r\n     * Functions related with controlling node accounts\r\n     */\r\n\r\n    // Set buy/sell price of APS\r\n    function setPrices(uint256 newBuyPrice,uint256 newSellPrice, uint256 newDivisor) public onlyCentralMinter {\r\n        buyPrice = newBuyPrice;\r\n        sellPrice = newSellPrice;\r\n        divisor = newDivisor;\r\n        emit SetPrice(buyPrice,sellPrice);\r\n    }\r\n\r\n    // Issue new tokens in circulation\r\n    function mintToken(uint256 mintedAmount) public onlyCentralMinter{\r\n        balanceOf[centralMinter] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        emit MintToken(mintedAmount);\r\n    }\r\n\r\n    // Remove tokens from circulation to control token prcie\r\n    function burnToken(uint256 burnedAmount) public onlyCentralMinter{\r\n        balanceOf[centralMinter] -= burnedAmount;\r\n        totalSupply -= burnedAmount;\r\n        emit BurnToken(burnedAmount);\r\n    }\r\n\r\n    function freezeAccount(address target,bool freeze) public onlyCentralMinter{\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenAccounts(target,freeze);\r\n    }\r\n\r\n    /*  \r\n     * Node functions\r\n     * Functions related with buying/selling APS\r\n     * ERC20 Token functions\r\n     */\r\n    \r\n    function buy() payable public returns (uint256 amount) {\r\n        if(divisor == 1) amount = msg.value / buyPrice;\r\n        else amount = msg.value * (divisor/buyPrice);\r\n        require(balanceOf[centralMinter]>= amount);\r\n        balanceOf[msg.sender] += amount;\r\n        balanceOf[centralMinter] -= amount;\r\n        emit Transfer(centralMinter,msg.sender,amount);\r\n        return amount;       \r\n    }\r\n\r\n    \r\n    function sell(uint256 amount) payable public returns (uint256 revenue) {\r\n        require(balanceOf[msg.sender]>=amount);\r\n        balanceOf[msg.sender] -= amount;\r\n        balanceOf[centralMinter] += amount;\r\n        revenue = amount * sellPrice / divisor;\r\n        msg.sender.transfer(revenue); \r\n        emit Transfer(msg.sender,centralMinter,amount);\r\n        return revenue;\r\n    }\r\n\r\n    /*  ERC20 Token Functions\r\n     *  NOTE : ERC223, ERC721 could be used as an alternative to current ERC20 Tokens\r\n     */\r\n\r\n    // ERC20 Standard: Get the total token supply\r\n    function totalSupply() public constant returns (uint256){\r\n        return totalSupply;\r\n    }\r\n\r\n    // ERC20 Standard: Get the account balance of another account with address tokenOwner\r\n    function balanceOf(address _owner) public constant returns (uint256 balance){\r\n        return balanceOf[_owner];\r\n    }\r\n\r\n    // ERC20 Standard: Returns the amount which spender is still allowed to withdraw from tokenOwner\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining){\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require(_to != 0x0);\r\n        require(!frozenAccount[_from]);\r\n        require(!frozenAccount[_to]);\r\n        require(balanceOf[_from]>= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        uint256 totalBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from,_to,_value);\r\n        assert(totalBalances == balanceOf[_from] + balanceOf[_to]);\r\n    }\r\n\r\n    // ERC20 Standard: Send tokens amount of tokens to address to\r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n        _transfer(msg.sender,_to,_value);\r\n        return true;\r\n    }\r\n\r\n    // ERC20 Standard: Allow spender to withdraw from your account, multiple times, up to the tokens amount. \r\n    function approve(address _spender, uint256 _value) public returns (bool success){\r\n        require(_spender != 0x0);\r\n        require(balanceOf[msg.sender]>=_value);\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender,_spender,_value);\r\n        return true;\r\n    }\r\n\r\n    // ERC20 Standard: send tokens from address from to address to\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n        require(allowed[_from][msg.sender]>=_value);\r\n        allowed[_from][msg.sender] -= _value;\r\n        _transfer(_from,_to,_value);\r\n        // emit Transfer(msg.sender,_from,_to,_value);\r\n        emit Transfer(_from,_to,_value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPrice\",\"type\":\"uint256\"},{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newDivisor\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"centralMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"revenue\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"}],\"name\":\"SetPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenAccounts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"APS","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000124175746f5061796d656e745061726b696e67000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034150530000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://a0bd1d44aeb8bcfb7605ac316b990d8f27bf316e57543524c252c8eb096b19cb"}]}