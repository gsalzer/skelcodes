{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract BBTCToken is StandardToken, Owned {\r\n\r\n    /* Constants */\r\n\r\n    // Token Name\r\n    string public constant name = \"BloxOffice token\";\r\n    // Ticker Symbol\r\n    string public constant symbol = \"BBTC\";\r\n    // Decimals\r\n    uint8 public constant decimals = 18;\r\n\r\n    bool public tokenSaleClosed = false;\r\n\r\n\r\n\r\n    /* Owners */\r\n\r\n    // Ethereum fund owner wallet\r\n    address public _fundowner = 0x761cE04C269314fAfCC545301414BfDA21539A75;\r\n\r\n    // Dev Team multisig wallet\r\n    address public _devteam = 0xb3871355181558059fB22ae7AfAd415499ae6f1E;\r\n\r\n    // Advisors & Mentors multisig wallet\r\n    address public _mentors = 0x589789B67aE612f47503E80ED14A18593C1C79BE;\r\n\r\n    //Bounty address\r\n    address public _bounty = 0x923A03dE5816CCB29684F6D420e774d721Ac6962;\r\n\r\n    //private Sale; multisig wallet\r\n    address public _privateSale = 0x90aBD12D92c0E5f5BcD2195ee3C6C15026506B96;\r\n\r\n    /* Token Distribution */\r\n\r\n    // Total supply of Tokens 999 Million\r\n    uint256 public totalSupply = 999999999 * 10**uint256(decimals);\r\n\r\n    // CrowdSale hard cap\r\n    uint256 public TOKENS_SALE_HARD_CAP = 669999999 * 10**uint256(decimals);\r\n\r\n    //Dev Team\r\n    uint256 public DEV_TEAM = 160000000 * 10**uint256(decimals);\r\n\r\n    //Mentors\r\n    uint256 public MENTORS = 80000000 * 10**uint256(decimals);\r\n\r\n    //Bounty\r\n    uint256 public BOUNTY = 20000000 * 10**uint256(decimals);\r\n\r\n    //Private Sale\r\n    uint256 public PRIVATE = 70000000 * 10**uint256(decimals);\r\n\r\n    /* Current max supply */\r\n    uint256 public currentSupply;\r\n\r\n\r\n    //Dates\r\n    //Private Sale\r\n    uint64 private constant privateSaleDate = 1519756200;\r\n\r\n    //Pre-sale Start Date 15 April\r\n    uint64 private constant presaleStartDate = 1523730600;\r\n    //Pre-sale End Date 15 May\r\n    uint64 private constant presaleEndDate = 1526408999;\r\n\r\n\r\n    //CrowdSale Start Date 22-May\r\n    uint64 private constant crowdSaleStart = 1526927400;\r\n    //CrowdSale End Date 6 July\r\n    uint64 private constant crowdSaleEnd = 1530901799;\r\n\r\n\r\n    /* Base exchange rate is set to 1 ETH = 2500 BBTC */\r\n    uint256 public constant BASE_RATE = 2500;\r\n\r\n    /* Constructor */\r\n    function BBTCToken(){\r\n      //Assign the initial tokens\r\n      //For dev team\r\n      balances[_devteam] = DEV_TEAM;\r\n\r\n      //For mentors\r\n      balances[_mentors] = MENTORS;\r\n\r\n      //For bounty\r\n      balances[_bounty] = BOUNTY;\r\n\r\n      //For private\r\n      balances[_privateSale] = PRIVATE;\r\n\r\n    }\r\n\r\n    /// start Token sale\r\n    function startSale () public onlyOwner{\r\n      tokenSaleClosed = false;\r\n    }\r\n\r\n    //stop Token sale\r\n    function stopSale () public onlyOwner {\r\n      tokenSaleClosed = true;\r\n    }\r\n\r\n    /// @return if the token sale is finished\r\n      function saleDue() public view returns (bool) {\r\n          return crowdSaleEnd < uint64(block.timestamp);\r\n      }\r\n\r\n    modifier inProgress {\r\n        require(currentSupply < TOKENS_SALE_HARD_CAP\r\n                && !tokenSaleClosed\r\n                && !saleDue());\r\n        _;\r\n    }\r\n\r\n    /// @dev This default function allows token to be purchased by directly\r\n    /// sending ether to this smart contract.\r\n    function () public payable {\r\n        purchaseTokens(msg.sender);\r\n    }\r\n\r\n    /// @dev Issue token based on Ether received.\r\n    /// @param _beneficiary Address that newly issued token will be sent to.\r\n    function purchaseTokens(address _beneficiary) internal inProgress {\r\n\r\n        uint256 tokens = computeTokenAmount(msg.value);\r\n\r\n        balances[_beneficiary] = balances[_beneficiary].add(tokens);\r\n\r\n        /// forward the raised funds to the fund address\r\n        _fundowner.transfer(msg.value);\r\n    }\r\n\r\n\r\n    /// @dev Compute the amount of ING token that can be purchased.\r\n    /// @param ethAmount Amount of Ether to purchase ING.\r\n    /// @return Amount of ING token to purchase\r\n    function computeTokenAmount(uint256 ethAmount) internal view returns (uint256 tokens) {\r\n        /// the percentage value (0-100) of the discount for each tier\r\n        uint64 discountPercentage = currentTierDiscountPercentage();\r\n\r\n        uint256 tokenBase = ethAmount.mul(BASE_RATE);\r\n        uint256 tokenBonus = tokenBase.mul(discountPercentage).div(100);\r\n\r\n        tokens = tokenBase.add(tokenBonus);\r\n    }\r\n\r\n\r\n    /// @dev Determine the current sale tier.\r\n      /// @return the index of the current sale tier.\r\n      function currentTierDiscountPercentage() internal view returns (uint64) {\r\n          uint64 _now = uint64(block.timestamp);\r\n\r\n          if(_now > crowdSaleStart) return 0;\r\n          if(_now > presaleStartDate) return 10;\r\n          if(_now > privateSaleDate) return 15;\r\n          return 0;\r\n      }\r\n\r\n    /// @dev issue tokens for a single buyer\r\n    /// @param _beneficiary addresses that the tokens will be sent to.\r\n    /// @param _tokensAmount the amount of tokens, with decimals expanded (full).\r\n    function doIssueTokens(address _beneficiary, uint256 _tokensAmount) public {\r\n        require(_beneficiary != address(0));\r\n\r\n        // compute without actually increasing it\r\n        uint256 increasedTotalSupply = currentSupply.add(_tokensAmount);\r\n        // roll back if hard cap reached\r\n        require(increasedTotalSupply <= TOKENS_SALE_HARD_CAP);\r\n\r\n        // increase token total supply\r\n          currentSupply = increasedTotalSupply;\r\n        // update the buyer's balance to number of tokens sent\r\n        balances[_beneficiary] = balances[_beneficiary].add(_tokensAmount);\r\n    }\r\n\r\n\r\n    /// @dev Returns the current price.\r\n    function price() public view returns (uint256 tokens) {\r\n      return computeTokenAmount(1 ether);\r\n    }\r\n  }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"doIssueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MENTORS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mentors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRIVATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_fundowner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEV_TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_devteam\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleDue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNTY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_privateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_SALE_HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BBTCToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0c305fe26e7b19bb14b78c2c225286c2efcd999443cada7c23db84d2130028b9"}]}