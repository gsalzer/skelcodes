{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) public;\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a==0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract GameTable {\r\n    using SafeMath for uint;\r\n\r\n    struct Player {\r\n        address addr;\r\n        uint amount;\r\n        uint profit;\r\n    }\r\n\r\n    struct Option {\r\n        uint optionid;\r\n        bytes32 optionName;\r\n        bytes32 optionImage;\r\n        uint amount;\r\n        uint numPlayers;\r\n        mapping (uint => Player) players;\r\n        mapping (address => uint) playeramounts;\r\n    }\r\n\r\n    struct Game {\r\n        address gameManager;\r\n        bytes32 gameName;\r\n        uint numOptions;\r\n        uint amount;\r\n        uint balance;\r\n        uint winner;\r\n        uint startTime;\r\n        uint endTime;\r\n        uint openTime;\r\n        uint runingStatus;\r\n        mapping (uint => Option) options;\r\n    }\r\n\r\n    address owner;\r\n    uint numGames;\r\n    mapping (uint => Game) games;\r\n    address gameDeveloper = 0x18d91206b297359e8aed91810a86D6bFF0AF3462;\r\n    //0x18d91206b297359e8aed91810a86d6bff0af3462\r\n    \r\n    function GameTable() public { \r\n        owner = msg.sender;\r\n        numGames=0;\r\n    }\r\n    \r\n    function kill() public {\r\n       if (owner == msg.sender) { \r\n          selfdestruct(owner);\r\n       }\r\n    }\r\n\r\n    function newGame(bytes32 name, uint startDuration, uint endDuration, uint openDuration)  public returns (uint) {\r\n        if(startDuration < 1 || openDuration>888888888888 || endDuration<startDuration || openDuration<startDuration || openDuration<endDuration || owner != msg.sender) revert();\r\n        address manager =  msg.sender;\r\n        uint startTime = now + startDuration * 1 minutes;\r\n        uint endTime = now + endDuration * 1 minutes;\r\n        uint openTime = now + openDuration * 1 minutes;\r\n        games[numGames] = Game(manager, name, 0, 0, 0, 0, startTime, endTime, openTime, 0);\r\n        numGames = numGames+1; \r\n        return (numGames-1);\r\n    }\r\n\r\n    function getGameNum() public constant returns(uint) {return numGames;}\r\n\r\n    function getGameInfo (uint gameinx) public constant returns(bytes32 _gamename,uint _numoptions,uint _amount,uint _startTime,uint _endTime,uint _openTime,uint _runingStatus) {\r\n        _gamename = games[gameinx].gameName;\r\n        _numoptions = games[gameinx].numOptions;\r\n        _amount = games[gameinx].amount;\r\n        _startTime = games[gameinx].startTime;\r\n        _endTime = games[gameinx].endTime;\r\n        _openTime = games[gameinx].openTime;\r\n        _runingStatus = games[gameinx].runingStatus;\r\n    }\r\n    \r\n\r\n    function newOption(uint gameinx, uint optionid, bytes32 name, bytes32 optionimage)  public returns (uint) {\r\n        if (owner != msg.sender) revert();\r\n        if (gameinx > numGames) revert();\r\n        if (now >= games[gameinx].startTime) revert();\r\n        if (games[gameinx].runingStatus == 0){\r\n            games[gameinx].runingStatus = 1;\r\n        }\r\n        games[gameinx].numOptions = games[gameinx].numOptions+1;\r\n        games[gameinx].options[games[gameinx].numOptions-1] = Option(optionid, name, optionimage, 0, 0);\r\n        return games[gameinx].numOptions-1;\r\n    }\r\n\r\n\r\n    function getGameWinner (uint gameinx) public constant returns(uint) {return games[gameinx].winner;}\r\n    function getOptionInfo (uint gameinx, uint optioninx) public constant returns(uint _gameinx, uint _optionid, uint _optioninx,bytes32 _optionname,bytes32 _optionimage,uint _numplayers, uint _amount, uint _playeramount) {\r\n        _gameinx = gameinx;\r\n        _optioninx = optioninx;\r\n        _optionid = games[gameinx].options[optioninx].optionid;\r\n        _optionname = games[gameinx].options[optioninx].optionName;\r\n        _optionimage = games[gameinx].options[optioninx].optionImage;\r\n        _numplayers = games[gameinx].options[optioninx].numPlayers;\r\n        _amount = games[gameinx].options[optioninx].amount;\r\n        _playeramount = games[gameinx].options[optioninx].playeramounts[msg.sender];\r\n    }\r\n\r\n    function getPlayerPlayInfo (uint gameinx, uint optioninx, uint playerinx) public constant returns(address _addr, uint _amount, uint _profit) {\r\n        if(msg.sender != owner) revert();\r\n        _addr = games[gameinx].options[optioninx].players[playerinx].addr;\r\n        _amount = games[gameinx].options[optioninx].players[playerinx].amount;\r\n        _profit = games[gameinx].options[optioninx].players[playerinx].profit;\r\n    }\r\n\r\n    function getPlayerAmount (uint gameinx, uint optioninx, address addr) public constant returns(uint) {\r\n        if(msg.sender != owner) revert();\r\n        return games[gameinx].options[optioninx].playeramounts[addr];\r\n    }\r\n\r\n  \r\n    function contribute(uint gameinx,uint optioninx)  public payable {\r\n        if ((gameinx<0)||(gameinx>999999999999999999999999999999999999)||(optioninx<0)) revert();\r\n        if (optioninx >= games[gameinx].numOptions) revert();\r\n        if (now <= games[gameinx].startTime) revert();\r\n        if (now >= games[gameinx].endTime) revert();\r\n        //1000000000000000000=1eth\r\n        //5000000000000000  = 0.005 ETH\r\n        if (msg.value<5000000000000000 || msg.value>1000000000000000000000000000) revert();\r\n        if (games[gameinx].amount > 99999999999999999999999999999999999999999999999999999999) revert();\r\n\r\n        games[gameinx].options[optioninx].players[games[gameinx].options[optioninx].numPlayers++] = Player({addr: msg.sender, amount: msg.value, profit:0});\r\n        games[gameinx].options[optioninx].amount = games[gameinx].options[optioninx].amount.add(msg.value);\r\n        games[gameinx].options[optioninx].playeramounts[msg.sender] = games[gameinx].options[optioninx].playeramounts[msg.sender].add(msg.value);\r\n        games[gameinx].amount = games[gameinx].amount.add(msg.value);\r\n    }\r\n\r\n    function setWinner(uint gameinx,bytes32 gameName, uint optioninx, uint optionid, bytes32 optionName) public returns(bool res) {\r\n        if (owner != msg.sender) revert();\r\n        if ((now <= games[gameinx].openTime)||(games[gameinx].runingStatus>1)) revert();\r\n        if (gameName != games[gameinx].gameName) revert();\r\n        if (games[gameinx].options[optioninx].optionName != optionName) revert();\r\n        if (games[gameinx].options[optioninx].optionid != optionid) revert();\r\n\r\n        games[gameinx].winner = optioninx;\r\n        games[gameinx].runingStatus = 2;\r\n        safeWithdrawal(gameinx);\r\n        return true;\r\n    }\r\n\r\n    function safeWithdrawal(uint gameid) private {\r\n        \r\n        if ((gameid<0)||(gameid>999999999999999999999999999999999999)) revert();\r\n        if (now <= games[gameid].openTime) revert();\r\n        if (games[gameid].runingStatus != 2) revert();\r\n\r\n        uint winnerID = games[gameid].winner;\r\n        if (winnerID >0 && winnerID < 9999) {\r\n            \r\n            games[gameid].runingStatus = 3;\r\n            uint totalWinpool = games[gameid].options[winnerID].amount;\r\n            totalWinpool = games[gameid].amount.sub(totalWinpool);\r\n            //Calculate Fee\r\n            uint fee = totalWinpool.mul(15);\r\n            fee = fee.div(1000);\r\n            uint reward=totalWinpool.sub(fee);\r\n            //1000000000000000000=1eth\r\n            if(games[gameid].options[winnerID].amount<100000000000){\r\n                gameDeveloper.transfer(reward);\r\n            }\r\n            else{\r\n                uint ratio = reward.mul(100);\r\n                ratio = ratio.div(games[gameid].options[winnerID].amount); //safe????\r\n                uint totalReturn = 0;\r\n                for(uint i = 0; i < games[gameid].options[winnerID].numPlayers; i++) {\r\n                    uint returnWinAmount = games[gameid].options[winnerID].players[i].amount.mul(ratio);\r\n                    returnWinAmount = returnWinAmount.div(100);\r\n                    returnWinAmount = games[gameid].options[winnerID].players[i].amount.add(returnWinAmount);\r\n                    games[gameid].options[winnerID].players[i].addr.transfer(returnWinAmount);\r\n                    games[gameid].options[winnerID].players[i].profit = returnWinAmount;\r\n                    totalReturn = totalReturn.add(returnWinAmount);\r\n                }  \r\n                uint totalFee = games[gameid].amount.sub(totalReturn);\r\n                gameDeveloper.transfer(totalFee);\r\n            }\r\n        }\r\n    } \r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"gameinx\",\"type\":\"uint256\"},{\"name\":\"optionid\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"optionimage\",\"type\":\"bytes32\"}],\"name\":\"newOption\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameinx\",\"type\":\"uint256\"}],\"name\":\"getGameInfo\",\"outputs\":[{\"name\":\"_gamename\",\"type\":\"bytes32\"},{\"name\":\"_numoptions\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_openTime\",\"type\":\"uint256\"},{\"name\":\"_runingStatus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameinx\",\"type\":\"uint256\"},{\"name\":\"gameName\",\"type\":\"bytes32\"},{\"name\":\"optioninx\",\"type\":\"uint256\"},{\"name\":\"optionid\",\"type\":\"uint256\"},{\"name\":\"optionName\",\"type\":\"bytes32\"}],\"name\":\"setWinner\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameinx\",\"type\":\"uint256\"},{\"name\":\"optioninx\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPlayerAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"startDuration\",\"type\":\"uint256\"},{\"name\":\"endDuration\",\"type\":\"uint256\"},{\"name\":\"openDuration\",\"type\":\"uint256\"}],\"name\":\"newGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameinx\",\"type\":\"uint256\"},{\"name\":\"optioninx\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameinx\",\"type\":\"uint256\"},{\"name\":\"optioninx\",\"type\":\"uint256\"}],\"name\":\"getOptionInfo\",\"outputs\":[{\"name\":\"_gameinx\",\"type\":\"uint256\"},{\"name\":\"_optionid\",\"type\":\"uint256\"},{\"name\":\"_optioninx\",\"type\":\"uint256\"},{\"name\":\"_optionname\",\"type\":\"bytes32\"},{\"name\":\"_optionimage\",\"type\":\"bytes32\"},{\"name\":\"_numplayers\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_playeramount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameinx\",\"type\":\"uint256\"},{\"name\":\"optioninx\",\"type\":\"uint256\"},{\"name\":\"playerinx\",\"type\":\"uint256\"}],\"name\":\"getPlayerPlayInfo\",\"outputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_profit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameinx\",\"type\":\"uint256\"}],\"name\":\"getGameWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"GameTable","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b27944409204a0496f711ca0c419c5276ad2291a3eb7f720e262bf8e67d048f3"}]}