{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant public returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant public returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public  returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        if (msg.data.length < size + 4) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public onlyPayloadSize(2 * 32) returns (bool) {\r\n        require(balances[msg.sender] >= _amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _addr) public constant returns (uint256) {\r\n        return balances[_addr];\r\n    }\r\n}\r\n\r\ncontract AdvancedToken is BasicToken, ERC20 {\r\n\r\n    mapping (address => mapping (address => uint256)) allowances;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) public onlyPayloadSize(3 * 32) returns (bool) {\r\n        require(allowances[_from][msg.sender] >= _amount && balances[_from] >= _amount);\r\n        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_amount);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public returns (bool) {\r\n        allowances[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _amount) public returns (bool) {\r\n        allowances[msg.sender][_spender] = allowances[msg.sender][_spender].add(_amount);\r\n        Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _amount) public returns (bool) {\r\n        require(allowances[msg.sender][_spender] != 0);\r\n        if (_amount >= allowances[msg.sender][_spender]) {\r\n            allowances[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowances[msg.sender][_spender] = allowances[msg.sender][_spender].sub(_amount);\r\n            Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\r\n        }\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\ncontract MintableToken is AdvancedToken {\r\n\r\n    bool public mintingFinished;\r\n\r\n    event TokensMinted(address indexed to, uint256 amount);\r\n    event MintingFinished();\r\n\r\n    function mint(address _to, uint256 _amount) external onlyOwner onlyPayloadSize(2 * 32) returns (bool) {\r\n        require(_to != 0x0 && _amount > 0 && !mintingFinished);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        totalSupply = totalSupply.add(_amount);\r\n        Transfer(0x0, _to, _amount);\r\n        TokensMinted(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() external onlyOwner {\r\n        require(!mintingFinished);\r\n        mintingFinished = true;\r\n        MintingFinished();\r\n    }\r\n\r\n    function mintingFinished() public constant returns (bool) {\r\n        return mintingFinished;\r\n    }\r\n}\r\n\r\ncontract ACO is MintableToken {\r\n\r\n    uint8 public decimals;\r\n    string public name;\r\n    string public symbol;\r\n\r\n    function ACO() public {\r\n        totalSupply = 0;\r\n        decimals = 18;\r\n        name = \"ACO\";\r\n        symbol = \"ACO\";\r\n    }\r\n}\r\n\r\ncontract MultiOwnable {\r\n    \r\n    address[2] public owners;\r\n\r\n    event OwnershipTransferred(address from, address to);\r\n    event OwnershipGranted(address to);\r\n\r\n    function MultiOwnable() public {\r\n        owners[0] = 0x1d554c421182a94E2f4cBD833f24682BBe1eeFe8; \r\n        owners[1] = 0x0D7a2716466332Fc5a256FF0d20555A44c099453; \r\n    }\r\n\r\n    modifier onlyOwners {\r\n        require(msg.sender == owners[0] || msg.sender == owners[1]);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwners {\r\n        require(_newOwner != 0x0 && _newOwner != owners[0] && _newOwner != owners[1]);\r\n        if (msg.sender == owners[0]) {\r\n            OwnershipTransferred(owners[0], _newOwner);\r\n            owners[0] = _newOwner;\r\n        } else {\r\n            OwnershipTransferred(owners[1], _newOwner);\r\n            owners[1] = _newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Crowdsale is Ownable, MultiOwnable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    ACO public ACO_Token;\r\n\r\n    address public constant MULTI_SIG = 0x3Ee28dA5eFe653402C5192054064F12a42EA709e;\r\n\r\n    uint256 public rate;\r\n\r\n    uint256 public tokensSold;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    uint256 public softCap;\r\n    uint256 public hardCap;\r\n\r\n    uint256[4] public bonusStages;\r\n\r\n    mapping (address => uint256) investments;\r\n    mapping (address => bool) hasAuthorizedWithdrawal;\r\n\r\n    event TokensPurchased(address indexed by, uint256 amount);\r\n    event RefundIssued(address indexed by, uint256 amount);\r\n    event FundsWithdrawn(address indexed by, uint256 amount);\r\n    event DurationAltered(uint256 newEndTime);\r\n    event NewSoftCap(uint256 newSoftCap);\r\n    event NewHardCap(uint256 newHardCap);\r\n    event NewRateSet(uint256 newRate);\r\n    event HardCapReached();\r\n    event SoftCapReached();\r\n\r\n    function Crowdsale() public {\r\n        ACO_Token = new ACO();\r\n        softCap = 0; \r\n        hardCap = 250000000e18; \r\n        rate = 4000;\r\n        startTime = now;\r\n        endTime = startTime.add(365 days);\r\n        bonusStages[0] = startTime.add(6 weeks);\r\n\r\n        for(uint i = 1; i < bonusStages.length; i++) {\r\n            bonusStages[i] = bonusStages[i - 1].add(6 weeks);\r\n        }\r\n    }\r\n\r\n    function processOffchainPayment(address _beneficiary, uint256 _toMint) public onlyOwners {\r\n        require(_beneficiary != 0x0 && now <= endTime && tokensSold.add(_toMint) <= hardCap && _toMint > 0);\r\n        if(tokensSold.add(_toMint) == hardCap) { HardCapReached(); }\r\n        if(tokensSold.add(_toMint) >= softCap && !isSuccess()) { SoftCapReached(); }\r\n        ACO_Token.mint(_beneficiary, _toMint);\r\n        tokensSold = tokensSold.add(_toMint);\r\n        TokensPurchased(_beneficiary, _toMint);\r\n    }\r\n\r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address _beneficiary) public payable {\r\n        require(_beneficiary != 0x0 && validPurchase() && tokensSold.add(calculateTokensToMint()) <= hardCap); \r\n        if(tokensSold.add(calculateTokensToMint()) == hardCap) { HardCapReached(); }\r\n        if(tokensSold.add(calculateTokensToMint()) >= softCap && !isSuccess()) { SoftCapReached(); }\r\n        uint256 toMint = calculateTokensToMint();\r\n        ACO_Token.mint(_beneficiary, toMint);\r\n        tokensSold = tokensSold.add(toMint);\r\n        investments[_beneficiary] = investments[_beneficiary].add(msg.value);\r\n        TokensPurchased(_beneficiary, toMint); \r\n    }\r\n\r\n    function calculateTokensToMint() internal view returns(uint256 toMint) {\r\n        toMint = msg.value.mul(getCurrentRateWithBonus());\r\n    }\r\n\r\n    function getCurrentRateWithBonus() public view returns (uint256 rateWithBonus) {\r\n        rateWithBonus = (rate.mul(getBonusPercentage()).div(100)).add(rate);\r\n    }\r\n\r\n    function getBonusPercentage() internal view returns (uint256 bonusPercentage) {\r\n        uint256 timeStamp = now;\r\n        if (timeStamp > bonusStages[3]) {\r\n            bonusPercentage = 0;\r\n        } else { \r\n            bonusPercentage = 25;\r\n            for (uint i = 0; i < bonusStages.length; i++) {\r\n                if (timeStamp <= bonusStages[i]) {\r\n                    break;\r\n                } else {\r\n                    bonusPercentage = bonusPercentage.sub(5);\r\n                }\r\n            }\r\n        }\r\n        return bonusPercentage;\r\n    }\r\n\r\n    function authorizeWithdrawal() public onlyOwners {\r\n        require(hasEnded() && isSuccess() && !hasAuthorizedWithdrawal[msg.sender]);\r\n        hasAuthorizedWithdrawal[msg.sender] = true;\r\n        if (hasAuthorizedWithdrawal[owners[0]] && hasAuthorizedWithdrawal[owners[1]]) {\r\n            FundsWithdrawn(owners[0], this.balance);\r\n            MULTI_SIG.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    function issueBounty(address _to, uint256 _toMint) public onlyOwners {\r\n        require(_to != 0x0 && _toMint > 0 && tokensSold.add(_toMint) <= hardCap);\r\n        ACO_Token.mint(_to, _toMint);\r\n        tokensSold = tokensSold.add(_toMint);\r\n    }\r\n\r\n    function finishMinting() public onlyOwners {\r\n        require(hasEnded());\r\n        ACO_Token.finishMinting();\r\n    }\r\n\r\n    function getRefund(address _addr) public {\r\n        if(_addr == 0x0) { _addr = msg.sender; }\r\n        require(!isSuccess() && hasEnded() && investments[_addr] > 0);\r\n        uint256 toRefund = investments[_addr];\r\n        investments[_addr] = 0;\r\n        _addr.transfer(toRefund);\r\n        RefundIssued(_addr, toRefund);\r\n    }\r\n    \r\n    function giveRefund(address _addr) public onlyOwner {\r\n        require(_addr != 0x0 && investments[_addr] > 0);\r\n        uint256 toRefund = investments[_addr];\r\n        investments[_addr] = 0;\r\n        _addr.transfer(toRefund);\r\n        RefundIssued(_addr, toRefund);\r\n    }\r\n\r\n    function isSuccess() public view returns(bool success) {\r\n        success = tokensSold >= softCap;\r\n    }\r\n\r\n    function hasEnded() public view returns(bool ended) {\r\n        ended = now > endTime;\r\n    }\r\n\r\n    function investmentOf(address _addr) public view returns(uint256 investment) {\r\n        investment = investments[_addr];\r\n    }\r\n\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n    function setEndTime(uint256 _numberOfDays) public onlyOwners {\r\n        require(_numberOfDays > 0);\r\n        endTime = now.add(_numberOfDays * 1 days);\r\n        DurationAltered(endTime);\r\n    }\r\n\r\n    function changeSoftCap(uint256 _newSoftCap) public onlyOwners {\r\n        require(_newSoftCap > 0);\r\n        softCap = _newSoftCap;\r\n        NewSoftCap(softCap);\r\n    }\r\n\r\n    function changeHardCap(uint256 _newHardCap) public onlyOwners {\r\n        assert(_newHardCap > 0);\r\n        hardCap = _newHardCap;\r\n        NewHardCap(hardCap);\r\n    }\r\n\r\n    function changeRate(uint256 _newRate) public onlyOwners {\r\n        require(_newRate > 0);\r\n        rate = _newRate;\r\n        NewRateSet(rate);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_toMint\",\"type\":\"uint256\"}],\"name\":\"issueBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSuccess\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_toMint\",\"type\":\"uint256\"}],\"name\":\"processOffchainPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newHardCap\",\"type\":\"uint256\"}],\"name\":\"changeHardCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSoftCap\",\"type\":\"uint256\"}],\"name\":\"changeSoftCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"authorizeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MULTI_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRateWithBonus\",\"outputs\":[{\"name\":\"rateWithBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"giveRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"investmentOf\",\"outputs\":[{\"name\":\"investment\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACO_Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numberOfDays\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"ended\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newEndTime\",\"type\":\"uint256\"}],\"name\":\"DurationAltered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newSoftCap\",\"type\":\"uint256\"}],\"name\":\"NewSoftCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newHardCap\",\"type\":\"uint256\"}],\"name\":\"NewHardCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"NewRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HardCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SoftCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipGranted\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c895d8fbf068fb49fe1d80b2283e34cb92c782b21f6d73467d37512991e17e17"}]}