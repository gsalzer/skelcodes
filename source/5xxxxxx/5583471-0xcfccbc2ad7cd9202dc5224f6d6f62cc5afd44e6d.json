{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    //SafeMath library for preventing overflow when dealing with uint256 in solidity\r\n\r\n   /**\r\n   * @dev Multiplies two numbers, throws on overflow.\r\n   */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    //ERC20 contract used as an interface. Implementation of functions provided in the derived contract.\r\n\r\n    string public NAME;\r\n    string public SYMBOL;\r\n    uint8 public DECIMALS = 18; // 18 DECIMALS is the strongly suggested default, avoid changing it\r\n\r\n    //total supply (TOTALSUPPLY) is declared private and can be accessed via totalSupply()\r\n    uint private TOTALSUPPLY;\r\n\r\n    // Balances for each account\r\n    mapping(address => uint256) balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    //This is a mapping of a mapping\r\n    // This mapping keeps track of the allowances given\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n                 //*** ERC20 FUNCTIONS ***//\r\n    //1\r\n    //Allows an instance of a contract to calculate and return the total amount\r\n    //of the token that exists.\r\n    function totalSupply() public constant returns (uint256 _totalSupply);\r\n\r\n    //2\r\n    //Allows a contract to store and return the balance of the provided address (parameter)\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n    //3\r\n    //Lets the caller send a given amount(_amount) of the token to another address(_to).\r\n    //Note: returns a boolean indicating whether transfer was successful\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    //4\r\n    //Owner \"approves\" the given address to withdraw instances of the tokens from the owners address\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    //5\r\n    //Lets an \"approved\" address transfer the approved amount from the address that called approve()\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    //6\r\n    //returns the amount of tokens approved by the owner that can *Still* be transferred\r\n    //to the spender's account using the transferFrom method.\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n            //***ERC20 Events***//\r\n    //Event 1\r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    //Event 2\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    //Event triggered when owner address is changed.\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Bitcub is Ownable, ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant NAME = \"Bitcub\";\r\n    string public constant SYMBOL = \"BCU\";\r\n    uint8 public constant DECIMALS = 18; // 18 DECIMALS is the strongly suggested default, avoid changing it\r\n\r\n    //total supply (TOTALSUPPLY) is declared private and constant and can be accessed via totalSupply()\r\n    uint private constant TOTALSUPPLY = 500000000*(10**18);\r\n\r\n    // Balances for each account\r\n    mapping(address => uint256) balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    //This is a mapping of a mapping\r\n    // This mapping keeps track of the allowances given\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    //Constructor FOR BITCUB TOKEN\r\n    constructor() public {\r\n        //establishes ownership of the contract upon creation\r\n        Ownable(msg.sender);\r\n\r\n        /* IMPLEMENTING ALLOCATION OF TOKENS */\r\n        balances[0xaf0A558783E92a1aEC9dd2D10f2Dc9b9AF371212] = 150000000*(10**18);\r\n        /* Transfer Events for the allocations */\r\n        emit Transfer(address(0), 0xaf0A558783E92a1aEC9dd2D10f2Dc9b9AF371212, 150000000*(10**18));\r\n\r\n        //sends all the unallocated tokens (350,000,000 tokens) to the address of the contract creator (The Crowdsale Contract)\r\n        balances[msg.sender] = TOTALSUPPLY.sub(150000000*(10**18)); \r\n        //Transfer event for sending tokens to Crowdsale Contract\r\n        emit Transfer(address(0), msg.sender, TOTALSUPPLY.sub(150000000*(10**18)));\r\n    }\r\n\r\n                 //*** ERC20 FUNCTIONS ***//\r\n    //1\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public constant returns (uint256 _totalSupply) {\r\n        //set the named return variable as the global variable totalSupply\r\n        _totalSupply = TOTALSUPPLY;\r\n    }\r\n\r\n    //2\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    //3\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    //Note: returns a boolean indicating whether transfer was successful\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0)); //not sending to burn address\r\n        require(_value <= balances[msg.sender]); // If the sender has sufficient funds to send\r\n        require(_value>0);// and the amount is not zero or negative\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    //4\r\n    //Owner \"approves\" the given address to withdraw instances of the tokens from the owners address\r\n    /**\r\n       * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n       *\r\n       * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n       * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n       * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n       * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n       * @param _spender The address which will spend the funds.\r\n       * @param _value The amount of tokens to be spent.\r\n       */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    //5\r\n    //Lets an \"approved\" address transfer the approved amount from the address that called approve()\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    //6\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    //additional functions for altering allowances\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n              //***ERC20 Events***//\r\n    //Event 1\r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    //Event 2\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n}\r\n\r\n\r\n//Using OpenZeppelin Crowdsale contract as a reference and altered, also using ethereum.org/Crowdsale as a reference.\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n\r\n //The original OpenZeppelin contract requires a MintableToken that will be\r\n * minted as contributions arrive, note that the crowdsale contract\r\n * must be owner of the token in order to be able to mint it.\r\n //This version does not use a MintableToken.\r\n */\r\ncontract BitcubCrowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    Bitcub public token;\r\n\r\n    //The amount of the tokens remaining that are unsold.\r\n    uint256 remainingTokens = 350000000 *(10**18);\r\n\r\n    // start and end timestamps where investments are allowed (inclusive), as well as timestamps for beginning and end of presale tiers\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    uint256 public tier1Start;\r\n    uint256 public tier1End;\r\n    uint256 public tier2Start;\r\n    uint256 public tier2End;\r\n\r\n    // address where funds are collected\r\n    address public etherWallet;\r\n    // address where unsold tokens are sent\r\n    address public tokenWallet;\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public rate = 100;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    //minimum purchase for an buyer in amount of ether (1 token)\r\n    uint256 public minPurchaseInEth = 0.01 ether;\r\n  \r\n    //maximum investment for an investor in amount of tokens\r\n    //To set max investment to 5% of total, it is 25,000,000 tokens, which is 250000 ETH\r\n    uint256 public maxInvestment = 250000 ether;\r\n  \r\n    //mapping to keep track of the amount invested by each address.\r\n    mapping (address => uint256) internal invested;\r\n\r\n\r\n    /**\r\n    * event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    //Constructor for crowdsale.\r\n    constructor() public {\r\n        //hard coded times and wallets \r\n        startTime = now ;\r\n        tier1Start = startTime ;\r\n        tier1End = 1528416000 ; //midnight on 2018-06-08 GMT\r\n        tier2Start = tier1End;\r\n        tier2End = 1532131200 ; //midnight on 2018-07-21 GMT\r\n        endTime = 1538265600 ; //midnight on 2018-09-30 GMT\r\n        etherWallet = 0xaf0A558783E92a1aEC9dd2D10f2Dc9b9AF371212;\r\n        tokenWallet = 0xaf0A558783E92a1aEC9dd2D10f2Dc9b9AF371212;\r\n\r\n        require(startTime >= now);\r\n        require(endTime >= startTime);\r\n        require(etherWallet != address(0));\r\n\r\n        //establishes ownership of the contract upon creation\r\n        Ownable(msg.sender);\r\n\r\n        //calls the function to create the token contract itself.\r\n        token = createTokenContract();\r\n    }\r\n\r\n    function createTokenContract() internal returns (Bitcub) {\r\n      // Create Token contract\r\n      // The amount for sale will be assigned to the crowdsale contract, the reserves will be sent to the Bitcub Wallet\r\n        return new Bitcub();\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    //This function is called whenever ether is sent to this contract address.\r\n    function () external payable {\r\n        //calls the buyTokens function with the address of the sender as the beneficiary address\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    //This function is called after the ICO has ended to send the unsold Tokens to the specified address\r\n    function finalizeCrowdsale() public onlyOwner returns (bool) {\r\n        require(hasEnded());\r\n        require(token.transfer(tokenWallet, remainingTokens));\r\n        return true;\r\n    }\r\n\r\n    // low level token purchase function\r\n    //implements the logic for the token buying\r\n    function buyTokens(address beneficiary) public payable {\r\n        //tokens cannot be burned by sending to 0x0 address\r\n        require(beneficiary != address(0));\r\n        //token must adhere to the valid restrictions of the validPurchase() function, ie within time period and buying tokens within max/min limits\r\n        require(validPurchase(beneficiary));\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be bought\r\n        uint256 tokens = getTokenAmount(weiAmount);\r\n\r\n        //Logic so that investors must purchase at least 1 token.\r\n        require(weiAmount >= minPurchaseInEth); \r\n\r\n        //Token transfer\r\n        require(token.transfer(beneficiary, tokens));\r\n\r\n        // update state\r\n        //increment the total ammount raised by the amount of this transaction\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        //decrease the amount of remainingTokens by the amount of tokens sold\r\n        remainingTokens = remainingTokens.sub(tokens);\r\n        //increase the investment total of the buyer\r\n        invested[beneficiary] = invested[beneficiary].add(msg.value);\r\n\r\n        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        //transfer the ether received to the specified recipient address\r\n        forwardFunds();\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return now > endTime;\r\n    }\r\n\r\n    // Function to have a way to add business logic to your crowdsale when buying\r\n    function getTokenAmount(uint256 weiAmount) internal returns(uint256) {\r\n        //Logic for pricing based on the Tiers of the crowdsale\r\n        // These bonus amounts and the number of tiers itself can be changed\r\n        /*This means that:\r\n            - If you purchase within the tier 1 ICO (earliest tier)\r\n            you receive a 20% bonus in your token purchase.\r\n            - If you purchase within the tier 2 ICO (later tier)\r\n            you receive a 10% bonus in your token purchase.\r\n            - If you purchase outside of any of the defined bonus tiers then you\r\n            receive the original rate of tokens (1 token per 0.01 ether)\r\n            */\r\n        if (now>=tier1Start && now < tier1End) {\r\n            rate = 120;\r\n        }else if (now>=tier2Start && now < tier2End) {\r\n            rate = 110;\r\n        }else {\r\n            rate = 100;\r\n        }\r\n\r\n        return weiAmount.mul(rate);\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        etherWallet.transfer(msg.value);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase(address beneficiary) internal view returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        bool withinMaxInvestment = ( invested[beneficiary].add(msg.value) <= maxInvestment );\r\n\r\n        return withinPeriod && nonZeroPurchase && withinMaxInvestment;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Bitcub","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1fddd44b98c9176e3d2763fcb54c05ce73ec2d63a62f879a65419e03bc0ea165"}]}