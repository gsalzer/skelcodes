{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/// @title DepositWalletInterface\r\n///\r\n/// Defines an interface for a wallet that can be deposited/withdrawn by 3rd contract\r\ncontract DepositWalletInterface {\r\n    function deposit(address _asset, address _from, uint256 amount) public returns (uint);\r\n    function withdraw(address _asset, address _to, uint256 amount) public returns (uint);\r\n}\r\n\r\n/**\r\n * @title Owned contract with safe ownership pass.\r\n *\r\n * Note: all the non constant functions return false instead of throwing in case if state change\r\n * didn't happen yet.\r\n */\r\ncontract Owned {\r\n    /**\r\n     * Contract owner address\r\n     */\r\n    address public contractOwner;\r\n\r\n    /**\r\n     * Contract owner address\r\n     */\r\n    address public pendingContractOwner;\r\n\r\n    function Owned() {\r\n        contractOwner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Owner check modifier\r\n    */\r\n    modifier onlyContractOwner() {\r\n        if (contractOwner == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Destroy contract and scrub a data\r\n     * @notice Only owner can call it\r\n     */\r\n    function destroy() onlyContractOwner {\r\n        suicide(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Prepares ownership pass.\r\n     *\r\n     * Can only be called by current owner.\r\n     *\r\n     * @param _to address of the next owner. 0x0 is not allowed.\r\n     *\r\n     * @return success.\r\n     */\r\n    function changeContractOwnership(address _to) onlyContractOwner() returns(bool) {\r\n        if (_to  == 0x0) {\r\n            return false;\r\n        }\r\n\r\n        pendingContractOwner = _to;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Finalize ownership pass.\r\n     *\r\n     * Can only be called by pending owner.\r\n     *\r\n     * @return success.\r\n     */\r\n    function claimContractOwnership() returns(bool) {\r\n        if (pendingContractOwner != msg.sender) {\r\n            return false;\r\n        }\r\n\r\n        contractOwner = pendingContractOwner;\r\n        delete pendingContractOwner;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n    string public symbol;\r\n\r\n    function totalSupply() constant returns (uint256 supply);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n}\r\n\r\n/**\r\n * @title Generic owned destroyable contract\r\n */\r\ncontract Object is Owned {\r\n    /**\r\n    *  Common result code. Means everything is fine.\r\n    */\r\n    uint constant OK = 1;\r\n    uint constant OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER = 8;\r\n\r\n    function withdrawnTokens(address[] tokens, address _to) onlyContractOwner returns(uint) {\r\n        for(uint i=0;i<tokens.length;i++) {\r\n            address token = tokens[i];\r\n            uint balance = ERC20Interface(token).balanceOf(this);\r\n            if(balance != 0)\r\n                ERC20Interface(token).transfer(_to,balance);\r\n        }\r\n        return OK;\r\n    }\r\n\r\n    function checkOnlyContractOwner() internal constant returns(uint) {\r\n        if (contractOwner == msg.sender) {\r\n            return OK;\r\n        }\r\n\r\n        return OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER;\r\n    }\r\n}\r\n\r\ncontract BaseWallet is Object, DepositWalletInterface {\r\n\r\n    uint constant CUSTOMER_WALLET_SCOPE = 60000;\r\n    uint constant CUSTOMER_WALLET_NOT_OK = CUSTOMER_WALLET_SCOPE + 1;\r\n\r\n    address public customer;\r\n\r\n    modifier onlyCustomer() {\r\n        if (msg.sender != customer) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function() public payable {\r\n        revert();\r\n    }\r\n\r\n    /// Init contract by setting Emission ProviderWallet address\r\n    /// that can be associated and have an account for this contract\r\n    ///\r\n    /// @dev Allowed only for contract owner\r\n    ///\r\n    /// @param _customer Emission Provider address\r\n    ///\r\n    /// @return  code\r\n    function init(address _customer) public onlyContractOwner returns (uint code) {\r\n        require(_customer != 0x0);\r\n        customer = _customer;\r\n        return OK;\r\n    }\r\n\r\n    /// Call `selfdestruct` when contract is not needed anymore. Also takes a list of tokens\r\n    /// that can be associated and have an account for this contract\r\n    ///\r\n    /// @dev Allowed only for contract owner\r\n    ///\r\n    /// @param tokens an array of tokens addresses\r\n    function destroy(address[] tokens) public onlyContractOwner {\r\n        withdrawnTokens(tokens, msg.sender);\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    /// @dev Call destroy(address[] tokens) instead\r\n    function destroy() public onlyContractOwner {\r\n        revert();\r\n    }\r\n\r\n    /// Deposits some amount of tokens on wallet's account using ERC20 tokens\r\n    ///\r\n    /// @dev Allowed only for rewards\r\n    ///\r\n    /// @param _asset an address of token\r\n    /// @param _from an address of a sender who is willing to transfer her resources\r\n    /// @param _amount an amount of tokens (resources) a sender wants to transfer\r\n    ///\r\n    /// @return code\r\n    function deposit(address _asset, address _from, uint256 _amount) public onlyCustomer returns (uint) {\r\n        if (!ERC20Interface(_asset).transferFrom(_from, this, _amount)) {\r\n            return CUSTOMER_WALLET_NOT_OK;\r\n        }\r\n        return OK;\r\n    }\r\n\r\n    /// Withdraws some amount of tokens from wallet's account using ERC20 tokens\r\n    ///\r\n    /// @dev Allowed only for rewards\r\n    ///\r\n    /// @param _asset an address of token\r\n    /// @param _to an address of a receiver who is willing to get stored resources\r\n    /// @param _amount an amount of tokens (resources) a receiver wants to get\r\n    ///\r\n    /// @return  code\r\n    function withdraw(address _asset, address _to, uint256 _amount) public onlyCustomer returns (uint) {\r\n        if (!ERC20Interface(_asset).transfer(_to, _amount)) {\r\n            return CUSTOMER_WALLET_NOT_OK;\r\n        }\r\n        return OK;\r\n    }\r\n\r\n    /// Approve some amount of tokens from wallet's account using ERC20 tokens\r\n    ///\r\n    /// @dev Allowed only for rewards\r\n    ///\r\n    /// @param _asset an address of token\r\n    /// @param _to an address of a receiver who is willing to get stored resources\r\n    /// @param _amount an amount of tokens (resources) a receiver wants to get\r\n    ///\r\n    /// @return  code\r\n    function approve(address _asset, address _to, uint256 _amount) public onlyCustomer returns (uint) {\r\n        if (!ERC20Interface(_asset).approve(_to, _amount)) {\r\n            return CUSTOMER_WALLET_NOT_OK;\r\n        }\r\n        return OK;\r\n    }\r\n}\r\n\r\ncontract ProfiteroleWallet is BaseWallet {\r\n\t\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"code\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"customer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingContractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"ProfiteroleWallet","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a1a9075d7eaad76fac46a9f41c52033133bb27723268f591eeda0e2043b1f0a1"}]}