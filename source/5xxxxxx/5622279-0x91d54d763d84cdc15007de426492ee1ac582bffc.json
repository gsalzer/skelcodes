{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract token {\r\n    function transferFrom(address sender, address receiver, uint amount) returns(bool success) {}\r\n    function burn() {}\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract EphronIndiaCoinICO {\r\n    using SafeMath for uint;\r\n    // The maximum amount of tokens to be sold\r\n    uint constant public maxGoal = 900000; // 275 Milion CoinPoker Tokens\r\n    // There are different prices and amount available in each period\r\n    uint public prices = 100000; // 1ETH = 4200CHP, 1ETH = 3500CHP\r\n    uint public amount_stages = 27500; // the amount stages for different prices\r\n    // How much has been raised by crowdsale (in ETH)\r\n    uint public amountRaised;\r\n    // The number of tokens already sold\r\n    uint public tokensSold = 0;\r\n    // The start date of the crowdsale\r\n    uint constant public start = 1526470200; // Friday, 19 January 2018 10:00:00 GMT\r\n    // The end date of the crowdsale\r\n    uint constant public end = 1531675800; // Friday, 26 January 2018 10:00:00 GMT\r\n    // The balances (in ETH) of all token holders\r\n    mapping(address => uint) public balances;\r\n    // Indicates if the crowdsale has been ended already\r\n    bool public crowdsaleEnded = false;\r\n    // Tokens will be transfered from this address\r\n    address public tokenOwner;\r\n    // The address of the token contract\r\n    token public tokenReward;\r\n    // The wallet on which the funds will be stored\r\n    address wallet;\r\n    // Notifying transfers and the success of the crowdsale\r\n    event Finalize(address _tokenOwner, uint _amountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution, uint _amountRaised);\r\n\r\n    // ---- FOR TEST ONLY ----\r\n    uint _current = 0;\r\n    function current() public returns (uint) {\r\n        // Override not in use\r\n        if(_current == 0) {\r\n            return now;\r\n        }\r\n        return _current;\r\n    }\r\n    function setCurrent(uint __current) {\r\n        _current = __current;\r\n    }\r\n    //------------------------\r\n\r\n    // Constructor/initialization\r\n    function EphronIndiaCoinICO(address tokenAddr, address walletAddr, address tokenOwnerAddr) {\r\n        tokenReward = token(tokenAddr);\r\n        wallet = walletAddr;\r\n        tokenOwner = tokenOwnerAddr;\r\n    }\r\n\r\n    // Exchange CHP by sending ether to the contract.\r\n    function() payable {\r\n        if (msg.sender != wallet) // Do not trigger exchange if the wallet is returning the funds\r\n            exchange(msg.sender);\r\n    }\r\n\r\n    // Make an exchangement. Only callable if the crowdsale started and hasn't been ended, also the maxGoal wasn't reached yet.\r\n    // The current token price is looked up by available amount. Bought tokens is transfered to the receiver.\r\n    // The sent value is directly forwarded to a safe wallet.\r\n    function exchange(address receiver) payable {\r\n        uint amount = msg.value;\r\n        uint price = getPrice();\r\n        uint numTokens = amount.mul(price);\r\n\r\n        require(numTokens > 0);\r\n        require(!crowdsaleEnded && current() >= start && current() <= end && tokensSold.add(numTokens) <= maxGoal);\r\n\r\n        wallet.transfer(amount);\r\n        balances[receiver] = balances[receiver].add(amount);\r\n\r\n        // Calculate how much raised and tokens sold\r\n        amountRaised = amountRaised.add(amount);\r\n        tokensSold = tokensSold.add(numTokens);\r\n\r\n        assert(tokenReward.transferFrom(tokenOwner, receiver, numTokens));\r\n        FundTransfer(receiver, amount, true, amountRaised);\r\n    }\r\n    \r\n     // Looks up the current token price\r\n    function getPrice() constant returns (uint price) {\r\n        return prices;\r\n    }\r\n\r\n    // Manual exchange tokens for BTC,LTC,Fiat contributions.\r\n    // @param receiver who tokens will go to.\r\n    // @param value an amount of tokens.\r\n    function manualExchange(address receiver, uint value) {\r\n        require(msg.sender == tokenOwner);\r\n        require(tokensSold.add(value) <= maxGoal);\r\n        tokensSold = tokensSold.add(value);\r\n        assert(tokenReward.transferFrom(tokenOwner, receiver, value));\r\n    }\r\n\r\n   \r\n\r\n    modifier afterDeadline() { if (current() >= end) _; }\r\n\r\n    // Checks if the goal or time limit has been reached and ends the campaign\r\n    function finalize() afterDeadline {\r\n        require(!crowdsaleEnded);\r\n        tokenReward.burn(); // Burn remaining tokens but the reserved ones\r\n        Finalize(tokenOwner, amountRaised);\r\n        crowdsaleEnded = true;\r\n    }\r\n\r\n    // Allows the funders to withdraw their funds if the goal has not been reached.\r\n    // Only works after funds have been returned from the wallet.\r\n    function safeWithdrawal() afterDeadline {\r\n        uint amount = balances[msg.sender];\r\n        if (address(this).balance >= amount) {\r\n            balances[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                msg.sender.transfer(amount);\r\n                FundTransfer(msg.sender, amount, false, amountRaised);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"__current\",\"type\":\"uint256\"}],\"name\":\"setCurrent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"exchange\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amount_stages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"current\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"manualExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"walletAddr\",\"type\":\"address\"},{\"name\":\"tokenOwnerAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"Finalize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"EphronIndiaCoinICO","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e1d9a606e96cc7afdd2d5e53523c2c2acd0680f200000000000000000000000057cf4ee3e3f71160e2429f9d046d2fab0d39e73f0000000000000000000000004ce88b2c8b206ec2681acdef4d6fcfc495d0f11f","Library":"","SwarmSource":"bzzr://917fd24a2e6ef64212e5cc70217b7311498eaf147f7aafa13cca385256af278b"}]}