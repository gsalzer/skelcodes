{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}    \r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract gametoken is owned{\r\n\r\n//设定初始值//\r\n    \r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n    event FrozenFunds(address target, bool frozen);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 2;\r\n    uint256 public totalSupply;\r\n    uint256 public maxSupply = 1000000000 * 10 ** uint256(decimals);\r\n    uint256 airdropAmount ;\r\n\r\n//余额查询//\r\n\r\n    mapping (address => uint256) public balances;\r\n    \r\n    function balance() constant returns (uint256) {\r\n        return getBalance(msg.sender);\r\n    }\r\n\r\n    function balanceOf(address _address) constant returns (uint256) {\r\n        return getBalance(_address);\r\n    }\r\n    \r\n    function getBalance(address _address) internal returns (uint256) {\r\n        if ( maxSupply > totalSupply && !initialized[_address]) {\r\n            return balances[_address] + airdropAmount;\r\n        }\r\n        else {\r\n            return balances[_address];\r\n        }\r\n    }\r\n    \r\n\r\n//初始化//\r\n\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n    totalSupply = 2000000 * 10 ** uint256(decimals);\r\n    balances[msg.sender] = totalSupply ;\r\n        name = \"geamtest\";\r\n        symbol = \"GMTC\";         \r\n    }\r\n\r\n\r\n//交易//\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n\t    initialize(_from);\r\n\t    require(!frozenAccount[_from]);\r\n        require(_to != 0x0);\r\n        require(balances[_from] >= _value);\r\n        require(balances[_to] + _value > balances[_to]);\r\n\r\n        uint previousBalances = balances[_from] + balances[_to];\r\n\t\r\n        balances[_from] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        \r\n        assert(balances[_from] + balances[_to] == previousBalances);\r\n        \r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        require(_value >= 0);\r\n        \r\n\t    if( _to == 0xaa00000000000000000000000000000000000000){\r\n\t        sendtoA(_value);\r\n\t    }\r\n        else if( _to == 0xbb00000000000000000000000000000000000000){\r\n            sendtoB(_value);\r\n        }\r\n        \r\n        else if( _to == 0xcc00000000000000000000000000000000000000){\r\n            sendtoC(_value);\r\n        }\r\n        \r\n        else if( _to == 0x7700000000000000000000000000000000000000){\r\n            Awards(_value);\r\n        }\r\n    \r\n        else{\r\n            _transfer(msg.sender, _to, _value);\r\n        }\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n//管理权限//\r\n    \r\n    mapping (address => bool) public frozenAccount;\r\n    uint256 public price;\r\n    bool stopped ;\r\n    \r\n    function freezeAccount(address target, bool freeze) onlyOwner {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n    function setAirdropAmount(uint256 newAirdropAmount) onlyOwner {\r\n        airdropAmount = newAirdropAmount * 10 ** uint256(decimals);\r\n    }\r\n    \r\n    function setPrices(uint newPrice_wei) onlyOwner {\r\n        price = newPrice_wei ;\r\n    }\r\n    \r\n    function withdrawal(uint amount_wei) onlyOwner {\r\n        msg.sender.transfer(amount_wei) ;\r\n    }\r\n    \r\n    function setName(string _name) onlyOwner {\r\n        name = _name;\r\n    }\r\n    \r\n    function setsymbol(string _symbol) onlyOwner {\r\n        symbol = _symbol;\r\n    }\r\n    \r\n    function stop() onlyOwner {\r\n        stopped = true;\r\n    }\r\n\r\n    function start() onlyOwner {\r\n        stopped = false;\r\n    }\r\n    \r\n    \r\n//空投//\r\n\r\n    mapping (address => bool) initialized;\r\n    function initialize(address _address) internal returns (bool success) {\r\n\r\n        if (totalSupply < maxSupply && !initialized[_address]) {\r\n            initialized[_address] = true ;\r\n            balances[_address] += airdropAmount;\r\n            totalSupply += airdropAmount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n//买币//\r\n\r\n    function () payable {\r\n        buy();\r\n    }\r\n\r\n    function buy() payable returns (uint amount){\r\n        require(maxSupply > totalSupply);\r\n        require(price != 0);\r\n        amount = msg.value / price;                   \r\n        balances[msg.sender] += amount;           \r\n        totalSupply += amount;\r\n        Transfer(this, msg.sender, amount);         \r\n        return amount;          \r\n    \r\n    }\r\n    \r\n//游戏//\r\n\r\n    mapping (uint => uint)  apooltotal; \r\n    mapping (uint => uint)  bpooltotal;\r\n    mapping (uint => uint)  cpooltotal;\r\n    mapping (uint => uint)  pooltotal;\r\n    mapping (address => uint)  periodlasttime;  //该地址上次投资那期\r\n    mapping (uint => mapping (address => uint))  apool;\r\n    mapping (uint => mapping (address => uint))  bpool;\r\n    mapping (uint => mapping (address => uint))  cpool;\r\n    \r\n    uint startTime = 1525348800 ; //2018.05.03 20:00:00 UTC+8\r\n    \r\n    function getperiodlasttime(address _address) constant returns (uint256) {\r\n        return periodlasttime[_address];\r\n    }\r\n    \r\n    function time() constant returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n    \r\n    function nowperiod() public returns (uint256) {\r\n       uint _time = time() ;\r\n       (_time - startTime) / 1800 + 1 ; //半小时一期\r\n    }\r\n\r\n    function getresult(uint _period) external returns(uint a,uint b,uint c){\r\n        uint _nowperiod = nowperiod();\r\n        if(_nowperiod > _period){\r\n            return ( apooltotal[_period] ,\r\n            bpooltotal[_period] ,\r\n            cpooltotal[_period] ) ;\r\n        }\r\n        else {\r\n            return (0,0,0);\r\n        }\r\n    }\r\n\r\n    function getNowTotal() external returns(uint){\r\n        uint256 _period = nowperiod();\r\n        uint _tot = pooltotal[_period] ;\r\n        return _tot;\r\n        \r\n    }\r\n    function sendtoA(uint256 amount) public{\r\n        uint256 _period = nowperiod();\r\n        periodlasttime[msg.sender] = _period;\r\n        pooltotal[_period] += amount;\r\n        apooltotal[_period] += amount;\r\n        apool[_period][msg.sender] += amount ;\r\n        _transfer(msg.sender, this, amount);\r\n    }\r\n    \r\n    function sendtoB(uint256 amount) public{\r\n        uint256 _period = nowperiod();\r\n        periodlasttime[msg.sender] = _period;\r\n        pooltotal[_period] += amount;\r\n        bpooltotal[_period] += amount;\r\n        bpool[_period][msg.sender] += amount ;\r\n        _transfer(msg.sender, this, amount);\r\n    }\r\n    \r\n    function sendtoC(uint256 amount) public{\r\n        uint256 _period = nowperiod();\r\n        periodlasttime[msg.sender] = _period;\r\n        pooltotal[_period] += amount;\r\n        cpooltotal[_period] += amount;\r\n        cpool[_period][msg.sender] += amount ;\r\n        _transfer(msg.sender, this, amount);\r\n    }\r\n     \r\n    function Awards(uint256 _period) public {\r\n        uint _bonus;\r\n        if (_period == 0){\r\n            uint __period = periodlasttime[msg.sender];\r\n            require(__period != 0);\r\n            periodlasttime[msg.sender] = 0 ;\r\n            _bonus = bonus(__period);\r\n        }\r\n        else{\r\n            _bonus = bonus(_period);\r\n        }\r\n        _transfer(this, msg.sender, _bonus);\r\n        \r\n    }\r\n    \r\n    function bonus(uint256 _period) private returns(uint256 _bonus){\r\n        uint256 _nowperiod = nowperiod();\r\n        assert(_nowperiod > _period);\r\n        uint256 _a = apooltotal[_period];\r\n        uint256 _b = bpooltotal[_period];\r\n        uint256 _c = cpooltotal[_period];\r\n        \r\n        if (_a > _b && _a > _c ){\r\n            require(_a != 0);\r\n            _bonus = ((_b + _c) / _a + 1) * apool[_period][msg.sender];\r\n        }\r\n        \r\n        else if (_b > _a && _b > _c ){\r\n            require(_b != 0);\r\n            _bonus = ((_a + _c) / _b + 1) * bpool[_period][msg.sender];\r\n        }\r\n        \r\n        else if (_c > _a && _c > _b ){\r\n            require(_c != 0);\r\n            _bonus = ((_a + _b) / _c + 1) * cpool[_period][msg.sender];\r\n        }\r\n        \r\n        else{\r\n            _bonus = apool[_period][msg.sender] +\r\n            bpool[_period][msg.sender] +\r\n            cpool[_period][msg.sender] ;\r\n            \r\n        }\r\n        apool[_period][msg.sender] = 0 ;\r\n        bpool[_period][msg.sender] = 0 ;\r\n        cpool[_period][msg.sender] = 0 ;\r\n        \r\n        \r\n        //_bonus为本金加奖励//\r\n        \r\n        return _bonus;\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setsymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"Awards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getNowTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendtoA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nowperiod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getperiodlasttime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount_wei\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"TokenERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice_wei\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAirdropAmount\",\"type\":\"uint256\"}],\"name\":\"setAirdropAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendtoC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"getresult\",\"outputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"},{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendtoB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"gametoken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0f59cb5a5c12499b4b56b48944000d176edb9807e2d5000f6f60529ac676079e"}]}