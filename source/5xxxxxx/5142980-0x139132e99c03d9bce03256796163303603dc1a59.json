{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    string public name = \"ME Token\";\r\n    string public symbol = \"MET\";\r\n    uint8 public decimals = 18;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n    function finishMinting() public onlyOwner canMint returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC721 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\n\r\ncontract ERC721Token is ERC721, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant NAME = \"ERC-ME Contribution\";\r\n    string public constant SYMBOL = \"MEC\";\r\n\r\n    // Total amount of tokens\r\n    uint256 private totalTokens;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) private tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private tokenApprovals;\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping (address => uint256[]) private ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private ownedTokensIndex;\r\n\r\n    struct Contribution {\r\n        address contributor; // The address of the contributor in the crowdsale\r\n        uint256 contributionAmount; // The amount of the contribution\r\n        uint64 contributionTimestamp; // The time at which the contribution was made\r\n    }\r\n\r\n    Contribution[] public contributions;\r\n\r\n    event ContributionMinted(address indexed _minter, uint256 _contributionSent, uint256 _tokenId);\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is owner of the given token\r\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n  */\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(ownerOf(_tokenId) == msg.sender);\r\n        _;\r\n    }\r\n\r\n  /**\r\n  * @dev Gets the total amount of tokens stored by the contract\r\n  * @return uint256 representing the total amount of tokens\r\n  */\r\n    function totalSupply() public view returns (uint256) {\r\n        return contributions.length;\r\n    }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return ownedTokens[_owner].length;\r\n    }\r\n\r\n  /**\r\n  * @dev Gets the list of tokens owned by a given address\r\n  * @param _owner address to query the tokens of\r\n  * @return uint256[] representing the list of tokens owned by the passed address\r\n  */\r\n    function tokensOf(address _owner) public view returns (uint256[]) {\r\n        return ownedTokens[_owner];\r\n    }\r\n\r\n  /**\r\n  * @dev Gets the owner of the specified token ID\r\n  * @param _tokenId uint256 ID of the token to query the owner of\r\n  * @return owner address currently marked as the owner of the given token ID\r\n  */\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        address owner = tokenOwner[_tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n\r\n  /**\r\n   * @dev Gets the approved address to take ownership of a given token ID\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved to take ownership of the given token ID\r\n   */\r\n    function approvedFor(uint256 _tokenId) public view returns (address) {\r\n        return tokenApprovals[_tokenId];\r\n    }\r\n\r\n  /**\r\n  * @dev Transfers the ownership of a given token ID to another address\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n        clearApprovalAndTransfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n  /**\r\n  * @dev Approves another address to claim for the ownership of the given token ID\r\n  * @param _to address to be approved for the given token ID\r\n  * @param _tokenId uint256 ID of the token to be approved\r\n  */\r\n    function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n        address owner = ownerOf(_tokenId);\r\n        require(_to != owner);\r\n        if (approvedFor(_tokenId) != 0 || _to != 0) {\r\n            tokenApprovals[_tokenId] = _to;\r\n            Approval(owner, _to, _tokenId);\r\n        }\r\n    }\r\n\r\n  /**\r\n  * @dev Claims the ownership of a given token ID\r\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\r\n  */\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        require(isApprovedFor(msg.sender, _tokenId));\r\n        clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n    }\r\n\r\n  /**\r\n  * @dev Mint token function\r\n  * @param _to The address that will own the minted token\r\n  */\r\n    function mint(address _to, uint256 _amount) public onlyOwner {\r\n        require(_to != address(0));\r\n\r\n        Contribution memory contribution = Contribution({\r\n            contributor: _to,\r\n            contributionAmount: _amount,\r\n            contributionTimestamp: uint64(now)\r\n        });\r\n        uint256 tokenId = contributions.push(contribution) - 1;\r\n\r\n        addToken(_to, tokenId);\r\n        Transfer(0x0, _to, tokenId);\r\n        ContributionMinted(_to, _amount, tokenId);\r\n    }\r\n\r\n    function getContributor(uint256 _tokenId) public view returns(address contributor) {\r\n        Contribution memory contribution = contributions[_tokenId];\r\n        contributor = contribution.contributor;\r\n    }\r\n\r\n    function getContributionAmount(uint256 _tokenId) public view returns(uint256 contributionAmount) {\r\n        Contribution memory contribution = contributions[_tokenId];\r\n        contributionAmount = contribution.contributionAmount;\r\n    }\r\n\r\n    function getContributionTime(uint256 _tokenId) public view returns(uint64 contributionTimestamp) {\r\n        Contribution memory contribution = contributions[_tokenId];\r\n        contributionTimestamp = contribution.contributionTimestamp;\r\n    }\r\n\r\n  /**\r\n  * @dev Burns a specific token\r\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n    function _burn(uint256 _tokenId) internal onlyOwnerOf(_tokenId) {\r\n        if (approvedFor(_tokenId) != 0) {\r\n            clearApproval(msg.sender, _tokenId);\r\n        }\r\n        removeToken(msg.sender, _tokenId);\r\n        Transfer(msg.sender, 0x0, _tokenId);\r\n    }\r\n\r\n  /**\r\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\r\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\r\n   * @param _owner address of the owner to query the approval of\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return bool whether the msg.sender is approved for the given token ID or not\r\n   */\r\n    function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\r\n        return approvedFor(_tokenId) == _owner;\r\n    }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\r\n  * @param _from address which you want to send tokens from\r\n  * @param _to address which you want to transfer the token to\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n    function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\r\n        require(_to != address(0));\r\n        require(_to != ownerOf(_tokenId));\r\n        require(ownerOf(_tokenId) == _from);\r\n\r\n        clearApproval(_from, _tokenId);\r\n        removeToken(_from, _tokenId);\r\n        addToken(_to, _tokenId);\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval of a given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n    function clearApproval(address _owner, uint256 _tokenId) private {\r\n        require(ownerOf(_tokenId) == _owner);\r\n        tokenApprovals[_tokenId] = 0;\r\n        Approval(_owner, 0, _tokenId);\r\n    }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n    function addToken(address _to, uint256 _tokenId) private {\r\n        require(tokenOwner[_tokenId] == address(0));\r\n        tokenOwner[_tokenId] = _to;\r\n        uint256 length = balanceOf(_to);\r\n        ownedTokens[_to].push(_tokenId);\r\n        ownedTokensIndex[_tokenId] = length;\r\n        totalTokens = totalTokens.add(1);\r\n    }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n    function removeToken(address _from, uint256 _tokenId) private {\r\n        require(ownerOf(_tokenId) == _from);\r\n\r\n        uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n        uint256 lastTokenIndex = balanceOf(_from).sub(1);\r\n        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n        tokenOwner[_tokenId] = 0;\r\n        ownedTokens[_from][tokenIndex] = lastToken;\r\n        ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n        ownedTokens[_from].length--;\r\n        ownedTokensIndex[_tokenId] = 0;\r\n        ownedTokensIndex[lastToken] = tokenIndex;\r\n        totalTokens = totalTokens.sub(1);\r\n    }\r\n}\r\n\r\n\r\n/*\r\n*\r\n* ERC-ME Beta Game\r\n*\r\n* @author Ghilia Weldesselasie\r\n*\r\n* Your mission, if you choose to accept it: get access to the ERC-ME beta.\r\n* How do you do that? It's simple.\r\n*   1. Become ekspert devloper\r\n*   2. ???\r\n*   3. Profit\r\n*\r\n* Hint: Those who can mint a certain asset will have access to the beta\r\n*\r\n* WARNING\r\n* - You might wanna read the code (don't look at it too closely tho just send your ETH to the address)\r\n* - Beware people waiting to use your funds to beat the game at your expense (Don't get finessed boi!)\r\n*\r\n* Join us on Discord: https://discord.gg/nDdTm5z\r\n*\r\n* Oh and thanks for participating in our presale\r\n*\r\n*\r\n*/\r\n\r\n//Token Game contract - allows skilled players to gain access to the ERC-ME beta\r\ncontract TokenGame {\r\n    using SafeMath for uint256;\r\n\r\n    // The ME-Token being minted\r\n    MintableToken public token;\r\n    // The NFT being minted, thought it might be useful\r\n    ERC721Token public pass;\r\n    // A mapping of all the people who funded to the presale\r\n    mapping(address => uint256) public funders;\r\n    // An array of all the people who beat the game\r\n    mapping(address => bool) public isWinner;\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n    // cap of the Crowdsale\r\n    uint256 public cap = 7000 ether;\r\n    // My wallet\r\n    address public wallet;\r\n\r\n    event GameWon(address indexed winner, uint256 valueUnlocked);\r\n\r\n    //Constructor\r\n    function TokenGame(ERC721Token _pass, MintableToken _token) public {\r\n        pass = _pass;\r\n        token = _token;\r\n        wallet = msg.sender;\r\n    }\r\n\r\n    // Beating the game should be as simple as sending all of your ETH to the contract address\r\n    // Idk tho I could be wrong :)\r\n    function () public payable {\r\n        beatGame();\r\n    }\r\n\r\n    // If you call this function you should beat the game... I think\r\n    function beatGame() public payable {\r\n        require(weiRaised.add(msg.value) <= cap);\r\n        weiRaised = weiRaised.add(msg.value); // update state\r\n        funders[msg.sender] = funders[msg.sender].add(msg.value);\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    // Check the balance\r\n    function getBalance() public view returns(uint256 balance) {\r\n        return this.balance;\r\n    }\r\n\r\n    // You might wanna check if the cap has been reached before doing anything\r\n    function capReached() public view returns(bool) {\r\n        return weiRaised >= cap;\r\n    }\r\n\r\n    function changeOwner() public {\r\n        require(msg.sender == wallet);\r\n        token.transferOwnership(wallet);\r\n        pass.transferOwnership(wallet);\r\n    }\r\n\r\n    // I wouldn't call this if I were you, who knows what could happen\r\n    function loseGame() public {\r\n        require(this.balance > 0);\r\n        weiRaised = weiRaised.add(this.balance); // update state\r\n\r\n        isWinner[msg.sender] = true;\r\n        funders[msg.sender] = funders[msg.sender].add(this.balance);\r\n\r\n        receivePrize(msg.sender, this.balance);\r\n        GameWon(msg.sender, this.balance);\r\n\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n        // how many token units a buyer gets per wei\r\n        return weiAmount.mul(10000);\r\n    }\r\n\r\n    function receivePrize(address _winner, uint256 _prizeMoney) private {\r\n        // The code for token minting\r\n        uint256 tokens = getTokenAmount(_prizeMoney);\r\n        token.mint(_winner, tokens);\r\n        // The code for the pass minting\r\n        pass.mint(_winner, _prizeMoney);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"loseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"funders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"beatGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pass\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_pass\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"valueUnlocked\",\"type\":\"uint256\"}],\"name\":\"GameWon\",\"type\":\"event\"}]","ContractName":"TokenGame","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b37089817bb126a897a96d94a2833a4ebbcfad12000000000000000000000000c911cf14cd3b56362bfc5692a15bee2c2b4c3b4b","Library":"","SwarmSource":"bzzr://45c5ef3d99250f53563a832d1e83ac7196dfd345e0e2392b2bc3f328d8803a4c"}]}