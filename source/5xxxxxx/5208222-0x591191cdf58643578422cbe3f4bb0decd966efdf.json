{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n\r\n/*\r\n * https://github.com/OpenZeppelin/zeppelin-solidity\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * https://github.com/OpenZeppelin/zeppelin-solidity\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Token pools registry\r\n * @dev Allows to register multiple pools of token with lockup period\r\n * @author Wojciech Harzowski (https://github.com/harzo)\r\n * @author Jakub Stefanski (https://github.com/jstefanski)\r\n */\r\ncontract TokenPool is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Represents registered pool\r\n     */\r\n    struct Pool {\r\n        uint256 availableAmount;\r\n        uint256 lockTimestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Address of mintable token instance\r\n     */\r\n    MintableToken public token;\r\n\r\n    /**\r\n     * @dev Indicates available token amounts for each pool\r\n     */\r\n    mapping (string => Pool) private pools;\r\n\r\n    modifier onlyNotZero(uint256 amount) {\r\n        require(amount != 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlySufficientAmount(string poolId, uint256 amount) {\r\n        require(amount <= pools[poolId].availableAmount);\r\n        _;\r\n    }\r\n\r\n    modifier onlyUnlockedPool(string poolId) {\r\n        /* solhint-disable not-rely-on-time */\r\n        require(block.timestamp > pools[poolId].lockTimestamp);\r\n        /* solhint-enable not-rely-on-time */\r\n        _;\r\n    }\r\n\r\n    modifier onlyUniquePool(string poolId) {\r\n        require(pools[poolId].availableAmount == 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyValid(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n    function TokenPool(MintableToken _token)\r\n        public\r\n        onlyValid(_token)\r\n    {\r\n        token = _token;\r\n    }\r\n\r\n    /**\r\n     * @dev New pool registered\r\n     * @param poolId string The unique pool id\r\n     * @param amount uint256 The amount of available tokens\r\n     */\r\n    event PoolRegistered(string poolId, uint256 amount);\r\n\r\n    /**\r\n     * @dev Pool locked until the specified timestamp\r\n     * @param poolId string The unique pool id\r\n     * @param lockTimestamp uint256 The lock timestamp as Unix Epoch (seconds from 1970)\r\n     */\r\n    event PoolLocked(string poolId, uint256 lockTimestamp);\r\n\r\n    /**\r\n     * @dev Tokens transferred from pool\r\n     * @param poolId string The unique pool id\r\n     * @param amount uint256 The amount of transferred tokens\r\n     */\r\n    event PoolTransferred(string poolId, address to, uint256 amount);\r\n\r\n    /**\r\n     * @dev Register a new pool and mint its tokens\r\n     * @param poolId string The unique pool id\r\n     * @param availableAmount uint256 The amount of available tokens\r\n     * @param lockTimestamp uint256 The optional lock timestamp as Unix Epoch (seconds from 1970),\r\n     *                              leave zero if not applicable\r\n     */\r\n    function registerPool(string poolId, uint256 availableAmount, uint256 lockTimestamp)\r\n        public\r\n        onlyOwner\r\n        onlyNotZero(availableAmount)\r\n        onlyUniquePool(poolId)\r\n    {\r\n        pools[poolId] = Pool({\r\n            availableAmount: availableAmount,\r\n            lockTimestamp: lockTimestamp\r\n        });\r\n\r\n        token.mint(this, availableAmount);\r\n\r\n        PoolRegistered(poolId, availableAmount);\r\n\r\n        if (lockTimestamp > 0) {\r\n            PoolLocked(poolId, lockTimestamp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer given amount of tokens to specified address\r\n     * @param to address The address to transfer to\r\n     * @param poolId string The unique pool id\r\n     * @param amount uint256 The amount of tokens to transfer\r\n     */\r\n    function transfer(string poolId, address to, uint256 amount)\r\n        public\r\n        onlyOwner\r\n        onlyValid(to)\r\n        onlyNotZero(amount)\r\n        onlySufficientAmount(poolId, amount)\r\n        onlyUnlockedPool(poolId)\r\n    {\r\n        pools[poolId].availableAmount = pools[poolId].availableAmount.sub(amount);\r\n        require(token.transfer(to, amount));\r\n\r\n        PoolTransferred(poolId, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Get available amount of tokens in the specified pool\r\n     * @param poolId string The unique pool id\r\n     * @return The available amount of tokens in the specified pool\r\n     */\r\n    function getAvailableAmount(string poolId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return pools[poolId].availableAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Get lock timestamp of the pool or zero\r\n     * @param poolId string The unique pool id\r\n     * @return The lock expiration timestamp of the pool or zero if not specified\r\n     */\r\n    function getLockTimestamp(string poolId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return pools[poolId].lockTimestamp;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * https://github.com/OpenZeppelin/zeppelin-solidity\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token interface\r\n * @author Wojciech Harzowski (https://github.com/harzo)\r\n * @author Jakub Stefanski (https://github.com/jstefanski)\r\n */\r\ncontract MintableToken is ERC20Basic {\r\n    function mint(address to, uint256 amount) public;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"poolId\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"poolId\",\"type\":\"string\"},{\"name\":\"availableAmount\",\"type\":\"uint256\"},{\"name\":\"lockTimestamp\",\"type\":\"uint256\"}],\"name\":\"registerPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"poolId\",\"type\":\"string\"}],\"name\":\"getLockTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"poolId\",\"type\":\"string\"}],\"name\":\"getAvailableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"poolId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"poolId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"lockTimestamp\",\"type\":\"uint256\"}],\"name\":\"PoolLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"poolId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenPool","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006863be0e7cf7ce860a574760e9020d519a8bdc47","Library":"","SwarmSource":"bzzr://1d0d3592ea940dc8ba79808e01a811d5b850fe665361c7b1423182eaaa0c4fff"}]}