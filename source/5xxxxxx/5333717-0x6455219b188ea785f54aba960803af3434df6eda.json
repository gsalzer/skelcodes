{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  address public agent; // sale agent\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyAgentOrOwner() {\r\n      require(msg.sender == owner || msg.sender == agent);\r\n      _;\r\n  }\r\n\r\n  function setSaleAgent(address addr) public onlyOwner {\r\n      agent = addr;\r\n  }\r\n  \r\n}\r\n\r\ncontract HeartBoutToken is Ownable {\r\n    function transferTokents(address addr, uint256 tokens) public;\r\n}\r\n\r\ncontract HeartBoutSale is Ownable {\r\n    \r\n    uint32 rate = 10 ** 5;\r\n    \r\n    uint64 public startDate;\r\n    uint64 public endDate;\r\n    uint256 public soldOnCurrentSale = 0;\r\n    \r\n    mapping(string => address) addressByAccountMapping;\r\n\r\n    HeartBoutToken tokenContract;\r\n    \r\n    function HeartBoutSale(HeartBoutToken _tokenContract) public {\r\n        tokenContract = _tokenContract;\r\n    }\r\n    \r\n    function startSale(uint32 _rate, uint64 _startDate, uint64 _endDate) public onlyOwner {\r\n        require(rate != 0);\r\n        require(_rate <= rate);\r\n        require(100 < _rate && _rate < 15000);\r\n        require(_endDate > now);\r\n        require(_startDate < _endDate);\r\n        \r\n        soldOnCurrentSale = 0;\r\n        \r\n        rate = _rate;\r\n        startDate = _startDate;\r\n        endDate = _endDate;\r\n    }\r\n    \r\n    function completeSale() public onlyOwner {\r\n        endDate = 0;\r\n        soldOnCurrentSale = 0;\r\n    }\r\n    \r\n    function () public payable {\r\n        revert();\r\n    }\r\n    \r\n    function buyTokens(string _account) public payable {\r\n        \r\n        require(msg.value > 0);\r\n        require(rate > 0);\r\n        require(endDate > now);\r\n        \r\n        require(msg.value >= (10 ** 16));\r\n        \r\n        uint256 tokens = msg.value * rate;\r\n        \r\n        address _to = msg.sender;\r\n        \r\n        if(addressByAccountMapping[_account] != 0x0) {\r\n            require(addressByAccountMapping[_account] == _to);      \r\n        }\r\n        addressByAccountMapping[_account] = _to;\r\n        \r\n        soldOnCurrentSale += tokens;\r\n\r\n        tokenContract.transferTokents(msg.sender, tokens);\r\n        owner.transfer(msg.value);\r\n    }\r\n    \r\n    function getAddressForAccount(string _account) public view returns (address) {\r\n      return addressByAccountMapping[_account];\r\n    }\r\n    \r\n    function stringEqual(string a, string b) internal pure returns (bool) {\r\n      return keccak256(a) == keccak256(b);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setSaleAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"string\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint32\"},{\"name\":\"_startDate\",\"type\":\"uint64\"},{\"name\":\"_endDate\",\"type\":\"uint64\"}],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldOnCurrentSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"agent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"string\"}],\"name\":\"getAddressForAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"HeartBoutSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e2492f8d2a2618d8709ca99b1d8d75713bd84089","Library":"","SwarmSource":"bzzr://a609fffb560828b93193602d7f9d7b6fcbaed162e95e95d8a3396452684a0081"}]}