{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract ERC20 {\r\n\tfunction balanceOf(address who) public view returns (uint256);\r\n\r\n\tfunction transfer(address to, uint256 value) public returns (bool);\r\n\r\n\tfunction transferFrom(address _from, address _to, uint _value) external returns (bool);\r\n}\r\n\r\ncontract Ownable {\r\n\taddress public owner = 0x345aCaFA4314Bc2479a3aA7cCf8eb47f223C1d0e;\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n\tevent Pause();\r\n\r\n\tevent Unpause();\r\n\r\n\tbool public paused = false;\r\n\r\n\r\n\t/**\r\n        * @dev modifier to allow actions only when the contract IS paused\r\n        */\r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!paused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n        * @dev modifier to allow actions only when the contract IS NOT paused\r\n        */\r\n\tmodifier whenPaused() {\r\n\t\trequire(paused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n        * @dev called by the owner to pause, triggers stopped state\r\n        */\r\n\tfunction pause() public onlyOwner whenNotPaused {\r\n\t\tpaused = true;\r\n\t\temit Pause();\r\n\t}\r\n\r\n\t/**\r\n        * @dev called by the owner to unpause, returns to normal state\r\n        */\r\n\tfunction unpause() public onlyOwner whenPaused {\r\n\t\tpaused = false;\r\n\t\temit Unpause();\r\n\t}\r\n}\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n\t// Required methods\r\n\tfunction totalSupply() public view returns (uint total);\r\n\r\n\tfunction balanceOf(address owner) public view returns (uint balance);\r\n\r\n\tfunction ownerOf(uint tokenId) external view returns (address owner);\r\n\r\n\tfunction approve(address to, uint tokenId) external;\r\n\r\n\tfunction transfer(address to, uint tokenId) public;\r\n\r\n\tfunction transferFrom(address from, address to, uint tokenId) external;\r\n\r\n\t// Events\r\n\tevent Transfer(address indexed from, address indexed to, uint tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint tokenId);\r\n\r\n\t// Optional\r\n\tfunction name() public view returns (string);\r\n\r\n\tfunction symbol() public view returns (string);\r\n\r\n\tfunction tokensOfOwner(address owner) external view returns (uint[] tokenIds);\r\n\r\n\tfunction tokenMetadata(uint tokenId, string preferredTransport) public view returns (string infoUrl);\r\n\r\n\t// ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n\tfunction supportsInterface(bytes4 contractID) external view returns (bool);\r\n}\r\n\r\n\r\ncontract ERC721Metadata {\r\n\tfunction getMetadata(uint tokenId, string preferredTransport) public view returns (bytes32[4] buffer, uint count);\r\n}\r\n\r\ncontract CryptoversePreorderBonusAssets is Pausable, ERC721 {\r\n\r\n\tstruct Item {\r\n\t\tItemType typeId;\r\n\t\tItemModel model;\r\n\t\tItemManufacturer manufacturer;\r\n\t\tItemRarity rarity;\r\n\t\tuint createTime;\r\n\t\tuint amount;\r\n\t}\r\n\r\n\tenum ItemType {VRCBox, VCXVault, SaiHead, SaiBody, SaiEarrings, MechHead, MechBody, MechLegs, MechRailgun, MechMachineGun, MechRocketLauncher}\r\n\r\n\tenum ItemModel {NC01, MK1, V1, V1_1, V2_1, M442_1, BG, Q3, TRFL405, BC, DES1, PlasmaS, BD, DRL, Casper, Kilo, Mega, Giga, Tera, Peta, Exa, EA}\r\n\r\n\tenum ItemManufacturer {BTC, VRC, ETH, Satoshipowered}\r\n\r\n\tenum ItemRarity {Common, Uncommon, Rare, Superior, Epic, Legendary, Unique}\r\n\r\n\tfunction name() public view returns (string){\r\n\t\treturn \"Cryptoverse Preorder Bonus Assets\";\r\n\t}\r\n\r\n\tfunction symbol() public view returns (string){\r\n\t\treturn \"CPBA\";\r\n\t}\r\n\r\n\tItem[] public items;\r\n\r\n\tmapping(uint => address) public itemIndexToOwner;\r\n\r\n\tmapping(address => uint) public ownershipTokenCount;\r\n\r\n\tmapping(uint => address) public itemIndexToApproved;\r\n\r\n\tfunction reclaimToken(ERC20 token) external onlyOwner {\r\n\t\tuint256 balance = token.balanceOf(this);\r\n\t\ttoken.transfer(owner, balance);\r\n\t}\r\n\r\n\tfunction _transfer(address from, address to, uint tokenId) internal {\r\n\t\townershipTokenCount[from]--;\r\n\t\townershipTokenCount[to]++;\r\n\t\titemIndexToOwner[tokenId] = to;\r\n\t\tdelete itemIndexToApproved[tokenId];\r\n\r\n\t\temit Transfer(from, to, tokenId);\r\n\t}\r\n\r\n\tevent CreateItem(uint id, ItemType typeId, ItemModel model, ItemManufacturer manufacturer, ItemRarity rarity, uint createTime, uint amount, address indexed owner);\r\n\r\n\tfunction createItem(ItemType typeId, ItemModel model, ItemManufacturer manufacturer, ItemRarity rarity, uint amount, address owner) internal returns (uint) {\r\n\t\trequire(owner != address(0));\r\n\r\n\t\tItem memory item = Item(typeId, model, manufacturer, rarity, now, amount);\r\n\r\n\t\tuint newItemId = items.length;\r\n\r\n\t\titems.push(item);\r\n\r\n\t\temit CreateItem(newItemId, typeId, model, manufacturer, rarity, now, amount, owner);\r\n\r\n\t\townershipTokenCount[owner]++;\r\n\t\titemIndexToOwner[newItemId] = owner;\r\n\r\n\t\treturn newItemId;\r\n\t}\r\n\r\n\tfunction tokensOfOwner(address owner) external view returns (uint[] ownerTokens) {\r\n\t\tuint tokenCount = balanceOf(owner);\r\n\r\n\t\tif (tokenCount == 0) {\r\n\t\t\treturn new uint[](0);\r\n\t\t} else {\r\n\t\t\townerTokens = new uint[](tokenCount);\r\n\t\t\tuint totalItems = totalSupply();\r\n\t\t\tuint resultIndex = 0;\r\n\r\n\t\t\tfor (uint itemId = 0; itemId < totalItems; itemId++) {\r\n\t\t\t\tif (itemIndexToOwner[itemId] == owner) {\r\n\t\t\t\t\townerTokens[resultIndex] = itemId;\r\n\t\t\t\t\tresultIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn ownerTokens;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction tokensInfoOfOwner(address owner) external view returns (uint[] ownerTokens) {\r\n\t\tuint tokenCount = balanceOf(owner);\r\n\r\n\t\tif (tokenCount == 0) {\r\n\t\t\treturn new uint[](0);\r\n\t\t} else {\r\n\t\t\townerTokens = new uint[](tokenCount * 7);\r\n\t\t\tuint totalItems = totalSupply();\r\n\t\t\tuint k = 0;\r\n\r\n\t\t\tfor (uint itemId = 0; itemId < totalItems; itemId++) {\r\n\t\t\t\tif (itemIndexToOwner[itemId] == owner) {\r\n\t\t\t\t\tItem item = items[itemId];\r\n\t\t\t\t\townerTokens[k++] = itemId;\r\n\t\t\t\t\townerTokens[k++] = uint(item.typeId);\r\n\t\t\t\t\townerTokens[k++] = uint(item.model);\r\n\t\t\t\t\townerTokens[k++] = uint(item.manufacturer);\r\n\t\t\t\t\townerTokens[k++] = uint(item.rarity);\r\n\t\t\t\t\townerTokens[k++] = item.createTime;\r\n\t\t\t\t\townerTokens[k++] = item.amount;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn ownerTokens;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction tokenInfo(uint itemId) external view returns (uint[] ownerTokens) {\r\n\t\townerTokens = new uint[](7);\r\n\t\tuint k = 0;\r\n\r\n\t\tItem item = items[itemId];\r\n\t\townerTokens[k++] = itemId;\r\n\t\townerTokens[k++] = uint(item.typeId);\r\n\t\townerTokens[k++] = uint(item.model);\r\n\t\townerTokens[k++] = uint(item.manufacturer);\r\n\t\townerTokens[k++] = uint(item.rarity);\r\n\t\townerTokens[k++] = item.createTime;\r\n\t\townerTokens[k++] = item.amount;\r\n\t}\r\n\r\n\tERC721Metadata public erc721Metadata;\r\n\r\n\tbytes4 constant InterfaceSignature_ERC165 =\r\n\tbytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n\tbytes4 constant InterfaceSignature_ERC721 =\r\n\tbytes4(keccak256('name()')) ^\r\n\tbytes4(keccak256('symbol()')) ^\r\n\tbytes4(keccak256('totalSupply()')) ^\r\n\tbytes4(keccak256('balanceOf(address)')) ^\r\n\tbytes4(keccak256('ownerOf(uint)')) ^\r\n\tbytes4(keccak256('approve(address,uint)')) ^\r\n\tbytes4(keccak256('transfer(address,uint)')) ^\r\n\tbytes4(keccak256('transferFrom(address,address,uint)')) ^\r\n\tbytes4(keccak256('tokensOfOwner(address)')) ^\r\n\tbytes4(keccak256('tokenMetadata(uint,string)'));\r\n\r\n\tfunction supportsInterface(bytes4 contractID) external view returns (bool)\r\n\t{\r\n\t\treturn ((contractID == InterfaceSignature_ERC165) || (contractID == InterfaceSignature_ERC721));\r\n\t}\r\n\r\n\tfunction setMetadataAddress(address contractAddress) public onlyOwner {\r\n\t\terc721Metadata = ERC721Metadata(contractAddress);\r\n\t}\r\n\r\n\tfunction _owns(address claimant, uint tokenId) internal view returns (bool) {\r\n\t\treturn itemIndexToOwner[tokenId] == claimant;\r\n\t}\r\n\r\n\tfunction _approvedFor(address claimant, uint tokenId) internal view returns (bool) {\r\n\t\treturn itemIndexToApproved[tokenId] == claimant;\r\n\t}\r\n\r\n\tfunction _approve(uint tokenId, address approved) internal {\r\n\t\titemIndexToApproved[tokenId] = approved;\r\n\t}\r\n\r\n\tfunction balanceOf(address owner) public view returns (uint count) {\r\n\t\treturn ownershipTokenCount[owner];\r\n\t}\r\n\r\n\tfunction transfer(address to, uint tokenId) public {\r\n\t\trequire(to != address(0));\r\n\t\trequire(_owns(msg.sender, tokenId));\r\n\t\trequire(!_owns(to, tokenId));\r\n\t\t_transfer(msg.sender, to, tokenId);\r\n\t}\r\n\r\n\tfunction approve(address to, uint tokenId) external {\r\n\t\trequire(_owns(msg.sender, tokenId));\r\n\t\t_approve(tokenId, to);\r\n\t\temit Approval(msg.sender, to, tokenId);\r\n\t}\r\n\r\n\tfunction transferFrom(address from, address to, uint tokenId) external {\r\n\t\trequire(to != address(0));\r\n\t\trequire(to != address(this));\r\n\t\trequire(_approvedFor(msg.sender, tokenId));\r\n\t\trequire(_owns(from, tokenId));\r\n\t\t_transfer(from, to, tokenId);\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint) {\r\n\t\treturn items.length;\r\n\t}\r\n\r\n\tfunction ownerOf(uint tokenId) external view returns (address owner)   {\r\n\t\towner = itemIndexToOwner[tokenId];\r\n\r\n\t\trequire(owner != address(0));\r\n\t}\r\n\r\n\t/// @dev Adapted from memcpy() by @arachnid (Nick Johnson <arachnid@notdot.net>)\r\n\t///  This method is licenced under the Apache License.\r\n\t///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\r\n\tfunction _memcpy(uint _dest, uint _src, uint _len) private pure {\r\n\t\t// Copy word-length chunks while possible\r\n\t\tfor (; _len >= 32; _len -= 32) {\r\n\t\t\tassembly {\r\n\t\t\t\tmstore(_dest, mload(_src))\r\n\t\t\t}\r\n\t\t\t_dest += 32;\r\n\t\t\t_src += 32;\r\n\t\t}\r\n\r\n\t\t// Copy remaining bytes\r\n\t\tuint mask = 256 ** (32 - _len) - 1;\r\n\t\tassembly {\r\n\t\t\tlet srcpart := and(mload(_src), not(mask))\r\n\t\t\tlet destpart := and(mload(_dest), mask)\r\n\t\t\tmstore(_dest, or(destpart, srcpart))\r\n\t\t}\r\n\t}\r\n\r\n\t/// @dev Adapted from toString(slice) by @arachnid (Nick Johnson <arachnid@notdot.net>)\r\n\t///  This method is licenced under the Apache License.\r\n\t///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\r\n\tfunction _toString(bytes32[4] _rawBytes, uint _stringLength) private pure returns (string) {\r\n\t\tvar outputString = new string(_stringLength);\r\n\t\tuint outputPtr;\r\n\t\tuint bytesPtr;\r\n\r\n\t\tassembly {\r\n\t\t\toutputPtr := add(outputString, 32)\r\n\t\t\tbytesPtr := _rawBytes\r\n\t\t}\r\n\r\n\t\t_memcpy(outputPtr, bytesPtr, _stringLength);\r\n\r\n\t\treturn outputString;\r\n\t}\r\n\r\n\t/// @notice Returns a URI pointing to a metadata package for this token conforming to\r\n\t///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)\r\n\t/// @param _tokenId The ID number of the Kitty whose metadata should be returned.\r\n\tfunction tokenMetadata(uint _tokenId, string _preferredTransport) public view returns (string infoUrl) {\r\n\t\trequire(erc721Metadata != address(0));\r\n\t\tbytes32[4] memory buffer;\r\n\t\tuint count;\r\n\t\t(buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);\r\n\r\n\t\treturn _toString(buffer, count);\r\n\t}\r\n}\r\n\r\ncontract CryptoversePreorder is CryptoversePreorderBonusAssets {\r\n\r\n\tERC20 public vrc;\r\n\tERC20 public vcx;\r\n\r\n\taddress public vrcWallet;\r\n\taddress public vcxWallet;\r\n\r\n\tuint public vrcCount;\r\n\tuint public vcxCount;\r\n\r\n\tuint public weiRaised;\r\n\r\n\tuint public constant minInvest = 0.1 ether;\r\n\r\n\tuint public contributorsCompleteCount;\r\n\r\n\tmapping(address => uint) public contributorBalance;\r\n\tmapping(address => bool) public contributorComplete;\r\n\tmapping(address => uint) public contributorWhiteListTime;\r\n\r\n\tuint public constant hardCap = 50000 ether;\r\n\r\n\taddress[] public contributors;\r\n\r\n\tevent Purchase(address indexed contributor, uint weiAmount);\r\n\r\n\tfunction() public payable {\r\n\t\tbuyTokens(msg.sender);\r\n\t}\r\n\r\n\tfunction createSaiLimitedEdition(uint weiAmount, address contributor) private {\r\n\t\tcreateItem(ItemType.SaiHead, ItemModel.M442_1, ItemManufacturer.Satoshipowered, ItemRarity.Epic, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.SaiBody, ItemModel.M442_1, ItemManufacturer.Satoshipowered, ItemRarity.Epic, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.SaiEarrings, ItemModel.V1_1, ItemManufacturer.Satoshipowered, ItemRarity.Unique, weiAmount, contributor);\r\n\t}\r\n\r\n\tfunction createSaiCollectorsEdition(uint weiAmount, address contributor) private {\r\n\t\tcreateItem(ItemType.SaiHead, ItemModel.V2_1, ItemManufacturer.Satoshipowered, ItemRarity.Legendary, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.SaiBody, ItemModel.V2_1, ItemManufacturer.Satoshipowered, ItemRarity.Legendary, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.SaiEarrings, ItemModel.V1_1, ItemManufacturer.Satoshipowered, ItemRarity.Unique, weiAmount, contributor);\r\n\t}\r\n\r\n\tfunction createSaiFoundersEdition(uint weiAmount, address contributor) private {\r\n\t\tcreateItem(ItemType.SaiHead, ItemModel.V1, ItemManufacturer.Satoshipowered, ItemRarity.Unique, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.SaiBody, ItemModel.V1, ItemManufacturer.Satoshipowered, ItemRarity.Unique, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.SaiEarrings, ItemModel.V1_1, ItemManufacturer.Satoshipowered, ItemRarity.Unique, weiAmount, contributor);\r\n\t}\r\n\r\n\tfunction createVRCBox(ItemModel model, uint weiAmount, address contributor) private {\r\n\t\tcreateItem(ItemType.VRCBox, model, ItemManufacturer.Satoshipowered, ItemRarity.Legendary, weiAmount, contributor);\r\n\t}\r\n\r\n\tfunction createVCXVault(uint weiAmount, address contributor) private {\r\n\t\tcreateItem(ItemType.VCXVault, ItemModel.EA, ItemManufacturer.Satoshipowered, ItemRarity.Unique, weiAmount, contributor);\r\n\t}\r\n\r\n\tfunction createMechBTC(uint weiAmount, address contributor) private {\r\n\t\tcreateItem(ItemType.MechHead, ItemModel.NC01, ItemManufacturer.BTC, ItemRarity.Epic, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.MechBody, ItemModel.NC01, ItemManufacturer.BTC, ItemRarity.Epic, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.MechLegs, ItemModel.NC01, ItemManufacturer.BTC, ItemRarity.Epic, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.MechRailgun, ItemModel.BG, ItemManufacturer.BTC, ItemRarity.Epic, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.MechMachineGun, ItemModel.BC, ItemManufacturer.BTC, ItemRarity.Epic, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.MechRocketLauncher, ItemModel.BD, ItemManufacturer.BTC, ItemRarity.Epic, weiAmount, contributor);\r\n\t}\r\n\r\n\tfunction createMechVRC(uint weiAmount, address contributor) private {\r\n\t\tcreateItem(ItemType.MechHead, ItemModel.MK1, ItemManufacturer.VRC, ItemRarity.Legendary, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.MechBody, ItemModel.MK1, ItemManufacturer.VRC, ItemRarity.Legendary, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.MechLegs, ItemModel.MK1, ItemManufacturer.VRC, ItemRarity.Legendary, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.MechRailgun, ItemModel.Q3, ItemManufacturer.VRC, ItemRarity.Legendary, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.MechMachineGun, ItemModel.DES1, ItemManufacturer.VRC, ItemRarity.Legendary, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.MechRocketLauncher, ItemModel.DRL, ItemManufacturer.VRC, ItemRarity.Legendary, weiAmount, contributor);\r\n\t}\r\n\r\n\tfunction createMechETH(uint weiAmount, address contributor) private {\r\n\t\tcreateItem(ItemType.MechHead, ItemModel.V1, ItemManufacturer.ETH, ItemRarity.Unique, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.MechBody, ItemModel.V1, ItemManufacturer.ETH, ItemRarity.Unique, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.MechLegs, ItemModel.V1, ItemManufacturer.ETH, ItemRarity.Unique, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.MechRailgun, ItemModel.TRFL405, ItemManufacturer.ETH, ItemRarity.Unique, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.MechMachineGun, ItemModel.PlasmaS, ItemManufacturer.ETH, ItemRarity.Unique, weiAmount, contributor);\r\n\t\tcreateItem(ItemType.MechRocketLauncher, ItemModel.Casper, ItemManufacturer.ETH, ItemRarity.Unique, weiAmount, contributor);\r\n\t}\r\n\r\n\tfunction buyTokens(address contributor) public whenNotPaused payable {\r\n\t\trequire(contributor != address(0));\r\n\r\n\t\tuint weiAmount = msg.value;\r\n\r\n\t\trequire(weiAmount >= minInvest);\r\n\r\n\t\tweiRaised += weiAmount;\r\n\r\n\t\trequire(weiRaised <= hardCap);\r\n\r\n\t\temit Purchase(contributor, weiAmount);\r\n\r\n\t\tif (contributorBalance[contributor] == 0) {\r\n\t\t\tcontributors.push(contributor);\r\n\t\t\tcontributorBalance[contributor] += weiAmount;\r\n\t\t\tcontributorWhiteListTime[contributor] = now;\r\n\t\t} else {\r\n\t\t\trequire(!contributorComplete[contributor]);\r\n\t\t\trequire(weiAmount >= contributorBalance[contributor] * 99);\r\n\r\n\t\t\tbool hasBonus = (now - contributorWhiteListTime[contributor]) < 72 hours;\r\n\r\n\t\t\tcontributorBalance[contributor] += weiAmount;\r\n\t\t\tsendTokens(contributorBalance[contributor], contributor, hasBonus);\r\n\r\n\t\t\tcontributorComplete[contributor] = true;\r\n\t\t\tcontributorsCompleteCount++;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction sendTokens(uint balance, address contributor, bool hasBonus) private {\r\n\r\n\t\tif (balance < 40 ether) {\r\n\t\t\tcreateMechBTC(balance, contributor);\r\n\t\t\tcreateSaiLimitedEdition(balance, contributor);\r\n\t\t\tcreateVRCBox(ItemModel.Kilo, balance, contributor);\r\n\t\t\tcreateVCXVault(balance, contributor);\r\n\r\n\t\t} else if (balance < 100 ether) {\r\n\t\t\tcreateMechBTC(balance, contributor);\r\n\t\t\tcreateMechVRC(balance, contributor);\r\n\t\t\tcreateSaiLimitedEdition(balance, contributor);\r\n\r\n\t\t\tcreateVRCBox(ItemModel.Mega, hasBonus ? (balance * 105 / 100) : balance, contributor);\r\n\t\t\tcreateVCXVault(balance, contributor);\r\n\r\n\t\t} else if (balance < 500 ether) {\r\n\t\t\tcreateMechBTC(balance, contributor);\r\n\t\t\tcreateMechVRC(balance, contributor);\r\n\t\t\tcreateMechETH(balance, contributor);\r\n\t\t\tcreateSaiCollectorsEdition(balance, contributor);\r\n\r\n\t\t\tcreateVRCBox(ItemModel.Giga, hasBonus ? (balance * 110 / 100) : balance, contributor);\r\n\t\t\tcreateVCXVault(balance, contributor);\r\n\r\n\t\t} else if (balance < 1000 ether) {\r\n\r\n\t\t\tcreateMechBTC(balance, contributor);\r\n\t\t\tcreateMechVRC(balance, contributor);\r\n\t\t\tcreateMechETH(balance, contributor);\r\n\t\t\tcreateSaiCollectorsEdition(balance, contributor);\r\n\r\n\t\t\tcreateVRCBox(ItemModel.Tera, hasBonus ? (balance * 115 / 100) : balance, contributor);\r\n\t\t\tcreateVCXVault(balance, contributor);\r\n\r\n\t\t} else if (balance < 5000 ether) {\r\n\r\n\t\t\tcreateMechBTC(balance, contributor);\r\n\t\t\tcreateMechVRC(balance, contributor);\r\n\t\t\tcreateMechETH(balance, contributor);\r\n\t\t\tcreateSaiFoundersEdition(balance, contributor);\r\n\r\n\r\n\t\t\tcreateVRCBox(ItemModel.Peta, hasBonus ? (balance * 120 / 100) : balance, contributor);\r\n\t\t\tcreateVCXVault(balance, contributor);\r\n\r\n\t\t} else if (balance >= 5000 ether) {\r\n\r\n\t\t\tcreateMechBTC(balance, contributor);\r\n\t\t\tcreateMechVRC(balance, contributor);\r\n\t\t\tcreateMechETH(balance, contributor);\r\n\t\t\tcreateSaiFoundersEdition(balance, contributor);\r\n\r\n\r\n\t\t\tcreateVRCBox(ItemModel.Exa, hasBonus ? (balance * 135 / 100) : balance, contributor);\r\n\t\t\tcreateVCXVault(balance, contributor);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdrawal(uint amount) public onlyOwner {\r\n\t\towner.transfer(amount);\r\n\t}\r\n\r\n\tfunction contributorsCount() public view returns (uint){\r\n\t\treturn contributors.length;\r\n\t}\r\n\r\n\tfunction setVRC(address _vrc, address _vrcWallet, uint _vrcCount) public onlyOwner {\r\n\t\trequire(_vrc != address(0));\r\n\t\trequire(_vrcWallet != address(0));\r\n\t\trequire(_vrcCount > 0);\r\n\r\n\t\tvrc = ERC20(_vrc);\r\n\t\tvrcWallet = _vrcWallet;\r\n\t\tvrcCount = _vrcCount;\r\n\t}\r\n\r\n\tfunction setVCX(address _vcx, address _vcxWallet, uint _vcxCount) public onlyOwner {\r\n\t\trequire(_vcx != address(0));\r\n\t\trequire(_vcxWallet != address(0));\r\n\t\trequire(_vcxCount > 0);\r\n\r\n\t\tvcx = ERC20(_vcx);\r\n\t\tvcxWallet = _vcxWallet;\r\n\t\tvcxCount = _vcxCount;\r\n\t}\r\n\r\n\tfunction getBoxes(address contributor) public view returns (uint[] boxes) {\r\n\t\tuint tokenCount = balanceOf(contributor);\r\n\r\n\t\tif (tokenCount == 0) {\r\n\t\t\treturn new uint[](0);\r\n\t\t} else {\r\n\t\t\tuint[] memory _boxes = new uint[](tokenCount);\r\n\t\t\tuint totalItems = totalSupply();\r\n\t\t\tuint n = 0;\r\n\r\n\t\t\tfor (uint itemId = 0; itemId < totalItems; itemId++) {\r\n\t\t\t\tif (itemIndexToOwner[itemId] == contributor && isBoxItemId(itemId)) {\r\n\t\t\t\t\t_boxes[n++] = itemId;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tboxes = new uint[](n);\r\n\r\n\t\t\tfor (uint i = 0; i < n; i++) {\r\n\t\t\t\tboxes[i] = _boxes[i];\r\n\t\t\t}\r\n\t\t\treturn boxes;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction isBox(Item item) private pure returns (bool){\r\n\t\treturn item.typeId == ItemType.VRCBox || item.typeId == ItemType.VCXVault;\r\n\t}\r\n\r\n\tfunction isBoxItemId(uint itemId) public view returns (bool){\r\n\t\treturn isBox(items[itemId]);\r\n\t}\r\n\r\n\tfunction openBoxes(uint[] itemIds) public {\r\n\t\tfor (uint i = 0; i < itemIds.length; i++) {\r\n\t\t\tuint itemId = itemIds[i];\r\n\t\t\tItem storage item = items[itemId];\r\n\t\t\trequire(isBox(item));\r\n\r\n\t\t\ttransfer(this, itemId);\r\n\r\n\t\t\tif (item.typeId == ItemType.VRCBox) {\r\n\t\t\t\tvrc.transferFrom(vrcWallet, msg.sender, item.amount * vrcCount / weiRaised);\r\n\t\t\t} else {\r\n\t\t\t\tvcx.transferFrom(vcxWallet, msg.sender, item.amount * vcxCount / weiRaised);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"contractID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_preferredTransport\",\"type\":\"string\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vcxWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"isBoxItemId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vcxCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributorComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vrcWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"itemIds\",\"type\":\"uint256[]\"}],\"name\":\"openBoxes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributorBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vrc\",\"type\":\"address\"},{\"name\":\"_vrcWallet\",\"type\":\"address\"},{\"name\":\"_vrcCount\",\"type\":\"uint256\"}],\"name\":\"setVRC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensInfoOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vrcCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"getBoxes\",\"outputs\":[{\"name\":\"boxes\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vrc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc721Metadata\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"name\":\"typeId\",\"type\":\"uint8\"},{\"name\":\"model\",\"type\":\"uint8\"},{\"name\":\"manufacturer\",\"type\":\"uint8\"},{\"name\":\"rarity\",\"type\":\"uint8\"},{\"name\":\"createTime\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownershipTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorsCompleteCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setMetadataAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributorWhiteListTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vcx\",\"type\":\"address\"},{\"name\":\"_vcxWallet\",\"type\":\"address\"},{\"name\":\"_vcxCount\",\"type\":\"uint256\"}],\"name\":\"setVCX\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vcx\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"typeId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"model\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"manufacturer\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"rarity\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"createTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CreateItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"CryptoversePreorder","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b6430727a7e6cbc219acda85d07477120a199fe423b776a02da765492af62177"}]}