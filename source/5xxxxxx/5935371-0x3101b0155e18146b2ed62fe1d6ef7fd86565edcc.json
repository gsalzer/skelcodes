{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n/**\r\n* @title Circa ICO Contract\r\n* @dev Circa is an ERC-20 Standar Compliant Token\r\n* @author Fares A. Akel C. f.antonio.akel@gmail.com\r\n*/\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function burnToken(uint256 _burnedAmount) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title admined\r\n * @notice This contract is administered\r\n */\r\ncontract admined {\r\n    mapping(address => uint8) level;\r\n    //0 normal user\r\n    //1 basic admin\r\n    //2 master admin\r\n\r\n    /**\r\n    * @dev This contructor set the first master admin\r\n    */\r\n    constructor() internal {\r\n        level[0xEFfea09df22E0B25655BD3f23D9B531ba47d2A8B] = 2; //Set initial admin\r\n        emit AdminshipUpdated(0xEFfea09df22E0B25655BD3f23D9B531ba47d2A8B,2);\r\n    }\r\n\r\n    /**\r\n    * @dev This modifier limits function execution to the admin by level\r\n    */\r\n    modifier onlyAdmin(uint8 _level) { //A modifier to define admin-only functions\r\n        require(level[msg.sender] >= _level );\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice This function set the adminship level on the contract to _newAdmin\r\n    * @param _newAdmin The new admin of the contract\r\n    * @param _level level to set\r\n    */\r\n    function adminshipLevel(address _newAdmin, uint8 _level) onlyAdmin(2) public { //Admin can be set\r\n        require(_newAdmin != address(0));\r\n        level[_newAdmin] = _level;\r\n        emit AdminshipUpdated(_newAdmin,_level);\r\n    }\r\n\r\n    /**\r\n    * @dev Log Events\r\n    */\r\n    event AdminshipUpdated(address _newAdmin, uint8 _level);\r\n\r\n}\r\n\r\ncontract CircaICO is admined {\r\n\r\n    using SafeMath for uint256;\r\n    //This ico have these possible states\r\n    enum State {\r\n        PreSale, //PreSale - best value\r\n        MainSale,\r\n        Successful\r\n    }\r\n    //Public variables\r\n\r\n    //Time-state Related\r\n    State public state = State.PreSale; //Set initial stage\r\n    uint256 constant public PreSaleStart = 1532908800; //Human time (GMT): Monday, 30 July 2018 0:00:00\r\n    uint256 constant public PreSaleDeadline = 1534118399; //Human time (GMT): Sunday, 12 August 2018 23:59:59\r\n    uint256 constant public MainSaleStart = 1535155200; //Human time (GMT): Saturday, 25 August 2018 0:00:00\r\n    uint256 constant public MainSaleDeadline = 1536105599; //Human time (GMT): Tuesday, 4 September 2018 23:59:59\r\n    uint256 public completedAt; //Set when ico finish\r\n\r\n    //Token-eth related\r\n    uint256 public totalRaised; //eth collected in wei [INFO]\r\n    uint256 public PreSaleDistributed; //presale tokens distributed [INFO]\r\n    uint256 public MainSaleDistributed; //MainSale tokens distributed [INFO]\r\n    uint256 public PreSaleLimit = 260000000 * (10 ** 18); //260M tokens\r\n    uint256 public mainSale1Limit = 190000000 * (10 ** 18); // 190M tokens\r\n    uint256 public totalDistributed; //Whole sale tokens distributed [INFO]\r\n    ERC20Basic public tokenReward; //Token contract address\r\n    uint256 public hardCap = 640000000 * (10 ** 18); // 640M tokens (max tokens to be distributed by contract) [INFO]\r\n    //Contract details\r\n    address public creator;\r\n    string public version = '1';\r\n\r\n    bool ended = false;\r\n\r\n    //Tokens per eth rates\r\n    uint256[3] rates = [45000,35000,28000];\r\n\r\n    //events for log\r\n    event LogFundrisingInitialized(address _creator);\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n\r\n    //Modifier to prevent execution if ico has ended\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice ICO constructor\r\n    * @param _addressOfTokenUsedAsReward is the token to distribute\r\n    */\r\n    constructor(ERC20Basic _addressOfTokenUsedAsReward) public {\r\n\r\n        creator = 0xEFfea09df22E0B25655BD3f23D9B531ba47d2A8B; //Creator is set\r\n        tokenReward = _addressOfTokenUsedAsReward; //Token address is set during deployment\r\n\r\n        emit LogFundrisingInitialized(creator);\r\n    }\r\n\r\n    /**\r\n    * @notice contribution handler\r\n    */\r\n    function contribute() public notFinished payable {\r\n        require(msg.value <= 500 ether); //No whales\r\n\r\n        uint256 tokenBought = 0; //tokens bought variable\r\n\r\n        totalRaised = totalRaised.add(msg.value); //ether received updated\r\n\r\n        //Rate of exchange depends on stage\r\n        if (state == State.PreSale){\r\n\r\n            require(now >= PreSaleStart);\r\n\r\n            tokenBought = msg.value.mul(rates[0]);\r\n\r\n            if(PreSaleDistributed <= 30000000 * (10**18)){\r\n              tokenBought = tokenBought.mul(12);\r\n              tokenBought = tokenBought.div(10); //+20%\r\n            } else if (PreSaleDistributed <= 50000000 * (10**18)){\r\n              tokenBought = tokenBought.mul(11);\r\n              tokenBought = tokenBought.div(10); //+10%\r\n            }\r\n\r\n            PreSaleDistributed = PreSaleDistributed.add(tokenBought); //Tokens sold on presale updated\r\n\r\n        } else if (state == State.MainSale){\r\n\r\n            require(now >= MainSaleStart);\r\n\r\n            if(MainSaleDistributed < mainSale1Limit){\r\n              tokenBought = msg.value.mul(rates[1]);\r\n\r\n              if(MainSaleDistributed <= 80000000 * (10**18)){\r\n                tokenBought = tokenBought.mul(12);\r\n                tokenBought = tokenBought.div(10); //+20%\r\n              }\r\n\r\n            } else tokenBought = msg.value.mul(rates[2]);\r\n\r\n            MainSaleDistributed = MainSaleDistributed.add(tokenBought);\r\n\r\n        }\r\n\r\n        totalDistributed = totalDistributed.add(tokenBought); //whole tokens sold updated\r\n\r\n        require(totalDistributed <= hardCap);\r\n        require(tokenReward.transfer(msg.sender, tokenBought));\r\n\r\n        emit LogContributorsPayout(msg.sender, tokenBought);\r\n        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n\r\n        checkIfFundingCompleteOrExpired();\r\n    }\r\n\r\n    /**\r\n    * @notice check status\r\n    */\r\n    function checkIfFundingCompleteOrExpired() public {\r\n\r\n        //If hardCap is reached ICO ends\r\n        if (totalDistributed == hardCap && state != State.Successful){\r\n\r\n            state = State.Successful; //ICO becomes Successful\r\n            completedAt = now; //ICO is complete\r\n\r\n            emit LogFundingSuccessful(totalRaised); //we log the finish\r\n            successful(); //and execute closure\r\n\r\n        } else if(state == State.PreSale && PreSaleDistributed >= PreSaleLimit){\r\n\r\n            state = State.MainSale; //Once presale ends the ICO holds\r\n\r\n        }\r\n    }\r\n\r\n    function forceNextStage() onlyAdmin(2) public {\r\n\r\n        if(state == State.PreSale && now > PreSaleDeadline){\r\n          state = State.MainSale;\r\n        } else if (state == State.MainSale && now > MainSaleDeadline ){\r\n          state = State.Successful; //ICO becomes Successful\r\n          completedAt = now; //ICO is complete\r\n\r\n          emit LogFundingSuccessful(totalRaised); //we log the finish\r\n          successful(); //and execute closure\r\n        } else revert();\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice successful closure handler\r\n    */\r\n    function successful() public {\r\n        //When successful\r\n        require(state == State.Successful);\r\n        if(ended == false){\r\n            ended = true;\r\n            //If there is any token left after ico\r\n            uint256 remanent = hardCap.sub(totalDistributed); //Total tokens to distribute - total distributed\r\n            //It's burned\r\n            require(tokenReward.burnToken(remanent));\r\n        }\r\n        //After successful all remaining eth is send to creator\r\n        creator.transfer(address(this).balance);\r\n        emit LogBeneficiaryPaid(creator);\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice Manual eth retrieve\r\n    */\r\n    function ethRetrieve() onlyAdmin(2) public {\r\n      creator.transfer(address(this).balance);\r\n      emit LogBeneficiaryPaid(creator);\r\n    }\r\n\r\n    /**\r\n    * @notice Function to claim any token stuck on contract\r\n    */\r\n    function externalTokensRecovery(ERC20Basic _address) onlyAdmin(2) public{\r\n        require(state == State.Successful);\r\n\r\n        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\r\n        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\r\n\r\n    }\r\n\r\n    /*\r\n    * @dev Direct payments handler\r\n    */\r\n\r\n    function () public payable {\r\n\r\n        contribute();\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceNextStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreSaleDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MainSaleDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"externalTokensRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreSaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MainSaleDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MainSaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"successful\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSale1Limit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ethRetrieve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreSaleDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"adminshipLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreSaleLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"LogFundrisingInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"AdminshipUpdated\",\"type\":\"event\"}]","ContractName":"CircaICO","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cdee4c7eb19c7e5d95cac3a25f0543557f9bf111","Library":"","SwarmSource":"bzzr://992f140a2f8b5b90b7ebb3c919239aa611743b3d18bf1b3be42b022d76cb3309"}]}