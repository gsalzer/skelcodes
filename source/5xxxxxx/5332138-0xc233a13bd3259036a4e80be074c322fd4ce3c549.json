{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\ncontract Owned {\r\n     address public owner;\r\n    address public newOwner;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n \r\n    function acceptOwnership() {\r\n        if (msg.sender == newOwner) {\r\n            OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract EthExploder is Owned { \r\n    uint256 public jackpotSmall;\r\n    uint256 public jackpotMedium; \r\n    uint256 public jackpotLarge; \r\n    \r\n    uint256 public houseEarnings; \r\n    uint256 public houseTotal; \r\n    \r\n    uint256 public gameCount; \r\n    \r\n    uint16 public smallCount; \r\n    uint16 public mediumCount; \r\n    uint16 public largeCount; \r\n    \r\n    uint16 public smallSize; \r\n    uint16 public mediumSize;\r\n    uint16 public largeSize; \r\n    \r\n    uint256 public seed; \r\n    \r\n    mapping (uint16 => address) playersSmall; \r\n    mapping (uint16 => address) playersMedium; \r\n    mapping (uint16 => address) playersLarge; \r\n    \r\n    function enterSmall() payable {\r\n        require(msg.value > 0);\r\n        \r\n        jackpotSmall += msg.value; \r\n        playersSmall[smallCount] = msg.sender; \r\n        seed += uint256(msg.sender);\r\n        \r\n        if (smallCount < smallSize-1) { \r\n            smallCount++;\r\n        } else { \r\n            seed += gameCount + mediumCount + largeCount;\r\n            houseEarnings += (jackpotSmall*3)/100;\r\n            jackpotSmall -= (jackpotSmall*3)/100;\r\n            \r\n            uint16 winner = uint16(seed % smallSize); \r\n            address winning = playersSmall[winner]; \r\n           \r\n            \r\n            //Reset the game: \r\n            smallCount = 0; \r\n            uint256 amt = jackpotSmall;\r\n            jackpotSmall = 0; \r\n            winning.transfer(amt);\r\n            gameCount++;\r\n            emit GameWon(0,winning,amt); \r\n        }\r\n    }\r\n    \r\n    function enterMedium() payable { \r\n        require(msg.value > 0); \r\n        \r\n        jackpotMedium += msg.value; \r\n        playersMedium[mediumCount] = msg.sender; \r\n        seed += uint256(msg.sender);\r\n         \r\n        if (mediumCount < mediumSize-1) { \r\n            mediumCount++;\r\n        } else { \r\n            seed += gameCount + smallCount + largeCount;\r\n            houseEarnings += (jackpotMedium*3)/100;\r\n            jackpotMedium -= (jackpotMedium*3)/100;\r\n            \r\n            uint16 winner = uint16(seed % mediumSize); \r\n            address winning = playersMedium[winner];\r\n            //winning.transfer(jackpotMedium); \r\n            \r\n            //Reset the game \r\n            mediumCount = 0; \r\n            uint256 amt = jackpotMedium;\r\n            jackpotMedium = 0; \r\n            winning.transfer(amt);\r\n            gameCount++;\r\n            emit GameWon(1,winning,amt); \r\n\r\n        }\r\n    }\r\n    \r\n    function enterLarge() payable { \r\n        require(msg.value > 0); \r\n        \r\n        jackpotLarge += msg.value; \r\n        playersLarge[largeCount] = msg.sender; \r\n        seed += uint256(msg.sender);\r\n        \r\n        if (largeCount < largeSize-1) { \r\n            largeCount++; \r\n        } else { \r\n            seed += gameCount + mediumCount + largeCount; \r\n            houseEarnings += (jackpotLarge*3)/100;\r\n            jackpotLarge -= (jackpotLarge*3)/100;\r\n            \r\n            uint16 winner = uint16(seed % largeSize); \r\n            address winning = playersLarge[winner];\r\n            \r\n            //Reset the game \r\n            largeCount = 0; \r\n            uint256 amt = jackpotLarge;\r\n            jackpotLarge = 0; \r\n            winning.transfer(amt);\r\n            gameCount++;\r\n            emit GameWon(2,winning,amt); \r\n\r\n        }\r\n        \r\n    }\r\n    \r\n    function setPools(uint16 sm, uint16 med, uint16 lrg) onlyOwner { \r\n        smallSize = sm; \r\n        mediumSize = med; \r\n        largeSize = lrg; \r\n    }\r\n    \r\n    function claim(address payment) onlyOwner { \r\n        payment.transfer(houseEarnings); \r\n        houseTotal += houseEarnings; \r\n        houseEarnings = 0; \r\n    }\r\n    \r\n    //Prevent accidental ether sending \r\n    function () payable { \r\n     revert(); \r\n }\r\n\r\n event GameWon(uint8 gameType, address winner, uint256 winnings); \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"enterMedium\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enterLarge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotSmall\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payment\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"largeSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enterSmall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sm\",\"type\":\"uint16\"},{\"name\":\"med\",\"type\":\"uint16\"},{\"name\":\"lrg\",\"type\":\"uint16\"}],\"name\":\"setPools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"largeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mediumSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mediumCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smallCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smallSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotMedium\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotLarge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnings\",\"type\":\"uint256\"}],\"name\":\"GameWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EthExploder","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://069f8efed54201e59afeb2dc168e68cbcfff5cb27a9b2affa6cc26412e3b4d2e"}]}