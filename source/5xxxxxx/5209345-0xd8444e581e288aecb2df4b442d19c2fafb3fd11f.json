{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract Sale is Ownable {\r\n  using SafeMath for uint256;\r\n    uint rate = 1;\r\n    uint mincap = 0;\r\n    address tokenAddr;\r\n    bool isActive = false;\r\n    bool onlyWhitelist = false;\r\n\r\n    mapping(address => uint) balance;\r\n    mapping(address => uint) balanceWithdrawn;\r\n    address[] investors;\r\n    mapping(address => bool) whitelist;\r\n\r\n\r\n    function Sale() public{\r\n    }\r\n\r\n    function() payable public{ \r\n      require(isActive);\r\n      require(tokenAddr != address(0));\r\n      require(msg.sender != address(0));\r\n      require(msg.value >=  mincap );\r\n      require(!onlyWhitelist || whitelist[msg.sender]);\r\n      uint256 amt = msg.value.mul(rate);\r\n\r\n      ERC20 token = ERC20(tokenAddr);\r\n      require(token.balanceOf(this) >= amt);\r\n      \r\n      if(balance[msg.sender] == 0){\r\n        investors.push(msg.sender);\r\n      }\r\n      balance[msg.sender] += amt;\r\n    }\r\n    function getRate() public view returns(uint){\r\n        return rate;\r\n    }\r\n    function getCap() public view returns(uint){\r\n        return mincap;\r\n    }\r\n    function getBalance() public view returns(uint256){\r\n      ERC20 token = ERC20(tokenAddr);\r\n      return token.balanceOf(this);\r\n    }\r\n    function changeRate(uint _rate) public onlyOwner{\r\n      rate = _rate;\r\n    }\r\n    function changemincap(uint _mincap) public onlyOwner{\r\n      mincap = _mincap;\r\n    }\r\n    function changeAddr(address _tokenAddr) public onlyOwner{\r\n      tokenAddr = _tokenAddr;\r\n    }\r\n    function addWhitelist(address[] addr_list) public onlyOwner{\r\n      for(uint i=0;i<addr_list.length;i++){\r\n        whitelist[addr_list[i]] = true;\r\n      }\r\n    }\r\n    function setActive() public onlyOwner{\r\n        isActive = !isActive;\r\n    }\r\n    function setActiveWhitelist() public onlyOwner{\r\n        onlyWhitelist = !onlyWhitelist;\r\n    }\r\n    function drainWei() public onlyOwner{\r\n        owner.transfer(this.balance);\r\n    }    \r\n    function drainToken() public onlyOwner{\r\n        uint cantWithdrawAmt = 0;\r\n        for(uint i = 0;i<investors.length;i++){\r\n          cantWithdrawAmt += balance[investors[i]];\r\n        }      \r\n        ERC20 token = ERC20(tokenAddr);\r\n        token.transfer(msg.sender, (token.balanceOf(this)).sub(cantWithdrawAmt) );\r\n    }\r\n    function giveTokens(uint percent) public onlyOwner{\r\n        ERC20 token = ERC20(tokenAddr);\r\n        for(uint i = 0;i<investors.length;i++){\r\n          uint bal = balance[investors[i]];\r\n          uint canWithdrawAmt = (bal.div(100)).mul(percent);\r\n          if(canWithdrawAmt > 0 && balanceWithdrawn[investors[i]] + canWithdrawAmt <= bal){\r\n            balanceWithdrawn[investors[i]] += canWithdrawAmt;\r\n            token.transfer(investors[i], canWithdrawAmt);\r\n          }\r\n        }      \r\n    }        \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"changeAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"giveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drainToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mincap\",\"type\":\"uint256\"}],\"name\":\"changemincap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drainWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr_list\",\"type\":\"address[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setActiveWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Sale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e7e3e5808767439de0c4c535965401e15964e78ff6b917700902e9a363ed39aa"}]}