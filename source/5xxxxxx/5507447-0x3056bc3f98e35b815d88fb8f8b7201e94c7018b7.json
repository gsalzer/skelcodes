{"status":"1","message":"OK","result":[{"SourceCode":"// CryptoTorch-Token Source code\r\n// copyright 2018 CryptoTorch <https://cryptotorch.io>\r\n\r\npragma solidity 0.4.19;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title Ownable\r\n *\r\n * Owner rights:\r\n *   - change the name of the contract\r\n *   - change the name of the token\r\n *   - change the Proof of Stake difficulty\r\n *   - transfer ownership\r\n *\r\n * Owner CANNOT:\r\n *   - withdrawal funds\r\n *   - disable withdrawals\r\n *   - kill the contract\r\n *   - change the price of tokens\r\n*/\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface (Good parts only)\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title CryptoTorchToken\r\n *\r\n * Token + Dividends System for the Cryptolympic-Torch\r\n *\r\n * Token: KMS - Kilometers (Distance of Torch Run)\r\n */\r\ncontract CryptoTorchToken is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    //\r\n    // Events\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n    event onWithdraw(\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n    event onMint(\r\n        address indexed to,\r\n        uint256 pricePaid,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy\r\n    );\r\n    event onBurn(\r\n        address indexed from,\r\n        uint256 tokensBurned,\r\n        uint256 amountEarned\r\n    );\r\n\r\n    //\r\n    // Token Configurations\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n    string internal name_ = \"Cryptolympic Torch-Run Kilometers\";\r\n    string internal symbol_ = \"KMS\";\r\n    uint256 constant internal dividendFee_ = 5;\r\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\r\n    uint256 constant internal magnitude = 2**64;\r\n    uint256 public stakingRequirement = 50e18;\r\n\r\n    //\r\n    // Token Internals\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n    uint256 internal tokenSupply_ = 0;\r\n    uint256 internal profitPerShare_;\r\n    address internal tokenController_;\r\n    address internal donationsReceiver_;\r\n    mapping (address => uint256) internal tokenBalanceLedger_; // scaled by 1e18\r\n    mapping (address => uint256) internal referralBalance_;\r\n    mapping (address => uint256) internal profitsReceived_;\r\n    mapping (address => int256) internal payoutsTo_;\r\n\r\n    //\r\n    // Modifiers\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n    // No buying tokens directly through this contract, only through the\r\n    // CryptoTorch Controller Contract via the CryptoTorch Dapp\r\n    //\r\n    modifier onlyTokenController() {\r\n        require(tokenController_ != address(0) && msg.sender == tokenController_);\r\n        _;\r\n    }\r\n\r\n    // Token Holders Only\r\n    modifier onlyTokenHolders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    // Dividend Holders Only\r\n    modifier onlyProfitHolders() {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n\r\n    //\r\n    // Public Functions\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n    /**\r\n     * Contract Constructor\r\n     */\r\n    function CryptoTorchToken() public {}\r\n\r\n    /**\r\n     * Sets the Token Controller Contract (CryptoTorch)\r\n     */\r\n    function setTokenController(address _controller) public onlyOwner {\r\n        tokenController_ = _controller;\r\n    }\r\n\r\n    /**\r\n     * Sets the Contract Donations Receiver address\r\n     */\r\n    function setDonationsReceiver(address _receiver) public onlyOwner {\r\n        donationsReceiver_ = _receiver;\r\n    }\r\n\r\n    /**\r\n     * Do not make payments directly to this contract (unless it is a donation! :)\r\n     *  - payments made directly to the contract do not receive tokens.  Tokens\r\n     *    are only available through the CryptoTorch Controller Contract, which\r\n     *    is managed by the Dapp at https://cryptotorch.io\r\n     */\r\n    function() payable public {\r\n        if (msg.value > 0 && donationsReceiver_ != 0x0) {\r\n            donationsReceiver_.transfer(msg.value); // donations?  Thank you!  :)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Liquifies tokens to ether.\r\n     */\r\n    function sell(uint256 _amountOfTokens) public onlyTokenHolders {\r\n        sell_(msg.sender, _amountOfTokens);\r\n    }\r\n\r\n    /**\r\n     * Liquifies tokens to ether.\r\n     */\r\n    function sellFor(address _for, uint256 _amountOfTokens) public onlyTokenController {\r\n        sell_(_for, _amountOfTokens);\r\n    }\r\n\r\n    /**\r\n     * Liquifies tokens to ether.\r\n     */\r\n    function withdraw() public onlyProfitHolders {\r\n        withdraw_(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Liquifies tokens to ether.\r\n     */\r\n    function withdrawFor(address _for) public onlyTokenController {\r\n        withdraw_(_for);\r\n    }\r\n\r\n    /**\r\n     * Liquifies tokens to ether.\r\n     */\r\n    function mint(address _to, uint256 _amountPaid, address _referredBy) public onlyTokenController payable returns(uint256) {\r\n        require(_amountPaid == msg.value);\r\n        return mintTokens_(_to, _amountPaid, _referredBy);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from the caller to a new holder.\r\n     * There's a small fee here that is redistributed to all token holders\r\n     */\r\n    function transfer(address _to, uint256 _value) public onlyTokenHolders returns(bool) {\r\n        return transferFor_(msg.sender, _to, _value);\r\n    }\r\n\r\n    //\r\n    // Owner Functions\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setName(string _name) public onlyOwner {\r\n        name_ = _name;\r\n    }\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setSymbol(string _symbol) public onlyOwner {\r\n        symbol_ = _symbol;\r\n    }\r\n\r\n    /**\r\n     * Precautionary measures in case we need to adjust the masternode rate.\r\n     */\r\n    function setStakingRequirement(uint256 _amountOfTokens) public onlyOwner {\r\n        stakingRequirement = _amountOfTokens;\r\n    }\r\n\r\n    //\r\n    // Helper Functions\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n    /**\r\n     * View the total balance of the contract\r\n     */\r\n    function contractBalance() public view returns (uint256) {\r\n        return this.balance;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the total token supply.\r\n     */\r\n    function totalSupply() public view returns(uint256) {\r\n        return tokenSupply_;\r\n    }\r\n\r\n    /**\r\n     * ERC20 Token Name\r\n     */\r\n    function name() public view returns (string) {\r\n        return name_;\r\n    }\r\n\r\n    /**\r\n     * ERC20 Token Symbol\r\n     */\r\n    function symbol() public view returns (string) {\r\n        return symbol_;\r\n    }\r\n\r\n    /**\r\n     * ERC20 Token Decimals\r\n     */\r\n    function decimals() public pure returns (uint256) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens() public view returns(uint256) {\r\n        address _playerAddress = msg.sender;\r\n        return balanceOf(_playerAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividends owned by the caller.\r\n     * If `_includeBonus` is to to true, the referral bonus will be included in the calculations.\r\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n     * But in the internal calculations, we want them separate.\r\n     */\r\n    function myDividends(bool _includeBonus) public view returns(uint256) {\r\n        address _playerAddress = msg.sender;\r\n        return _includeBonus ? dividendsOf(_playerAddress) + referralBalance_[_playerAddress] : dividendsOf(_playerAddress);\r\n    }\r\n\r\n    /**\r\n     * Retreive the Total Profits previously paid out to the Caller\r\n     */\r\n    function myProfitsReceived() public view returns (uint256) {\r\n        address _playerAddress = msg.sender;\r\n        return profitsOf(_playerAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _playerAddress) public view returns(uint256) {\r\n        return tokenBalanceLedger_[_playerAddress];\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendsOf(address _playerAddress) public view returns(uint256) {\r\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_playerAddress]) - payoutsTo_[_playerAddress]) / magnitude;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the paid-profits balance of any single address.\r\n     */\r\n    function profitsOf(address _playerAddress) public view returns(uint256) {\r\n        return profitsReceived_[_playerAddress];\r\n    }\r\n\r\n    /**\r\n     * Retrieve the referral dividends balance of any single address.\r\n     */\r\n    function referralBalanceOf(address _playerAddress) public view returns(uint256) {\r\n        return referralBalance_[_playerAddress];\r\n    }\r\n\r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function sellPrice() public view returns(uint256) {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ether = tokensToEther_(1e18);\r\n            uint256 _dividends = SafeMath.div(_ether, dividendFee_);\r\n            uint256 _taxedEther = SafeMath.sub(_ether, _dividends);\r\n            return _taxedEther;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the buy price of 1 individual token.\r\n     */\r\n    function buyPrice() public view returns(uint256) {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ether = tokensToEther_(1e18);\r\n            uint256 _dividends = SafeMath.div(_ether, dividendFee_);\r\n            uint256 _taxedEther = SafeMath.add(_ether, _dividends);\r\n            return _taxedEther;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n     */\r\n    function calculateTokensReceived(uint256 _etherToSpend) public view returns(uint256) {\r\n        uint256 _dividends = _etherToSpend.div(dividendFee_);\r\n        uint256 _taxedEther = _etherToSpend.sub(_dividends);\r\n        uint256 _amountOfTokens = etherToTokens_(_taxedEther);\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n     */\r\n    function calculateEtherReceived(uint256 _tokensToSell) public view returns(uint256) {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ether = tokensToEther_(_tokensToSell);\r\n        uint256 _dividends = _ether.div(dividendFee_);\r\n        uint256 _taxedEther = _ether.sub(_dividends);\r\n        return _taxedEther;\r\n    }\r\n\r\n    //\r\n    // Internal Functions\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //\r\n\r\n    /**\r\n     * Liquifies tokens to ether.\r\n     */\r\n    function sell_(address _recipient, uint256 _amountOfTokens) internal {\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_recipient]);\r\n\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ether = tokensToEther_(_tokens);\r\n        uint256 _dividends = SafeMath.div(_ether, dividendFee_);\r\n        uint256 _taxedEther = SafeMath.sub(_ether, _dividends);\r\n\r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_recipient] = SafeMath.sub(tokenBalanceLedger_[_recipient], _tokens);\r\n\r\n        // update dividends tracker\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEther * magnitude));\r\n        payoutsTo_[_recipient] -= _updatedPayouts;\r\n\r\n        // update the amount of dividends per token\r\n        if (tokenSupply_ > 0) {\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        }\r\n\r\n        // fire event\r\n        onBurn(_recipient, _tokens, _taxedEther);\r\n    }\r\n\r\n    /**\r\n     * Withdraws all of the callers earnings.\r\n     */\r\n    function withdraw_(address _recipient) internal {\r\n        require(_recipient != address(0));\r\n\r\n        // setup data\r\n        uint256 _dividends = getDividendsOf_(_recipient, false);\r\n\r\n        // update dividend tracker\r\n        payoutsTo_[_recipient] += (int256)(_dividends * magnitude);\r\n\r\n        // add ref. bonus\r\n        _dividends += referralBalance_[_recipient];\r\n        referralBalance_[_recipient] = 0;\r\n\r\n        // fire event\r\n        onWithdraw(_recipient, _dividends);\r\n\r\n        // transfer funds\r\n        profitsReceived_[_recipient] = profitsReceived_[_recipient].add(_dividends);\r\n        _recipient.transfer(_dividends);\r\n\r\n        // Keep contract clean\r\n        if (tokenSupply_ == 0 && this.balance > 0) {\r\n            owner.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Assign tokens to player\r\n     */\r\n    function mintTokens_(address _to, uint256 _amountPaid, address _referredBy) internal returns(uint256) {\r\n        require(_to != address(this) && _to != tokenController_);\r\n\r\n        uint256 _undividedDividends = SafeMath.div(_amountPaid, dividendFee_);\r\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 10);\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n        uint256 _taxedEther = SafeMath.sub(_amountPaid, _undividedDividends);\r\n        uint256 _amountOfTokens = etherToTokens_(_taxedEther);\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\r\n        // (or hackers)\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_));\r\n\r\n        // is the user referred by a masternode?\r\n        if (_referredBy != address(0) && _referredBy != _to && tokenBalanceLedger_[_referredBy] >= stakingRequirement) {\r\n            // wealth redistribution\r\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\r\n        } else {\r\n            // no ref purchase\r\n            // add the referral bonus back to the global dividends cake\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n\r\n        if (tokenSupply_ > 0) {\r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n\r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n\r\n            // calculate the amount of tokens the customer receives over his purchase\r\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n\r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[_to] = SafeMath.add(tokenBalanceLedger_[_to], _amountOfTokens);\r\n\r\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them\r\n        int256 _updatedPayouts = (int256)((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[_to] += _updatedPayouts;\r\n\r\n        // fire event\r\n        onMint(_to, _amountPaid, _amountOfTokens, _referredBy);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from the caller to a new holder.\r\n     * There's a small fee here that is redistributed to all token holders\r\n     */\r\n    function transferFor_(address _from, address _to, uint256 _amountOfTokens) internal returns(bool) {\r\n        require(_to != address(0));\r\n        require(tokenBalanceLedger_[_from] >= _amountOfTokens && tokenBalanceLedger_[_to] + _amountOfTokens >= tokenBalanceLedger_[_to]);\r\n\r\n        // make sure we have the requested tokens\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_from]);\r\n\r\n        // withdraw all outstanding dividends first\r\n        if (getDividendsOf_(_from, true) > 0) {\r\n            withdraw_(_from);\r\n        }\r\n\r\n        // liquify 10% of the tokens that are transferred\r\n        // these are dispersed to shareholders\r\n        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n        uint256 _dividends = tokensToEther_(_tokenFee);\r\n\r\n        // burn the fee tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_from] = SafeMath.sub(tokenBalanceLedger_[_from], _amountOfTokens);\r\n        tokenBalanceLedger_[_to] = SafeMath.add(tokenBalanceLedger_[_to], _taxedTokens);\r\n\r\n        // update dividend trackers\r\n        payoutsTo_[_from] -= (int256)(profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_to] += (int256)(profitPerShare_ * _taxedTokens);\r\n\r\n        // disperse dividends among holders\r\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n\r\n        // fire event\r\n        Transfer(_from, _to, _taxedTokens);\r\n\r\n        // ERC20\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividends of the owner.\r\n     */\r\n    function getDividendsOf_(address _recipient, bool _includeBonus) internal view returns(uint256) {\r\n        return _includeBonus ? dividendsOf(_recipient) + referralBalance_[_recipient] : dividendsOf(_recipient);\r\n    }\r\n\r\n    /**\r\n     * Calculate Token price based on an amount of incoming ether;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function etherToTokens_(uint256 _ether) internal view returns(uint256) {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived =\r\n        (\r\n        (\r\n        // underflow attempts BTFO\r\n        SafeMath.sub(\r\n            (sqrt\r\n        (\r\n            (_tokenPriceInitial**2)\r\n            +\r\n            (2*(tokenPriceIncremental_ * 1e18)*(_ether * 1e18))\r\n            +\r\n            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n            +\r\n            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n        )\r\n            ), _tokenPriceInitial\r\n        )\r\n        )/(tokenPriceIncremental_)\r\n        )-(tokenSupply_);\r\n\r\n        return _tokensReceived;\r\n    }\r\n\r\n    /**\r\n     * Calculate token sell value.\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function tokensToEther_(uint256 _tokens) internal view returns(uint256) {\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _etherReceived =\r\n        (\r\n        // underflow attempts BTFO\r\n        SafeMath.sub(\r\n            (\r\n            (\r\n            (\r\n            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\r\n            )-tokenPriceIncremental_\r\n            )*(tokens_ - 1e18)\r\n            ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\r\n        )\r\n        /1e18);\r\n        return _etherReceived;\r\n    }\r\n\r\n    /**\r\n     * Squirts gas! ;)\r\n     */\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"profitsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amountPaid\",\"type\":\"uint256\"},{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_etherToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"referralBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sellFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"setStakingRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setDonationsReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEtherReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setTokenController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myProfitsReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pricePaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountEarned\",\"type\":\"uint256\"}],\"name\":\"onBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CryptoTorchToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8adcaf2fa26e4797573d4496350dcc1de66ea7cd8106c9a701534d919ee332ab"}]}