{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract DogCoreInterface {\r\n\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n\r\n    function getDog(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n        uint256 cooldownIndex,\r\n        uint256 nextActionAt,\r\n        uint256 siringWithId,\r\n        uint256 birthTime,\r\n        uint256 matronId,\r\n        uint256 sireId,\r\n        uint256 generation,\r\n        uint256 genes,\r\n        uint8  variation,\r\n        uint256 gen0\r\n    );\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function sendMoney(address _to, uint256 _money) external;\r\n    function totalSupply() external view returns (uint);\r\n    function getOwner(uint256 _tokenId) public view returns(address);\r\n    function getAvailableBlance() external view returns(uint256);\r\n}\r\n\r\n\r\ncontract LotteryBase {\r\n    \r\n    uint8 public currentGene;\r\n    \r\n    uint256 public lastBlockNumber;\r\n    \r\n    uint256 randomSeed = 1;\r\n\r\n    struct CLottery {\r\n        \r\n        uint8[7]        luckyGenes;\r\n        \r\n        uint256         totalAmount;\r\n        \r\n        uint256         openBlock;\r\n        \r\n        bool            isReward;\r\n        \r\n        bool         noFirstReward;\r\n    }\r\n    \r\n    CLottery[] public CLotteries;\r\n    \r\n    address public finalLottery;\r\n    \r\n    uint256 public SpoolAmount = 0;\r\n    \r\n    DogCoreInterface public dogCore;\r\n    \r\n    event OpenLottery(uint8 currentGene, uint8 luckyGenes, uint256 currentTerm, uint256 blockNumber, uint256 totalAmount);\r\n    \r\n    event OpenCarousel(uint256 luckyGenes, uint256 currentTerm, uint256 blockNumber, uint256 totalAmount);\r\n    \r\n    \r\n    modifier onlyCEO() {\r\n        require(msg.sender == dogCore.ceoAddress());\r\n        _;  \r\n    }\r\n    \r\n    modifier onlyCFO() {\r\n        require(msg.sender == dogCore.cfoAddress());\r\n        _;  \r\n    }\r\n    \r\n    function toLotteryPool(uint amount) public onlyCFO {\r\n        require(SpoolAmount >= amount);\r\n        SpoolAmount -= amount;\r\n    }\r\n    \r\n    function _isCarousal(uint256 currentTerm) external view returns(bool) {\r\n       return (currentTerm > 1 && CLotteries[currentTerm - 2].noFirstReward && CLotteries[currentTerm - 1].noFirstReward); \r\n    }\r\n    \r\n    function getCurrentTerm() external view returns (uint256) {\r\n\r\n        return (CLotteries.length - 1);\r\n    }\r\n}\r\n\r\n\r\ncontract LotteryGenes is LotteryBase {\r\n    \r\n    function convertGeneArray(uint256 gene) public pure returns(uint8[7]) {\r\n        uint8[28] memory geneArray; \r\n        uint8[7] memory lotteryArray;\r\n        uint index = 0;\r\n        for (index = 0; index < 28; index++) {\r\n            uint256 geneItem = gene % (2 ** (5 * (index + 1)));\r\n            geneItem /= (2 ** (5 * index));\r\n            geneArray[index] = uint8(geneItem);\r\n        }\r\n        for (index = 0; index < 7; index++) {\r\n            uint size = 4 * index;\r\n            lotteryArray[index] = geneArray[size];\r\n            \r\n        }\r\n        return lotteryArray;\r\n    }\r\n\r\n    function convertGene(uint8[7] luckyGenes) public pure returns(uint256) {\r\n        uint8[28] memory geneArray;\r\n        for (uint8 i = 0; i < 28; i++) {\r\n            if (i%4 == 0) {\r\n                geneArray[i] = luckyGenes[i/4];\r\n            } else {\r\n                geneArray[i] = 6;\r\n            }\r\n        }\r\n        uint256 gene = uint256(geneArray[0]);\r\n        \r\n        for (uint8 index = 1; index < 28; index++) {\r\n            uint256 geneItem = uint256(geneArray[index]);\r\n            gene += geneItem << (index * 5);\r\n        }\r\n        return gene;\r\n    }\r\n}\r\n\r\n\r\ncontract SetLottery is LotteryGenes {\r\n\r\n    function random(uint8 seed) internal returns(uint8) {\r\n        randomSeed = block.timestamp;\r\n        return uint8(uint256(keccak256(randomSeed, block.difficulty))%seed)+1;\r\n    }\r\n\r\n    function openLottery(uint8 _viewId) public returns(uint8,uint8) {\r\n        uint8 viewId = _viewId;\r\n        require(viewId < 7);\r\n        uint256 currentTerm = CLotteries.length - 1;\r\n        CLottery storage clottery = CLotteries[currentTerm];\r\n\r\n        if (currentGene == 0 && clottery.openBlock > 0 && clottery.isReward == false) {\r\n            OpenLottery(viewId, clottery.luckyGenes[viewId], currentTerm, clottery.openBlock, clottery.totalAmount);\r\n            return (clottery.luckyGenes[viewId],1);\r\n        }\r\n        if (lastBlockNumber == block.number) {\r\n            OpenLottery(viewId, clottery.luckyGenes[viewId], currentTerm, clottery.openBlock, clottery.totalAmount);\r\n            return (clottery.luckyGenes[viewId],2);\r\n        }\r\n        if (currentGene == 0 && clottery.isReward == true) {\r\n            CLottery memory _clottery;\r\n            _clottery.luckyGenes = [0,0,0,0,0,0,0];\r\n            _clottery.totalAmount = uint256(0);\r\n            _clottery.isReward = false;\r\n            _clottery.openBlock = uint256(0);\r\n            currentTerm = CLotteries.push(_clottery) - 1;\r\n        }\r\n\r\n        if (this._isCarousal(currentTerm)) {\r\n            revert();\r\n        }\r\n\r\n        uint8 luckyNum = 0;\r\n        \r\n        uint256 bonusBalance = dogCore.getAvailableBlance();\r\n        if (currentGene == 6) {\r\n            if (bonusBalance <= SpoolAmount) {\r\n                OpenLottery(viewId, clottery.luckyGenes[viewId], currentTerm, 0, 0);\r\n                return (clottery.luckyGenes[viewId],3);\r\n            }\r\n            luckyNum = random(8);\r\n            CLotteries[currentTerm].luckyGenes[currentGene] = luckyNum;\r\n            OpenLottery(currentGene, luckyNum, currentTerm, block.number, bonusBalance);\r\n            currentGene = 0;\r\n            CLotteries[currentTerm].openBlock = block.number;\r\n            CLotteries[currentTerm].totalAmount = bonusBalance;\r\n            lastBlockNumber = block.number;\r\n        } else {         \r\n            luckyNum = random(12);\r\n            CLotteries[currentTerm].luckyGenes[currentGene] = luckyNum;\r\n\r\n            OpenLottery(currentGene, luckyNum, currentTerm, 0, 0);\r\n            currentGene ++;\r\n            lastBlockNumber = block.number;\r\n        }\r\n        return (luckyNum,0);\r\n    } \r\n\r\n    function random2() internal view returns (uint256) {\r\n        return uint256(uint256(keccak256(block.timestamp, block.difficulty))%uint256(dogCore.totalSupply()) + 1);\r\n    }\r\n\r\n    function openCarousel() public {\r\n        uint256 currentTerm = CLotteries.length - 1;\r\n        CLottery storage clottery = CLotteries[currentTerm];\r\n\r\n        if (currentGene == 0 && clottery.openBlock > 0 && clottery.isReward == false) {\r\n\r\n            OpenCarousel(convertGene(clottery.luckyGenes), currentTerm, clottery.openBlock, clottery.totalAmount);\r\n        }\r\n\r\n        if (currentGene == 0 && clottery.openBlock > 0 && clottery.isReward == true) {\r\n            CLottery memory _clottery;\r\n            _clottery.luckyGenes = [0,0,0,0,0,0,0];\r\n            _clottery.totalAmount = uint256(0);\r\n            _clottery.isReward = false;\r\n            _clottery.openBlock = uint256(0);\r\n            currentTerm = CLotteries.push(_clottery) - 1;\r\n        }\r\n\r\n        uint256 bonusBlance = dogCore.getAvailableBlance();\r\n\r\n        require (this._isCarousal(currentTerm));\r\n        uint256 genes = _getValidRandomGenes();\r\n        require (genes > 0);\r\n        uint8[7] memory luckyGenes = convertGeneArray(genes);\r\n        OpenCarousel(genes, currentTerm, block.number, bonusBlance);\r\n\r\n        CLotteries[currentTerm].luckyGenes = luckyGenes;\r\n        CLotteries[currentTerm].openBlock = block.number;\r\n        CLotteries[currentTerm].totalAmount = bonusBlance;        \r\n    }\r\n    \r\n    function _getValidRandomGenes() internal view returns (uint256) {\r\n        uint256 luckyDog = random2();\r\n        uint256 genes = _validGenes(luckyDog);\r\n        uint256 totalSupply = dogCore.totalSupply();\r\n        if (genes > 0) {\r\n            return genes;\r\n        }  \r\n        uint256 min = (luckyDog < totalSupply-luckyDog) ? (luckyDog - 1) : totalSupply-luckyDog;\r\n        for (uint256 i = 1; i < min + 1; i++) {\r\n            genes = _validGenes(luckyDog - i);\r\n            if (genes > 0) {\r\n                break;\r\n            }\r\n            genes = _validGenes(luckyDog + i);\r\n            if (genes > 0) {\r\n                    break;\r\n                }\r\n            }\r\n        if (genes == 0) {\r\n            if (min == luckyDog - 1) {\r\n                for (i = min + luckyDog; i < totalSupply + 1; i++) {\r\n                        genes = _validGenes(i);\r\n                        if (genes > 0) {\r\n                            break;\r\n                        }\r\n                    }   \r\n                }\r\n            if (min == totalSupply - luckyDog) {\r\n                for (i = min; i < luckyDog; i++) {\r\n                        genes = _validGenes(luckyDog - i - 1);\r\n                        if (genes > 0) {\r\n                            break;\r\n                        }\r\n                    }   \r\n                }\r\n            }\r\n        return genes;\r\n    }\r\n\r\n\r\n    function _validGenes(uint256 dogId) internal view returns (uint256) {\r\n\r\n        var(, , , , , ,generation, genes, variation,) = dogCore.getDog(dogId);\r\n        if (generation == 0 || dogCore.ownerOf(dogId) == finalLottery || variation > 0) {\r\n            return 0;\r\n        } else {\r\n            return genes;\r\n        }\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\ncontract LotteryCore is SetLottery {\r\n    \r\n    function LotteryCore(address _ktAddress) public {\r\n\r\n        dogCore = DogCoreInterface(_ktAddress);\r\n\r\n        CLottery memory _clottery;\r\n        _clottery.luckyGenes = [0,0,0,0,0,0,0];\r\n        _clottery.totalAmount = uint256(0);\r\n        _clottery.isReward = false;\r\n        _clottery.openBlock = uint256(0);\r\n        CLotteries.push(_clottery);\r\n    }\r\n\r\n    function setFinalLotteryAddress(address _flAddress) public onlyCEO {\r\n        finalLottery = _flAddress;\r\n    }\r\n    \r\n    function getCLottery() \r\n        public \r\n        view \r\n        returns (\r\n            uint8[7]        luckyGenes,\r\n            uint256         totalAmount,\r\n            uint256         openBlock,\r\n            bool            isReward,\r\n            uint256         term\r\n        ) {\r\n            term = CLotteries.length - uint256(1);\r\n            luckyGenes = CLotteries[term].luckyGenes;\r\n            totalAmount = CLotteries[term].totalAmount;\r\n            openBlock = CLotteries[term].openBlock;\r\n            isReward = CLotteries[term].isReward;\r\n    }\r\n\r\n    function rewardLottery(bool isMore) external {\r\n        require(msg.sender == finalLottery);\r\n\r\n        uint256 term = CLotteries.length - 1;\r\n        CLotteries[term].isReward = true;\r\n        CLotteries[term].noFirstReward = isMore;\r\n    }\r\n\r\n    function toSPool(uint amount) external {\r\n        \r\n        require(msg.sender == finalLottery);\r\n\r\n        SpoolAmount += amount;\r\n    }\r\n}\r\n\r\n\r\ncontract FinalLottery {\r\n    bool public isLottery = true;\r\n    LotteryCore public lotteryCore;\r\n    DogCoreInterface public dogCore;\r\n    uint8[7] public luckyGenes;\r\n    uint256         totalAmount;\r\n    uint256         openBlock;\r\n    bool            isReward;\r\n    uint256         currentTerm;\r\n    uint256  public duration;\r\n    uint8   public  lotteryRatio;\r\n    uint8[7] public lotteryParam;\r\n    uint8   public  carousalRatio;\r\n    uint8[7] public carousalParam; \r\n    \r\n    struct FLottery {\r\n        address[]        owners0;\r\n        uint256[]        dogs0;\r\n        address[]        owners1;\r\n        uint256[]        dogs1;\r\n        address[]        owners2;\r\n        uint256[]        dogs2;\r\n        address[]        owners3;\r\n        uint256[]        dogs3;\r\n        address[]        owners4;\r\n        uint256[]        dogs4;\r\n        address[]        owners5;\r\n        uint256[]        dogs5;\r\n        address[]        owners6;\r\n        uint256[]        dogs6;\r\n        uint256[]       reward;\r\n    }\r\n    mapping(uint256 => FLottery) flotteries;\r\n\r\n    function FinalLottery(address _lcAddress) public {\r\n        lotteryCore = LotteryCore(_lcAddress);\r\n        dogCore = DogCoreInterface(lotteryCore.dogCore());\r\n        duration = 11520;\r\n        lotteryRatio = 23;\r\n        lotteryParam = [46,16,10,9,8,6,5];\r\n        carousalRatio = 12;\r\n        carousalParam = [35,18,14,12,8,7,6];        \r\n    }\r\n    \r\n    event DistributeLottery(uint256[] rewardArray, uint256 currentTerm);\r\n    \r\n    event RegisterLottery(uint256 dogId, address owner, uint8 lotteryClass, string result);\r\n    \r\n    function setLotteryDuration(uint256 durationBlocks) public {\r\n        require(msg.sender == dogCore.ceoAddress());\r\n        require(durationBlocks > 140);\r\n        require(durationBlocks < block.number);\r\n        duration = durationBlocks;\r\n    }\r\n    \r\n    function registerLottery(uint256 dogId) public returns (uint8) {\r\n        uint256 _dogId = dogId;\r\n        (luckyGenes, totalAmount, openBlock, isReward, currentTerm) = lotteryCore.getCLottery();\r\n        address owner = dogCore.ownerOf(_dogId);\r\n        require (owner != address(this));\r\n        require(address(dogCore) == msg.sender);\r\n        require(totalAmount > 0 && isReward == false && openBlock > (block.number-duration));\r\n        var(, , , birthTime, , ,generation,genes, variation,) = dogCore.getDog(_dogId);\r\n        require(birthTime < openBlock);\r\n        require(generation > 0);\r\n        require(variation == 0);\r\n        uint8 _lotteryClass = getLotteryClass(luckyGenes, genes);\r\n        require(_lotteryClass < 7);\r\n        address[] memory owners;\r\n        uint256[] memory dogs;\r\n         (dogs, owners) = _getLuckyList(currentTerm, _lotteryClass);\r\n            \r\n        for (uint i = 0; i < dogs.length; i++) {\r\n            if (_dogId == dogs[i]) {\r\n                RegisterLottery(_dogId, owner, _lotteryClass,\"dog already registered\");\r\n                 return 5;\r\n            }\r\n        }\r\n        _pushLuckyInfo(currentTerm, _lotteryClass, owner, _dogId);\r\n        \r\n        RegisterLottery(_dogId, owner, _lotteryClass,\"successful\");\r\n        return 0;\r\n    }\r\n    \r\n    function distributeLottery() public returns (uint8) {\r\n        (luckyGenes, totalAmount, openBlock, isReward, currentTerm) = lotteryCore.getCLottery();\r\n        \r\n        require(openBlock > 0 && openBlock < (block.number-duration));\r\n\r\n        require(totalAmount >= lotteryCore.SpoolAmount());\r\n\r\n        if (isReward == true) {\r\n            DistributeLottery(flotteries[currentTerm].reward, currentTerm);\r\n            return 1;\r\n        }\r\n        uint256 legalAmount = totalAmount - lotteryCore.SpoolAmount();\r\n        uint256 totalDistribute = 0;\r\n        uint8[7] memory lR;\r\n        uint8 ratio;\r\n\r\n        if (lotteryCore._isCarousal(currentTerm) ) {\r\n            lR = carousalParam;\r\n            ratio = carousalRatio;\r\n        } else {\r\n            lR = lotteryParam;\r\n            ratio = lotteryRatio;\r\n        }\r\n        for (uint8 i = 0; i < 7; i++) {\r\n            address[] memory owners;\r\n            uint256[] memory dogs;\r\n            (dogs, owners) = _getLuckyList(currentTerm, i);\r\n            if (owners.length > 0) {\r\n                    uint256 reward = (legalAmount * ratio * lR[i])/(10000 * owners.length);\r\n                    totalDistribute += reward * owners.length;\r\n                    dogCore.sendMoney(dogCore.cfoAddress(),reward * owners.length/10);\r\n                    \r\n                    for (uint j = 0; j < owners.length; j++) {\r\n                        address gen0Add;\r\n                        if (i == 0) {\r\n                            dogCore.sendMoney(owners[j],reward*95*9/1000);\r\n                            gen0Add = _getGen0Address(dogs[j]);\r\n                            if(gen0Add != address(0)){\r\n                                dogCore.sendMoney(gen0Add,reward*5/100);\r\n                            }\r\n                        } else if (i == 1) {\r\n                            dogCore.sendMoney(owners[j],reward*97*9/1000);\r\n                            gen0Add = _getGen0Address(dogs[j]);\r\n                            if(gen0Add != address(0)){\r\n                                dogCore.sendMoney(gen0Add,reward*3/100);\r\n                            }\r\n                        } else if (i == 2) {\r\n                            dogCore.sendMoney(owners[j],reward*98*9/1000);\r\n                            gen0Add = _getGen0Address(dogs[j]);\r\n                            if(gen0Add != address(0)){\r\n                                dogCore.sendMoney(gen0Add,reward*2/100);\r\n                            }\r\n                        } else {\r\n                            dogCore.sendMoney(owners[j],reward*9/10);\r\n                        }\r\n                    }\r\n                    flotteries[currentTerm].reward.push(reward); \r\n                } else {\r\n                    flotteries[currentTerm].reward.push(0);\r\n                } \r\n        }\r\n        if (flotteries[currentTerm].owners0.length == 0) {\r\n            lotteryCore.toSPool((dogCore.getAvailableBlance() - lotteryCore.SpoolAmount())/20);\r\n            lotteryCore.rewardLottery(true);\r\n        } else {\r\n            lotteryCore.rewardLottery(false);\r\n        }\r\n        \r\n        DistributeLottery(flotteries[currentTerm].reward, currentTerm);\r\n        return 0;\r\n    }\r\n\r\n    function _getGen0Address(uint256 dogId) internal view returns(address) {\r\n        var(, , , , , , , , , gen0) = dogCore.getDog(dogId);\r\n        return dogCore.getOwner(gen0);\r\n    }\r\n\r\n    function _getLuckyList(uint256 currentTerm1, uint8 lotclass) public view returns (uint256[] kts, address[] ons) {\r\n        if (lotclass==0) {\r\n            ons = flotteries[currentTerm1].owners0;\r\n            kts = flotteries[currentTerm1].dogs0;\r\n        } else if (lotclass==1) {\r\n            ons = flotteries[currentTerm1].owners1;\r\n            kts = flotteries[currentTerm1].dogs1;\r\n        } else if (lotclass==2) {\r\n            ons = flotteries[currentTerm1].owners2;\r\n            kts = flotteries[currentTerm1].dogs2;\r\n        } else if (lotclass==3) {\r\n            ons = flotteries[currentTerm1].owners3;\r\n            kts = flotteries[currentTerm1].dogs3;\r\n        } else if (lotclass==4) {\r\n            ons = flotteries[currentTerm1].owners4;\r\n            kts = flotteries[currentTerm1].dogs4;\r\n        } else if (lotclass==5) {\r\n            ons = flotteries[currentTerm1].owners5;\r\n            kts = flotteries[currentTerm1].dogs5;\r\n        } else if (lotclass==6) {\r\n            ons = flotteries[currentTerm1].owners6;\r\n            kts = flotteries[currentTerm1].dogs6;\r\n        }\r\n    }\r\n\r\n    function _pushLuckyInfo(uint256 currentTerm1, uint8 _lotteryClass, address owner, uint256 _dogId) internal {\r\n        if (_lotteryClass == 0) {\r\n            flotteries[currentTerm1].owners0.push(owner);\r\n            flotteries[currentTerm1].dogs0.push(_dogId);\r\n        } else if (_lotteryClass == 1) {\r\n            flotteries[currentTerm1].owners1.push(owner);\r\n            flotteries[currentTerm1].dogs1.push(_dogId);\r\n        } else if (_lotteryClass == 2) {\r\n            flotteries[currentTerm1].owners2.push(owner);\r\n            flotteries[currentTerm1].dogs2.push(_dogId);\r\n        } else if (_lotteryClass == 3) {\r\n            flotteries[currentTerm1].owners3.push(owner);\r\n            flotteries[currentTerm1].dogs3.push(_dogId);\r\n        } else if (_lotteryClass == 4) {\r\n            flotteries[currentTerm1].owners4.push(owner);\r\n            flotteries[currentTerm1].dogs4.push(_dogId);\r\n        } else if (_lotteryClass == 5) {\r\n            flotteries[currentTerm1].owners5.push(owner);\r\n            flotteries[currentTerm1].dogs5.push(_dogId);\r\n        } else if (_lotteryClass == 6) {\r\n            flotteries[currentTerm1].owners6.push(owner);\r\n            flotteries[currentTerm1].dogs6.push(_dogId);\r\n        }\r\n    }\r\n\r\n    function getLotteryClass(uint8[7] luckyGenesArray, uint256 genes) internal view returns(uint8) {\r\n        if (currentTerm < 0) {\r\n            return 100;\r\n        }\r\n        \r\n        uint8[7] memory dogArray = lotteryCore.convertGeneArray(genes);\r\n        uint8 cnt = 0;\r\n        uint8 lnt = 0;\r\n        for (uint i = 0; i < 6; i++) {\r\n\r\n            if (luckyGenesArray[i] > 0 && luckyGenesArray[i] == dogArray[i]) {\r\n                cnt++;\r\n            }\r\n        }\r\n        if (luckyGenesArray[6] > 0 && luckyGenesArray[6] == dogArray[6]) {\r\n            lnt = 1;\r\n        }\r\n        uint8 lotclass = 100;\r\n        if (cnt==6 && lnt==1) {\r\n            lotclass = 0;\r\n        } else if (cnt==6 && lnt==0) {\r\n            lotclass = 1;\r\n        } else if (cnt==5 && lnt==1) {\r\n            lotclass = 2;\r\n        } else if (cnt==5 && lnt==0) {\r\n            lotclass = 3;\r\n        } else if (cnt==4 && lnt==1) {\r\n            lotclass = 4;\r\n        } else if (cnt==3 && lnt==1) {\r\n            lotclass = 5;\r\n        } else if (cnt==3 && lnt==0) {\r\n            lotclass = 6;\r\n        } else {\r\n            lotclass = 100;\r\n        }\r\n        return lotclass;\r\n    }\r\n    \r\n    function checkLottery(uint256 genes) public view returns(uint8) {\r\n        var(luckyGenesArray, , , isReward1, ) = lotteryCore.getCLottery();\r\n        if (isReward1) {\r\n            return 100;\r\n        }\r\n        return getLotteryClass(luckyGenesArray, genes);\r\n    }\r\n    \r\n    function getCLottery() \r\n        public \r\n        view \r\n        returns (\r\n            uint8[7]        luckyGenes1,\r\n            uint256         totalAmount1,\r\n            uint256         openBlock1,\r\n            bool            isReward1,\r\n            uint256         term1,\r\n            uint8           currentGenes1,\r\n            uint256         tSupply,\r\n            uint256         sPoolAmount1,\r\n            uint256[]       reward1\r\n        ) {\r\n            (luckyGenes1, totalAmount1, openBlock1, isReward1, term1) = lotteryCore.getCLottery();\r\n            currentGenes1 = lotteryCore.currentGene();\r\n            tSupply = dogCore.totalSupply();\r\n            sPoolAmount1 = lotteryCore.SpoolAmount();\r\n            reward1 = flotteries[term1].reward;\r\n    }    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCLottery\",\"outputs\":[{\"name\":\"luckyGenes1\",\"type\":\"uint8[7]\"},{\"name\":\"totalAmount1\",\"type\":\"uint256\"},{\"name\":\"openBlock1\",\"type\":\"uint256\"},{\"name\":\"isReward1\",\"type\":\"bool\"},{\"name\":\"term1\",\"type\":\"uint256\"},{\"name\":\"currentGenes1\",\"type\":\"uint8\"},{\"name\":\"tSupply\",\"type\":\"uint256\"},{\"name\":\"sPoolAmount1\",\"type\":\"uint256\"},{\"name\":\"reward1\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryParam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLottery\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"durationBlocks\",\"type\":\"uint256\"}],\"name\":\"setLotteryDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dogId\",\"type\":\"uint256\"}],\"name\":\"registerLottery\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeLottery\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"luckyGenes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryCore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentTerm1\",\"type\":\"uint256\"},{\"name\":\"lotclass\",\"type\":\"uint8\"}],\"name\":\"_getLuckyList\",\"outputs\":[{\"name\":\"kts\",\"type\":\"uint256[]\"},{\"name\":\"ons\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dogCore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"carousalRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"genes\",\"type\":\"uint256\"}],\"name\":\"checkLottery\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"carousalParam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_lcAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rewardArray\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"currentTerm\",\"type\":\"uint256\"}],\"name\":\"DistributeLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dogId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lotteryClass\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"string\"}],\"name\":\"RegisterLottery\",\"type\":\"event\"}]","ContractName":"FinalLottery","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008b9d642d1e455119778a5aaca416a216feec163d","Library":"","SwarmSource":"bzzr://39842b5ec5e83d9d42449eaed4ff91068a60e97ea8b3487ac0e1eb68fe5cf81f"}]}