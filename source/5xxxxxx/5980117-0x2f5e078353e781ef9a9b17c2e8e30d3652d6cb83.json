{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *   Golden Union - Blockchain platform for direct investment in gold mining\r\n *   https://goldenunion.org\r\n *   ----------------------------\r\n *   telegram @golden_union\r\n *   developed by Inout Corp\r\n */\r\n\r\npragma solidity ^0.4.23;\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) \r\n        public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(\r\n            address indexed owner,\r\n            address indexed spender,\r\n            uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n  \r\n    function transferWholeTokens(address _to, uint256 _value) public returns (bool) {\r\n        // the sum is entered in whole tokens (1 = 1 token)\r\n        uint256 value = _value;\r\n        value = value.mul(1 ether);\r\n        return transfer(_to, value);\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n      public\r\n      returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n      public\r\n      view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint _addedValue\r\n    )\r\n      public\r\n      returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint _subtractedValue\r\n    )\r\n      public\r\n      returns (bool)\r\n    {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract GoldenUnitToken is StandardToken {\r\n    string public constant name = \"Golden Unite Token\";\r\n    string public constant symbol = \"GUT\";\r\n    uint32 public constant decimals = 18;\r\n    uint256 public INITIAL_SUPPLY = 100000 * 1 ether;\r\n    address public CrowdsaleAddress;\r\n    \r\n    event Mint(address indexed to, uint256 amount);\r\n    \r\n    constructor(address _CrowdsaleAddress) public {\r\n      \r\n        CrowdsaleAddress = _CrowdsaleAddress;\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;      \r\n    }\r\n  \r\n    modifier onlyOwner() {\r\n        require(msg.sender == CrowdsaleAddress);\r\n        _;\r\n    }\r\n\r\n    function acceptTokens(address _from, uint256 _value) public onlyOwner returns (bool){\r\n        require (balances[_from] >= _value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[CrowdsaleAddress] = balances[CrowdsaleAddress].add(_value);\r\n        emit Transfer(_from, CrowdsaleAddress, _value);\r\n        return true;\r\n    }\r\n  \r\n    function mint(uint256 _amount)  public onlyOwner returns (bool){\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[CrowdsaleAddress] = balances[CrowdsaleAddress].add(_amount);\r\n        emit Mint(CrowdsaleAddress, _amount);\r\n        emit Transfer(address(0), CrowdsaleAddress, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function() external payable {\r\n        // The token contract don`t receive ether\r\n        revert();\r\n    }  \r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address candidate;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        candidate = newOwner;\r\n    }\r\n\r\n    function confirmOwnership() public {\r\n        require(candidate == msg.sender);\r\n        owner = candidate;\r\n        delete candidate;\r\n    }\r\n\r\n}\r\n\r\ncontract GoldenUnionCrowdsale is Ownable {\r\n    using SafeMath for uint; \r\n    address myAddress = this;\r\n    uint public  saleRate = 30;  //tokens for 1 ether\r\n    uint public  purchaseRate = 30;  //tokens for 1 ether\r\n    bool public purchaseTokens = false;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event SaleRates(uint256 indexed value);\r\n    event PurchaseRates(uint256 indexed value);\r\n    event Withdraw(address indexed from, address indexed to, uint256 amount);\r\n\r\n    modifier purchaseAlloved() {\r\n        // The contract accept tokens\r\n        require(purchaseTokens);\r\n        _;\r\n    }\r\n\r\n\r\n    GoldenUnitToken public token = new GoldenUnitToken(myAddress);\r\n  \r\n\r\n    function mintTokens(uint256 _amount) public onlyOwner returns (bool){\r\n        //_amount in tokens. 1 = 1 token\r\n        uint256 amount = _amount;\r\n        require (amount <= 1000000);\r\n        amount = amount.mul(1 ether);\r\n        token.mint(amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function giveTokens(address _newInvestor, uint256 _value) public onlyOwner {\r\n        // the function give tokens to new investors\r\n        // the sum is entered in whole tokens (1 = 1 token)\r\n        uint256 value = _value;\r\n        require (_newInvestor != address(0));\r\n        require (value >= 1);\r\n        value = value.mul(1 ether);\r\n        token.transfer(_newInvestor, value);\r\n    }  \r\n    \r\n    function takeTokens(address _Investor, uint256 _value) public onlyOwner {\r\n        // the function take tokens from users to contract\r\n        // the sum is entered in whole tokens (1 = 1 token)\r\n        uint256 value = _value;\r\n        require (_Investor != address(0));\r\n        require (value >= 1);\r\n        value = value.mul(1 ether);\r\n        token.acceptTokens(_Investor, value);    \r\n    }  \r\n\r\n \r\n \r\n    function setSaleRate(uint256 newRate) public onlyOwner {\r\n        saleRate = newRate;\r\n        emit SaleRates(newRate);\r\n    }\r\n  \r\n    function setPurchaseRate(uint256 newRate) public onlyOwner {\r\n        purchaseRate = newRate;\r\n        emit PurchaseRates(newRate);\r\n    }  \r\n   \r\n    function startPurchaseTokens() public onlyOwner {\r\n        purchaseTokens = true;\r\n    }\r\n\r\n    function stopPurchaseTokens() public onlyOwner {\r\n        purchaseTokens = false;\r\n    }\r\n  \r\n    function purchase (uint256 _valueTokens) public purchaseAlloved {\r\n        // function purchase tokens and send ether to sender\r\n        address profitOwner = msg.sender;\r\n        require(profitOwner != address(0));\r\n        require(_valueTokens > 0);\r\n        uint256 valueTokens = _valueTokens;\r\n        valueTokens = valueTokens.mul(1 ether);\r\n        // check client tokens balance\r\n        require (token.balanceOf(profitOwner) >= valueTokens);\r\n        // calc amount of ether\r\n        require (purchaseRate>0);\r\n        uint256 valueEther = valueTokens.div(purchaseRate);\r\n        // check balance contract\r\n        require (myAddress.balance >= valueEther);\r\n        // transfer tokens\r\n        if (token.acceptTokens(msg.sender, valueTokens)){\r\n        // transfer ether\r\n            profitOwner.transfer(valueEther);\r\n        }\r\n    }\r\n  \r\n    function withdrawProfit (address _to, uint256 _value) public onlyOwner {\r\n        // function withdraw prohit\r\n        require (myAddress.balance >= _value);\r\n        require(_to != address(0));\r\n        _to.transfer(_value);\r\n        emit Withdraw(msg.sender, _to, _value);\r\n    }\r\n \r\n    function saleTokens() internal {\r\n        require (msg.value >= 1 ether);  //minimum 1 ether\r\n        uint tokens = saleRate.mul(msg.value);\r\n        token.transfer(msg.sender, tokens);\r\n    }\r\n \r\n    function() external payable {\r\n        saleTokens();\r\n    }    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setPurchaseRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopPurchaseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newInvestor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"giveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPurchaseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Investor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"takeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setSaleRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_valueTokens\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SaleRates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PurchaseRates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"GoldenUnionCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://39fbf86dbb636edb501663a2cb83c3684eb7045a15378ea5bca965303645bf90"}]}