{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract TokenReclaim{\r\n    mapping (address=>string) internal _ethToSphtx;\r\n    mapping (string =>string) internal _accountToPubKey;\r\n    event AccountRegister (address ethAccount, string sphtxAccount, string pubKey);\r\n\r\n    function register(string name, string pubKey) public{\r\n        require(bytes(name).length >= 3 && bytes(name).length <= 16);\r\n        bytes memory b = bytes(name);\r\n        require( (b[0] >='a' && b[0] <='z') || (b[0] >='0' && b[0] <= '9'));\r\n        for(uint i=1;i< bytes(name).length; i++){\r\n            require( (b[i] >='a' && b[i] <='z') || (b[i] >='0' && b[i] <= '9') || b[i] == '-' || b[i] =='.'  );\r\n        }\r\n        require(bytes(pubKey).length <= 64 && bytes(pubKey).length >= 50 );\r\n\r\n        require(bytes(_ethToSphtx[msg.sender]).length == 0 || keccak256(bytes((_ethToSphtx[msg.sender]))) ==  keccak256(bytes(name)));//check that the address is not yet registered;\r\n\r\n        require(bytes(_accountToPubKey[name]).length == 0 || keccak256(bytes((_ethToSphtx[msg.sender]))) ==  keccak256(bytes(name))); //check that the name is not yet used\r\n        _accountToPubKey[name] = pubKey;\r\n        _ethToSphtx[msg.sender] = name;\r\n        emit AccountRegister(msg.sender, name, pubKey);\r\n    }\r\n\r\n    function account(address addr) constant public returns (string){\r\n        return _ethToSphtx[addr];\r\n    }\r\n\r\n    function keys(address addr) constant public returns (string){\r\n        return _accountToPubKey[_ethToSphtx[addr]];\r\n    }\r\n\r\n    function nameAvailable(string name) constant public returns (bool){\r\n        if( bytes(_accountToPubKey[name]).length != 0 )\r\n           return false;\r\n        if(bytes(name).length < 3 && bytes(name).length > 16)\r\n           return false;\r\n        bytes memory b = bytes(name);\r\n        if( (b[0] < 'a' || b[0] > 'z') && ( b[0] < '0' || b[0] > '9' ) )\r\n           return false;\r\n        for(uint i=1;i< bytes(name).length; i++)\r\n           if( (b[0] < 'a' || b[0] > 'z') && ( b[0] < '0' || b[0] > '9' ) && b[i] != '-' && b[i] != '.' )\r\n              return false;\r\n        return true;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"pubKey\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"keys\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"account\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"nameAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sphtxAccount\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pubKey\",\"type\":\"string\"}],\"name\":\"AccountRegister\",\"type\":\"event\"}]","ContractName":"TokenReclaim","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f3659a1c44f669616c3e5be3e21185f24e5ac685e28527fa2bde8ed0097c4059"}]}