{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\nThis is the main contract for MyEtherCity. Join us at https://myethercity.com/  \r\nGame Name: MyEtherCity (The first city-building game built on top of the Ethereum Blockchain)\r\nGame Link: https://myethercity.com/\r\n*/\r\n\r\ncontract MyEtherCityGame {\r\n\r\n    address ceoAddress = 0x699dE541253f253a4eFf0D3c006D70c43F2E2DaE;\r\n    address InitiateLandsAddress = 0xa93a135e3c73ab77ea00e194bd080918e65149c3;\r\n    \r\n    modifier onlyCeo() {\r\n        require (\r\n            msg.sender == ceoAddress||\r\n            msg.sender == InitiateLandsAddress\r\n            );\r\n        _;\r\n    }\r\n\r\n    uint256 priceMetal = 5000000000000000;     // The developer can update the price of metak to regulate the market\r\n\r\n    struct Land {\r\n        address ownerAddress;\r\n        uint256 landPrice;\r\n        bool landForSale;\r\n        bool landForRent;\r\n        uint landOwnerCommission;\r\n        bool isOccupied;\r\n        uint cityRentingId;\r\n    }\r\n    Land[] lands;\r\n\r\n    struct City {\r\n        uint landId;\r\n        address ownerAddress;\r\n        uint256 cityPrice;\r\n        uint256 cityGdp; \r\n        bool cityForSale;\r\n        uint squaresOccupied; // Equals 0 when we create the city\r\n        uint metalStock;\r\n    }\r\n    City[] cities;\r\n\r\n    struct Business {\r\n        uint itemToProduce;\r\n        uint256 itemPrice;\r\n        uint cityId;\r\n        uint32 readyTime;\r\n    }\r\n    Business[] businesses;\r\n\r\n    /*\r\n    Building type:\r\n    0 = house => Can house 5 citizens\r\n    1 = school => Can educate 30 citizens\r\n    2 = clean energy => Can energize 20 citizens\r\n    3 = fossil energy => Can energize 30 citizens\r\n    4 = hospital => Can heal 30 citizens\r\n    5 = amusement => Can amuse 35 citizens\r\n    6 = businesses\r\n    */\r\n\r\n    struct Building {\r\n        uint buildingType;\r\n        uint cityId;\r\n        uint32 readyTime;\r\n    }\r\n    Building[] buildings;\r\n\r\n    struct Transaction {\r\n        uint buyerId;\r\n        uint sellerId;\r\n        uint256 transactionValue;\r\n        uint itemId;\r\n        uint blockId;\r\n    }\r\n    Transaction[] transactions;\r\n\r\n    mapping (uint => uint) public CityBuildingsCount;        // The amount of buildings owned by this address\r\n    mapping (uint => uint) public BuildingTypeMetalNeeded;   // The amount of metal needed to build all the buildings\r\n    mapping (uint => uint) public BuildingTypeSquaresOccupied;  // The land occupied by each building\r\n    mapping (uint => uint) public CountBusinessesPerType;       // We keep track of the amount of businesses created per type\r\n    mapping (uint => uint) public CityBusinessCount;            // We keep track of the amount of businesses owned by a city\r\n    mapping (uint => uint) public CitySalesTransactionsCount;    // We keep track of the sales generated by a city\r\n\r\n    ///\r\n    /// GET\r\n    ///\r\n\r\n    // This function will return the details for a land\r\n    function getLand(uint _landId) public view returns (\r\n        address ownerAddress,\r\n        uint256 landPrice,\r\n        bool landForSale,\r\n        bool landForRent,\r\n        uint landOwnerCommission,\r\n        bool isOccupied,\r\n        uint cityRentingId\r\n    ) {\r\n        Land storage _land = lands[_landId];\r\n\r\n        ownerAddress = _land.ownerAddress;\r\n        landPrice = _land.landPrice;\r\n        landForSale = _land.landForSale;\r\n        landForRent = _land.landForRent;\r\n        landOwnerCommission = _land.landOwnerCommission;\r\n        isOccupied = _land.isOccupied;\r\n        cityRentingId = _land.cityRentingId;\r\n    }\r\n\r\n    // This function will return the details for a city\r\n    function getCity(uint _cityId) public view returns (\r\n        uint landId,\r\n        address landOwner,\r\n        address cityOwner,\r\n        uint256 cityPrice,\r\n        uint256 cityGdp,\r\n        bool cityForSale,\r\n        uint squaresOccupied,\r\n        uint metalStock,\r\n        uint cityPopulation,\r\n        uint healthCitizens,\r\n        uint educationCitizens,\r\n        uint happinessCitizens,\r\n        uint productivityCitizens\r\n    ) {\r\n        City storage _city = cities[_cityId];\r\n\r\n        landId = _city.landId;\r\n        landOwner = lands[_city.landId].ownerAddress;\r\n        cityOwner = _city.ownerAddress;\r\n        cityPrice = _city.cityPrice;\r\n        cityGdp = _city.cityGdp;\r\n        cityForSale = _city.cityForSale;\r\n        squaresOccupied = _city.squaresOccupied;\r\n        metalStock = _city.metalStock;\r\n        cityPopulation = getCityPopulation(_cityId);\r\n        healthCitizens = getHealthCitizens(_cityId);\r\n        educationCitizens = getEducationCitizens(_cityId);\r\n        happinessCitizens = getHappinessCitizens(_cityId);\r\n        productivityCitizens = getProductivityCitizens(_cityId);\r\n    }\r\n\r\n    // This function will return the details for a business\r\n    function getBusiness(uint _businessId) public view returns (\r\n        uint itemToProduce,\r\n        uint256 itemPrice,\r\n        uint cityId,\r\n        uint cityMetalStock,\r\n        uint readyTime,\r\n        uint productionTime,\r\n        uint cityLandId,\r\n        address cityOwner\r\n    ) {\r\n        Business storage _business = businesses[_businessId];\r\n\r\n        itemToProduce = _business.itemToProduce;\r\n        itemPrice = _business.itemPrice;\r\n        cityId = _business.cityId;\r\n        cityMetalStock = cities[_business.cityId].metalStock;\r\n        readyTime = _business.readyTime;\r\n        productionTime = getProductionTimeBusiness(_businessId);\r\n        cityLandId = cities[_business.cityId].landId;\r\n        cityOwner = cities[_business.cityId].ownerAddress;\r\n        \r\n    }\r\n\r\n    // This function will return the details for a building\r\n    function getBuilding(uint _buildingId) public view returns (\r\n        uint buildingType,\r\n        uint cityId,\r\n        uint32 readyTime\r\n    ) {\r\n        Building storage _building = buildings[_buildingId];\r\n\r\n        buildingType = _building.buildingType;\r\n        cityId = _building.cityId;\r\n        readyTime = _building.readyTime;\r\n    }\r\n\r\n    // This function will return the details for a transaction\r\n    function getTransaction(uint _transactionId) public view returns (\r\n        uint buyerId,\r\n        uint sellerId,\r\n        uint256 transactionValue,\r\n        uint itemId,\r\n        uint blockId\r\n    ) {\r\n        Transaction storage _transaction = transactions[_transactionId];\r\n\r\n        buyerId = _transaction.buyerId;\r\n        sellerId = _transaction.sellerId;\r\n        transactionValue = _transaction.transactionValue;\r\n        itemId = _transaction.itemId;\r\n        blockId = _transaction.blockId;\r\n    }\r\n\r\n    // Returns the count of buildings for a city \r\n    function getCityBuildings(uint _cityId, bool _active) public view returns (\r\n        uint countBuildings,\r\n        uint countHouses,\r\n        uint countSchools,\r\n        uint countHospital,\r\n        uint countAmusement\r\n    ) {\r\n        countBuildings = getCountAllBuildings(_cityId, _active);\r\n        countHouses = getCountBuildings(_cityId, 0, _active);\r\n        countSchools = getCountBuildings(_cityId, 1, _active);\r\n        countHospital = getCountBuildings(_cityId, 2, _active);\r\n        countAmusement = getCountBuildings(_cityId, 3, _active);\r\n    }\r\n        \r\n    // Get all the lands owned by a city\r\n    function getSenderLands(address _senderAddress) public view returns(uint[]) {\r\n        uint[] memory result = new uint[](getCountSenderLands(_senderAddress));\r\n        uint counter = 0;\r\n        for (uint i = 0; i < lands.length; i++) {\r\n          if (lands[i].ownerAddress == _senderAddress) {\r\n            result[counter] = i;\r\n            counter++;\r\n          }\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    function getCountSenderLands(address _senderAddress) public view returns(uint) {\r\n        uint counter = 0;\r\n        for (uint i = 0; i < lands.length; i++) {\r\n          if (lands[i].ownerAddress == _senderAddress) {\r\n            counter++;\r\n          }\r\n        }\r\n        return(counter);\r\n    }\r\n    \r\n     // Get all the lands owned by a city\r\n    function getSenderCities(address _senderAddress) public view returns(uint[]) {\r\n        uint[] memory result = new uint[](getCountSenderCities(_senderAddress));\r\n        uint counter = 0;\r\n        for (uint i = 0; i < cities.length; i++) {\r\n          if (cities[i].ownerAddress == _senderAddress) {\r\n            result[counter] = i;\r\n            counter++;\r\n          }\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    function getCountSenderCities(address _senderAddress) public view returns(uint) {\r\n        uint counter = 0;\r\n        for (uint i = 0; i < cities.length; i++) {\r\n          if (cities[i].ownerAddress == _senderAddress) {\r\n            counter++;\r\n          }\r\n        }\r\n        return(counter);\r\n    }\r\n\r\n    // We use this function to return the population of a city\r\n    function getCityPopulation(uint _cityId) public view returns (uint) {\r\n        // We multiply the number of houses per 5 to get the population of a city\r\n        uint _cityActiveBuildings = getCountBuildings(_cityId, 0, true);\r\n        return(_cityActiveBuildings * 5);\r\n    }\r\n\r\n    // Count the number of active or pending buildings\r\n    function getCountAllBuildings(uint _cityId, bool _active) public view returns(uint) {\r\n        uint counter = 0;\r\n        for (uint i = 0; i < buildings.length; i++) {\r\n            if(_active == true) {\r\n                // If active == true we loop through the active buildings\r\n                if(buildings[i].cityId == _cityId && buildings[i].readyTime < now) {\r\n                    counter++;\r\n                }\r\n            } else {\r\n                // If active == false we loop through the pending buildings\r\n                if(buildings[i].cityId == _cityId && buildings[i].readyTime >= now) {\r\n                    counter++;\r\n                }\r\n            }\r\n            \r\n        }\r\n        return counter;\r\n    }\r\n    \r\n    // Count the number of active or pending buildings\r\n    function getCountBuildings(uint _cityId, uint _buildingType, bool _active) public view returns(uint) {\r\n        uint counter = 0;\r\n        for (uint i = 0; i < buildings.length; i++) {\r\n            if(_active == true) {\r\n                // If active == true we loop through the active buildings\r\n                if(buildings[i].buildingType == _buildingType && buildings[i].cityId == _cityId && buildings[i].readyTime < now) {\r\n                    counter++;\r\n                }\r\n            } else {\r\n                // If active == false we loop through the pending buildings\r\n                if(buildings[i].buildingType == _buildingType && buildings[i].cityId == _cityId && buildings[i].readyTime >= now) {\r\n                    counter++;\r\n                }\r\n            }\r\n        }\r\n        return counter;\r\n    }\r\n\r\n    // Get the active buildings (by type) owned by a specific city\r\n    function getCityActiveBuildings(uint _cityId, uint _buildingType) public view returns(uint[]) {\r\n        uint[] memory result = new uint[](getCountBuildings(_cityId, _buildingType, true));\r\n        uint counter = 0;\r\n        for (uint i = 0; i < buildings.length; i++) {\r\n            // We add the ready building owned by this user\r\n            if (buildings[i].buildingType == _buildingType && buildings[i].cityId == _cityId && buildings[i].readyTime < now) {\r\n                result[counter] = i;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Get the pending buildings (by type) owned by a specific city\r\n    function getCityPendingBuildings(uint _cityId, uint _buildingType) public view returns(uint[]) {\r\n        uint[] memory result = new uint[](getCountBuildings(_cityId, _buildingType, false));\r\n        uint counter = 0;\r\n        for (uint i = 0; i < buildings.length; i++) {\r\n            // We add the pending building owned by this user\r\n            if (buildings[i].buildingType == _buildingType && buildings[i].cityId == _cityId && buildings[i].readyTime >= now) {\r\n                result[counter] = i;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Get Businesses per type\r\n    function getActiveBusinessesPerType(uint _businessType) public view returns(uint[]) {\r\n        uint[] memory result = new uint[](CountBusinessesPerType[_businessType]);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < businesses.length; i++) {\r\n            // We add the pending building owned by this user\r\n            if (businesses[i].itemToProduce == _businessType) {\r\n                result[counter] = i;\r\n                counter++;\r\n            }\r\n        }\r\n        // returns an array of id for the active businesses\r\n        return result;\r\n    }\r\n\r\n    // Get Businesses per city\r\n    function getActiveBusinessesPerCity(uint _cityId) public view returns(uint[]) {\r\n        uint[] memory result = new uint[](CityBusinessCount[_cityId]);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < businesses.length; i++) {\r\n            // We add the pending building owned by this user\r\n            if (businesses[i].cityId == _cityId) {\r\n                result[counter] = i;\r\n                counter++;\r\n            }\r\n        }\r\n        // returns an array of id for the active businesses\r\n        return result;\r\n    }\r\n    \r\n    // Get the sales generated by a city\r\n    function getSalesCity(uint _cityId) public view returns(uint[]) {\r\n        uint[] memory result = new uint[](CitySalesTransactionsCount[_cityId]);\r\n        uint counter = 0;\r\n        uint startId = transactions.length - 1;\r\n        for (uint i = 0; i < transactions.length; i++) {\r\n            uint _tId = startId - i;\r\n            // We add the pending building owned by this user\r\n            if (transactions[_tId].sellerId == _cityId) {\r\n                result[counter] = _tId;\r\n                counter++;\r\n            }\r\n        }\r\n        // returns an array of id for the sales generated by the city (the most recent sales comes in first)\r\n        return result;\r\n    }\r\n\r\n    // Return the health of the citizens of a city\r\n    function getHealthCitizens(uint _cityId) public view returns(uint) {\r\n        uint _hospitalsCount = getCountBuildings(_cityId, 2, true);\r\n        uint pointsHealth = (_hospitalsCount * 500) + 50;\r\n        uint _population = getCityPopulation(_cityId);\r\n        uint256 _healthPopulation = 10;\r\n        \r\n        if(_population > 0) {\r\n            _healthPopulation = (pointsHealth / uint256(_population));\r\n        } else {\r\n            _healthPopulation = 0;\r\n        }\r\n        \r\n        // The indicator can't be more than 10\r\n        if(_healthPopulation > 10) {\r\n            _healthPopulation = 10;\r\n        }\r\n        return(_healthPopulation);\r\n    }\r\n\r\n    // Return the education of the citizens of a city\r\n    function getEducationCitizens(uint _cityId) public view returns(uint) {\r\n        uint _schoolsCount = getCountBuildings(_cityId, 1, true);\r\n        uint pointsEducation = (_schoolsCount * 250) + 25;\r\n        uint _population = getCityPopulation(_cityId);\r\n        uint256 _educationPopulation = 10;\r\n\r\n        if(_population > 0) {\r\n            _educationPopulation = (pointsEducation / uint256(_population));\r\n        } else {\r\n            _educationPopulation = 0;\r\n        }\r\n        \r\n        if(_educationPopulation > 10) {\r\n            _educationPopulation = 10;\r\n        }\r\n        return(_educationPopulation);\r\n    }\r\n\r\n    // Return the happiness of the citizens of a city\r\n    function getHappinessCitizens(uint _cityId) public view returns(uint) {\r\n        uint _amusementCount = getCountBuildings(_cityId, 3, true);\r\n        uint pointsAmusement = (_amusementCount * 350) + 35;\r\n        uint _population = getCityPopulation(_cityId);\r\n        uint256 _amusementPopulation = 10;\r\n        \r\n        if(_population > 0) {\r\n            _amusementPopulation = (pointsAmusement / uint256(_population));\r\n        } else {\r\n            _amusementPopulation = 0;\r\n        }\r\n        \r\n        // The indicator can't be more than 10\r\n        if(_amusementPopulation > 10) {\r\n            _amusementPopulation = 10;\r\n        }\r\n        return(_amusementPopulation);\r\n    }\r\n\r\n    // Return the productivity of the citizens of a city\r\n    function getProductivityCitizens(uint _cityId) public view returns(uint) {\r\n        return((getEducationCitizens(_cityId) + getHealthCitizens(_cityId) + getHappinessCitizens(_cityId)) / 3);\r\n    }\r\n\r\n    // This function returns the maximum businesses a city can build (according to its population)\r\n    function getMaxBusinessesPerCity(uint _cityId) public view returns(uint) {\r\n        uint _citizens = getCityPopulation(_cityId);\r\n        uint _maxBusinesses;\r\n\r\n        // Calculate the max amount of businesses available per city\r\n        if(_citizens >= 75) {\r\n            _maxBusinesses = 4;\r\n        } else if(_citizens >= 50) {\r\n            _maxBusinesses = 3;\r\n        } else if(_citizens >= 25) {\r\n            _maxBusinesses = 2;\r\n        } else {\r\n            _maxBusinesses = 1;\r\n        }\r\n\r\n        return(_maxBusinesses);\r\n    }\r\n    \r\n    function getCountCities() public view returns(uint) {\r\n        return(cities.length);\r\n    }\r\n\r\n    ///\r\n    /// ACTIONS\r\n    ///\r\n    \r\n    // Land owner can use this function to remove a city from their land \r\n    function removeTenant(uint _landId) public {\r\n        require(lands[_landId].ownerAddress == msg.sender);\r\n        lands[_landId].landForRent = false;\r\n        lands[_landId].isOccupied = false;\r\n        cities[lands[_landId].cityRentingId].landId = 0;\r\n        lands[_landId].cityRentingId = 0;\r\n    }\r\n\r\n    // We use this function to purchase a business\r\n    // Businesses are free to create but each city can run only one business.\r\n    function createBusiness(uint _itemId, uint256 _itemPrice, uint _cityId) public {\r\n        // We check if the price of the item sold is enough regarding the current price of the metal\r\n        require(_itemPrice >= BuildingTypeMetalNeeded[_itemId] * priceMetal);\r\n\r\n        // We verifiy that the sender is the owner of the city\r\n        require(cities[_cityId].ownerAddress == msg.sender);\r\n\r\n        // We check that the city has enough squares to host this new building\r\n        require((cities[_cityId].squaresOccupied + BuildingTypeSquaresOccupied[4]) <= 100);\r\n        \r\n        // We check if the city has enough population to create this business (1 building / 25 citizens)\r\n        require(CityBusinessCount[_cityId] < getMaxBusinessesPerCity(_cityId));\r\n\r\n        // We create the business\r\n        businesses.push(Business(_itemId, _itemPrice, _cityId, 0));\r\n\r\n        // We increment the businesses count for this type and city\r\n        CountBusinessesPerType[_itemId]++;\r\n\r\n        // We increment the count of businesses for this city\r\n        CityBusinessCount[_cityId]++;\r\n\r\n        // Increment the squares used in this land\r\n        cities[_cityId].squaresOccupied = cities[_cityId].squaresOccupied + BuildingTypeSquaresOccupied[4];\r\n    }\r\n\r\n    // This function can let business owner update the price of the building they are selling\r\n    function updateBusiness(uint _businessId, uint256 _itemPrice) public {\r\n        // We check if the user is the owner of the business\r\n        require(cities[businesses[_businessId].cityId].ownerAddress == msg.sender);\r\n\r\n        // We check if the price of the item sold is enough regarding the current price of the metal\r\n        require(_itemPrice >= BuildingTypeMetalNeeded[businesses[_businessId].itemToProduce] * priceMetal);\r\n\r\n        businesses[_businessId].itemPrice = _itemPrice;\r\n    }\r\n\r\n    // We use this function to purchase metal\r\n    function purchaseMetal(uint _cityId, uint _amount) public payable {\r\n        // We check that the user is paying the correct price \r\n        require(msg.value == _amount * priceMetal);\r\n\r\n        // We verifiy that the sender is the owner of the city\r\n        require(cities[_cityId].ownerAddress == msg.sender);\r\n\r\n        // Transfer the amount paid to the ceo\r\n        ceoAddress.transfer(msg.value);\r\n\r\n        // Add the metal to the city stock\r\n        cities[_cityId].metalStock = cities[_cityId].metalStock + _amount;\r\n    }\r\n    \r\n    // This function will return the production time for a specific business\r\n    function getProductionTimeBusiness(uint _businessId) public view returns(uint256) {\r\n        uint _productivityIndicator = getProductivityCitizens(businesses[_businessId].cityId);\r\n        uint _countCitizens = getCityPopulation(businesses[_businessId].cityId);\r\n        \r\n        uint256 productivityFinal;\r\n        \r\n        if(_countCitizens == 0) {\r\n            // The min production time with 0 citizens should be 7000\r\n            productionTime = 7000; \r\n        } else {\r\n            // We calculat the production time\r\n            if(_productivityIndicator <= 1) {\r\n            productivityFinal = _countCitizens;\r\n            } else {\r\n                productivityFinal = _countCitizens * (_productivityIndicator / 2);\r\n            }\r\n            \r\n            uint256 productionTime = 60000 / uint256(productivityFinal);\r\n        }\r\n        return(productionTime);\r\n    }\r\n\r\n    // We use this function to purchase a building from a business\r\n    function purchaseBuilding(uint _itemId, uint _businessId, uint _cityId) public payable {\r\n        // We verify that the user is paying the correct price\r\n        require(msg.value == businesses[_businessId].itemPrice);\r\n\r\n        // We verifiy that the sender is the owner of the city\r\n        require(cities[_cityId].ownerAddress == msg.sender);\r\n\r\n        // We check if this business is authorized to produce this building\r\n        require(_itemId == businesses[_businessId].itemToProduce);\r\n\r\n        // We check if the city where the business is located as enough Metal in Stock\r\n        require(cities[businesses[_businessId].cityId].metalStock >= BuildingTypeMetalNeeded[_itemId]);\r\n\r\n        // We check that the city has enough squares to host this new building\r\n        require((cities[_cityId].squaresOccupied + BuildingTypeSquaresOccupied[_itemId]) <= 100);\r\n\r\n        // We check if the business is ready to produce another building\r\n        require(businesses[_businessId].readyTime < now);\r\n\r\n        uint256 onePercent = msg.value / 100;\r\n\r\n        // Send commission of the amount paid to land owner of where the business is located\r\n        uint _landId = cities[businesses[_businessId].cityId].landId;\r\n        address landOwner = lands[_landId].ownerAddress;\r\n        uint256 landOwnerCommission = onePercent * lands[cities[businesses[_businessId].cityId].landId].landOwnerCommission;\r\n        landOwner.transfer(landOwnerCommission);\r\n\r\n        // Send the rest to the business owner\r\n        cities[businesses[_businessId].cityId].ownerAddress.transfer(msg.value - landOwnerCommission);\r\n\r\n        // Reduce the metal stock of the city where the business is located\r\n        cities[businesses[_businessId].cityId].metalStock = cities[businesses[_businessId].cityId].metalStock - BuildingTypeMetalNeeded[_itemId];\r\n\r\n        // Calculate production time\r\n        uint productionTime = getProductionTimeBusiness(_businessId);\r\n        uint32 _buildingReadyTime = uint32(now + productionTime);\r\n\r\n        // Update production time for the business\r\n        businesses[_businessId].readyTime = uint32(now + productionTime);\r\n\r\n        // Create the building\r\n        buildings.push(Building(_itemId, _cityId, _buildingReadyTime));\r\n\r\n        // Increment the squares used in this land\r\n        cities[_cityId].squaresOccupied = cities[_cityId].squaresOccupied + BuildingTypeSquaresOccupied[_itemId];\r\n\r\n        // Increment the GDP generated by this city\r\n        cities[_cityId].cityGdp = cities[_cityId].cityGdp + msg.value;\r\n\r\n        // Increment the buildings count in this city\r\n        CityBuildingsCount[_cityId]++;\r\n\r\n        // Save transaction in smart contract\r\n        transactions.push(Transaction(_cityId, businesses[_businessId].cityId, msg.value, _itemId, block.number));\r\n        CitySalesTransactionsCount[businesses[_businessId].cityId]++;\r\n    }\r\n\r\n    // We use this function to let the land owner update its land\r\n    function updateLand(uint _landId, uint256 _landPrice, uint _typeUpdate, uint _commission) public {\r\n        require(lands[_landId].ownerAddress == msg.sender);\r\n\r\n        /// Types update:\r\n        /// 0: Sell land\r\n        /// 1: Put the land for rent\r\n\r\n        if(_typeUpdate == 0) {\r\n\r\n            // Land is for sale\r\n            lands[_landId].landForSale = true;\r\n            lands[_landId].landForRent = false;\r\n            lands[_landId].landPrice = _landPrice;\r\n            \r\n        } else if(_typeUpdate == 1) {\r\n            // The owner can't change the commission if the land is occupied\r\n            require(lands[_landId].isOccupied == false);\r\n            \r\n            // Land is for rent\r\n            lands[_landId].landForRent = true;\r\n            lands[_landId].landForSale = false;\r\n            lands[_landId].landOwnerCommission = _commission;\r\n\r\n        } else if(_typeUpdate == 2) {\r\n            // The owner cancel the sale of its land\r\n            lands[_landId].landForRent = false;\r\n            lands[_landId].landForSale = false;\r\n        }\r\n    }\r\n\r\n    function purchaseLand(uint _landId, uint _typePurchase, uint _commission) public payable {\r\n        require(lands[_landId].landForSale == true);\r\n        require(msg.value == lands[_landId].landPrice);\r\n\r\n        // Transfer the amount paid to the previous land owner\r\n        lands[_landId].ownerAddress.transfer(msg.value);\r\n\r\n        // Update the land\r\n        lands[_landId].ownerAddress = msg.sender;\r\n        lands[_landId].landForSale = false;\r\n\r\n        /// _typePurchase:\r\n        /// 0: Create city\r\n        /// 1: Rent the land\r\n        /// 2: Cancel sale\r\n        \r\n        if(_typePurchase == 0) {\r\n            // The user in purchasing the land to build the city on top of it we create the city directly\r\n            createCity(_landId);\r\n        } else if(_typePurchase == 1) {\r\n            // The user is purchasing the land to rent it to another user\r\n            lands[_landId].landForRent = true;\r\n            lands[_landId].landForSale = false;\r\n            lands[_landId].landOwnerCommission = _commission;\r\n        } \r\n    }\r\n    \r\n    // We use this function to let users rent lands.\r\n    function rentLand(uint _landId, bool _createCity, uint _cityId) public {\r\n        // The owner can rent the land even if it's not marked forRent\r\n        if(lands[_landId].ownerAddress != msg.sender) {\r\n            require(lands[_landId].landForRent == true);\r\n        }\r\n\r\n        // Cities can't rent a land if it's already occupied\r\n        require(lands[_landId].isOccupied == false);\r\n                    \r\n        if(_createCity == true) {\r\n            // We create the city if the user is renting this land for a new city\r\n            createCity(_landId);\r\n        } else {\r\n            // Cities can't rent a land if they are already landing one\r\n            require(cities[_cityId].landId == 0);\r\n        \r\n            // We update the land and city if the user is renting the land for an existing city\r\n            cities[_cityId].landId = _landId;\r\n            lands[_landId].cityRentingId = _cityId;\r\n            lands[_landId].landForSale == false;\r\n            lands[_landId].landForRent == true;\r\n            lands[_landId].isOccupied = true;\r\n        }\r\n    }\r\n\r\n    function createCity(uint _landId) public {\r\n        require(lands[_landId].isOccupied == false);\r\n\r\n        // Create the city\r\n        uint cityId = cities.push(City(_landId, msg.sender, 0, 0, false, 0, 0)) - 1;\r\n\r\n        lands[_landId].landForSale == false;\r\n        lands[_landId].landForRent == false;\r\n        lands[_landId].cityRentingId = cityId;\r\n        lands[_landId].isOccupied = true;\r\n    }\r\n    \r\n    // The dev can use this function to create an innocupied land\r\n    function CreateLand(uint256 _landPrice, address _owner) public onlyCeo {\r\n        // We can't create more than 300 lands.\r\n        if(lands.length < 300) {\r\n            lands.push(Land(_owner, _landPrice, false, false, 0, false, 0));\r\n        }\r\n        \r\n    }\r\n    \r\n    function UpdateInitiateContractAddress(address _newAddress) public onlyCeo { \r\n        InitiateLandsAddress = _newAddress;\r\n    }\r\n    \r\n    // We initialize some datas with this function\r\n    function Initialize() public onlyCeo {\r\n        // To be able to use the land id in the city struct\r\n        lands.push(Land(ceoAddress, 0, false, false, 5, true, 0)); // Fake Land #0 is created here\r\n\r\n        // Save the amount of metal needed to produce the buildings\r\n        BuildingTypeMetalNeeded[0] = 3;\r\n        BuildingTypeMetalNeeded[1] = 4;\r\n        BuildingTypeMetalNeeded[2] = 5;\r\n        BuildingTypeMetalNeeded[3] = 4;\r\n\r\n        // Save the squares used by buildings\r\n        BuildingTypeSquaresOccupied[0] = 2;\r\n        BuildingTypeSquaresOccupied[1] = 4;\r\n        BuildingTypeSquaresOccupied[2] = 6;\r\n        BuildingTypeSquaresOccupied[3] = 4;\r\n        BuildingTypeSquaresOccupied[4] = 5; // Businesses\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint256\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"getCityBuildings\",\"outputs\":[{\"name\":\"countBuildings\",\"type\":\"uint256\"},{\"name\":\"countHouses\",\"type\":\"uint256\"},{\"name\":\"countSchools\",\"type\":\"uint256\"},{\"name\":\"countHospital\",\"type\":\"uint256\"},{\"name\":\"countAmusement\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint256\"},{\"name\":\"_buildingType\",\"type\":\"uint256\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"getCountBuildings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_landPrice\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"CreateLand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"purchaseMetal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_senderAddress\",\"type\":\"address\"}],\"name\":\"getCountSenderCities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BuildingTypeSquaresOccupied\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BuildingTypeMetalNeeded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint256\"},{\"name\":\"_buildingType\",\"type\":\"uint256\"}],\"name\":\"getCityActiveBuildings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"name\":\"buyerId\",\"type\":\"uint256\"},{\"name\":\"sellerId\",\"type\":\"uint256\"},{\"name\":\"transactionValue\",\"type\":\"uint256\"},{\"name\":\"itemId\",\"type\":\"uint256\"},{\"name\":\"blockId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_businessId\",\"type\":\"uint256\"},{\"name\":\"_itemPrice\",\"type\":\"uint256\"}],\"name\":\"updateBusiness\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint256\"}],\"name\":\"getHealthCitizens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint256\"}],\"name\":\"getProductivityCitizens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_businessId\",\"type\":\"uint256\"}],\"name\":\"getProductionTimeBusiness\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_itemPrice\",\"type\":\"uint256\"},{\"name\":\"_cityId\",\"type\":\"uint256\"}],\"name\":\"createBusiness\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_businessId\",\"type\":\"uint256\"}],\"name\":\"getBusiness\",\"outputs\":[{\"name\":\"itemToProduce\",\"type\":\"uint256\"},{\"name\":\"itemPrice\",\"type\":\"uint256\"},{\"name\":\"cityId\",\"type\":\"uint256\"},{\"name\":\"cityMetalStock\",\"type\":\"uint256\"},{\"name\":\"readyTime\",\"type\":\"uint256\"},{\"name\":\"productionTime\",\"type\":\"uint256\"},{\"name\":\"cityLandId\",\"type\":\"uint256\"},{\"name\":\"cityOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_landId\",\"type\":\"uint256\"}],\"name\":\"createCity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint256\"}],\"name\":\"getMaxBusinessesPerCity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CityBusinessCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_senderAddress\",\"type\":\"address\"}],\"name\":\"getCountSenderLands\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_businessId\",\"type\":\"uint256\"},{\"name\":\"_cityId\",\"type\":\"uint256\"}],\"name\":\"purchaseBuilding\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_landId\",\"type\":\"uint256\"},{\"name\":\"_createCity\",\"type\":\"bool\"},{\"name\":\"_cityId\",\"type\":\"uint256\"}],\"name\":\"rentLand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint256\"}],\"name\":\"getSalesCity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_landId\",\"type\":\"uint256\"},{\"name\":\"_typePurchase\",\"type\":\"uint256\"},{\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"purchaseLand\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_landId\",\"type\":\"uint256\"}],\"name\":\"removeTenant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CityBuildingsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint256\"},{\"name\":\"_buildingType\",\"type\":\"uint256\"}],\"name\":\"getCityPendingBuildings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint256\"}],\"name\":\"getActiveBusinessesPerCity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"UpdateInitiateContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint256\"}],\"name\":\"getHappinessCitizens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint256\"}],\"name\":\"getEducationCitizens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_senderAddress\",\"type\":\"address\"}],\"name\":\"getSenderLands\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buildingId\",\"type\":\"uint256\"}],\"name\":\"getBuilding\",\"outputs\":[{\"name\":\"buildingType\",\"type\":\"uint256\"},{\"name\":\"cityId\",\"type\":\"uint256\"},{\"name\":\"readyTime\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CitySalesTransactionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint256\"}],\"name\":\"getCityPopulation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_senderAddress\",\"type\":\"address\"}],\"name\":\"getSenderCities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_businessType\",\"type\":\"uint256\"}],\"name\":\"getActiveBusinessesPerType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CountBusinessesPerType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_landId\",\"type\":\"uint256\"},{\"name\":\"_landPrice\",\"type\":\"uint256\"},{\"name\":\"_typeUpdate\",\"type\":\"uint256\"},{\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"updateLand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint256\"}],\"name\":\"getCity\",\"outputs\":[{\"name\":\"landId\",\"type\":\"uint256\"},{\"name\":\"landOwner\",\"type\":\"address\"},{\"name\":\"cityOwner\",\"type\":\"address\"},{\"name\":\"cityPrice\",\"type\":\"uint256\"},{\"name\":\"cityGdp\",\"type\":\"uint256\"},{\"name\":\"cityForSale\",\"type\":\"bool\"},{\"name\":\"squaresOccupied\",\"type\":\"uint256\"},{\"name\":\"metalStock\",\"type\":\"uint256\"},{\"name\":\"cityPopulation\",\"type\":\"uint256\"},{\"name\":\"healthCitizens\",\"type\":\"uint256\"},{\"name\":\"educationCitizens\",\"type\":\"uint256\"},{\"name\":\"happinessCitizens\",\"type\":\"uint256\"},{\"name\":\"productivityCitizens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint256\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"getCountAllBuildings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_landId\",\"type\":\"uint256\"}],\"name\":\"getLand\",\"outputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"landPrice\",\"type\":\"uint256\"},{\"name\":\"landForSale\",\"type\":\"bool\"},{\"name\":\"landForRent\",\"type\":\"bool\"},{\"name\":\"landOwnerCommission\",\"type\":\"uint256\"},{\"name\":\"isOccupied\",\"type\":\"bool\"},{\"name\":\"cityRentingId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCountCities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MyEtherCityGame","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://965d4cf3a9a20d7b92cb2e77c48345fe9814984a8bc8fa2e39accbe9ddbe375b"}]}