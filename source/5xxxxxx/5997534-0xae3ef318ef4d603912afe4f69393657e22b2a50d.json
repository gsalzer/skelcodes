{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract TicHTUContract is ERC20Interface{\r\n    using SafeMath for uint;\r\n    \r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint _totalSupply;\r\n    uint256 public rate;\r\n    address owner;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n\t// @_owner: owner's address where to keep donations\r\n    // ------------------------------------------------------------------------\r\n    constructor() public{\r\n        symbol = \"HTU\";\r\n        name = \"HONTUBE\";\r\n        decimals = 18;\r\n        rate = 500; //OBL per wei\r\n        owner = msg.sender;\r\n        _totalSupply = totalSupply();\r\n        balances[this] = _totalSupply;\r\n        emit Transfer(address(0),this,_totalSupply);\r\n    }\r\n    \r\n    function totalSupply() public constant returns (uint){\r\n       return 25000000000 * 10**uint(decimals); //25 billion\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Transfers the tokens from contracts balance of OBL's\r\n    // ------------------------------------------------------------------------\r\n    function _transfer(address _to, uint _tokens) internal returns (bool success){\r\n        require(_to != 0x0);\r\n\r\n        require(balances[_to] + _tokens >= balances[_to]);\r\n        balances[this] = balances[this].sub(_tokens);\r\n        balances[_to] = balances[_to].add(_tokens);\r\n        emit Transfer(this,_to,_tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // payable function to receive ethers\r\n    // ------------------------------------------------------------------------\r\n    function () external payable{\r\n        _buyTokens(msg.sender);\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // verifies, calculates and sends tokens to beneficiary\r\n    // ------------------------------------------------------------------------\r\n    function _buyTokens(address _beneficiary) public payable{\r\n        \r\n        uint256 weiAmount = msg.value;\r\n        \r\n        // calculate OBL tokens to be delivered\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n        \r\n        _preValidatePurchase(_beneficiary, weiAmount, tokens);\r\n\r\n        _processPurchase(_beneficiary, tokens);\r\n        emit TokenPurchase(this, _beneficiary, weiAmount, tokens);\r\n\r\n        _forwardFunds();\r\n    }\r\n\t// ------------------------------------------------------------------------\r\n    // verifies the (sender address, amount of ethers)\r\n\t// Checks if balance does not exceeds 650 OBL\r\n    // ------------------------------------------------------------------------\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount, uint256 tokens) view internal {\r\n        require(_beneficiary != address(0x0));\r\n        require(_weiAmount != 0);\r\n    }\r\n\t// ------------------------------------------------------------------------\r\n    // calculates amount of tokens given weiAmount\r\n    // ------------------------------------------------------------------------\r\n    function _getTokenAmount(uint256 _weiAmount) view internal returns (uint256) {\r\n        return _weiAmount.mul(rate);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // calculates amount of tokens given weiAmount\r\n    // ------------------------------------------------------------------------\r\n    function _changeRate(uint256 _rate){\r\n        rate = _rate;\r\n    }\r\n\t// ------------------------------------------------------------------------\r\n    // calls ERC20's transfer function to send tokens to beneficiary\r\n    // ------------------------------------------------------------------------\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _transfer(_beneficiary,_tokenAmount);\r\n    }\r\n\t// ------------------------------------------------------------------------\r\n    // deliver tokens to the beneficiary\r\n    // ------------------------------------------------------------------------\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n    }\r\n\t// ------------------------------------------------------------------------\r\n    // forward donations to the owner\r\n    // ------------------------------------------------------------------------\r\n    function _forwardFunds() internal {\r\n        owner.transfer(msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"_changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"_buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TicHTUContract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4eb135f17c5039d09e92a5053d119b869912be83d088d76262cac5754033f73d"}]}