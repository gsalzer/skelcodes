{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\n/*\r\nInterface provides ERC20 Standard token methods\r\n*/\r\ninterface IERC20StandardToken{\r\n    //Total supply amount\r\n    function totalSupply() external constant returns (uint256 supply);\r\n   \r\n    //transfer tokens to _toAddress\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    \r\n    //transfer tokens from _fromAddress to _toAddress\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n    //get _owner address balances\r\n    function balanceOf(address _owner) external constant returns (uint256 balance);\r\n\r\n    //validate token transfering transaction\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    //??\r\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\r\n    \r\n    //Transfer tokens event\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    //Approval tokens event\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract ERC20StandardToken is IERC20StandardToken{\r\n    uint256 public totalSupply;\r\n    \r\n    function totalSupply() external constant returns (uint256 supply){\r\n        return totalSupply;\r\n    }\r\n   \r\n    /*\r\n    Check transfering transaction valid\r\n        TRUE: Transfer tokens to customer and return true\r\n        FALSE: return false\r\n    */\r\n    function transfer(address _to, uint256 _value) external returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //if (_value > 0 && balances[msg.sender] >= _value && (balances[_to] + _value) > balances[_to]) {\r\n        \r\n        //If transferAmount > 0 and balance >= transferAmount\r\n        if (_value > 0 && balances[msg.sender] >= _value) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            emit Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            emit Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) external constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/*\r\n    v1: When customer send 1ETH to contract address, 10 tokens sent to ISSUE_TOKEN_ADDRESS\r\n    v2: After issue token, send 4,900,000,000 tokens to issue token address\r\n*/\r\ncontract TKDToken is ERC20StandardToken {\r\n    uint256 private constant DECIMALS_AMOUNT = 1000000000000000000;\r\n    \r\n    //Supply in ICO: 7,500,000\r\n    uint256 private constant TOTAL_SUPPLY_AMOUNT = 7500000 * DECIMALS_AMOUNT;\r\n    \r\n    //Sell in ICO: 5,500,000\r\n    uint256 private constant TOTAL_ICO_AMOUNT = 5500000 * DECIMALS_AMOUNT;\r\n    \r\n    //Marketing: 2,000,000\r\n    uint256 private constant TOTAL_MARKETING_AMOUNT = 2000000 * DECIMALS_AMOUNT;\r\n \r\n    //TOKEN INFORMATION\r\n    string public name = \"TKDToken\";                   \r\n    string public symbol =\"TKD\";\r\n \r\n    uint8 public decimals =  18;\r\n    address public fundsWallet;\r\n    address public icoTokenAddress = 0x6ed1d3CF924E19C14EEFE5ea93b5a3b8E9b746bE;\r\n    address public marketingTokenAddress = 0xc5DE4874bA806611b66511d8eC66Ba99398B194f;\r\n  \r\n    //METHODS\r\n   \r\n    // This is a constructor function \r\n    // which means the following function name has to match the contract name declared above\r\n    function TKDToken() public payable{\r\n        //Init properties\r\n        balances[msg.sender] = TOTAL_SUPPLY_AMOUNT;\r\n        totalSupply = TOTAL_SUPPLY_AMOUNT;\r\n        fundsWallet = msg.sender;\r\n    }\r\n    \r\n    function() public payable{\r\n        uint256 ethReceiveAmount = msg.value;\r\n        require(ethReceiveAmount > 0);\r\n        \r\n        address tokenReceiveAddress = msg.sender;\r\n        \r\n        //Only transfer to ICO Token Address and Marketing Token Address\r\n        require(tokenReceiveAddress == icoTokenAddress || tokenReceiveAddress == marketingTokenAddress);\r\n        \r\n        //Only transfer one time\r\n        require(balances[tokenReceiveAddress] == 0);\r\n        \r\n        uint256 tokenSendAmount = 0;\r\n        if(tokenReceiveAddress == icoTokenAddress){\r\n            tokenSendAmount = TOTAL_ICO_AMOUNT;    \r\n        }else{\r\n            tokenSendAmount = TOTAL_MARKETING_AMOUNT;\r\n        }\r\n        \r\n        require(tokenSendAmount > 0);\r\n        //Enough token to send\r\n        require(balances[fundsWallet] >= tokenSendAmount);\r\n        \r\n        //Transfer\r\n        balances[fundsWallet] -= tokenSendAmount;\r\n        balances[tokenReceiveAddress] += tokenSendAmount;\r\n        \r\n        // Broadcast a message to the blockchain\r\n        emit Transfer(fundsWallet, tokenReceiveAddress, tokenSendAmount); \r\n        \r\n        //Send ETH to funds wallet\r\n        fundsWallet.transfer(msg.value);     \r\n    }\r\n\r\n    /* Approves and then calls the receiving contract */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) private returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        if(!_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { assert(false); }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TKDToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e8366b1651b546e8dc69b19210e664554ca58dcd6ee60745875747a87165203a"}]}