{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0 || b == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  function muldiv(uint256 a, uint256 b, uint256 c) internal pure returns (uint256 d) {\r\n    if (a == 0 || b == 0) {\r\n      return 0;\r\n    }\r\n    d = a * b;\r\n    assert(d / a == b);\r\n    return d / c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract EtherCityConfig\r\n{\r\n    struct BuildingData\r\n    {\r\n        uint256 population;\r\n        uint256 creditsPerSec;   // *100\r\n        uint256 maxUpgrade;\r\n        uint256 constructCredit;\r\n        uint256 constructEther;\r\n        uint256 upgradeCredit;\r\n        uint256 demolishCredit;\r\n\r\n        uint256 constructSale;\r\n        uint256 upgradeSale;\r\n        uint256 demolishSale;\r\n    }\r\n\r\n    uint256 private initCredits;\r\n    uint256 private initLandCount;\r\n    uint256 private initcreditsPerSec;\r\n\r\n    uint256 private maxLandCount;\r\n    uint256 private ethLandCost;\r\n\r\n    uint256 private creditsPerEth;\r\n\r\n    address private owner;\r\n    address private admin;\r\n\r\n    mapping(uint256 => BuildingData) private buildingData;\r\n    \r\n    constructor() public payable\r\n    {\r\n        owner = msg.sender;\r\n        creditsPerEth = 1;\r\n    }\r\n\r\n    function SetAdmin(address addr) external\r\n    {\r\n        assert(msg.sender == owner);\r\n\r\n        admin = addr;\r\n    }\r\n    \r\n    function GetVersion() external pure returns(uint256)\r\n    {\r\n        return 1000;\r\n    }\r\n\r\n    function GetInitData() external view returns(uint256 ethland, uint256 maxland, uint256 credits, uint256 crdtsec, uint256 landCount)\r\n    {\r\n        ethland = ethLandCost;\r\n        maxland = maxLandCount;\r\n        credits = initCredits;\r\n        crdtsec = initcreditsPerSec;\r\n        landCount = initLandCount;\r\n    }\r\n\r\n    function SetInitData(uint256 ethland, uint256 maxland, uint256 credits, uint256 crdtsec, uint256 landCount) external\r\n    {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        ethLandCost = ethland;\r\n        maxLandCount = maxland;\r\n        initCredits = credits;\r\n        initcreditsPerSec = crdtsec;\r\n        initLandCount = landCount;\r\n    }\r\n\r\n    function GetCreditsPerEth() external view returns(uint256)\r\n    {\r\n        return creditsPerEth;\r\n    }\r\n\r\n    function SetCreditsPerEth(uint256 crdteth) external\r\n    {\r\n        require(crdteth > 0);\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        creditsPerEth = crdteth;\r\n    }\r\n\r\n    function GetLandData() external view returns(uint256 ethland, uint256 maxland)\r\n    {\r\n        ethland = ethLandCost;\r\n        maxland = maxLandCount;\r\n    }\r\n\r\n    function GetBuildingData(uint256 id) external view returns(uint256 bid, uint256 population, uint256 crdtsec, \r\n                            uint256 maxupd, uint256 cnstcrdt, uint256 cnsteth, uint256 updcrdt, uint256 dmlcrdt,\r\n                            uint256 cnstcrdtsale, uint256 cnstethsale, uint256 updcrdtsale, uint256 dmlcrdtsale)\r\n    {\r\n        BuildingData storage bdata = buildingData[id];\r\n\r\n        bid = id;\r\n        population = bdata.population;   // *100\r\n        crdtsec = bdata.creditsPerSec;   // *100\r\n        maxupd = bdata.maxUpgrade;\r\n        cnstcrdt = bdata.constructCredit;\r\n        cnsteth = bdata.constructEther;\r\n        updcrdt = bdata.upgradeCredit;\r\n        dmlcrdt = bdata.demolishCredit;\r\n        cnstcrdtsale = bdata.constructCredit * bdata.constructSale / 100;\r\n        cnstethsale = bdata.constructEther * bdata.constructSale /100;\r\n        updcrdtsale = bdata.upgradeCredit * bdata.upgradeSale / 100;\r\n        dmlcrdtsale = bdata.demolishCredit * bdata.demolishSale / 100;\r\n    }\r\n\r\n    function SetBuildingData(uint256 bid, uint256 pop, uint256 crdtsec, uint256 maxupd,\r\n                            uint256 cnstcrdt, uint256 cnsteth, uint256 updcrdt, uint256 dmlcrdt) external\r\n    {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        buildingData[bid] = BuildingData({population:pop, creditsPerSec:crdtsec, maxUpgrade:maxupd,\r\n                            constructCredit:cnstcrdt, constructEther:cnsteth, upgradeCredit:updcrdt, demolishCredit:dmlcrdt,\r\n                            constructSale:100, upgradeSale:100, demolishSale:100\r\n                            });\r\n    }\r\n\r\n    function SetBuildingSale(uint256 bid, uint256 cnstsale, uint256 updsale, uint256 dmlsale) external\r\n    {\r\n        BuildingData storage bdata = buildingData[bid];\r\n\r\n        require(0 < cnstsale && cnstsale <= 100);\r\n        require(0 < updsale && updsale <= 100);\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        bdata.constructSale = cnstsale;\r\n        bdata.upgradeSale = updsale;\r\n        bdata.demolishSale = dmlsale;\r\n    }\r\n\r\n    function SetBuildingDataArray(uint256[] data) external\r\n    {\r\n        require(data.length % 8 == 0);\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        for(uint256 index = 0; index < data.length; index += 8)\r\n        {\r\n            BuildingData storage bdata = buildingData[data[index]];\r\n\r\n            bdata.population = data[index + 1];\r\n            bdata.creditsPerSec = data[index + 2];\r\n            bdata.maxUpgrade = data[index + 3];\r\n            bdata.constructCredit = data[index + 4];\r\n            bdata.constructEther = data[index + 5];\r\n            bdata.upgradeCredit = data[index + 6];\r\n            bdata.demolishCredit = data[index + 7];\r\n            bdata.constructSale = 100;\r\n            bdata.upgradeSale = 100;\r\n            bdata.demolishSale = 100;\r\n        }\r\n    }\r\n\r\n    function GetBuildingParam(uint256 id) external view\r\n                returns(uint256 population, uint256 crdtsec, uint256 maxupd)\r\n    {\r\n        BuildingData storage bdata = buildingData[id];\r\n\r\n        population = bdata.population;   // *100\r\n        crdtsec = bdata.creditsPerSec;   // *100\r\n        maxupd = bdata.maxUpgrade;\r\n    }\r\n\r\n    function GetConstructCost(uint256 id, uint256 count) external view\r\n                returns(uint256 cnstcrdt, uint256 cnsteth)\r\n    {\r\n        BuildingData storage bdata = buildingData[id];\r\n\r\n        cnstcrdt = bdata.constructCredit * bdata.constructSale / 100  * count;\r\n        cnsteth = bdata.constructEther * bdata.constructSale / 100  * count;\r\n    }\r\n\r\n    function GetUpgradeCost(uint256 id, uint256 count) external view\r\n                returns(uint256 updcrdt)\r\n    {\r\n        BuildingData storage bdata = buildingData[id];\r\n\r\n        updcrdt = bdata.upgradeCredit * bdata.upgradeSale / 100 * count;\r\n    }\r\n\r\n    function GetDemolishCost(uint256 id, uint256 count) external view\r\n                returns(uint256)\r\n    {\r\n        BuildingData storage bdata = buildingData[id];\r\n\r\n        return bdata.demolishCredit * bdata.demolishSale / 100 * count;\r\n   }\r\n}\r\n\r\ncontract EtherCityRank\r\n{\r\n    struct LINKNODE\r\n    {\r\n        uint256 count;\r\n        uint256 leafLast;\r\n    }\r\n\r\n    struct LEAFNODE\r\n    {\r\n        address player;\r\n        uint256 population;\r\n        uint256 time;\r\n\r\n        uint256 prev;\r\n        uint256 next;\r\n    }\r\n\r\n    uint256 private constant LINK_NULL = uint256(-1);\r\n    uint256 private constant LEAF_PER_LINK = 30;\r\n    uint256 private constant LINK_COUNT = 10;\r\n    uint256 private constant LINK_ENDIDX = LINK_COUNT - 1;\r\n\r\n    mapping(uint256 => LINKNODE) private linkNodes; // 30 * 10 = 300rank\r\n    mapping(uint256 => LEAFNODE) private leafNodes;\r\n    uint256 private leafCount;\r\n\r\n    address private owner;\r\n    address private admin;\r\n    address private city;\r\n    \r\n    constructor() public payable\r\n    {\r\n        owner = msg.sender;\r\n\r\n        for(uint256 index = 1; index < LINK_COUNT; index++)\r\n            linkNodes[index] = LINKNODE({count:0, leafLast:LINK_NULL});\r\n\r\n        // very first rank\r\n        linkNodes[0] = LINKNODE({count:1, leafLast:0});\r\n        leafNodes[0] = LEAFNODE({player:address(0), population:uint256(-1), time:0, prev:LINK_NULL, next:LINK_NULL});\r\n        leafCount = 1;\r\n    }\r\n\r\n    function GetVersion() external pure returns(uint256)\r\n    {\r\n        return 1000;\r\n    }\r\n\r\n    function GetRank(uint16 rankidx) external view returns(address player, uint256 pop, uint256 time, uint256 nextidx)\r\n    {\r\n        uint256 leafidx;\r\n\r\n        if (rankidx == 0)\r\n            leafidx = leafNodes[0].next;\r\n        else\r\n            leafidx = rankidx;\r\n\r\n        if (leafidx != LINK_NULL)\r\n        {\r\n            player = leafNodes[leafidx].player;\r\n            pop = leafNodes[leafidx].population;\r\n            time = leafNodes[leafidx].time;\r\n            nextidx = leafNodes[leafidx].next;\r\n        }\r\n        else\r\n        {\r\n            player = address(0);\r\n            pop = 0;\r\n            time = 0;\r\n            nextidx = 0;\r\n        }\r\n    }\r\n\r\n    function UpdateRank(address player, uint256 pop_new, uint256 time_new) external\r\n    {\r\n        bool found;\r\n        uint256 linkidx;\r\n        uint256 leafidx;\r\n        uint256 emptyidx;\r\n\r\n        require(owner == msg.sender || admin == msg.sender || city == msg.sender);\r\n\r\n        emptyidx = RemovePlayer(player);\r\n\r\n        (found, linkidx, leafidx) = findIndex(pop_new, time_new);\r\n        if (linkidx == LINK_NULL)\r\n            return;\r\n\r\n        if (linkNodes[LINK_ENDIDX].count == LEAF_PER_LINK)\r\n        {   // remove overflow\r\n            emptyidx = linkNodes[LINK_ENDIDX].leafLast;\r\n            RemoveRank(LINK_ENDIDX, emptyidx);\r\n        }\r\n        else if (emptyidx == LINK_NULL)\r\n        {\r\n            emptyidx = leafCount;\r\n            leafCount++;\r\n        }\r\n\r\n        leafNodes[emptyidx] = LEAFNODE({player:player, population:pop_new, time:time_new, prev:LINK_NULL, next:LINK_NULL});\r\n\r\n        // insert emptyidx before leafidx\r\n        InsertRank(linkidx, leafidx, emptyidx);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////\r\n    //\r\n    function adminSetAdmin(address addr) external\r\n    {\r\n        require(owner == msg.sender);\r\n\r\n        admin = addr;\r\n    }\r\n\r\n    function adminSetCity(address addr) external\r\n    {\r\n        require(owner == msg.sender || admin == msg.sender);\r\n\r\n        city = addr;\r\n    }\r\n\r\n    function adminResetRank() external\r\n    {\r\n        require(owner == msg.sender || admin == msg.sender);\r\n\r\n        for(uint256 index = 1; index < LINK_COUNT; index++)\r\n            linkNodes[index] = LINKNODE({count:0, leafLast:LINK_NULL});\r\n\r\n        // very first rank\r\n        linkNodes[0] = LINKNODE({count:1, leafLast:0});\r\n        leafNodes[0] = LEAFNODE({player:address(0), population:uint256(-1), time:0, prev:LINK_NULL, next:LINK_NULL});\r\n        leafCount = 1;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////\r\n    //\r\n    function findIndex(uint256 pop, uint256 time) private view returns(bool found, uint256 linkidx, uint256 leafidx)\r\n    {\r\n        uint256 comp;\r\n\r\n        found = false;\r\n\r\n        for(linkidx = 0; linkidx < LINK_COUNT; linkidx++)\r\n        {\r\n            LINKNODE storage lknode = linkNodes[linkidx];\r\n            if (lknode.count < LEAF_PER_LINK)\r\n                break;\r\n\r\n            LEAFNODE storage lfnode = leafNodes[lknode.leafLast];\r\n            if ((compareLeaf(pop, time, lfnode.population, lfnode.time) >= 1))\r\n                break;\r\n        }\r\n\r\n        if (linkidx == LINK_COUNT)\r\n        {\r\n            linkidx = (linkNodes[LINK_ENDIDX].count < LEAF_PER_LINK) ? LINK_ENDIDX : LINK_NULL;\r\n            leafidx = LINK_NULL;\r\n            return;\r\n        }\r\n            \r\n        leafidx = lknode.leafLast;\r\n        for(uint256 index = 0; index < lknode.count; index++)\r\n        {\r\n            lfnode = leafNodes[leafidx];\r\n            comp = compareLeaf(pop, time, lfnode.population, lfnode.time);\r\n            if (comp == 0)  // <\r\n            {\r\n                leafidx = lfnode.next;\r\n                break;\r\n            }\r\n            else if (comp == 1) // ==\r\n            {\r\n                found = true;\r\n                break;\r\n            }\r\n\r\n            if (index + 1 < lknode.count)\r\n                leafidx = lfnode.prev;\r\n        }\r\n    }\r\n    \r\n    function InsertRank(uint256 linkidx, uint256 leafidx_before, uint256 leafidx_new) private\r\n    {\r\n        uint256 leafOnLink;\r\n        uint256 leafLast;\r\n\r\n        if (leafidx_before == LINK_NULL)\r\n        {   // append\r\n            leafLast = linkNodes[linkidx].leafLast;\r\n            if (leafLast != LINK_NULL)\r\n                ConnectLeaf(leafidx_new, leafNodes[leafLast].next);\r\n            else\r\n                leafNodes[leafidx_new].next = LINK_NULL;\r\n\r\n            ConnectLeaf(leafLast, leafidx_new);\r\n            linkNodes[linkidx].leafLast = leafidx_new;\r\n            linkNodes[linkidx].count++;\r\n            return;\r\n        }\r\n\r\n        ConnectLeaf(leafNodes[leafidx_before].prev, leafidx_new);\r\n        ConnectLeaf(leafidx_new, leafidx_before);\r\n\r\n        leafLast = LINK_NULL;\r\n        for(uint256 index = linkidx; index < LINK_COUNT; index++)\r\n        {\r\n            leafOnLink = linkNodes[index].count;\r\n            if (leafOnLink < LEAF_PER_LINK)\r\n            {\r\n                if (leafOnLink == 0) // add new\r\n                    linkNodes[index].leafLast = leafLast;\r\n\r\n                linkNodes[index].count++;\r\n                break;\r\n            }\r\n\r\n            leafLast = linkNodes[index].leafLast;\r\n            linkNodes[index].leafLast = leafNodes[leafLast].prev;\r\n        }\r\n    }\r\n\r\n    function RemoveRank(uint256 linkidx, uint256 leafidx) private\r\n    {\r\n        uint256 next;\r\n\r\n        for(uint256 index = linkidx; index < LINK_COUNT; index++)\r\n        {\r\n            LINKNODE storage link = linkNodes[index];\r\n            \r\n            next = leafNodes[link.leafLast].next;\r\n            if (next == LINK_NULL)\r\n            {\r\n                link.count--;\r\n                if (link.count == 0)\r\n                    link.leafLast = LINK_NULL;\r\n                break;\r\n            }\r\n            else\r\n                link.leafLast = next;\r\n        }\r\n\r\n        LEAFNODE storage leaf_cur = leafNodes[leafidx];\r\n        if (linkNodes[linkidx].leafLast == leafidx)\r\n            linkNodes[linkidx].leafLast = leaf_cur.prev;\r\n\r\n        ConnectLeaf(leaf_cur.prev, leaf_cur.next);\r\n    }\r\n\r\n    function RemovePlayer(address player) private returns(uint256 leafidx)\r\n    {\r\n        for(uint256 linkidx = 0; linkidx < LINK_COUNT; linkidx++)\r\n        {\r\n            LINKNODE storage lknode = linkNodes[linkidx];\r\n\r\n            leafidx = lknode.leafLast;\r\n            for(uint256 index = 0; index < lknode.count; index++)\r\n            {\r\n                LEAFNODE storage lfnode = leafNodes[leafidx];\r\n\r\n                if (lfnode.player == player)\r\n                {\r\n                    RemoveRank(linkidx, leafidx);\r\n                    return;\r\n                }\r\n\r\n                leafidx = lfnode.prev;\r\n            }\r\n        }\r\n\r\n        return LINK_NULL;\r\n    }\r\n\r\n    function ConnectLeaf(uint256 leafprev, uint256 leafnext) private\r\n    {\r\n        if (leafprev != LINK_NULL)\r\n            leafNodes[leafprev].next = leafnext;\r\n\r\n        if (leafnext != LINK_NULL)\r\n            leafNodes[leafnext].prev = leafprev;\r\n    }\r\n\r\n    function compareLeaf(uint256 pop1, uint256 time1, uint256 pop2, uint256 time2) private pure returns(uint256)\r\n    {\r\n        if (pop1 > pop2)\r\n            return 2;\r\n        else if (pop1 < pop2)\r\n            return 0;\r\n\r\n        if (time1 > time2)\r\n            return 2;\r\n        else if (time1 < time2)\r\n            return 0;\r\n\r\n        return 1;\r\n    }\r\n}\r\n\r\ncontract EtherCityData\r\n{\r\n    struct WORLDDATA\r\n    {\r\n        uint256 ethBalance;\r\n        uint256 ethDev;\r\n\r\n        uint256 population;\r\n        uint256 credits;\r\n\r\n        uint256 starttime;\r\n    }\r\n\r\n    struct WORLDSNAPSHOT\r\n    {\r\n        bool valid;\r\n        uint256 ethDay;\r\n        uint256 ethBalance;\r\n        uint256 ethRankFund;\r\n        uint256 ethShopFund;\r\n\r\n        uint256 ethRankFundRemain;\r\n        uint256 ethShopFundRemain;\r\n\r\n        uint256 population;\r\n        uint256 credits;\r\n\r\n        uint256 lasttime;\r\n    }\r\n\r\n    struct CITYDATA\r\n    {\r\n        bytes32 name;\r\n\r\n        uint256 credits;\r\n\r\n        uint256 population;\r\n        uint256 creditsPerSec;   // *100\r\n\r\n        uint256 landOccupied;\r\n        uint256 landUnoccupied;\r\n\r\n        uint256 starttime;\r\n        uint256 lasttime;\r\n        uint256 withdrawSS;\r\n    }\r\n\r\n    struct CITYSNAPSHOT\r\n    {\r\n        bool valid;\r\n\r\n        uint256 population;\r\n        uint256 credits;\r\n\r\n        uint256 shopCredits;\r\n\r\n        uint256 lasttime;\r\n    }\r\n\r\n    struct BUILDINGDATA\r\n    {\r\n        uint256 constructCount;\r\n        uint256 upgradeCount;\r\n\r\n        uint256 population;\r\n        uint256 creditsPerSec;   // *100\r\n    }\r\n\r\n    uint256 private constant INTFLOATDIV = 100;\r\n\r\n    address private owner;\r\n    address private admin;\r\n    address private city;\r\n    bool private enabled;\r\n\r\n    WORLDDATA private worldData;\r\n    mapping(uint256 => WORLDSNAPSHOT) private worldSnapshot;\r\n\r\n    address[] private playerlist;\r\n    mapping(address => CITYDATA) private cityData;\r\n    mapping(address => mapping(uint256 => CITYSNAPSHOT)) private citySnapshot;\r\n    mapping(address => mapping(uint256 => BUILDINGDATA)) private buildings;\r\n    mapping(address => uint256) private ethBalance;\r\n\r\n\r\n    constructor() public payable\r\n    {\r\n        owner = msg.sender;\r\n\r\n        enabled = true;\r\n        worldData = WORLDDATA({ethBalance:0, ethDev:0, population:0, credits:0, starttime:block.timestamp});\r\n        worldSnapshot[nowday()] = WORLDSNAPSHOT({valid:true, ethDay:0, ethBalance:0, ethRankFund:0, ethShopFund:0, ethRankFundRemain:0, ethShopFundRemain:0, population:0, credits:0, lasttime:block.timestamp});\r\n    }\r\n\r\n    function GetVersion() external pure returns(uint256)\r\n    {\r\n        return 1001;\r\n    }\r\n\r\n    function IsPlayer(address player) external view returns(bool)\r\n    {\r\n        for(uint256 index = 0; index < playerlist.length; index++)\r\n         {\r\n             if (playerlist[index] == player)\r\n                return true;\r\n         }\r\n\r\n        return false;\r\n    }\r\n\r\n    function IsCityNameExist(bytes32 cityname) external view returns(bool)\r\n    {\r\n        for(uint256 index = 0; index < playerlist.length; index++)\r\n        {\r\n            if (cityData[playerlist[index]].name == cityname)\r\n               return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function CreateCityData(address player, uint256 crdtsec, uint256 landcount) external\r\n    {\r\n        uint256 day;\r\n\r\n        require(cityData[player].starttime == 0);\r\n        require(owner == msg.sender || admin == msg.sender || (enabled && city == msg.sender));\r\n\r\n        playerlist.push(player);    // new player\r\n\r\n        day = nowday();\r\n        cityData[player] = CITYDATA({name:0, credits:0, population:0, creditsPerSec:crdtsec, landOccupied:0, landUnoccupied:landcount, starttime:block.timestamp, lasttime:block.timestamp, withdrawSS:day});\r\n        citySnapshot[player][day] = CITYSNAPSHOT({valid:true, population:0, credits:0, shopCredits:0, lasttime:block.timestamp});\r\n    }\r\n\r\n    function GetWorldData() external view returns(uint256 ethBal, uint256 ethDev, uint256 population, uint256 credits, uint256 starttime)\r\n    {\r\n        require(owner == msg.sender || admin == msg.sender || city == msg.sender);\r\n\r\n        ethBal = worldData.ethBalance;\r\n        ethDev = worldData.ethDev;\r\n        population = worldData.population;\r\n        credits = worldData.credits;\r\n        starttime = worldData.starttime;\r\n    }\r\n\r\n    function SetWorldData(uint256 ethBal, uint256 ethDev, uint256 population, uint256 credits, uint256 starttime) external\r\n    {\r\n        require(owner == msg.sender || admin == msg.sender || (enabled && city == msg.sender));\r\n\r\n        worldData.ethBalance = ethBal;\r\n        worldData.ethDev = ethDev;\r\n        worldData.population = population;\r\n        worldData.credits = credits;\r\n        worldData.starttime = starttime;\r\n    }\r\n\r\n    function SetWorldSnapshot(uint256 day, bool valid, uint256 population, uint256 credits, uint256 lasttime) external\r\n    {\r\n        WORLDSNAPSHOT storage wss = worldSnapshot[day];\r\n\r\n        require(owner == msg.sender || admin == msg.sender || (enabled && city == msg.sender));\r\n\r\n        wss.valid = valid;\r\n        wss.population = population;\r\n        wss.credits = credits;\r\n        wss.lasttime = lasttime;\r\n    }\r\n\r\n    function GetCityData(address player) external view returns(uint256 credits, uint256 population, uint256 creditsPerSec,\r\n                                    uint256 landOccupied, uint256 landUnoccupied, uint256 lasttime)\r\n    {\r\n        CITYDATA storage cdata = cityData[player];\r\n\r\n        require(owner == msg.sender || admin == msg.sender || city == msg.sender);\r\n\r\n        credits = cdata.credits;\r\n        population = cdata.population;\r\n        creditsPerSec = cdata.creditsPerSec;\r\n        landOccupied = cdata.landOccupied;\r\n        landUnoccupied = cdata.landUnoccupied;\r\n        lasttime = cdata.lasttime;\r\n    }\r\n\r\n    function SetCityData(address player, uint256 credits, uint256 population, uint256 creditsPerSec,\r\n                        uint256 landOccupied, uint256 landUnoccupied, uint256 lasttime) external\r\n    {\r\n        CITYDATA storage cdata = cityData[player];\r\n\r\n        require(owner == msg.sender || admin == msg.sender || (enabled && city == msg.sender));\r\n\r\n        cdata.credits = credits;\r\n        cdata.population = population;\r\n        cdata.creditsPerSec = creditsPerSec;\r\n        cdata.landOccupied = landOccupied;\r\n        cdata.landUnoccupied = landUnoccupied;\r\n        cdata.lasttime = lasttime;\r\n    }\r\n\r\n    function GetCityName(address player) external view returns(bytes32)\r\n    {\r\n        return cityData[player].name;\r\n    }\r\n\r\n    function SetCityName(address player, bytes32 name) external\r\n    {\r\n        require(owner == msg.sender || admin == msg.sender || (enabled && city == msg.sender));\r\n\r\n        cityData[player].name = name;\r\n    }\r\n\r\n    function GetCitySnapshot(address player, uint256 day) external view returns(bool valid, uint256 population, uint256 credits, uint256 shopCredits, uint256 lasttime)\r\n    {\r\n        CITYSNAPSHOT storage css = citySnapshot[player][day];\r\n\r\n        require(owner == msg.sender || admin == msg.sender || city == msg.sender);\r\n\r\n        valid = css.valid;\r\n        population = css.population;\r\n        credits = css.credits;\r\n        shopCredits = css.shopCredits;\r\n        lasttime = css.lasttime;\r\n    }\r\n\r\n    function SetCitySnapshot(address player, uint256 day, bool valid, uint256 population, uint256 credits, uint256 shopCredits, uint256 lasttime) external\r\n    {\r\n        CITYSNAPSHOT storage css = citySnapshot[player][day];\r\n\r\n        require(owner == msg.sender || admin == msg.sender || (enabled && city == msg.sender));\r\n\r\n        css.valid = valid;\r\n        css.population = population;\r\n        css.credits = credits;\r\n        css.shopCredits = shopCredits;\r\n        css.lasttime = lasttime;\r\n    }\r\n\r\n    function GetBuildingData(address player, uint256 id) external view returns(uint256 constructCount, uint256 upgradeCount, uint256 population, uint256 creditsPerSec)\r\n    {\r\n        BUILDINGDATA storage bdata = buildings[player][id];\r\n\r\n        require(owner == msg.sender || admin == msg.sender || city == msg.sender);\r\n\r\n        constructCount = bdata.constructCount;\r\n        upgradeCount = bdata.upgradeCount;\r\n        population = bdata.population;\r\n        creditsPerSec = bdata.creditsPerSec;\r\n    }\r\n\r\n    function SetBuildingData(address player, uint256 id, uint256 constructCount, uint256 upgradeCount, uint256 population, uint256 creditsPerSec) external\r\n    {\r\n        BUILDINGDATA storage bdata = buildings[player][id];\r\n\r\n        require(owner == msg.sender || admin == msg.sender || (enabled && city == msg.sender));\r\n\r\n        bdata.constructCount = constructCount;\r\n        bdata.upgradeCount = upgradeCount;\r\n        bdata.population = population;\r\n        bdata.creditsPerSec = creditsPerSec;\r\n    }\r\n\r\n    function GetEthBalance(address player) external view returns(uint256)\r\n    {\r\n        require(owner == msg.sender || admin == msg.sender || city == msg.sender);\r\n\r\n        return ethBalance[player];\r\n    }\r\n\r\n    function SetEthBalance(address player, uint256 eth) external\r\n    {\r\n        require(owner == msg.sender || admin == msg.sender || (enabled && city == msg.sender));\r\n\r\n        ethBalance[player] = eth;\r\n    }\r\n\r\n    function AddEthBalance(address player, uint256 eth) external\r\n    {\r\n        require(owner == msg.sender || admin == msg.sender || (enabled && city == msg.sender));\r\n\r\n        ethBalance[player] += eth;\r\n    }\r\n\r\n    function GetWithdrawBalance(address player) external view returns(uint256 ethBal)\r\n    {\r\n        uint256 startday;\r\n\r\n        require(owner == msg.sender || admin == msg.sender || city == msg.sender);\r\n\r\n        ethBal = ethBalance[player];\r\n\r\n        startday = cityData[player].withdrawSS;\r\n        for(uint256 day = nowday() - 1; day >= startday; day--)\r\n        {\r\n            WORLDSNAPSHOT memory wss = TestWorldSnapshotInternal(day);\r\n            CITYSNAPSHOT memory css = TestCitySnapshotInternal(player, day);\r\n            ethBal += Math.min256(SafeMath.muldiv(wss.ethRankFund, css.population, wss.population), wss.ethRankFundRemain);\r\n        }\r\n    }\r\n\r\n    function WithdrawEther(address player) external\r\n    {\r\n        uint256 startday;\r\n        uint256 ethBal;\r\n        uint256 eth;\r\n        CITYDATA storage cdata = cityData[player];\r\n\r\n        require(owner == msg.sender || admin == msg.sender || (enabled && city == msg.sender));\r\n\r\n        ethBal = ethBalance[player];\r\n\r\n        startday = cdata.withdrawSS;\r\n        for(uint256 day = nowday() - 1; day >= startday; day--)\r\n        {\r\n            WORLDSNAPSHOT storage wss = ValidateWorldSnapshotInternal(day);\r\n            CITYSNAPSHOT storage css = ValidateCitySnapshotInternal(player, day);\r\n\r\n            if (wss.ethRankFundRemain > 0)\r\n            {\r\n                eth = Math.min256(SafeMath.muldiv(wss.ethRankFund, css.population, wss.population), wss.ethRankFundRemain);\r\n                wss.ethRankFundRemain -= eth;\r\n                ethBal += eth;\r\n            }\r\n        }\r\n\r\n        require(0 < ethBal);\r\n\r\n        ethBalance[player] = 0;\r\n        cdata.withdrawSS = nowday() - 1;\r\n\r\n        player.transfer(ethBal);\r\n    }\r\n\r\n    function GetEthShop(address player) external view returns(uint256 shopEth, uint256 shopCredits)\r\n    {\r\n        uint256 day;\r\n        CITYSNAPSHOT memory css;\r\n        WORLDSNAPSHOT memory wss;\r\n\r\n        require(owner == msg.sender || admin == msg.sender || city == msg.sender);\r\n\r\n        day = nowday() - 1;\r\n        if (day < cityData[player].starttime / 24 hours)\r\n        {\r\n            shopEth = 0;\r\n            shopCredits = 0;\r\n            return;\r\n        }\r\n\r\n        wss = TestWorldSnapshotInternal(day);\r\n        css = TestCitySnapshotInternal(player, day);\r\n\r\n        shopEth = Math.min256(SafeMath.muldiv(wss.ethShopFund, css.shopCredits, wss.credits), wss.ethShopFundRemain);\r\n        shopCredits = css.shopCredits;\r\n    }\r\n\r\n    function TradeEthShop(address player, uint256 credits) external\r\n    {\r\n        uint256 day;\r\n        uint256 shopEth;\r\n\r\n        require(owner == msg.sender || admin == msg.sender || (enabled && city == msg.sender));\r\n\r\n        day = nowday() - 1;\r\n        require(day >= cityData[player].starttime / 24 hours);\r\n\r\n        WORLDSNAPSHOT storage wss = ValidateWorldSnapshotInternal(day);\r\n        CITYSNAPSHOT storage css = ValidateCitySnapshotInternal(player, day);\r\n\r\n        require(wss.ethShopFundRemain > 0);\r\n        require((0 < credits) && (credits <= css.shopCredits));\r\n\r\n        shopEth = Math.min256(SafeMath.muldiv(wss.ethShopFund, css.shopCredits, wss.credits), wss.ethShopFundRemain);\r\n\r\n        wss.ethShopFundRemain -= shopEth;\r\n        css.shopCredits -= credits;\r\n\r\n        ethBalance[player] += shopEth;\r\n    }\r\n\r\n    function UpdateEthBalance(uint256 bal, uint256 devf, uint256 rnkf, uint256 shpf) external payable\r\n    {\r\n        require(owner == msg.sender || admin == msg.sender || (enabled && city == msg.sender));\r\n\r\n        worldData.ethBalance += bal + devf + rnkf + shpf;\r\n        worldData.ethDev += devf;\r\n\r\n        WORLDSNAPSHOT storage wss = ValidateWorldSnapshotInternal(nowday());\r\n        wss.ethDay += bal + devf + rnkf + shpf;\r\n        wss.ethBalance += bal;\r\n        wss.ethRankFund += rnkf;\r\n        wss.ethShopFund += shpf;\r\n        wss.ethRankFundRemain += rnkf;\r\n        wss.ethShopFundRemain += shpf;\r\n        wss.lasttime = block.timestamp;\r\n\r\n        ethBalance[owner] += devf;\r\n    }\r\n\r\n    function ValidateWorldSnapshot(uint256 day) external returns(uint256 ethRankFund, uint256 population, uint256 credits, uint256 lasttime)\r\n    {\r\n        WORLDSNAPSHOT storage wss = ValidateWorldSnapshotInternal(day);\r\n\r\n        require(owner == msg.sender || admin == msg.sender || (enabled && city == msg.sender));\r\n\r\n        ethRankFund = wss.ethRankFund;\r\n        population = wss.population;\r\n        credits = wss.credits;\r\n        lasttime = wss.lasttime;\r\n    }\r\n\r\n    function TestWorldSnapshot(uint256 day) external view returns(uint256 ethRankFund, uint256 population, uint256 credits, uint256 lasttime)\r\n    {\r\n        WORLDSNAPSHOT memory wss = TestWorldSnapshotInternal(day);\r\n\r\n        require(owner == msg.sender || admin == msg.sender || city == msg.sender);\r\n\r\n        ethRankFund = wss.ethRankFund;\r\n        population = wss.population;\r\n        credits = wss.credits;\r\n        lasttime = wss.lasttime;\r\n    }\r\n\r\n    function ValidateCitySnapshot(address player, uint256 day) external returns(uint256 population, uint256 credits, uint256 shopCredits, uint256 lasttime)\r\n    {\r\n        CITYSNAPSHOT storage css = ValidateCitySnapshotInternal(player, day);\r\n    \r\n        require(owner == msg.sender || admin == msg.sender || (enabled && city == msg.sender));\r\n\r\n        population = css.population;\r\n        credits = css.credits;\r\n        shopCredits = css.shopCredits;\r\n        lasttime = css.lasttime;\r\n    }\r\n\r\n    function TestCitySnapshot(address player, uint256 day) external view returns(uint256 population, uint256 credits, uint256 shopCredits, uint256 lasttime)\r\n    {\r\n        CITYSNAPSHOT memory css = TestCitySnapshotInternal(player, day);\r\n\r\n        require(owner == msg.sender || admin == msg.sender || city == msg.sender);\r\n\r\n        population = css.population;\r\n        credits = css.credits;\r\n        shopCredits = css.shopCredits;\r\n        lasttime = css.lasttime;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////\r\n    //\r\n    function nowday() private view returns(uint256)\r\n    {\r\n        return block.timestamp / 24 hours;\r\n    }\r\n\r\n    function adminSetAdmin(address addr) external\r\n    {\r\n        require(owner == msg.sender);\r\n\r\n        admin = addr;\r\n    }\r\n\r\n    function adminSetCity(address addr) external\r\n    {\r\n        require(owner == msg.sender || admin == msg.sender);\r\n\r\n        city = addr;\r\n    }\r\n\r\n    function adminGetEnabled() external view returns(bool)\r\n    {\r\n        require(owner == msg.sender || admin == msg.sender);\r\n\r\n        return enabled;\r\n    }\r\n\r\n    function adminSetEnabled(bool bval) external\r\n    {\r\n        require(owner == msg.sender || admin == msg.sender);\r\n\r\n        enabled = bval;\r\n    }\r\n\r\n    function adminGetWorldData() external view returns(uint256 eth, uint256 ethDev,\r\n                                                 uint256 population, uint256 credits, uint256 starttime)\r\n    {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        eth = worldData.ethBalance;\r\n        ethDev = worldData.ethDev;\r\n        population = worldData.population;\r\n        credits = worldData.credits;\r\n        starttime = worldData.starttime;\r\n    }\r\n\r\n    function adminGetWorldSnapshot(uint256 day) external view returns(bool valid, uint256 ethDay, uint256 ethBal, uint256 ethRankFund, uint256 ethShopFund, uint256 ethRankFundRemain,\r\n                                uint256 ethShopFundRemain, uint256 population, uint256 credits, uint256 lasttime)\r\n    {\r\n        WORLDSNAPSHOT storage wss = worldSnapshot[day];\r\n\r\n        require(owner == msg.sender || admin == msg.sender);\r\n\r\n        valid = wss.valid;\r\n        ethDay = wss.ethDay;\r\n        ethBal = wss.ethBalance;\r\n        ethRankFund = wss.ethRankFund;\r\n        ethShopFund = wss.ethShopFund;\r\n        ethRankFundRemain = wss.ethRankFundRemain;\r\n        ethShopFundRemain = wss.ethShopFundRemain;\r\n        population = wss.population;\r\n        credits = wss.credits;\r\n        lasttime = wss.lasttime;\r\n    }\r\n\r\n    function adminSetWorldSnapshot(uint256 day, bool valid, uint256 ethDay, uint256 ethBal, uint256 ethRankFund, uint256 ethShopFund, uint256 ethRankFundRemain,\r\n                                uint256 ethShopFundRemain, uint256 population, uint256 credits, uint256 lasttime) external\r\n    {\r\n        WORLDSNAPSHOT storage wss = worldSnapshot[day];\r\n\r\n        require(owner == msg.sender || admin == msg.sender);\r\n\r\n        wss.valid = valid;\r\n        wss.ethDay = ethDay;\r\n        wss.ethBalance = ethBal;\r\n        wss.ethRankFund = ethRankFund;\r\n        wss.ethShopFund = ethShopFund;\r\n        wss.ethRankFundRemain = ethRankFundRemain;\r\n        wss.ethShopFundRemain = ethShopFundRemain;\r\n        wss.population = population;\r\n        wss.credits = credits;\r\n        wss.lasttime = lasttime;\r\n    }\r\n\r\n    function adminGetCityData(address player) external view returns(bytes32 name, uint256 credits, uint256 population, uint256 creditsPerSec,\r\n                                    uint256 landOccupied, uint256 landUnoccupied, uint256 starttime, uint256 lasttime, uint256 withdrawSS)\r\n    {\r\n        CITYDATA storage cdata = cityData[player];\r\n\r\n        require(owner == msg.sender || admin == msg.sender);\r\n\r\n        name = cdata.name;\r\n        credits = cdata.credits;\r\n        population = cdata.population;\r\n        creditsPerSec = cdata.creditsPerSec;\r\n        landOccupied = cdata.landOccupied;\r\n        landUnoccupied = cdata.landUnoccupied;\r\n        starttime = cdata.starttime;\r\n        lasttime = cdata.lasttime;\r\n        withdrawSS = cdata.withdrawSS;\r\n    }\r\n\r\n    function adminSetCityData(address player, bytes32 name, uint256 credits, uint256 population, uint256 creditsPerSec,\r\n                        uint256 landOccupied, uint256 landUnoccupied, uint256 starttime, uint256 lasttime, uint256 withdrawSS) external\r\n    {\r\n        CITYDATA storage cdata = cityData[player];\r\n\r\n        require(owner == msg.sender || admin == msg.sender);\r\n\r\n        cdata.name = name;\r\n        cdata.credits = credits;\r\n        cdata.population = population;\r\n        cdata.creditsPerSec = creditsPerSec;\r\n        cdata.landOccupied = landOccupied;\r\n        cdata.landUnoccupied = landUnoccupied;\r\n        cdata.starttime = starttime;\r\n        cdata.lasttime = lasttime;\r\n        cdata.withdrawSS = withdrawSS;\r\n    }\r\n\r\n    function adminUpdateWorldSnapshot() external\r\n    {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        ValidateWorldSnapshotInternal(nowday());\r\n    }\r\n\r\n    function adminGetPastShopFund() external view returns(uint256 ethBal)\r\n    {\r\n        uint256 startday;\r\n        WORLDSNAPSHOT memory wss;\r\n\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        ethBal = 0;\r\n\r\n        startday = worldData.starttime / 24 hours;\r\n        for(uint256 day = nowday() - 2; day >= startday; day--)\r\n        {\r\n            wss = TestWorldSnapshotInternal(day);\r\n            ethBal += wss.ethShopFundRemain;\r\n        }\r\n    }\r\n\r\n    function adminCollectPastShopFund() external\r\n    {\r\n        uint256 startday;\r\n        uint256 ethBal;\r\n\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        ethBal = ethBalance[owner];\r\n\r\n        startday = worldData.starttime / 24 hours;\r\n        for(uint256 day = nowday() - 2; day >= startday; day--)\r\n        {\r\n            WORLDSNAPSHOT storage wss = ValidateWorldSnapshotInternal(day);\r\n\r\n            ethBal += wss.ethShopFundRemain;\r\n            wss.ethShopFundRemain = 0;\r\n        }\r\n\r\n        ethBalance[owner] = ethBal;\r\n    }\r\n\r\n    function adminSendWorldBalance() external payable\r\n    {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        WORLDSNAPSHOT storage wss = ValidateWorldSnapshotInternal(nowday());\r\n        wss.ethBalance += msg.value;\r\n    }\r\n\r\n    function adminTransferWorldBalance(uint256 eth) external\r\n    {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        WORLDSNAPSHOT storage wss = ValidateWorldSnapshotInternal(nowday());\r\n        require(eth <= wss.ethBalance);\r\n\r\n        ethBalance[owner] += eth;\r\n        wss.ethBalance -= eth;\r\n    }\r\n\r\n    function adminGetContractBalance() external view returns(uint256)\r\n    {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        return address(this).balance;\r\n    }\r\n\r\n    function adminTransferContractBalance(uint256 eth) external\r\n    {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n        owner.transfer(eth);\r\n    }\r\n\r\n    function adminGetPlayerCount() external view returns(uint256)\r\n    {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        return playerlist.length;\r\n    }\r\n\r\n    function adminGetPlayer(uint256 index) external view returns(address player, uint256 eth)\r\n    {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        player = playerlist[index];\r\n        eth = ethBalance[player];\r\n    }\r\n\r\n\r\n    /////////////////////////////////////////////////////////////////\r\n    //\r\n    function ValidateWorldSnapshotInternal(uint256 day) private returns(WORLDSNAPSHOT storage)\r\n    {\r\n        uint256 fndf;\r\n        uint256 sday;\r\n\r\n        sday = day;\r\n        while (!worldSnapshot[sday].valid)\r\n            sday--;\r\n\r\n        WORLDSNAPSHOT storage prev = worldSnapshot[sday];\r\n        sday++;\r\n\r\n        while (sday <= day)\r\n        {\r\n            worldSnapshot[sday] = WORLDSNAPSHOT({valid:true, ethDay:0, ethBalance:0, ethRankFund:0, ethShopFund:0, ethRankFundRemain:0, ethShopFundRemain:0, population:prev.population, credits:prev.credits, lasttime:prev.lasttime / 24 hours + 1});\r\n            WORLDSNAPSHOT storage wss = worldSnapshot[sday];\r\n            wss.ethBalance = prev.ethBalance * 90 /100;\r\n            fndf = prev.ethBalance - wss.ethBalance;\r\n            wss.ethRankFund = fndf * 70 / 100;\r\n            wss.ethShopFund = fndf - wss.ethRankFund;\r\n            wss.ethRankFund = wss.ethRankFund;\r\n            wss.ethShopFund = wss.ethShopFund;\r\n            wss.ethRankFundRemain = wss.ethRankFund;\r\n            wss.ethShopFundRemain = wss.ethShopFund;\r\n\r\n            prev = wss;\r\n            sday++;\r\n        }\r\n\r\n        return prev;\r\n    }\r\n\r\n    function TestWorldSnapshotInternal(uint256 day) private view returns(WORLDSNAPSHOT memory)\r\n    {\r\n        uint256 fndf;\r\n        uint256 sday;\r\n\r\n        sday = day;\r\n        while (!worldSnapshot[sday].valid)\r\n            sday--;\r\n\r\n        WORLDSNAPSHOT memory prev = worldSnapshot[sday];\r\n        sday++;\r\n\r\n        while (sday <= day)\r\n        {\r\n            WORLDSNAPSHOT memory wss = WORLDSNAPSHOT({valid:true, ethDay:0, ethBalance:0, ethRankFund:0, ethShopFund:0, ethRankFundRemain:0, ethShopFundRemain:0, population:prev.population, credits:prev.credits, lasttime:prev.lasttime / 24 hours + 1});\r\n            wss.ethBalance = prev.ethBalance * 90 /100;\r\n            fndf = prev.ethBalance - wss.ethBalance;\r\n            wss.ethRankFund = fndf * 70 / 100;\r\n            wss.ethShopFund = fndf - wss.ethRankFund;\r\n            wss.ethRankFund = wss.ethRankFund;\r\n            wss.ethShopFund = wss.ethShopFund;\r\n            wss.ethRankFundRemain = wss.ethRankFund;\r\n            wss.ethShopFundRemain = wss.ethShopFund;\r\n\r\n            prev = wss;\r\n            sday++;\r\n        }\r\n\r\n        return prev;\r\n    }\r\n\r\n    function ValidateCitySnapshotInternal(address player, uint256 day) private returns(CITYSNAPSHOT storage)\r\n    {\r\n        uint256 sday;\r\n\r\n        sday = day;\r\n        while (!citySnapshot[player][sday].valid)\r\n            sday--;\r\n\r\n        CITYSNAPSHOT storage css = citySnapshot[player][sday];\r\n        sday++;\r\n\r\n        while (sday <= day)\r\n        {\r\n            citySnapshot[player][sday] = CITYSNAPSHOT({valid:true, population:css.population, credits:css.credits, shopCredits:css.credits, lasttime:sday * 24 hours});\r\n            css = citySnapshot[player][sday];\r\n            sday++;\r\n        }\r\n    \r\n        return css;\r\n    }\r\n\r\n    function TestCitySnapshotInternal(address player, uint256 day) private view returns(CITYSNAPSHOT memory)\r\n    {\r\n        uint256 sday;\r\n\r\n        sday = day;\r\n        while (!citySnapshot[player][sday].valid)\r\n            sday--;\r\n\r\n        CITYSNAPSHOT memory css = citySnapshot[player][sday];\r\n        sday++;\r\n\r\n        while (sday <= day)\r\n        {\r\n            css = CITYSNAPSHOT({valid:true, population:css.population, credits:css.credits, shopCredits:css.credits, lasttime:sday * 24 hours});\r\n            sday++;\r\n        }\r\n\r\n        return css;\r\n    }\r\n}\r\n\r\n\r\ncontract EtherCity\r\n{\r\n    struct WORLDDATA\r\n    {\r\n        uint256 ethBalance;\r\n        uint256 ethDev;\r\n\r\n        uint256 population;\r\n        uint256 credits;\r\n\r\n        uint256 starttime;\r\n    }\r\n\r\n    struct WORLDSNAPSHOT\r\n    {\r\n        uint256 population;\r\n        uint256 credits;\r\n        uint256 lasttime;\r\n    }\r\n\r\n    struct CITYDATA\r\n    {\r\n        uint256 credits;\r\n\r\n        uint256 population;\r\n        uint256 creditsPerSec;   // *100\r\n\r\n        uint256 landOccupied;\r\n        uint256 landUnoccupied;\r\n\r\n        uint256 lasttime;\r\n    }\r\n\r\n    struct CITYSNAPSHOT\r\n    {\r\n        uint256 population;\r\n        uint256 credits;\r\n\r\n        uint256 shopCredits;\r\n\r\n        uint256 lasttime;\r\n    }\r\n\r\n    struct BUILDINGDATA\r\n    {\r\n        uint256 constructCount;\r\n        uint256 upgradeCount;\r\n\r\n        uint256 population;\r\n        uint256 creditsPerSec;   // *100\r\n    }\r\n\r\n    uint256 private constant INTFLOATDIV = 100;\r\n\r\n    address private owner;\r\n    address private admin;\r\n\r\n    EtherCityConfig private config;\r\n    EtherCityData private data;\r\n    EtherCityRank private rank;\r\n\r\n    // events\r\n    event OnConstructed(address player, uint256 id, uint256 count);\r\n    event OnUpdated(address player, uint256 id, uint256 count);\r\n    event OnDemolished(address player, uint256 id, uint256 count);\r\n    event OnBuyLands(address player, uint256 count);\r\n    event OnBuyCredits(address player, uint256 eth);\r\n\r\n\r\n    constructor() public payable\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function GetVersion() external pure returns(uint256)\r\n    {\r\n        return 1001;\r\n    }\r\n\r\n    function IsPlayer() external view returns(bool)\r\n    {\r\n        return data.IsPlayer(msg.sender);\r\n    }\r\n\r\n    function StartCity() external\r\n    {\r\n        uint256 ethland;\r\n        uint256 maxland;\r\n        uint256 initcrdt;\r\n        uint256 crdtsec;\r\n        uint256 landcount;\r\n\r\n        (ethland, maxland, initcrdt, crdtsec, landcount) = config.GetInitData();\r\n        CITYDATA memory cdata = dtCreateCityData(msg.sender, crdtsec, landcount);\r\n\r\n        UpdateCityData(cdata, 0, initcrdt, 0, 0);\r\n\r\n        dtSetCityData(msg.sender, cdata);\r\n    }\r\n\r\n    function GetCityName(address player) external view returns(bytes32)\r\n    {\r\n        return data.GetCityName(player);\r\n    }\r\n\r\n    function SetCityName(bytes32 name) external\r\n    {\r\n        data.SetCityName(msg.sender, name);\r\n    }\r\n\r\n    function GetWorldSnapshot() external view returns(uint256 ethFund, uint256 population, uint256 credits, \r\n                                                    uint256 lasttime, uint256 nexttime, uint256 timestamp)\r\n    {\r\n        WORLDSNAPSHOT memory wss;\r\n        \r\n        (ethFund, wss) = dtTestWorldSnapshot(nowday());\r\n\r\n        population = wss.population;\r\n        credits = wss.credits;\r\n        lasttime = wss.lasttime;\r\n        nexttime = daytime(nowday() + 1);\r\n\r\n        timestamp = block.timestamp;\r\n    }\r\n\r\n    function GetCityData() external view returns(bytes32 cityname, uint256 population, uint256 credits, uint256 creditsPerSec,\r\n                                                                    uint256 occupied, uint256 unoccupied, uint256 timestamp)\r\n    {\r\n        CITYDATA memory cdata = dtGetCityData(msg.sender);\r\n\r\n        cityname = data.GetCityName(msg.sender);\r\n        credits = CalcIncCredits(cdata) + cdata.credits;\r\n        population = cdata.population;\r\n        creditsPerSec = cdata.creditsPerSec;   // *100\r\n        occupied = cdata.landOccupied;\r\n        unoccupied = cdata.landUnoccupied;\r\n        timestamp = block.timestamp;\r\n    }\r\n\r\n    function GetCitySnapshot() external view returns(uint256 population, uint256 credits, uint256 timestamp)\r\n    {\r\n        CITYSNAPSHOT memory css = dtTestCitySnapshot(msg.sender, nowday());\r\n\r\n        population = css.population;\r\n        credits = css.credits;\r\n        timestamp = block.timestamp;\r\n    }\r\n\r\n    function GetBuildingData(uint256 id) external view returns(uint256 constructCount, uint256 upgradeCount, uint256 population, uint256 creditsPerSec)\r\n    {\r\n        BUILDINGDATA memory bdata = dtGetBuildingData(msg.sender, id);\r\n\r\n        constructCount = bdata.constructCount;\r\n        upgradeCount = bdata.upgradeCount;\r\n        (population, creditsPerSec) = CalcBuildingParam(bdata);\r\n    }\r\n\r\n    function GetConstructCost(uint256 id, uint256 count) external view returns(uint256 cnstcrdt, uint256 cnsteth)\r\n    {\r\n        (cnstcrdt, cnsteth) = config.GetConstructCost(id, count);\r\n    }\r\n\r\n    function ConstructByCredits(uint256 id, uint256 count) external\r\n    {\r\n        CITYDATA memory cdata = dtGetCityData(msg.sender);\r\n\r\n        require(count > 0);\r\n        if (!ConstructBuilding(cdata, id, count, true))\r\n            require(false);\r\n\r\n        dtSetCityData(msg.sender, cdata);\r\n\r\n        emit OnConstructed(msg.sender, id, count);\r\n    }\r\n\r\n    function ConstructByEth(uint256 id, uint256 count) external payable\r\n    {\r\n        CITYDATA memory cdata = dtGetCityData(msg.sender);\r\n\r\n        require(count > 0);\r\n        if (!ConstructBuilding(cdata, id, count, false))\r\n            require(false);\r\n\r\n        dtSetCityData(msg.sender, cdata);\r\n\r\n        emit OnConstructed(msg.sender, id, count);\r\n    }\r\n\r\n    function BuyLandsByEth(uint256 count) external payable\r\n    {\r\n        uint256 ethland;\r\n        uint256 maxland;\r\n\r\n        require(count > 0);\r\n\r\n        (ethland, maxland) = config.GetLandData();\r\n\r\n        CITYDATA memory cdata = dtGetCityData(msg.sender);\r\n        require(cdata.landOccupied + cdata.landUnoccupied + count <= maxland);\r\n\r\n        UpdateEthBalance(ethland * count, msg.value);\r\n        UpdateCityData(cdata, 0, 0, 0, 0);\r\n\r\n        cdata.landUnoccupied += count;\r\n\r\n        dtSetCityData(msg.sender, cdata);\r\n\r\n        emit OnBuyLands(msg.sender, count);\r\n    }\r\n\r\n    function BuyCreditsByEth(uint256 eth) external payable\r\n    {\r\n        CITYDATA memory cdata = dtGetCityData(msg.sender);\r\n\r\n        require(eth > 0);\r\n\r\n        UpdateEthBalance(eth, msg.value);\r\n        UpdateCityData(cdata, 0, 0, 0, 0);\r\n\r\n        cdata.credits += eth * config.GetCreditsPerEth();\r\n\r\n        dtSetCityData(msg.sender, cdata);\r\n\r\n        emit OnBuyCredits(msg.sender, eth);\r\n    }\r\n\r\n    function GetUpgradeCost(uint256 id, uint256 count) external view returns(uint256)\r\n    {\r\n        return config.GetUpgradeCost(id, count);\r\n    }\r\n\r\n    function UpgradeByCredits(uint256 id, uint256 count) external\r\n    {\r\n        uint256 a_population;\r\n        uint256 a_crdtsec;\r\n        uint256 updcrdt;\r\n        CITYDATA memory cdata = dtGetCityData(msg.sender);\r\n        \r\n        require(count > 0);\r\n\r\n        (a_population, a_crdtsec) = UpdateBuildingParam(cdata, id, 0, count);\r\n        require((a_population > 0) || (a_crdtsec > 0));\r\n\r\n        updcrdt = config.GetUpgradeCost(id, count);\r\n\r\n        UpdateCityData(cdata, a_population, 0, updcrdt, a_crdtsec);\r\n        if (a_population != 0)\r\n            rank.UpdateRank(msg.sender, cdata.population, cdata.lasttime);\r\n\r\n        dtSetCityData(msg.sender, cdata);\r\n\r\n        emit OnUpdated(msg.sender, id, count);\r\n    }\r\n\r\n    function GetDemolishCost(uint256 id, uint256 count) external view returns (uint256)\r\n    {\r\n        require(count > 0);\r\n\r\n        return config.GetDemolishCost(id, count);\r\n    }\r\n\r\n    function DemolishByCredits(uint256 id, uint256 count) external\r\n    {\r\n        uint256 a_population;\r\n        uint256 a_crdtsec;\r\n        uint256 dmlcrdt;\r\n        CITYDATA memory cdata = dtGetCityData(msg.sender);\r\n        \r\n        require(count > 0);\r\n\r\n        (a_population, a_crdtsec) = UpdateBuildingParam(cdata, id, -count, 0);\r\n        require((a_population > 0) || (a_crdtsec > 0));\r\n\r\n        dmlcrdt = config.GetDemolishCost(id, count);\r\n\r\n        UpdateCityData(cdata, a_population, 0, dmlcrdt, a_crdtsec);\r\n        if (a_population != 0)\r\n            rank.UpdateRank(msg.sender, cdata.population, cdata.lasttime);\r\n\r\n        dtSetCityData(msg.sender, cdata);\r\n\r\n        emit OnDemolished(msg.sender, id, count);\r\n    }\r\n\r\n    function GetEthBalance() external view returns(uint256 ethBal)\r\n    {\r\n        return data.GetWithdrawBalance(msg.sender);\r\n    }\r\n\r\n    function WithdrawEther() external\r\n    {\r\n        data.WithdrawEther(msg.sender);\r\n\r\n        CITYDATA memory cdata = dtGetCityData(msg.sender);\r\n        UpdateCityData(cdata, 0, 0, 0, 0);\r\n        dtSetCityData(msg.sender, cdata);\r\n    }\r\n\r\n    function GetEthShop() external view returns(uint256 shopEth, uint256 shopCredits)\r\n    {\r\n        (shopEth, shopCredits) = data.GetEthShop(msg.sender);\r\n    }\r\n\r\n    function TradeEthShop(uint256 credits) external\r\n    {\r\n        data.TradeEthShop(msg.sender, credits);\r\n\r\n        CITYDATA memory cdata = dtGetCityData(msg.sender);\r\n        UpdateCityData(cdata, 0, 0, credits, 0);\r\n        dtSetCityData(msg.sender, cdata);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////\r\n    // admin\r\n    function adminIsAdmin() external view returns(bool)\r\n    {\r\n        return msg.sender == owner || msg.sender == admin;\r\n    }\r\n\r\n    function adminSetAdmin(address addr) external\r\n    {\r\n        require(msg.sender == owner);\r\n\r\n        admin = addr;\r\n    }\r\n\r\n    function adminSetConfig(address dta, address cfg, address rnk) external\r\n    {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        data = EtherCityData(dta);\r\n        config = EtherCityConfig(cfg);\r\n        rank = EtherCityRank(rnk);\r\n    }\r\n\r\n    function adminAddWorldBalance() external payable\r\n    {\r\n        require(msg.value > 0);\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        UpdateEthBalance(msg.value, msg.value);\r\n    }\r\n\r\n    function adminGetBalance() external view returns(uint256 dta_bal, uint256 cfg_bal, uint256 rnk_bal, uint256 cty_bal)\r\n    {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n\r\n        dta_bal = address(data).balance;\r\n        cfg_bal = address(config).balance;\r\n        rnk_bal = address(rank).balance;\r\n        cty_bal = address(this).balance;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////\r\n    // internal\r\n    function nowday() private view returns(uint256)\r\n    {\r\n        return block.timestamp / 24 hours;\r\n    }\r\n\r\n    function daytime(uint256 day) private pure returns(uint256)\r\n    {\r\n        return day * 24 hours;\r\n    }\r\n\r\n    function ConstructBuilding(CITYDATA memory cdata, uint256 id, uint256 count, bool byCredit) private returns(bool)\r\n    {\r\n        uint256 a_population;\r\n        uint256 a_crdtsec;\r\n        uint256 cnstcrdt;\r\n        uint256 cnsteth;\r\n\r\n        if (count > cdata.landUnoccupied)\r\n            return false;\r\n\r\n        (a_population, a_crdtsec) = UpdateBuildingParam(cdata, id, count, 0);\r\n\r\n        if ((a_population == 0) && (a_crdtsec == 0))\r\n            return false;\r\n\r\n        (cnstcrdt, cnsteth) = config.GetConstructCost(id, count);\r\n\r\n        if (!byCredit)\r\n            UpdateEthBalance(cnsteth, msg.value);\r\n\r\n        UpdateCityData(cdata, a_population, 0, cnstcrdt, a_crdtsec);\r\n        if (a_population != 0)\r\n            rank.UpdateRank(msg.sender, cdata.population, cdata.lasttime);\r\n\r\n        return true;            \r\n    }\r\n\r\n    function UpdateBuildingParam(CITYDATA memory cdata, uint256 id, uint256 cnstcount, uint256 updcount) private returns(uint256 a_population, uint256 a_crdtsec)\r\n    {\r\n        uint256 population;\r\n        uint256 crdtsec;\r\n        uint256 maxupd;\r\n        BUILDINGDATA memory bdata = dtGetBuildingData(msg.sender, id);\r\n\r\n        if (bdata.upgradeCount == 0)\r\n            bdata.upgradeCount = 1;\r\n\r\n        a_population = 0;\r\n        a_crdtsec = 0;\r\n\r\n        (population, crdtsec, maxupd) = config.GetBuildingParam(id);\r\n        if (cnstcount > cdata.landUnoccupied)\r\n            return;\r\n\r\n        cdata.landOccupied += cnstcount;\r\n        cdata.landUnoccupied -= cnstcount;\r\n\r\n        if (bdata.upgradeCount + updcount > maxupd)\r\n            return;\r\n\r\n        (a_population, a_crdtsec) = CalcBuildingParam(bdata);\r\n        bdata.population = population;\r\n        bdata.creditsPerSec = crdtsec;\r\n        bdata.constructCount += cnstcount;\r\n        bdata.upgradeCount += updcount;\r\n        (population, crdtsec) = CalcBuildingParam(bdata);\r\n\r\n        dtSetBuildingData(msg.sender, id, bdata);\r\n\r\n        a_population = population - a_population;\r\n        a_crdtsec = crdtsec - a_crdtsec;\r\n    }\r\n\r\n    function CalcBuildingParam(BUILDINGDATA memory bdata) private pure returns(uint256 population, uint256 crdtsec)\r\n    {\r\n        uint256 count;\r\n\r\n        count = bdata.constructCount * bdata.upgradeCount;\r\n        population = bdata.population * count;\r\n        crdtsec = bdata.creditsPerSec * count;\r\n    }\r\n\r\n    function CalcIncCredits(CITYDATA memory cdata) private view returns(uint256)\r\n    {\r\n        return SafeMath.muldiv(cdata.creditsPerSec, block.timestamp - cdata.lasttime, INTFLOATDIV);\r\n    }\r\n\r\n    function UpdateCityData(CITYDATA memory cdata, uint256 pop, uint256 inccrdt, uint256 deccrdt, uint256 crdtsec) private\r\n    {\r\n        uint256 day;\r\n\r\n        day = nowday();\r\n\r\n        inccrdt += CalcIncCredits(cdata);\r\n        require((cdata.credits + inccrdt) >= deccrdt);\r\n\r\n        inccrdt -= deccrdt;\r\n\r\n        cdata.population += pop;\r\n        cdata.credits += inccrdt;\r\n        cdata.creditsPerSec += crdtsec;\r\n        cdata.lasttime = block.timestamp;\r\n\r\n        WORLDDATA memory wdata = dtGetWorldData();\r\n        wdata.population += pop;\r\n        wdata.credits += inccrdt;\r\n        dtSetWorldData(wdata);\r\n\r\n        WORLDSNAPSHOT memory wss = dtValidateWorldSnapshot(day);\r\n        wss.population += pop;\r\n        wss.credits += inccrdt;\r\n        wss.lasttime = block.timestamp;\r\n        dtSetWorldSnapshot(day, wss);\r\n\r\n        CITYSNAPSHOT memory css = dtValidateCitySnapshot(msg.sender, day);\r\n        css.population += pop;\r\n        css.credits += inccrdt;\r\n        css.shopCredits += inccrdt;\r\n        css.lasttime = block.timestamp;\r\n        dtSetCitySnapshot(msg.sender, day, css);\r\n    }\r\n\r\n    function UpdateEthBalance(uint256 eth, uint256 val) private returns(bool)\r\n    {\r\n        uint256 devf;\r\n        uint256 fndf;\r\n        uint256 rnkf;\r\n\r\n        if (eth > val)\r\n        {\r\n            fndf = dtGetEthBalance(msg.sender);\r\n            require(eth - val <= fndf);\r\n            dtSetEthBalance(msg.sender, fndf - eth + val);\r\n        }\r\n\r\n        devf = eth * 17 / 100;\r\n        fndf = eth * 33 / 100;\r\n        rnkf = fndf * 70 / 100;\r\n\r\n        data.UpdateEthBalance.value(val)(eth - devf - fndf, devf, rnkf, fndf - rnkf);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////\r\n    //\r\n    function dtGetWorldData() private view returns(WORLDDATA memory wdata)\r\n    {\r\n         (wdata.ethBalance, wdata.ethDev, wdata.population, wdata.credits, wdata.starttime) = data.GetWorldData();\r\n    }\r\n\r\n    function dtSetWorldData(WORLDDATA memory wdata) private\r\n    {\r\n        data.SetWorldData(wdata.ethBalance, wdata.ethDev, wdata.population, wdata.credits, wdata.starttime);\r\n    }\r\n\r\n    function dtSetWorldSnapshot(uint256 day, WORLDSNAPSHOT memory wss) private\r\n    {\r\n        data.SetWorldSnapshot(day, true, wss.population, wss.credits, wss.lasttime);\r\n    }\r\n\r\n    function dtCreateCityData(address player, uint256 crdtsec, uint256 landcount) private returns(CITYDATA memory)\r\n    {\r\n        data.CreateCityData(player, crdtsec, landcount);\r\n        return dtGetCityData(player);\r\n    }\r\n\r\n    function dtGetCityData(address player) private view returns(CITYDATA memory cdata)\r\n    {\r\n        (cdata.credits, cdata.population, cdata.creditsPerSec, cdata.landOccupied, cdata.landUnoccupied, cdata.lasttime) = data.GetCityData(player);\r\n    }\r\n\r\n    function dtSetCityData(address player, CITYDATA memory cdata) private\r\n    {\r\n        data.SetCityData(player, cdata.credits, cdata.population, cdata.creditsPerSec, cdata.landOccupied, cdata.landUnoccupied, cdata.lasttime);\r\n    }\r\n\r\n    function dtSetCitySnapshot(address player, uint256 day, CITYSNAPSHOT memory css) private\r\n    {\r\n        data.SetCitySnapshot(player, day, true, css.population, css.credits, css.shopCredits, css.lasttime);\r\n    }\r\n\r\n    function dtGetBuildingData(address player, uint256 id) private view returns(BUILDINGDATA memory bdata)\r\n    {\r\n        (bdata.constructCount, bdata.upgradeCount, bdata.population, bdata.creditsPerSec) = data.GetBuildingData(player, id);\r\n    }\r\n\r\n    function dtSetBuildingData(address player, uint256 id, BUILDINGDATA memory bdata) private\r\n    {\r\n        data.SetBuildingData(player, id, bdata.constructCount, bdata.upgradeCount, bdata.population, bdata.creditsPerSec);\r\n    }\r\n\r\n    function dtGetEthBalance(address player) private view returns(uint256)\r\n    {\r\n        return data.GetEthBalance(player);\r\n    }\r\n\r\n    function dtSetEthBalance(address player, uint256 eth) private\r\n    {\r\n        data.SetEthBalance(player, eth);\r\n    }\r\n\r\n    function dtAddEthBalance(address player, uint256 eth) private\r\n    {\r\n        data.AddEthBalance(player, eth);\r\n    }\r\n\r\n    function dtValidateWorldSnapshot(uint256 day) private returns(WORLDSNAPSHOT memory wss)\r\n    {\r\n        uint256 ethRankFund;\r\n\r\n        (ethRankFund, wss.population, wss.credits, wss.lasttime) = data.ValidateWorldSnapshot(day);\r\n    }\r\n\r\n    function dtTestWorldSnapshot(uint256 day) private view returns(uint256 ethRankFund, WORLDSNAPSHOT memory wss)\r\n    {\r\n        (ethRankFund, wss.population, wss.credits, wss.lasttime) = data.TestWorldSnapshot(day);\r\n    }\r\n\r\n    function dtValidateCitySnapshot(address player, uint256 day) private returns(CITYSNAPSHOT memory css)\r\n    {\r\n        (css.population, css.credits, css.shopCredits, css.lasttime) = data.ValidateCitySnapshot(player, day);\r\n    }\r\n\r\n    function dtTestCitySnapshot(address player, uint256 day) private view returns(CITYSNAPSHOT memory css)\r\n    {\r\n        (css.population, css.credits, css.shopCredits, css.lasttime) = data.TestCitySnapshot(player, day);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"ConstructByCredits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"adminSetAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"GetConstructCost\",\"outputs\":[{\"name\":\"cnstcrdt\",\"type\":\"uint256\"},{\"name\":\"cnsteth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"UpgradeByCredits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"GetDemolishCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetEthBalance\",\"outputs\":[{\"name\":\"ethBal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"credits\",\"type\":\"uint256\"}],\"name\":\"TradeEthShop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"GetBuildingData\",\"outputs\":[{\"name\":\"constructCount\",\"type\":\"uint256\"},{\"name\":\"upgradeCount\",\"type\":\"uint256\"},{\"name\":\"population\",\"type\":\"uint256\"},{\"name\":\"creditsPerSec\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"SetCityName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"BuyCreditsByEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"ConstructByEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminIsAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetCityData\",\"outputs\":[{\"name\":\"cityname\",\"type\":\"bytes32\"},{\"name\":\"population\",\"type\":\"uint256\"},{\"name\":\"credits\",\"type\":\"uint256\"},{\"name\":\"creditsPerSec\",\"type\":\"uint256\"},{\"name\":\"occupied\",\"type\":\"uint256\"},{\"name\":\"unoccupied\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"BuyLandsByEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetCitySnapshot\",\"outputs\":[{\"name\":\"population\",\"type\":\"uint256\"},{\"name\":\"credits\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetWorldSnapshot\",\"outputs\":[{\"name\":\"ethFund\",\"type\":\"uint256\"},{\"name\":\"population\",\"type\":\"uint256\"},{\"name\":\"credits\",\"type\":\"uint256\"},{\"name\":\"lasttime\",\"type\":\"uint256\"},{\"name\":\"nexttime\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetEthShop\",\"outputs\":[{\"name\":\"shopEth\",\"type\":\"uint256\"},{\"name\":\"shopCredits\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StartCity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dta\",\"type\":\"address\"},{\"name\":\"cfg\",\"type\":\"address\"},{\"name\":\"rnk\",\"type\":\"address\"}],\"name\":\"adminSetConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminGetBalance\",\"outputs\":[{\"name\":\"dta_bal\",\"type\":\"uint256\"},{\"name\":\"cfg_bal\",\"type\":\"uint256\"},{\"name\":\"rnk_bal\",\"type\":\"uint256\"},{\"name\":\"cty_bal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adminAddWorldBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"GetUpgradeCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"GetCityName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"DemolishByCredits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"OnConstructed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"OnUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"OnDemolished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"OnBuyLands\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"OnBuyCredits\",\"type\":\"event\"}]","ContractName":"EtherCity","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4c8461ccaa61f47b66f3d326805394450f6071114e3aaa8796ff448235b1cdd5"}]}