{"status":"1","message":"OK","result":[{"SourceCode":"contract Ownable {\r\n  address public owner;\r\n\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract medibitICO is Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\nmapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  //Gas/GWei\r\n  uint constant public minPublicContribAmount = 1 ether;\r\n  \r\n\r\n  // The token being sold\r\n  medibitToken public token;\r\n  uint256 constant public tokenDecimals = 18;\r\n\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime; \r\n  uint256 public endTime; \r\n\r\n\r\n  // need to be enabled to allow investor to participate in the ico\r\n  bool public icoEnabled;\r\n\r\n  // address where funds are collected\r\n  address public walletOne;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  // totalSupply\r\n  uint256 public totalSupply = 50000000000 * (10 ** tokenDecimals);\r\n  uint256 constant public toekensForBTCandBonus = 12500000000 * (10 ** tokenDecimals);\r\n  uint256 constant public toekensForTeam = 5000000000 * (10 ** tokenDecimals);\r\n  uint256 constant public toekensForOthers = 22500000000 * (10 ** tokenDecimals);\r\n\r\n\r\n  //ICO tokens\r\n  //Is calcluated as: initialICOCap + preSaleCap\r\n  uint256 public icoCap;\r\n  uint256 public icoSoldTokens;\r\n  bool public icoEnded = false;\r\n\r\n  address constant public walletTwo = 0x938Ee925D9EFf6698472a19EbAc780667999857B;\r\n  address constant public walletThree = 0x09E72590206d652BD1aCDB3A8e358AeB3f21513A;\r\n\r\n  //Sale rates\r\n\r\n  uint256 constant public STANDARD_RATE = 1500000;\r\n\r\n  event Burn(address indexed from, uint256 value);\r\n\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n\r\n  function medibitICO(address _walletOne) public {\r\n    require(_walletOne != address(0));\r\n    token = createTokenContract();\r\n    \r\n    //send all dao tokens to multiwallet\r\n    uint256 tokensToWallet1 = toekensForBTCandBonus;\r\n    uint256 tokensToWallet2 = toekensForTeam;\r\n    uint256 tokensToWallet3 = toekensForOthers;\r\n    \r\n    walletOne = _walletOne;\r\n    \r\n    token.transfer(walletOne, tokensToWallet1);\r\n    token.transfer(walletTwo, tokensToWallet2);\r\n    token.transfer(walletThree, tokensToWallet3);\r\n  }\r\n\r\n\r\n  //\r\n  // Token related operations\r\n  //\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (medibitToken) {\r\n    return new medibitToken();\r\n  }\r\n\r\n\r\n  // enable token tranferability\r\n  function enableTokenTransferability() external onlyOwner {\r\n    require(token != address(0));\r\n    token.unpause();\r\n  }\r\n\r\n  // disable token tranferability\r\n  function disableTokenTransferability() external onlyOwner {\r\n    require(token != address(0));\r\n    token.pause();\r\n  }\r\n\r\n  // transfer token to owner account for burn\r\n   function transferUnsoldIcoTokens() external onlyOwner {\r\n    require(token != address(0));\r\n    uint256 unsoldTokens = icoCap.sub(icoSoldTokens);\r\n    token.transfer(walletOne, unsoldTokens);\r\n   }\r\n\r\n  //\r\n  // ICO related operations\r\n  //\r\n\r\n  // set multisign wallet\r\n  function setwalletOne(address _walletOne) external onlyOwner{\r\n    // need to be set before the ico start\r\n    require(!icoEnabled || now < startTime);\r\n    require(_walletOne != address(0));\r\n    walletOne = _walletOne;\r\n  }\r\n\r\n\r\n  // set contribution dates\r\n  function setContributionDates(uint64 _startTime, uint64 _endTime) external onlyOwner{\r\n    require(!icoEnabled);\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n  }\r\n\r\n\r\n  // enable ICO, need to be true to actually start ico\r\n  // multisign wallet need to be set, because once ico started, invested funds is transfered to this address\r\n  // once ico is enabled, following parameters can not be changed anymore:\r\n  // startTime, endTime, soldPreSaleTokens\r\n  function enableICO() external onlyOwner{\r\n    icoEnabled = true;\r\n    icoCap = totalSupply;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable whenNotPaused public {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable whenNotPaused {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n    uint256 returnWeiAmount;\r\n\r\n    // calculate token amount to be created\r\n    uint rate = getRate();\r\n    assert(rate > 0);\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    uint256 newIcoSoldTokens = icoSoldTokens.add(tokens);\r\n\r\n    if (newIcoSoldTokens > icoCap) {\r\n        newIcoSoldTokens = icoCap;\r\n        tokens = icoCap.sub(icoSoldTokens);\r\n        uint256 newWeiAmount = tokens.div(rate);\r\n        returnWeiAmount = weiAmount.sub(newWeiAmount);\r\n        weiAmount = newWeiAmount;\r\n    }\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.transfer(beneficiary, tokens);\r\n    icoSoldTokens = newIcoSoldTokens;\r\n    if (returnWeiAmount > 0){\r\n        msg.sender.transfer(returnWeiAmount);\r\n    }\r\n\r\n    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    walletOne.transfer(address(this).balance);\r\n  }\r\n\r\n\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonMinimumPurchase;\r\n    bool icoTokensAvailable = icoSoldTokens < icoCap;\r\n \r\n    nonMinimumPurchase = msg.value >= minPublicContribAmount;\r\n    \r\n\r\n    return !icoEnded && icoEnabled && withinPeriod && nonMinimumPurchase && icoTokensAvailable;\r\n  }\r\n\r\n\r\n\r\n  // end ico by owner, not really needed in normal situation\r\n  function endIco() external onlyOwner {\r\n    icoEnded = true;\r\n    // send unsold tokens to multi-sign wallet\r\n    uint256 unsoldTokens = icoCap.sub(icoSoldTokens);\r\n    token.transfer(walletOne, unsoldTokens);\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return (icoEnded || icoSoldTokens >= icoCap || now > endTime);\r\n  }\r\n\r\n\r\n  function getRate() public constant returns(uint){\r\n    require(now >= startTime);\r\n      return STANDARD_RATE;\r\n\r\n  }\r\n\r\n  // drain all eth for owner in an emergency situation\r\n  function drain() external onlyOwner {\r\n    owner.transfer(address(this).balance);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\nlibrary SafeERC20 {\r\n function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n  /**\r\n   * @dev modifier to allow actions only when the contract is not paused or\r\n   * the sender is the owner of the contract\r\n   */\r\n  modifier whenNotPausedOrOwner() {\r\n    require(msg.sender == owner || !paused);\r\n    _;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPausedOrOwner returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPausedOrOwner returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPausedOrOwner returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPausedOrOwner returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPausedOrOwner returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n\r\n}\r\n\r\ncontract medibitToken is PausableToken {\r\n  string constant public name = \"MEDIBIT\";\r\n  string constant public symbol = \"MEDIBIT\";\r\n  uint256 constant public decimals = 18;\r\n  uint256 constant TOKEN_UNIT = 10 ** uint256(decimals);\r\n  uint256 constant INITIAL_SUPPLY = 50000000000 * TOKEN_UNIT;\r\n\r\n\r\n  function medibitToken() public {\r\n    // Set untransferable by default to the token\r\n    paused = true;\r\n    // asign all tokens to the contract creator\r\n    totalSupply = INITIAL_SUPPLY;\r\n    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"medibitToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9b6ac1262f6fd15cba45ff1c7a3d573f3c3d64338ec87f958d6710f0cb2603b9"}]}