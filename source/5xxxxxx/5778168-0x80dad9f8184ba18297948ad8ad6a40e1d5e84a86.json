{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract Token {\r\n \r\n  function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n\r\n  function transfer(address to, uint256 tokens) public returns (bool success);\r\n     \r\n}\r\n\r\ncontract BancorKillerContract { \r\n\r\n  using SafeMath for uint256;\r\n\r\n  address public admin;\r\n\r\n  address public base_token;\r\n\r\n  address public traded_token;\r\n  \r\n  uint256 public base_token_seed_amount;\r\n\r\n  uint256 public traded_token_seed_amount;\r\n  \r\n  uint256 public commission_ratio;\r\n\r\n  bool public base_token_is_seeded;\r\n\r\n  bool public traded_token_is_seeded;\r\n\r\n  mapping (address => uint256) public token_balance;\r\n  \r\n  modifier onlyAdmin() {\r\n      msg.sender == admin;\r\n      _;\r\n  }\r\n\r\n  constructor(address _base_token, address _traded_token,uint256 _base_token_seed_amount, uint256 _traded_token_seed_amount, uint256 _commission_ratio) public {\r\n      \r\n    admin = tx.origin;  \r\n      \r\n    base_token = _base_token;\r\n    \r\n    traded_token = _traded_token;\r\n    \r\n    base_token_seed_amount = _base_token_seed_amount;\r\n    \r\n    traded_token_seed_amount = _traded_token_seed_amount;\r\n\r\n    commission_ratio = _commission_ratio;\r\n    \r\n  }\r\n\r\n  function transferTokensThroughProxy(address _from, address _to, uint256 _amount) private {\r\n\r\n    require(Token(traded_token).transferFrom(_from,_to,_amount));\r\n     \r\n  }\r\n  \r\n    function transferTokens(address _to, uint256 _amount) private {\r\n\r\n    require(Token(traded_token).transfer(_to,_amount));\r\n     \r\n  }\r\n\r\n  function transferETH(address _to, uint256 _amount) private {\r\n      \r\n    _to.transfer(_amount);\r\n      \r\n  }\r\n  \r\n  function deposit_token(address _token, uint256 _amount) private { \r\n\r\n    token_balance[_token] = token_balance[_token].add(_amount);\r\n\r\n    transferTokensThroughProxy(msg.sender, this, _amount);\r\n\r\n  }  \r\n\r\n  function deposit_eth() private { \r\n\r\n    token_balance[0] = token_balance[0].add(msg.value);\r\n\r\n  }  \r\n  \r\n  function withdraw_token(uint256 _amount) onlyAdmin public {\r\n      \r\n      uint256 currentBalance_ = token_balance[traded_token];\r\n      \r\n      require(currentBalance_ >= _amount);\r\n      \r\n      transferTokens(msg.sender, _amount);\r\n      \r\n  }\r\n  \r\n  function withdraw_eth(uint256 _amount) onlyAdmin public {\r\n      \r\n      uint256 currentBalance_ = token_balance[0];\r\n      \r\n      require(currentBalance_ >= _amount);\r\n      \r\n      transferETH(msg.sender, _amount);\r\n      \r\n  }\r\n\r\n  function set_traded_token_as_seeded() private {\r\n   \r\n    traded_token_is_seeded = true;\r\n \r\n  }\r\n\r\n  function set_base_token_as_seeded() private {\r\n\r\n    base_token_is_seeded = true;\r\n\r\n  }\r\n\r\n  function seed_traded_token() public {\r\n\r\n    require(!market_is_open());\r\n  \r\n    set_traded_token_as_seeded();\r\n\r\n    deposit_token(traded_token, traded_token_seed_amount); \r\n\r\n  }\r\n  \r\n  function seed_base_token() public payable {\r\n\r\n    require(!market_is_open());\r\n\r\n    require(msg.value == base_token_seed_amount);\r\n \r\n    set_base_token_as_seeded();\r\n\r\n    deposit_eth(); \r\n\r\n  }\r\n\r\n  function market_is_open() private view returns(bool) {\r\n  \r\n    return (base_token_is_seeded && traded_token_is_seeded);\r\n\r\n  }\r\n\r\n  function calculate_price(uint256 _pre_pay_in_price,uint256 _post_pay_in_price) private pure returns(uint256) {\r\n\r\n    return (_pre_pay_in_price.add(_post_pay_in_price)).div(2);\r\n\r\n  }\r\n\r\n  function get_amount_get_sell(uint256 _amount) private view returns(uint256) {\r\n   \r\n    uint256 traded_token_balance_ = token_balance[traded_token]*1 ether;\r\n    \r\n    uint256 base_token_balance_ = token_balance[base_token];    \r\n\r\n    uint256 pre_pay_in_price_ = traded_token_balance_.div(base_token_balance_);\r\n\r\n    uint256 post_pay_in_price_ = (traded_token_balance_.add(_amount)).div(base_token_balance_);\r\n   \r\n    uint256 adjusted_price_ = calculate_price(pre_pay_in_price_,post_pay_in_price_);\r\n\r\n    return (_amount.div(adjusted_price_)).div(1 ether);   \r\n      \r\n  }\r\n\r\n  function get_amount_get_buy(uint256 _amount) private view returns(uint256) {\r\n \r\n    uint256 traded_token_balance_ = token_balance[traded_token]*1 ether;\r\n    \r\n    uint256 base_token_balance_ = token_balance[base_token];    \r\n\r\n    uint256 pre_pay_in_price_ = traded_token_balance_.div(base_token_balance_);\r\n\r\n    uint256 post_pay_in_price_ = traded_token_balance_.div(base_token_balance_.add(_amount));\r\n   \r\n    uint256 adjusted_price_ = calculate_price(pre_pay_in_price_,post_pay_in_price_);\r\n\r\n    return (_amount.mul(adjusted_price_)).div(1 ether);\r\n    \r\n  }\r\n\r\n  function complete_sell_exchange(uint256 _amount_give) private {\r\n\r\n    uint256 amount_get_ = get_amount_get_sell(_amount_give);\r\n    \r\n    uint256 amount_get_minus_fee_ = (amount_get_.mul(1 ether - commission_ratio)).div(1 ether);\r\n    \r\n    uint256 admin_fee = amount_get_ - amount_get_minus_fee_;\r\n\r\n    transferTokensThroughProxy(msg.sender,this,_amount_give);\r\n\r\n    transferETH(msg.sender,amount_get_minus_fee_);  \r\n    \r\n    transferETH(admin, admin_fee);      \r\n      \r\n  }\r\n  \r\n  function complete_buy_exchange() private {\r\n    \r\n    uint256 amount_give_ = msg.value;\r\n\r\n    uint256 amount_get_ = get_amount_get_buy(amount_give_);\r\n    \r\n    uint256 amount_get_minus_fee_ = (amount_get_.mul(1 ether - commission_ratio)).div(1 ether);\r\n\r\n    uint256 admin_fee = amount_get_ - amount_get_minus_fee_;\r\n\r\n    transferTokens(msg.sender, amount_get_minus_fee_);\r\n    \r\n    transferETH(admin, admin_fee);\r\n    \r\n  }\r\n  \r\n  function sell_tokens(uint256 _amount_give) public {\r\n\r\n    require(market_is_open());\r\n\r\n    complete_sell_exchange(_amount_give);\r\n\r\n  }\r\n  \r\n  function buy_tokens() private {\r\n\r\n    require(market_is_open());\r\n\r\n    complete_buy_exchange();\r\n\r\n  }\r\n\r\n  function() public payable {\r\n\r\n    buy_tokens();\r\n\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"token_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw_token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"base_token_seed_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw_eth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seed_base_token\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"traded_token_is_seeded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"base_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount_give\",\"type\":\"uint256\"}],\"name\":\"sell_tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commission_ratio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"traded_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"traded_token_seed_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seed_traded_token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"base_token_is_seeded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_base_token\",\"type\":\"address\"},{\"name\":\"_traded_token\",\"type\":\"address\"},{\"name\":\"_base_token_seed_amount\",\"type\":\"uint256\"},{\"name\":\"_traded_token_seed_amount\",\"type\":\"uint256\"},{\"name\":\"_commission_ratio\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BancorKillerContract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e071d2966aa7d8decb1005885ba1977d6038a65000000000000000000000000000000000000000000000000002ac6295e4e5c0000000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000000000000000000000000000016345785d8a0000","Library":"","SwarmSource":"bzzr://7731098358bc6df60629c7126fdb3ab60058f6093b1cfa399a56e173b0332cec"}]}