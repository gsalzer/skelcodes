{"status":"1","message":"OK","result":[{"SourceCode":"// Project: Proof of Toss - https://toss.pro\r\n// v12, 2018-04-23\r\n// Authors: Ivan Fedorov and Dmitry Borodin\r\n// Copying in whole or in part is prohibited.\r\n\r\npragma solidity ^0.4.21;\r\n\r\n// (A1)\r\n// The main contract for the sale and management of rounds.\r\n// 0000000000000000000000000000000000000000000000000000000000000000\r\ncontract Crowdsale{\r\n\r\n    uint256 constant USER_UNPAUSE_TOKEN_TIMEOUT =  60 days;\r\n    uint256 constant FORCED_REFUND_TIMEOUT1     = 400 days;\r\n    uint256 constant FORCED_REFUND_TIMEOUT2     = 600 days;\r\n    uint256 constant ROUND_PROLONGATE           =   0 days;\r\n    uint256 constant BURN_TOKENS_TIME           =  90 days;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    enum TokenSaleType {round1, round2}\r\n    TokenSaleType public TokenSale = TokenSaleType.round2;\r\n\r\n    //              0             1         2        3        4        5      6       7        8     9\r\n    enum Roles {beneficiary, accountant, manager, observer, bounty, company, team, founders, fund, fees}\r\n\r\n    Creator public creator;\r\n    bool creator2;\r\n    bool isBegin=false;\r\n    Token public token;\r\n    RefundVault public vault;\r\n    AllocationTOSS public allocation;\r\n\r\n    bool public isFinalized;\r\n    bool public isInitialized;\r\n    bool public isPausedCrowdsale;\r\n    bool public chargeBonuses;\r\n    bool public canFirstMint=true;\r\n\r\n    // Initially, all next 7+ roles/wallets are given to the Manager. The Manager is an employee of the company\r\n    // with knowledge of IT, who publishes the contract and sets it up. However, money and tokens require\r\n    // a Beneficiary and other roles (Accountant, Team, etc.). The Manager will not have the right\r\n    // to receive them. To enable this, the Manager must either enter specific wallets here, or perform\r\n    // this via method changeWallet. In the finalization methods it is written which wallet and\r\n    // what percentage of tokens are received.\r\n    address[10] public wallets = [\r\n\r\n        // Beneficiary\r\n        // Receives all the money (when finalizing Round1 & Round2)\r\n        0xAa951F7c52055B89d3F281c73d557275070cBBfb,\r\n\r\n        // Accountant\r\n        // Receives all the tokens for non-ETH investors (when finalizing Round1 & Round2)\r\n        0xD29f0aE1621F4Be48C4DF438038E38af546DA498,\r\n\r\n        // Manager\r\n        // All rights except the rights to receive tokens or money. Has the right to change any other\r\n        // wallets (Beneficiary, Accountant, ...), but only if the round has not started. Once the\r\n        // round is initialized, the Manager has lost all rights to change the wallets.\r\n        // If the TokenSale is conducted by one person, then nothing needs to be changed. Permit all 7 roles\r\n        // point to a single wallet.\r\n        msg.sender,\r\n\r\n        // Observer\r\n        // Has only the right to call paymentsInOtherCurrency (please read the document)\r\n        0x8a91aC199440Da0B45B2E278f3fE616b1bCcC494,\r\n\r\n        // Bounty - 7% tokens\r\n        0xd7AC0393e2B29D8aC6221CF69c27171aba6278c4,\r\n\r\n        // Company, White list 1%\r\n        0x765f60E314766Bc25eb2a9F66991Fe867D42A449,\r\n\r\n        // Team, 6%, freeze 1+1 year\r\n        0xF9f0c53c07803a2670a354F3de88482393ABdBac,\r\n\r\n        // Founders, 10% freeze 1+1 year\r\n        0x61628D884b5F137c3D3e0b04b90DaE4402f32510,\r\n\r\n        // Fund, 6%\r\n        0xd833899Ea1b84E980daA13553CE13D1512bF0774,\r\n\r\n        // Fees, 7% money\r\n        0xEB29e654AFF7658394C9d413dDC66711ADD44F59\r\n\r\n    ];\r\n\r\n\r\n\r\n    struct Bonus {\r\n        uint256 value;\r\n        uint256 procent;\r\n        uint256 freezeTime;\r\n    }\r\n\r\n    struct Profit {\r\n        uint256 percent;\r\n        uint256 duration;\r\n    }\r\n\r\n    struct Freezed {\r\n        uint256 value;\r\n        uint256 dateTo;\r\n    }\r\n\r\n    Bonus[] public bonuses;\r\n    Profit[] public profits;\r\n\r\n\r\n    uint256 public startTime= 1524560400;\r\n    uint256 public endTime  = 1529830799;\r\n    uint256 public renewal;\r\n\r\n    // How many tokens (excluding the bonus) are transferred to the investor in exchange for 1 ETH\r\n    // **QUINTILLIONS** 10^18 for human, *10**18 for Solidity, 1e18 for MyEtherWallet (MEW).\r\n    // Example: if 1ETH = 40.5 Token ==> use 40500 finney\r\n    uint256 public rate = 10000 ether;\r\n\r\n    // ETH/USD rate in US$\r\n    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: ETH/USD=$1000 ==> use 1000*10**18 (Solidity) or 1000 ether or 1000e18 (MEW)\r\n    uint256 public exchange  = 700 ether; // not in use\r\n\r\n    // If the round does not attain this value before the closing date, the round is recognized as a\r\n    // failure and investors take the money back (the founders will not interfere in any way).\r\n    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: softcap=15ETH ==> use 15*10**18 (Solidity) or 15e18 (MEW)\r\n    uint256 public softCap = 8500 ether;\r\n\r\n    // The maximum possible amount of income\r\n    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: hardcap=123.45ETH ==> use 123450*10**15 (Solidity) or 12345e15 (MEW)\r\n    uint256 public hardCap = 71500 ether;\r\n\r\n    // If the last payment is slightly higher than the hardcap, then the usual contracts do\r\n    // not accept it, because it goes beyond the hardcap. However it is more reasonable to accept the\r\n    // last payment, very slightly raising the hardcap. The value indicates by how many ETH the\r\n    // last payment can exceed the hardcap to allow it to be paid. Immediately after this payment, the\r\n    // round closes. The funders should write here a small number, not more than 1% of the CAP.\r\n    // Can be equal to zero, to cancel.\r\n    // **QUINTILLIONS** 10^18 / *10**18 / 1e18\r\n    uint256 public overLimit = 20 ether;\r\n\r\n    // The minimum possible payment from an investor in ETH. Payments below this value will be rejected.\r\n    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: minPay=0.1ETH ==> use 100*10**15 (Solidity) or 100e15 (MEW)\r\n    uint256 public minPay = 71 finney;\r\n\r\n    uint256 public maxAllProfit = 30;\r\n\r\n    uint256 public ethWeiRaised;\r\n    uint256 public nonEthWeiRaised;\r\n    uint256 public weiRound1;\r\n    uint256 public tokenReserved;\r\n\r\n    uint256 public totalSaledToken;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    event Finalized();\r\n    event Initialized();\r\n\r\n    function Crowdsale(Creator _creator) public\r\n    {\r\n        creator2=true;\r\n        creator=_creator;\r\n    }\r\n\r\n    function onlyAdmin(bool forObserver) internal view {\r\n        require(wallets[uint8(Roles.manager)] == msg.sender || wallets[uint8(Roles.beneficiary)] == msg.sender ||\r\n            forObserver==true && wallets[uint8(Roles.observer)] == msg.sender);\r\n    }\r\n\r\n    // Setting of basic parameters, analog of class constructor\r\n    // @ Do I have to use the function      see your scenario\r\n    // @ When it is possible to call        before Round 1/2\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n    function begin() internal\r\n    {\r\n        if (isBegin) return;\r\n        isBegin=true;\r\n\r\n        token = creator.createToken();\r\n        if (creator2) {\r\n            vault = creator.createRefund();\r\n        }\r\n\r\n        token.setUnpausedWallet(wallets[uint8(Roles.accountant)], true);\r\n        token.setUnpausedWallet(wallets[uint8(Roles.manager)], true);\r\n        token.setUnpausedWallet(wallets[uint8(Roles.bounty)], true);\r\n        token.setUnpausedWallet(wallets[uint8(Roles.company)], true);\r\n        token.setUnpausedWallet(wallets[uint8(Roles.observer)], true);\r\n\r\n        bonuses.push(Bonus(71 ether, 30, 30*5 days));\r\n\r\n        profits.push(Profit(15,1 days));\r\n        profits.push(Profit(10,2 days));\r\n        profits.push(Profit(5, 4 days));\r\n\r\n    }\r\n\r\n\r\n\r\n    // Issue of tokens for the zero round, it is usually called: private pre-sale (Round 0)\r\n    // @ Do I have to use the function      may be\r\n    // @ When it is possible to call        before Round 1/2\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n    function firstMintRound0(uint256 _amount) public {\r\n        onlyAdmin(false);\r\n        require(canFirstMint);\r\n        begin();\r\n        token.mint(wallets[uint8(Roles.accountant)],_amount);\r\n    }\r\n\r\n    // info\r\n    function totalSupply() external view returns (uint256){\r\n        return token.totalSupply();\r\n    }\r\n\r\n    // Returns the name of the current round in plain text. Constant.\r\n    function getTokenSaleType() external view returns(string){\r\n        return (TokenSale == TokenSaleType.round1)?'round1':'round2';\r\n    }\r\n\r\n    // Transfers the funds of the investor to the contract of return of funds. Internal.\r\n    function forwardFunds() internal {\r\n        if(address(vault) != 0x0){\r\n            vault.deposit.value(msg.value)(msg.sender);\r\n        }else {\r\n            if(address(this).balance > 0){\r\n                wallets[uint8(Roles.beneficiary)].transfer(address(this).balance);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // Check for the possibility of buying tokens. Inside. Constant.\r\n    function validPurchase() internal view returns (bool) {\r\n\r\n        // The round started and did not end\r\n        bool withinPeriod = (now > startTime && now < endTime.add(renewal));\r\n\r\n        // Rate is greater than or equal to the minimum\r\n        bool nonZeroPurchase = msg.value >= minPay;\r\n\r\n        // hardCap is not reached, and in the event of a transaction, it will not be exceeded by more than OverLimit\r\n        bool withinCap = msg.value <= hardCap.sub(weiRaised()).add(overLimit);\r\n\r\n        // round is initialized and no \"Pause of trading\" is set\r\n        return withinPeriod && nonZeroPurchase && withinCap && isInitialized && !isPausedCrowdsale;\r\n    }\r\n\r\n    // Check for the ability to finalize the round. Constant.\r\n    function hasEnded() public view returns (bool) {\r\n\r\n        bool timeReached = now > endTime.add(renewal);\r\n\r\n        bool capReached = weiRaised() >= hardCap;\r\n\r\n        return (timeReached || capReached) && isInitialized;\r\n    }\r\n\r\n    // Finalize. Only available to the Manager and the Beneficiary. If the round failed, then\r\n    // anyone can call the finalization to unlock the return of funds to investors\r\n    // You must call a function to finalize each round (after the Round1 & after the Round2)\r\n    // @ Do I have to use the function      yes\r\n    // @ When it is possible to call        after end of Round1 & Round2\r\n    // @ When it is launched automatically  no\r\n    // @ Who can call the function          admins or anybody (if round is failed)\r\n    function finalize() public {\r\n\r\n        require(wallets[uint8(Roles.manager)] == msg.sender || wallets[uint8(Roles.beneficiary)] == msg.sender || !goalReached());\r\n        require(!isFinalized);\r\n        require(hasEnded() || ((wallets[uint8(Roles.manager)] == msg.sender || wallets[uint8(Roles.beneficiary)] == msg.sender) && goalReached()));\r\n\r\n        isFinalized = true;\r\n        finalization();\r\n        emit Finalized();\r\n    }\r\n\r\n    // The logic of finalization. Internal\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        -\r\n    // @ When it is launched automatically  after end of round\r\n    // @ Who can call the function          -\r\n    function finalization() internal {\r\n\r\n        //uint256 feesValue;\r\n        // If the goal of the achievement\r\n        if (goalReached()) {\r\n\r\n            if(address(vault) != 0x0){\r\n                // Send ether to Beneficiary\r\n                vault.close(wallets[uint8(Roles.beneficiary)], wallets[uint8(Roles.fees)], ethWeiRaised.mul(7).div(100)); //7% for fees\r\n            }\r\n\r\n            // if there is anything to give\r\n            if (tokenReserved > 0) {\r\n\r\n                token.mint(wallets[uint8(Roles.accountant)],tokenReserved);\r\n\r\n                // Reset the counter\r\n                tokenReserved = 0;\r\n            }\r\n\r\n            // If the finalization is Round 1\r\n            if (TokenSale == TokenSaleType.round1) {\r\n\r\n                // Reset settings\r\n                isInitialized = false;\r\n                isFinalized = false;\r\n\r\n                // Switch to the second round (to Round2)\r\n                TokenSale = TokenSaleType.round2;\r\n\r\n                // Reset the collection counter\r\n                weiRound1 = weiRaised();\r\n                ethWeiRaised = 0;\r\n                nonEthWeiRaised = 0;\r\n\r\n\r\n\r\n            }\r\n            else // If the second round is finalized\r\n            {\r\n\r\n                // Permission to collect tokens to those who can pick them up\r\n                chargeBonuses = true;\r\n\r\n                totalSaledToken = token.totalSupply();\r\n\r\n            }\r\n\r\n        }\r\n        else if (address(vault) != 0x0) // If they failed round\r\n        {\r\n            // Allow investors to withdraw their funds\r\n\r\n            vault.enableRefunds();\r\n        }\r\n    }\r\n\r\n    // The Manager freezes the tokens for the Team.\r\n    // You must call a function to finalize Round 2 (only after the Round2)\r\n    // @ Do I have to use the function      yes\r\n    // @ When it is possible to call        Round2\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n    function finalize2() public {\r\n\r\n        onlyAdmin(false);\r\n        require(chargeBonuses);\r\n        chargeBonuses = false;\r\n\r\n        allocation = creator.createAllocation(token, now + 1 years /* stage N1 */, now + 2 years /* stage N2 */);\r\n        token.setUnpausedWallet(allocation, true);\r\n\r\n        // Team = 6%, Founders = 10%, Fund = 6%    TOTAL = 22%\r\n        allocation.addShare(wallets[uint8(Roles.team)],       6,  50); // only 50% - first year, stage N1  (and +50 for stage N2)\r\n        allocation.addShare(wallets[uint8(Roles.founders)],  10,  50); // only 50% - first year, stage N1  (and +50 for stage N2)\r\n        allocation.addShare(wallets[uint8(Roles.fund)],       6, 100); // 100% - first year\r\n\r\n        // 22% - tokens to freeze contract (Team+Founders+Fund)\r\n        token.mint(allocation, totalSaledToken.mul(22).div(70));\r\n\r\n        // 7% - tokens to Bounty wallet\r\n        token.mint(wallets[uint8(Roles.bounty)], totalSaledToken.mul(7).div(70));\r\n\r\n        // 1% - tokens to Company (White List) wallet\r\n        token.mint(wallets[uint8(Roles.company)], totalSaledToken.mul(1).div(70));\r\n\r\n    }\r\n\r\n\r\n\r\n    // Initializing the round. Available to the manager. After calling the function,\r\n    // the Manager loses all rights: Manager can not change the settings (setup), change\r\n    // wallets, prevent the beginning of the round, etc. You must call a function after setup\r\n    // for the initial round (before the Round1 and before the Round2)\r\n    // @ Do I have to use the function      yes\r\n    // @ When it is possible to call        before each round\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n    function initialize() public {\r\n\r\n        onlyAdmin(false);\r\n        // If not yet initialized\r\n        require(!isInitialized);\r\n        begin();\r\n\r\n\r\n        // And the specified start time has not yet come\r\n        // If initialization return an error, check the start date!\r\n        require(now <= startTime);\r\n\r\n        initialization();\r\n\r\n        emit Initialized();\r\n\r\n        isInitialized = true;\r\n        renewal = 0;\r\n        canFirstMint = false;\r\n    }\r\n\r\n    function initialization() internal {\r\n        if (address(vault) != 0x0 && vault.state() != RefundVault.State.Active){\r\n            vault.restart();\r\n        }\r\n    }\r\n\r\n    // At the request of the investor, we raise the funds (if the round has failed because of the hardcap)\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        if round is failed (softcap not reached)\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          all investors\r\n    function claimRefund() external {\r\n        require(address(vault) != 0x0);\r\n        vault.refund(msg.sender);\r\n    }\r\n\r\n    // We check whether we collected the necessary minimum funds. Constant.\r\n    function goalReached() public view returns (bool) {\r\n        return weiRaised() >= softCap;\r\n    }\r\n\r\n\r\n    // Customize. The arguments are described in the constructor above.\r\n    // @ Do I have to use the function      yes\r\n    // @ When it is possible to call        before each rond\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n    function setup(uint256 _startTime, uint256 _endTime, uint256 _softCap, uint256 _hardCap,\r\n        uint256 _rate, uint256 _exchange,\r\n        uint256 _maxAllProfit, uint256 _overLimit, uint256 _minPay,\r\n        uint256[] _durationTB , uint256[] _percentTB, uint256[] _valueVB, uint256[] _percentVB, uint256[] _freezeTimeVB) public\r\n    {\r\n\r\n        onlyAdmin(false);\r\n        require(!isInitialized);\r\n\r\n        begin();\r\n\r\n        // Date and time are correct\r\n        require(now <= _startTime);\r\n        require(_startTime < _endTime);\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n\r\n        // The parameters are correct\r\n        require(_softCap <= _hardCap);\r\n        softCap = _softCap;\r\n        hardCap = _hardCap;\r\n\r\n        require(_rate > 0);\r\n        rate = _rate;\r\n\r\n        overLimit = _overLimit;\r\n        minPay = _minPay;\r\n        exchange = _exchange;\r\n        maxAllProfit = _maxAllProfit;\r\n\r\n        require(_valueVB.length == _percentVB.length && _valueVB.length == _freezeTimeVB.length);\r\n        bonuses.length = _valueVB.length;\r\n        for(uint256 i = 0; i < _valueVB.length; i++){\r\n            bonuses[i] = Bonus(_valueVB[i],_percentVB[i],_freezeTimeVB[i]);\r\n        }\r\n\r\n        require(_percentTB.length == _durationTB.length);\r\n        profits.length = _percentTB.length;\r\n        for( i = 0; i < _percentTB.length; i++){\r\n            profits[i] = Profit(_percentTB[i],_durationTB[i]);\r\n        }\r\n\r\n    }\r\n\r\n    // Collected funds for the current round. Constant.\r\n    function weiRaised() public constant returns(uint256){\r\n        return ethWeiRaised.add(nonEthWeiRaised);\r\n    }\r\n\r\n    // Returns the amount of fees for both phases. Constant.\r\n    function weiTotalRaised() external constant returns(uint256){\r\n        return weiRound1.add(weiRaised());\r\n    }\r\n\r\n    // Returns the percentage of the bonus on the current date. Constant.\r\n    function getProfitPercent() public constant returns (uint256){\r\n        return getProfitPercentForData(now);\r\n    }\r\n\r\n    // Returns the percentage of the bonus on the given date. Constant.\r\n    function getProfitPercentForData(uint256 _timeNow) public constant returns (uint256){\r\n        uint256 allDuration;\r\n        for(uint8 i = 0; i < profits.length; i++){\r\n            allDuration = allDuration.add(profits[i].duration);\r\n            if(_timeNow < startTime.add(allDuration)){\r\n                return profits[i].percent;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getBonuses(uint256 _value) public constant returns (uint256,uint256,uint256){\r\n        if(bonuses.length == 0 || bonuses[0].value > _value){\r\n            return (0,0,0);\r\n        }\r\n        uint16 i = 1;\r\n        for(i; i < bonuses.length; i++){\r\n            if(bonuses[i].value > _value){\r\n                break;\r\n            }\r\n        }\r\n        return (bonuses[i-1].value,bonuses[i-1].procent,bonuses[i-1].freezeTime);\r\n    }\r\n\r\n    // Remove the \"Pause of exchange\". Available to the manager at any time. If the\r\n    // manager refuses to remove the pause, then 30-120 days after the successful\r\n    // completion of the TokenSale, anyone can remove a pause and allow the exchange to continue.\r\n    // The manager does not interfere and will not be able to delay the term.\r\n    // He can only cancel the pause before the appointed time.\r\n    // ***CHECK***SCENARIO***\r\n    // @ Do I have to use the function      YES YES YES\r\n    // @ When it is possible to call        after end of ICO (or any time - not necessary)\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins or anybody\r\n    function tokenUnpause() external {\r\n        require(wallets[uint8(Roles.manager)] == msg.sender\r\n            || (now > endTime.add(renewal).add(USER_UNPAUSE_TOKEN_TIMEOUT) && TokenSale == TokenSaleType.round2 && isFinalized && goalReached()));\r\n        token.setPause(false);\r\n    }\r\n\r\n    // Enable the \"Pause of exchange\". Available to the manager until the TokenSale is completed.\r\n    // The manager cannot turn on the pause, for example, 3 years after the end of the TokenSale.\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        while Round2 not ended\r\n    // @ When it is launched automatically  before Round0\r\n    // @ Who can call the function          admins\r\n    function tokenPause() public {\r\n        onlyAdmin(false);\r\n        require(!isFinalized);\r\n        token.setPause(true);\r\n    }\r\n\r\n    // Pause of sale. Available to the manager.\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        during active rounds\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n    function setCrowdsalePause(bool mode) public {\r\n        onlyAdmin(false);\r\n        isPausedCrowdsale = mode;\r\n    }\r\n\r\n    // For example - After 5 years of the project's existence, all of us suddenly decided collectively\r\n    // (company + investors) that it would be more profitable for everyone to switch to another smart\r\n    // contract responsible for tokens. The company then prepares a new token, investors\r\n    // disassemble, study, discuss, etc. After a general agreement, the manager allows any investor:\r\n    //      - to burn the tokens of the previous contract\r\n    //      - generate new tokens for a new contract\r\n    // It is understood that after a general solution through this function all investors\r\n    // will collectively (and voluntarily) move to a new token.\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        only after ICO!\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n    function moveTokens(address _migrationAgent) public {\r\n        onlyAdmin(false);\r\n        token.setMigrationAgent(_migrationAgent);\r\n    }\r\n\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        only after ICO!\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n    function migrateAll(address[] _holders) public {\r\n        onlyAdmin(false);\r\n        token.migrateAll(_holders);\r\n    }\r\n\r\n    // Change the address for the specified role.\r\n    // Available to any wallet owner except the observer.\r\n    // Available to the manager until the round is initialized.\r\n    // The Observer's wallet or his own manager can change at any time.\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        depend...\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          staff (all 7+ roles)\r\n    function changeWallet(Roles _role, address _wallet) external\r\n    {\r\n        require(\r\n            (msg.sender == wallets[uint8(_role)] && _role != Roles.observer)\r\n            ||\r\n            (msg.sender == wallets[uint8(Roles.manager)] && (!isInitialized || _role == Roles.observer) && _role != Roles.fees )\r\n        );\r\n\r\n        wallets[uint8(_role)] = _wallet;\r\n    }\r\n\r\n\r\n    // The beneficiary at any time can take rights in all roles and prescribe his wallet in all the\r\n    // rollers. Thus, he will become the recipient of tokens for the role of Accountant,\r\n    // Team, etc. Works at any time.\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        any time\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          only Beneficiary\r\n    function resetAllWallets() external{\r\n        address _beneficiary = wallets[uint8(Roles.beneficiary)];\r\n        require(msg.sender == _beneficiary);\r\n        for(uint8 i = 0; i < wallets.length; i++){\r\n            if(uint8(Roles.fees) == i || uint8(Roles.team) == i)\r\n                continue;\r\n\r\n            wallets[i] = _beneficiary;\r\n        }\r\n        token.setUnpausedWallet(_beneficiary, true);\r\n    }\r\n\r\n\r\n    // Burn the investor tokens, if provided by the ICO scenario. Limited time available - BURN_TOKENS_TIME\r\n    // ***CHECK***SCENARIO***\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        any time\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admin\r\n    function massBurnTokens(address[] _beneficiary, uint256[] _value) external {\r\n        onlyAdmin(false);\r\n        require(endTime.add(renewal).add(BURN_TOKENS_TIME) > now);\r\n        require(_beneficiary.length == _value.length);\r\n        for(uint16 i; i<_beneficiary.length; i++) {\r\n            token.burn(_beneficiary[i],_value[i]);\r\n        }\r\n    }\r\n\r\n    // Extend the round time, if provided by the script. Extend the round only for\r\n    // a limited number of days - ROUND_PROLONGATE\r\n    // ***CHECK***SCENARIO***\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        during active round\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n    function prolong(uint256 _duration) external {\r\n        onlyAdmin(false);\r\n        require(now > startTime && now < endTime.add(renewal) && isInitialized);\r\n        renewal = renewal.add(_duration);\r\n        require(renewal <= ROUND_PROLONGATE);\r\n\r\n    }\r\n    // If a little more than a year has elapsed (Round2 start date + 400 days), a smart contract\r\n    // will allow you to send all the money to the Beneficiary, if any money is present. This is\r\n    // possible if you mistakenly launch the Round2 for 30 years (not 30 days), investors will transfer\r\n    // money there and you will not be able to pick them up within a reasonable time. It is also\r\n    // possible that in our checked script someone will make unforeseen mistakes, spoiling the\r\n    // finalization. Without finalization, money cannot be returned. This is a rescue option to\r\n    // get around this problem, but available only after a year (400 days).\r\n\r\n    // Another reason - the TokenSale was a failure, but not all ETH investors took their money during the year after.\r\n    // Some investors may have lost a wallet key, for example.\r\n\r\n    // The method works equally with the Round1 and Round2. When the Round1 starts, the time for unlocking\r\n    // the distructVault begins. If the TokenSale is then started, then the term starts anew from the first day of the TokenSale.\r\n\r\n    // Next, act independently, in accordance with obligations to investors.\r\n\r\n    // Within 400 days (FORCED_REFUND_TIMEOUT1) of the start of the Round, if it fails only investors can take money. After\r\n    // the deadline this can also include the company as well as investors, depending on who is the first to use the method.\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        -\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          beneficiary & manager\r\n    function distructVault() public {\r\n        require(address(vault) != 0x0);\r\n        if (wallets[uint8(Roles.beneficiary)] == msg.sender && (now > startTime.add(FORCED_REFUND_TIMEOUT1))) {\r\n            vault.del(wallets[uint8(Roles.beneficiary)]);\r\n        }\r\n        if (wallets[uint8(Roles.manager)] == msg.sender && (now > startTime.add(FORCED_REFUND_TIMEOUT2))) {\r\n            vault.del(wallets[uint8(Roles.manager)]);\r\n        }\r\n    }\r\n\r\n\r\n    // We accept payments other than Ethereum (ETH) and other currencies, for example, Bitcoin (BTC).\r\n    // Perhaps other types of cryptocurrency - see the original terms in the white paper and on the TokenSale website.\r\n\r\n    // We release tokens on Ethereum. During the Round1 and Round2 with a smart contract, you directly transfer\r\n    // the tokens there and immediately, with the same transaction, receive tokens in your wallet.\r\n\r\n    // When paying in any other currency, for example in BTC, we accept your money via one common wallet.\r\n    // Our manager fixes the amount received for the bitcoin wallet and calls the method of the smart\r\n    // contract paymentsInOtherCurrency to inform him how much foreign currency has been received - on a daily basis.\r\n    // The smart contract pins the number of accepted ETH directly and the number of BTC. Smart contract\r\n    // monitors softcap and hardcap, so as not to go beyond this framework.\r\n\r\n    // In theory, it is possible that when approaching hardcap, we will receive a transfer (one or several\r\n    // transfers) to the wallet of BTC, that together with previously received money will exceed the hardcap in total.\r\n    // In this case, we will refund all the amounts above, in order not to exceed the hardcap.\r\n\r\n    // Collection of money in BTC will be carried out via one common wallet. The wallet's address will be published\r\n    // everywhere (in a white paper, on the TokenSale website, on Telegram, on Bitcointalk, in this code, etc.)\r\n    // Anyone interested can check that the administrator of the smart contract writes down exactly the amount\r\n    // in ETH (in equivalent for BTC) there. In theory, the ability to bypass a smart contract to accept money in\r\n    // BTC and not register them in ETH creates a possibility for manipulation by the company. Thanks to\r\n    // paymentsInOtherCurrency however, this threat is leveled.\r\n\r\n    // Any user can check the amounts in BTC and the variable of the smart contract that accounts for this\r\n    // (paymentsInOtherCurrency method). Any user can easily check the incoming transactions in a smart contract\r\n    // on a daily basis. Any hypothetical tricks on the part of the company can be exposed and panic during the TokenSale,\r\n    // simply pointing out the incompatibility of paymentsInOtherCurrency (ie, the amount of ETH + BTC collection)\r\n    // and the actual transactions in BTC. The company strictly adheres to the described principles of openness.\r\n\r\n    // The company administrator is required to synchronize paymentsInOtherCurrency every working day (but you\r\n    // cannot synchronize if there are no new BTC payments). In the case of unforeseen problems, such as\r\n    // brakes on the Ethereum network, this operation may be difficult. You should only worry if the\r\n    // administrator does not synchronize the amount for more than 96 hours in a row, and the BTC wallet\r\n    // receives significant amounts.\r\n\r\n    // This scenario ensures that for the sum of all fees in all currencies this value does not exceed hardcap.\r\n\r\n    // Addresses for other currencies:\r\n    // BTC Address: 3HiqVz6wFhSHZ3QUbX9C8GUPSjdDuksPJA\r\n\r\n    // ** QUINTILLIONS ** 10^18 / 1**18 / 1e18\r\n\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        during active rounds\r\n    // @ When it is launched automatically  every day\r\n    // @ Who can call the function          admins + observer\r\n    function paymentsInOtherCurrency(uint256 _token, uint256 _value) public {\r\n        //require(wallets[uint8(Roles.observer)] == msg.sender || wallets[uint8(Roles.manager)] == msg.sender);\r\n        onlyAdmin(true);\r\n        bool withinPeriod = (now >= startTime && now <= endTime.add(renewal));\r\n\r\n        bool withinCap = _value.add(ethWeiRaised) <= hardCap.add(overLimit);\r\n        require(withinPeriod && withinCap && isInitialized);\r\n\r\n        nonEthWeiRaised = _value;\r\n        tokenReserved = _token;\r\n\r\n    }\r\n\r\n    function lokedMint(address _beneficiary, uint256 _value, uint256 _freezeTime) internal {\r\n        if(_freezeTime > 0){\r\n\r\n            uint256 totalBloked = token.freezedTokenOf(_beneficiary).add(_value);\r\n            uint256 pastDateUnfreeze = token.defrostDate(_beneficiary);\r\n            uint256 newDateUnfreeze = _freezeTime.add(now);\r\n            newDateUnfreeze = (pastDateUnfreeze > newDateUnfreeze ) ? pastDateUnfreeze : newDateUnfreeze;\r\n\r\n            token.freezeTokens(_beneficiary,totalBloked,newDateUnfreeze);\r\n        }\r\n        token.mint(_beneficiary,_value);\r\n    }\r\n\r\n\r\n    // The function for obtaining smart contract funds in ETH. If all the checks are true, the token is\r\n    // transferred to the buyer, taking into account the current bonus.\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != 0x0);\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        uint256 ProfitProcent = getProfitPercent();\r\n\r\n        uint256 value;\r\n        uint256 percent;\r\n        uint256 freezeTime;\r\n\r\n        (value,\r\n        percent,\r\n        freezeTime) = getBonuses(weiAmount);\r\n\r\n        Bonus memory curBonus = Bonus(value,percent,freezeTime);\r\n\r\n        uint256 bonus = curBonus.procent;\r\n\r\n        // --------------------------------------------------------------------------------------------\r\n        // *** Scenario 1 - select max from all bonuses + check maxAllProfit\r\n        uint256 totalProfit = (ProfitProcent < bonus) ? bonus : ProfitProcent;\r\n\r\n        // --------------------------------------------------------------------------------------------\r\n        totalProfit = (totalProfit > maxAllProfit) ? maxAllProfit : totalProfit;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate).mul(totalProfit.add(100)).div(100 ether);\r\n\r\n        // update state\r\n        ethWeiRaised = ethWeiRaised.add(weiAmount);\r\n\r\n        lokedMint(beneficiary, tokens, curBonus.freezeTime);\r\n\r\n        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        forwardFunds();\r\n    }\r\n\r\n    // buyTokens alias\r\n    function () public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * This code is taken from openZeppelin without any changes.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n// (A3)\r\n// Contract for freezing of investors' funds. Hence, investors will be able to withdraw money if the\r\n// round does not attain the softcap. From here the wallet of the beneficiary will receive all the\r\n// money (namely, the beneficiary, not the manager's wallet).\r\ncontract RefundVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum State { Active, Refunding, Closed }\r\n\r\n    uint8 round;\r\n\r\n    mapping (uint8 => mapping (address => uint256)) public deposited;\r\n\r\n    State public state;\r\n\r\n    event Closed();\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n    event Deposited(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    function RefundVault() public {\r\n        state = State.Active;\r\n    }\r\n\r\n    // Depositing funds on behalf of an TokenSale investor. Available to the owner of the contract (Crowdsale Contract).\r\n    function deposit(address investor) onlyOwner public payable {\r\n        require(state == State.Active);\r\n        deposited[round][investor] = deposited[round][investor].add(msg.value);\r\n        emit Deposited(investor,msg.value);\r\n    }\r\n\r\n    // Move the collected funds to a specified address. Available to the owner of the contract.\r\n    function close(address _wallet1, address _wallet2, uint256 _feesValue) onlyOwner public {\r\n        require(state == State.Active);\r\n        require(_wallet1 != 0x0);\r\n        state = State.Closed;\r\n        emit Closed();\r\n        if(_wallet2 != 0x0)\r\n            _wallet2.transfer(_feesValue);\r\n        _wallet1.transfer(address(this).balance);\r\n    }\r\n\r\n    // Allow refund to investors. Available to the owner of the contract.\r\n    function enableRefunds() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        emit RefundsEnabled();\r\n    }\r\n\r\n    // Return the funds to a specified investor. In case of failure of the round, the investor\r\n    // should call this method of this contract (RefundVault) or call the method claimRefund of Crowdsale\r\n    // contract. This function should be called either by the investor himself, or the company\r\n    // (or anyone) can call this function in the loop to return funds to all investors en masse.\r\n    function refund(address investor) public {\r\n        require(state == State.Refunding);\r\n        uint256 depositedValue = deposited[round][investor];\r\n        require(depositedValue > 0);\r\n        deposited[round][investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        emit Refunded(investor, depositedValue);\r\n    }\r\n\r\n    function restart() external onlyOwner {\r\n        require(state == State.Closed);\r\n        round++;\r\n        state = State.Active;\r\n\r\n    }\r\n\r\n    // Destruction of the contract with return of funds to the specified address. Available to\r\n    // the owner of the contract.\r\n    function del(address _wallet) external onlyOwner {\r\n        selfdestruct(_wallet);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n * This code is taken from openZeppelin without any changes.\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n * This code is taken from openZeppelin without any changes.\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n * This code is taken from openZeppelin without any changes.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n  /**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n * This code is taken from openZeppelin without any changes.\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n * This code is taken from openZeppelin without any changes.\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n\r\n  mapping (address => bool) public unpausedWallet;\r\n\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = true;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused(address _to) {\r\n    require(!paused||unpausedWallet[msg.sender]||unpausedWallet[_to]);\r\n    _;\r\n  }\r\n\r\n   // Add a wallet ignoring the \"Exchange pause\". Available to the owner of the contract.\r\n  function setUnpausedWallet(address _wallet, bool mode) public {\r\n       require(owner == msg.sender || msg.sender == Crowdsale(owner).wallets(uint8(Crowdsale.Roles.manager)));\r\n       unpausedWallet[_wallet] = mode;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function setPause(bool mode) public onlyOwner {\r\n    if (!paused && mode) {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n    if (paused && !mode) {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n    mapping (address => bool) public grantedToSetUnpausedWallet;\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused(_to) returns (bool) {\r\n      return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused(_to) returns (bool) {\r\n      return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function grantToSetUnpausedWallet(address _to, bool permission) public {\r\n        require(owner == msg.sender || msg.sender == Crowdsale(owner).wallets(uint8(Crowdsale.Roles.manager)));\r\n        grantedToSetUnpausedWallet[_to] = permission;\r\n    }\r\n\r\n    // Add a wallet ignoring the \"Exchange pause\". Available to the owner of the contract.\r\n    function setUnpausedWallet(address _wallet, bool mode) public {\r\n        require(owner == msg.sender || grantedToSetUnpausedWallet[msg.sender] || msg.sender == Crowdsale(owner).wallets(uint8(Crowdsale.Roles.manager)));\r\n        unpausedWallet[_wallet] = mode;\r\n    }\r\n}\r\n\r\n\r\ncontract MigratableToken is BasicToken,Ownable {\r\n\r\n    uint256 public totalMigrated;\r\n    address public migrationAgent;\r\n\r\n    event Migrate(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    function setMigrationAgent(address _migrationAgent) public onlyOwner {\r\n        require(migrationAgent == 0x0);\r\n        migrationAgent = _migrationAgent;\r\n    }\r\n\r\n    function migrateInternal(address _holder) internal {\r\n        require(migrationAgent != 0x0);\r\n\r\n        uint256 value = balances[_holder];\r\n        balances[_holder] = 0;\r\n\r\n        totalSupply_ = totalSupply_.sub(value);\r\n        totalMigrated = totalMigrated.add(value);\r\n\r\n        MigrationAgent(migrationAgent).migrateFrom(_holder, value);\r\n        emit Migrate(_holder,migrationAgent,value);\r\n    }\r\n\r\n    function migrateAll(address[] _holders) public onlyOwner {\r\n        for(uint i = 0; i < _holders.length; i++){\r\n            migrateInternal(_holders[i]);\r\n        }\r\n    }\r\n\r\n    // Reissue your tokens.\r\n    function migrate() public\r\n    {\r\n        require(balances[msg.sender] > 0);\r\n        migrateInternal(msg.sender);\r\n    }\r\n\r\n}\r\n\r\ncontract MigrationAgent\r\n{\r\n    function migrateFrom(address _from, uint256 _value) public;\r\n}\r\n\r\ncontract FreezingToken is PausableToken {\r\n    struct freeze {\r\n        uint256 amount;\r\n        uint256 when;\r\n    }\r\n\r\n\r\n    mapping (address => freeze) freezedTokens;\r\n\r\n\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        any time\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          any\r\n    function freezedTokenOf(address _beneficiary) public view returns (uint256 amount){\r\n        freeze storage _freeze = freezedTokens[_beneficiary];\r\n        if(_freeze.when < now) return 0;\r\n        return _freeze.amount;\r\n    }\r\n\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        any time\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          any\r\n    function defrostDate(address _beneficiary) public view returns (uint256 Date) {\r\n        freeze storage _freeze = freezedTokens[_beneficiary];\r\n        if(_freeze.when < now) return 0;\r\n        return _freeze.when;\r\n    }\r\n\r\n\r\n    // ***CHECK***SCENARIO***\r\n    function freezeTokens(address _beneficiary, uint256 _amount, uint256 _when) public onlyOwner {\r\n        freeze storage _freeze = freezedTokens[_beneficiary];\r\n        _freeze.amount = _amount;\r\n        _freeze.when = _when;\r\n    }\r\n\r\n    function transferAndFreeze(address _to, uint256 _value, uint256 _when) external {\r\n        require(unpausedWallet[msg.sender]);\r\n        if(_when > 0){\r\n            freeze storage _freeze = freezedTokens[_to];\r\n            _freeze.amount = _freeze.amount.add(_value);\r\n            _freeze.when = (_freeze.when > _when)? _freeze.when: _when;\r\n        }\r\n        transfer(_to,_value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(balanceOf(msg.sender) >= freezedTokenOf(msg.sender).add(_value));\r\n        return super.transfer(_to,_value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(balanceOf(_from) >= freezedTokenOf(_from).add(_value));\r\n        return super.transferFrom( _from,_to,_value);\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\ncontract BurnableToken is BasicToken, Ownable {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(address _beneficiary, uint256 _value) public onlyOwner {\r\n    require(_value <= balances[_beneficiary]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_beneficiary] = balances[_beneficiary].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_beneficiary, _value);\r\n    emit Transfer(_beneficiary, address(0), _value);\r\n  }\r\n}\r\n\r\n/*\r\n* Contract that is working with ERC223 tokens\r\n*/\r\ncontract ERC223ReceivingContract {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n// (A2)\r\n// Contract token\r\ncontract Token is FreezingToken, MintableToken, MigratableToken, BurnableToken {\r\n    string public constant name = \"TOSS\";\r\n\r\n    string public constant symbol = \"PROOF OF TOSS\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    mapping (address => mapping (address => bool)) public grantedToAllowBlocking; // Address of smart contract that can allow other contracts to block tokens\r\n    mapping (address => mapping (address => bool)) public allowedToBlocking; // Address of smart contract that can block tokens\r\n    mapping (address => mapping (address => uint256)) public blocked; // Blocked tokens per blocker\r\n\r\n    event TokenOperationEvent(string operation, address indexed from, address indexed to, uint256 value, address indexed _contract);\r\n\r\n\r\n    modifier contractOnly(address _to) {\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n        // Retrieve the size of the code on target address, this needs assembly .\r\n        codeLength := extcodesize(_to)\r\n        }\r\n\r\n        require(codeLength > 0);\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer the specified amount of tokens to the specified address.\r\n    * Invokes the `tokenFallback` function if the recipient is a contract.\r\n    * The token transfer fails if the recipient is a contract\r\n    * but does not implement the `tokenFallback` function\r\n    * or the fallback function to receive funds.\r\n    *\r\n    * @param _to Receiver address.\r\n    * @param _value Amount of tokens that will be transferred.\r\n    * @param _data Transaction metadata.\r\n    */\r\n\r\n    function transferToContract(address _to, uint256 _value, bytes _data) public contractOnly(_to) returns (bool) {\r\n        // Standard function transfer similar to ERC20 transfer with no _data .\r\n        // Added due to backwards compatibility reasons .\r\n\r\n\r\n        super.transfer(_to, _value);\r\n\r\n        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n\r\n        return true;\r\n    }\r\n\r\n    // @brief Allow another contract to allow another contract to block tokens. Can be revoked\r\n    // @param _spender another contract address\r\n    // @param _value amount of approved tokens\r\n    function grantToAllowBlocking(address _contract, bool permission) contractOnly(_contract) public {\r\n\r\n\r\n        grantedToAllowBlocking[msg.sender][_contract] = permission;\r\n\r\n        emit TokenOperationEvent('grant_allow_blocking', msg.sender, _contract, 0, 0);\r\n    }\r\n\r\n    // @brief Allow another contract to block tokens. Can't be revoked\r\n    // @param _owner tokens owner\r\n    // @param _contract another contract address\r\n    function allowBlocking(address _owner, address _contract) contractOnly(_contract) public {\r\n\r\n\r\n        require(_contract != msg.sender && _contract != owner);\r\n\r\n        require(grantedToAllowBlocking[_owner][msg.sender]);\r\n\r\n        allowedToBlocking[_owner][_contract] = true;\r\n\r\n        emit TokenOperationEvent('allow_blocking', _owner, _contract, 0, msg.sender);\r\n    }\r\n\r\n    // @brief Blocks tokens\r\n    // @param _blocking The address of tokens which are being blocked\r\n    // @param _value The blocked token count\r\n    function blockTokens(address _blocking, uint256 _value) whenNotPaused(_blocking) public {\r\n        require(allowedToBlocking[_blocking][msg.sender]);\r\n\r\n        require(balanceOf(_blocking) >= freezedTokenOf(_blocking).add(_value) && _value > 0);\r\n\r\n        balances[_blocking] = balances[_blocking].sub(_value);\r\n        blocked[_blocking][msg.sender] = blocked[_blocking][msg.sender].add(_value);\r\n\r\n        emit Transfer(_blocking, address(0), _value);\r\n        emit TokenOperationEvent('block', _blocking, 0, _value, msg.sender);\r\n    }\r\n\r\n    // @brief Unblocks tokens and sends them to the given address (to _unblockTo)\r\n    // @param _blocking The address of tokens which are blocked\r\n    // @param _unblockTo The address to send to the blocked tokens after unblocking\r\n    // @param _value The blocked token count to unblock\r\n    function unblockTokens(address _blocking, address _unblockTo, uint256 _value) whenNotPaused(_unblockTo) public {\r\n        require(allowedToBlocking[_blocking][msg.sender]);\r\n        require(blocked[_blocking][msg.sender] >= _value && _value > 0);\r\n\r\n        blocked[_blocking][msg.sender] = blocked[_blocking][msg.sender].sub(_value);\r\n        balances[_unblockTo] = balances[_unblockTo].add(_value);\r\n\r\n        emit Transfer(address(0), _blocking, _value);\r\n\r\n        if (_blocking != _unblockTo) {\r\n            emit Transfer(_blocking, _unblockTo, _value);\r\n        }\r\n\r\n        emit TokenOperationEvent('unblock', _blocking, _unblockTo, _value, msg.sender);\r\n    }\r\n}\r\n\r\n// (B)\r\n// The contract for freezing tokens for the team..\r\ncontract AllocationTOSS is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Share {\r\n        uint256 proportion;\r\n        uint256 forPart;\r\n    }\r\n\r\n    // How many days to freeze from the moment of finalizing ICO\r\n    uint256 public unlockPart1;\r\n    uint256 public unlockPart2;\r\n    uint256 public totalShare;\r\n\r\n    mapping(address => Share) public shares;\r\n\r\n    ERC20Basic public token;\r\n\r\n    address public owner;\r\n\r\n    // The contract takes the ERC20 coin address from which this contract will work and from the\r\n    // owner (Team wallet) who owns the funds.\r\n    function AllocationTOSS(ERC20Basic _token, uint256 _unlockPart1, uint256 _unlockPart2) public{\r\n        unlockPart1 = _unlockPart1;\r\n        unlockPart2 = _unlockPart2;\r\n        token = _token;\r\n    }\r\n\r\n    function addShare(address _beneficiary, uint256 _proportion, uint256 _percenForFirstPart) onlyOwner external {\r\n        shares[_beneficiary] = Share(shares[_beneficiary].proportion.add(_proportion),_percenForFirstPart);\r\n        totalShare = totalShare.add(_proportion);\r\n    }\r\n\r\n    // If the time of freezing expired will return the funds to the owner.\r\n    function unlockFor(address _owner) public {\r\n        require(now >= unlockPart1);\r\n        uint256 share = shares[_owner].proportion;\r\n        if (now < unlockPart2) {\r\n            share = share.mul(shares[_owner].forPart)/100;\r\n            shares[_owner].forPart = 0;\r\n        }\r\n        if (share > 0) {\r\n            uint256 unlockedToken = token.balanceOf(this).mul(share).div(totalShare);\r\n            shares[_owner].proportion = shares[_owner].proportion.sub(share);\r\n            totalShare = totalShare.sub(share);\r\n            token.transfer(_owner,unlockedToken);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Creator{\r\n    Token public token = new Token();\r\n    RefundVault public refund = new RefundVault();\r\n\r\n    function createToken() external returns (Token) {\r\n        token.transferOwnership(msg.sender);\r\n        return token;\r\n    }\r\n\r\n    function createAllocation(Token _token, uint256 _unlockPart1, uint256 _unlockPart2) external returns (AllocationTOSS) {\r\n        AllocationTOSS allocation = new AllocationTOSS(_token,_unlockPart1,_unlockPart2);\r\n        allocation.transferOwnership(msg.sender);\r\n        return allocation;\r\n    }\r\n\r\n    function createRefund() external returns (RefundVault) {\r\n        refund.transferOwnership(msg.sender);\r\n        return refund;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"finalize2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"massBurnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRound1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"prolong\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiTotalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"profits\",\"outputs\":[{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"paymentsInOtherCurrency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAllProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"renewal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetAllWallets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProfitPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSaledToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_migrationAgent\",\"type\":\"address\"}],\"name\":\"moveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"}],\"name\":\"migrateAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_softCap\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_exchange\",\"type\":\"uint256\"},{\"name\":\"_maxAllProfit\",\"type\":\"uint256\"},{\"name\":\"_overLimit\",\"type\":\"uint256\"},{\"name\":\"_minPay\",\"type\":\"uint256\"},{\"name\":\"_durationTB\",\"type\":\"uint256[]\"},{\"name\":\"_percentTB\",\"type\":\"uint256[]\"},{\"name\":\"_valueVB\",\"type\":\"uint256[]\"},{\"name\":\"_percentVB\",\"type\":\"uint256[]\"},{\"name\":\"_freezeTimeVB\",\"type\":\"uint256[]\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_role\",\"type\":\"uint8\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timeNow\",\"type\":\"uint256\"}],\"name\":\"getProfitPercentForData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distructVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonuses\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"procent\",\"type\":\"uint256\"},{\"name\":\"freezeTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canFirstMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"firstMintRound0\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonEthWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chargeBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPausedCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenSaleType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"overLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReserved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mode\",\"type\":\"bool\"}],\"name\":\"setCrowdsalePause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000096e3064730281f3ec19cff8b8c5be89b1a6c13c1","Library":"","SwarmSource":"bzzr://433e3179395d3485e51b0dad8ff2795618a5b51463a0f3787b24804fad8c38e0"}]}