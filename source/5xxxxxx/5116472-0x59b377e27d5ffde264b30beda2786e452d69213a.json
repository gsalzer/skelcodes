{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract B0xPresale is Ownable {\r\n\tusing SafeMath for uint;\r\n\r\n\tmapping (address => Investment[]) public received;  // mapping of investor address to Investment struct arrays\r\n\taddress[] public investors;                     \t// array of investors who have already send Ether\r\n\r\n\taddress public receiver1;\r\n\taddress public receiver2;\r\n\taddress public receiver3;\r\n\r\n\tstruct Investment {\r\n\t\tuint amount;\r\n\t\tuint blockNumber;\r\n\t\tuint blockTimestamp;\r\n\t}\r\n\r\n\tfunction() \r\n\t\tpublic\r\n\t\tpayable\r\n\t{\r\n\t\trequire(msg.value > 0);\r\n\t\treceived[msg.sender].push(Investment({\r\n\t\t\tamount: msg.value,\r\n\t\t\tblockNumber: block.number,\r\n\t\t\tblockTimestamp: block.timestamp\r\n\t\t}));\r\n\t\tinvestors.push(msg.sender);\r\n\t}\r\n\r\n\tfunction B0xPresale(\r\n\t\taddress _receiver1,\r\n\t\taddress _receiver2,\r\n\t\taddress _receiver3)\r\n\t\tpublic\r\n\t{\r\n\t\treceiver1 = _receiver1;\r\n\t\treceiver2 = _receiver2;\r\n\t\treceiver3 = _receiver3;\r\n\t}\r\n\r\n\tfunction withdraw()\r\n\t\tpublic\r\n\t{\r\n\t\trequire(msg.sender == owner \r\n\t\t\t|| msg.sender == receiver1 \r\n\t\t\t|| msg.sender == receiver2 \r\n\t\t\t|| msg.sender == receiver3);\r\n\r\n\t\tvar toSend = this.balance.mul(3).div(7);\r\n\t\trequire(receiver1.send(toSend));\r\n\t\trequire(receiver2.send(toSend));\r\n\t\trequire(receiver3.send(this.balance)); // remaining balance goes to 3rd receiver\r\n\t}\r\n\r\n\tfunction ownerWithdraw(\r\n\t\taddress _receiver,\r\n\t\tuint amount\r\n\t)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\trequire(_receiver.send(amount));\r\n\t}\r\n\r\n\tfunction setReceiver1(\r\n\t\taddress _receiver\r\n\t)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\trequire(_receiver != address(0) && _receiver != receiver1);\r\n\t\treceiver1 = _receiver;\r\n\t}\r\n\r\n\tfunction setReceiver2(\r\n\t\taddress _receiver\r\n\t)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\trequire(_receiver != address(0) && _receiver != receiver2);\r\n\t\treceiver2 = _receiver;\r\n\t}\r\n\r\n\tfunction setReceiver3(\r\n\t\taddress _receiver\r\n\t)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\trequire(_receiver != address(0) && _receiver != receiver3);\r\n\t\treceiver3 = _receiver;\r\n\t}\r\n\r\n\tfunction getInvestorsAddresses()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (address[])\r\n\t{\r\n\t\treturn investors;\r\n\t}\r\n\r\n\tfunction getBalance()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint)\r\n\t{\r\n\t\treturn this.balance;\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setReceiver1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiver3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setReceiver3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorsAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiver2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiver1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setReceiver2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"received\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_receiver1\",\"type\":\"address\"},{\"name\":\"_receiver2\",\"type\":\"address\"},{\"name\":\"_receiver3\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"B0xPresale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ff599af039a5b84c86297245464b9518b04f2e13000000000000000000000000dc63983db369be1596f5f511bd903b716509801a000000000000000000000000c6f26f8bc21cde64e05f15c8294aaafd5aaf75a7","Library":"","SwarmSource":"bzzr://a83e859b1edc5f8b26cd7ccbe0ce9554582d4e3bdb8d094cce82678b89f0a663"}]}