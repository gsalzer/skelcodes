{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n// File: contracts/BdpBaseData.sol\r\n\r\ncontract BdpBaseData {\r\n\r\n\taddress public ownerAddress;\r\n\r\n\taddress public managerAddress;\r\n\r\n\taddress[16] public contracts;\r\n\r\n\tbool public paused = false;\r\n\r\n\tbool public setupCompleted = false;\r\n\r\n\tbytes8 public version;\r\n\r\n}\r\n\r\n// File: contracts/libraries/BdpContracts.sol\r\n\r\nlibrary BdpContracts {\r\n\r\n\tfunction getBdpEntryPoint(address[16] _contracts) pure internal returns (address) {\r\n\t\treturn _contracts[0];\r\n\t}\r\n\r\n\tfunction getBdpController(address[16] _contracts) pure internal returns (address) {\r\n\t\treturn _contracts[1];\r\n\t}\r\n\r\n\tfunction getBdpControllerHelper(address[16] _contracts) pure internal returns (address) {\r\n\t\treturn _contracts[3];\r\n\t}\r\n\r\n\tfunction getBdpDataStorage(address[16] _contracts) pure internal returns (address) {\r\n\t\treturn _contracts[4];\r\n\t}\r\n\r\n\tfunction getBdpImageStorage(address[16] _contracts) pure internal returns (address) {\r\n\t\treturn _contracts[5];\r\n\t}\r\n\r\n\tfunction getBdpOwnershipStorage(address[16] _contracts) pure internal returns (address) {\r\n\t\treturn _contracts[6];\r\n\t}\r\n\r\n\tfunction getBdpPriceStorage(address[16] _contracts) pure internal returns (address) {\r\n\t\treturn _contracts[7];\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/BdpBase.sol\r\n\r\ncontract BdpBase is BdpBaseData {\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == ownerAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyAuthorized() {\r\n\t\trequire(msg.sender == ownerAddress || msg.sender == managerAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier whileContractIsActive() {\r\n\t\trequire(!paused && setupCompleted);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier storageAccessControl() {\r\n\t\trequire(\r\n\t\t\t(! setupCompleted && (msg.sender == ownerAddress || msg.sender == managerAddress))\r\n\t\t\t|| (setupCompleted && !paused && (msg.sender == BdpContracts.getBdpEntryPoint(contracts)))\r\n\t\t);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction setOwner(address _newOwner) external onlyOwner {\r\n\t\trequire(_newOwner != address(0));\r\n\t\townerAddress = _newOwner;\r\n\t}\r\n\r\n\tfunction setManager(address _newManager) external onlyOwner {\r\n\t\trequire(_newManager != address(0));\r\n\t\tmanagerAddress = _newManager;\r\n\t}\r\n\r\n\tfunction setContracts(address[16] _contracts) external onlyOwner {\r\n\t\tcontracts = _contracts;\r\n\t}\r\n\r\n\tfunction pause() external onlyAuthorized {\r\n\t\tpaused = true;\r\n\t}\r\n\r\n\tfunction unpause() external onlyOwner {\r\n\t\tpaused = false;\r\n\t}\r\n\r\n\tfunction setSetupCompleted() external onlyOwner {\r\n\t\tsetupCompleted = true;\r\n\t}\r\n\r\n\tfunction kill() public onlyOwner {\r\n\t\tselfdestruct(ownerAddress);\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t* @dev Multiplies two numbers, throws on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers, truncating the quotient.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, throws on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n// File: contracts/storage/BdpDataStorage.sol\r\n\r\ncontract BdpDataStorage is BdpBase {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tstruct Region {\r\n\t\tuint256 x1;\r\n\t\tuint256 y1;\r\n\t\tuint256 x2;\r\n\t\tuint256 y2;\r\n\t\tuint256 currentImageId;\r\n\t\tuint256 nextImageId;\r\n\t\tuint8[128] url;\r\n\t\tuint256 currentPixelPrice;\r\n\t\tuint256 blockUpdatedAt;\r\n\t\tuint256 updatedAt;\r\n\t\tuint256 purchasedAt;\r\n\t\tuint256 purchasedPixelPrice;\r\n\t}\r\n\r\n\tuint256 public lastRegionId = 0;\r\n\r\n\tmapping (uint256 => Region) public data;\r\n\r\n\r\n\tfunction getLastRegionId() view public returns (uint256) {\r\n\t\treturn lastRegionId;\r\n\t}\r\n\r\n\tfunction getNextRegionId() public storageAccessControl returns (uint256) {\r\n\t\tlastRegionId = lastRegionId.add(1);\r\n\t\treturn lastRegionId;\r\n\t}\r\n\r\n\tfunction deleteRegionData(uint256 _id) public storageAccessControl {\r\n\t\tdelete data[_id];\r\n\t}\r\n\r\n\tfunction getRegionCoordinates(uint256 _id) view public returns (uint256, uint256, uint256, uint256) {\r\n\t\treturn (data[_id].x1, data[_id].y1, data[_id].x2, data[_id].y2);\r\n\t}\r\n\r\n\tfunction setRegionCoordinates(uint256 _id, uint256 _x1, uint256 _y1, uint256 _x2, uint256 _y2) public storageAccessControl {\r\n\t\tdata[_id].x1 = _x1;\r\n\t\tdata[_id].y1 = _y1;\r\n\t\tdata[_id].x2 = _x2;\r\n\t\tdata[_id].y2 = _y2;\r\n\t}\r\n\r\n\tfunction getRegionCurrentImageId(uint256 _id) view public returns (uint256) {\r\n\t\treturn data[_id].currentImageId;\r\n\t}\r\n\r\n\tfunction setRegionCurrentImageId(uint256 _id, uint256 _currentImageId) public storageAccessControl {\r\n\t\tdata[_id].currentImageId = _currentImageId;\r\n\t}\r\n\r\n\tfunction getRegionNextImageId(uint256 _id) view public returns (uint256) {\r\n\t\treturn data[_id].nextImageId;\r\n\t}\r\n\r\n\tfunction setRegionNextImageId(uint256 _id, uint256 _nextImageId) public storageAccessControl {\r\n\t\tdata[_id].nextImageId = _nextImageId;\r\n\t}\r\n\r\n\tfunction getRegionUrl(uint256 _id) view public returns (uint8[128]) {\r\n\t\treturn data[_id].url;\r\n\t}\r\n\r\n\tfunction setRegionUrl(uint256 _id, uint8[128] _url) public storageAccessControl {\r\n\t\tdata[_id].url = _url;\r\n\t}\r\n\r\n\tfunction getRegionCurrentPixelPrice(uint256 _id) view public returns (uint256) {\r\n\t\treturn data[_id].currentPixelPrice;\r\n\t}\r\n\r\n\tfunction setRegionCurrentPixelPrice(uint256 _id, uint256 _currentPixelPrice) public storageAccessControl {\r\n\t\tdata[_id].currentPixelPrice = _currentPixelPrice;\r\n\t}\r\n\r\n\tfunction getRegionBlockUpdatedAt(uint256 _id) view public returns (uint256) {\r\n\t\treturn data[_id].blockUpdatedAt;\r\n\t}\r\n\r\n\tfunction setRegionBlockUpdatedAt(uint256 _id, uint256 _blockUpdatedAt) public storageAccessControl {\r\n\t\tdata[_id].blockUpdatedAt = _blockUpdatedAt;\r\n\t}\r\n\r\n\tfunction getRegionUpdatedAt(uint256 _id) view public returns (uint256) {\r\n\t\treturn data[_id].updatedAt;\r\n\t}\r\n\r\n\tfunction setRegionUpdatedAt(uint256 _id, uint256 _updatedAt) public storageAccessControl {\r\n\t\tdata[_id].updatedAt = _updatedAt;\r\n\t}\r\n\r\n\tfunction getRegionPurchasedAt(uint256 _id) view public returns (uint256) {\r\n\t\treturn data[_id].purchasedAt;\r\n\t}\r\n\r\n\tfunction setRegionPurchasedAt(uint256 _id, uint256 _purchasedAt) public storageAccessControl {\r\n\t\tdata[_id].purchasedAt = _purchasedAt;\r\n\t}\r\n\r\n\tfunction getRegionUpdatedAtPurchasedAt(uint256 _id) view public returns (uint256 _updatedAt, uint256 _purchasedAt) {\r\n\t\treturn (data[_id].updatedAt, data[_id].purchasedAt);\r\n\t}\r\n\r\n\tfunction getRegionPurchasePixelPrice(uint256 _id) view public returns (uint256) {\r\n\t\treturn data[_id].purchasedPixelPrice;\r\n\t}\r\n\r\n\tfunction setRegionPurchasedPixelPrice(uint256 _id, uint256 _purchasedPixelPrice) public storageAccessControl {\r\n\t\tdata[_id].purchasedPixelPrice = _purchasedPixelPrice;\r\n\t}\r\n\r\n\tfunction BdpDataStorage(bytes8 _version) public {\r\n\t\townerAddress = msg.sender;\r\n\t\tmanagerAddress = msg.sender;\r\n\t\tversion = _version;\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/storage/BdpImageStorage.sol\r\n\r\ncontract BdpImageStorage is BdpBase {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tstruct Image {\r\n\t\taddress owner;\r\n\t\tuint256 regionId;\r\n\t\tuint256 currentRegionId;\r\n\t\tmapping(uint16 => uint256[1000]) data;\r\n\t\tmapping(uint16 => uint16) dataLength;\r\n\t\tuint16 partsCount;\r\n\t\tuint16 width;\r\n\t\tuint16 height;\r\n\t\tuint16 imageDescriptor;\r\n\t\tuint256 blurredAt;\r\n\t}\r\n\r\n\tuint256 public lastImageId = 0;\r\n\r\n\tmapping(uint256 => Image) public images;\r\n\r\n\r\n\tfunction getLastImageId() view public returns (uint256) {\r\n\t\treturn lastImageId;\r\n\t}\r\n\r\n\tfunction getNextImageId() public storageAccessControl returns (uint256) {\r\n\t\tlastImageId = lastImageId.add(1);\r\n\t\treturn lastImageId;\r\n\t}\r\n\r\n\tfunction createImage(address _owner, uint256 _regionId, uint16 _width, uint16 _height, uint16 _partsCount, uint16 _imageDescriptor) public storageAccessControl returns (uint256) {\r\n\t\trequire(_owner != address(0) && _width > 0 && _height > 0 && _partsCount > 0 && _imageDescriptor > 0);\r\n\t\tuint256 id = getNextImageId();\r\n\t\timages[id].owner = _owner;\r\n\t\timages[id].regionId = _regionId;\r\n\t\timages[id].width = _width;\r\n\t\timages[id].height = _height;\r\n\t\timages[id].partsCount = _partsCount;\r\n\t\timages[id].imageDescriptor = _imageDescriptor;\r\n\t\treturn id;\r\n\t}\r\n\r\n\tfunction imageExists(uint256 _imageId) view public returns (bool) {\r\n\t\treturn _imageId > 0 && images[_imageId].owner != address(0);\r\n\t}\r\n\r\n\tfunction deleteImage(uint256 _imageId) public storageAccessControl {\r\n\t\trequire(imageExists(_imageId));\r\n\t\tdelete images[_imageId];\r\n\t}\r\n\r\n\tfunction getImageOwner(uint256 _imageId) public view returns (address) {\r\n\t\trequire(imageExists(_imageId));\r\n\t\treturn images[_imageId].owner;\r\n\t}\r\n\r\n\tfunction setImageOwner(uint256 _imageId, address _owner) public storageAccessControl {\r\n\t\trequire(imageExists(_imageId));\r\n\t\timages[_imageId].owner = _owner;\r\n\t}\r\n\r\n\tfunction getImageRegionId(uint256 _imageId) public view returns (uint256) {\r\n\t\trequire(imageExists(_imageId));\r\n\t\treturn images[_imageId].regionId;\r\n\t}\r\n\r\n\tfunction setImageRegionId(uint256 _imageId, uint256 _regionId) public storageAccessControl {\r\n\t\trequire(imageExists(_imageId));\r\n\t\timages[_imageId].regionId = _regionId;\r\n\t}\r\n\r\n\tfunction getImageCurrentRegionId(uint256 _imageId) public view returns (uint256) {\r\n\t\trequire(imageExists(_imageId));\r\n\t\treturn images[_imageId].currentRegionId;\r\n\t}\r\n\r\n\tfunction setImageCurrentRegionId(uint256 _imageId, uint256 _currentRegionId) public storageAccessControl {\r\n\t\trequire(imageExists(_imageId));\r\n\t\timages[_imageId].currentRegionId = _currentRegionId;\r\n\t}\r\n\r\n\tfunction getImageData(uint256 _imageId, uint16 _part) view public returns (uint256[1000]) {\r\n\t\trequire(imageExists(_imageId));\r\n\t\treturn images[_imageId].data[_part];\r\n\t}\r\n\r\n\tfunction setImageData(uint256 _imageId, uint16 _part, uint256[] _data) public storageAccessControl {\r\n\t\trequire(imageExists(_imageId));\r\n\t\timages[_imageId].dataLength[_part] = uint16(_data.length);\r\n\t\tfor (uint256 i = 0; i < _data.length; i++) {\r\n\t\t\timages[_imageId].data[_part][i] = _data[i];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getImageDataLength(uint256 _imageId, uint16 _part) view public returns (uint16) {\r\n\t\trequire(imageExists(_imageId));\r\n\t\treturn images[_imageId].dataLength[_part];\r\n\t}\r\n\r\n\tfunction setImageDataLength(uint256 _imageId, uint16 _part, uint16 _dataLength) public storageAccessControl {\r\n\t\trequire(imageExists(_imageId));\r\n\t\timages[_imageId].dataLength[_part] = _dataLength;\r\n\t}\r\n\r\n\tfunction getImagePartsCount(uint256 _imageId) view public returns (uint16) {\r\n\t\trequire(imageExists(_imageId));\r\n\t\treturn images[_imageId].partsCount;\r\n\t}\r\n\r\n\tfunction setImagePartsCount(uint256 _imageId, uint16 _partsCount) public storageAccessControl {\r\n\t\trequire(imageExists(_imageId));\r\n\t\timages[_imageId].partsCount = _partsCount;\r\n\t}\r\n\r\n\tfunction getImageWidth(uint256 _imageId) view public returns (uint16) {\r\n\t\trequire(imageExists(_imageId));\r\n\t\treturn images[_imageId].width;\r\n\t}\r\n\r\n\tfunction setImageWidth(uint256 _imageId, uint16 _width) public storageAccessControl {\r\n\t\trequire(imageExists(_imageId));\r\n\t\timages[_imageId].width = _width;\r\n\t}\r\n\r\n\tfunction getImageHeight(uint256 _imageId) view public returns (uint16) {\r\n\t\trequire(imageExists(_imageId));\r\n\t\treturn images[_imageId].height;\r\n\t}\r\n\r\n\tfunction setImageHeight(uint256 _imageId, uint16 _height) public storageAccessControl {\r\n\t\trequire(imageExists(_imageId));\r\n\t\timages[_imageId].height = _height;\r\n\t}\r\n\r\n\tfunction getImageDescriptor(uint256 _imageId) view public returns (uint16) {\r\n\t\trequire(imageExists(_imageId));\r\n\t\treturn images[_imageId].imageDescriptor;\r\n\t}\r\n\r\n\tfunction setImageDescriptor(uint256 _imageId, uint16 _imageDescriptor) public storageAccessControl {\r\n\t\trequire(imageExists(_imageId));\r\n\t\timages[_imageId].imageDescriptor = _imageDescriptor;\r\n\t}\r\n\r\n\tfunction getImageBlurredAt(uint256 _imageId) view public returns (uint256) {\r\n\t\treturn images[_imageId].blurredAt;\r\n\t}\r\n\r\n\tfunction setImageBlurredAt(uint256 _imageId, uint256 _blurredAt) public storageAccessControl {\r\n\t\timages[_imageId].blurredAt = _blurredAt;\r\n\t}\r\n\r\n\tfunction imageUploadComplete(uint256 _imageId) view public returns (bool) {\r\n\t\trequire(imageExists(_imageId));\r\n\t\tfor (uint16 i = 1; i <= images[_imageId].partsCount; i++) {\r\n\t\t\tif(images[_imageId].data[i].length == 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction BdpImageStorage(bytes8 _version) public {\r\n\t\townerAddress = msg.sender;\r\n\t\tmanagerAddress = msg.sender;\r\n\t\tversion = _version;\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/storage/BdpPriceStorage.sol\r\n\r\ncontract BdpPriceStorage is BdpBase {\r\n\r\n\tuint64[1001] public pricePoints;\r\n\r\n\tuint256 public pricePointsLength = 0;\r\n\r\n\taddress public forwardPurchaseFeesTo = address(0);\r\n\r\n\taddress public forwardUpdateFeesTo = address(0);\r\n\r\n\r\n\tfunction getPricePointsLength() view public returns (uint256) {\r\n\t\treturn pricePointsLength;\r\n\t}\r\n\r\n\tfunction getPricePoint(uint256 _i) view public returns (uint256) {\r\n\t\treturn pricePoints[_i];\r\n\t}\r\n\r\n\tfunction setPricePoints(uint64[] _pricePoints) public storageAccessControl {\r\n\t\tpricePointsLength = 0;\r\n\t\tappendPricePoints(_pricePoints);\r\n\t}\r\n\r\n\tfunction appendPricePoints(uint64[] _pricePoints) public storageAccessControl {\r\n\t\tfor (uint i = 0; i < _pricePoints.length; i++) {\r\n\t\t\tpricePoints[pricePointsLength++] = _pricePoints[i];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getForwardPurchaseFeesTo() view public returns (address) {\r\n\t\treturn forwardPurchaseFeesTo;\r\n\t}\r\n\r\n\tfunction setForwardPurchaseFeesTo(address _forwardPurchaseFeesTo) public storageAccessControl {\r\n\t\tforwardPurchaseFeesTo = _forwardPurchaseFeesTo;\r\n\t}\r\n\r\n\tfunction getForwardUpdateFeesTo() view public returns (address) {\r\n\t\treturn forwardUpdateFeesTo;\r\n\t}\r\n\r\n\tfunction setForwardUpdateFeesTo(address _forwardUpdateFeesTo) public storageAccessControl {\r\n\t\tforwardUpdateFeesTo = _forwardUpdateFeesTo;\r\n\t}\r\n\r\n\tfunction BdpPriceStorage(bytes8 _version) public {\r\n\t\townerAddress = msg.sender;\r\n\t\tmanagerAddress = msg.sender;\r\n\t\tversion = _version;\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/libraries/BdpCalculator.sol\r\n\r\nlibrary BdpCalculator {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tfunction calculateArea(address[16] _contracts, uint256 _regionId) view public returns (uint256 _area, uint256 _width, uint256 _height) {\r\n\t\tvar (x1, y1, x2, y2) = BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).getRegionCoordinates(_regionId);\r\n\t\t_width = x2 - x1 + 1;\r\n\t\t_height = y2 - y1 + 1;\r\n\t\t_area = _width * _height;\r\n\t}\r\n\r\n\tfunction countPurchasedPixels(address[16] _contracts) view public returns (uint256 _count) {\r\n\t\tvar lastRegionId = BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).getLastRegionId();\r\n\t\tfor (uint256 i = 0; i <= lastRegionId; i++) {\r\n\t\t\tif(BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).getRegionPurchasedAt(i) > 0) { // region is purchased\r\n\t\t\t\tvar (area,,) = calculateArea(_contracts, i);\r\n\t\t\t\t_count += area;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction calculateCurrentMarketPixelPrice(address[16] _contracts) view public returns(uint) {\r\n\t\treturn calculateMarketPixelPrice(_contracts, countPurchasedPixels(_contracts));\r\n\t}\r\n\r\n\tfunction calculateMarketPixelPrice(address[16] _contracts, uint _pixelsSold) view public returns(uint) {\r\n\t\tvar pricePointsLength = BdpPriceStorage(BdpContracts.getBdpPriceStorage(_contracts)).getPricePointsLength();\r\n\t\tuint mod = _pixelsSold % (1000000 / (pricePointsLength - 1));\r\n\t\tuint div = _pixelsSold * (pricePointsLength - 1) / 1000000;\r\n\t\tvar divPoint = BdpPriceStorage(BdpContracts.getBdpPriceStorage(_contracts)).getPricePoint(div);\r\n\t\tif(mod == 0) return divPoint;\r\n\t\treturn divPoint + mod * (BdpPriceStorage(BdpContracts.getBdpPriceStorage(_contracts)).getPricePoint(div+1) - divPoint) * (pricePointsLength - 1) / 1000000;\r\n\t}\r\n\r\n\tfunction calculateAveragePixelPrice(address[16] _contracts, uint _a, uint _b) view public returns (uint _price) {\r\n\t\t_price = (calculateMarketPixelPrice(_contracts, _a) + calculateMarketPixelPrice(_contracts, _b)) / 2;\r\n\t}\r\n\r\n\t/** Current market price per pixel for this region if it is the first sale of this region\r\n\t  */\r\n\tfunction calculateRegionInitialSalePixelPrice(address[16] _contracts, uint256 _regionId) view public returns (uint256) {\r\n\t\trequire(BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).getRegionUpdatedAt(_regionId) > 0); // region exists\r\n\t\tvar purchasedPixels = countPurchasedPixels(_contracts);\r\n\t\tvar (area,,) = calculateArea(_contracts, _regionId);\r\n\t\treturn calculateAveragePixelPrice(_contracts, purchasedPixels, purchasedPixels + area);\r\n\t}\r\n\r\n\t/** Current market price or (Current market price)*3 if the region was sold\r\n\t  */\r\n\tfunction calculateRegionSalePixelPrice(address[16] _contracts, uint256 _regionId) view public returns (uint256) {\r\n\t\tvar pixelPrice = BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).getRegionCurrentPixelPrice(_regionId);\r\n\t\tif(pixelPrice > 0) {\r\n\t\t\treturn pixelPrice * 3;\r\n\t\t} else {\r\n\t\t\treturn calculateRegionInitialSalePixelPrice(_contracts, _regionId);\r\n\t\t}\r\n\t}\r\n\r\n\t/** Setup is allowed one whithin one day after purchase\r\n\t  */\r\n\tfunction calculateSetupAllowedUntil(address[16] _contracts, uint256 _regionId) view public returns (uint256) {\r\n\t\tvar (updatedAt, purchasedAt) = BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).getRegionUpdatedAtPurchasedAt(_regionId);\r\n\t\tif(updatedAt != purchasedAt) {\r\n\t\t\treturn 0;\r\n\t\t} else {\r\n\t\t\treturn purchasedAt + 1 days;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/storage/BdpOwnershipStorage.sol\r\n\r\ncontract BdpOwnershipStorage is BdpBase {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\t// Mapping from token ID to owner\r\n\tmapping (uint256 => address) public tokenOwner;\r\n\r\n\t// Mapping from token ID to approved address\r\n\tmapping (uint256 => address) public tokenApprovals;\r\n\r\n\t// Mapping from owner to the sum of owned area\r\n\tmapping (address => uint256) public ownedArea;\r\n\r\n\t// Mapping from owner to list of owned token IDs\r\n\tmapping (address => uint256[]) public ownedTokens;\r\n\r\n\t// Mapping from token ID to index of the owner tokens list\r\n\tmapping(uint256 => uint256) public ownedTokensIndex;\r\n\r\n\t// All tokens list tokens ids\r\n\tuint256[] public tokenIds;\r\n\r\n\t// Mapping from tokenId to index of the tokens list\r\n\tmapping (uint256 => uint256) public tokenIdsIndex;\r\n\r\n\r\n\tfunction getTokenOwner(uint256 _tokenId) view public returns (address) {\r\n\t\treturn tokenOwner[_tokenId];\r\n\t}\r\n\r\n\tfunction setTokenOwner(uint256 _tokenId, address _owner) public storageAccessControl {\r\n\t\ttokenOwner[_tokenId] = _owner;\r\n\t}\r\n\r\n\tfunction getTokenApproval(uint256 _tokenId) view public returns (address) {\r\n\t\treturn tokenApprovals[_tokenId];\r\n\t}\r\n\r\n\tfunction setTokenApproval(uint256 _tokenId, address _to) public storageAccessControl {\r\n\t\ttokenApprovals[_tokenId] = _to;\r\n\t}\r\n\r\n\tfunction getOwnedArea(address _owner) view public returns (uint256) {\r\n\t\treturn ownedArea[_owner];\r\n\t}\r\n\r\n\tfunction setOwnedArea(address _owner, uint256 _area) public storageAccessControl {\r\n\t\townedArea[_owner] = _area;\r\n\t}\r\n\r\n\tfunction incrementOwnedArea(address _owner, uint256 _area) public storageAccessControl returns (uint256) {\r\n\t\townedArea[_owner] = ownedArea[_owner].add(_area);\r\n\t\treturn ownedArea[_owner];\r\n\t}\r\n\r\n\tfunction decrementOwnedArea(address _owner, uint256 _area) public storageAccessControl returns (uint256) {\r\n\t\townedArea[_owner] = ownedArea[_owner].sub(_area);\r\n\t\treturn ownedArea[_owner];\r\n\t}\r\n\r\n\tfunction getOwnedTokensLength(address _owner) view public returns (uint256) {\r\n\t\treturn ownedTokens[_owner].length;\r\n\t}\r\n\r\n\tfunction getOwnedToken(address _owner, uint256 _index) view public returns (uint256) {\r\n\t\treturn ownedTokens[_owner][_index];\r\n\t}\r\n\r\n\tfunction setOwnedToken(address _owner, uint256 _index, uint256 _tokenId) public storageAccessControl {\r\n\t\townedTokens[_owner][_index] = _tokenId;\r\n\t}\r\n\r\n\tfunction pushOwnedToken(address _owner, uint256 _tokenId) public storageAccessControl returns (uint256) {\r\n\t\townedTokens[_owner].push(_tokenId);\r\n\t\treturn ownedTokens[_owner].length;\r\n\t}\r\n\r\n\tfunction decrementOwnedTokensLength(address _owner) public storageAccessControl {\r\n\t\townedTokens[_owner].length--;\r\n\t}\r\n\r\n\tfunction getOwnedTokensIndex(uint256 _tokenId) view public returns (uint256) {\r\n\t\treturn ownedTokensIndex[_tokenId];\r\n\t}\r\n\r\n\tfunction setOwnedTokensIndex(uint256 _tokenId, uint256 _tokenIndex) public storageAccessControl {\r\n\t\townedTokensIndex[_tokenId] = _tokenIndex;\r\n\t}\r\n\r\n\tfunction getTokenIdsLength() view public returns (uint256) {\r\n\t\treturn tokenIds.length;\r\n\t}\r\n\r\n\tfunction getTokenIdByIndex(uint256 _index) view public returns (uint256) {\r\n\t\treturn tokenIds[_index];\r\n\t}\r\n\r\n\tfunction setTokenIdByIndex(uint256 _index, uint256 _tokenId) public storageAccessControl {\r\n\t\ttokenIds[_index] = _tokenId;\r\n\t}\r\n\r\n\tfunction pushTokenId(uint256 _tokenId) public storageAccessControl returns (uint256) {\r\n\t\ttokenIds.push(_tokenId);\r\n\t\treturn tokenIds.length;\r\n\t}\r\n\r\n\tfunction decrementTokenIdsLength() public storageAccessControl {\r\n\t\ttokenIds.length--;\r\n\t}\r\n\r\n\tfunction getTokenIdsIndex(uint256 _tokenId) view public returns (uint256) {\r\n\t\treturn tokenIdsIndex[_tokenId];\r\n\t}\r\n\r\n\tfunction setTokenIdsIndex(uint256 _tokenId, uint256 _tokenIdIndex) public storageAccessControl {\r\n\t\ttokenIdsIndex[_tokenId] = _tokenIdIndex;\r\n\t}\r\n\r\n\tfunction BdpOwnershipStorage(bytes8 _version) public {\r\n\t\townerAddress = msg.sender;\r\n\t\tmanagerAddress = msg.sender;\r\n\t\tversion = _version;\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/libraries/BdpOwnership.sol\r\n\r\nlibrary BdpOwnership {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n\tfunction ownerOf(address[16] _contracts, uint256 _tokenId) public view returns (address) {\r\n\t\tvar owner = BdpOwnershipStorage(BdpContracts.getBdpOwnershipStorage(_contracts)).getTokenOwner(_tokenId);\r\n\t\trequire(owner != address(0));\r\n\t\treturn owner;\r\n\t}\r\n\r\n\tfunction balanceOf(address[16] _contracts, address _owner) public view returns (uint256) {\r\n\t\treturn BdpOwnershipStorage(BdpContracts.getBdpOwnershipStorage(_contracts)).getOwnedTokensLength(_owner);\r\n\t}\r\n\r\n\tfunction approve(address[16] _contracts, address _to, uint256 _tokenId) public {\r\n\t\tvar ownStorage = BdpOwnershipStorage(BdpContracts.getBdpOwnershipStorage(_contracts));\r\n\r\n\t\taddress owner = ownerOf(_contracts, _tokenId);\r\n\t\trequire(_to != owner);\r\n\t\tif (ownStorage.getTokenApproval(_tokenId) != 0 || _to != 0) {\r\n\t\t\townStorage.setTokenApproval(_tokenId, _to);\r\n\t\t\tApproval(owner, _to, _tokenId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Clear current approval of a given token ID\r\n\t * @param _tokenId uint256 ID of the token to be transferred\r\n\t */\r\n\tfunction clearApproval(address[16] _contracts, address _owner, uint256 _tokenId) public {\r\n\t\tvar ownStorage = BdpOwnershipStorage(BdpContracts.getBdpOwnershipStorage(_contracts));\r\n\r\n\t\trequire(ownerOf(_contracts, _tokenId) == _owner);\r\n\t\tif (ownStorage.getTokenApproval(_tokenId) != 0) {\r\n\t\t\tBdpOwnershipStorage(BdpContracts.getBdpOwnershipStorage(_contracts)).setTokenApproval(_tokenId, 0);\r\n\t\t\tApproval(_owner, 0, _tokenId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Clear current approval and transfer the ownership of a given token ID\r\n\t * @param _from address which you want to send tokens from\r\n\t * @param _to address which you want to transfer the token to\r\n\t * @param _tokenId uint256 ID of the token to be transferred\r\n\t */\r\n\tfunction clearApprovalAndTransfer(address[16] _contracts, address _from, address _to, uint256 _tokenId) public {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_to != ownerOf(_contracts, _tokenId));\r\n\t\trequire(ownerOf(_contracts, _tokenId) == _from);\r\n\r\n\t\tclearApproval(_contracts, _from, _tokenId);\r\n\t\tremoveToken(_contracts, _from, _tokenId);\r\n\t\taddToken(_contracts, _to, _tokenId);\r\n\t\tTransfer(_from, _to, _tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function to add a token ID to the list of a given address\r\n\t * @param _to address representing the new owner of the given token ID\r\n\t * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n\t */\r\n\tfunction addToken(address[16] _contracts, address _to, uint256 _tokenId) private {\r\n\t\tvar ownStorage = BdpOwnershipStorage(BdpContracts.getBdpOwnershipStorage(_contracts));\r\n\r\n\t\trequire(ownStorage.getTokenOwner(_tokenId) == address(0));\r\n\r\n\t\t// Set token owner\r\n\t\townStorage.setTokenOwner(_tokenId, _to);\r\n\r\n\t\t// Add token to tokenIds list\r\n\t\tvar tokenIdsLength = ownStorage.pushTokenId(_tokenId);\r\n\t\townStorage.setTokenIdsIndex(_tokenId, tokenIdsLength.sub(1));\r\n\r\n\t\tuint256 ownedTokensLength = ownStorage.getOwnedTokensLength(_to);\r\n\r\n\t\t// Add token to ownedTokens list\r\n\t\townStorage.pushOwnedToken(_to, _tokenId);\r\n\t\townStorage.setOwnedTokensIndex(_tokenId, ownedTokensLength);\r\n\r\n\t\t// Increment total owned area\r\n\t\tvar (area,,) = BdpCalculator.calculateArea(_contracts, _tokenId);\r\n\t\townStorage.incrementOwnedArea(_to, area);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function to remove a token ID from the list of a given address\r\n\t * @param _from address representing the previous owner of the given token ID\r\n\t * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n\t */\r\n\tfunction removeToken(address[16] _contracts, address _from, uint256 _tokenId) private {\r\n\t\tvar ownStorage = BdpOwnershipStorage(BdpContracts.getBdpOwnershipStorage(_contracts));\r\n\r\n\t\trequire(ownerOf(_contracts, _tokenId) == _from);\r\n\r\n\t\t// Clear token owner\r\n\t\townStorage.setTokenOwner(_tokenId, 0);\r\n\r\n\t\tremoveFromTokenIds(ownStorage, _tokenId);\r\n\t\tremoveFromOwnedToken(ownStorage, _from, _tokenId);\r\n\r\n\t\t// Decrement total owned area\r\n\t\tvar (area,,) = BdpCalculator.calculateArea(_contracts, _tokenId);\r\n\t\townStorage.decrementOwnedArea(_from, area);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Remove token from ownedTokens list\r\n\t * Note that this will handle single-element arrays. In that case, both ownedTokenIndex and lastOwnedTokenIndex are going to\r\n\t * be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n\t * the lastOwnedToken to the first position, and then dropping the element placed in the last position of the list\r\n\t */\r\n\tfunction removeFromOwnedToken(BdpOwnershipStorage _ownStorage, address _from, uint256 _tokenId) private {\r\n\t\tvar ownedTokenIndex = _ownStorage.getOwnedTokensIndex(_tokenId);\r\n\t\tvar lastOwnedTokenIndex = _ownStorage.getOwnedTokensLength(_from).sub(1);\r\n\t\tvar lastOwnedToken = _ownStorage.getOwnedToken(_from, lastOwnedTokenIndex);\r\n\t\t_ownStorage.setOwnedToken(_from, ownedTokenIndex, lastOwnedToken);\r\n\t\t_ownStorage.setOwnedToken(_from, lastOwnedTokenIndex, 0);\r\n\t\t_ownStorage.decrementOwnedTokensLength(_from);\r\n\t\t_ownStorage.setOwnedTokensIndex(_tokenId, 0);\r\n\t\t_ownStorage.setOwnedTokensIndex(lastOwnedToken, ownedTokenIndex);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Remove token from tokenIds list\r\n\t */\r\n\tfunction removeFromTokenIds(BdpOwnershipStorage _ownStorage, uint256 _tokenId) private {\r\n\t\tvar tokenIndex = _ownStorage.getTokenIdsIndex(_tokenId);\r\n\t\tvar lastTokenIdIndex = _ownStorage.getTokenIdsLength().sub(1);\r\n\t\tvar lastTokenId = _ownStorage.getTokenIdByIndex(lastTokenIdIndex);\r\n\t\t_ownStorage.setTokenIdByIndex(tokenIndex, lastTokenId);\r\n\t\t_ownStorage.setTokenIdByIndex(lastTokenIdIndex, 0);\r\n\t\t_ownStorage.decrementTokenIdsLength();\r\n\t\t_ownStorage.setTokenIdsIndex(_tokenId, 0);\r\n\t\t_ownStorage.setTokenIdsIndex(lastTokenId, tokenIndex);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Mint token function\r\n\t * @param _to The address that will own the minted token\r\n\t * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n\t */\r\n\tfunction mint(address[16] _contracts, address _to, uint256 _tokenId) public {\r\n\t\trequire(_to != address(0));\r\n\t\taddToken(_contracts, _to, _tokenId);\r\n\t\tTransfer(address(0), _to, _tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Burns a specific token\r\n\t * @param _tokenId uint256 ID of the token being burned\r\n\t */\r\n\tfunction burn(address[16] _contracts, uint256 _tokenId) public {\r\n\t\taddress owner = BdpOwnershipStorage(BdpContracts.getBdpOwnershipStorage(_contracts)).getTokenOwner(_tokenId);\r\n\t\tclearApproval(_contracts, owner, _tokenId);\r\n\t\tremoveToken(_contracts, owner, _tokenId);\r\n\t\tTransfer(owner, address(0), _tokenId);\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/libraries/BdpImage.sol\r\n\r\nlibrary BdpImage {\r\n\r\n\tfunction checkImageInput(address[16] _contracts, uint256 _regionId, uint256 _imageId, uint256[] _imageData, bool _swapImages, bool _clearImage) view public {\r\n\t\tvar dataStorage = BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts));\r\n\t\tvar imageStorage = BdpImageStorage(BdpContracts.getBdpImageStorage(_contracts));\r\n\r\n\t\trequire( (_imageId == 0 && _imageData.length == 0 && !_swapImages && !_clearImage) // Only one way to change image can be specified\r\n\t\t\t|| (_imageId != 0 && _imageData.length == 0 && !_swapImages && !_clearImage) // If image has to be changed\r\n\t\t\t|| (_imageId == 0 && _imageData.length != 0 && !_swapImages && !_clearImage)\r\n\t\t\t|| (_imageId == 0 && _imageData.length == 0 && _swapImages && !_clearImage)\r\n\t\t\t|| (_imageId == 0 && _imageData.length == 0 && !_swapImages && _clearImage) );\r\n\r\n\t\trequire(_imageId == 0 || // Can use only own images not used by other regions\r\n\t\t\t( (msg.sender == imageStorage.getImageOwner(_imageId)) && (imageStorage.getImageCurrentRegionId(_imageId) == 0) ) );\r\n\r\n\t\tvar nextImageId = dataStorage.getRegionNextImageId(_regionId);\r\n\t\trequire(!_swapImages || imageStorage.imageUploadComplete(nextImageId)); // Can swap images if next image upload is complete\r\n\t}\r\n\r\n\tfunction setNextImagePart(address[16] _contracts, uint256 _regionId, uint16 _part, uint16 _partsCount, uint16 _imageDescriptor, uint256[] _imageData) public {\r\n\t\tvar dataStorage = BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts));\r\n\t\tvar imageStorage = BdpImageStorage(BdpContracts.getBdpImageStorage(_contracts));\r\n\r\n\t\trequire(BdpOwnership.ownerOf(_contracts, _regionId) == msg.sender);\r\n\t\trequire(_imageData.length != 0);\r\n\t\trequire(_part > 0);\r\n\t\trequire(_part <= _partsCount);\r\n\r\n\t\tvar nextImageId = dataStorage.getRegionNextImageId(_regionId);\r\n\t\tif(nextImageId == 0 || _imageDescriptor != imageStorage.getImageDescriptor(nextImageId)) {\r\n\t\t\tvar (, width, height) = BdpCalculator.calculateArea(_contracts, _regionId);\r\n\t\t\tnextImageId = imageStorage.createImage(msg.sender, _regionId, uint16(width), uint16(height), _partsCount, _imageDescriptor);\r\n\t\t\tdataStorage.setRegionNextImageId(_regionId, nextImageId);\r\n\t\t}\r\n\r\n\t\timageStorage.setImageData(nextImageId, _part, _imageData);\r\n\t}\r\n\r\n\tfunction setImageOwner(address[16] _contracts, uint256 _imageId, address _owner) public {\r\n\t\tvar imageStorage = BdpImageStorage(BdpContracts.getBdpImageStorage(_contracts));\r\n\t\trequire(imageStorage.getImageOwner(_imageId) == msg.sender);\r\n\t\trequire(_owner != address(0));\r\n\r\n\t\timageStorage.setImageOwner(_imageId, _owner);\r\n\t}\r\n\r\n\tfunction setImageData(address[16] _contracts, uint256 _imageId, uint16 _part, uint256[] _imageData) public returns (address) {\r\n\t\tvar imageStorage = BdpImageStorage(BdpContracts.getBdpImageStorage(_contracts));\r\n\t\trequire(imageStorage.getImageOwner(_imageId) == msg.sender);\r\n\t\trequire(imageStorage.getImageCurrentRegionId(_imageId) == 0);\r\n\t\trequire(_imageData.length != 0);\r\n\t\trequire(_part > 0);\r\n\t\trequire(_part <= imageStorage.getImagePartsCount(_imageId));\r\n\r\n\t\timageStorage.setImageData(_imageId, _part, _imageData);\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/libraries/BdpCrud.sol\r\n\r\nlibrary BdpCrud {\r\n\r\n\tfunction createRegion(address[16] _contracts, address _to, uint256 _x1, uint256 _y1, uint256 _x2, uint256 _y2) public returns (uint256) {\r\n\t\tvar dataStorage = BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts));\r\n\t\trequire(_x2 < 1000 && _x1 <= _x2);\r\n\t\trequire(_y2 < 1000 && _y1 <= _y2);\r\n\r\n\t\tvar regionId = dataStorage.getNextRegionId();\r\n\t\tdataStorage.setRegionCoordinates(regionId, _x1, _y1, _x2, _y2);\r\n\t\tdataStorage.setRegionBlockUpdatedAt(regionId, block.number);\r\n\t\tdataStorage.setRegionUpdatedAt(regionId, block.timestamp);\r\n\r\n\t\tBdpOwnership.mint(_contracts, _to, regionId);\r\n\r\n\t\treturn regionId;\r\n\t}\r\n\r\n\tfunction deleteRegion(address[16] _contracts, uint256 _regionId) public {\r\n\t\tvar dataStorage = BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts));\r\n\t\tvar regionPurchasePixelPrice = dataStorage.getRegionPurchasePixelPrice(_regionId);\r\n\t\trequire(regionPurchasePixelPrice == 0);\r\n\t\tBdpOwnership.burn(_contracts, _regionId);\r\n\t\tdataStorage.deleteRegionData(_regionId);\r\n\t}\r\n\r\n\tfunction setupRegion(address[16] _contracts, uint256 _regionId, uint256 _imageId, uint256[] _imageData, bool _swapImages, uint8[128] _url) public {\r\n\t\tvar dataStorage = BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts));\r\n\t\trequire(BdpOwnership.ownerOf(_contracts, _regionId) == msg.sender);\r\n\t\trequire(_imageId != 0 || _imageData.length != 0 || _swapImages || _url.length != 0); // Only if image or url is specified\r\n\t\trequire(block.timestamp < BdpCalculator.calculateSetupAllowedUntil(_contracts, _regionId)); // Can only execute if setup is allowed\r\n\t\tBdpImage.checkImageInput(_contracts, _regionId, _imageId, _imageData, _swapImages, false);\r\n\r\n\t\t_updateRegionImage(_contracts, dataStorage, _regionId, _imageId, _imageData, _swapImages, false);\r\n\t\t_updateRegionUrl(dataStorage, _regionId, _url, false);\r\n\r\n\t\tdataStorage.setRegionBlockUpdatedAt(_regionId, block.number);\r\n\t\tdataStorage.setRegionUpdatedAt(_regionId, block.timestamp);\r\n\t}\r\n\r\n\tfunction updateRegion(address[16] _contracts, uint256 _regionId, uint256 _imageId, uint256[] _imageData, bool _swapImages, bool _clearImage, uint8[128] _url, bool _deleteUrl, address _newOwner) public {\r\n\t\tvar dataStorage = BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts));\r\n\t\trequire(BdpOwnership.ownerOf(_contracts, _regionId) == msg.sender);\r\n\t\tBdpImage.checkImageInput(_contracts, _regionId, _imageId, _imageData, _swapImages, _clearImage);\r\n\t\tvar regionCurrentPixelPrice = dataStorage.getRegionCurrentPixelPrice(_regionId);\r\n\t\trequire(regionCurrentPixelPrice != 0); // region was purchased\r\n\r\n\t\tvar marketPixelPrice = BdpCalculator.calculateCurrentMarketPixelPrice(_contracts);\r\n\r\n\t\tvar (area,,) = BdpCalculator.calculateArea(_contracts, _regionId);\r\n\t\t_processUpdateFee(_contracts, marketPixelPrice * area / 20);\r\n\r\n\t\t_updateRegionImage(_contracts, dataStorage, _regionId, _imageId, _imageData, _swapImages, _clearImage);\r\n\t\t_updateRegionUrl(dataStorage, _regionId, _url, _deleteUrl);\r\n\t\t_updateRegionOwner(_contracts, _regionId, _newOwner);\r\n\t\tif(marketPixelPrice > regionCurrentPixelPrice) {\r\n\t\t\tdataStorage.setRegionCurrentPixelPrice(_regionId, marketPixelPrice);\r\n\t\t}\r\n\t\tdataStorage.setRegionBlockUpdatedAt(_regionId, block.number);\r\n\t\tdataStorage.setRegionUpdatedAt(_regionId, block.timestamp);\r\n\t}\r\n\r\n\tfunction updateRegionPixelPrice(address[16] _contracts, uint256 _regionId, uint256 _pixelPrice) public {\r\n\t\tvar dataStorage = BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts));\r\n\t\trequire(BdpOwnership.ownerOf(_contracts, _regionId) == msg.sender);\r\n\t\tvar regionCurrentPixelPrice = dataStorage.getRegionCurrentPixelPrice(_regionId);\r\n\t\trequire(regionCurrentPixelPrice != 0); // region was purchased\r\n\r\n\t\tvar marketPixelPrice = BdpCalculator.calculateCurrentMarketPixelPrice(_contracts);\r\n\t\trequire(_pixelPrice >= marketPixelPrice);\r\n\r\n\t\tvar (area,,) = BdpCalculator.calculateArea(_contracts, _regionId);\r\n\t\t_processUpdateFee(_contracts, _pixelPrice * area / 20);\r\n\r\n\t\tdataStorage.setRegionCurrentPixelPrice(_regionId, _pixelPrice);\r\n\t}\r\n\r\n\tfunction _processUpdateFee(address[16] _contracts, uint256 _updateFee) internal {\r\n\t\trequire(msg.value >= _updateFee);\r\n\r\n\t\tif(msg.value > _updateFee) {\r\n\t\t\tvar change = msg.value - _updateFee;\r\n\t\t\tmsg.sender.transfer(change);\r\n\t\t}\r\n\r\n\t\tvar forwardUpdateFeesTo = BdpPriceStorage(BdpContracts.getBdpPriceStorage(_contracts)).getForwardUpdateFeesTo();\r\n\t\tif(forwardUpdateFeesTo != address(0)) {\r\n\t\t\tforwardUpdateFeesTo.transfer(_updateFee);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _updateRegionImage(address[16] _contracts, BdpDataStorage _dataStorage, uint256 _regionId, uint256 _imageId, uint256[] _imageData, bool _swapImages, bool _clearImage) internal {\r\n\t\tvar imageStorage = BdpImageStorage(BdpContracts.getBdpImageStorage(_contracts));\r\n\t\tvar currentImageId = _dataStorage.getRegionCurrentImageId(_regionId);\r\n\t\tif(_imageId != 0) {\r\n\t\t\tif(currentImageId != 0) {\r\n\t\t\t\timageStorage.setImageCurrentRegionId(currentImageId, 0);\r\n\t\t\t}\r\n\t\t\t_dataStorage.setRegionCurrentImageId(_regionId, _imageId);\r\n\t\t\timageStorage.setImageCurrentRegionId(_imageId, _regionId);\r\n\t\t}\r\n\r\n\t\tif(_imageData.length > 0) {\r\n\t\t\tif(currentImageId != 0) {\r\n\t\t\t\timageStorage.setImageCurrentRegionId(currentImageId, 0);\r\n\t\t\t}\r\n\t\t\tvar (, width, height) = BdpCalculator.calculateArea(_contracts, _regionId);\r\n\t\t\tvar imageId = imageStorage.createImage(msg.sender, _regionId, uint16(width), uint16(height), 1, 1);\r\n\t\t\timageStorage.setImageData(imageId, 1, _imageData);\r\n\t\t\t_dataStorage.setRegionCurrentImageId(_regionId, imageId);\r\n\t\t\timageStorage.setImageCurrentRegionId(imageId, _regionId);\r\n\t\t}\r\n\r\n\t\tif(_swapImages) {\r\n\t\t\tif(currentImageId != 0) {\r\n\t\t\t\timageStorage.setImageCurrentRegionId(currentImageId, 0);\r\n\t\t\t}\r\n\t\t\tvar nextImageId = _dataStorage.getRegionNextImageId(_regionId);\r\n\t\t\t_dataStorage.setRegionCurrentImageId(_regionId, nextImageId);\r\n\t\t\timageStorage.setImageCurrentRegionId(nextImageId, _regionId);\r\n\t\t\t_dataStorage.setRegionNextImageId(_regionId, 0);\r\n\t\t}\r\n\r\n\t\tif(_clearImage) {\r\n\t\t\tif(currentImageId != 0) {\r\n\t\t\t\timageStorage.setImageCurrentRegionId(currentImageId, 0);\r\n\t\t\t}\r\n\t\t\t_dataStorage.setRegionCurrentImageId(_regionId, 0);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _updateRegionUrl(BdpDataStorage _dataStorage, uint256 _regionId, uint8[128] _url, bool _deleteUrl) internal {\r\n\t\tif(_url[0] != 0) {\r\n\t\t\t_dataStorage.setRegionUrl(_regionId, _url);\r\n\t\t}\r\n\t\tif(_deleteUrl) {\r\n\t\t\tuint8[128] memory emptyUrl;\r\n\t\t\t_dataStorage.setRegionUrl(_regionId, emptyUrl);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _updateRegionOwner(address[16] _contracts, uint256 _regionId, address _newOwner) internal {\r\n\t\tif(_newOwner != address(0)) {\r\n\t\t\tBdpOwnership.clearApprovalAndTransfer(_contracts, msg.sender, _newOwner, _regionId);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/libraries/BdpTransfer.sol\r\n\r\nlibrary BdpTransfer {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tfunction approve(address[16] _contracts, address _to, uint256 _regionId) public {\r\n\t\trequire(BdpOwnership.ownerOf(_contracts, _regionId) == msg.sender);\r\n\t\tBdpOwnership.approve(_contracts, _to, _regionId);\r\n\t}\r\n\r\n\tfunction purchase(address[16] _contracts, uint256 _regionId) public {\r\n\t\tuint256 pixelPrice = BdpCalculator.calculateRegionSalePixelPrice(_contracts, _regionId);\r\n\t\tvar (area,,) = BdpCalculator.calculateArea(_contracts, _regionId);\r\n\t\tuint256 regionPrice = pixelPrice * area;\r\n\r\n\t\trequire(msg.value >= regionPrice );\r\n\r\n\t\tif(msg.value > regionPrice) {\r\n\t\t\tuint256 change = msg.value - regionPrice;\r\n\t\t\tmsg.sender.transfer(change);\r\n\t\t}\r\n\r\n\t\tif(BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).getRegionCurrentPixelPrice(_regionId) > 0) { // send 95% ether to ownerOf(_regionId)\r\n\t\t\tuint256 etherToPreviousOwner = regionPrice * 19 / 20;\r\n\t\t\tBdpOwnership.ownerOf(_contracts, _regionId).transfer(etherToPreviousOwner);\r\n\t\t\tvar forwardUpdateFeesTo = BdpPriceStorage(BdpContracts.getBdpPriceStorage(_contracts)).getForwardUpdateFeesTo();\r\n\t\t\tif(forwardUpdateFeesTo != address(0)) {\r\n\t\t\t\tforwardUpdateFeesTo.transfer(regionPrice - etherToPreviousOwner);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar forwardPurchaseFeesTo = BdpPriceStorage(BdpContracts.getBdpPriceStorage(_contracts)).getForwardPurchaseFeesTo();\r\n\t\t\tif(forwardPurchaseFeesTo != address(0)) {\r\n\t\t\t\tforwardPurchaseFeesTo.transfer(regionPrice);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tBdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).setRegionCurrentPixelPrice(_regionId, pixelPrice);\r\n\t\tBdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).setRegionBlockUpdatedAt(_regionId, block.number);\r\n\t\tBdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).setRegionUpdatedAt(_regionId, block.timestamp);\r\n\t\tBdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).setRegionPurchasedAt(_regionId, block.timestamp);\r\n\t\tBdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).setRegionPurchasedPixelPrice(_regionId, pixelPrice);\r\n\r\n\t\tBdpOwnership.clearApprovalAndTransfer(_contracts, BdpOwnership.ownerOf(_contracts, _regionId), msg.sender, _regionId);\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/controller/BdpController.sol\r\n\r\ncontract BdpController is BdpBase {\r\n\r\n\tfunction name() external pure returns (string) {\r\n\t\treturn \"The Billion Dollar Picture\";\r\n\t}\r\n\r\n\tfunction symbol() external pure returns (string) {\r\n\t\treturn \"BDP\";\r\n\t}\r\n\r\n\tfunction tokenURI(uint256 _tokenId) external view returns (string _tokenURI) {\r\n\t\t_tokenURI = \"https://www.billiondollarpicture.com/#0000000\";\r\n\t\tbytes memory tokenURIBytes = bytes(_tokenURI);\r\n\t\ttokenURIBytes[34] = byte(48+(_tokenId / 1000000) % 10);\r\n\t\ttokenURIBytes[35] = byte(48+(_tokenId / 100000) % 10);\r\n\t\ttokenURIBytes[36] = byte(48+(_tokenId / 10000) % 10);\r\n\t\ttokenURIBytes[37] = byte(48+(_tokenId / 1000) % 10);\r\n\t\ttokenURIBytes[38] = byte(48+(_tokenId / 100) % 10);\r\n\t\ttokenURIBytes[39] = byte(48+(_tokenId / 10) % 10);\r\n\t\ttokenURIBytes[40] = byte(48+(_tokenId / 1) % 10);\r\n\t}\r\n\r\n\r\n\t// BdpCrud\r\n\r\n\tfunction createRegion(uint256 _x1, uint256 _y1, uint256 _x2, uint256 _y2) public onlyAuthorized returns (uint256) {\r\n\t\tBdpCrud.createRegion(contracts, ownerAddress, _x1, _y1, _x2, _y2);\r\n\t}\r\n\r\n\tfunction deleteRegion(uint256 _regionId) public onlyAuthorized returns (uint256) {\r\n\t\tBdpCrud.deleteRegion(contracts, _regionId);\r\n\t}\r\n\r\n\tfunction setupRegion(uint256 _regionId, uint256 _imageId, uint256[] _imageData, bool _swapImages, uint8[128] _url) whileContractIsActive public {\r\n\t\tBdpCrud.setupRegion(contracts, _regionId, _imageId, _imageData, _swapImages, _url);\r\n\t}\r\n\r\n\tfunction updateRegion(uint256 _regionId, uint256 _imageId, uint256[] _imageData, bool _swapImages, bool _clearImage, uint8[128] _url, bool _deleteUrl, address _newOwner) whileContractIsActive public payable {\r\n\t\tBdpCrud.updateRegion(contracts, _regionId, _imageId, _imageData, _swapImages, _clearImage, _url, _deleteUrl, _newOwner);\r\n\t}\r\n\r\n\tfunction updateRegionPixelPrice(uint256 _regionId, uint256 _pixelPrice) whileContractIsActive public payable {\r\n\t\tBdpCrud.updateRegionPixelPrice(contracts, _regionId, _pixelPrice);\r\n\t}\r\n\r\n\r\n\t// BdpImage\r\n\r\n\tfunction checkImageInput(uint256 _regionId, uint256 _imageId, uint256[] _imageData, bool _swapImages, bool _clearImage) view public {\r\n\t\tBdpImage.checkImageInput(contracts, _regionId, _imageId, _imageData, _swapImages, _clearImage);\r\n\t}\r\n\r\n\tfunction setNextImagePart(uint256 _regionId, uint16 _part, uint16 _partsCount, uint16 _imageDescriptor, uint256[] _imageData) whileContractIsActive public {\r\n\t\tBdpImage.setNextImagePart(contracts, _regionId, _part, _partsCount, _imageDescriptor, _imageData);\r\n\t}\r\n\r\n\r\n\t// BdpOwnership\r\n\r\n\tfunction ownerOf(uint256 _tokenId) external view returns (address _owner) {\r\n\t\treturn BdpOwnership.ownerOf(contracts, _tokenId);\r\n\t}\r\n\r\n\tfunction totalSupply() external view returns (uint256 _count) {\r\n\t\treturn BdpOwnershipStorage(BdpContracts.getBdpOwnershipStorage(contracts)).getTokenIdsLength();\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) external view returns (uint256 _count) {\r\n\t\treturn BdpOwnership.balanceOf(contracts, _owner);\r\n\t}\r\n\r\n\tfunction tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 _tokenId) {\r\n\t\treturn BdpOwnershipStorage(BdpContracts.getBdpOwnershipStorage(contracts)).getOwnedToken(_owner, _index);\r\n\t}\r\n\r\n\tfunction tokenByIndex(uint256 _index) external view returns (uint256) {\r\n\t\treturn BdpOwnershipStorage(BdpContracts.getBdpOwnershipStorage(contracts)).getTokenIdByIndex(_index);\r\n\t}\r\n\r\n\tfunction getOwnedArea(address _owner) public view returns (uint256) {\r\n\t\treturn BdpOwnershipStorage(BdpContracts.getBdpOwnershipStorage(contracts)).getOwnedArea(_owner);\r\n\t}\r\n\r\n\r\n\t// BdpTransfer\r\n\r\n\tfunction purchase(uint256 _regionId) whileContractIsActive external payable {\r\n\t\tBdpTransfer.purchase(contracts, _regionId);\r\n\t}\r\n\r\n\r\n\t// Withdraw\r\n\r\n\tfunction withdrawBalance() external onlyOwner {\r\n\t\townerAddress.transfer(this.balance);\r\n\t}\r\n\r\n\r\n\t// BdpControllerHelper\r\n\r\n\tfunction () public {\r\n\t\taddress _impl = BdpContracts.getBdpControllerHelper(contracts);\r\n\t\trequire(_impl != address(0));\r\n\t\tbytes memory data = msg.data;\r\n\r\n\t\tassembly {\r\n\t\t\tlet result := delegatecall(gas, _impl, add(data, 0x20), mload(data), 0, 0)\r\n\t\t\tlet size := returndatasize\r\n\t\t\tlet ptr := mload(0x40)\r\n\t\t\treturndatacopy(ptr, 0, size)\r\n\t\t\tswitch result\r\n\t\t\tcase 0 { revert(ptr, size) }\r\n\t\t\tdefault { return(ptr, size) }\r\n\t\t}\r\n\t}\r\n\r\n\tfunction BdpController(bytes8 _version) public {\r\n\t\townerAddress = msg.sender;\r\n\t\tmanagerAddress = msg.sender;\r\n\t\tversion = _version;\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_regionId\",\"type\":\"uint256\"}],\"name\":\"deleteRegion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setSetupCompleted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x1\",\"type\":\"uint256\"},{\"name\":\"_y1\",\"type\":\"uint256\"},{\"name\":\"_x2\",\"type\":\"uint256\"},{\"name\":\"_y2\",\"type\":\"uint256\"}],\"name\":\"createRegion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setupCompleted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_regionId\",\"type\":\"uint256\"},{\"name\":\"_pixelPrice\",\"type\":\"uint256\"}],\"name\":\"updateRegionPixelPrice\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"_tokenURI\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_regionId\",\"type\":\"uint256\"},{\"name\":\"_imageId\",\"type\":\"uint256\"},{\"name\":\"_imageData\",\"type\":\"uint256[]\"},{\"name\":\"_swapImages\",\"type\":\"bool\"},{\"name\":\"_clearImage\",\"type\":\"bool\"},{\"name\":\"_url\",\"type\":\"uint8[128]\"},{\"name\":\"_deleteUrl\",\"type\":\"bool\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"updateRegion\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_regionId\",\"type\":\"uint256\"},{\"name\":\"_part\",\"type\":\"uint16\"},{\"name\":\"_partsCount\",\"type\":\"uint16\"},{\"name\":\"_imageDescriptor\",\"type\":\"uint16\"},{\"name\":\"_imageData\",\"type\":\"uint256[]\"}],\"name\":\"setNextImagePart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnedArea\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_regionId\",\"type\":\"uint256\"},{\"name\":\"_imageId\",\"type\":\"uint256\"},{\"name\":\"_imageData\",\"type\":\"uint256[]\"},{\"name\":\"_swapImages\",\"type\":\"bool\"},{\"name\":\"_clearImage\",\"type\":\"bool\"}],\"name\":\"checkImageInput\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_regionId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contracts\",\"type\":\"address[16]\"}],\"name\":\"setContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_regionId\",\"type\":\"uint256\"},{\"name\":\"_imageId\",\"type\":\"uint256\"},{\"name\":\"_imageData\",\"type\":\"uint256[]\"},{\"name\":\"_swapImages\",\"type\":\"bool\"},{\"name\":\"_url\",\"type\":\"uint8[128]\"}],\"name\":\"setupRegion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_version\",\"type\":\"bytes8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","ContractName":"BdpController","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"3730316565316220000000000000000000000000000000000000000000000000","Library":"BdpOwnership:e5568ad7f29e67890bfe8f76a0f50b4113a62c77;BdpImage:b80f7ad4db894093658474ae57d94345bea474f4;BdpCrud:d8479c546b80ce91916c7800c1840bd6446b06ce;BdpTransfer:1d7b5788d3844010664900615e966f8e9e464738","SwarmSource":"bzzr://f7585976fb8cac48f79d304e9ff9ced717e51fc1ea1146831e108ca047375b60"}]}