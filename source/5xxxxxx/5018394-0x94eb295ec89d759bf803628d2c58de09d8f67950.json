{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Token {\r\n\r\n    function totalSupply() constant returns (uint supply) {}\r\n    function balanceOf(address _owner) constant returns (uint balance) {}\r\n    function transfer(address _to, uint _value) returns (bool success) {}\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success) {}\r\n    function approve(address _spender, uint _value) returns (bool success) {}\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {}\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\ncontract ERC721 {\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract ERC721BuyListing is Ownable {\r\n    struct Listing {\r\n        address seller;\r\n        uint256 price;\r\n        uint256 dateStarts;\r\n        uint256 dateEnds;\r\n    }\r\n    ERC721 public sourceContract;\r\n    uint256 public ownerPercentage;\r\n    mapping (uint256 => Listing) tokenIdToListing;\r\n\r\n    string constant public version = \"1.0.0\";\r\n    event ListingCreated(uint256 indexed tokenId, uint256 price, uint256 dateStarts, uint256 dateEnds, address indexed seller);\r\n    event ListingCancelled(uint256 indexed tokenId, uint256 dateCancelled);\r\n    event ListingBought(uint256 indexed tokenId, uint256 price, uint256 dateBought, address buyer);\r\n\r\n    function ERC721BuyListing(address targetContract, uint256 percentage) public {\r\n        ownerPercentage = percentage;\r\n        ERC721 contractPassed = ERC721(targetContract);\r\n        sourceContract = contractPassed;\r\n    }\r\n    function owns(address claimant, uint256 tokenId) internal view returns (bool) {\r\n        return (sourceContract.ownerOf(tokenId) == claimant);\r\n    }\r\n\r\n    function updateOwnerPercentage(uint256 percentage) external onlyOwner {\r\n        ownerPercentage = percentage;\r\n    }\r\n\r\n    function withdrawBalance() onlyOwner external {\r\n        assert(owner.send(this.balance));\r\n    }\r\n    function approveToken(address token, uint256 amount) onlyOwner external {\r\n        assert(Token(token).approve(owner, amount));\r\n    }\r\n\r\n    function() external payable { }\r\n\r\n    function createListing(uint256 tokenId, uint256 price, uint256 dateEnds) external {\r\n        require(owns(msg.sender, tokenId));\r\n        require(price > 0);\r\n        Listing memory listing = Listing(msg.sender, price, now, dateEnds);\r\n        tokenIdToListing[tokenId] = listing;\r\n        ListingCreated(tokenId, listing.price, now, dateEnds, listing.seller);\r\n    }\r\n\r\n    function buyListing(uint256 tokenId) external payable {\r\n        Listing storage listing = tokenIdToListing[tokenId];\r\n        require(msg.value == listing.price);\r\n        require(now <= listing.dateEnds);\r\n        address seller = listing.seller;\r\n        uint256 currentPrice = listing.price;\r\n        delete tokenIdToListing[tokenId];\r\n        sourceContract.transferFrom(seller, msg.sender, tokenId);\r\n        seller.transfer(currentPrice - (currentPrice * ownerPercentage / 10000));\r\n        ListingBought(tokenId, listing.price, now, msg.sender);\r\n\r\n    }\r\n\r\n    function cancelListing(uint256 tokenId) external {\r\n        Listing storage listing = tokenIdToListing[tokenId];\r\n        require(msg.sender == listing.seller || msg.sender == owner);\r\n        delete tokenIdToListing[tokenId];\r\n        ListingCancelled(tokenId, now);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"updateOwnerPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyListing\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sourceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"dateEnds\",\"type\":\"uint256\"}],\"name\":\"createListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"targetContract\",\"type\":\"address\"},{\"name\":\"percentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dateStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dateEnds\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ListingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dateCancelled\",\"type\":\"uint256\"}],\"name\":\"ListingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dateBought\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"ListingBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ERC721BuyListing","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000006012c8cf97bead5deae237070f9587f8e7a266d00000000000000000000000000000000000000000000000000000000000000c8","Library":"","SwarmSource":"bzzr://70e1cfab81deafaf26ad199829e1d0d305801c6363d4791a3705b66d63225a54"}]}