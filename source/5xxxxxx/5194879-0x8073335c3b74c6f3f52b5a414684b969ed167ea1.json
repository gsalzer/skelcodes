{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n//Interfaces\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ninterface ERC20 {\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n}\r\n\r\ncontract UnilotToken is ERC20 {\r\n    struct TokenStage {\r\n        string name;\r\n        uint numCoinsStart;\r\n        uint coinsAvailable;\r\n        uint bonus;\r\n        uint startsAt;\r\n        uint endsAt;\r\n        uint balance; //Amount of ether sent during this stage\r\n    }\r\n\r\n    //Token symbol\r\n    string public constant symbol = \"UNIT\";\r\n    //Token name\r\n    string public constant name = \"Unilot token\";\r\n    //It can be reeeealy small\r\n    uint8 public constant decimals = 18;\r\n\r\n    //This one duplicates the above but will have to use it because of\r\n    //solidity bug with power operation\r\n    uint public constant accuracy = 1000000000000000000;\r\n\r\n    //500 mln tokens\r\n    uint256 internal _totalSupply = 500 * (10**6) * accuracy;\r\n\r\n    //Public investor can buy tokens for 30 ether at maximum\r\n    uint256 public constant singleInvestorCap = 30 ether; //30 ether\r\n\r\n    //Distribution units\r\n    uint public constant DST_ICO     = 62; //62%\r\n    uint public constant DST_RESERVE = 10; //10%\r\n    uint public constant DST_BOUNTY  = 3;  //3%\r\n    //Referral and Bonus Program\r\n    uint public constant DST_R_N_B_PROGRAM = 10; //10%\r\n    uint public constant DST_ADVISERS      = 5;  //5%\r\n    uint public constant DST_TEAM          = 10; //10%\r\n\r\n    //Referral Bonuses\r\n    uint public constant REFERRAL_BONUS_LEVEL1 = 5; //5%\r\n    uint public constant REFERRAL_BONUS_LEVEL2 = 4; //4%\r\n    uint public constant REFERRAL_BONUS_LEVEL3 = 3; //3%\r\n    uint public constant REFERRAL_BONUS_LEVEL4 = 2; //2%\r\n    uint public constant REFERRAL_BONUS_LEVEL5 = 1; //1%\r\n\r\n    //Token amount\r\n    //25 mln tokens\r\n    uint public constant TOKEN_AMOUNT_PRE_ICO = 25 * (10**6) * accuracy;\r\n    //5 mln tokens\r\n    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE1 = 5 * (10**6) * accuracy;\r\n    //5 mln tokens\r\n    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE2 = 5 * (10**6) * accuracy;\r\n    //5 mln tokens\r\n    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE3 = 5 * (10**6) * accuracy;\r\n    //5 mln tokens\r\n    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE4 = 5 * (10**6) * accuracy;\r\n    //122.5 mln tokens\r\n    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE5 = 1225 * (10**5) * accuracy;\r\n    //265 mln tokens\r\n    uint public constant TOKEN_AMOUNT_ICO_STAGE2 = 1425 * (10**5) * accuracy;\r\n\r\n    uint public constant BONUS_PRE_ICO = 40; //40%\r\n    uint public constant BONUS_ICO_STAGE1_PRE_SALE1 = 35; //35%\r\n    uint public constant BONUS_ICO_STAGE1_PRE_SALE2 = 30; //30%\r\n    uint public constant BONUS_ICO_STAGE1_PRE_SALE3 = 25; //25%\r\n    uint public constant BONUS_ICO_STAGE1_PRE_SALE4 = 20; //20%\r\n    uint public constant BONUS_ICO_STAGE1_PRE_SALE5 = 0; //0%\r\n    uint public constant BONUS_ICO_STAGE2 = 0; //No bonus\r\n\r\n    //Token Price on Coin Offer\r\n    uint256 public constant price = 79 szabo; //0.000079 ETH\r\n\r\n    address public constant ADVISORS_WALLET = 0x77660795BD361Cd43c3627eAdad44dDc2026aD17;\r\n    address public constant RESERVE_WALLET = 0x731B47847352fA2cFf83D5251FD6a5266f90878d;\r\n    address public constant BOUNTY_WALLET = 0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb;\r\n    address public constant R_N_D_WALLET = 0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb;\r\n    address public constant STORAGE_WALLET = 0xE2A8F147fc808738Cab152b01C7245F386fD8d89;\r\n\r\n    // Owner of this contract\r\n    address public administrator;\r\n\r\n    // Balances for each account\r\n    mapping(address => uint256) balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    //Mostly needed for internal use\r\n    uint256 internal totalCoinsAvailable;\r\n\r\n    //All token stages. Total 6 stages\r\n    TokenStage[7] stages;\r\n\r\n    //Index of current stage in stage array\r\n    uint currentStage;\r\n\r\n    //Enables or disables debug mode. Debug mode is set only in constructor.\r\n    bool isDebug = false;\r\n\r\n    event StageUpdated(string from, string to);\r\n\r\n    // Functions with this modifier can only be executed by the owner\r\n    modifier onlyAdministrator() {\r\n        require(msg.sender == administrator);\r\n        _;\r\n    }\r\n\r\n    modifier notAdministrator() {\r\n        require(msg.sender != administrator);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDuringICO() {\r\n        require(currentStage < stages.length);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAfterICO(){\r\n        require(currentStage >= stages.length);\r\n        _;\r\n    }\r\n\r\n    modifier meetTheCap() {\r\n        require(msg.value >= price); // At least one token\r\n        _;\r\n    }\r\n\r\n    modifier isFreezedReserve(address _address) {\r\n        require( ( _address == RESERVE_WALLET ) && now > (stages[ (stages.length - 1) ].endsAt + 182 days));\r\n        _;\r\n    }\r\n\r\n    // Constructor\r\n    function UnilotToken()\r\n        public\r\n    {\r\n        administrator = msg.sender;\r\n        totalCoinsAvailable = _totalSupply;\r\n        //Was as fn parameter for debugging\r\n        isDebug = false;\r\n\r\n        _setupStages();\r\n        _proceedStage();\r\n    }\r\n\r\n    function prealocateCoins()\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        totalCoinsAvailable -= balances[ADVISORS_WALLET] += ( ( _totalSupply * DST_ADVISERS ) / 100 );\r\n        totalCoinsAvailable -= balances[RESERVE_WALLET] += ( ( _totalSupply * DST_RESERVE ) / 100 );\r\n\r\n        address[7] memory teamWallets = getTeamWallets();\r\n        uint teamSupply = ( ( _totalSupply * DST_TEAM ) / 100 );\r\n        uint memberAmount = teamSupply / teamWallets.length;\r\n\r\n        for(uint i = 0; i < teamWallets.length; i++) {\r\n            if ( i == ( teamWallets.length - 1 ) ) {\r\n                memberAmount = teamSupply;\r\n            }\r\n\r\n            balances[teamWallets[i]] += memberAmount;\r\n            teamSupply -= memberAmount;\r\n            totalCoinsAvailable -= memberAmount;\r\n        }\r\n    }\r\n\r\n    function getTeamWallets()\r\n        public\r\n        pure\r\n        returns (address[7] memory result)\r\n    {\r\n        result[0] = 0x40e3D8fFc46d73Ab5DF878C751D813a4cB7B388D;\r\n        result[1] = 0x5E065a80f6635B6a46323e3383057cE6051aAcA0;\r\n        result[2] = 0x0cF3585FbAB2a1299F8347a9B87CF7B4fcdCE599;\r\n        result[3] = 0x5fDd3BA5B6Ff349d31eB0a72A953E454C99494aC;\r\n        result[4] = 0xC9be9818eE1B2cCf2E4f669d24eB0798390Ffb54;\r\n        result[5] = 0x77660795BD361Cd43c3627eAdad44dDc2026aD17;\r\n        result[6] = 0xd13289203889bD898d49e31a1500388441C03663;\r\n    }\r\n\r\n    function _setupStages()\r\n        internal\r\n    {\r\n        //Presale stage\r\n        stages[0].name = 'Presale stage';\r\n        stages[0].numCoinsStart = totalCoinsAvailable;\r\n        stages[0].coinsAvailable = TOKEN_AMOUNT_PRE_ICO;\r\n        stages[0].bonus = BONUS_PRE_ICO;\r\n\r\n        if (isDebug) {\r\n            stages[0].startsAt = now;\r\n            stages[0].endsAt = stages[0].startsAt + 30 seconds;\r\n        } else {\r\n            stages[0].startsAt = 1515610800; //10th of January 2018 at 19:00UTC\r\n            stages[0].endsAt = 1518894000; //17th of February 2018 at 19:00UTC\r\n        }\r\n\r\n        //ICO Stage 1 pre-sale 1\r\n        stages[1].name = 'ICO Stage 1 pre-sale 1';\r\n        stages[1].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE1;\r\n        stages[1].bonus = BONUS_ICO_STAGE1_PRE_SALE1;\r\n\r\n        if (isDebug) {\r\n            stages[1].startsAt = stages[0].endsAt;\r\n            stages[1].endsAt = stages[1].startsAt + 30 seconds;\r\n        } else {\r\n            stages[1].startsAt = 1519326000; //22th of February 2018 at 19:00UTC\r\n            stages[1].endsAt = 1521745200; //22th of March 2018 at 19:00UTC\r\n        }\r\n\r\n        //ICO Stage 1 pre-sale 2\r\n        stages[2].name = 'ICO Stage 1 pre-sale 2';\r\n        stages[2].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE2;\r\n        stages[2].bonus = BONUS_ICO_STAGE1_PRE_SALE2;\r\n\r\n        stages[2].startsAt = stages[1].startsAt;\r\n        stages[2].endsAt = stages[1].endsAt;\r\n\r\n        //ICO Stage 1 pre-sale 3\r\n        stages[3].name = 'ICO Stage 1 pre-sale 3';\r\n        stages[3].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE3;\r\n        stages[3].bonus = BONUS_ICO_STAGE1_PRE_SALE3;\r\n\r\n        stages[3].startsAt = stages[1].startsAt;\r\n        stages[3].endsAt = stages[1].endsAt;\r\n\r\n        //ICO Stage 1 pre-sale 4\r\n        stages[4].name = 'ICO Stage 1 pre-sale 4';\r\n        stages[4].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE4;\r\n        stages[4].bonus = BONUS_ICO_STAGE1_PRE_SALE4;\r\n\r\n        stages[4].startsAt = stages[1].startsAt;\r\n        stages[4].endsAt = stages[1].endsAt;\r\n\r\n        //ICO Stage 1 pre-sale 5\r\n        stages[5].name = 'ICO Stage 1 pre-sale 5';\r\n        stages[5].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE5;\r\n        stages[5].bonus = BONUS_ICO_STAGE1_PRE_SALE5;\r\n\r\n        stages[5].startsAt = stages[1].startsAt;\r\n        stages[5].endsAt = stages[1].endsAt;\r\n\r\n        //ICO Stage 2\r\n        stages[6].name = 'ICO Stage 2';\r\n        stages[6].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE2;\r\n        stages[6].bonus = BONUS_ICO_STAGE2;\r\n\r\n        if (isDebug) {\r\n            stages[6].startsAt = stages[5].endsAt;\r\n            stages[6].endsAt = stages[6].startsAt + 30 seconds;\r\n        } else {\r\n            stages[6].startsAt = 1524250800; //20th of April 2018 at 19:00UTC\r\n            stages[6].endsAt = 1526842800; //20th of May 2018 at 19:00UTC\r\n        }\r\n    }\r\n\r\n    function _proceedStage()\r\n        internal\r\n    {\r\n        while (true) {\r\n            if ( currentStage < stages.length\r\n            && (now >= stages[currentStage].endsAt || getAvailableCoinsForCurrentStage() == 0) ) {\r\n                currentStage++;\r\n                uint totalTokensForSale = TOKEN_AMOUNT_PRE_ICO\r\n                                    + TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE1\r\n                                    + TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE2\r\n                                    + TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE3\r\n                                    + TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE4\r\n                                    + TOKEN_AMOUNT_ICO_STAGE2;\r\n\r\n                if (currentStage >= stages.length) {\r\n                    //Burning all unsold tokens and proportionally other for deligation\r\n                    _totalSupply -= ( ( ( stages[(stages.length - 1)].coinsAvailable * DST_BOUNTY ) / 100 )\r\n                                    + ( ( stages[(stages.length - 1)].coinsAvailable * DST_R_N_B_PROGRAM ) / 100 ) );\r\n\r\n                    balances[BOUNTY_WALLET] = (((totalTokensForSale - stages[(stages.length - 1)].coinsAvailable) * DST_BOUNTY)/100);\r\n                    balances[R_N_D_WALLET] = (((totalTokensForSale - stages[(stages.length - 1)].coinsAvailable) * DST_R_N_B_PROGRAM)/100);\r\n\r\n                    totalCoinsAvailable = 0;\r\n                    break; //ICO ended\r\n                }\r\n\r\n                stages[currentStage].numCoinsStart = totalCoinsAvailable;\r\n\r\n                if ( currentStage > 0 ) {\r\n                    //Move all left tokens to last stage\r\n                    stages[(stages.length - 1)].coinsAvailable += stages[ (currentStage - 1 ) ].coinsAvailable;\r\n                    StageUpdated(stages[currentStage - 1].name, stages[currentStage].name);\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getTotalCoinsAvailable()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return totalCoinsAvailable;\r\n    }\r\n\r\n    function getAvailableCoinsForCurrentStage()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        TokenStage memory stage = stages[currentStage];\r\n\r\n        return stage.coinsAvailable;\r\n    }\r\n\r\n    //------------- ERC20 methods -------------//\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner)\r\n        public\r\n        constant\r\n        returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _amount)\r\n        public\r\n        onlyAfterICO\r\n        isFreezedReserve(_to)\r\n        returns (bool success)\r\n    {\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        onlyAfterICO\r\n        isFreezedReserve(_from)\r\n        isFreezedReserve(_to)\r\n        returns (bool success)\r\n    {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount)\r\n        public\r\n        onlyAfterICO\r\n        isFreezedReserve(_spender)\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        constant\r\n        returns (uint256 remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    //------------- ERC20 Methods END -------------//\r\n\r\n    //Returns bonus for certain level of reference\r\n    function calculateReferralBonus(uint amount, uint level)\r\n        public\r\n        pure\r\n        returns (uint bonus)\r\n    {\r\n        bonus = 0;\r\n\r\n        if ( level == 1 ) {\r\n            bonus = ( ( amount * REFERRAL_BONUS_LEVEL1 ) / 100 );\r\n        } else if (level == 2) {\r\n            bonus = ( ( amount * REFERRAL_BONUS_LEVEL2 ) / 100 );\r\n        } else if (level == 3) {\r\n            bonus = ( ( amount * REFERRAL_BONUS_LEVEL3 ) / 100 );\r\n        } else if (level == 4) {\r\n            bonus = ( ( amount * REFERRAL_BONUS_LEVEL4 ) / 100 );\r\n        } else if (level == 5) {\r\n            bonus = ( ( amount * REFERRAL_BONUS_LEVEL5 ) / 100 );\r\n        }\r\n    }\r\n\r\n    function calculateBonus(uint amountOfTokens)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return ( ( stages[currentStage].bonus * amountOfTokens ) / 100 );\r\n    }\r\n\r\n    event TokenPurchased(string stage, uint valueSubmitted, uint valueRefunded, uint tokensPurchased);\r\n\r\n    function ()\r\n        public\r\n        payable\r\n        notAdministrator\r\n        onlyDuringICO\r\n        meetTheCap\r\n    {\r\n        _proceedStage();\r\n        require(currentStage < stages.length);\r\n        require(stages[currentStage].startsAt <= now && now < stages[currentStage].endsAt);\r\n        require(getAvailableCoinsForCurrentStage() > 0);\r\n\r\n        uint requestedAmountOfTokens = ( ( msg.value * accuracy ) / price );\r\n        uint amountToBuy = requestedAmountOfTokens;\r\n        uint refund = 0;\r\n\r\n        if ( amountToBuy > getAvailableCoinsForCurrentStage() ) {\r\n            amountToBuy = getAvailableCoinsForCurrentStage();\r\n            refund = ( ( (requestedAmountOfTokens - amountToBuy) / accuracy ) * price );\r\n\r\n            // Returning ETH\r\n            msg.sender.transfer( refund );\r\n        }\r\n\r\n        TokenPurchased(stages[currentStage].name, msg.value, refund, amountToBuy);\r\n        stages[currentStage].coinsAvailable -= amountToBuy;\r\n        stages[currentStage].balance += (msg.value - refund);\r\n\r\n        uint amountDelivered = amountToBuy + calculateBonus(amountToBuy);\r\n\r\n        balances[msg.sender] += amountDelivered;\r\n        totalCoinsAvailable -= amountDelivered;\r\n\r\n        if ( getAvailableCoinsForCurrentStage() == 0 ) {\r\n            _proceedStage();\r\n        }\r\n\r\n        STORAGE_WALLET.transfer(this.balance);\r\n    }\r\n\r\n    //It doesn't really close the stage\r\n    //It just needed to push transaction to update stage and update block.now\r\n    function closeStage()\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        _proceedStage();\r\n    }\r\n}\r\n\r\ncontract ERC20Contract is ERC20 {\r\n    //Token symbol\r\n    string public constant symbol = \"UNIT\";\r\n\r\n    //Token name\r\n    string public constant name = \"Unilot token\";\r\n\r\n    //It can be reeeealy small\r\n    uint8 public constant decimals = 18;\r\n\r\n    // Balances for each account\r\n    mapping(address => uint96) public balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint96)) allowed;\r\n\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns (uint);\r\n\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner)\r\n        public\r\n        constant\r\n        returns (uint balance)\r\n    {\r\n        return uint(balances[_owner]);\r\n    }\r\n\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint _amount)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= uint96(_amount);\r\n            balances[_to] += uint96(_amount);\r\n            Transfer(msg.sender, _to, _amount);\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        returns (bool success)\r\n    {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= uint96(_amount);\r\n            allowed[_from][msg.sender] -= uint96(_amount);\r\n            balances[_to] += uint96(_amount);\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint _amount)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = uint96(_amount);\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        constant\r\n        returns (uint remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ninterface TokenStagesManager {\r\n    function isDebug() public constant returns(bool);\r\n    function setToken(address tokenAddress) public;\r\n    function getPool() public constant returns (uint96);\r\n    function getBonus() public constant returns (uint8);\r\n    function isFreezeTimeout() public constant returns (bool);\r\n    function isTimeout() public constant returns (bool);\r\n    function isICO() public view returns(bool);\r\n    function isCanList() public view returns (bool);\r\n    function calculateBonus(uint96 amount) public view returns (uint88);\r\n    function delegateFromPool(uint96 amount) public;\r\n    function delegateFromBonus(uint88 amount) public;\r\n    function delegateFromReferral(uint88 amount) public;\r\n\r\n    function getBonusPool() public constant returns(uint88);\r\n    function getReferralPool() public constant returns(uint88);\r\n}\r\n\r\ninterface Whitelist {\r\n    function add(address _wlAddress) public;\r\n    function addBulk(address[] _wlAddresses) public;\r\n    function remove(address _wlAddresses) public;\r\n    function removeBulk(address[] _wlAddresses) public;\r\n    function getAll() public constant returns(address[]);\r\n    function isInList(address _checkAddress) public constant returns(bool);\r\n}\r\n\r\ncontract Administrated {\r\n    address public administrator;\r\n\r\n    modifier onlyAdministrator() {\r\n        require(administrator == tx.origin);\r\n        _;\r\n    }\r\n\r\n    modifier notAdministrator() {\r\n        require(administrator != tx.origin);\r\n        _;\r\n    }\r\n\r\n    function setAdministrator(address _administrator)\r\n        internal\r\n    {\r\n        administrator = _administrator;\r\n    }\r\n}\r\n\r\ncontract UNITv2 is ERC20Contract,Administrated {\r\n    //Token symbol\r\n    string public constant symbol = \"UNIT\";\r\n    //Token name\r\n    string public constant name = \"Unilot token\";\r\n    //It can be reeeealy small\r\n    uint8 public constant decimals = 18;\r\n\r\n    //Total supply 500mln in the start\r\n    uint96 public _totalSupply = uint96(500000000 * (10**18));\r\n\r\n    UnilotToken public sourceToken;\r\n\r\n    Whitelist public transferWhiteList;\r\n\r\n    Whitelist public paymentGateways;\r\n\r\n    TokenStagesManager public stagesManager;\r\n\r\n    bool public unlocked = false;\r\n\r\n    bool public burned = false;\r\n\r\n    //tokenImport[tokenHolder][sourceToken] = true/false;\r\n    mapping ( address => mapping ( address => bool ) ) public tokenImport;\r\n\r\n    event TokensImported(address indexed tokenHolder, uint96 amount, address indexed source);\r\n    event TokensDelegated(address indexed tokenHolder, uint96 amount, address indexed source);\r\n    event Unlocked();\r\n    event Burned(uint96 amount);\r\n\r\n    modifier isLocked() {\r\n        require(unlocked == false);\r\n        _;\r\n    }\r\n\r\n    modifier isNotBurned() {\r\n        require(burned == false);\r\n        _;\r\n    }\r\n\r\n    modifier isTransferAllowed(address _from, address _to) {\r\n        if ( sourceToken.RESERVE_WALLET() == _from ) {\r\n            require( stagesManager.isFreezeTimeout() );\r\n        }\r\n        require(unlocked\r\n                || ( stagesManager != address(0) && stagesManager.isCanList() )\r\n                || ( transferWhiteList != address(0) && ( transferWhiteList.isInList(_from) || transferWhiteList.isInList(_to) ) )\r\n        );\r\n        _;\r\n    }\r\n\r\n    function UNITv2(address _sourceToken)\r\n        public\r\n    {\r\n        setAdministrator(tx.origin);\r\n        sourceToken = UnilotToken(_sourceToken);\r\n\r\n        /*Transactions:\r\n        0x99c28675adbd0d0cb7bd783ae197492078d4063f40c11139dd07c015a543ffcc\r\n        0x86038d11ee8da46703309d2fb45d150f1dc4e2bba6d0a8fee158016111104ff1\r\n        0x0340a8a2fb89513c0086a345973470b7bc33424e818ca6a32dcf9ad66bf9d75c\r\n        */\r\n        balances[0xd13289203889bD898d49e31a1500388441C03663] += 1400000000000000000 * 3;\r\n        markAsImported(0xdBF98dF5DAd9077f457e1dcf85Aa9420BcA8B761, 0xd13289203889bD898d49e31a1500388441C03663);\r\n\r\n        //Tx: 0xec9b7b4c0f1435282e2e98a66efbd7610de7eacce3b2448cd5f503d70a64a895\r\n        balances[0xE33305B2EFbcB302DA513C38671D01646651a868] += 1400000000000000000;\r\n        markAsImported(0xdBF98dF5DAd9077f457e1dcf85Aa9420BcA8B761, 0xE33305B2EFbcB302DA513C38671D01646651a868);\r\n\r\n        //Assigning bounty\r\n        balances[0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb] += uint96(\r\n            ( uint(_totalSupply) * uint8( sourceToken.DST_BOUNTY() ) ) / 100\r\n        );\r\n\r\n        //Don't import bounty and R&B tokens\r\n        markAsImported(0xdBF98dF5DAd9077f457e1dcf85Aa9420BcA8B761, 0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb);\r\n        markAsImported(sourceToken, 0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb);\r\n\r\n        markAsImported(0xdBF98dF5DAd9077f457e1dcf85Aa9420BcA8B761, 0x91D740D87A8AeED1fc3EA3C346843173c529D63e);\r\n    }\r\n\r\n    function setTransferWhitelist(address whiteListAddress)\r\n        public\r\n        onlyAdministrator\r\n        isNotBurned\r\n    {\r\n        transferWhiteList = Whitelist(whiteListAddress);\r\n    }\r\n\r\n    function disableTransferWhitelist()\r\n        public\r\n        onlyAdministrator\r\n        isNotBurned\r\n    {\r\n        transferWhiteList = Whitelist(address(0));\r\n    }\r\n\r\n    function setStagesManager(address stagesManagerContract)\r\n        public\r\n        onlyAdministrator\r\n        isNotBurned\r\n    {\r\n        stagesManager = TokenStagesManager(stagesManagerContract);\r\n    }\r\n\r\n    function setPaymentGatewayList(address paymentGatewayListContract)\r\n        public\r\n        onlyAdministrator\r\n        isNotBurned\r\n    {\r\n        paymentGateways = Whitelist(paymentGatewayListContract);\r\n    }\r\n\r\n    //START Import related methods\r\n    function isImported(address _sourceToken, address _tokenHolder)\r\n        internal\r\n        constant\r\n        returns (bool)\r\n    {\r\n        return tokenImport[_tokenHolder][_sourceToken];\r\n    }\r\n\r\n    function markAsImported(address _sourceToken, address _tokenHolder)\r\n        internal\r\n    {\r\n        tokenImport[_tokenHolder][_sourceToken] = true;\r\n    }\r\n\r\n    function importFromSource(ERC20 _sourceToken, address _tokenHolder)\r\n        internal\r\n    {\r\n        if ( !isImported(_sourceToken, _tokenHolder) ) {\r\n            uint96 oldBalance = uint96(_sourceToken.balanceOf(_tokenHolder));\r\n            balances[_tokenHolder] += oldBalance;\r\n            markAsImported(_sourceToken, _tokenHolder);\r\n\r\n            TokensImported(_tokenHolder, oldBalance, _sourceToken);\r\n        }\r\n    }\r\n\r\n    //Imports from source token\r\n    function importTokensFromSourceToken(address _tokenHolder)\r\n        internal\r\n    {\r\n        importFromSource(ERC20(sourceToken), _tokenHolder);\r\n    }\r\n\r\n    function importFromExternal(ERC20 _sourceToken, address _tokenHolder)\r\n        public\r\n        onlyAdministrator\r\n        isNotBurned\r\n    {\r\n        return importFromSource(_sourceToken, _tokenHolder);\r\n    }\r\n\r\n    //Imports from provided token\r\n    function importTokensSourceBulk(ERC20 _sourceToken, address[] _tokenHolders)\r\n        public\r\n        onlyAdministrator\r\n        isNotBurned\r\n    {\r\n        require(_tokenHolders.length <= 256);\r\n\r\n        for (uint8 i = 0; i < _tokenHolders.length; i++) {\r\n            importFromSource(_sourceToken, _tokenHolders[i]);\r\n        }\r\n    }\r\n    //END Import related methods\r\n\r\n    //START ERC20\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return uint(_totalSupply);\r\n    }\r\n\r\n    function balanceOf(address _owner)\r\n        public\r\n        constant\r\n        returns (uint balance)\r\n    {\r\n        balance = super.balanceOf(_owner);\r\n\r\n        if (!isImported(sourceToken, _owner)) {\r\n            balance += sourceToken.balanceOf(_owner);\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint _amount)\r\n        public\r\n        isTransferAllowed(msg.sender, _to)\r\n        returns (bool success)\r\n    {\r\n        return super.transfer(_to, _amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        isTransferAllowed(_from, _to)\r\n        returns (bool success)\r\n    {\r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n    function approve(address _spender, uint _amount)\r\n        public\r\n        isTransferAllowed(msg.sender, _spender)\r\n        returns (bool success)\r\n    {\r\n        return super.approve(_spender, _amount);\r\n    }\r\n    //END ERC20\r\n\r\n    function delegateTokens(address tokenHolder, uint96 amount)\r\n        public\r\n        isNotBurned\r\n    {\r\n        require(paymentGateways.isInList(msg.sender));\r\n        require(stagesManager.isICO());\r\n        require(stagesManager.getPool() >= amount);\r\n\r\n        uint88 bonus = stagesManager.calculateBonus(amount);\r\n        stagesManager.delegateFromPool(amount);\r\n\r\n        balances[tokenHolder] += amount + uint96(bonus);\r\n\r\n        TokensDelegated(tokenHolder, amount, msg.sender);\r\n    }\r\n\r\n    function delegateBonusTokens(address tokenHolder, uint88 amount)\r\n        public\r\n        isNotBurned\r\n    {\r\n        require(paymentGateways.isInList(msg.sender) || tx.origin == administrator);\r\n        require(stagesManager.getBonusPool() >= amount);\r\n\r\n        stagesManager.delegateFromBonus(amount);\r\n\r\n        balances[tokenHolder] += amount;\r\n\r\n        TokensDelegated(tokenHolder, uint96(amount), msg.sender);\r\n    }\r\n\r\n    function delegateReferalTokens(address tokenHolder, uint88 amount)\r\n        public\r\n        isNotBurned\r\n    {\r\n        require(paymentGateways.isInList(msg.sender) || tx.origin == administrator);\r\n        require(stagesManager.getReferralPool() >= amount);\r\n\r\n        stagesManager.delegateFromReferral(amount);\r\n\r\n        balances[tokenHolder] += amount;\r\n\r\n        TokensDelegated(tokenHolder, amount, msg.sender);\r\n    }\r\n\r\n    function delegateReferralTokensBulk(address[] tokenHolders, uint88[] amounts)\r\n        public\r\n        isNotBurned\r\n    {\r\n        require(paymentGateways.isInList(msg.sender) || tx.origin == administrator);\r\n        require(tokenHolders.length <= 256);\r\n        require(tokenHolders.length == amounts.length);\r\n\r\n        for ( uint8 i = 0; i < tokenHolders.length; i++ ) {\r\n            delegateReferalTokens(tokenHolders[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function unlock()\r\n        public\r\n        isLocked\r\n        onlyAdministrator\r\n    {\r\n        unlocked = true;\r\n        Unlocked();\r\n    }\r\n\r\n    function burn()\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        require(!stagesManager.isICO());\r\n\r\n        uint96 burnAmount = stagesManager.getPool()\r\n                        + stagesManager.getBonusPool()\r\n                        + stagesManager.getReferralPool();\r\n\r\n        _totalSupply -= burnAmount;\r\n        burned = true;\r\n        Burned(burnAmount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentGateways\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stagesManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint88\"}],\"name\":\"delegateBonusTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stagesManagerContract\",\"type\":\"address\"}],\"name\":\"setStagesManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paymentGatewayListContract\",\"type\":\"address\"}],\"name\":\"setPaymentGatewayList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sourceToken\",\"type\":\"address\"},{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"importFromExternal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sourceToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTransferWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"delegateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenHolders\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint88[]\"}],\"name\":\"delegateReferralTokensBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sourceToken\",\"type\":\"address\"},{\"name\":\"_tokenHolders\",\"type\":\"address[]\"}],\"name\":\"importTokensSourceBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whiteListAddress\",\"type\":\"address\"}],\"name\":\"setTransferWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenImport\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint88\"}],\"name\":\"delegateReferalTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_sourceToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint96\"},{\"indexed\":true,\"name\":\"source\",\"type\":\"address\"}],\"name\":\"TokensImported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint96\"},{\"indexed\":true,\"name\":\"source\",\"type\":\"address\"}],\"name\":\"TokensDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"UNITv2","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000378356e2391cbaccb1cb11d9f7b1fe6b244819f1","Library":"","SwarmSource":"bzzr://42c85132247b322ebf265aae5169659b063c68f0d6a0e65eec415f3e3ef7c62f"}]}