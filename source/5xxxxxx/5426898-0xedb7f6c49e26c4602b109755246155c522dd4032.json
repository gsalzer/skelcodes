{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * IAME PRIVATE SALE CONTRACT\r\n *\r\n * Version 0.1\r\n *\r\n * Author IAME Limited\r\n *\r\n * MIT LICENSE Copyright 2018 IAME Limited\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n **/\r\n\r\n/**\r\n *\r\n * Important information about the IAME Token Private Sale\r\n *\r\n * For details about the IAME Token Private Sale, and in particular to find out\r\n * about risks and limitations, please visit:\r\n *\r\n * https://www.iame.io\r\n * \r\n **/\r\n \r\n/**\r\n * Private Sale Contract Guide:\r\n * \r\n * Start Date: 18 April 2018.\r\n * Contributions to this contract made before Start Date will be returned to sender.\r\n * Closing Date: 20 May 2018 at 2018.\r\n * Contributions to this contract made after End Date will be returned to sender.\r\n * Minimum Contribution for this Private Sale is 1 Ether.\r\n * Contributions of less than 1 Ether will be returned to sender.\r\n * Contributors will receive IAM Tokens at the rate of 20,000 IAM per Ether.\r\n * IAM Tokens will not be transferred to any other address than the contributing address.\r\n * IAM Tokens will be distributed to contributing address no later than 3 weeks after ICO Start.\r\n *\r\n **/\r\n\r\n\r\ncontract Owned {\r\n  address public owner;\r\n\r\n  function Owned() internal{\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n}\r\n\r\n/// ----------------------------------------------------------------------------------------\r\n/// @title IAME Private Sale Contract\r\n/// @author IAME Ltd\r\n/// @dev Changes to this contract will invalidate any security audits done before.\r\n/// ----------------------------------------------------------------------------------------\r\ncontract IAMEPrivateSale is Owned {\r\n  // -------------------------------------------------------------------------------------\r\n  // TODO Before deployment of contract to Mainnet\r\n  // 1. Confirm MINIMUM_PARTICIPATION_AMOUNT below\r\n  // 2. Adjust PRIVATESALE_START_DATE and confirm the Private Sale period\r\n  // 3. Test the deployment to a dev blockchain or Testnet\r\n  // 4. A stable version of Solidity has been used. Check for any major bugs in the\r\n  //    Solidity release announcements after this version.\r\n  // -------------------------------------------------------------------------------------\r\n\r\n  // Keep track of the total funding amount\r\n  uint256 public totalFunding;\r\n\r\n  // Minimum amount per transaction for public participants\r\n  uint256 public constant MINIMUM_PARTICIPATION_AMOUNT = 1 ether;\r\n\r\n  // Private Sale period\r\n  uint256 public PRIVATESALE_START_DATE;\r\n  uint256 public PRIVATESALE_END_DATE;\r\n\r\n  /// @notice This is the constructor to set the dates\r\n  function IAMEPrivateSale() public{\r\n    PRIVATESALE_START_DATE = now + 5 days; // 'now' is the block timestamp\r\n    PRIVATESALE_END_DATE = now + 40 days;\r\n  }\r\n\r\n  /// @notice Keep track of all participants contributions, including both the\r\n  ///         preallocation and public phases\r\n  /// @dev Name complies with ERC20 token standard, etherscan for example will recognize\r\n  ///      this and show the balances of the address\r\n  mapping (address => uint256) public balanceOf;\r\n\r\n  /// @notice Log an event for each funding contributed during the public phase\r\n  event LogParticipation(address indexed sender, uint256 value, uint256 timestamp);\r\n\r\n\r\n  /// @notice A participant sends a contribution to the contract's address\r\n  ///         between the PRIVATESALE_STATE_DATE and the PRIVATESALE_END_DATE\r\n  /// @notice Only contributions bigger than the MINIMUM_PARTICIPATION_AMOUNT\r\n  ///         are accepted. Otherwise the transaction\r\n  ///         is rejected and contributed amount is returned to the participant's\r\n  ///         account\r\n  /// @notice A participant's contribution will be rejected if the Private Sale\r\n  ///         has been funded to the maximum amount\r\n  function () public payable {\r\n    // A participant cannot send funds before the Private Sale Start Date\r\n    if (now < PRIVATESALE_START_DATE) revert();\r\n    // A participant cannot send funds after the Private Sale End Date\r\n    if (now > PRIVATESALE_END_DATE) revert();\r\n    // A participant cannot send less than the minimum amount\r\n    if (msg.value < MINIMUM_PARTICIPATION_AMOUNT) revert();\r\n    // Register the participant's contribution\r\n    addBalance(msg.sender, msg.value);\r\n  }\r\n\r\n  /// @notice The owner can withdraw ethers already during Private Sale,\r\n  function ownerWithdraw(uint256 value) external onlyOwner {\r\n    if (!owner.send(value)) revert();\r\n  }\r\n\r\n  /// @dev Keep track of participants contributions and the total funding amount\r\n  function addBalance(address participant, uint256 value) private {\r\n    // Participant's balance is increased by the sent amount\r\n    balanceOf[participant] = safeIncrement(balanceOf[participant], value);\r\n    // Keep track of the total funding amount\r\n    totalFunding = safeIncrement(totalFunding, value);\r\n    // Log an event of the participant's contribution\r\n    LogParticipation(participant, value, now);\r\n  }\r\n\r\n  /// @dev Add a number to a base value. Detect overflows by checking the result is larger\r\n  ///      than the original base value.\r\n  function safeIncrement(uint256 base, uint256 increment) private pure returns (uint256) {\r\n    uint256 result = base + increment;\r\n    if (result < base) revert();\r\n    return result;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_PARTICIPATION_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRIVATESALE_START_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRIVATESALE_END_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogParticipation\",\"type\":\"event\"}]","ContractName":"IAMEPrivateSale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b78abb8ea18f9451ff8269daa03671b966fa8f6212d172cd2bc0fa56cdc72ce7"}]}