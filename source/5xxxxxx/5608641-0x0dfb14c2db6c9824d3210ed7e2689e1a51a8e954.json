{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Oasis{\r\n    function getBestOffer(address sell_gem, address buy_gem) public constant returns(uint256);\r\n    function getOffer(uint id) public constant returns (uint, address, uint, address);\r\n}\r\n\r\n\r\ncontract PriceGet {\r\n    using SafeMath for uint;\r\n    \r\n    \r\n    Oasis market;\r\n    address public marketAddress;\r\n    address public dai = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    \r\n    mapping( address => uint256 ) public locked;\r\n    mapping( address => uint256 ) public tokenBalance;\r\n\r\n    constructor(address addr) public {\r\n        marketAddress = addr;\r\n        market = Oasis(marketAddress);\r\n    }\r\n    \r\n    \r\n    function deposit() public payable {\r\n        require(msg.value > 0.001 ether);\r\n        locked[msg.sender] += msg.value;\r\n    }\r\n    \r\n    \r\n    function mint(uint256 amount) public {\r\n        require(locked[msg.sender] > 0.001 ether);\r\n        uint currentPrice = getPrice();\r\n        uint tokens = SafeMath.div(amount*1e18, currentPrice);\r\n        tokenBalance[msg.sender] = SafeMath.add(tokenBalance[msg.sender], tokens);\r\n    }\r\n    \r\n    \r\n    function burn(uint256 amount) public {\r\n        require(amount <= tokenBalance[msg.sender]);\r\n        tokenBalance[msg.sender] = SafeMath.sub(tokenBalance[msg.sender], amount);\r\n    }\r\n    \r\n    \r\n    function tokenValue(address user) public view returns(uint256) {\r\n        require(tokenBalance[user] > 0);\r\n        uint tokens = tokenBalance[user];\r\n        uint currentPrice = getPrice();\r\n        uint value = SafeMath.mul(tokens, currentPrice);\r\n        return value;\r\n    }\r\n    \r\n    \r\n    function withdraw() public {\r\n        require(tokenBalance[msg.sender] == 0);\r\n        require(locked[msg.sender] > 0);\r\n        uint payout = locked[msg.sender];\r\n        locked[msg.sender] = 0;\r\n        msg.sender.transfer(payout);\r\n    }\r\n    \r\n    \r\n    function getPrice() public view returns(uint256) {\r\n        uint id = market.getBestOffer(weth,dai);\r\n        uint payAmt;\r\n        uint buyAmt;\r\n        address payGem;\r\n        address buyGem;\r\n        (payAmt, payGem, buyAmt, buyGem) = market.getOffer(id);\r\n        uint rate = SafeMath.div(buyAmt*1e18, payAmt);\r\n        return rate;\r\n    }\r\n    \r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"tokenValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PriceGet","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000014fbca95be7e99c15cc2996c6c9d841e54b79425","Library":"","SwarmSource":"bzzr://cc8b02c3f53b6d247bd316858ee53034fd711fb5502b23951105e1484fb45f13"}]}