{"status":"1","message":"OK","result":[{"SourceCode":"/*************************************************************************\r\n * This contract has been merged with solidify\r\n * https://github.com/tiesnetwork/solidify\r\n *************************************************************************/\r\n \r\n pragma solidity ^0.4.18;\r\n\r\n/*************************************************************************\r\n * import \"./LetsbetToken.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"./StandardToken.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"./BasicToken.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"./ERC20Basic.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/*************************************************************************\r\n * import \"./ERC20Basic.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"../../math/SafeMath.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"../../math/SafeMath.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n/*************************************************************************\r\n * import \"./BasicToken.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"./ERC20.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/*************************************************************************\r\n * import \"./ERC20.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n/*************************************************************************\r\n * import \"./StandardToken.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"../../lifecycle/Pausable.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"../ownership/Ownable.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n/*************************************************************************\r\n * import \"../ownership/Ownable.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"../../lifecycle/Pausable.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title LetsbetToken Token\r\n * @dev ERC20 LetsbetToken Token (XBET)\r\n */\r\ncontract LetsbetToken is PausableToken, BurnableToken {\r\n\r\n    string public constant name = \"Letsbet Token\";\r\n    string public constant symbol = \"XBET\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 100000000 * 10**uint256(decimals); // 100 000 000 (100m)\r\n    uint256 public constant TEAM_TOKENS = 18000000 * 10**uint256(decimals); // 18 000 000 (18m)\r\n    uint256 public constant BOUNTY_TOKENS = 5000000 * 10**uint256(decimals); // 5 000 000 (5m)\r\n    uint256 public constant AUCTION_TOKENS = 77000000 * 10**uint256(decimals); // 77 000 000 (77m)\r\n\r\n    event Deployed(uint indexed _totalSupply);\r\n\r\n    /**\r\n    * @dev LetsbetToken Constructor\r\n    */\r\n    function LetsbetToken(\r\n        address auctionAddress,\r\n        address walletAddress,\r\n        address bountyAddress)\r\n        public\r\n    {\r\n\r\n        require(auctionAddress != 0x0);\r\n        require(walletAddress != 0x0);\r\n        require(bountyAddress != 0x0);\r\n        \r\n        totalSupply_ = INITIAL_SUPPLY;\r\n\r\n        balances[auctionAddress] = AUCTION_TOKENS;\r\n        balances[walletAddress] = TEAM_TOKENS;\r\n        balances[bountyAddress] = BOUNTY_TOKENS;\r\n\r\n        Transfer(0x0, auctionAddress, balances[auctionAddress]);\r\n        Transfer(0x0, walletAddress, balances[walletAddress]);\r\n        Transfer(0x0, bountyAddress, balances[bountyAddress]);\r\n\r\n        Deployed(totalSupply_);\r\n        assert(totalSupply_ == balances[auctionAddress] + balances[walletAddress] + balances[bountyAddress]);\r\n    }\r\n}/*************************************************************************\r\n * import \"./LetsbetToken.sol\" : end\r\n *************************************************************************/\r\n\r\n/// @title Dutch auction contract - distribution of a fixed number of tokens using an auction.\r\n/// The contract code is inspired by the Gnosis and Raiden auction contract. Main difference is that the\r\n/// auction ends if a fixed number of tokens was sold.\r\ncontract DutchAuction {\r\n    \r\n\t/*\r\n     * Auction for the XBET Token.\r\n     */\r\n    // Wait 7 days after the end of the auction, before anyone can claim tokens\r\n    uint constant public TOKEN_CLAIM_WAITING_PERIOD = 7 days;\r\n\r\n    LetsbetToken public token;\r\n    address public ownerAddress;\r\n    address public walletAddress;\r\n\r\n    // Starting price in WEI\r\n    uint public startPrice;\r\n\r\n    // Divisor constant; e.g. 180000000\r\n    uint public priceDecreaseRate;\r\n\r\n    // For calculating elapsed time for price\r\n    uint public startTime;\r\n\r\n    uint public endTimeOfBids;\r\n\r\n    // When auction was finalized\r\n    uint public finalizedTime;\r\n    uint public startBlock;\r\n\r\n    // Keep track of all ETH received in the bids\r\n    uint public receivedWei;\r\n\r\n    // Keep track of cumulative ETH funds for which the tokens have been claimed\r\n    uint public fundsClaimed;\r\n\r\n    uint public tokenMultiplier;\r\n\r\n    // Total number of Rei (XBET * tokenMultiplier) that will be auctioned\r\n    uint public tokensAuctioned;\r\n\r\n    // Wei per XBET\r\n    uint public finalPrice;\r\n\r\n    // Bidder address => bid value\r\n    mapping (address => uint) public bids;\r\n\r\n\r\n    Stages public stage;\r\n\r\n    /*\r\n     * Enums\r\n     */\r\n    enum Stages {\r\n        AuctionDeployed,\r\n        AuctionSetUp,\r\n        AuctionStarted,\r\n        AuctionEnded,\r\n        TokensDistributed\r\n    }\r\n\r\n    /*\r\n     * Modifiers\r\n     */\r\n    modifier atStage(Stages _stage) {\r\n        require(stage == _stage);\r\n        _;\r\n    }\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == ownerAddress);\r\n        _;\r\n    }\r\n\t\r\n    /*\r\n     * Events\r\n     */\r\n    event Deployed(\r\n        uint indexed _startPrice,\r\n        uint indexed _priceDecreaseRate\r\n    );\r\n    \r\n\tevent Setup();\r\n    \r\n\tevent AuctionStarted(uint indexed _startTime, uint indexed _blockNumber);\r\n    \r\n\tevent BidSubmission(\r\n        address indexed sender,\r\n        uint amount,\r\n        uint missingFunds,\r\n        uint timestamp\r\n    );\r\n    \r\n\tevent ClaimedTokens(address indexed _recipient, uint _sentAmount);\r\n    \r\n\tevent AuctionEnded(uint _finalPrice);\r\n    \r\n\tevent TokensDistributed();\r\n\r\n    /// @dev Contract constructor function sets the starting price, divisor constant and\r\n    /// divisor exponent for calculating the Dutch Auction price.\r\n    /// @param _walletAddress Wallet address to which all contributed ETH will be forwarded.\r\n    /// @param _startPrice High price in WEI at which the auction starts.\r\n    /// @param _priceDecreaseRate Auction price decrease rate.\r\n    /// @param _endTimeOfBids last time bids could be accepted.\r\n    function DutchAuction(\r\n        address _walletAddress,\r\n        uint _startPrice,\r\n        uint _priceDecreaseRate,\r\n        uint _endTimeOfBids) \r\n    public\r\n    {\r\n        require(_walletAddress != 0x0);\r\n        walletAddress = _walletAddress;\r\n\r\n        ownerAddress = msg.sender;\r\n        stage = Stages.AuctionDeployed;\r\n        changeSettings(_startPrice, _priceDecreaseRate,_endTimeOfBids);\r\n        Deployed(_startPrice, _priceDecreaseRate);\r\n    }\r\n\r\n    function () public payable atStage(Stages.AuctionStarted) {\r\n        bid();\r\n    }\r\n\r\n    /// @notice Set `_tokenAddress` as the token address to be used in the auction.\r\n    /// @dev Setup function sets external contracts addresses.\r\n    /// @param _tokenAddress Token address.\r\n    function setup(address _tokenAddress) public isOwner atStage(Stages.AuctionDeployed) {\r\n        require(_tokenAddress != 0x0);\r\n        token = LetsbetToken(_tokenAddress);\r\n\r\n        // Get number of Rei (XBET * tokenMultiplier) to be auctioned from token auction balance\r\n        tokensAuctioned = token.balanceOf(address(this));\r\n\r\n        // Set the number of the token multiplier for its decimals\r\n        tokenMultiplier = 10 ** uint(token.decimals());\r\n\r\n        stage = Stages.AuctionSetUp;\r\n        Setup();\r\n    }\r\n\r\n    /// @dev Changes auction price function parameters before auction is started.\r\n    /// @param _startPrice Updated start price.\r\n    /// @param _priceDecreaseRate Updated price decrease rate.\r\n    function changeSettings(\r\n        uint _startPrice,\r\n        uint _priceDecreaseRate,\r\n        uint _endTimeOfBids\r\n        )\r\n        internal\r\n    {\r\n        require(stage == Stages.AuctionDeployed || stage == Stages.AuctionSetUp);\r\n        require(_startPrice > 0);\r\n        require(_priceDecreaseRate > 0);\r\n        require(_endTimeOfBids > now);\r\n        \r\n        endTimeOfBids = _endTimeOfBids;\r\n        startPrice = _startPrice;\r\n        priceDecreaseRate = _priceDecreaseRate;\r\n    }\r\n\r\n\r\n    /// @notice Start the auction.\r\n    /// @dev Starts auction and sets startTime.\r\n    function startAuction() public isOwner atStage(Stages.AuctionSetUp) {\r\n        stage = Stages.AuctionStarted;\r\n        startTime = now;\r\n        startBlock = block.number;\r\n        AuctionStarted(startTime, startBlock);\r\n    }\r\n\r\n    /// @notice Finalize the auction - sets the final XBET token price and changes the auction\r\n    /// stage after no bids are allowed anymore.\r\n    /// @dev Finalize auction and set the final XBET token price.\r\n    function finalizeAuction() public isOwner atStage(Stages.AuctionStarted) {\r\n        // Missing funds should be 0 at this point\r\n        uint missingFunds = missingFundsToEndAuction();\r\n        require(missingFunds == 0 || now > endTimeOfBids);\r\n\r\n        // Calculate the final price = WEI / XBET = WEI / (Rei / tokenMultiplier)\r\n        // Reminder: tokensAuctioned is the number of Rei (XBET * tokenMultiplier) that are auctioned\r\n        finalPrice = tokenMultiplier * receivedWei / tokensAuctioned;\r\n\r\n        finalizedTime = now;\r\n        stage = Stages.AuctionEnded;\r\n        AuctionEnded(finalPrice);\r\n\r\n        assert(finalPrice > 0);\r\n    }\r\n\r\n    /// --------------------------------- Auction Functions ------------------\r\n\r\n\r\n    /// @notice Send `msg.value` WEI to the auction from the `msg.sender` account.\r\n    /// @dev Allows to send a bid to the auction.\r\n    function bid()\r\n        public\r\n        payable\r\n        atStage(Stages.AuctionStarted)\r\n    {\r\n        require(msg.value > 0);\r\n        assert(bids[msg.sender] + msg.value >= msg.value);\r\n\r\n        // Missing funds without the current bid value\r\n        uint missingFunds = missingFundsToEndAuction();\r\n\r\n        // We require bid values to be less than the funds missing to end the auction\r\n        // at the current price.\r\n        require(msg.value <= missingFunds);\r\n\r\n        bids[msg.sender] += msg.value;\r\n        receivedWei += msg.value;\r\n\r\n        // Send bid amount to wallet\r\n        walletAddress.transfer(msg.value);\r\n\r\n        BidSubmission(msg.sender, msg.value, missingFunds,block.timestamp);\r\n\r\n        assert(receivedWei >= msg.value);\r\n    }\r\n\r\n    /// @notice Claim auction tokens for `msg.sender` after the auction has ended.\r\n    /// @dev Claims tokens for `msg.sender` after auction. To be used if tokens can\r\n    /// be claimed by beneficiaries, individually.\r\n    function claimTokens() public atStage(Stages.AuctionEnded) returns (bool) {\r\n        return proxyClaimTokens(msg.sender);\r\n    }\r\n\r\n    /// @notice Claim auction tokens for `receiverAddress` after the auction has ended.\r\n    /// @dev Claims tokens for `receiverAddress` after auction has ended.\r\n    /// @param receiverAddress Tokens will be assigned to this address if eligible.\r\n    function proxyClaimTokens(address receiverAddress)\r\n        public\r\n        atStage(Stages.AuctionEnded)\r\n        returns (bool)\r\n    {\r\n        // Waiting period after the end of the auction, before anyone can claim tokens\r\n        // Ensures enough time to check if auction was finalized correctly\r\n        // before users start transacting tokens\r\n        require(now > finalizedTime + TOKEN_CLAIM_WAITING_PERIOD);\r\n        require(receiverAddress != 0x0);\r\n\r\n        if (bids[receiverAddress] == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint num = (tokenMultiplier * bids[receiverAddress]) / finalPrice;\r\n\r\n        // Due to finalPrice floor rounding, the number of assigned tokens may be higher\r\n        // than expected. Therefore, the number of remaining unassigned auction tokens\r\n        // may be smaller than the number of tokens needed for the last claimTokens call\r\n        uint auctionTokensBalance = token.balanceOf(address(this));\r\n        if (num > auctionTokensBalance) {\r\n            num = auctionTokensBalance;\r\n        }\r\n\r\n        // Update the total amount of funds for which tokens have been claimed\r\n        fundsClaimed += bids[receiverAddress];\r\n\r\n        // Set receiver bid to 0 before assigning tokens\r\n        bids[receiverAddress] = 0;\r\n\r\n        require(token.transfer(receiverAddress, num));\r\n\r\n        ClaimedTokens(receiverAddress, num);\r\n\r\n        // After the last tokens are claimed, we change the auction stage\r\n        // Due to the above logic, rounding errors will not be an issue\r\n        if (fundsClaimed == receivedWei) {\r\n            stage = Stages.TokensDistributed;\r\n            TokensDistributed();\r\n        }\r\n\r\n        assert(token.balanceOf(receiverAddress) >= num);\r\n        assert(bids[receiverAddress] == 0);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Get the XBET price in WEI during the auction, at the time of\r\n    /// calling this function. Returns `0` if auction has ended.\r\n    /// Returns `startPrice` before auction has started.\r\n    /// @dev Calculates the current XBET token price in WEI.\r\n    /// @return Returns WEI per XBET (tokenMultiplier * Rei).\r\n    function price() public constant returns (uint) {\r\n        if (stage == Stages.AuctionEnded ||\r\n            stage == Stages.TokensDistributed) {\r\n            return finalPrice;\r\n        }\r\n        return calcTokenPrice();\r\n    }\r\n\r\n    /// @notice Get the missing funds needed to end the auction,\r\n    /// calculated at the current XBET price in WEI.\r\n    /// @dev The missing funds amount necessary to end the auction at the current XBET price in WEI.\r\n    /// @return Returns the missing funds amount in WEI.\r\n    function missingFundsToEndAuction() constant public returns (uint) {\r\n\r\n        uint requiredWei = tokensAuctioned * price() / tokenMultiplier;\r\n        if (requiredWei <= receivedWei) {\r\n            return 0;\r\n        }\r\n\r\n        return requiredWei - receivedWei;\r\n    }\r\n\r\n    /*\r\n     *  Private functions\r\n     */\r\n    /// @dev Calculates the token price (WEI / XBET) at the current timestamp.\r\n    /// For every new block the price decreases with priceDecreaseRate * numberOfNewBLocks\r\n    /// @return current price\r\n    function calcTokenPrice() constant private returns (uint) {\r\n        uint currentPrice;\r\n        if (stage == Stages.AuctionStarted) {\r\n            currentPrice = startPrice - priceDecreaseRate * (block.number - startBlock);\r\n        }else {\r\n            currentPrice = startPrice;\r\n        }\r\n\r\n        return currentPrice;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"receivedWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_CLAIM_WAITING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimeOfBids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAuctioned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiverAddress\",\"type\":\"address\"}],\"name\":\"proxyClaimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"missingFundsToEndAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceDecreaseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_walletAddress\",\"type\":\"address\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_priceDecreaseRate\",\"type\":\"uint256\"},{\"name\":\"_endTimeOfBids\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_priceDecreaseRate\",\"type\":\"uint256\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Setup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"missingFunds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BidSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_sentAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_finalPrice\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokensDistributed\",\"type\":\"event\"}]","ContractName":"DutchAuction","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000068e683c1fe50e557014bac3a0529dff7b7ca3bbb0000000000000000000000000000000000000000000000000000886c98b76000000000000000000000000000000000000000000000000000000000000aba9500000000000000000000000000000000000000000000000000000000005b8949e0","Library":"","SwarmSource":"bzzr://70cce78eff00aaa1b748de4ab6538f491da681cfed95d388169f8f23987a3498"}]}