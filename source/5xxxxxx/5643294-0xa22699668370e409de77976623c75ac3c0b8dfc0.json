{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n\t/* \r\n\tSHOW ME WHAT YOU GOT\r\n\t\t\t___          \r\n\t\t. -^   `--,      \r\n\t   /# =========`-_   \r\n\t  /# (--====___====\\ \r\n\t /#   .- --.  . --.| \r\n\t/##   |  * ) (   * ),\r\n\t|##   \\    /\\ \\   / |\r\n\t|###   ---   \\ ---  |\r\n\t|####      ___)    #|\r\n\t|######           ##|\r\n\t \\##### ---------- / \r\n\t  \\####           (  \r\n\t   `\\###          |  \r\n\t\t \\###         |  \r\n\t\t  \\##        |   \r\n\t\t   \\###.    .)   \r\n\t\t\t`======/    \r\n    Contract is live, working on the site,http://PickleRick.surge.sh\r\n\t*/\r\n\r\n\r\n\r\n\tcontract RickAndMortyShrimper{\r\n\t\tstring public name = \"RickAndMortyShrimper\";\r\n\t\tstring public symbol = \"RickAndMortyS\";\r\n\t\t//uint256 morties_PER_RickAndMorty_PER_SECOND=1;\r\n\t\tuint256 public morties_TO_HATCH_1RickAndMorty=86400;//for final version should be seconds in a day\r\n\t\tuint256 public STARTING_RickAndMorty=314;\r\n\t\tuint256 PSN=10000;\r\n\t\tuint256 PSNH=5000;\r\n\t\tbool public initialized=true;\r\n\t\taddress public ceoAddress;\r\n\t\tmapping (address => uint256) public hatcheryRickAndMorty;\r\n\t\tmapping (address => uint256) public claimedmorties;\r\n\t\tmapping (address => uint256) public lastHatch;\r\n\t\tmapping (address => address) public referrals;\r\n\t\tuint256 public marketmorties = 1000000000;\r\n\t\tuint256 public RnMmasterReq=100000;\r\n\t\t\r\n\t\tfunction RickAndMortyShrimper() public{\r\n\t\t\tceoAddress=msg.sender;\r\n\t\t}\r\n\t\tmodifier onlyCEO(){\r\n\t\t\trequire(msg.sender == ceoAddress );\r\n\t\t\t_;\r\n\t\t}\r\n\t\tfunction becomePickleRick() public{\r\n\t\t\trequire(initialized);\r\n\t\t\trequire(hatcheryRickAndMorty[msg.sender]>=RnMmasterReq);\r\n\t\t\thatcheryRickAndMorty[msg.sender]=SafeMath.sub(hatcheryRickAndMorty[msg.sender],RnMmasterReq);\r\n\t\t\tRnMmasterReq=SafeMath.add(RnMmasterReq,100000);//+100k RickAndMortys each time\r\n\t\t\tceoAddress=msg.sender;\r\n\t\t}\r\n\t\tfunction hatchMorties(address ref) public{\r\n\t\t\trequire(initialized);\r\n\t\t\tif(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\r\n\t\t\t\treferrals[msg.sender]=ref;\r\n\t\t\t}\r\n\t\t\tuint256 mortiesUsed=getMymorties();\r\n\t\t\tuint256 newRickAndMorty=SafeMath.div(mortiesUsed,morties_TO_HATCH_1RickAndMorty);\r\n\t\t\thatcheryRickAndMorty[msg.sender]=SafeMath.add(hatcheryRickAndMorty[msg.sender],newRickAndMorty);\r\n\t\t\tclaimedmorties[msg.sender]=0;\r\n\t\t\tlastHatch[msg.sender]=now;\r\n\t\t\t\r\n\t\t\t//send referral morties\r\n\t\t\tclaimedmorties[referrals[msg.sender]]=SafeMath.add(claimedmorties[referrals[msg.sender]],SafeMath.div(mortiesUsed,5));\r\n\t\t\t\r\n\t\t\t//boost market to nerf RickAndMorty hoarding\r\n\t\t\tmarketmorties=SafeMath.add(marketmorties,SafeMath.div(mortiesUsed,10));\r\n\t\t}\r\n\t\tfunction sellMorties() public{\r\n\t\t\trequire(initialized);\r\n\t\t\tuint256 hasmorties=getMymorties();\r\n\t\t\tuint256 eggValue=calculatemortiesell(hasmorties);\r\n\t\t\tuint256 fee=devFee(eggValue);\r\n\t\t\tclaimedmorties[msg.sender]=0;\r\n\t\t\tlastHatch[msg.sender]=now;\r\n\t\t\tmarketmorties=SafeMath.add(marketmorties,hasmorties);\r\n\t\t\tceoAddress.transfer(fee);\r\n\t\t}\r\n\t\tfunction buyMorties() public payable{\r\n\t\t\trequire(initialized);\r\n\t\t\tuint256 mortiesBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\r\n\t\t\tmortiesBought=SafeMath.sub(mortiesBought,devFee(mortiesBought));\r\n\t\t\tceoAddress.transfer(devFee(msg.value));\r\n\t\t\tclaimedmorties[msg.sender]=SafeMath.add(claimedmorties[msg.sender],mortiesBought);\r\n\t\t}\r\n\t\t//magic trade balancing algorithm\r\n\t\tfunction calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n\t\t\t//(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n\t\t\treturn SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n\t\t}\r\n\t\tfunction calculatemortiesell(uint256 morties) public view returns(uint256){\r\n\t\t\treturn calculateTrade(morties,marketmorties,this.balance);\r\n\t\t}\r\n\t\tfunction calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n\t\t\treturn calculateTrade(eth,contractBalance,marketmorties);\r\n\t\t}\r\n\t\tfunction calculateEggBuySimple(uint256 eth) public view returns(uint256){\r\n\t\t\treturn calculateEggBuy(eth,this.balance);\r\n\t\t}\r\n\t\tfunction devFee(uint256 amount) public view returns(uint256){\r\n\t\t\treturn SafeMath.div(SafeMath.mul(amount,4),100);\r\n\t\t}\r\n\t\tfunction seedMarket(uint256 morties) public payable{\r\n\t\t\trequire(marketmorties==0);\r\n\t\t\tinitialized=true;\r\n\t\t\tmarketmorties=morties;\r\n\t\t}\r\n\t\tfunction getFreeRickAndMorty() public payable{\r\n\t\t\trequire(initialized);\r\n\t\t   // require(msg.value==0.001 ether); //similar to mining fee, prevents bots\r\n\t\t\tceoAddress.transfer(msg.value); //RnMmaster gets this entrance fee\r\n\t\t\trequire(hatcheryRickAndMorty[msg.sender]==0);\r\n\t\t\tlastHatch[msg.sender]=now;\r\n\t\t\thatcheryRickAndMorty[msg.sender]=STARTING_RickAndMorty;\r\n\t\t}\r\n\t\tfunction getBalance() public view returns(uint256){\r\n\t\t\treturn this.balance;\r\n\t\t}\r\n\t\tfunction getMyRickAndMorty() public view returns(uint256){\r\n\t\t\treturn hatcheryRickAndMorty[msg.sender];\r\n\t\t}\r\n\t\tfunction getRnMmasterReq() public view returns(uint256){\r\n\t\t\treturn RnMmasterReq;\r\n\t\t}\r\n\t\tfunction getMymorties() public view returns(uint256){\r\n\t\t\treturn SafeMath.add(claimedmorties[msg.sender],getmortiesSinceLastHatch(msg.sender));\r\n\t\t}\r\n\t\tfunction getmortiesSinceLastHatch(address adr) public view returns(uint256){\r\n\t\t\tuint256 secondsPassed=min(morties_TO_HATCH_1RickAndMorty,SafeMath.sub(now,lastHatch[adr]));\r\n\t\t\treturn SafeMath.mul(secondsPassed,hatcheryRickAndMorty[adr]);\r\n\t\t}\r\n\t\tfunction min(uint256 a, uint256 b) private pure returns (uint256) {\r\n\t\t\treturn a < b ? a : b;\r\n\t\t}\r\n\t\tfunction transferOwnership() onlyCEO public {\r\n\t\t\tuint256 etherBalance = this.balance;\r\n\t\t\tceoAddress.transfer(etherBalance);\r\n\t\t}\r\n\t}\r\n\r\n\tlibrary SafeMath {\r\n\r\n\t  /**\r\n\t  * @dev Multiplies two numbers, throws on overflow.\r\n\t  */\r\n\t  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t  return 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t  }\r\n\r\n\t  /**\r\n\t  * @dev Integer division of two numbers, truncating the quotient.\r\n\t  */\r\n\t  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t  }\r\n\r\n\t  /**\r\n\t  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t  */\r\n\t  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t  }\r\n\r\n\t  /**\r\n\t  * @dev Adds two numbers, throws on overflow.\r\n\t  */\r\n\t  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t  }\r\n\t}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getMymorties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"morties\",\"type\":\"uint256\"}],\"name\":\"calculatemortiesell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"becomePickleRick\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketmorties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RnMmasterReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"morties\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFreeRickAndMorty\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchMorties\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"morties_TO_HATCH_1RickAndMorty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_RickAndMorty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryRickAndMorty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRnMmasterReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyMorties\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getmortiesSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedmorties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellMorties\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyRickAndMorty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"RickAndMortyShrimper","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://00c3f2ff9b18878c2ad4f4b4a6e3cccc5ac85e8ee949d8851fc14faedf6c6b57"}]}