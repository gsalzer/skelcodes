{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0x0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ncontract AbstractERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) public constant returns (uint256 value);\r\n    function transfer(address _to, uint256 _value) public returns (bool _success);\r\n    function allowance(address owner, address spender) public constant returns (uint256 _value);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool _success);\r\n    function approve(address spender, uint256 value) public returns (bool _success);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\ncontract TradCoin is Ownable, AbstractERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    //address of distributor\r\n    address public distributor;\r\n    // The time after which Trad tokens become transferable.\r\n    // Current value is July 30, 2018 23:59:59 Eastern Time.\r\n    uint256 becomesTransferable = 1533009599;\r\n\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    // balances allowed to transfer during locking\r\n    mapping (address => uint256) internal balancesAllowedToTransfer;\r\n    //mapping to show person is investor or team/project, true=>investor, false=>team/project\r\n    mapping (address => bool) public isInvestor;\r\n\r\n    event DistributorTransferred(address indexed _from, address indexed _to);\r\n    event Allocated(address _owner, address _investor, uint256 _tokenAmount);\r\n\r\n    constructor(address _distributor) public {\r\n        require (_distributor != address(0x0));\r\n        name = \"TradCoin\";\r\n        symbol = \"TRADCoin\";\r\n        decimals = 18 ;\r\n        totalSupply = 300e6 * 10**18;    // 300 million tokens\r\n        owner = msg.sender;\r\n        distributor = _distributor;\r\n        balances[distributor] = totalSupply;\r\n        emit Transfer(0x0, owner, totalSupply);\r\n    }\r\n\r\n    /// manually send tokens to investor\r\n    function allocateTokensToInvestors(address _to, uint256 _value) public onlyOwner returns (bool success) {\r\n        require(_to != address(0x0));\r\n        require(_value > 0);\r\n        uint256 unlockValue = (_value.mul(30)).div(100);\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[distributor] = balances[distributor].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        balancesAllowedToTransfer[_to] = unlockValue;\r\n        isInvestor[_to] = true;\r\n        emit Allocated(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// manually send tokens to investor\r\n    function allocateTokensToTeamAndProjects(address _to, uint256 _value) public onlyOwner returns (bool success) {\r\n        require(_to != address(0x0));\r\n        require(_value > 0);\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[distributor] = balances[distributor].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Allocated(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Check balance of given account address\r\n    * @param owner The address account whose balance you want to know\r\n    * @return balance of the account\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256){\r\n        return balances[owner];\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address (written due to backward compatibility)\r\n    * @param to address to which token is transferred\r\n    * @param value amount of tokens to transfer\r\n    * return bool true=> transfer is succesful\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(to != address(0x0));\r\n        require(value <= balances[msg.sender]);\r\n        uint256 valueAllowedToTransfer;\r\n        if(isInvestor[msg.sender]){\r\n            if (now >= becomesTransferable){\r\n                valueAllowedToTransfer = balances[msg.sender];\r\n                assert(value <= valueAllowedToTransfer);\r\n            }else{\r\n                valueAllowedToTransfer = balancesAllowedToTransfer[msg.sender];\r\n                assert(value <= valueAllowedToTransfer);\r\n                balancesAllowedToTransfer[msg.sender] = balancesAllowedToTransfer[msg.sender].sub(value);\r\n            }\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param from address from which token is transferred \r\n    * @param to address to which token is transferred\r\n    * @param value amount of tokens to transfer\r\n    * @return bool true=> transfer is succesful\r\n    */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(to != address(0x0));\r\n        require(value <= balances[from]);\r\n        require(value <= allowed[from][msg.sender]);\r\n        uint256 valueAllowedToTransfer;\r\n        if(isInvestor[from]){\r\n            if (now >= becomesTransferable){\r\n                valueAllowedToTransfer = balances[from];\r\n                assert(value <= valueAllowedToTransfer);\r\n            }else{\r\n                valueAllowedToTransfer = balancesAllowedToTransfer[from];\r\n                assert(value <= valueAllowedToTransfer);\r\n                balancesAllowedToTransfer[from] = balancesAllowedToTransfer[from].sub(value);\r\n            }\r\n        }\r\n        balances[from] = balances[from].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    //function to check available balance to transfer tokens during locking perios for investors\r\n    function availableBalanceInLockingPeriodForInvestor(address owner) public view returns(uint256){\r\n        return balancesAllowedToTransfer[owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Approve function will delegate spender to spent tokens on msg.sender behalf\r\n    * @param spender ddress which is delegated\r\n    * @param value tokens amount which are delegated\r\n    * @return bool true=> approve is succesful\r\n    */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev it will check amount of token delegated to spender by owner\r\n    * @param owner the address which allows someone to spend fund on his behalf\r\n    * @param spender address which is delegated\r\n    * @return return uint256 amount of tokens left with delegator\r\n    */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev increment the spender delegated tokens\r\n    * @param spender address which is delegated\r\n    * @param valueToAdd tokens amount to increment\r\n    * @return bool true=> operation is succesful\r\n    */\r\n    function increaseApproval(address spender, uint valueToAdd) public returns (bool) {\r\n        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(valueToAdd);\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev deccrement the spender delegated tokens\r\n    * @param spender address which is delegated\r\n    * @param valueToSubstract tokens amount to decrement\r\n    * @return bool true=> operation is succesful\r\n    */\r\n    function decreaseApproval(address spender, uint valueToSubstract) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][spender];\r\n        if (valueToSubstract > oldValue) {\r\n          allowed[msg.sender][spender] = 0;\r\n        } else {\r\n          allowed[msg.sender][spender] = oldValue.sub(valueToSubstract);\r\n        }\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"valueToSubstract\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"availableBalanceInLockingPeriodForInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"allocateTokensToTeamAndProjects\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"allocateTokensToInvestors\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"valueToAdd\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_distributor\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"DistributorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TradCoin","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000031f54d43fa25c9c9083c60c946baf2b71c7e07cd","Library":"","SwarmSource":"bzzr://76cf8c836fc2e588c76576f68ee1db5112fae493d9bbfc8e985030d059ed575f"}]}