{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\ncontract ERC721 {\r\n    \r\n    function totalSupply() public constant returns (uint256 total);\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external constant returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    function tokensOfOwner(address _owner) external constant returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    // function supportsInterface(bytes4 _interfaceID) external constant returns (bool);\r\n}\r\n\r\n\r\ncontract BlockBase{\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Birth(address owner, uint256 blockId, uint256 width,  uint256 height, string position, uint16 genes);\r\n\r\n    struct Block { \r\n        uint256 width;\r\n        uint256 heigth;\r\n        string position;\r\n        uint16 generation;\r\n    }\r\n    \r\n    Block[] blocks;\r\n    mapping (uint256 => address) public blockIndexToOwner;\r\n    mapping (address => uint256) public ownershipTokenCount;\r\n    mapping (uint256 => address) public blockIndexToApproved;\r\n    SaleAuction public saleAuction;\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        ownershipTokenCount[_to]++;\r\n        blockIndexToOwner[_tokenId] = _to;\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n        }\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n    \r\n    function transferBlock(address oldAdd, address newAdd, uint256 newBlockId) internal {\r\n        _transfer(oldAdd, newAdd, newBlockId);\r\n    }\r\n\r\n\r\n    function _createBlock(uint256 _width, uint256 _heigth, uint256 _generation, string _position, address _owner) internal returns (uint)\r\n    {\r\n        require(_generation == uint256(uint16(_generation)));\r\n        Block memory _block = Block({\r\n            width: _width,\r\n            heigth: _heigth,\r\n            position: _position,\r\n            generation: uint16(_generation)\r\n        });\r\n        uint256 newBlockId = blocks.push(_block) - 1;\r\n        Birth(\r\n            _owner,\r\n            newBlockId,\r\n            _width,\r\n            _heigth,\r\n            _block.position,\r\n            uint16(_generation)\r\n        );\r\n        _transfer(0, _owner, newBlockId);\r\n        return newBlockId;\r\n    }\r\n\r\n}\r\n\r\ncontract AuctionBase {\r\n\r\n    struct Auction {\r\n        address seller;\r\n        uint256 sellPrice;\r\n    }\r\n\r\n    \r\n    ERC721 public nonFungibleContract;\r\n\r\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint256 public ownerCut;\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping (uint256 => Auction) tokenIdToAuction;\r\n\r\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice);\r\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\r\n    event AuctionCancelled(uint256 tokenId);\r\n\r\n    function _owns(address _claimant, uint256 _tokenId) internal constant returns (bool) {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n\r\n    function _escrow(address _owner, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\r\n    }\r\n\r\n    /// @dev Transfers an NFT owned by this contract to another address.\r\n    /// Returns true if the transfer succeeds.\r\n    /// @param _receiver - Address to transfer NFT to.\r\n    /// @param _tokenId - ID of token to transfer.\r\n    function _transfer(address _receiver, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transfer(_receiver, _tokenId);\r\n    }\r\n\r\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\r\n        tokenIdToAuction[_tokenId] = _auction;\r\n        AuctionCreated(\r\n            uint256(_tokenId),\r\n            uint256(_auction.sellPrice)\r\n        );\r\n    }\r\n\r\n    /// @dev Cancels an auction unconditionally.\r\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\r\n        _removeAuction(_tokenId);\r\n        //_transfer(_seller, _tokenId);\r\n        AuctionCancelled(_tokenId);\r\n    }\r\n\r\n    /// @dev Computes the price and transfers winnings.\r\n    /// Does NOT transfer ownership of token.\r\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n\r\n       \r\n        // Check that the bid is greater than or equal to the current price\r\n        uint256 price = auction.sellPrice;\r\n        require(_bidAmount >= price);\r\n\r\n        // Grab a reference to the seller before the auction struct\r\n        // gets deleted.\r\n        address seller = auction.seller;\r\n\r\n        // The bid is good! Remove the auction before sending the fees\r\n        // to the sender so we can't have a reentrancy attack.\r\n        _removeAuction(_tokenId);\r\n        \r\n        // Tell the world!\r\n        AuctionSuccessful(_tokenId, price, msg.sender);\r\n        return price;\r\n    }\r\n\r\n    /// @dev Removes an auction from the list of open auctions.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n        delete tokenIdToAuction[_tokenId];\r\n    }\r\n\r\n}\r\n\r\ncontract SaleAuction is AuctionBase {\r\n    address public beneficiary = msg.sender;\r\n    function SaleAuction(address _nftAddress) public {\r\n        ERC721 candidateContract = ERC721(_nftAddress);\r\n        nonFungibleContract = candidateContract;\r\n    }\r\n\r\n    function getAuction(uint256 _tokenId)\r\n        external\r\n        constant\r\n        returns\r\n    (\r\n        address seller,\r\n        uint256 sellPrice\r\n    ) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        \r\n        return (\r\n            auction.seller,\r\n            auction.sellPrice\r\n        );\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == beneficiary);\r\n        _;\r\n    }\r\n\r\n    function withdrawBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n        require(msg.sender == nftAddress);\r\n        bool res = nftAddress.send(this.balance);\r\n    }\r\n    \r\n   function bid(uint256 _tokenId)\r\n        external\r\n        payable\r\n    {\r\n        Auction memory auction = tokenIdToAuction[_tokenId];\r\n        address seller = auction.seller;\r\n        _bid(_tokenId, msg.value);\r\n        _transfer(msg.sender, _tokenId);\r\n        seller.transfer(msg.value);\r\n    }\r\n\r\n    function bidCustomAuction(uint256 _tokenId, uint256 _price, address _buyer)\r\n        external\r\n        payable\r\n    {\r\n        \r\n        _bid(_tokenId, _price);\r\n        _transfer(_buyer, _tokenId);\r\n    }\r\n\r\n\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _sellPrice,\r\n        address _seller\r\n    )\r\n        external\r\n    {       \r\n        // require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(_seller, _sellPrice);\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n}\r\n\r\ncontract BlockOwnership is BlockBase, ERC721 {\r\n  string public constant name = \"CryptoBlocks\";\r\n  string public constant symbol = \"CB\";\r\n\r\n  bytes4 constant InterfaceSignature_ERC721 =\r\n      bytes4(keccak256('name()')) ^\r\n      bytes4(keccak256('symbol()')) ^\r\n      bytes4(keccak256('totalSupply()')) ^\r\n      bytes4(keccak256('balanceOf(address)')) ^\r\n      bytes4(keccak256('ownerOf(uint256)')) ^\r\n      bytes4(keccak256('approve(address,uint256)')) ^\r\n      bytes4(keccak256('transfer(address,uint256)')) ^\r\n      bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n      bytes4(keccak256('tokensOfOwner(address)')) ^\r\n      bytes4(keccak256('tokenMetadata(uint256,string)'));\r\n      \r\n      function _owns(address _claimant, uint256 _tokenId) internal constant returns (bool) {\r\n          return blockIndexToOwner[_tokenId] == _claimant;\r\n      }\r\n\r\n      function _approve(uint256 _tokenId, address _approved) internal {\r\n          blockIndexToApproved[_tokenId] = _approved;\r\n      }\r\n\r\n      function _approvedFor(address _claimant, uint256 _tokenId) internal constant returns (bool) {\r\n          return blockIndexToApproved[_tokenId] == _claimant;\r\n      }\r\n\r\n      function ownerOf(uint256 _tokenId) external constant returns (address owner)\r\n      {\r\n          owner = blockIndexToOwner[_tokenId];\r\n  \r\n          require(owner != address(0));\r\n          return owner;\r\n      }\r\n\r\n\r\n      function balanceOf(address _owner) public constant returns (uint256 count) {\r\n          return ownershipTokenCount[_owner];\r\n      }\r\n    \r\n      function totalSupply() public constant returns (uint) {\r\n          return blocks.length - 1;\r\n      }\r\n\r\n      function approve(address _to, uint256 _tokenId) external {\r\n          require(_owns(msg.sender, _tokenId));\r\n          _approve(_tokenId, _to);\r\n          Approval(msg.sender, _to, _tokenId);\r\n      }\r\n\r\n      function transfer(address _to, uint256 _tokenId) external {\r\n          //require(_to != address(0));\r\n          //require(_to != address(this));\r\n          _transfer(msg.sender, _to, _tokenId);\r\n      }\r\n      \r\n\r\n      function tokensOfOwner(address _owner) external constant returns(uint256[] ownerTokens) {\r\n          uint256 tokenCount = balanceOf(_owner);\r\n          if (tokenCount == 0) {\r\n              return new uint256[](0);\r\n          } else {\r\n              uint256[] memory result = new uint256[](tokenCount);\r\n              uint256 totalBlocks = totalSupply();\r\n              uint256 resultIndex = 0;\r\n              uint256 blockId;\r\n  \r\n              for (blockId = 1; blockId <= totalBlocks; blockId++) {\r\n                  if (blockIndexToOwner[blockId] == _owner) {\r\n                      result[resultIndex] = blockId;\r\n                      resultIndex++;\r\n                  }\r\n              }\r\n              return result;\r\n          }\r\n      }\r\n      \r\n\r\n      function transferFrom(address _from, address _to, uint256 _tokenId) external {\r\n          require(_to != address(0));\r\n          require(_to != address(this));\r\n          require(_approvedFor(msg.sender, _tokenId));\r\n          require(_owns(_from, _tokenId));\r\n          _transfer(_from, _to, _tokenId);\r\n      }\r\n}\r\n\r\n\r\n\r\ncontract BlockCoreOne is BlockOwnership {\r\n\r\n    uint256[5] public lastGen0SalePrices;\r\n    address[16] public owners;\r\n    address public beneficiary = msg.sender;\r\n\r\n    mapping (uint256 => address) public blockIndexToOwner;\r\n    uint256 public gen0CreatedCount;\r\n\r\n    uint256 public constant BLOCK_BASIC_PRICE = 10 finney;\r\n    uint256 public constant BLOCK_DURATION = 1 days;\r\n\r\n\r\n\r\n    function buyBlock(string _position, uint256 _w, uint256 _h, uint256 _generation, uint256 _unitPrice) public payable returns(uint256 blockID) {\r\n        uint256 price = computeBlockPrice(_w, _h, _unitPrice);\r\n        uint256 _bidAmount = msg.value;\r\n        require(_bidAmount >= price);\r\n        uint256 blockId = _createBlock(_w, _h, _generation, _position, address(this));\r\n        \r\n        _approve(blockId, saleAuction);\r\n        saleAuction.createAuction(blockId, price, address(this));  \r\n        address buyer = msg.sender;  \r\n        saleAuction.bidCustomAuction(blockId, _bidAmount, buyer);    \r\n\r\n        return blockId;\r\n    }\r\n\r\n    function migrateBlock (string _position, uint256 _width, uint256 _heigth, uint256 _generation, address _buyer) external returns(uint256){\r\n        uint newBlockId = _createBlock(_width, _heigth, _generation, _position, address(this));\r\n        address owner = _buyer;\r\n        _approve(newBlockId, owner);\r\n        return newBlockId;\r\n    }   \r\n\r\n    function create(string _position, uint256 _width, uint256 _heigth, uint256 _generation) external returns(uint256){\r\n        uint newBlockId = _createBlock(_width, _heigth, _generation, _position, address(this));\r\n\r\n        return newBlockId;\r\n    }   \r\n\r\n    function computeBlockPrice(uint256 _w, uint256 _h, uint256 unitPrice) public constant returns (uint256 blockPrice) {\r\n        uint256 price = _w * _h * unitPrice;\r\n        return price;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == beneficiary);\r\n        _;\r\n    }\r\n\r\n\r\n    function withdrawBalance() external onlyOwner {\r\n        uint256 balance = this.balance;\r\n        beneficiary.transfer(balance);\r\n    }\r\n\r\n    function checkBalance() external constant onlyOwner returns (uint balance) {\r\n        return this.balance;\r\n    }\r\n\r\n    function createSaleAuction(uint256 _tokenId, uint256 _sellPrice) external{\r\n        address seller = msg.sender;\r\n        _approve(_tokenId, saleAuction);\r\n        saleAuction.createAuction(_tokenId, _sellPrice, seller);    \r\n    }\r\n    \r\n    function setSaleAuctionAddress(address _address) external onlyOwner {\r\n        SaleAuction candidateContract = SaleAuction(_address);\r\n        saleAuction = candidateContract;\r\n    }\r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_position\",\"type\":\"string\"},{\"name\":\"_width\",\"type\":\"uint256\"},{\"name\":\"_heigth\",\"type\":\"uint256\"},{\"name\":\"_generation\",\"type\":\"uint256\"},{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"migrateBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_sellPrice\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BLOCK_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BLOCK_BASIC_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_position\",\"type\":\"string\"},{\"name\":\"_width\",\"type\":\"uint256\"},{\"name\":\"_heigth\",\"type\":\"uint256\"},{\"name\":\"_generation\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastGen0SalePrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_w\",\"type\":\"uint256\"},{\"name\":\"_h\",\"type\":\"uint256\"},{\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"name\":\"computeBlockPrice\",\"outputs\":[{\"name\":\"blockPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_position\",\"type\":\"string\"},{\"name\":\"_w\",\"type\":\"uint256\"},{\"name\":\"_h\",\"type\":\"uint256\"},{\"name\":\"_generation\",\"type\":\"uint256\"},{\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"buyBlock\",\"outputs\":[{\"name\":\"blockID\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownershipTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"blockId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"width\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint16\"}],\"name\":\"Birth\",\"type\":\"event\"}]","ContractName":"BlockCoreOne","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0473bbfc1ce19caacf0f1cc5e05855a849c2e27a272409c0ce9825dbdef85fbc"}]}