{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * iron Bank Network\r\n * https://www.ironbank.network\r\n * Based on Open Zeppelin - https://github.com/OpenZeppelin/zeppelin-solidity\r\n */\r\n\r\n/*\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title PoolParty Token\r\n * @author Alber Erre\r\n * @notice Follow up token holders to give them collected fees in the future. Holders are stored in \"HOLDersList\"\r\n * @dev This is the first part of the functionality, this contract just enable tracking token holders\r\n * @dev Next part is defined as \"PoolPartyPayRoll\" contract\r\n */\r\ncontract PoolPartyToken is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  struct HOLDers {\r\n    address HOLDersAddress;\r\n  }\r\n\r\n  HOLDers[] public HOLDersList;\r\n\r\n  function _alreadyInList(address _thisHODLer) internal view returns(bool HolderinList) {\r\n\r\n    bool result = false;\r\n    for (uint256 r = 0; r < HOLDersList.length; r++) {\r\n      if (HOLDersList[r].HOLDersAddress == _thisHODLer) {\r\n        result = true;\r\n        break;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Call AddHOLDer function every time a token is sold, \"_alreadyInList\" avoids duplicates\r\n  function AddHOLDer(address _thisHODLer) internal {\r\n\r\n    if (_alreadyInList(_thisHODLer) == false) {\r\n      HOLDersList.push(HOLDers(_thisHODLer));\r\n    }\r\n  }\r\n\r\n  function UpdateHOLDer(address _currentHODLer, address _newHODLer) internal {\r\n\r\n    for (uint256 r = 0; r < HOLDersList.length; r++){\r\n      // Send individual token holder payroll\r\n      if (HOLDersList[r].HOLDersAddress == _currentHODLer) {\r\n        // write new holders address\r\n        HOLDersList[r].HOLDersAddress = _newHODLer;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is PoolPartyToken, ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * OpenBarrier modifier by Alber Erre\r\n  * @notice security trigger in case something fails during minting, token sale or Airdrop\r\n  */\r\n  bool public transferEnabled;    //allows contract to lock transfers in case of emergency\r\n\r\n  modifier openBarrier() {\r\n      require(transferEnabled || msg.sender == owner);\r\n      _;\r\n  }\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) openBarrier public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n\r\n    // update HODLer address, for iron profit distribution to iron holders - PoolParty\r\n    UpdateHOLDer(msg.sender, _to);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title PoolParty PayRoll\r\n * @author Alber Erre\r\n * @notice This enables fees distribution (Money!) among token holders\r\n * @dev This is the second part of the PoolParty functionality, this contract allow us to distributed the fees collected...\r\n * @dev ...between token holders, if you hold you get paid, that is the idea.\r\n */\r\ncontract PoolPartyPayRoll is BasicToken {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) PayRollCount;\r\n\r\n  // Manually spread iron profits to token holders\r\n  function _HOLDersPayRoll() onlyOwner public {\r\n\r\n    uint256 _amountToPay = address(this).balance;\r\n    uint256 individualPayRoll = _amountToPay.div(uint256(HOLDersList.length));\r\n\r\n    for (uint256 r = 0; r < HOLDersList.length; r++){\r\n      // Send individual token holder payroll\r\n      address HODLer = HOLDersList[r].HOLDersAddress;\r\n      HODLer.transfer(individualPayRoll);\r\n      // Add counter, to check how many times an address has been paid (the higher the most time this address has HODL)\r\n      PayRollCount[HOLDersList[r].HOLDersAddress] = PayRollCount[HOLDersList[r].HOLDersAddress].add(1);\r\n    }\r\n  }\r\n\r\n  function PayRollHistory(address _thisHODLer) external view returns (uint256) {\r\n\r\n    return uint256(PayRollCount[_thisHODLer]);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is PoolPartyPayRoll, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) openBarrier public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n\r\n    // update HODLer address, for iron profit distribution to iron holders - PoolParty\r\n    UpdateHOLDer(msg.sender, _to);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint external returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n\r\n    // Add holder for future iron profits distribution - PoolParty\r\n    AddHOLDer(_to);\r\n\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint external returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens. - updated to \"recoverERC20Token_SendbyMistake\"\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param missing_token ERC20Basic The address of the token contract (missing_token)\r\n   */\r\n  function recoverERC20Token_SendbyMistake(ERC20Basic missing_token) external onlyOwner {\r\n    uint256 balance = missing_token.balanceOf(this);\r\n    missing_token.safeTransfer(owner, balance);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Ether\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\r\n * in the contract, it will allow the owner to reclaim this ether.\r\n * @notice Ether can still be send to this contract by:\r\n * calling functions labeled `payable`\r\n * `selfdestruct(contract_address)`\r\n * mining directly to the contract address\r\n*/\r\ncontract HasEther is Ownable {\r\n\r\n  /**\r\n   * @dev allows direct send by settings a default function with the `payable` flag.\r\n   */\r\n  function() public payable {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function recoverETH_SendbyMistake() external onlyOwner {\r\n    // solium-disable-next-line security/no-send\r\n    assert(owner.send(address(this).balance));\r\n  }\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Contracts\r\n * @notice updated to \"reclaimChildOwnership\", ease to remember function's nature @AlberEre\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\r\n * of this contract to reclaim ownership of the contracts.\r\n */\r\ncontract HasNoContracts is Ownable {\r\n\r\n  /**\r\n   * @dev Reclaim ownership of Ownable contracts\r\n   * @param contractAddr The address of the Ownable to be reclaimed.\r\n   */\r\n  function reclaimChildOwnership(address contractAddr) public onlyOwner {\r\n    Ownable contractInst = Ownable(contractAddr);\r\n    contractInst.transferOwnership(owner);\r\n  }\r\n}\r\n\r\n/**\r\n * @title iron Token Contract\r\n * @notice \"openBarrier\" modifier applied, security check during minting process\r\n */\r\ncontract IRONtoken is MintableToken, CanReclaimToken, HasEther, HasNoContracts {\r\n\r\n  string public constant name = \"iron Bank Network token\"; // solium-disable-line uppercase\r\n  string public constant symbol = \"IRON\"; // solium-disable-line uppercase\r\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\r\n\r\n  function IRONtoken() public {\r\n  }\r\n\r\n  function setBarrierAsOpen(bool enable) onlyOwner public {\r\n      // bool(false) during token sale, bool(true) once token sale is finished\r\n      transferEnabled = enable;\r\n  }\r\n}\r\n\r\n/**\r\n * @title iron Token Sale\r\n */\r\ncontract IRONtokenSale is PoolPartyToken, CanReclaimToken, HasNoContracts {\r\n    using SafeMath for uint256;\r\n\r\n    IRONtoken public token;\r\n\r\n    struct Round {\r\n        uint256 start;          //Timestamp of token sale start (this stage)\r\n        uint256 end;            //Timestamp of token sale end (this stage)\r\n        uint256 rate;           //How much IRON you will receive per 1 ETH within this stage\r\n    }\r\n\r\n    Round[] public rounds;          //Array of token sale stages\r\n    uint256 public hardCap;         //Max amount of tokens to mint\r\n    uint256 public tokensMinted;    //Amount of tokens already minted\r\n    bool public finalized;          //token sale is finalized\r\n\r\n    function IRONtokenSale (uint256 _hardCap, uint256 _initMinted) public {\r\n\r\n      token = new IRONtoken();\r\n      token.setBarrierAsOpen(false);\r\n      tokensMinted = token.totalSupply();\r\n      require(_hardCap > 0);\r\n      hardCap = _hardCap;\r\n      mintTokens(msg.sender, _initMinted);\r\n    }\r\n\r\n    function addRound(uint256 StartTimeStamp, uint256 EndTimeStamp, uint256 Rate) onlyOwner public {\r\n      rounds.push(Round(StartTimeStamp, EndTimeStamp, Rate));\r\n    }\r\n\r\n    /**\r\n    * @notice Mint tokens for Airdrops (only external) by Alber Erre\r\n    */\r\n    function saleAirdrop(address beneficiary, uint256 amount) onlyOwner external {\r\n        mintTokens(beneficiary, amount);\r\n    }\r\n    \r\n    /**\r\n    * @notice Mint tokens for multiple addresses for Airdrops (only external) - Alber Erre\r\n    */\r\n    function MultiplesaleAirdrop(address[] beneficiaries, uint256[] amounts) onlyOwner external {\r\n      for (uint256 r=0; r<beneficiaries.length; r++){\r\n        mintTokens(address(beneficiaries[r]), uint256(amounts[r]));\r\n      }\r\n    }\r\n    \r\n    /**\r\n    * @notice Shows if crowdsale is running\r\n    */ \r\n    function ironTokensaleRunning() view public returns(bool){\r\n        return (!finalized && (tokensMinted < hardCap));\r\n    }\r\n\r\n    function currentTime() view public returns(uint256) {\r\n      return uint256(block.timestamp);\r\n    }\r\n\r\n    /**\r\n    * @notice Return current round according to current time\r\n    */ \r\n    function RoundIndex() internal returns(uint256) {\r\n      uint256 index = 0;\r\n      for (uint256 r=0; r<rounds.length; r++){\r\n        if ( (rounds[r].start < uint256(block.timestamp)) && (uint256(block.timestamp) < rounds[r].end) ) {\r\n          index = r.add(1);\r\n        }\r\n      }\r\n      return index;\r\n    }\r\n\r\n    function currentRound() view public returns(uint256) {\r\n      return RoundIndex();\r\n    }\r\n\r\n    function currentRate() view public returns(uint256) {\r\n        uint256 thisRound = RoundIndex();\r\n        if (thisRound != 0) {\r\n            return uint256(rounds[thisRound.sub(1)].rate);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function _magic(uint256 _weiAmount) internal view returns (uint256) {\r\n      uint256 tokenRate = currentRate();\r\n      require(tokenRate > 0);\r\n      uint256 preTransformweiAmount = tokenRate.mul(_weiAmount);\r\n      uint256 transform = 10**18;\r\n      uint256 TransformedweiAmount = preTransformweiAmount.div(transform);\r\n      return TransformedweiAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function ***DO NOT OVERRIDE***\r\n     */\r\n    function () external payable {\r\n      require(msg.value > 0);\r\n      require(ironTokensaleRunning());\r\n      uint256 weiAmount = msg.value;\r\n      uint256 tokens = _magic(weiAmount);\r\n      JustForward(msg.value);\r\n      mintTokens(msg.sender, tokens);\r\n    }\r\n\r\n    /**\r\n    * @notice mint tokens and apply PoolParty method (Alber Erre)\r\n    * @dev Helper function to mint tokens and increase tokensMinted counter\r\n    */\r\n    function mintTokens(address beneficiary, uint256 amount) internal {\r\n        tokensMinted = tokensMinted.add(amount);       \r\n\r\n        require(tokensMinted <= hardCap);\r\n        assert(token.mint(beneficiary, amount));\r\n\r\n        // Add holder for future iron profits distribution\r\n        AddHOLDer(beneficiary);\r\n    }\r\n\r\n    function JustForward(uint256 weiAmount) internal {\r\n      owner.transfer(weiAmount);\r\n    }\r\n\r\n    function forwardCollectedEther() onlyOwner public {\r\n        if(address(this).balance > 0){\r\n            owner.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice ICO End: \"openBarrier\" no longer applied, allows token transfers\r\n    */\r\n    function finalizeTokensale() onlyOwner public {\r\n        finalized = true;\r\n        assert(token.finishMinting());\r\n        token.setBarrierAsOpen(true);\r\n        token.transferOwnership(owner);\r\n        forwardCollectedEther();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"reclaimChildOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeTokensale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"saleAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ironTokensaleRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forwardCollectedEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"StartTimeStamp\",\"type\":\"uint256\"},{\"name\":\"EndTimeStamp\",\"type\":\"uint256\"},{\"name\":\"Rate\",\"type\":\"uint256\"}],\"name\":\"addRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"MultiplesaleAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"missing_token\",\"type\":\"address\"}],\"name\":\"recoverERC20Token_SendbyMistake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"HOLDersList\",\"outputs\":[{\"name\":\"HOLDersAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"_initMinted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"IRONtokenSale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000004ab5fa000000000000000000000000000000000000000000000000000000000007a1200","Library":"","SwarmSource":"bzzr://5ead122e70dffd1ee7e4a931670ed9a9eebe581f7773142fb411c3dc84a2ed12"}]}