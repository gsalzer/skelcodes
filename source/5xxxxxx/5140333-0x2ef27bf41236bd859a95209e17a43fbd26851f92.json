{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * \r\n * This contract is used to set admin to the contract  which has some additional features such as minting , burning etc\r\n * \r\n */\r\n    contract Owned {\r\n        address public owner;\r\n\r\n        function owned() public {\r\n            owner = msg.sender;\r\n        }\r\n\r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n        \r\n        /* This function is used to transfer adminship to new owner\r\n         * @param  _newOwner - address of new admin or owner        \r\n         */\r\n\r\n        function transferOwnership(address _newOwner) onlyOwner public {\r\n            owner = _newOwner;\r\n        }          \r\n    }\r\n\r\n\r\n/**\r\n * This is base ERC20 Contract , basically ERC-20 defines a common list of rules for all Ethereum tokens to follow\r\n */ \r\n\r\ncontract ERC20 {\r\n  \r\n  using SafeMath for uint256;\r\n\r\n  //This creates an array with all balances \r\n  mapping (address => uint256) public balanceOf;\r\n  mapping (address => mapping (address => uint256)) allowed;  \r\n\r\n  //This maintains list of all black list account\r\n  mapping(address => bool) public isblacklistedAccount;\r\n    \r\n  // public variables of the token  \r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals = 4;\r\n  uint256 public totalSupply;\r\n   \r\n  // This notifies client about the approval done by owner to spender for a given value\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  // This notifies client about the approval done\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n \r\n  \r\n  function ERC20(uint256 _initialSupply,string _tokenName, string _tokenSymbol) public {    \r\n    totalSupply = _initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount     \r\n    balanceOf[msg.sender] = totalSupply;  \r\n    name = _tokenName;\r\n    symbol = _tokenSymbol;   \r\n  }\r\n  \r\n    /* This function is used to transfer tokens to a particular address \r\n     * @param _to receiver address where transfer is to be done\r\n     * @param _value value to be transferred\r\n     */\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(!isblacklistedAccount[msg.sender]);                 // Check if sender is not blacklisted\r\n        require(!isblacklistedAccount[_to]);                        // Check if receiver is not blacklisted\r\n\t\trequire(balanceOf[msg.sender] > 0);                     \r\n\t\trequire(balanceOf[msg.sender] >= _value);                   // Check if the sender has enough  \r\n\t\trequire(_to != address(0));                                 // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(_value > 0);\r\n\t\trequire(balanceOf[_to] .add(_value) >= balanceOf[_to]);     // Check for overflows \r\n\t\trequire(_to != msg.sender);                                 // Check if sender and receiver is not same\r\n\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);  // Subtract value from sender\r\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);                // Add the value to the receiver\r\n\t\tTransfer(msg.sender, _to, _value);                          // Notify all clients about the transfer events\r\n        return true;\r\n\t}\r\n\r\n\t/* Send _value amount of tokens from address _from to address _to\r\n     * The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n     * tokens on your behalf\r\n     * @param _from address from which amount is to be transferred\r\n     * @param _to address to which amount is transferred\r\n     * @param _amount to which amount is transferred\r\n     */\r\n    function transferFrom(\r\n         address _from,\r\n         address _to,\r\n         uint256 _amount\r\n     ) public returns (bool success)\r\n      {\r\n         if (balanceOf[_from] >= _amount\r\n             && allowed[_from][msg.sender] >= _amount\r\n             && _amount > 0\r\n             && balanceOf[_to].add(_amount) > balanceOf[_to])\r\n        {\r\n             balanceOf[_from] = balanceOf[_from].sub(_amount);\r\n             allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n             balanceOf[_to] = balanceOf[_to].add(_amount);\r\n             return true;\r\n        } else {\r\n             return false;\r\n        }\r\n    }\r\n    \r\n    /* This function allows _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     * If this function is called again it overwrites the current allowance with _value.\r\n     * @param _spender address of the spender\r\n     * @param _amount amount allowed to be withdrawal\r\n     */\r\n     function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n         allowed[msg.sender][_spender] = _amount;\r\n         Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n    } \r\n\r\n    /* This function returns the amount of tokens approved by the owner that can be\r\n     * transferred to the spender's account\r\n     * @param _owner address of the owner\r\n     * @param _spender address of the spender \r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n         return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n//This is the Main Morph Token Contract derived from the other two contracts Owned and ERC20\r\ncontract MorphToken is Owned, ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256  tokenSupply = 100000000; \r\n             \r\n    // This notifies clients about the amount burnt , only admin is able to burn the contract\r\n    event Burn(address from, uint256 value); \r\n    \r\n    /* This is the main Token Constructor \r\n     * @param _centralAdmin  Address of the admin of the contract\r\n     */\r\n\tfunction MorphToken() \r\n\r\n\tERC20 (tokenSupply,\"MORPH\",\"MORPH\") public\r\n    {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n       \r\n    /* This function is used to Blacklist a user or unblacklist already blacklisted users, blacklisted users are not able to transfer funds\r\n     * only admin can invoke this function\r\n     * @param _target address of the target \r\n     * @param _isBlacklisted boolean value\r\n     */\r\n    function blacklistAccount(address _target, bool _isBlacklisted) public onlyOwner {\r\n        isblacklistedAccount[_target] = _isBlacklisted;       \r\n    }\r\n\r\n\r\n    /* This function is used to mint additional tokens\r\n     * only admin can invoke this function\r\n     * @param _mintedAmount amount of tokens to be minted  \r\n     */\r\n    function mintTokens(uint256 _mintedAmount) public onlyOwner {\r\n        balanceOf[owner] = balanceOf[owner].add(_mintedAmount);\r\n        totalSupply = totalSupply.add(_mintedAmount);\r\n        Transfer(0, owner, _mintedAmount);      \r\n    }    \r\n\r\n     /**\r\n    * This function Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    */\r\n    function burn(uint256 _value) public onlyOwner {\r\n      require(_value <= balanceOf[msg.sender]);\r\n      // no need to require value <= totalSupply, since that would imply the\r\n      // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n      address burner = msg.sender;\r\n      balanceOf[burner] = balanceOf[burner].sub(_value);\r\n      totalSupply = totalSupply.sub(_value);\r\n      Burn(burner, _value);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_isBlacklisted\",\"type\":\"bool\"}],\"name\":\"blacklistAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isblacklistedAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"owned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MorphToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://63231087ec04820281edd2122fcba9974acc48a47dd9627de707529863e75ee5"}]}