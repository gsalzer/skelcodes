{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\n/**************************************\r\n * @title ERC721\r\n * @dev ethereum \"standard\" interface\r\n **************************************/ \r\ncontract ERC721 {\r\n    event Transfer(address _from, address _to, uint256 _tokenId);\r\n    event Approval(address _owner, address _approved, uint256 _tokenId);\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    function totalSupply() constant returns (uint256 totalSupply);\r\n    \r\n    function tokenMetadata(uint256 _tokenId) constant returns (string infoUrl);\r\n    \r\n    function name() constant returns (string name);\r\n    function symbol() constant returns (string symbol);\r\n}\r\n\r\n/**************************************\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n **************************************/ \r\ncontract Ownable {\r\n  address public owner;\r\n\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**************************************\r\n * @title Config\r\n * @dev all necessary setups for contracts\r\n **************************************/ \r\ncontract Config is Ownable {\r\n    event Setup(uint8 _patchVersion, uint256 _cardPrice, uint8 _percentage1, uint8 _percentage2);\r\n    event Gift(uint256 _count, address _from, address _to);\r\n    uint256 internal randomNonce = 0;\r\n    uint256 internal cardPrice = 0;\r\n    uint256 internal patchTimestamp;\r\n    uint8   internal patchVersion = 0;\r\n    uint8   internal level = 1;\r\n    uint32  internal constantTime = (6048 * 100) + 1; // 7 days\r\n    uint8   internal percentage1 = 60;\r\n    uint8   internal percentage2 = 80;\r\n    uint8   internal auctionMarge = 5;\r\n    uint128  internal levelUp = 8 * 10 ** 15; // 0.008 ether + levelUp\r\n    uint128 internal levelUpVIP =4 * 10 **15; // 0.004 ether\r\n\tuint128 internal VIPCost = 99 * 10 ** 16; // 0.99 ether\r\n\tstring internal URL = \"https://www.etherchicks.com/card/\";\r\n    \r\n\r\n   struct User{\r\n        uint256 gifts;\r\n        bool vip;\r\n        bool exists;\r\n    }\r\n    mapping (address => User) userProfile;\r\n    \r\n    function giftFor(address _from, address _target, uint256 _count) internal{\r\n        uint256 giftCount = _count;\r\n        if(userProfile[_target].exists)\r\n        {\r\n            if(userProfile[_target].vip)\r\n            {\r\n                giftCount += 1;\r\n            }\r\n            userProfile[_target].gifts += giftCount;\r\n            Gift(giftCount, _from, _target);\r\n        }\r\n    }\r\n    \r\n    function setUser(address _id, address _target, bool _vip) internal\r\n    {\r\n        if(!userProfile[_id].exists){\r\n            giftFor(_id, _target, 1);\r\n            \r\n            User memory user = User(\r\n               0,\r\n               _vip,\r\n               true\r\n            );\r\n            userProfile[_id] = user;\r\n        }\r\n        else if(_vip == true){\r\n           userProfile[_id].vip = _vip; \r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    function getUser(address _id) external view returns (uint256 Gifts, bool VIP, bool Exists)\r\n    {\r\n        return (userProfile[_id].gifts, userProfile[_id].vip, userProfile[_id].exists);\r\n    }\r\n    \r\n    mapping (address => uint8) participant;\r\n    mapping (uint8 => address) participantIndex;\r\n    uint8 internal numberOfParticipants = 0;\r\n    \r\n    function setPatch(uint256 _cardPrice, uint8 _percentage1, uint8 _percentage2) public onlyOwner {\r\n        patchVersion++;\r\n        cardPrice = _cardPrice;\r\n        patchTimestamp = now;\r\n        \r\n        if(_percentage1 != 0 && _percentage2 != 0){\r\n            percentage1 = _percentage1;\r\n            percentage2 = _percentage2;\r\n        }\r\n        \r\n        Setup(patchVersion, cardPrice, percentage1, percentage2);\r\n    }\r\n    \r\n      function percentage(uint256 cost, uint8 _percentage) internal pure returns(uint256)\r\n      {\r\n          require(_percentage < 100);\r\n          return (cost * _percentage) / 100;\r\n      }\r\n      \r\n      function setACmarge(uint8 _auctionMarge) external onlyOwner {\r\n          auctionMarge = _auctionMarge;\r\n      }\r\n      function setUrl(string _url) external onlyOwner {\r\n          URL = _url;\r\n      }\r\n    \r\n    function addParticipant(address _participant, uint8 _portion) external onlyOwner {\r\n        participantIndex[numberOfParticipants] = _participant;\r\n        participant[_participant] = _portion;\r\n        numberOfParticipants++;\r\n    }\r\n    function removeParticipant(uint8 _index) external onlyOwner\r\n    {\r\n        delete participant[participantIndex[_index]];\r\n        delete participantIndex[_index];\r\n        numberOfParticipants--;\r\n    }\r\n    function getAllParticipants() external view onlyOwner returns(address[], uint8[]) {\r\n        address[] memory addresses = new address[](numberOfParticipants);\r\n        uint8[] memory portions   = new uint8[](numberOfParticipants);\r\n        for(uint8 i=0; i<numberOfParticipants; i++)\r\n        {\r\n            addresses[i] =participantIndex[i];\r\n            portions[i] = participant[participantIndex[i]];\r\n        }\r\n        return (addresses, portions);\r\n    }\r\n    \r\n    \r\n}\r\n\r\n/**************************************\r\n * @title CardCore\r\n * @dev this contract contains basic definition of cards and also \r\n * generates new cards\r\n **************************************/\r\ncontract CardCore is Config {\r\n\r\n    event Birth(address userAddress, uint256 cardId, uint256 code, uint8 level, uint8 patch);\r\n    event Update(address userAddress, uint256 cardId, uint8 level);\r\n    event VIP(address userAddress);\r\n\r\n    // one card is defined single uint256\r\n    struct Card{\r\n        uint256 code;\r\n        uint8 level;\r\n        uint8 patch;\r\n    }\r\n\r\n    Card[] public cards;\r\n\r\n    // standard mapping\r\n    mapping (uint256 => address) cardToOwner;\r\n    mapping (address => uint256) ownerCardCount;\r\n\r\n    modifier cardOwner(uint256 _cardId) {\r\n        require(msg.sender == cardToOwner[_cardId]);\r\n        _;\r\n    }\r\n    \r\n\r\n    function _generateCode(address _userAddress, uint256 _blockNr) internal returns (uint256){\r\n        randomNonce++;\r\n        uint256 newCode = uint256(keccak256(_userAddress, _blockNr, randomNonce));\r\n        return newCode;\r\n    }\r\n    \r\n    function _updateCard(address _userAddress, uint256 _cardId) internal{\r\n        require(_owns(_userAddress, _cardId));\r\n        Card storage storedCard = cards[_cardId];\r\n        if(storedCard.level < 9)\r\n        {\r\n            storedCard.level++;\r\n            // raise event Updated\r\n            Update(_userAddress, _cardId, storedCard.level);\r\n        }\r\n    }\r\n    \r\n    function _beingVIP(address _userAddress) internal{\r\n        setUser(msg.sender, address(0), true);\r\n        VIP(_userAddress);\r\n    }\r\n    \r\n    function _owns(address _userAddress, uint256 _cardId) internal view returns (bool) {\r\n        return cardToOwner[_cardId] == _userAddress;\r\n    }\r\n    \r\n    function _getCards(uint8 numberOfCards, address _userAddress) internal{\r\n        // number of card in pack must be higher as 0\r\n        require(numberOfCards > 0);\r\n        require(numberOfCards < 11);\r\n        // init local variable\r\n        uint256 cardId;\r\n        uint256 cardCode;\r\n        Card memory c;\r\n        uint256 _blockNr = uint256(keccak256(block.blockhash(block.number-1)));\r\n        for(uint8 i = 0; i < numberOfCards; i++)\r\n        {\r\n            cardCode = _generateCode(_userAddress, _blockNr);\r\n            c = Card(cardCode, level, patchVersion);\r\n            cardId = cards.push(c) - 1;\r\n            \r\n            // association id to address\r\n            cardToOwner[cardId] = _userAddress;\r\n            ownerCardCount[_userAddress]++;\r\n            // raise event Birth\r\n            Birth(_userAddress, cardId, cardCode, level, patchVersion);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n/**************************************\r\n * @title CardOwnership\r\n * @dev erc721 compatible provides function from inherited interface\r\n **************************************/\r\n \r\ncontract CardOwnership is CardCore, ERC721 {\r\n\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n\r\n    mapping (uint256 => address) cardApprovals;\r\n\t/// internal, private\r\n\r\n    \r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        ownerCardCount[_to]++;\r\n        // transfer ownership\r\n        cardToOwner[_tokenId] = _to;\r\n\r\n        ownerCardCount[_from]--;\r\n        // clear any previously approved ownership exchange\r\n        \r\n        delete cardApprovals[_tokenId];\r\n       \r\n        // Emit the transfer event.\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownerCardCount[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public cardOwner(_tokenId)\r\n    {\r\n        // no init address no contract address\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(cardApprovals[_tokenId] == address(0));\r\n\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n      function name() constant returns (string name){\r\n        return \"Etherchicks\";\r\n      }\r\n       function symbol() constant returns (string symbol){\r\n        return \"ETCS\";\r\n      }\r\n      \r\n  \r\n    // Only an owner can grant transfer approval.\r\n    function approve(address _to, uint256 _tokenId) public cardOwner(_tokenId) \r\n    {\r\n        // Register the approval (replacing any previous approval).\r\n        cardApprovals[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n\r\n    /// return all erc721 ents unit\r\n    function totalSupply() public view returns (uint) {\r\n        return cards.length - 1;\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (address _owner)\r\n    {\r\n        return cardToOwner[_tokenId];\r\n    }\r\n    \r\n      function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n    {       \r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(cardApprovals[_tokenId] == address(this));\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// expensive call count of all tokens per owner\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            // Return an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalCards = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            // We count on the fact that all cats have IDs starting at 1 and increasing\r\n            // sequentially up to the totalCat count.\r\n            uint256 tokId;\r\n\r\n            for (tokId = 1; tokId <= totalCards ; tokId++) {\r\n                if (cardToOwner[tokId] == _owner) {\r\n                    result[resultIndex] = tokId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n    function appendUintToString(string inStr, uint256 v) constant internal returns (string str) {\r\n        uint maxlength = 100;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v / 10;\r\n            reversed[i++] = byte(48 + remainder);\r\n        }\r\n        bytes memory inStrb = bytes(inStr);\r\n        bytes memory s = new bytes(inStrb.length + i + 1);\r\n        uint j;\r\n        for (j = 0; j < inStrb.length; j++) {\r\n            s[j] = inStrb[j];\r\n        }\r\n        for (j = 0; j <= i; j++) {\r\n            s[j + inStrb.length] = reversed[i - j];\r\n        }\r\n        str = string(s);\r\n        return str;\r\n    }\r\n    \r\n    function tokenMetadata(uint256 _tokenId) constant returns (string infoUrl) \r\n    {\r\n        return appendUintToString(URL, _tokenId);\r\n    }\r\n    \r\n\r\n}\r\n\r\n/**************************************\r\n * @title AuctionHouse\r\n * @dev provides simple auction of NFT tokens\r\n **************************************/\r\ncontract AuctionHouse is CardOwnership {\r\n    \r\n    event AuctionStarted(uint256 tokenId, uint128 startPrice, uint128 finalPrice, uint256 timestamp);\r\n    event AuctionEnded(address winner, uint256 tokenId);\r\n    struct Auction {\r\n        address seller;\r\n        uint128 startPrice;\r\n        uint128 finalPrice;\r\n        uint256 timestamp;\r\n    }\r\n    mapping (uint256 => Auction) public tokenIdToAuction;\r\n\t// max auction time for token is 7 days..\r\n      \r\n    function _isAuctionAble(uint256 _timestamp) internal view returns(bool)\r\n    {\r\n       return (_timestamp + constantTime >= now);\r\n    }\r\n  \r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint128 _startPrice,\r\n        uint128 _finalPrice\r\n    ) external cardOwner(_tokenId){\r\n\t    require(!_isAuctionAble(tokenIdToAuction[_tokenId].timestamp));\r\n        // then approve for this\r\n        approve( this, _tokenId);\r\n         \r\n        Auction memory auction = Auction(\r\n            msg.sender,\r\n            _startPrice,\r\n            _finalPrice,\r\n            now\r\n        );\r\n        \r\n        tokenIdToAuction[_tokenId] = auction;\r\n        AuctionStarted(_tokenId, _startPrice, _finalPrice, now);\r\n    }\r\n\t\r\n    function buyout(uint256 _tokenId) external payable {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        \r\n        require(_isAuctionAble(auction.timestamp));\r\n        \r\n        uint256 price = _currentPrice(auction);\r\n        \r\n        require(msg.value >= price);\r\n        \r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        \r\n        uint256 auctionCost = percentage(msg.value, auctionMarge); \r\n        \r\n        _removeAuction(_tokenId);\r\n        //send money to seller\r\n         seller.transfer(msg.value - auctionCost);\r\n         // do transfer token\r\n        transferFrom(seller, msg.sender, _tokenId);\r\n        AuctionEnded(msg.sender, _tokenId);\r\n\r\n    }\r\n    \r\n    function _currentPrice(Auction storage _auction)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 secondsPassed = 0;\r\n\r\n        if (now > _auction.timestamp) {\r\n            secondsPassed = now - _auction.timestamp;\r\n        }\r\n\r\n        return _computeCurrentPrice(\r\n            _auction.startPrice,\r\n            _auction.finalPrice,\r\n            secondsPassed,\r\n            constantTime\r\n        );\r\n    }\r\n    function _computeCurrentPrice(\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _secondsPassed,\r\n        uint32 _sevenDays\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n    \r\n        if (_secondsPassed >= _sevenDays) {\r\n            return _endingPrice;\r\n        } \r\n        else \r\n        {\r\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\r\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_sevenDays);\r\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\r\n\r\n            return uint256(currentPrice);\r\n        }\r\n    }\r\n\r\n\r\n\tfunction cancelAuction(uint256 _tokenId)\r\n        external cardOwner(_tokenId)\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(auction.timestamp > 0);\r\n        require(msg.sender == auction.seller);\r\n        \r\n        _removeAuction(_tokenId);\r\n        delete cardApprovals[_tokenId];\r\n        AuctionEnded(address(0), _tokenId);\r\n    }\r\n\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n        delete tokenIdToAuction[_tokenId];\r\n    }\r\n    function getCurrentPrice(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isAuctionAble(auction.timestamp));\r\n        return _currentPrice(auction);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n/**************************************\r\n * @title Etherchicks\r\n * @dev call constructor, implements payable mechanism\r\n **************************************/\r\ncontract Etherchicks is AuctionHouse {\r\n      \r\n    function Etherchicks() public {\r\n        // init setup #1\r\n       setPatch(3 * 10 ** 16,  0, 0 );\r\n       _beingVIP(msg.sender);\r\n    }\r\n\r\n    function getCard(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n        uint256 code,\r\n        uint8  level,\r\n        uint8   patch\r\n    ) {               \r\n        Card storage card = cards[_id];\r\n        code = uint256(card.code);\r\n        level = uint8(card.level);\r\n        patch = uint8(card.patch);\r\n        \r\n    }\r\n    function _calculateDiscount(uint8 _nr, address _user) internal view returns (uint256){       \r\n      uint256 _cardPrice = cardPrice * _nr;      \r\n      if(uint256(constantTime + patchTimestamp) >= now)\r\n      {\r\n          _cardPrice = percentage(_cardPrice, percentage1);\r\n      }\r\n      else if(uint256((constantTime * 2) + patchTimestamp) >= now)\r\n      {\r\n          _cardPrice = percentage(_cardPrice, percentage2);\r\n      }    \r\n      \r\n      if(userProfile[_user].exists && userProfile[_user].vip)\r\n      {\r\n          _cardPrice = percentage(_cardPrice, 50);\r\n      }\r\n      return _cardPrice;\r\n  }\r\n     \r\n    function getMarketPrice(uint8 _nr) external view returns(uint256){\r\n        return _calculateDiscount(_nr, msg.sender);\r\n    }  \r\n  function buyCardsAndSendGift(uint8 _nr, address _referral) external payable{\r\n      require(_calculateDiscount(_nr, msg.sender) <= msg.value);\r\n        _getCards(_nr, msg.sender);\r\n        setUser(msg.sender, _referral, false);\r\n  }\r\n  \r\n  function buyCards(uint8 _nr) external payable\r\n  {\r\n      require(_calculateDiscount(_nr, msg.sender) <= msg.value);\r\n        _getCards(_nr, msg.sender);\r\n        setUser(msg.sender, address(0), false);\r\n  }\r\n  function sendGift(address _targetAddress, uint256 _count) external onlyOwner\r\n  {\r\n      giftFor(address(0), _targetAddress, _count);\r\n  }\r\n  function withdrawGift() external{\r\n      if(userProfile[msg.sender].gifts > 0)\r\n      {\r\n        _getCards(1, msg.sender);\r\n        userProfile[msg.sender].gifts--;\r\n      }\r\n  }\r\n  \r\n  function beingVIP() external payable{\r\n      require(VIPCost <= msg.value);\r\n      _beingVIP(msg.sender);\r\n  }\r\n    \r\n    function updateCard(uint256 _cardId) external payable{        \r\n        // is not in auction\r\n        require(cardApprovals[_cardId] == address(0));\r\n        uint128 cost = getLevelUpCost(msg.sender); \r\n        require(cost <= msg.value);\r\n        _updateCard(msg.sender, _cardId);\r\n  }\r\n  \r\n  function getLevelUpCost(address _address) public view returns (uint128){\r\n        uint128 cost = levelUp;  \r\n        if(userProfile[_address].vip)\r\n        {\r\n            cost = levelUpVIP;\r\n        }\r\n        return cost;\r\n  }\r\n  \r\n    // withdrawal function is called monthly\r\n    function withdrawBalance(uint256 _amount) external onlyOwner  {\r\n        uint256 amount = this.balance;\r\n\t\tif(_amount <= amount)\r\n\t\t{\r\n\t\t    amount = participantsFirst(_amount);\r\n\t\t\towner.transfer(_amount);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t    amount = participantsFirst(amount);\r\n\t\t    owner.transfer(amount);\r\n\t\t}\r\n    }\r\n    \r\n    function participantsFirst(uint256 _amount) internal returns(uint256){\r\n        uint256 provision;\r\n        uint256 amount = _amount;\r\n        for(uint8 i=0; i < numberOfParticipants; i++)\r\n        {\r\n            provision = percentage(_amount, participant[participantIndex[i]]);\r\n            amount = amount - provision;\r\n            participantIndex[i].transfer(provision);\r\n        }\r\n        return amount;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLevelUpCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyout\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"beingVIP\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"removeParticipant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_portion\",\"type\":\"uint8\"}],\"name\":\"addParticipant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint128\"},{\"name\":\"_finalPrice\",\"type\":\"uint128\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nr\",\"type\":\"uint8\"}],\"name\":\"getMarketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardPrice\",\"type\":\"uint256\"},{\"name\":\"_percentage1\",\"type\":\"uint8\"},{\"name\":\"_percentage2\",\"type\":\"uint8\"}],\"name\":\"setPatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetAddress\",\"type\":\"address\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"sendGift\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"name\":\"Gifts\",\"type\":\"uint256\"},{\"name\":\"VIP\",\"type\":\"bool\"},{\"name\":\"Exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cards\",\"outputs\":[{\"name\":\"code\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"patch\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nr\",\"type\":\"uint8\"}],\"name\":\"buyCards\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCard\",\"outputs\":[{\"name\":\"code\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"patch\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionMarge\",\"type\":\"uint8\"}],\"name\":\"setACmarge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"updateCard\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawGift\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nr\",\"type\":\"uint8\"},{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"buyCardsAndSendGift\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToAuction\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"startPrice\",\"type\":\"uint128\"},{\"name\":\"finalPrice\",\"type\":\"uint128\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"finalPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"code\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"patch\",\"type\":\"uint8\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"VIP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_patchVersion\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_cardPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_percentage1\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_percentage2\",\"type\":\"uint8\"}],\"name\":\"Setup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Gift\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Etherchicks","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2d864073a62dda394b41e3792466ad35d84068c93c5db29602ef20a8ec95d6b0"}]}