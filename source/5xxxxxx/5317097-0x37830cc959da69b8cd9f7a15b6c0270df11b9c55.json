{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract Items{\r\n    address owner;\r\n    address helper = 0x690F34053ddC11bdFF95D44bdfEb6B0b83CBAb58;\r\n    \r\n    // Marketplace written by Etherguy and Poorguy\r\n    \r\n    // Change the below numbers to edit the development fee. \r\n    // This can also be done by calling SetDevFee and SetHFee \r\n    // Numbers are divided by 10000 to calcualte the cut \r\n    uint16 public DevFee = 500; // 500 / 10000 -> 5% \r\n    uint16 public HelperPortion = 5000; // 5000 / 10000 -> 50% (This is the cut taken from the total dev fee)\r\n    \r\n    // Increase in price \r\n    // 0 means that the price stays the same \r\n    // Again divide by 10000\r\n    // 10000 means: 10000/10000 = 1, which means the new price = OldPrice * (1 + (10000/1000)) = OldPrice * (1+1) = 2*OldPrice \r\n    // Hence the price doubles.\r\n    // This setting can be changed via SetPriceIncrease\r\n    // The maximum setting is the uint16 max value 65535 which means an insane increase of more than 6.5x \r\n    uint16 public PriceIncrease = 2000;\r\n    \r\n    struct Item{\r\n        address Owner;\r\n        uint256 Price;\r\n    }\r\n    \r\n    mapping(uint256 => Item) Market; \r\n    \r\n    uint256 public NextItemID = 0;\r\n    event ItemBought(address owner, uint256 id, uint256 newprice);\r\n    \r\n    function Items() public {\r\n        owner = msg.sender;\r\n        \r\n        // Add initial items here to created directly by contract release. \r\n        \r\n      //  AddMultipleItems(0.00666 ether, 3); // Create 3 items for 0.00666 ether basic price at start of contract.\r\n      \r\n      \r\n      // INITIALIZE 17 items so we can transfer ownership ...\r\n      AddMultipleItems(0.006666 ether, 36);\r\n      \r\n      \r\n      // SETUP their data \r\n      Market[0].Owner = 0xC84c18A88789dBa5B0cA9C13973435BbcE7e961d;\r\n      Market[0].Price = 32000000000000000;\r\n      Market[1].Owner = 0x86b0b5Bb83D18FfdAE6B6E377971Fadf4F9aE6c0;\r\n      Market[1].Price = 16000000000000000;\r\n      Market[2].Owner = 0xFEA0904ACc8Df0F3288b6583f60B86c36Ea52AcD;\r\n      Market[2].Price = 16000000000000000;\r\n      Market[3].Owner = 0xC84c18A88789dBa5B0cA9C13973435BbcE7e961d;\r\n      Market[3].Price = 16000000000000000;\r\n      Market[4].Owner = 0xC84c18A88789dBa5B0cA9C13973435BbcE7e961d;\r\n      Market[4].Price = 32000000000000000;\r\n      Market[5].Owner = 0x1Eb695D7575EDa1F2c8a0aA6eDf871B5FC73eA6d;\r\n      Market[5].Price = 16000000000000000;\r\n      Market[6].Owner = 0xC84c18A88789dBa5B0cA9C13973435BbcE7e961d;\r\n      Market[6].Price = 32000000000000000;\r\n      Market[7].Owner = 0x183feBd8828a9ac6c70C0e27FbF441b93004fC05;\r\n      Market[7].Price = 16000000000000000;\r\n      Market[8].Owner = 0x74e5a4cbA4E44E2200844670297a0D5D0abe281F;\r\n      Market[8].Price = 16000000000000000;\r\n      Market[9].Owner = 0xC84c18A88789dBa5B0cA9C13973435BbcE7e961d;\r\n      Market[9].Price = 13320000000000000;\r\n      Market[10].Owner = 0xc34434842b9dC9CAB4E4727298A166be765B4F32;\r\n      Market[10].Price = 13320000000000000;\r\n      Market[11].Owner = 0xDE7002143bFABc4c5b214b00C782608b19312831;\r\n      Market[11].Price = 13320000000000000;\r\n      Market[12].Owner = 0xd33614943bCaaDb857a58fF7c36157F21643dF36;\r\n      Market[12].Price = 13320000000000000;\r\n      Market[13].Owner = 0xc34434842b9dC9CAB4E4727298A166be765B4F32;\r\n      Market[13].Price = 13320000000000000;\r\n      Market[14].Owner = 0xb03bEF1D9659363a9357aB29a05941491AcCb4eC;\r\n      Market[14].Price = 26640000000000000;\r\n      Market[15].Owner = 0x36E058332aE39efaD2315776B9c844E30d07388B;\r\n      Market[15].Price = 26640000000000000;\r\n      Market[16].Owner = 0xd33614943bCaaDb857a58fF7c36157F21643dF36;\r\n      Market[16].Price = 13320000000000000;\r\n      Market[17].Owner = 0x976b7B7E25e70C569915738d58450092bFAD5AF7;\r\n      Market[17].Price = 26640000000000000;\r\n      Market[18].Owner = 0xB7619660956C55A974Cb02208D7B723217193528;\r\n      Market[18].Price = 13320000000000000;\r\n      Market[19].Owner = 0x36E058332aE39efaD2315776B9c844E30d07388B;\r\n      Market[19].Price = 26640000000000000;\r\n      Market[20].Owner = 0x221D8F6B44Da3572Ffa498F0fFC6bD0bc3A84d94;\r\n      Market[20].Price = 26640000000000000;\r\n      Market[21].Owner = 0xB7619660956C55A974Cb02208D7B723217193528;\r\n      Market[21].Price = 13320000000000000;\r\n      Market[22].Owner = 0x0960069855Bd812717E5A8f63C302B4e43bAD89F;\r\n      Market[22].Price = 26640000000000000;\r\n      Market[23].Owner = 0x45F8262F7Ec0D5433c7541309a6729FE96e1d482;\r\n      Market[23].Price = 13320000000000000;\r\n      Market[24].Owner = 0xB7619660956C55A974Cb02208D7B723217193528;\r\n      Market[24].Price = 53280000000000000;\r\n      Market[25].Owner = 0x36E058332aE39efaD2315776B9c844E30d07388B;\r\n      Market[25].Price = 53280000000000000;\r\n      \r\n      // Uncomment to add MORE ITEMS\r\n     // AddMultipleItems(0.006666 ether, 17);\r\n    }\r\n    \r\n    // web function, return item info \r\n    function ItemInfo(uint256 id) public view returns (uint256 ItemPrice, address CurrentOwner){\r\n        return (Market[id].Price, Market[id].Owner);\r\n    }\r\n    \r\n    // Add a single item. \r\n    function AddItem(uint256 price) public {\r\n        require(price != 0); // Price 0 means item is not available. \r\n        require(msg.sender == owner);\r\n        Item memory ItemToAdd = Item(0x0, price); // Set owner to 0x0 -> Recognized as owner\r\n        Market[NextItemID] = ItemToAdd;\r\n        NextItemID = add(NextItemID, 1); // This absolutely prevents overwriting items\r\n    }\r\n    \r\n    // Add multiple items \r\n    // All for same price \r\n    // This saves sending 10 tickets to create 10 items. \r\n    function AddMultipleItems(uint256 price, uint8 howmuch) public {\r\n        require(msg.sender == owner);\r\n        require(price != 0);\r\n        require(howmuch != 255); // this is to prevent an infinite for loop\r\n        uint8 i=0;\r\n        for (i; i<howmuch; i++){\r\n            AddItem(price);\r\n        }\r\n    }\r\n    \r\n\r\n    function BuyItem(uint256 id) payable public{\r\n        Item storage MyItem = Market[id];\r\n        require(MyItem.Price != 0); // It is not possible to edit existing items.\r\n        require(msg.value >= MyItem.Price); // Pay enough thanks .\r\n        uint256 ValueLeft = DoDev(MyItem.Price);\r\n        uint256 Excess = sub(msg.value, MyItem.Price);\r\n        if (Excess > 0){\r\n            msg.sender.transfer(Excess); // Pay back too much sent \r\n        }\r\n        \r\n        // Proceed buy \r\n        address target = MyItem.Owner;\r\n        \r\n        // Initial items are owned by owner. \r\n        if (target == 0x0){\r\n            target = owner; \r\n        }\r\n        \r\n        target.transfer(ValueLeft);\r\n        // set owner and price. \r\n        MyItem.Price = mul(MyItem.Price, (uint256(PriceIncrease) + uint256(10000)))/10000; // division 10000 to scale stuff right. No need SafeMath this only errors when DIV by 0.\r\n        MyItem.Owner = msg.sender;\r\n        emit ItemBought(msg.sender, id, MyItem.Price);\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    // Management stuff, not interesting after here .\r\n    \r\n    \r\n    function DoDev(uint256 val) internal returns (uint256){\r\n        uint256 tval = (mul(val, DevFee)) / 10000;\r\n        uint256 hval = (mul(tval, HelperPortion)) / 10000;\r\n        uint256 dval = sub(tval, hval); \r\n        \r\n        owner.transfer(dval);\r\n        helper.transfer(hval);\r\n        return (sub(val,tval));\r\n    }\r\n    \r\n    // allows to change dev fee. max is 6.5%\r\n    function SetDevFee(uint16 tfee) public {\r\n        require(msg.sender == owner);\r\n        require(tfee <= 650);\r\n        DevFee = tfee;\r\n    }\r\n    \r\n    // allows to change helper fee. minimum is 10%, max 100%. \r\n    function SetHFee(uint16 hfee) public  {\r\n        require(msg.sender == owner);\r\n        require(hfee <= 10000);\r\n\r\n        HelperPortion = hfee;\r\n    \r\n    }\r\n    \r\n    // allows to change helper fee. minimum is 10%, max 100%. \r\n    function SetPriceIncrease(uint16 increase) public  {\r\n        require(msg.sender == owner);\r\n        PriceIncrease = increase;\r\n    }\r\n    \r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"howmuch\",\"type\":\"uint8\"}],\"name\":\"AddMultipleItems\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hfee\",\"type\":\"uint16\"}],\"name\":\"SetHFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NextItemID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DevFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HelperPortion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AddItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BuyItem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ItemInfo\",\"outputs\":[{\"name\":\"ItemPrice\",\"type\":\"uint256\"},{\"name\":\"CurrentOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PriceIncrease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tfee\",\"type\":\"uint16\"}],\"name\":\"SetDevFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"increase\",\"type\":\"uint16\"}],\"name\":\"SetPriceIncrease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newprice\",\"type\":\"uint256\"}],\"name\":\"ItemBought\",\"type\":\"event\"}]","ContractName":"Items","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e1eb494177a71eb9a50a39ff5c2cd1ba2904a771a62615a458007b0cf0f1a606"}]}