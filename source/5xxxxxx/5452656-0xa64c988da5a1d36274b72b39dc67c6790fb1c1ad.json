{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\ncontract ufoodoToken is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Token where will be stored and managed\r\n    address public vault = this;\r\n\r\n    string public name = \"ufoodo Token\";\r\n    string public symbol = \"UFT\";\r\n    uint8 public decimals = 18;\r\n\r\n    // Total Supply DAICO: 500,000,000 UFT\r\n    uint256 public INITIAL_SUPPLY = 500000000 * (10**uint256(decimals));\r\n    // 400,000,000 UFT for DAICO at Q4 2018\r\n    uint256 public supplyDAICO = INITIAL_SUPPLY.mul(80).div(100);\r\n\r\n    address public salesAgent;\r\n    mapping (address => bool) public owners;\r\n\r\n    event SalesAgentPermissionsTransferred(address indexed previousSalesAgent, address indexed newSalesAgent);\r\n    event SalesAgentRemoved(address indexed currentSalesAgent);\r\n\r\n    // 100,000,000 Seed UFT\r\n    function supplySeed() public view returns (uint256) {\r\n        uint256 _supplySeed = INITIAL_SUPPLY.mul(20).div(100);\r\n        return _supplySeed;\r\n    }\r\n    // Constructor\r\n    function ufoodoToken() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n    }\r\n    // Transfer sales agent permissions to another account\r\n    function transferSalesAgentPermissions(address _salesAgent) onlyOwner public {\r\n        emit SalesAgentPermissionsTransferred(salesAgent, _salesAgent);\r\n        salesAgent = _salesAgent;\r\n    }\r\n\r\n    // Remove sales agent from token\r\n    function removeSalesAgent() onlyOwner public {\r\n        emit SalesAgentRemoved(salesAgent);\r\n        salesAgent = address(0);\r\n    }\r\n\r\n    function transferFromVault(address _from, address _to, uint256 _amount) public {\r\n        require(salesAgent == msg.sender);\r\n        balances[vault] = balances[vault].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n    }\r\n\r\n    // Lock the DAICO supply until 2018-09-01 14:00:00\r\n    // Which can then transferred to the created DAICO contract\r\n    function transferDaico(address _to) public onlyOwner returns(bool) {\r\n        require(now >= 1535810400);\r\n\r\n        balances[vault] = balances[vault].sub(supplyDAICO);\r\n        balances[_to] = balances[_to].add(supplyDAICO);\r\n        emit Transfer(vault, _to, supplyDAICO);\r\n        return(true);\r\n    }\r\n\r\n}\r\n\r\ncontract SeedSale is Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    // Tokens that will be sold\r\n    ufoodoToken public token;\r\n\r\n    // Time in Unix timestamp\r\n    // Start: 01-Apr-18 14:00:00 UTC\r\n    uint256 public constant seedStartTime = 1522591200;\r\n    // End: 31-May-18 14:00:00 UTC\r\n    uint256 public constant seedEndTime = 1527775200;\r\n\r\n    uint256 public seedSupply_ = 0;\r\n\r\n    // Update all funds raised that are not validated yet, 140 ether from private sale already added\r\n    uint256 public fundsRaised = 140 ether;\r\n\r\n    // Update only funds validated, 140 ether from private sale already added\r\n    uint256 public fundsRaisedFinalized = 140 ether; //\r\n\r\n    // Lock tokens for team\r\n    uint256 public releasedLockedAmount = 0;\r\n\r\n    // All pending UFT which needs to validated before transfered to contributors\r\n    uint256 public pendingUFT = 0;\r\n    // Conclude UFT which are transferred to contributer if soft cap reached and contributor is validated\r\n    uint256 public concludeUFT = 0;\r\n\r\n    uint256 public constant softCap = 200 ether;\r\n    uint256 public constant hardCap = 3550 ether;\r\n    uint256 public constant minContrib = 0.1 ether;\r\n\r\n    uint256 public lockedTeamUFT = 0;\r\n    uint256 public privateReservedUFT = 0;\r\n\r\n    // Will updated in condition with funds raised finalized\r\n    bool public SoftCapReached = false;\r\n    bool public hardCapReached = false;\r\n    bool public seedSaleFinished = false;\r\n\r\n    //Refund will enabled if seed sale End and min cap not reached\r\n    bool public refundAllowed = false;\r\n\r\n    // Address where only validated funds will be transfered\r\n    address public fundWallet = 0xf7d4C80DE0e2978A1C5ef3267F488B28499cD22E;\r\n\r\n    // Amount of ether in wei, needs to be validated first\r\n    mapping(address => uint256) public weiContributedPending;\r\n    // Amount of ether in wei validated\r\n    mapping(address => uint256) public weiContributedConclude;\r\n    // Amount of UFT which will reserved first until the contributor is validated\r\n    mapping(address => uint256) public pendingAmountUFT;\r\n\r\n    event OpenTier(uint256 activeTier);\r\n    event LogContributionPending(address contributor, uint256 amountWei, uint256 tokenAmount, uint256 activeTier, uint256 timestamp);\r\n    event LogContributionConclude(address contributor, uint256 amountWei, uint256 tokenAmount, uint256 timeStamp);\r\n    event ValidationFailed(address contributor, uint256 amountWeiRefunded, uint timestamp);\r\n\r\n    // Initialized Tier\r\n    uint public activeTier = 0;\r\n\r\n    // Max ether per tier to collect\r\n    uint256[8] public tierCap = [\r\n        400 ether,\r\n        420 ether,\r\n        380 ether,\r\n        400 ether,\r\n        410 ether,\r\n        440 ether,\r\n        460 ether,\r\n        500 ether\r\n    ];\r\n\r\n    // Based on 1 Ether = 12500\r\n    // Tokenrate + tokenBonus = totalAmount the contributor received\r\n    uint256[8] public tierTokens = [\r\n        17500, //40%\r\n        16875, //35%\r\n        16250, //30%\r\n        15625, //25%\r\n        15000, //20%\r\n        13750, //10%\r\n        13125, //5%\r\n        12500  //0%\r\n    ];\r\n\r\n    // Will be updated due wei contribution\r\n    uint256[8] public activeFundRaisedTier = [\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        0\r\n    ];\r\n\r\n    // Constructor\r\n    function SeedSale(address _vault) public {\r\n        token = ufoodoToken(_vault);\r\n        privateReservedUFT = token.supplySeed().mul(4).div(100);\r\n        lockedTeamUFT = token.supplySeed().mul(20).div(100);\r\n        seedSupply_ = token.supplySeed();\r\n    }\r\n\r\n    function seedStarted() public view returns (bool) {\r\n        return now >= seedStartTime;\r\n    }\r\n\r\n    function seedEnded() public view returns (bool) {\r\n        return now >= seedEndTime || fundsRaised >= hardCap;\r\n    }\r\n\r\n    modifier checkContribution() {\r\n        require(canContribute());\r\n        _;\r\n    }\r\n\r\n    function canContribute() internal view returns(bool) {\r\n        if(!seedStarted() || seedEnded()) {\r\n            return false;\r\n        }\r\n        if(msg.value < minContrib) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Fallback function\r\n    function() payable public whenNotPaused {\r\n        buyUFT(msg.sender);\r\n    }\r\n\r\n    // Process UFT contribution\r\n    function buyUFT(address contributor) public whenNotPaused checkContribution payable {\r\n        uint256 weiAmount = msg.value;\r\n        uint256 refund = 0;\r\n        uint256 _tierIndex = activeTier;\r\n        uint256 _activeTierCap = tierCap[_tierIndex];\r\n        uint256 _activeFundRaisedTier = activeFundRaisedTier[_tierIndex];\r\n\r\n        require(_activeFundRaisedTier < _activeTierCap);\r\n\r\n        // Checks Amoount of eth still can contributed to the active Tier\r\n        uint256 tierCapOverSold = _activeTierCap.sub(_activeFundRaisedTier);\r\n\r\n        // if contributer amount will oversold the active tier cap, partial\r\n        // purchase will proceed, rest contributer amount will refunded to contributor\r\n        if(tierCapOverSold < weiAmount) {\r\n            weiAmount = tierCapOverSold;\r\n            refund = msg.value.sub(weiAmount);\r\n\r\n        }\r\n        // Calculate the amount of tokens the Contributor will receive\r\n        uint256 amountUFT = weiAmount.mul(tierTokens[_tierIndex]);\r\n\r\n        // Update status\r\n        fundsRaised = fundsRaised.add(weiAmount);\r\n        activeFundRaisedTier[_tierIndex] = activeFundRaisedTier[_tierIndex].add(weiAmount);\r\n        weiContributedPending[contributor] = weiContributedPending[contributor].add(weiAmount);\r\n        pendingAmountUFT[contributor] = pendingAmountUFT[contributor].add(amountUFT);\r\n        pendingUFT = pendingUFT.add(amountUFT);\r\n\r\n        // partial process, refund rest value\r\n        if(refund > 0) {\r\n            msg.sender.transfer(refund);\r\n        }\r\n\r\n        emit LogContributionPending(contributor, weiAmount, amountUFT, _tierIndex, now);\r\n    }\r\n\r\n    function softCapReached() public returns (bool) {\r\n        if (fundsRaisedFinalized >= softCap) {\r\n            SoftCapReached = true;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Next Tier will increment manually and Paused by the team to guarantee safe transition\r\n    // Initialized next tier if previous tier sold out\r\n    // For contributor safety we pause the seedSale process\r\n    function nextTier() onlyOwner public {\r\n        require(paused == true);\r\n        require(activeTier < 7);\r\n        uint256 _tierIndex = activeTier;\r\n        activeTier = _tierIndex +1;\r\n        emit OpenTier(activeTier);\r\n    }\r\n\r\n    // Validation Update Process\r\n    // After we finished the kyc process, we update each validated contributor and transfer if softCapReached the tokens\r\n    // If the contributor is not validated due failed validation, the contributed wei amount will refundet back to the contributor\r\n    function validationPassed(address contributor) onlyOwner public returns (bool) {\r\n        require(contributor != 0x0);\r\n\r\n        uint256 amountFinalized = pendingAmountUFT[contributor];\r\n        pendingAmountUFT[contributor] = 0;\r\n        token.transferFromVault(token, contributor, amountFinalized);\r\n\r\n        // Update status\r\n        uint256 _fundsRaisedFinalized = fundsRaisedFinalized.add(weiContributedPending[contributor]);\r\n        fundsRaisedFinalized = _fundsRaisedFinalized;\r\n        concludeUFT = concludeUFT.add(amountFinalized);\r\n\r\n        weiContributedConclude[contributor] = weiContributedConclude[contributor].add(weiContributedPending[contributor]);\r\n\r\n        emit LogContributionConclude(contributor, weiContributedPending[contributor], amountFinalized, now);\r\n        softCapReached();\r\n        // Amount finalized tokes update status\r\n\r\n        return true;\r\n    }\r\n\r\n    // Update which address is not validated\r\n    // By updating the address, the contributor will receive his contribution back\r\n    function validationFailed(address contributor) onlyOwner public returns (bool) {\r\n        require(contributor != 0x0);\r\n        require(weiContributedPending[contributor] > 0);\r\n\r\n        uint256 currentBalance = weiContributedPending[contributor];\r\n\r\n        weiContributedPending[contributor] = 0;\r\n        contributor.transfer(currentBalance);\r\n        emit ValidationFailed(contributor, currentBalance, now);\r\n        return true;\r\n    }\r\n\r\n    // If seed sale ends and soft cap is not reached, Contributer can claim their funds\r\n    function refund() public {\r\n        require(refundAllowed);\r\n        require(!SoftCapReached);\r\n        require(weiContributedPending[msg.sender] > 0);\r\n\r\n        uint256 currentBalance = weiContributedPending[msg.sender];\r\n\r\n        weiContributedPending[msg.sender] = 0;\r\n        msg.sender.transfer(currentBalance);\r\n    }\r\n\r\n\r\n   // Allows only to refund the contributed amount that passed the validation and reached the softcap\r\n    function withdrawFunds(uint256 _weiAmount) public onlyOwner {\r\n        require(SoftCapReached);\r\n        fundWallet.transfer(_weiAmount);\r\n    }\r\n\r\n    /*\r\n     * If tokens left make a priveledge token sale for contributor that are already validated\r\n     * make a new date time for left tokens only for priveledge whitelisted\r\n     * If not enouhgt tokens left for a sale send directly to locked contract/ vault\r\n     */\r\n    function seedSaleTokenLeft(address _tokenContract) public onlyOwner {\r\n        require(seedEnded());\r\n        uint256 amountLeft = pendingUFT.sub(concludeUFT);\r\n        token.transferFromVault(token, _tokenContract, amountLeft );\r\n    }\r\n\r\n\r\n    function vestingToken(address _beneficiary) public onlyOwner returns (bool) {\r\n      require(SoftCapReached);\r\n      uint256 release_1 = seedStartTime.add(180 days);\r\n      uint256 release_2 = release_1.add(180 days);\r\n      uint256 release_3 = release_2.add(180 days);\r\n      uint256 release_4 = release_3.add(180 days);\r\n\r\n      //20,000,000 UFT total splitted in 4 time periods\r\n      uint256 lockedAmount_1 = lockedTeamUFT.mul(25).div(100);\r\n      uint256 lockedAmount_2 = lockedTeamUFT.mul(25).div(100);\r\n      uint256 lockedAmount_3 = lockedTeamUFT.mul(25).div(100);\r\n      uint256 lockedAmount_4 = lockedTeamUFT.mul(25).div(100);\r\n\r\n      if(seedStartTime >= release_1 && releasedLockedAmount < lockedAmount_1) {\r\n        token.transferFromVault(token, _beneficiary, lockedAmount_1 );\r\n        releasedLockedAmount = releasedLockedAmount.add(lockedAmount_1);\r\n        return true;\r\n\r\n      } else if(seedStartTime >= release_2 && releasedLockedAmount < lockedAmount_2.mul(2)) {\r\n        token.transferFromVault(token, _beneficiary, lockedAmount_2 );\r\n        releasedLockedAmount = releasedLockedAmount.add(lockedAmount_2);\r\n        return true;\r\n\r\n      } else if(seedStartTime >= release_3 && releasedLockedAmount < lockedAmount_3.mul(3)) {\r\n        token.transferFromVault(token, _beneficiary, lockedAmount_3 );\r\n        releasedLockedAmount = releasedLockedAmount.add(lockedAmount_3);\r\n        return true;\r\n\r\n      } else if(seedStartTime >= release_4 && releasedLockedAmount < lockedAmount_4.mul(4)) {\r\n        token.transferFromVault(token, _beneficiary, lockedAmount_4 );\r\n        releasedLockedAmount = releasedLockedAmount.add(lockedAmount_4);\r\n        return true;\r\n      }\r\n\r\n    }\r\n\r\n    // Total Reserved from Private Sale Contributor 4,000,000 UFT\r\n    function transferPrivateReservedUFT(address _beneficiary, uint256 _amount) public onlyOwner {\r\n        require(SoftCapReached);\r\n        require(_amount > 0);\r\n        require(privateReservedUFT >= _amount);\r\n\r\n        token.transferFromVault(token, _beneficiary, _amount);\r\n        privateReservedUFT = privateReservedUFT.sub(_amount);\r\n\r\n    }\r\n\r\n     function finalizeSeedSale() public onlyOwner {\r\n        if(seedStartTime >= seedEndTime && SoftCapReached) {\r\n\r\n        // Bounty Campaign: 5,000,000 UFT\r\n        uint256 bountyAmountUFT = token.supplySeed().mul(5).div(100);\r\n        token.transferFromVault(token, fundWallet, bountyAmountUFT);\r\n\r\n        // Reserved Company: 20,000,000 UFT\r\n        uint256 reservedCompanyUFT = token.supplySeed().mul(20).div(100);\r\n        token.transferFromVault(token, fundWallet, reservedCompanyUFT);\r\n\r\n        } else if(seedStartTime >= seedEndTime && !SoftCapReached) {\r\n\r\n            // Enable fund`s crowdsale refund if soft cap is not reached\r\n            refundAllowed = true;\r\n\r\n            token.transferFromVault(token, owner, seedSupply_);\r\n            seedSupply_ = 0;\r\n\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"privateReservedUFT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"concludeUFT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activeTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"seedSaleTokenLeft\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiContributedConclude\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"validationFailed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasedLockedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SoftCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsRaisedFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextTier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"buyUFT\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingUFT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedSaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"vestingToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiContributedPending\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeSeedSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeFundRaisedTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferPrivateReservedUFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingAmountUFT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"validationPassed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedTeamUFT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContrib\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"activeTier\",\"type\":\"uint256\"}],\"name\":\"OpenTier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"activeTier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogContributionPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"LogContributionConclude\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountWeiRefunded\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ValidationFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SeedSale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000eea22ba8819ed2b1c2e85f44543fbe11f54f9617","Library":"","SwarmSource":"bzzr://327e6d9174bb852587dbe1c8daefb930867af2576080090663669436ad734f39"}]}