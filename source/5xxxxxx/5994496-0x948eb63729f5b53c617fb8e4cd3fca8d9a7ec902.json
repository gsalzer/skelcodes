{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n}\r\n\r\n\r\ncontract owned {\r\n    function owned() public { owner = msg.sender; }\r\n    address owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract PublicSaleManager is owned {\r\n\r\n    mapping (address => bool) _earlyList;\r\n    mapping (address => bool) _whiteList;\r\n    mapping (address => uint256) _bonus;\r\n    mapping (address => uint256) _contributedETH;\r\n\r\n    address _tokenAddress = 0xAF815e887b039Fc06a8ddDcC7Ec4f57757616Cd2;\r\n    address _deadAddress = 0x000000000000000000000000000000000000dead;\r\n    uint256 _conversionRate = 0;\r\n    uint256 _startTime = 0;\r\n\r\n    uint256 _totalSold = 0;\r\n    uint256 _totalBonus = 0;\r\n\r\n    uint256 _regularPersonalCap = 1e20; // 100 ETH\r\n    uint256 _higherPersonalCap = 2e20; // 200 ETH\r\n    uint256 _minimumAmount = 2e17; // 0.2 ETH\r\n\r\n    bool _is_stopped = false;\r\n\r\n    function addWhitelist(address[] addressList) public onlyOwner {\r\n        // Whitelist is managed manually and addresses are added in batch.\r\n        for (uint i = 0; i < addressList.length; i++) {\r\n            _whiteList[addressList[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function addEarlylist(address[] addressList) public onlyOwner {\r\n        // Whitelist is managed manually and addresses are added in batch.\r\n        for (uint i = 0; i < addressList.length; i++) {\r\n            _earlyList[addressList[i]] = true;\r\n        }\r\n    }\r\n\r\n    function start(uint32 conversionRate) public onlyOwner {\r\n        require(_startTime == 0);\r\n        require(conversionRate > 1);\r\n\r\n        // Starts the public sale.\r\n        _startTime = now;\r\n\r\n        // Sets the conversion rate.\r\n        _conversionRate = conversionRate;\r\n    }\r\n\r\n    function stop() public onlyOwner {\r\n        _is_stopped = true;\r\n    }\r\n\r\n    function burnUnsold() public onlyOwner {\r\n        require(now >= _startTime + (31 days));\r\n\r\n        // Transfers all un-sold tokens to 0x000...dead.\r\n        ERC20(_tokenAddress).transfer(_deadAddress, ERC20(_tokenAddress).balanceOf(this) - _totalBonus);\r\n    }\r\n\r\n    function withdrawEther(address toAddress, uint256 amount) public onlyOwner {\r\n        toAddress.transfer(amount);\r\n    }\r\n\r\n    function buyTokens() payable public {\r\n        require(_is_stopped == false);\r\n\r\n        // Validates whitelist.\r\n        require(_whiteList[msg.sender] == true || _earlyList[msg.sender] == true);\r\n\r\n        if (_earlyList[msg.sender]) {\r\n            require(msg.value + _contributedETH[msg.sender] <= _higherPersonalCap);\r\n        } else {\r\n            require(msg.value + _contributedETH[msg.sender] <= _regularPersonalCap);\r\n        }\r\n\r\n        require(msg.value >= _minimumAmount);\r\n\r\n        // Validates time.\r\n        require(now > _startTime);\r\n        require(now < _startTime + (31 days));\r\n\r\n        // Calculates the purchase amount.\r\n        uint256 purchaseAmount = msg.value * _conversionRate;\r\n        require(_conversionRate > 0 && purchaseAmount / _conversionRate == msg.value);\r\n\r\n        // Calculates the bonus amount.\r\n        uint256 bonus = 0;\r\n        if (_totalSold + purchaseAmount < 5e26) {\r\n            // 10% bonus for the first 500 million OGT.\r\n            bonus = purchaseAmount / 10;\r\n        } else if (_totalSold + purchaseAmount < 10e26) {\r\n            // 5% bonus for the first 1 billion OGT.\r\n            bonus = purchaseAmount / 20;\r\n        }\r\n\r\n        // Checks that we still have enough balance.\r\n        require(ERC20(_tokenAddress).balanceOf(this) >= _totalBonus + purchaseAmount + bonus);\r\n\r\n        // Transfers the non-bonus part.\r\n        ERC20(_tokenAddress).transfer(msg.sender, purchaseAmount);\r\n        _contributedETH[msg.sender] += msg.value;\r\n\r\n        // Records the bonus.\r\n        _bonus[msg.sender] += bonus;\r\n\r\n        _totalBonus += bonus;\r\n        _totalSold += (purchaseAmount + bonus);\r\n    }\r\n\r\n    function claimBonus() public {\r\n        // Validates whitelist.\r\n        require(_whiteList[msg.sender] == true || _earlyList[msg.sender] == true);\r\n        \r\n        // Validates bonus.\r\n        require(_bonus[msg.sender] > 0);\r\n\r\n        // Transfers the bonus if it's after 90 days.\r\n        if (now > _startTime + (90 days)) {\r\n            ERC20(_tokenAddress).transfer(msg.sender, _bonus[msg.sender]);\r\n            _bonus[msg.sender] = 0;\r\n        }\r\n    }\r\n\r\n    function checkBonus(address purchaser) public constant returns (uint256 balance) {\r\n        return _bonus[purchaser];\r\n    }\r\n\r\n    function checkTotalSold() public constant returns (uint256 balance) {\r\n        return _totalSold;\r\n    }\r\n\r\n    function checkContributedETH(address purchaser) public constant returns (uint256 balance) {\r\n        return _contributedETH[purchaser];\r\n    }\r\n\r\n    function checkPersonalRemaining(address purchaser) public constant returns (uint256 balance) {\r\n        if (_earlyList[purchaser]) {\r\n            return _higherPersonalCap - _contributedETH[purchaser];\r\n        } else if (_whiteList[purchaser]) {\r\n            return _regularPersonalCap - _contributedETH[purchaser];\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"checkBonus\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkTotalSold\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"checkContributedETH\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnUnsold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"conversionRate\",\"type\":\"uint32\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"checkPersonalRemaining\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressList\",\"type\":\"address[]\"}],\"name\":\"addEarlylist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressList\",\"type\":\"address[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PublicSaleManager","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2a6358d728f3fbcd7c072501934b0ac69c58866812e235e4c7fc61189f036105"}]}