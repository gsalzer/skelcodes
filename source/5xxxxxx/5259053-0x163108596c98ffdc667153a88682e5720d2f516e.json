{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n     (       )    )    )\r\n     )\\ ) ( /( ( /( ( /(     (  (\r\n    (()/( )\\()))\\()))\\())  ( )\\ )\\\r\n     /(_)|(_)\\((_)\\((_)\\  ))((_|(_)\r\n    (_))  _((_)_((_)_((_)/((_)  _\r\n    | _ \\| || \\ \\/ / || (_))| || |\r\n    |  _/| __ |>  <| __ / -_) || |\r\n    |_|  |_||_/_/\\_\\_||_\\___|_||_|\r\n\r\n    PHXHell - A game of timing and luck.\r\n      made by ToCsIcK\r\n\r\n    Inspired by EthAnte by TechnicalRise\r\n\r\n*/\r\npragma solidity ^0.4.21;\r\n\r\n// Contract must implement this interface in order to receive ERC223 tokens\r\ncontract ERC223ReceivingContract {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n// We only need the signature of the transfer method\r\ncontract ERC223Interface {\r\n    function transfer(address _to, uint _value) public returns (bool);\r\n}\r\n\r\n// SafeMath is good\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ncontract PhxHell is ERC223ReceivingContract {\r\n    using SafeMath for uint;\r\n\r\n    uint public balance;        // Current balance\r\n    uint public lastFund;       // Time of last fund\r\n    address public lastFunder;  // Address of the last person who funded\r\n    address phxAddress;         // PHX main net address\r\n\r\n    uint constant public stakingRequirement = 5e17;   // 0.5 PHX\r\n    uint constant public period = 1 hours;\r\n\r\n    // Event to record the end of a game so it can be added to a 'history' page\r\n    event GameOver(address indexed winner, uint timestamp, uint value);\r\n\r\n    // Takes PHX address as a parameter so you can point at another contract during testing\r\n    function PhxHell(address _phxAddress)\r\n        public {\r\n        phxAddress = _phxAddress;\r\n    }\r\n\r\n    // Called to force a payout without having to restake\r\n    function payout()\r\n        public {\r\n\r\n        // If there's no pending winner, don't do anything\r\n        if (lastFunder == 0)\r\n            return;\r\n\r\n        // If timer hasn't expire, don't do anything\r\n        if (now.sub(lastFund) < period)\r\n            return;\r\n\r\n        uint amount = balance;\r\n        balance = 0;\r\n\r\n        // Send the total balance to the last funder\r\n        ERC223Interface phx = ERC223Interface(phxAddress);\r\n        phx.transfer(lastFunder, amount);\r\n\r\n        // Fire event\r\n        GameOver( lastFunder, now, amount );\r\n\r\n        // Reset the winner\r\n        lastFunder = address(0);\r\n    }\r\n\r\n    // Called by the ERC223 contract (PHX) when sending tokens to this address\r\n    function tokenFallback(address _from, uint _value, bytes)\r\n    public {\r\n\r\n        // Make sure it is PHX we are receiving\r\n        require(msg.sender == phxAddress);\r\n\r\n        // Make sure it's enough PHX\r\n        require(_value >= stakingRequirement);\r\n\r\n        // Payout if someone won already\r\n        payout();\r\n\r\n        // Add to the balance and reset the timer\r\n        balance = balance.add(_value);\r\n        lastFund = now;\r\n        lastFunder = _from;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastFunder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_phxAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GameOver\",\"type\":\"event\"}]","ContractName":"PhxHell","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000014b759a158879b133710f4059d32565b4a66140c","Library":"","SwarmSource":"bzzr://ea51df6707f7521922510e1eaed9981ad456038d99cf56cbc38ec6a6c7a2b05b"}]}