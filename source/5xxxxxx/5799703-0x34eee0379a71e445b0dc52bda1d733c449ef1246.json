{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// Contract for Auction of the starship Astra Kal\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n// This is an interface which creates a symbol for the starships ERC721 contracts. \r\n// The ERC721 contracts will be published later, before the auction ends.  \r\n\r\ncontract starShipTokenInterface {\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public ID;\r\n    address public owner;\r\n\r\n    function transfer(address _to) public returns (bool success);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to);\r\n}\r\n\r\n\r\ncontract starShipToken is starShipTokenInterface {\r\n    using SafeMath for uint256;\r\n\r\n  \r\n  constructor(string _name, string _symbol, uint256 _ID) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    ID = _ID;\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the owner of the token.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function viewOwner() public view returns (address) {\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  */\r\n  function transfer(address _to) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(msg.sender == owner);\r\n\r\n    owner = _to;\r\n    emit Transfer(msg.sender, _to);\r\n    return true;\r\n  }\r\n}\r\n\r\n// contract for implementing the auction in Hot Potato format\r\ncontract hotPotatoAuction {\r\n    // The token that is going up for auction\r\n    starShipToken public token;\r\n    \r\n    // The total number of bids on the current starship\r\n    uint256 public totalBids;\r\n    \r\n    // starting bid of the starship\r\n    uint256 public startingPrice;\r\n    \r\n    // current Bid amount\r\n    uint256 public currentBid;\r\n    \r\n    // Minimum amount needed to bid on this item\r\n    uint256 public currentMinBid;\r\n    \r\n    // The time at which the auction will end\r\n    uint256 public auctionEnd;\r\n    \r\n    // Variable to store the hot Potato prize for the loser bid\r\n    uint256 public hotPotatoPrize;\r\n    \r\n    // The seller of the current item\r\n    address public seller;\r\n    \r\n    \r\n    address public highBidder;\r\n    address public loser;\r\n\r\n    function hotPotatoAuction(\r\n        starShipToken _token,\r\n        uint256 _startingPrice,\r\n        uint256 _auctionEnd\r\n    )\r\n        public\r\n    {\r\n        token = _token;\r\n        startingPrice = _startingPrice;\r\n        currentMinBid = _startingPrice;\r\n        totalBids = 0;\r\n        seller = msg.sender;\r\n        auctionEnd = _auctionEnd;\r\n        hotPotatoPrize = _startingPrice;\r\n        currentBid = 0;\r\n    }\r\n    \r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    /** \r\n     *  @dev withdrawBalance from the contract address\r\n     *  @param amount that you want to withdrawBalance\r\n     * \r\n     */\r\n     \r\n    function withdrawBalance(uint256 amount) returns(bool) {\r\n        require(amount <= address(this).balance);\r\n        require (msg.sender == seller);\r\n        seller.transfer(amount);\r\n        return true;\r\n    }\r\n\r\n    /** \r\n     *  @dev withdraw from the Balance array\r\n     * \r\n     */\r\n    function withdraw() public returns(bool) {\r\n        require(msg.sender != highBidder);\r\n        \r\n        uint256 amount = balanceOf[loser];\r\n        balanceOf[loser] = 0;\r\n        loser.transfer(amount);\r\n        return true;\r\n    }\r\n    \r\n\r\n    event Bid(address highBidder, uint256 highBid);\r\n\r\n    function bid() public payable returns(bool) {\r\n        require(now < auctionEnd);\r\n        require(msg.value >= startingPrice);\r\n        require (msg.value >= currentMinBid);\r\n        \r\n        if(totalBids !=0)\r\n        {\r\n            loser = highBidder;\r\n        \r\n            require(withdraw());\r\n        }\r\n        \r\n        highBidder = msg.sender;\r\n        \r\n        currentBid = msg.value;\r\n        \r\n        hotPotatoPrize = currentBid/20;\r\n        \r\n        balanceOf[msg.sender] = msg.value + hotPotatoPrize;\r\n        \r\n        if(currentBid < 1000000000000000000)\r\n        {\r\n            currentMinBid = msg.value + currentBid/2;\r\n            hotPotatoPrize = currentBid/20; \r\n        }\r\n        else\r\n        {\r\n            currentMinBid = msg.value + currentBid/5;\r\n            hotPotatoPrize = currentBid/20;\r\n        }\r\n        \r\n        totalBids = totalBids + 1;\r\n        \r\n        return true;\r\n        emit Bid(highBidder, msg.value);\r\n    }\r\n\r\n    function resolve() public {\r\n        require(now >= auctionEnd);\r\n        require(msg.sender == seller);\r\n        require (highBidder != 0);\r\n        \r\n        require (token.transfer(highBidder));\r\n\r\n        balanceOf[seller] += balanceOf[highBidder];\r\n        balanceOf[highBidder] = 0;\r\n        highBidder = 0;\r\n    }\r\n    /** \r\n     *  @dev view balance of contract\r\n     */\r\n     \r\n    function getBalanceContract() constant returns(uint){\r\n        return address(this).balance;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resolve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentMinBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hotPotatoPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_auctionEnd\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"highBidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"highBid\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"}]","ContractName":"hotPotatoAuction","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d64d99978b55fc070e696873f6a30762017fd96e000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000005b391888","Library":"","SwarmSource":"bzzr://95ff5c49d5df0676329b9503a28ef8188199a8e33649af2a7c1edb4c7df0988d"}]}