{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/*\r\n* Team Proof of Long Hodl presents V2 the rebirth...\r\n* All the goodness of POLH, now with 1% of deposits & withdrawals go into the weekly lottery.\r\n* https://polh.net/\r\n*/\r\n\r\n\r\ncontract ProofOfLongHodlV2 {\r\n    using SafeMath for uint256;\r\n\r\n    event Deposit(address user, uint amount);\r\n    event Withdraw(address user, uint amount);\r\n    event Claim(address user, uint dividends);\r\n    event Reinvest(address user, uint dividends);\r\n\r\n    address owner;\r\n    mapping(address => bool) preauthorized;\r\n    bool gameStarted = true;\r\n\r\n    uint constant depositTaxDivisor = 25;\t\t// 25% of  deposits goes to  divs\r\n    uint constant withdrawalTaxDivisor = 25;\t// 25% of  withdrawals goes to  divs\r\n    uint constant lotteryFee = 25; \t\t\t\t// 4% of deposits and withdrawals goes to lotteryPool\r\n    uint constant weeklyLotteryFee = 1; \t\t// 1% of deposits and withdrawals goes to weekly lotteryPool\r\n    \r\n    mapping(address => uint) public investment;\r\n\r\n    mapping(address => uint) public stake;\r\n    uint public totalStake;\r\n    uint stakeValue;\r\n\r\n    mapping(address => uint) dividendCredit;\r\n    mapping(address => uint) dividendDebit;\r\n\r\n    function ProofOfLongHodlV2() public {\r\n        owner = msg.sender;\r\n        preauthorized[owner] = true;\r\n    }\r\n\r\n    function preauthorize(address _user) public {\r\n        require(msg.sender == owner);\r\n        preauthorized[_user] = true;\r\n    }\r\n\r\n    function startGame() public {\r\n        require(msg.sender == owner);\r\n        gameStarted = true;\r\n    }\r\n\r\n    function depositHelper(uint _amount) private {\r\n    \trequire(_amount > 0);\r\n        uint _tax = _amount.mul(depositTaxDivisor).div(100);\r\n        uint _lotteryPool = _amount.div(lotteryFee); // add to lottery fee\r\n        uint _amountAfterTax = _amount.sub(_tax).sub(_lotteryPool);\r\n\r\n        lotteryPool = lotteryPool.add(_lotteryPool);\r\n\r\n        // check if first deposit, and greater than and make user eligable for lottery\r\n        if (isEligable[msg.sender] == false &&  _amount > 0.1 ether) {\r\n        \tisEligable[msg.sender] = true;\r\n        \thasWithdrawed[msg.sender] = false;\r\n\r\n        \tlotteryAddresses.push(msg.sender);\r\n        \teligableIndex[msg.sender] = lotteryAddresses.length - 1;      \t\r\n        }\r\n\r\n        if (totalStake > 0)\r\n            stakeValue = stakeValue.add(_tax.div(totalStake));\r\n        uint _stakeIncrement = sqrt(totalStake.mul(totalStake).add(_amountAfterTax)).sub(totalStake);\r\n        investment[msg.sender] = investment[msg.sender].add(_amountAfterTax);\r\n        stake[msg.sender] = stake[msg.sender].add(_stakeIncrement);\r\n        totalStake = totalStake.add(_stakeIncrement);\r\n        dividendDebit[msg.sender] = dividendDebit[msg.sender].add(_stakeIncrement.mul(stakeValue));\r\n    }\r\n\r\n    function deposit() public payable {\r\n        require(preauthorized[msg.sender] || gameStarted);\r\n        depositHelper(msg.value);\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint _amount) public {\r\n        require(_amount > 0);\r\n        require(_amount <= investment[msg.sender]);\r\n        uint _tax = _amount.mul(withdrawalTaxDivisor).div(100);\r\n        uint _lotteryPool = _amount.div(lotteryFee); // add to lottery fee\r\n        uint _amountAfterTax = _amount.sub(_tax).sub(_lotteryPool);\r\n\r\n        lotteryPool = lotteryPool.add(_lotteryPool);\r\n\r\n        // removing user from lotteryAddresses if it is first withdraw\r\n        if (lotteryAddresses.length != 0 && !hasWithdrawed[msg.sender] ) {\r\n        \thasWithdrawed[msg.sender] = true;\r\n        \tisEligable[msg.sender] = false;\r\n        \ttotalWithdrawals = totalWithdrawals.add(_amountAfterTax);\r\n        \twithdrawalsCTR++;\r\n\r\n        \t// delete user from lottery addresses index to delete\r\n        \tuint indexToDelete = eligableIndex[msg.sender]; \r\n        \taddress lastAddress = lotteryAddresses[lotteryAddresses.length - 1];\r\n        \tlotteryAddresses[indexToDelete] = lastAddress;\r\n        \tlotteryAddresses.length--;\r\n\r\n        \teligableIndex[lastAddress] = indexToDelete;\r\n        \teligableIndex[msg.sender] = 0;\r\n\r\n        \tif (withdrawalsCTR > 9 && totalWithdrawals > 1 ether) {\r\n        \t\t// pick lottery winner and sent reward\r\n\t\t\t    uint256 winnerIndex = rand(lotteryAddresses.length);\r\n\t\t\t    address winner = lotteryAddresses[winnerIndex];\r\n\r\n\t\t\t    winner.transfer(lotteryPool);\r\n\t\t\t    totalWithdrawals = 0;\r\n\t\t\t    withdrawalsCTR = 0;\r\n\t\t\t    lotteryPool = 0;\r\n\t\t\t    lotteryRound++;\r\n\t\t\t    lastWinner = winner;\r\n        \t}\r\n        }\r\n\r\n        uint _stakeDecrement = stake[msg.sender].mul(_amount).div(investment[msg.sender]);\r\n        uint _dividendCredit = _stakeDecrement.mul(stakeValue);\r\n        investment[msg.sender] = investment[msg.sender].sub(_amount);\r\n        stake[msg.sender] = stake[msg.sender].sub(_stakeDecrement);\r\n        totalStake = totalStake.sub(_stakeDecrement);\r\n        if (totalStake > 0)\r\n            stakeValue = stakeValue.add(_tax.div(totalStake));\r\n        dividendCredit[msg.sender] = dividendCredit[msg.sender].add(_dividendCredit);\r\n        uint _creditDebitCancellation = min(dividendCredit[msg.sender], dividendDebit[msg.sender]);\r\n        dividendCredit[msg.sender] = dividendCredit[msg.sender].sub(_creditDebitCancellation);\r\n        dividendDebit[msg.sender] = dividendDebit[msg.sender].sub(_creditDebitCancellation);\r\n\r\n        msg.sender.transfer(_amountAfterTax);\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    function claimHelper() private returns(uint) {\r\n        uint _dividendsForStake = stake[msg.sender].mul(stakeValue);\r\n        uint _dividends = _dividendsForStake.add(dividendCredit[msg.sender]).sub(dividendDebit[msg.sender]);\r\n        dividendCredit[msg.sender] = 0;\r\n        dividendDebit[msg.sender] = _dividendsForStake;\r\n\r\n        return _dividends;\r\n    }\r\n\r\n    function claim() public {\r\n        uint _dividends = claimHelper();\r\n        msg.sender.transfer(_dividends);\r\n\r\n        emit Claim(msg.sender, _dividends);\r\n    }\r\n\r\n    function reinvest() public {\r\n        uint _dividends = claimHelper();\r\n        depositHelper(_dividends);\r\n\r\n        emit Reinvest(msg.sender, _dividends);\r\n    }\r\n\r\n    function dividendsForUser(address _user) public view returns (uint) {\r\n        return stake[_user].mul(stakeValue).add(dividendCredit[_user]).sub(dividendDebit[_user]);\r\n    }\r\n\r\n    function min(uint x, uint y) private pure returns (uint) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint x) private pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n    // LOTTERY MODULE\r\n    uint private lotteryPool = 0;\r\n    uint private lotteryRound = 1;\r\n    address private lastWinner;\r\n\r\n    uint public withdrawalsCTR = 0;\r\n    uint public totalWithdrawals = 0;\r\n\r\n    mapping(address => uint256) internal eligableIndex; // \r\n    mapping(address => bool) internal isEligable; // for first deposit check\r\n    mapping(address => bool) internal hasWithdrawed; // check if user already withdrawed\r\n\r\n    address[] public lotteryAddresses;\r\n\r\n    // Generate random number between 0 & max\r\n    uint256 constant private FACTOR =  1157920892373161954235709850086879078532699846656405640394575840079131296399;\r\n    function rand(uint max) constant public returns (uint256 result){\r\n        uint256 factor = FACTOR * 100 / max;\r\n        uint256 lastBlockNumber = block.number - 1;\r\n        uint256 hashVal = uint256(block.blockhash(lastBlockNumber));\r\n    \r\n        return uint256((uint256(hashVal) / factor)) % max;\r\n    }\r\n\r\n    // check if address is withdrawed\r\n    function checkIfEligable(address _address) public view returns (bool) {\r\n    \treturn (isEligable[_address] && !hasWithdrawed[_address]) ;\r\n    }\r\n\r\n    function getLotteryData() public view returns( uint256, uint256, address) {\r\n    \treturn (lotteryPool, lotteryRound, lastWinner);\r\n    }\r\n\r\n    function lotteryParticipants() public view returns(uint256) {\r\n    \treturn lotteryAddresses.length;\r\n    }\r\n        modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function closeGame() onlyOwner public {\r\n        uint256 etherBalance = this.balance;\r\n        owner.transfer(etherBalance);\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;                                                                                                                                                                                       \r\n        }\r\n        uint256 c = a * b;                                                                                                                                                                                  \r\n        assert(c / a == b);                                                                                                                                                                                 \r\n        return c;                                                                                                                                                                                           \r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0                                                                                                                               \r\n        // uint256 c = a / b;                                                                                                                                                                               \r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold                                                                                                                       \r\n        return a / b;                                                                                                                                                                                       \r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);                                                                                                                                                                                     \r\n        return a - b;                                                                                                                                                                                       \r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;                                                                                                                                                                                  \r\n        assert(c >= a);                                                                                                                                                                                     \r\n        return c;                                                                                                                                                                                           \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"rand\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"preauthorize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkIfEligable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalsCTR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"dividendsForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLotteryData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dividends\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dividends\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"}]","ContractName":"ProofOfLongHodlV2","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b78e2c935e0bd4b3d84967f31ae386cdb96accd559bc86a419fa9b09431a802f"}]}