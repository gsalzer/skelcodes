{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title The contract that manages all the players that appear in our game.\r\n/// @author The CryptoStrikers Team\r\ncontract StrikersPlayerList is Ownable {\r\n  // We only use playerIds in StrikersChecklist.sol (to\r\n  // indicate which player features on instances of a\r\n  // given ChecklistItem), and nowhere else in the app.\r\n  // While it's not explictly necessary for any of our\r\n  // contracts to know that playerId 0 corresponds to\r\n  // Lionel Messi, we think that it's nice to have\r\n  // a canonical source of truth for who the playerIds\r\n  // actually refer to. Storing strings (player names)\r\n  // is expensive, so we just use Events to prove that,\r\n  // at some point, we said a playerId represents a given person.\r\n\r\n  /// @dev The event we fire when we add a player.\r\n  event PlayerAdded(uint8 indexed id, string name);\r\n\r\n  /// @dev How many players we've added so far\r\n  ///   (max 255, though we don't plan on getting close)\r\n  uint8 public playerCount;\r\n\r\n  /// @dev Here we add the players we are launching with on Day 1.\r\n  ///   Players are loosely ranked by things like FIFA ratings,\r\n  ///   number of Instagram followers, and opinions of CryptoStrikers\r\n  ///   team members. Feel free to yell at us on Twitter.\r\n  constructor() public {\r\n    addPlayer(\"Lionel Messi\"); // 0\r\n    addPlayer(\"Cristiano Ronaldo\"); // 1\r\n    addPlayer(\"Neymar\"); // 2\r\n    addPlayer(\"Mohamed Salah\"); // 3\r\n    addPlayer(\"Robert Lewandowski\"); // 4\r\n    addPlayer(\"Kevin De Bruyne\"); // 5\r\n    addPlayer(\"Luka Modrić\"); // 6\r\n    addPlayer(\"Eden Hazard\"); // 7\r\n    addPlayer(\"Sergio Ramos\"); // 8\r\n    addPlayer(\"Toni Kroos\"); // 9\r\n    addPlayer(\"Luis Suárez\"); // 10\r\n    addPlayer(\"Harry Kane\"); // 11\r\n    addPlayer(\"Sergio Agüero\"); // 12\r\n    addPlayer(\"Kylian Mbappé\"); // 13\r\n    addPlayer(\"Gonzalo Higuaín\"); // 14\r\n    addPlayer(\"David de Gea\"); // 15\r\n    addPlayer(\"Antoine Griezmann\"); // 16\r\n    addPlayer(\"N'Golo Kanté\"); // 17\r\n    addPlayer(\"Edinson Cavani\"); // 18\r\n    addPlayer(\"Paul Pogba\"); // 19\r\n    addPlayer(\"Isco\"); // 20\r\n    addPlayer(\"Marcelo\"); // 21\r\n    addPlayer(\"Manuel Neuer\"); // 22\r\n    addPlayer(\"Dries Mertens\"); // 23\r\n    addPlayer(\"James Rodríguez\"); // 24\r\n    addPlayer(\"Paulo Dybala\"); // 25\r\n    addPlayer(\"Christian Eriksen\"); // 26\r\n    addPlayer(\"David Silva\"); // 27\r\n    addPlayer(\"Gabriel Jesus\"); // 28\r\n    addPlayer(\"Thiago\"); // 29\r\n    addPlayer(\"Thibaut Courtois\"); // 30\r\n    addPlayer(\"Philippe Coutinho\"); // 31\r\n    addPlayer(\"Andrés Iniesta\"); // 32\r\n    addPlayer(\"Casemiro\"); // 33\r\n    addPlayer(\"Romelu Lukaku\"); // 34\r\n    addPlayer(\"Gerard Piqué\"); // 35\r\n    addPlayer(\"Mats Hummels\"); // 36\r\n    addPlayer(\"Diego Godín\"); // 37\r\n    addPlayer(\"Mesut Özil\"); // 38\r\n    addPlayer(\"Son Heung-min\"); // 39\r\n    addPlayer(\"Raheem Sterling\"); // 40\r\n    addPlayer(\"Hugo Lloris\"); // 41\r\n    addPlayer(\"Radamel Falcao\"); // 42\r\n    addPlayer(\"Ivan Rakitić\"); // 43\r\n    addPlayer(\"Leroy Sané\"); // 44\r\n    addPlayer(\"Roberto Firmino\"); // 45\r\n    addPlayer(\"Sadio Mané\"); // 46\r\n    addPlayer(\"Thomas Müller\"); // 47\r\n    addPlayer(\"Dele Alli\"); // 48\r\n    addPlayer(\"Keylor Navas\"); // 49\r\n    addPlayer(\"Thiago Silva\"); // 50\r\n    addPlayer(\"Raphaël Varane\"); // 51\r\n    addPlayer(\"Ángel Di María\"); // 52\r\n    addPlayer(\"Jordi Alba\"); // 53\r\n    addPlayer(\"Medhi Benatia\"); // 54\r\n    addPlayer(\"Timo Werner\"); // 55\r\n    addPlayer(\"Gylfi Sigurðsson\"); // 56\r\n    addPlayer(\"Nemanja Matić\"); // 57\r\n    addPlayer(\"Kalidou Koulibaly\"); // 58\r\n    addPlayer(\"Bernardo Silva\"); // 59\r\n    addPlayer(\"Vincent Kompany\"); // 60\r\n    addPlayer(\"João Moutinho\"); // 61\r\n    addPlayer(\"Toby Alderweireld\"); // 62\r\n    addPlayer(\"Emil Forsberg\"); // 63\r\n    addPlayer(\"Mario Mandžukić\"); // 64\r\n    addPlayer(\"Sergej Milinković-Savić\"); // 65\r\n    addPlayer(\"Shinji Kagawa\"); // 66\r\n    addPlayer(\"Granit Xhaka\"); // 67\r\n    addPlayer(\"Andreas Christensen\"); // 68\r\n    addPlayer(\"Piotr Zieliński\"); // 69\r\n    addPlayer(\"Fyodor Smolov\"); // 70\r\n    addPlayer(\"Xherdan Shaqiri\"); // 71\r\n    addPlayer(\"Marcus Rashford\"); // 72\r\n    addPlayer(\"Javier Hernández\"); // 73\r\n    addPlayer(\"Hirving Lozano\"); // 74\r\n    addPlayer(\"Hakim Ziyech\"); // 75\r\n    addPlayer(\"Victor Moses\"); // 76\r\n    addPlayer(\"Jefferson Farfán\"); // 77\r\n    addPlayer(\"Mohamed Elneny\"); // 78\r\n    addPlayer(\"Marcus Berg\"); // 79\r\n    addPlayer(\"Guillermo Ochoa\"); // 80\r\n    addPlayer(\"Igor Akinfeev\"); // 81\r\n    addPlayer(\"Sardar Azmoun\"); // 82\r\n    addPlayer(\"Christian Cueva\"); // 83\r\n    addPlayer(\"Wahbi Khazri\"); // 84\r\n    addPlayer(\"Keisuke Honda\"); // 85\r\n    addPlayer(\"Tim Cahill\"); // 86\r\n    addPlayer(\"John Obi Mikel\"); // 87\r\n    addPlayer(\"Ki Sung-yueng\"); // 88\r\n    addPlayer(\"Bryan Ruiz\"); // 89\r\n    addPlayer(\"Maya Yoshida\"); // 90\r\n    addPlayer(\"Nawaf Al Abed\"); // 91\r\n    addPlayer(\"Lee Chung-yong\"); // 92\r\n    addPlayer(\"Gabriel Gómez\"); // 93\r\n    addPlayer(\"Naïm Sliti\"); // 94\r\n    addPlayer(\"Reza Ghoochannejhad\"); // 95\r\n    addPlayer(\"Mile Jedinak\"); // 96\r\n    addPlayer(\"Mohammad Al-Sahlawi\"); // 97\r\n    addPlayer(\"Aron Gunnarsson\"); // 98\r\n    addPlayer(\"Blas Pérez\"); // 99\r\n    addPlayer(\"Dani Alves\"); // 100\r\n    addPlayer(\"Zlatan Ibrahimović\"); // 101\r\n  }\r\n\r\n  /// @dev Fires an event, proving that we said a player corresponds to a given ID.\r\n  /// @param _name The name of the player we are adding.\r\n  function addPlayer(string _name) public onlyOwner {\r\n    require(playerCount < 255, \"You've already added the maximum amount of players.\");\r\n    emit PlayerAdded(playerCount, _name);\r\n    playerCount++;\r\n  }\r\n}\r\n\r\n\r\n/// @title The contract that manages checklist items, sets, and rarity tiers.\r\n/// @author The CryptoStrikers Team\r\ncontract StrikersChecklist is StrikersPlayerList {\r\n  // High level overview of everything going on in this contract:\r\n  //\r\n  // ChecklistItem is the parent class to Card and has 3 properties:\r\n  //  - uint8 checklistId (000 to 255)\r\n  //  - uint8 playerId (see StrikersPlayerList.sol)\r\n  //  - RarityTier tier (more info below)\r\n  //\r\n  // Two things to note: the checklistId is not explicitly stored\r\n  // on the checklistItem struct, and it's composed of two parts.\r\n  // (For the following, assume it is left padded with zeros to reach\r\n  // three digits, such that checklistId 0 becomes 000)\r\n  //  - the first digit represents the setId\r\n  //      * 0 = Originals Set\r\n  //      * 1 = Iconics Set\r\n  //      * 2 = Unreleased Set\r\n  //  - the last two digits represent its index in the appropriate set arary\r\n  //\r\n  //  For example, checklist ID 100 would represent fhe first checklist item\r\n  //  in the iconicChecklistItems array (first digit = 1 = Iconics Set, last two\r\n  //  digits = 00 = first index of array)\r\n  //\r\n  // Because checklistId is represented as a uint8 throughout the app, the highest\r\n  // value it can take is 255, which means we can't add more than 56 items to our\r\n  // Unreleased Set's unreleasedChecklistItems array (setId 2). Also, once we've initialized\r\n  // this contract, it's impossible for us to add more checklist items to the Originals\r\n  // and Iconics set -- what you see here is what you get.\r\n  //\r\n  // Simple enough right?\r\n\r\n  /// @dev We initialize this contract with so much data that we have\r\n  ///   to stage it in 4 different steps, ~33 checklist items at a time.\r\n  enum DeployStep {\r\n    WaitingForStepOne,\r\n    WaitingForStepTwo,\r\n    WaitingForStepThree,\r\n    WaitingForStepFour,\r\n    DoneInitialDeploy\r\n  }\r\n\r\n  /// @dev Enum containing all our rarity tiers, just because\r\n  ///   it's cleaner dealing with these values than with uint8s.\r\n  enum RarityTier {\r\n    IconicReferral,\r\n    IconicInsert,\r\n    Diamond,\r\n    Gold,\r\n    Silver,\r\n    Bronze\r\n  }\r\n\r\n  /// @dev A lookup table indicating how limited the cards\r\n  ///   in each tier are. If this value is 0, it means\r\n  ///   that cards of this rarity tier are unlimited,\r\n  ///   which is only the case for the 8 Iconics cards\r\n  ///   we give away as part of our referral program.\r\n  uint16[] public tierLimits = [\r\n    0,    // Iconic - Referral Bonus (uncapped)\r\n    100,  // Iconic Inserts (\"Card of the Day\")\r\n    1000, // Diamond\r\n    1664, // Gold\r\n    3328, // Silver\r\n    4352  // Bronze\r\n  ];\r\n\r\n  /// @dev ChecklistItem is essentially the parent class to Card.\r\n  ///   It represents a given superclass of cards (eg Originals Messi),\r\n  ///   and then each Card is an instance of this ChecklistItem, with\r\n  ///   its own serial number, mint date, etc.\r\n  struct ChecklistItem {\r\n    uint8 playerId;\r\n    RarityTier tier;\r\n  }\r\n\r\n  /// @dev The deploy step we're at. Defaults to WaitingForStepOne.\r\n  DeployStep public deployStep;\r\n\r\n  /// @dev Array containing all the Originals checklist items (000 - 099)\r\n  ChecklistItem[] public originalChecklistItems;\r\n\r\n  /// @dev Array containing all the Iconics checklist items (100 - 131)\r\n  ChecklistItem[] public iconicChecklistItems;\r\n\r\n  /// @dev Array containing all the unreleased checklist items (200 - 255 max)\r\n  ChecklistItem[] public unreleasedChecklistItems;\r\n\r\n  /// @dev Internal function to add a checklist item to the Originals set.\r\n  /// @param _playerId The player represented by this checklist item. (see StrikersPlayerList.sol)\r\n  /// @param _tier This checklist item's rarity tier. (see Rarity Tier enum and corresponding tierLimits)\r\n  function _addOriginalChecklistItem(uint8 _playerId, RarityTier _tier) internal {\r\n    originalChecklistItems.push(ChecklistItem({\r\n      playerId: _playerId,\r\n      tier: _tier\r\n    }));\r\n  }\r\n\r\n  /// @dev Internal function to add a checklist item to the Iconics set.\r\n  /// @param _playerId The player represented by this checklist item. (see StrikersPlayerList.sol)\r\n  /// @param _tier This checklist item's rarity tier. (see Rarity Tier enum and corresponding tierLimits)\r\n  function _addIconicChecklistItem(uint8 _playerId, RarityTier _tier) internal {\r\n    iconicChecklistItems.push(ChecklistItem({\r\n      playerId: _playerId,\r\n      tier: _tier\r\n    }));\r\n  }\r\n\r\n  /// @dev External function to add a checklist item to our mystery set.\r\n  ///   Must have completed initial deploy, and can't add more than 56 items (because checklistId is a uint8).\r\n  /// @param _playerId The player represented by this checklist item. (see StrikersPlayerList.sol)\r\n  /// @param _tier This checklist item's rarity tier. (see Rarity Tier enum and corresponding tierLimits)\r\n  function addUnreleasedChecklistItem(uint8 _playerId, RarityTier _tier) external onlyOwner {\r\n    require(deployStep == DeployStep.DoneInitialDeploy, \"Finish deploying the Originals and Iconics sets first.\");\r\n    require(unreleasedCount() < 56, \"You can't add any more checklist items.\");\r\n    require(_playerId < playerCount, \"This player doesn't exist in our player list.\");\r\n    unreleasedChecklistItems.push(ChecklistItem({\r\n      playerId: _playerId,\r\n      tier: _tier\r\n    }));\r\n  }\r\n\r\n  /// @dev Returns how many Original checklist items we've added.\r\n  function originalsCount() external view returns (uint256) {\r\n    return originalChecklistItems.length;\r\n  }\r\n\r\n  /// @dev Returns how many Iconic checklist items we've added.\r\n  function iconicsCount() public view returns (uint256) {\r\n    return iconicChecklistItems.length;\r\n  }\r\n\r\n  /// @dev Returns how many Unreleased checklist items we've added.\r\n  function unreleasedCount() public view returns (uint256) {\r\n    return unreleasedChecklistItems.length;\r\n  }\r\n\r\n  // In the next four functions, we initialize this contract with our\r\n  // 132 initial checklist items (100 Originals, 32 Iconics). Because\r\n  // of how much data we need to store, it has to be broken up into\r\n  // four different function calls, which need to be called in sequence.\r\n  // The ordering of the checklist items we add determines their\r\n  // checklist ID, which is left-padded in our frontend to be a\r\n  // 3-digit identifier where the first digit is the setId and the last\r\n  // 2 digits represents the checklist items index in the appropriate ___ChecklistItems array.\r\n  // For example, Originals Messi is the first item for set ID 0, and this\r\n  // is displayed as #000 throughout the app. Our Card struct declare its\r\n  // checklistId property as uint8, so we have\r\n  // to be mindful that we can only have 256 total checklist items.\r\n\r\n  /// @dev Deploys Originals #000 through #032.\r\n  function deployStepOne() external onlyOwner {\r\n    require(deployStep == DeployStep.WaitingForStepOne, \"You're not following the steps in order...\");\r\n\r\n    /* ORIGINALS - DIAMOND */\r\n    _addOriginalChecklistItem(0, RarityTier.Diamond); // 000 Messi\r\n    _addOriginalChecklistItem(1, RarityTier.Diamond); // 001 Ronaldo\r\n    _addOriginalChecklistItem(2, RarityTier.Diamond); // 002 Neymar\r\n    _addOriginalChecklistItem(3, RarityTier.Diamond); // 003 Salah\r\n\r\n    /* ORIGINALS - GOLD */\r\n    _addOriginalChecklistItem(4, RarityTier.Gold); // 004 Lewandowski\r\n    _addOriginalChecklistItem(5, RarityTier.Gold); // 005 De Bruyne\r\n    _addOriginalChecklistItem(6, RarityTier.Gold); // 006 Modrić\r\n    _addOriginalChecklistItem(7, RarityTier.Gold); // 007 Hazard\r\n    _addOriginalChecklistItem(8, RarityTier.Gold); // 008 Ramos\r\n    _addOriginalChecklistItem(9, RarityTier.Gold); // 009 Kroos\r\n    _addOriginalChecklistItem(10, RarityTier.Gold); // 010 Suárez\r\n    _addOriginalChecklistItem(11, RarityTier.Gold); // 011 Kane\r\n    _addOriginalChecklistItem(12, RarityTier.Gold); // 012 Agüero\r\n    _addOriginalChecklistItem(13, RarityTier.Gold); // 013 Mbappé\r\n    _addOriginalChecklistItem(14, RarityTier.Gold); // 014 Higuaín\r\n    _addOriginalChecklistItem(15, RarityTier.Gold); // 015 de Gea\r\n    _addOriginalChecklistItem(16, RarityTier.Gold); // 016 Griezmann\r\n    _addOriginalChecklistItem(17, RarityTier.Gold); // 017 Kanté\r\n    _addOriginalChecklistItem(18, RarityTier.Gold); // 018 Cavani\r\n    _addOriginalChecklistItem(19, RarityTier.Gold); // 019 Pogba\r\n\r\n    /* ORIGINALS - SILVER (020 to 032) */\r\n    _addOriginalChecklistItem(20, RarityTier.Silver); // 020 Isco\r\n    _addOriginalChecklistItem(21, RarityTier.Silver); // 021 Marcelo\r\n    _addOriginalChecklistItem(22, RarityTier.Silver); // 022 Neuer\r\n    _addOriginalChecklistItem(23, RarityTier.Silver); // 023 Mertens\r\n    _addOriginalChecklistItem(24, RarityTier.Silver); // 024 James\r\n    _addOriginalChecklistItem(25, RarityTier.Silver); // 025 Dybala\r\n    _addOriginalChecklistItem(26, RarityTier.Silver); // 026 Eriksen\r\n    _addOriginalChecklistItem(27, RarityTier.Silver); // 027 David Silva\r\n    _addOriginalChecklistItem(28, RarityTier.Silver); // 028 Gabriel Jesus\r\n    _addOriginalChecklistItem(29, RarityTier.Silver); // 029 Thiago\r\n    _addOriginalChecklistItem(30, RarityTier.Silver); // 030 Courtois\r\n    _addOriginalChecklistItem(31, RarityTier.Silver); // 031 Coutinho\r\n    _addOriginalChecklistItem(32, RarityTier.Silver); // 032 Iniesta\r\n\r\n    // Move to the next deploy step.\r\n    deployStep = DeployStep.WaitingForStepTwo;\r\n  }\r\n\r\n  /// @dev Deploys Originals #033 through #065.\r\n  function deployStepTwo() external onlyOwner {\r\n    require(deployStep == DeployStep.WaitingForStepTwo, \"You're not following the steps in order...\");\r\n\r\n    /* ORIGINALS - SILVER (033 to 049) */\r\n    _addOriginalChecklistItem(33, RarityTier.Silver); // 033 Casemiro\r\n    _addOriginalChecklistItem(34, RarityTier.Silver); // 034 Lukaku\r\n    _addOriginalChecklistItem(35, RarityTier.Silver); // 035 Piqué\r\n    _addOriginalChecklistItem(36, RarityTier.Silver); // 036 Hummels\r\n    _addOriginalChecklistItem(37, RarityTier.Silver); // 037 Godín\r\n    _addOriginalChecklistItem(38, RarityTier.Silver); // 038 Özil\r\n    _addOriginalChecklistItem(39, RarityTier.Silver); // 039 Son\r\n    _addOriginalChecklistItem(40, RarityTier.Silver); // 040 Sterling\r\n    _addOriginalChecklistItem(41, RarityTier.Silver); // 041 Lloris\r\n    _addOriginalChecklistItem(42, RarityTier.Silver); // 042 Falcao\r\n    _addOriginalChecklistItem(43, RarityTier.Silver); // 043 Rakitić\r\n    _addOriginalChecklistItem(44, RarityTier.Silver); // 044 Sané\r\n    _addOriginalChecklistItem(45, RarityTier.Silver); // 045 Firmino\r\n    _addOriginalChecklistItem(46, RarityTier.Silver); // 046 Mané\r\n    _addOriginalChecklistItem(47, RarityTier.Silver); // 047 Müller\r\n    _addOriginalChecklistItem(48, RarityTier.Silver); // 048 Alli\r\n    _addOriginalChecklistItem(49, RarityTier.Silver); // 049 Navas\r\n\r\n    /* ORIGINALS - BRONZE (050 to 065) */\r\n    _addOriginalChecklistItem(50, RarityTier.Bronze); // 050 Thiago Silva\r\n    _addOriginalChecklistItem(51, RarityTier.Bronze); // 051 Varane\r\n    _addOriginalChecklistItem(52, RarityTier.Bronze); // 052 Di María\r\n    _addOriginalChecklistItem(53, RarityTier.Bronze); // 053 Alba\r\n    _addOriginalChecklistItem(54, RarityTier.Bronze); // 054 Benatia\r\n    _addOriginalChecklistItem(55, RarityTier.Bronze); // 055 Werner\r\n    _addOriginalChecklistItem(56, RarityTier.Bronze); // 056 Sigurðsson\r\n    _addOriginalChecklistItem(57, RarityTier.Bronze); // 057 Matić\r\n    _addOriginalChecklistItem(58, RarityTier.Bronze); // 058 Koulibaly\r\n    _addOriginalChecklistItem(59, RarityTier.Bronze); // 059 Bernardo Silva\r\n    _addOriginalChecklistItem(60, RarityTier.Bronze); // 060 Kompany\r\n    _addOriginalChecklistItem(61, RarityTier.Bronze); // 061 Moutinho\r\n    _addOriginalChecklistItem(62, RarityTier.Bronze); // 062 Alderweireld\r\n    _addOriginalChecklistItem(63, RarityTier.Bronze); // 063 Forsberg\r\n    _addOriginalChecklistItem(64, RarityTier.Bronze); // 064 Mandžukić\r\n    _addOriginalChecklistItem(65, RarityTier.Bronze); // 065 Milinković-Savić\r\n\r\n    // Move to the next deploy step.\r\n    deployStep = DeployStep.WaitingForStepThree;\r\n  }\r\n\r\n  /// @dev Deploys Originals #066 through #099.\r\n  function deployStepThree() external onlyOwner {\r\n    require(deployStep == DeployStep.WaitingForStepThree, \"You're not following the steps in order...\");\r\n\r\n    /* ORIGINALS - BRONZE (066 to 099) */\r\n    _addOriginalChecklistItem(66, RarityTier.Bronze); // 066 Kagawa\r\n    _addOriginalChecklistItem(67, RarityTier.Bronze); // 067 Xhaka\r\n    _addOriginalChecklistItem(68, RarityTier.Bronze); // 068 Christensen\r\n    _addOriginalChecklistItem(69, RarityTier.Bronze); // 069 Zieliński\r\n    _addOriginalChecklistItem(70, RarityTier.Bronze); // 070 Smolov\r\n    _addOriginalChecklistItem(71, RarityTier.Bronze); // 071 Shaqiri\r\n    _addOriginalChecklistItem(72, RarityTier.Bronze); // 072 Rashford\r\n    _addOriginalChecklistItem(73, RarityTier.Bronze); // 073 Hernández\r\n    _addOriginalChecklistItem(74, RarityTier.Bronze); // 074 Lozano\r\n    _addOriginalChecklistItem(75, RarityTier.Bronze); // 075 Ziyech\r\n    _addOriginalChecklistItem(76, RarityTier.Bronze); // 076 Moses\r\n    _addOriginalChecklistItem(77, RarityTier.Bronze); // 077 Farfán\r\n    _addOriginalChecklistItem(78, RarityTier.Bronze); // 078 Elneny\r\n    _addOriginalChecklistItem(79, RarityTier.Bronze); // 079 Berg\r\n    _addOriginalChecklistItem(80, RarityTier.Bronze); // 080 Ochoa\r\n    _addOriginalChecklistItem(81, RarityTier.Bronze); // 081 Akinfeev\r\n    _addOriginalChecklistItem(82, RarityTier.Bronze); // 082 Azmoun\r\n    _addOriginalChecklistItem(83, RarityTier.Bronze); // 083 Cueva\r\n    _addOriginalChecklistItem(84, RarityTier.Bronze); // 084 Khazri\r\n    _addOriginalChecklistItem(85, RarityTier.Bronze); // 085 Honda\r\n    _addOriginalChecklistItem(86, RarityTier.Bronze); // 086 Cahill\r\n    _addOriginalChecklistItem(87, RarityTier.Bronze); // 087 Mikel\r\n    _addOriginalChecklistItem(88, RarityTier.Bronze); // 088 Sung-yueng\r\n    _addOriginalChecklistItem(89, RarityTier.Bronze); // 089 Ruiz\r\n    _addOriginalChecklistItem(90, RarityTier.Bronze); // 090 Yoshida\r\n    _addOriginalChecklistItem(91, RarityTier.Bronze); // 091 Al Abed\r\n    _addOriginalChecklistItem(92, RarityTier.Bronze); // 092 Chung-yong\r\n    _addOriginalChecklistItem(93, RarityTier.Bronze); // 093 Gómez\r\n    _addOriginalChecklistItem(94, RarityTier.Bronze); // 094 Sliti\r\n    _addOriginalChecklistItem(95, RarityTier.Bronze); // 095 Ghoochannejhad\r\n    _addOriginalChecklistItem(96, RarityTier.Bronze); // 096 Jedinak\r\n    _addOriginalChecklistItem(97, RarityTier.Bronze); // 097 Al-Sahlawi\r\n    _addOriginalChecklistItem(98, RarityTier.Bronze); // 098 Gunnarsson\r\n    _addOriginalChecklistItem(99, RarityTier.Bronze); // 099 Pérez\r\n\r\n    // Move to the next deploy step.\r\n    deployStep = DeployStep.WaitingForStepFour;\r\n  }\r\n\r\n  /// @dev Deploys all Iconics and marks the deploy as complete!\r\n  function deployStepFour() external onlyOwner {\r\n    require(deployStep == DeployStep.WaitingForStepFour, \"You're not following the steps in order...\");\r\n\r\n    /* ICONICS */\r\n    _addIconicChecklistItem(0, RarityTier.IconicInsert); // 100 Messi\r\n    _addIconicChecklistItem(1, RarityTier.IconicInsert); // 101 Ronaldo\r\n    _addIconicChecklistItem(2, RarityTier.IconicInsert); // 102 Neymar\r\n    _addIconicChecklistItem(3, RarityTier.IconicInsert); // 103 Salah\r\n    _addIconicChecklistItem(4, RarityTier.IconicInsert); // 104 Lewandowski\r\n    _addIconicChecklistItem(5, RarityTier.IconicInsert); // 105 De Bruyne\r\n    _addIconicChecklistItem(6, RarityTier.IconicInsert); // 106 Modrić\r\n    _addIconicChecklistItem(7, RarityTier.IconicInsert); // 107 Hazard\r\n    _addIconicChecklistItem(8, RarityTier.IconicInsert); // 108 Ramos\r\n    _addIconicChecklistItem(9, RarityTier.IconicInsert); // 109 Kroos\r\n    _addIconicChecklistItem(10, RarityTier.IconicInsert); // 110 Suárez\r\n    _addIconicChecklistItem(11, RarityTier.IconicInsert); // 111 Kane\r\n    _addIconicChecklistItem(12, RarityTier.IconicInsert); // 112 Agüero\r\n    _addIconicChecklistItem(15, RarityTier.IconicInsert); // 113 de Gea\r\n    _addIconicChecklistItem(16, RarityTier.IconicInsert); // 114 Griezmann\r\n    _addIconicChecklistItem(17, RarityTier.IconicReferral); // 115 Kanté\r\n    _addIconicChecklistItem(18, RarityTier.IconicReferral); // 116 Cavani\r\n    _addIconicChecklistItem(19, RarityTier.IconicInsert); // 117 Pogba\r\n    _addIconicChecklistItem(21, RarityTier.IconicInsert); // 118 Marcelo\r\n    _addIconicChecklistItem(24, RarityTier.IconicInsert); // 119 James\r\n    _addIconicChecklistItem(26, RarityTier.IconicInsert); // 120 Eriksen\r\n    _addIconicChecklistItem(29, RarityTier.IconicReferral); // 121 Thiago\r\n    _addIconicChecklistItem(36, RarityTier.IconicReferral); // 122 Hummels\r\n    _addIconicChecklistItem(38, RarityTier.IconicReferral); // 123 Özil\r\n    _addIconicChecklistItem(39, RarityTier.IconicInsert); // 124 Son\r\n    _addIconicChecklistItem(46, RarityTier.IconicInsert); // 125 Mané\r\n    _addIconicChecklistItem(48, RarityTier.IconicInsert); // 126 Alli\r\n    _addIconicChecklistItem(49, RarityTier.IconicReferral); // 127 Navas\r\n    _addIconicChecklistItem(73, RarityTier.IconicInsert); // 128 Hernández\r\n    _addIconicChecklistItem(85, RarityTier.IconicInsert); // 129 Honda\r\n    _addIconicChecklistItem(100, RarityTier.IconicReferral); // 130 Alves\r\n    _addIconicChecklistItem(101, RarityTier.IconicReferral); // 131 Zlatan\r\n\r\n    // Mark the initial deploy as complete.\r\n    deployStep = DeployStep.DoneInitialDeploy;\r\n  }\r\n\r\n  /// @dev Returns the mint limit for a given checklist item, based on its tier.\r\n  /// @param _checklistId Which checklist item we need to get the limit for.\r\n  /// @return How much of this checklist item we are allowed to mint.\r\n  function limitForChecklistId(uint8 _checklistId) external view returns (uint16) {\r\n    RarityTier rarityTier;\r\n    uint8 index;\r\n    if (_checklistId < 100) { // Originals = #000 to #099\r\n      rarityTier = originalChecklistItems[_checklistId].tier;\r\n    } else if (_checklistId < 200) { // Iconics = #100 to #131\r\n      index = _checklistId - 100;\r\n      require(index < iconicsCount(), \"This Iconics checklist item doesn't exist.\");\r\n      rarityTier = iconicChecklistItems[index].tier;\r\n    } else { // Unreleased = #200 to max #255\r\n      index = _checklistId - 200;\r\n      require(index < unreleasedCount(), \"This Unreleased checklist item doesn't exist.\");\r\n      rarityTier = unreleasedChecklistItems[index].tier;\r\n    }\r\n    return tierLimits[uint8(rarityTier)];\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"iconicChecklistItems\",\"outputs\":[{\"name\":\"playerId\",\"type\":\"uint8\"},{\"name\":\"tier\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deployStepThree\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deployStepOne\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_checklistId\",\"type\":\"uint8\"}],\"name\":\"limitForChecklistId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unreleasedChecklistItems\",\"outputs\":[{\"name\":\"playerId\",\"type\":\"uint8\"},{\"name\":\"tier\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deployStepFour\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unreleasedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerId\",\"type\":\"uint8\"},{\"name\":\"_tier\",\"type\":\"uint8\"}],\"name\":\"addUnreleasedChecklistItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iconicsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"originalChecklistItems\",\"outputs\":[{\"name\":\"playerId\",\"type\":\"uint8\"},{\"name\":\"tier\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"originalsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deployStepTwo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addPlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierLimits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"PlayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"StrikersChecklist","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f87c20fe7eb593456a65c383f65f6ca3a578031b9800b338b3629208d23ef268"}]}