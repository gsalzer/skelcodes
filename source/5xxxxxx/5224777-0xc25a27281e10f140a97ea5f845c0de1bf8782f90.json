{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  event Released(uint256 amount);\r\n  event Revoked();\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  uint256 public cliff;\r\n  uint256 public start;\r\n  uint256 public duration;\r\n\r\n  bool public revocable;\r\n\r\n  mapping (address => uint256) public released;\r\n  mapping (address => bool) public revoked;\r\n\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n   * of the balance will have vested.\r\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param _duration duration in seconds of the period in which the tokens will vest\r\n   * @param _revocable whether the vesting is revocable or not\r\n   */\r\n  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\r\n    require(_beneficiary != address(0));\r\n    require(_cliff <= _duration);\r\n\r\n    beneficiary = _beneficiary;\r\n    revocable = _revocable;\r\n    duration = _duration;\r\n    cliff = _start.add(_cliff);\r\n    start = _start;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function release(ERC20Basic token) public {\r\n    uint256 unreleased = releasableAmount(token);\r\n\r\n    require(unreleased > 0);\r\n\r\n    released[token] = released[token].add(unreleased);\r\n\r\n    token.safeTransfer(beneficiary, unreleased);\r\n\r\n    Released(unreleased);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n   * remain in the contract, the rest are returned to the owner.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function revoke(ERC20Basic token) public onlyOwner {\r\n    require(revocable);\r\n    require(!revoked[token]);\r\n\r\n    uint256 balance = token.balanceOf(this);\r\n\r\n    uint256 unreleased = releasableAmount(token);\r\n    uint256 refund = balance.sub(unreleased);\r\n\r\n    revoked[token] = true;\r\n\r\n    token.safeTransfer(owner, refund);\r\n\r\n    Revoked();\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\r\n    return vestedAmount(token).sub(released[token]);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(this);\r\n    uint256 totalBalance = currentBalance.add(released[token]);\r\n\r\n    if (now < cliff) {\r\n      return 0;\r\n    } else if (now >= start.add(duration) || revoked[token]) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(now.sub(start)).div(duration);\r\n    }\r\n  }\r\n}\r\n\r\n\r\ncontract SimplePreTGE is Ownable {\r\n\r\n  bool public allocationsLocked;\r\n\r\n  struct Contribution {\r\n    bool hasVested;\r\n    uint256 weiContributed;\r\n  }\r\n  mapping (address => Contribution)  public contributions;\r\n\r\n  function disableAllocationModificationsForEver() external onlyOwner returns(bool) {\r\n    allocationsLocked = true;\r\n  }\r\n\r\n  function bulkReserveTokensForAddresses(address[] addrs, uint256[] weiContributions, bool[] _vestingDecisions) onlyOwner external returns(bool) {\r\n    require(!allocationsLocked);\r\n    require((addrs.length == weiContributions.length) && (addrs.length == _vestingDecisions.length));\r\n    for (uint i=0; i<addrs.length; i++) {\r\n      contributions[addrs[i]].weiContributed = weiContributions[i];\r\n      contributions[addrs[i]].hasVested = _vestingDecisions[i];\r\n    }\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract SimpleTGE is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // start and end timestamps (both inclusive) when sale is open\r\n  uint256 public publicTGEStartBlockTimeStamp;\r\n\r\n  uint256 public publicTGEEndBlockTimeStamp;\r\n\r\n  // address where funds are collected\r\n  address public fundsWallet;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  // sale cap in wei\r\n  uint256 public totalCapInWei;\r\n\r\n  // individual cap in wei\r\n  uint256 public individualCapInWei;\r\n\r\n  // how long the TRS subscription is open after the TGE.\r\n  uint256 public TRSOffset = 5 days;\r\n\r\n  mapping (address => bool) public whitelist;\r\n\r\n  address[] public contributors;\r\n  struct Contribution {\r\n    bool hasVested;\r\n    uint256 weiContributed;\r\n  }\r\n\r\n  mapping (address => Contribution)  public contributions;\r\n\r\n  modifier whilePublicTGEIsActive() {\r\n    require(block.timestamp >= publicTGEStartBlockTimeStamp && block.timestamp <= publicTGEEndBlockTimeStamp);\r\n    _;\r\n  }\r\n\r\n  modifier isWhitelisted() {\r\n    require(whitelist[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  function blacklistAddresses(address[] addrs) external onlyOwner returns(bool) {\r\n    require(addrs.length <= 100);\r\n    for (uint i = 0; i < addrs.length; i++) {\r\n      require(addrs[i] != address(0));\r\n      whitelist[addrs[i]] = false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function whitelistAddresses(address[] addrs) external onlyOwner returns(bool) {\r\n    require(addrs.length <= 100);\r\n    for (uint i = 0; i < addrs.length; i++) {\r\n      require(addrs[i] != address(0));\r\n      whitelist[addrs[i]] = true;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the address specified by owner.\r\n   */\r\n  function reclaimEther(address _beneficiary) external onlyOwner {\r\n    _beneficiary.transfer(this.balance);\r\n  }\r\n\r\n  function SimpleTGE (\r\n    address _fundsWallet,\r\n    uint256 _publicTGEStartBlockTimeStamp,\r\n    uint256 _publicTGEEndBlockTimeStamp,\r\n    uint256 _individualCapInWei,\r\n    uint256 _totalCapInWei\r\n  ) public\r\n  {\r\n    require(_publicTGEStartBlockTimeStamp >= block.timestamp);\r\n    require(_publicTGEEndBlockTimeStamp > _publicTGEStartBlockTimeStamp);\r\n    require(_fundsWallet != address(0));\r\n    require(_individualCapInWei > 0);\r\n    require(_individualCapInWei <= _totalCapInWei);\r\n    require(_totalCapInWei > 0);\r\n\r\n    fundsWallet = _fundsWallet;\r\n    publicTGEStartBlockTimeStamp = _publicTGEStartBlockTimeStamp;\r\n    publicTGEEndBlockTimeStamp = _publicTGEEndBlockTimeStamp;\r\n    individualCapInWei = _individualCapInWei;\r\n    totalCapInWei = _totalCapInWei;\r\n  }\r\n\r\n  // allows changing the individual cap.\r\n  function changeIndividualCapInWei(uint256 _individualCapInWei) onlyOwner external returns(bool) {\r\n      require(_individualCapInWei > 0);\r\n      require(_individualCapInWei < totalCapInWei);\r\n      individualCapInWei = _individualCapInWei;\r\n      return true;\r\n  }\r\n\r\n  // low level token purchase function\r\n  function contribute(bool _vestingDecision) internal {\r\n    // validations\r\n    require(msg.sender != address(0));\r\n    require(msg.value != 0);\r\n    require(weiRaised.add(msg.value) <= totalCapInWei);\r\n    require(contributions[msg.sender].weiContributed.add(msg.value) <= individualCapInWei);\r\n    // if we have not received any WEI from this address until now, then we add this address to contributors list.\r\n    if (contributions[msg.sender].weiContributed == 0) {\r\n      contributors.push(msg.sender);\r\n    }\r\n    contributions[msg.sender].weiContributed = contributions[msg.sender].weiContributed.add(msg.value);\r\n    weiRaised = weiRaised.add(msg.value);\r\n    contributions[msg.sender].hasVested = _vestingDecision;\r\n    fundsWallet.transfer(msg.value);\r\n  }\r\n\r\n  function contributeAndVest() external whilePublicTGEIsActive isWhitelisted payable {\r\n    contribute(true);\r\n  }\r\n\r\n  function contributeWithoutVesting() public whilePublicTGEIsActive isWhitelisted payable {\r\n    contribute(false);\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    contributeWithoutVesting();\r\n  }\r\n\r\n  // Vesting logic\r\n  // The following cases are checked for _beneficiary's actions:\r\n  function vest(bool _vestingDecision) external isWhitelisted returns(bool) {\r\n    bool existingDecision = contributions[msg.sender].hasVested;\r\n    require(existingDecision != _vestingDecision);\r\n    require(block.timestamp >= publicTGEStartBlockTimeStamp);\r\n    require(contributions[msg.sender].weiContributed > 0);\r\n    // Ensure vesting cannot be done once TRS starts\r\n    if (block.timestamp > publicTGEEndBlockTimeStamp) {\r\n      require(block.timestamp.sub(publicTGEEndBlockTimeStamp) <= TRSOffset);\r\n    }\r\n    contributions[msg.sender].hasVested = _vestingDecision;\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract LendroidSupportToken is MintableToken, PausableToken {\r\n\r\n  string public constant name = \"Lendroid Support Token\";\r\n  string public constant symbol = \"LST\";\r\n  uint256 public constant decimals = 18;\r\n  uint256 public constant MAX_SUPPLY = 12000000000 * (10 ** uint256(decimals));// 12 billion tokens, 18 decimal places\r\n\r\n  /**\r\n   * @dev Constructor that pauses tradability of tokens.\r\n   */\r\n  function LendroidSupportToken() public {\r\n    paused = true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev totalSupply is set via the minting process\r\n   */\r\n\r\n  function mint(address to, uint256 amount) onlyOwner public returns (bool) {\r\n    require(totalSupply_ + amount <= MAX_SUPPLY);\r\n    return super.mint(to, amount);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SimpleLSTDistribution\r\n * @dev SimpleLSTDistribution contract provides interface for the contributor to withdraw their allocations / initiate the vesting contract\r\n */\r\ncontract SimpleLSTDistribution is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  SimplePreTGE public SimplePreTGEContract;\r\n  SimpleTGE public SimpleTGEContract;\r\n  LendroidSupportToken public token;\r\n  uint256 public LSTRatePerWEI = 48000;\r\n  //vesting related params\r\n  // bonus multiplied to every vesting contributor's allocation\r\n  uint256 public vestingBonusMultiplier;\r\n  uint256 public vestingBonusMultiplierPrecision = 1000000;\r\n  uint256 public vestingDuration;\r\n  uint256 public vestingStartTime;\r\n\r\n  struct allocation {\r\n    bool shouldVest;\r\n    uint256 weiContributed;\r\n    uint256 LSTAllocated;\r\n    bool hasWithdrawn;\r\n  }\r\n  // maps all allocations claimed by contributors\r\n  mapping (address => allocation)  public allocations;\r\n\r\n  // map of address to token vesting contract\r\n  mapping (address => TokenVesting) public vesting;\r\n\r\n  /**\r\n   * event for token transfer logging\r\n   * @param beneficiary who is receiving the tokens\r\n   * @param tokens amount of tokens given to the beneficiary\r\n   */\r\n  event LogLSTsWithdrawn(address beneficiary, uint256 tokens);\r\n\r\n  /**\r\n   * event for time vested token transfer logging\r\n   * @param beneficiary who is receiving the time vested tokens\r\n   * @param tokens amount of tokens that will be vested to the beneficiary\r\n   * @param start unix timestamp at which the tokens will start vesting\r\n   * @param cliff duration in seconds after start time at which vesting will start\r\n   * @param duration total duration in seconds in which the tokens will be vested\r\n   */\r\n  event LogTimeVestingLSTsWithdrawn(address beneficiary, uint256 tokens, uint256 start, uint256 cliff, uint256 duration);\r\n\r\n  function SimpleLSTDistribution(\r\n      address _SimplePreTGEAddress,\r\n      address _SimpleTGEAddress,\r\n      uint256 _vestingBonusMultiplier,\r\n      uint256 _vestingDuration,\r\n      uint256 _vestingStartTime,\r\n      address _LSTAddress\r\n    ) public {\r\n\r\n    require(_SimplePreTGEAddress != address(0));\r\n    require(_SimpleTGEAddress != address(0));\r\n    require(_vestingBonusMultiplier >= 1000000);\r\n    require(_vestingBonusMultiplier <= 10000000);\r\n    require(_vestingDuration > 0);\r\n    require(_vestingStartTime > block.timestamp);\r\n\r\n    token = LendroidSupportToken(_LSTAddress);\r\n    // token = new LendroidSupportToken();\r\n\r\n    SimplePreTGEContract = SimplePreTGE(_SimplePreTGEAddress);\r\n    SimpleTGEContract = SimpleTGE(_SimpleTGEAddress);\r\n    vestingBonusMultiplier = _vestingBonusMultiplier;\r\n    vestingDuration = _vestingDuration;\r\n    vestingStartTime = _vestingStartTime;\r\n  }\r\n\r\n  // member function to mint tokens to a beneficiary\r\n  function mintTokens(address beneficiary, uint256 tokens) public onlyOwner {\r\n    require(beneficiary != 0x0);\r\n    require(tokens > 0);\r\n    require(token.mint(beneficiary, tokens));\r\n    LogLSTsWithdrawn(beneficiary, tokens);\r\n  }\r\n\r\n  function withdraw() external {\r\n    require(!allocations[msg.sender].hasWithdrawn);\r\n    // make sure simpleTGE is over and the TRS subscription has ended\r\n    require(block.timestamp > SimpleTGEContract.publicTGEEndBlockTimeStamp().add(SimpleTGEContract.TRSOffset()));\r\n    // allocations should be locked in the pre-TGE\r\n    require(SimplePreTGEContract.allocationsLocked());\r\n    // should have participated in the TGE or the pre-TGE\r\n    bool _preTGEHasVested;\r\n    uint256 _preTGEWeiContributed;\r\n    bool _publicTGEHasVested;\r\n    uint256 _publicTGEWeiContributed;\r\n    (_publicTGEHasVested, _publicTGEWeiContributed) = SimpleTGEContract.contributions(msg.sender);\r\n    (_preTGEHasVested, _preTGEWeiContributed) = SimplePreTGEContract.contributions(msg.sender);\r\n    uint256 _totalWeiContribution = _preTGEWeiContributed.add(_publicTGEWeiContributed);\r\n    require(_totalWeiContribution > 0);\r\n    // the same contributor could have contributed in the pre-tge and the tge, so we add the contributions.\r\n    bool _shouldVest = _preTGEHasVested || _publicTGEHasVested;\r\n    allocations[msg.sender].hasWithdrawn = true;\r\n    allocations[msg.sender].shouldVest = _shouldVest;\r\n    allocations[msg.sender].weiContributed = _totalWeiContribution;\r\n    uint256 _lstAllocated;\r\n    if (!_shouldVest) {\r\n      _lstAllocated = LSTRatePerWEI.mul(_totalWeiContribution);\r\n      allocations[msg.sender].LSTAllocated = _lstAllocated;\r\n      require(token.mint(msg.sender, _lstAllocated));\r\n      LogLSTsWithdrawn(msg.sender, _lstAllocated);\r\n    }\r\n    else {\r\n      _lstAllocated = LSTRatePerWEI.mul(_totalWeiContribution).mul(vestingBonusMultiplier).div(vestingBonusMultiplierPrecision);\r\n      allocations[msg.sender].LSTAllocated = _lstAllocated;\r\n      uint256 _withdrawNow = _lstAllocated.div(10);\r\n      uint256 _vestedPortion = _lstAllocated.sub(_withdrawNow);\r\n      vesting[msg.sender] = new TokenVesting(msg.sender, vestingStartTime, 0, vestingDuration, false);\r\n      require(token.mint(msg.sender, _withdrawNow));\r\n      LogLSTsWithdrawn(msg.sender, _withdrawNow);\r\n      require(token.mint(address(vesting[msg.sender]), _vestedPortion));\r\n      LogTimeVestingLSTsWithdrawn(address(vesting[msg.sender]), _vestedPortion, vestingStartTime, 0, vestingDuration);\r\n    }\r\n  }\r\n\r\n  // member function that can be called to release vested tokens periodically\r\n  function releaseVestedTokens(address beneficiary) public {\r\n    require(beneficiary != 0x0);\r\n\r\n    TokenVesting tokenVesting = vesting[beneficiary];\r\n    tokenVesting.release(token);\r\n  }\r\n\r\n  // unpauseToken token for transfers\r\n  function unpauseToken() public onlyOwner {\r\n    token.unpause();\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingBonusMultiplierPrecision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"shouldVest\",\"type\":\"bool\"},{\"name\":\"weiContributed\",\"type\":\"uint256\"},{\"name\":\"LSTAllocated\",\"type\":\"uint256\"},{\"name\":\"hasWithdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SimpleTGEContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LSTRatePerWEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SimplePreTGEContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"releaseVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vesting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingBonusMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_SimplePreTGEAddress\",\"type\":\"address\"},{\"name\":\"_SimpleTGEAddress\",\"type\":\"address\"},{\"name\":\"_vestingBonusMultiplier\",\"type\":\"uint256\"},{\"name\":\"_vestingDuration\",\"type\":\"uint256\"},{\"name\":\"_vestingStartTime\",\"type\":\"uint256\"},{\"name\":\"_LSTAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"LogLSTsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"LogTimeVestingLSTsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SimpleLSTDistribution","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e3ac1eea42b1c7406731980b5bb072c4a7e95ded00000000000000000000000089e9062b160a8d499727baf544bfaf4997dc4ccf00000000000000000000000000000000000000000000000000000000003273530000000000000000000000000000000000000000000000000000000001e13380000000000000000000000000000000000000000000000000000000005aa320000000000000000000000000004de2573e27e648607b50e1cfff921a33e4a34405","Library":"","SwarmSource":"bzzr://d8dc9018449117e9c1bc41e7169386cb4ea2da047333f3dc83f374b68805c825"}]}