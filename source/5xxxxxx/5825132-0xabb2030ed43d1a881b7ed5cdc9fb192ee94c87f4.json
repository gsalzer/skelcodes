{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/* Team Littafi\r\n**/\r\n\r\n \r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) public pure returns (uint256) {\r\n     if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert( c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) public pure returns (uint256) {\r\n    //assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    //assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) public pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) public pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) public pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) public pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) external pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) external pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\n\r\n contract LittafiOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n     constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) onlyOwner public{\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOnwership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner,newOwner);\r\n        owner=newOwner;\r\n        newOwner=address(0);\r\n    }\r\n\r\n}\r\n\r\n contract Littafi is LittafiOwned{\r\n\r\n      using SafeMath for uint256;\r\n\r\n      uint256   public littID=0;\r\n      uint256   public littClientId=1;\r\n      bool      public sentinel=true;\r\n      uint256   public littafiAccount=0;\r\n      uint256   public littAdmins;\r\n\r\n      littafiContents[] public littafi;\r\n\r\n      mapping(bytes32 => address) littClientAddress;\r\n\r\n      mapping(bytes32 => string)  littIPFS;\r\n\r\n      mapping(bytes32 => uint256) littHashID;\r\n\r\n      mapping(bytes32 => uint256) littCapsule;\r\n\r\n      mapping(address => littafiAdmin) admins;\r\n\r\n      mapping(address => littafiSubscribtion) subscriber;\r\n\r\n      mapping(address => bool) subscriberStatus;\r\n\r\n      mapping(uint256 => address) poolAdmin;\r\n\r\n      mapping(uint256 => address) setPoolAdmin;\r\n\r\n      mapping(address => bool) isDelegateAdmin;\r\n\r\n      mapping(uint256 => string)  poolName;\r\n\r\n      mapping(address => bytes32[]) subscriberContentHashes;\r\n\r\n      mapping(address => uint256)  subscriberContentCount;\r\n      \r\n      mapping(address => bool) transferred;\r\n\r\n      struct littafiContents{\r\n          uint256 id;\r\n          bytes32 hash;\r\n          string  ipfs;\r\n          string timestamp;\r\n          string  metadata;\r\n          string  unique;\r\n          uint256 clientPool;\r\n          bool    access;\r\n      }\r\n\r\n      struct littafiAdmin{\r\n          uint256 poolID;\r\n          bool isAdmin;\r\n          string poolName;\r\n      }\r\n\r\n      struct littafiSubscribtion{\r\n          uint256 subID;\r\n          uint256 clientPool;\r\n      }\r\n\r\n      modifier onlyLittafiAdmin(uint256 _poolID){\r\n          require(admins[msg.sender].isAdmin == true && admins[msg.sender].poolID == _poolID && msg.sender != owner);\r\n          _;\r\n      }\r\n\r\n      modifier onlyLittafiSubscribed(){\r\n          require(msg.value > 0 && subscriber[msg.sender].subID > 0 && msg.sender != owner);\r\n          _;\r\n      }\r\n\r\n      modifier onlyLittafiNonSubscribed(){\r\n          require(msg.value > 0 && subscriber[msg.sender].subID == 0 && msg.sender != owner);\r\n          _;\r\n      }\r\n\r\n      modifier onlyDelegate(){\r\n          require(msg.sender == owner || isDelegateAdmin[msg.sender] == true);\r\n          _;\r\n      }\r\n\r\n      modifier onlyLittafiContentOwner(bytes32 _hash){\r\n          require(msg.sender == littClientAddress[_hash]);\r\n          _;\r\n      }\r\n\r\n      event littContent(address indexed _address,bytes32 _hash, string _ipfs, string _timestamp, string _metadata, string unique, uint256 _poolID, bool _access, bool success);\r\n\r\n      event littClientSubscribed(address indexed _address, string _timestamp,uint256 _fee,uint256 _poolID,bool success);\r\n\r\n      event littafiAssignedID(address indexed _adminAddress, string _timestamp, uint256 _poolID, address indexed _address);\r\n\r\n      event littafiAdminReassigned(address indexed _previousAdmin,address indexed _newAdmin,string _timestamp,uint256 _assignedID);\r\n\r\n      event littafiDelegateAdmin(address indexed _admin, address indexed _delegate,bool _state,string _timestamp);\r\n\r\n      event littContentAccessModified(address indexed _admin,bytes32 _hash, uint256 _poolID,bool _access);\r\n\r\n      event littPoolModified(address indexed _address,string _poolName,uint256 _poolID);\r\n\r\n      event littContentOwnershipTransferred(bytes32 _hash, address indexed _address, string _timestamp);\r\n\r\n      constructor() public{\r\n          LittafiOwned(msg.sender);\r\n      }\r\n\r\n      function subscribtionLittafi(uint256 _assignedID,string _timestamp, string _poolName) public payable onlyLittafiNonSubscribed(){\r\n\r\n          if(_assignedID > 0 && setPoolAdmin[_assignedID] == msg.sender){\r\n             subscriber[msg.sender].subID=littClientId;\r\n             subscriber[msg.sender].clientPool=_assignedID;\r\n             subscriberStatus[msg.sender]=true;\r\n             admins[msg.sender].poolID=_assignedID;\r\n             admins[msg.sender].isAdmin=true;\r\n             admins[msg.sender].poolName=_poolName;\r\n             poolAdmin[_assignedID]=msg.sender;\r\n             poolName[_assignedID]=_poolName;\r\n             littClientId++;\r\n             littAdmins++;\r\n             owner.transfer(msg.value);\r\n             littafiAccount.add(msg.value);\r\n\r\n             emit littClientSubscribed(msg.sender,_timestamp,msg.value,_assignedID,true);\r\n             return;\r\n          }else{\r\n              subscriber[msg.sender].subID=littClientId;\r\n              subscriber[msg.sender].clientPool=0;\r\n              subscriberStatus[msg.sender]=true;\r\n              littClientId++;\r\n              owner.transfer(msg.value);\r\n\r\n              emit littClientSubscribed(msg.sender,_timestamp,msg.value,0,true);\r\n              return;\r\n          }\r\n      }\r\n\r\n      function littafiContentCommit(bytes32 _hash,string _ipfs,string _timestamp,string _metadata,string _unique,bool _sentinel) public payable onlyLittafiSubscribed(){\r\n\r\n             uint256 id=littHashID[_hash];\r\n             if (littClientAddress[_hash] != address(0)){\r\n                emit littContent(littClientAddress[_hash],_hash,littIPFS[_hash],littafi[id].timestamp,littafi[id].metadata,littafi[id].unique,littafi[id].clientPool,littafi[id].access,true);\r\n                return;\r\n             }else{\r\n\r\n              if(admins[msg.sender].isAdmin == true) sentinel=_sentinel;\r\n\r\n              littafiContents memory commit=littafiContents(littID,_hash,_ipfs,_timestamp,_metadata,_unique,subscriber[msg.sender].clientPool,sentinel);\r\n              littafi.push(commit);\r\n\r\n              subscriberContentCount[msg.sender]++;\r\n              subscriberContentHashes[msg.sender].push(_hash);\r\n              littClientAddress[_hash]=msg.sender;\r\n              littIPFS[_hash]=_ipfs;\r\n              littHashID[_hash]=littID;\r\n              littID++;\r\n              owner.transfer(msg.value);\r\n\r\n              emit littContent(msg.sender,_hash,_ipfs,_timestamp,_metadata,_unique,subscriber[msg.sender].clientPool,sentinel,true);\r\n              return;\r\n             }\r\n\r\n      }\r\n\r\n      function littafiTimeCapsule(bytes32 _hash,string _ipfs,string _timestamp,string _metadata,string _unique,uint256 _capsuleRelease) public payable onlyLittafiSubscribed(){\r\n\r\n             uint256 id=littHashID[_hash];\r\n             if (littClientAddress[_hash] != address(0)){\r\n                emit littContent(littClientAddress[_hash],_hash,littIPFS[_hash],littafi[id].timestamp,littafi[id].metadata,littafi[id].unique,littafi[id].clientPool,littafi[id].access,true);\r\n                return;\r\n             }else{\r\n\r\n              littafiContents memory commit=littafiContents(littID,_hash,_ipfs,_timestamp,_metadata,_unique,subscriber[msg.sender].clientPool,sentinel);\r\n              littafi.push(commit);\r\n\r\n              subscriberContentCount[msg.sender]++;\r\n              littCapsule[_hash]=_capsuleRelease;\r\n              littClientAddress[_hash]=msg.sender;\r\n              littIPFS[_hash]=_ipfs;\r\n              littHashID[_hash]=littID;\r\n              littID++;\r\n              owner.transfer(msg.value);\r\n\r\n              emit littContent(msg.sender,_hash,_ipfs,_timestamp,_metadata,_unique,subscriber[msg.sender].clientPool,sentinel,true);\r\n              return;\r\n             }\r\n\r\n      }\r\n\r\n      function transferContentOwnership(bytes32 _hash, address _address, string _timestamp) public {\r\n          require(littClientAddress[_hash] == msg.sender);\r\n          littClientAddress[_hash]=_address;\r\n          emit littContentOwnershipTransferred(_hash,_address,_timestamp);\r\n          return;\r\n      }\r\n\r\n      function getLittafiContent(bytes32 _hash,uint256 _poolID) public payable{\r\n        if (littClientAddress[_hash] != address(0) && littafi[littHashID[_hash]].clientPool==_poolID){\r\n            owner.transfer(msg.value);\r\n            emit littContent(littClientAddress[_hash],_hash,littIPFS[_hash],littafi[littHashID[_hash]].timestamp,littafi[littHashID[_hash]].metadata,littafi[littHashID[_hash]].unique,littafi[littHashID[_hash]].clientPool,littafi[littHashID[_hash]].access,true);\r\n            return;\r\n        }\r\n      }\r\n\r\n      function setDelegateAdmin(address _address, string _timestamp, bool _state) public onlyOwner() returns(bool){\r\n          require(admins[_address].isAdmin == false);\r\n          isDelegateAdmin[_address]=_state;\r\n          emit littafiDelegateAdmin(msg.sender,_address,_state,_timestamp);\r\n          return true;\r\n      }\r\n\r\n      function setAssignedID(address _address,uint256 _assignedID, string _timestamp) public onlyDelegate(){\r\n          require(setPoolAdmin[_assignedID] == address(0));\r\n          setPoolAdmin[_assignedID]=_address;\r\n          emit littafiAssignedID(msg.sender,_timestamp,_assignedID,_address);\r\n          return;\r\n      }\r\n\r\n      function changeAssignedAdmin(address _newAdmin, uint256 _assignedID, string _timestamp) public onlyOwner(){\r\n          address _previousAdmin=poolAdmin[_assignedID];\r\n\r\n          admins[_previousAdmin].isAdmin=false;\r\n          admins[_previousAdmin].poolID=0;\r\n          subscriber[_previousAdmin].clientPool=0;\r\n\r\n          if(!subscriberStatus[_newAdmin])\r\n             subscriber[_newAdmin].subID=littID;\r\n             subscriber[_newAdmin].clientPool=_assignedID;\r\n\r\n          admins[_newAdmin].isAdmin=true;\r\n          admins[_newAdmin].poolID=_assignedID;\r\n          littID++;\r\n\r\n          emit littafiAdminReassigned(_previousAdmin,_newAdmin,_timestamp,_assignedID);\r\n          return;\r\n      }\r\n\r\n      function getPoolAdmin(uint256 _poolID) public view onlyDelegate() returns(address){\r\n          return poolAdmin[_poolID];\r\n      }\r\n\r\n      function modifyContentAccess(bytes32 _hash, bool _access, uint256 _poolID)public onlyLittafiAdmin(_poolID){\r\n         littafi[littHashID[_hash]].access=_access;\r\n         emit littContentAccessModified(msg.sender,_hash,_poolID,_access);\r\n         return;\r\n      }\r\n\r\n      function getClientCount() public view returns(uint256){\r\n          return littClientId;\r\n      }\r\n\r\n      function getContentCount() public view returns(uint256){\r\n          return littID;\r\n      }\r\n\r\n      function getLittAdminCount() public view onlyDelegate() returns(uint256){\r\n          return littAdmins;\r\n      }\r\n\r\n      function setPoolName(string _poolName,uint256 _poolID) public onlyLittafiAdmin(_poolID){\r\n          admins[msg.sender].poolName=_poolName;\r\n          emit littPoolModified(msg.sender,_poolName,_poolID);\r\n          return;\r\n      }\r\n\r\n      function getPoolName(uint256 _poolID) public view onlyLittafiAdmin(_poolID) returns(string){\r\n          return admins[msg.sender].poolName;\r\n      }\r\n\r\n      function getPoolNameByID(uint256 _poolID) public view returns(string){\r\n          return poolName[_poolID];\r\n      }\r\n\r\n      function getPoolID() public view returns(uint256){\r\n          return subscriber[msg.sender].clientPool;\r\n      }\r\n\r\n      function getSubscriberType() public view returns(bool){\r\n          return admins[msg.sender].isAdmin;\r\n      }\r\n\r\n      function getSubscriberStatus() public view returns(bool){\r\n          return subscriberStatus[msg.sender];\r\n      }\r\n\r\n      function getSubscriberContentCount() public view returns(uint256){\r\n          return subscriberContentCount[msg.sender];\r\n      }\r\n\r\n      function getSubscriberContentHashes() public view returns(bytes32[]){\r\n          return subscriberContentHashes[msg.sender];\r\n      }\r\n\r\n      function getDelegate() public view returns(bool){\r\n          return isDelegateAdmin[msg.sender];\r\n      }\r\n\r\n      function littContentExists(bytes32 _hash) public view returns(bool){\r\n          return littClientAddress[_hash] == address(0) ? false : true;\r\n      }\r\n\r\n      function littPoolIDExists(uint256 _poolID) public view returns(bool){\r\n          return poolAdmin[_poolID] == address(0) ? false : true;\r\n      }\r\n\r\n      function littIsCapsule(bytes32 _hash) public view returns(bool){\r\n          return littCapsule[_hash] == 0 ? false : true;\r\n      }\r\n\r\n      function littCapsuleGet(bytes32 _hash) public view returns(uint256){\r\n          return littIsCapsule(_hash) == true ? littCapsule[_hash] : 0;\r\n      }\r\n      \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_poolID\",\"type\":\"uint256\"}],\"name\":\"littPoolIDExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_poolID\",\"type\":\"uint256\"}],\"name\":\"getPoolName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSubscriberType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_access\",\"type\":\"bool\"},{\"name\":\"_poolID\",\"type\":\"uint256\"}],\"name\":\"modifyContentAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLittAdminCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"littafiAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"littContentExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_poolID\",\"type\":\"uint256\"}],\"name\":\"getPoolAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"littIsCapsule\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPoolID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getClientCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOnwership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"},{\"name\":\"_assignedID\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"string\"}],\"name\":\"changeAssignedAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSubscriberStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_ipfs\",\"type\":\"string\"},{\"name\":\"_timestamp\",\"type\":\"string\"},{\"name\":\"_metadata\",\"type\":\"string\"},{\"name\":\"_unique\",\"type\":\"string\"},{\"name\":\"_capsuleRelease\",\"type\":\"uint256\"}],\"name\":\"littafiTimeCapsule\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assignedID\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"string\"},{\"name\":\"_poolName\",\"type\":\"string\"}],\"name\":\"subscribtionLittafi\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_assignedID\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"string\"}],\"name\":\"setAssignedID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"littID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_poolName\",\"type\":\"string\"},{\"name\":\"_poolID\",\"type\":\"uint256\"}],\"name\":\"setPoolName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_timestamp\",\"type\":\"string\"},{\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setDelegateAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSubscriberContentCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSubscriberContentHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_poolID\",\"type\":\"uint256\"}],\"name\":\"getPoolNameByID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"littClientId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"littafi\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"ipfs\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"},{\"name\":\"metadata\",\"type\":\"string\"},{\"name\":\"unique\",\"type\":\"string\"},{\"name\":\"clientPool\",\"type\":\"uint256\"},{\"name\":\"access\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_poolID\",\"type\":\"uint256\"}],\"name\":\"getLittafiContent\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"littAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_timestamp\",\"type\":\"string\"}],\"name\":\"transferContentOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_ipfs\",\"type\":\"string\"},{\"name\":\"_timestamp\",\"type\":\"string\"},{\"name\":\"_metadata\",\"type\":\"string\"},{\"name\":\"_unique\",\"type\":\"string\"},{\"name\":\"_sentinel\",\"type\":\"bool\"}],\"name\":\"littafiContentCommit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"littCapsuleGet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sentinel\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_ipfs\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_metadata\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"unique\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_poolID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_access\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"littContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_poolID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"littClientSubscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_adminAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_poolID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"littafiAssignedID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_assignedID\",\"type\":\"uint256\"}],\"name\":\"littafiAdminReassigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_state\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"string\"}],\"name\":\"littafiDelegateAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_poolID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_access\",\"type\":\"bool\"}],\"name\":\"littContentAccessModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_poolName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_poolID\",\"type\":\"uint256\"}],\"name\":\"littPoolModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"string\"}],\"name\":\"littContentOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Littafi","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"SafeMath:be0521c5c9d85afab9a06bb73bd6e351c74be6ef","SwarmSource":"bzzr://00cb79f5e1925818ad1981da1664f579f4bfaf086d080b64b5dc170a27708788"}]}