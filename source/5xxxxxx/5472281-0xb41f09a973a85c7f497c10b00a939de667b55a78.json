{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n// ----------------------------------------------------------------------------------------------\r\n// KNOW Token by Kryptono Limited.\r\n// An ERC223 standard\r\n//\r\n// author: Kryptono Team\r\n// Contact: William@kryptono.exchange\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n    // Get the total token supply\r\n    function totalSupply() public constant returns (uint256 _totalSupply);\r\n \r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n \r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    \r\n    // transfer _value amount of token approved by address _from\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    \r\n    // approve an address with _value amount of tokens\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    // get remaining token approved by _owner to _spender\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n  \r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n \r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract ERC223 is ERC20{\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success);\r\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value, bytes indexed _data);\r\n}\r\n\r\n/// contract receiver interface\r\ncontract ContractReceiver {  \r\n    function tokenFallback(address _from, uint _value, bytes _data) external;\r\n}\r\n\r\ncontract BasicKNOW is ERC223 {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public constant decimals = 10;\r\n    string public constant symbol = \"KNOW\";\r\n    string public constant name = \"KNOW\";\r\n    uint256 public _totalSupply = 10 ** 19; // total supply is 10^19 unit, equivalent to 10^9 KNOW\r\n\r\n    // Owner of this contract\r\n    address public owner;\r\n\r\n    // tradable\r\n    bool public tradable = false;\r\n\r\n    // Balances KNOW for each account\r\n    mapping(address => uint256) balances;\r\n    \r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n            \r\n    /**\r\n     * Functions with this modifier can only be executed by the owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier isTradable(){\r\n        require(tradable == true || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev Constructor\r\n    function BasicKNOW() \r\n    public {\r\n        owner = msg.sender;\r\n        balances[owner] = _totalSupply;\r\n        Transfer(0x0, owner, _totalSupply);\r\n    }\r\n    \r\n    /// @dev Gets totalSupply\r\n    /// @return Total supply\r\n    function totalSupply()\r\n    public \r\n    constant \r\n    returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n        \r\n    /// @dev Gets account's balance\r\n    /// @param _addr Address of the account\r\n    /// @return Account balance\r\n    function balanceOf(address _addr) \r\n    public\r\n    constant \r\n    returns (uint256) {\r\n        return balances[_addr];\r\n    }\r\n    \r\n    \r\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) \r\n    private \r\n    view \r\n    returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length>0);\r\n    }\r\n \r\n    /// @dev Transfers the balance from msg.sender to an account\r\n    /// @param _to Recipient address\r\n    /// @param _value Transfered amount in unit\r\n    /// @return Transfer status\r\n    // Standard function transfer similar to ERC20 transfer with no _data .\r\n    // Added due to backwards compatibility reasons .\r\n    function transfer(address _to, uint _value) \r\n    public \r\n    isTradable\r\n    returns (bool success) {\r\n        require(_to != 0x0);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /// @dev Function that is called when a user or another contract wants to transfer funds .\r\n    /// @param _to Recipient address\r\n    /// @param _value Transfer amount in unit\r\n    /// @param _data the data pass to contract reveiver\r\n    function transfer(\r\n        address _to, \r\n        uint _value, \r\n        bytes _data) \r\n    public\r\n    isTradable \r\n    returns (bool success) {\r\n        require(_to != 0x0);\r\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n        balances[_to] = balanceOf(_to).add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        if(isContract(_to)) {\r\n            ContractReceiver receiver = ContractReceiver(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n            Transfer(msg.sender, _to, _value, _data);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /// @dev Function that is called when a user or another contract wants to transfer funds .\r\n    /// @param _to Recipient address\r\n    /// @param _value Transfer amount in unit\r\n    /// @param _data the data pass to contract reveiver\r\n    /// @param _custom_fallback custom name of fallback function\r\n    function transfer(\r\n        address _to, \r\n        uint _value, \r\n        bytes _data, \r\n        string _custom_fallback) \r\n    public \r\n    isTradable\r\n    returns (bool success) {\r\n        require(_to != 0x0);\r\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n        balances[_to] = balanceOf(_to).add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        if(isContract(_to)) {\r\n            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n            Transfer(msg.sender, _to, _value, _data);\r\n        }\r\n        return true;\r\n    }\r\n         \r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value)\r\n    public\r\n    isTradable\r\n    returns (bool success) {\r\n        require(_to != 0x0);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount) \r\n    public\r\n    returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    // get allowance\r\n    function allowance(address _owner, address _spender) \r\n    public\r\n    constant \r\n    returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // withdraw any ERC20 token in this contract to owner\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public returns (bool success) {\r\n        return ERC223(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    \r\n    // allow people can transfer their token\r\n    // NOTE: can not turn off\r\n    function turnOnTradable() \r\n    public\r\n    onlyOwner{\r\n        tradable = true;\r\n    }\r\n}\r\n\r\ncontract KNOW is BasicKNOW {\r\n\r\n    bool public _selling = false;//initial selling\r\n    \r\n    uint256 public _originalBuyPrice = 50 * 10**12; // original buy 1ETH = 5000 KNOW = 50 * 10**12 unit\r\n\r\n    // List of approved investors\r\n    mapping(address => bool) private approvedInvestorList;\r\n    \r\n    // deposit\r\n    mapping(address => uint256) private deposit;\r\n    \r\n    // icoPercent\r\n    uint256 public _icoPercent = 0;\r\n    \r\n    // _icoSupply is the avalable unit. Initially, it is _totalSupply\r\n    uint256 public _icoSupply = (_totalSupply * _icoPercent) / 100;\r\n    \r\n    // minimum buy 0.3 ETH\r\n    uint256 public _minimumBuy = 3 * 10 ** 17;\r\n    \r\n    // maximum buy 25 ETH\r\n    uint256 public _maximumBuy = 25 * 10 ** 18;\r\n\r\n    // totalTokenSold\r\n    uint256 public totalTokenSold = 0;\r\n\r\n    /**\r\n     * Functions with this modifier check on sale status\r\n     * Only allow sale if _selling is on\r\n     */\r\n    modifier onSale() {\r\n        require(_selling);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Functions with this modifier check the validity of address is investor\r\n     */\r\n    modifier validInvestor() {\r\n        require(approvedInvestorList[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Functions with this modifier check the validity of msg value\r\n     * value must greater than equal minimumBuyPrice\r\n     * total deposit must less than equal maximumBuyPrice\r\n     */\r\n    modifier validValue(){\r\n        // require value >= _minimumBuy AND total deposit of msg.sender <= maximumBuyPrice\r\n        require ( (msg.value >= _minimumBuy) &&\r\n                ( (deposit[msg.sender].add(msg.value)) <= _maximumBuy) );\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to buy by ether.\r\n    function()\r\n    public\r\n    payable {\r\n        buyKNOW();\r\n    }\r\n    \r\n    /// @dev buy function allows to buy ether. for using optional data\r\n    function buyKNOW()\r\n    public\r\n    payable\r\n    onSale\r\n    validValue\r\n    validInvestor {\r\n        uint256 requestedUnits = (msg.value * _originalBuyPrice) / 10**18;\r\n        require(balances[owner] >= requestedUnits);\r\n        // prepare transfer data\r\n        balances[owner] = balances[owner].sub(requestedUnits);\r\n        balances[msg.sender] = balances[msg.sender].add(requestedUnits);\r\n        \r\n        // increase total deposit amount\r\n        deposit[msg.sender] = deposit[msg.sender].add(msg.value);\r\n        \r\n        // check total and auto turnOffSale\r\n        totalTokenSold = totalTokenSold.add(requestedUnits);\r\n        if (totalTokenSold >= _icoSupply){\r\n            _selling = false;\r\n        }\r\n        \r\n        // submit transfer\r\n        Transfer(owner, msg.sender, requestedUnits);\r\n        owner.transfer(msg.value);\r\n    }\r\n\r\n    /// @dev Constructor\r\n    function KNOW() BasicKNOW()\r\n    public {\r\n        setBuyPrice(_originalBuyPrice);\r\n    }\r\n    \r\n    /// @dev Enables sale \r\n    function turnOnSale() onlyOwner \r\n    public {\r\n        _selling = true;\r\n    }\r\n\r\n    /// @dev Disables sale\r\n    function turnOffSale() onlyOwner \r\n    public {\r\n        _selling = false;\r\n    }\r\n    \r\n    /// @dev set new icoPercent\r\n    /// @param newIcoPercent new value of icoPercent\r\n    function setIcoPercent(uint256 newIcoPercent)\r\n    public \r\n    onlyOwner {\r\n        _icoPercent = newIcoPercent;\r\n        _icoSupply = (_totalSupply * _icoPercent) / 100;\r\n    }\r\n    \r\n    /// @dev set new _maximumBuy\r\n    /// @param newMaximumBuy new value of _maximumBuy\r\n    function setMaximumBuy(uint256 newMaximumBuy)\r\n    public \r\n    onlyOwner {\r\n        _maximumBuy = newMaximumBuy;\r\n    }\r\n\r\n    /// @dev Updates buy price (owner ONLY)\r\n    /// @param newBuyPrice New buy price (in UNIT) 1ETH <=> 10 000 0000000000 unit\r\n    function setBuyPrice(uint256 newBuyPrice) \r\n    onlyOwner \r\n    public {\r\n        require(newBuyPrice>0);\r\n        _originalBuyPrice = newBuyPrice; // unit\r\n        // control _maximumBuy_USD = 10,000 USD, KNOW price is 0.1USD\r\n        // maximumBuy_KNOW = 100,000 KNOW = 100,000,0000000000 unit = 10^15\r\n        _maximumBuy = (10**18 * 10**15) /_originalBuyPrice;\r\n    }\r\n    \r\n    /// @dev check address is approved investor\r\n    /// @param _addr address\r\n    function isApprovedInvestor(address _addr)\r\n    public\r\n    constant\r\n    returns (bool) {\r\n        return approvedInvestorList[_addr];\r\n    }\r\n    \r\n    /// @dev get ETH deposit\r\n    /// @param _addr address get deposit\r\n    /// @return amount deposit of an buyer\r\n    function getDeposit(address _addr)\r\n    public\r\n    constant\r\n    returns(uint256){\r\n        return deposit[_addr];\r\n}\r\n    \r\n    /// @dev Adds list of new investors to the investors list and approve all\r\n    /// @param newInvestorList Array of new investors addresses to be added\r\n    function addInvestorList(address[] newInvestorList)\r\n    onlyOwner\r\n    public {\r\n        for (uint256 i = 0; i < newInvestorList.length; i++){\r\n            approvedInvestorList[newInvestorList[i]] = true;\r\n        }\r\n    }\r\n\r\n    /// @dev Removes list of investors from list\r\n    /// @param investorList Array of addresses of investors to be removed\r\n    function removeInvestorList(address[] investorList)\r\n    onlyOwner\r\n    public {\r\n        for (uint256 i = 0; i < investorList.length; i++){\r\n            approvedInvestorList[investorList[i]] = false;\r\n        }\r\n    }\r\n    \r\n    /// @dev Withdraws Ether in contract (Owner only)\r\n    /// @return Status of withdrawal\r\n    function withdraw() onlyOwner \r\n    public \r\n    returns (bool) {\r\n        return owner.send(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newMaximumBuy\",\"type\":\"uint256\"}],\"name\":\"setMaximumBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOffSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOnTradable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newIcoPercent\",\"type\":\"uint256\"}],\"name\":\"setIcoPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_icoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyKNOW\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_icoPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setBuyPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_minimumBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_originalBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_maximumBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isApprovedInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorList\",\"type\":\"address[]\"}],\"name\":\"removeInvestorList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInvestorList\",\"type\":\"address[]\"}],\"name\":\"addInvestorList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOnSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_selling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"KNOW","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://40c57305d9eef58ec46090c7313601b20931dccb82fdd8999f663ed41a9cb6ee"}]}