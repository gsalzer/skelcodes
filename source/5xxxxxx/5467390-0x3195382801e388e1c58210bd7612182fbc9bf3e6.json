{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Questions {\r\n    struct Question {\r\n        address creator;\r\n        uint paymentForAnswer;\r\n        uint8 maxAnswers;\r\n        uint8 answerCount;\r\n        int minVoteWeight;\r\n    }\r\n    \r\n    struct Answer {\r\n        bool placed;\r\n        int rating;\r\n        uint8 votes;\r\n    }\r\n    \r\n    address public owner;\r\n    uint private ownerBalance;\r\n    \r\n    uint public minPaymentForAnswer = 1 finney;\r\n    uint public votesForAnswer = 5;\r\n    int public maxAbsKindness = 25;\r\n    uint public resetVoteKindnessEvery = 5000;\r\n    uint public minVoteWeightK = 1 finney;\r\n    \r\n    mapping (uint => Question) public questions;\r\n    uint public currentQuestionId = 0;\r\n    \r\n    // questionId => creator => rating\r\n    mapping (uint => mapping (address => Answer)) public answers;\r\n    \r\n    // questionId => creator => voter => true\r\n    mapping (uint => mapping (address => mapping (address => bool))) public votes;\r\n    \r\n    // voter => kindness\r\n    mapping (address => int8) public voteKindness;\r\n    \r\n    // user => vote kindness reset\r\n    mapping (address => uint) public voteKindnessReset;\r\n    \r\n    // user => vote weight\r\n    mapping (address => int) public voteWeight;\r\n    \r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n    event PlaceQuestion(\r\n        uint indexed questionId,\r\n        address indexed creator,\r\n        uint paymentForAnswer,\r\n        uint8 maxAnswers,\r\n        uint minVoteWeight,\r\n        string text\r\n    );\r\n    event PlaceAnswer(\r\n        uint indexed questionId,\r\n        address indexed creator,\r\n        string text\r\n    );\r\n    event Vote(uint indexed questionId, address indexed creator, int ratingDelta);\r\n    event VoteWeightChange(address indexed user, int weight);\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) revert();\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n    \r\n    function setMinPaymentForAnswer(uint value) external onlyOwner {\r\n        require(value < minPaymentForAnswer);\r\n        minPaymentForAnswer = value;\r\n    }\r\n    \r\n    function setMaxAbsKindness(int value) external onlyOwner {\r\n        require(value > 0);\r\n        maxAbsKindness = value;\r\n    }\r\n    \r\n    function setResetVoteKindnessEvery(uint value) external onlyOwner {\r\n        resetVoteKindnessEvery = value;\r\n    }\r\n    \r\n    function setMinVoteWeightK(uint value) external onlyOwner {\r\n        minVoteWeightK = value;\r\n    }\r\n    \r\n    function Questions() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function safeAdd(uint a, uint b) private pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function safeSub(uint a, uint b) private pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function safeMul(uint a, uint b) private pure returns (uint) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        \r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function changeVoteWeight(address user, int delta) internal {\r\n        voteWeight[user] += delta;\r\n        VoteWeightChange(user, voteWeight[user]);\r\n    }\r\n    \r\n    function placeQuestion(uint paymentForAnswer, uint8 maxAnswers, uint minVoteWeight, string text) external payable {\r\n        require(maxAnswers > 0 && maxAnswers <= 32);\r\n        require(msg.value == safeMul(paymentForAnswer, safeAdd(maxAnswers, 1)));\r\n        require(paymentForAnswer >= safeAdd(minPaymentForAnswer, safeMul(minVoteWeight, minVoteWeightK)));\r\n        uint len = bytes(text).length;\r\n        require(len > 0 && len <= 1024);\r\n        \r\n        uint realPaymentForAnswer = paymentForAnswer / 2;\r\n        uint realPaymentForVote = realPaymentForAnswer / votesForAnswer;\r\n        \r\n        int minVoteWeightI = int(minVoteWeight);\r\n        require(minVoteWeightI >= 0);\r\n        \r\n        questions[currentQuestionId] = Question({\r\n            creator: msg.sender,\r\n            paymentForAnswer: realPaymentForAnswer,\r\n            maxAnswers: maxAnswers,\r\n            answerCount: 0,\r\n            minVoteWeight: minVoteWeightI\r\n        });\r\n        PlaceQuestion(currentQuestionId, msg.sender, realPaymentForAnswer, maxAnswers, minVoteWeight, text);\r\n        currentQuestionId++;\r\n        \r\n        changeVoteWeight(msg.sender, 1);\r\n        \r\n        ownerBalance += msg.value - (realPaymentForAnswer + realPaymentForVote * votesForAnswer) * maxAnswers;\r\n        \r\n        FundTransfer(msg.sender, msg.value, true);\r\n    }\r\n    \r\n    function placeAnswer(uint questionId, string text) external {\r\n        require(questions[questionId].creator != 0x0);\r\n        require(questions[questionId].creator != msg.sender);\r\n        require(!answers[questionId][msg.sender].placed);\r\n        uint len = bytes(text).length;\r\n        require(len > 0 && len <= 1024);\r\n        require(questions[questionId].answerCount < questions[questionId].maxAnswers);\r\n        require(voteWeight[msg.sender] >= questions[questionId].minVoteWeight);\r\n        \r\n        questions[questionId].answerCount++;\r\n        answers[questionId][msg.sender] = Answer({\r\n            placed: true,\r\n            rating: 0,\r\n            votes: 0\r\n        });\r\n        PlaceAnswer(questionId, msg.sender, text);\r\n    }\r\n    \r\n    function voteForAnswer(uint questionId, address creator, bool isSpam) external {\r\n        require(questions[questionId].creator != msg.sender);\r\n        require(creator != msg.sender);\r\n        require(answers[questionId][creator].placed);\r\n        require(answers[questionId][creator].votes < votesForAnswer);\r\n        require(!votes[questionId][creator][msg.sender]);\r\n        require(voteWeight[msg.sender] > 0);\r\n        require(voteWeight[msg.sender] >= questions[questionId].minVoteWeight);\r\n        \r\n        if (voteKindnessReset[msg.sender] + resetVoteKindnessEvery <= block.number) {\r\n            voteKindness[msg.sender] = 0;\r\n            voteKindnessReset[msg.sender] = block.number;\r\n        }\r\n        \r\n        if (isSpam) {\r\n            require(voteKindness[msg.sender] > -maxAbsKindness);\r\n            voteKindness[msg.sender]--;\r\n        } else {\r\n            require(voteKindness[msg.sender] < maxAbsKindness);\r\n            voteKindness[msg.sender]++;\r\n        }\r\n        \r\n        int ratingDelta = isSpam ? -voteWeight[msg.sender] : voteWeight[msg.sender];\r\n        votes[questionId][creator][msg.sender] = true;\r\n        answers[questionId][creator].votes++;\r\n        answers[questionId][creator].rating += ratingDelta;\r\n        Vote(questionId, creator, ratingDelta);\r\n        \r\n        uint payment = questions[questionId].paymentForAnswer / votesForAnswer;\r\n        msg.sender.transfer(payment);\r\n        FundTransfer(msg.sender, payment, false);\r\n        \r\n        if (answers[questionId][creator].votes == votesForAnswer) {\r\n            if (answers[questionId][creator].rating > 0) {\r\n                creator.transfer(questions[questionId].paymentForAnswer);\r\n                FundTransfer(creator, questions[questionId].paymentForAnswer, false);\r\n                \r\n                changeVoteWeight(creator, 5);\r\n            } else {\r\n                questions[questionId].creator.transfer(questions[questionId].paymentForAnswer);\r\n                FundTransfer(questions[questionId].creator, questions[questionId].paymentForAnswer, false);\r\n                \r\n                changeVoteWeight(creator, -5);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function withdrawEther() external onlyOwner {\r\n        owner.transfer(ownerBalance);\r\n        ownerBalance = 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentQuestionId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questions\",\"outputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"paymentForAnswer\",\"type\":\"uint256\"},{\"name\":\"maxAnswers\",\"type\":\"uint8\"},{\"name\":\"answerCount\",\"type\":\"uint8\"},{\"name\":\"minVoteWeight\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAbsKindness\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paymentForAnswer\",\"type\":\"uint256\"},{\"name\":\"maxAnswers\",\"type\":\"uint8\"},{\"name\":\"minVoteWeight\",\"type\":\"uint256\"},{\"name\":\"text\",\"type\":\"string\"}],\"name\":\"placeQuestion\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteKindness\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setResetVoteKindnessEvery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"questionId\",\"type\":\"uint256\"},{\"name\":\"text\",\"type\":\"string\"}],\"name\":\"placeAnswer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minVoteWeightK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"answers\",\"outputs\":[{\"name\":\"placed\",\"type\":\"bool\"},{\"name\":\"rating\",\"type\":\"int256\"},{\"name\":\"votes\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPaymentForAnswer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resetVoteKindnessEvery\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"setMaxAbsKindness\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinPaymentForAnswer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votesForAnswer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"questionId\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"isSpam\",\"type\":\"bool\"}],\"name\":\"voteForAnswer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinVoteWeightK\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteKindnessReset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"questionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paymentForAnswer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxAnswers\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"minVoteWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"text\",\"type\":\"string\"}],\"name\":\"PlaceQuestion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"questionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"text\",\"type\":\"string\"}],\"name\":\"PlaceAnswer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"questionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ratingDelta\",\"type\":\"int256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weight\",\"type\":\"int256\"}],\"name\":\"VoteWeightChange\",\"type\":\"event\"}]","ContractName":"Questions","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://544cdbae195eaab50f4db8aa8a63268a2e9aaf23c0b734ebb54c980d6d2dd2c8"}]}