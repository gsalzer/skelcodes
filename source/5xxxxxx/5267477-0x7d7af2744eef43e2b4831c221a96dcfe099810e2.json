{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n\r\ncontract InterfaceContentCreatorUniverse {\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price);\r\n  function getNextPrice(uint price, uint _tokenId) public pure returns (uint);\r\n  function lastSubTokenBuyerOf(uint tokenId) public view returns(address);\r\n  function lastSubTokenCreatorOf(uint tokenId) public view returns(address);\r\n\r\n  //\r\n  function createCollectible(uint256 tokenId, uint256 _price, address creator, address owner) external ;\r\n}\r\n\r\ncontract InterfaceYCC {\r\n  function payForUpgrade(address user, uint price) external  returns (bool success);\r\n  function mintCoinsForOldCollectibles(address to, uint256 amount, address universeOwner) external  returns (bool success);\r\n  function tradePreToken(uint price, address buyer, address seller, uint burnPercent, address universeOwner) external;\r\n  function payoutForMining(address user, uint amount) external;\r\n  uint256 public totalSupply;\r\n}\r\n\r\ncontract InterfaceMining {\r\n  function createMineForToken(uint tokenId, uint level, uint xp, uint nextLevelBreak, uint blocknumber) external;\r\n  function payoutMining(uint tokenId, address owner, address newOwner) external;\r\n  function levelUpMining(uint tokenId) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Owned {\r\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n  address private newCeoAddress;\r\n  address private newCooAddress;\r\n\r\n\r\n  function Owned() public {\r\n      ceoAddress = msg.sender;\r\n      cooAddress = msg.sender;\r\n  }\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require(\r\n      msg.sender == ceoAddress ||\r\n      msg.sender == cooAddress\r\n    );\r\n    _;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n    newCeoAddress = _newCEO;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\r\n  /// @param _newCOO The address of the new COO\r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n    newCooAddress = _newCOO;\r\n  }\r\n\r\n  function acceptCeoOwnership() public {\r\n      require(msg.sender == newCeoAddress);\r\n      require(address(0) != newCeoAddress);\r\n      ceoAddress = newCeoAddress;\r\n      newCeoAddress = address(0);\r\n  }\r\n\r\n  function acceptCooOwnership() public {\r\n      require(msg.sender == newCooAddress);\r\n      require(address(0) != newCooAddress);\r\n      cooAddress = newCooAddress;\r\n      newCooAddress = address(0);\r\n  }\r\n\r\n  mapping (address => bool) public youCollectContracts;\r\n  function addYouCollectContract(address contractAddress, bool active) public onlyCOO {\r\n    youCollectContracts[contractAddress] = active;\r\n  }\r\n  modifier onlyYCC() {\r\n    require(youCollectContracts[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  InterfaceYCC ycc;\r\n  InterfaceContentCreatorUniverse yct;\r\n  InterfaceMining ycm;\r\n  function setMainYouCollectContractAddresses(address yccContract, address yctContract, address ycmContract, address[] otherContracts) public onlyCOO {\r\n    ycc = InterfaceYCC(yccContract);\r\n    yct = InterfaceContentCreatorUniverse(yctContract);\r\n    ycm = InterfaceMining(ycmContract);\r\n    youCollectContracts[yccContract] = true;\r\n    youCollectContracts[yctContract] = true;\r\n    youCollectContracts[ycmContract] = true;\r\n    for (uint16 index = 0; index < otherContracts.length; index++) {\r\n      youCollectContracts[otherContracts[index]] = true;\r\n    }\r\n  }\r\n  function setYccContractAddress(address yccContract) public onlyCOO {\r\n    ycc = InterfaceYCC(yccContract);\r\n    youCollectContracts[yccContract] = true;\r\n  }\r\n  function setYctContractAddress(address yctContract) public onlyCOO {\r\n    yct = InterfaceContentCreatorUniverse(yctContract);\r\n    youCollectContracts[yctContract] = true;\r\n  }\r\n  function setYcmContractAddress(address ycmContract) public onlyCOO {\r\n    ycm = InterfaceMining(ycmContract);\r\n    youCollectContracts[ycmContract] = true;\r\n  }\r\n\r\n}\r\n\r\ncontract TransferInterfaceERC721YC {\r\n  function transferToken(address to, uint256 tokenId) public returns (bool success);\r\n}\r\ncontract TransferInterfaceERC20 {\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol\r\n// ----------------------------------------------------------------------------\r\ncontract YouCollectBase is Owned {\r\n  using SafeMath for uint256;\r\n\r\n  event RedButton(uint value, uint totalSupply);\r\n\r\n  // Payout\r\n  function payout(address _to) public onlyCLevel {\r\n    _payout(_to, this.balance);\r\n  }\r\n  function payout(address _to, uint amount) public onlyCLevel {\r\n    if (amount>this.balance)\r\n      amount = this.balance;\r\n    _payout(_to, amount);\r\n  }\r\n  function _payout(address _to, uint amount) private {\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(amount);\r\n    } else {\r\n      _to.transfer(amount);\r\n    }\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Owner can transfer out any accidentally sent ERC20 tokens\r\n  // ------------------------------------------------------------------------\r\n  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyCEO returns (bool success) {\r\n      return TransferInterfaceERC20(tokenAddress).transfer(ceoAddress, tokens);\r\n  }\r\n}\r\n\r\n\r\ncontract Donate is YouCollectBase {\r\n  mapping (uint256 => address) public tokenIndexToOwner;\r\n  mapping (uint256 => uint256) public tokenIndexToPrice;\r\n  mapping (uint256 => address) public donateAddress;\r\n  mapping (uint256 => address) public tokenWinner;\r\n  uint256 donateTokenCount;\r\n  uint256 highestPrice = 0.001 ether;\r\n  address public nextRoundWinner;\r\n\r\n  uint256 lastBuyBlock;\r\n  uint256 roundDelay = 1999;\r\n  bool started = false;\r\n    \r\n  event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner);\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  function Donate() public {\r\n  }\r\n\r\n  /// For creating Collectibles\r\n  function addDonateTokenAddress(address adr) external onlyCEO {\r\n    donateTokenCount = donateTokenCount.add(1);\r\n    donateAddress[donateTokenCount] = adr;\r\n  }\r\n  function updateDonateTokenAddress(address adr, uint256 tokenId) external onlyCEO {\r\n    donateAddress[tokenId] = adr;\r\n  }\r\n  function changeRoundDelay(uint256 delay) external onlyCEO {\r\n    roundDelay = delay;\r\n  }\r\n\r\n  function getBlocksUntilNextRound() public view returns(uint) {\r\n    if (lastBuyBlock+roundDelay<block.number)\r\n      return 0;\r\n    return lastBuyBlock + roundDelay - block.number + 1;\r\n  }\r\n  function start() public onlyCEO {\r\n    started = true;\r\n    startNextRound();\r\n  }\r\n  \r\n  function startNextRound() public {\r\n    require(started);\r\n    require(lastBuyBlock+roundDelay<block.number);\r\n    tokenIndexToPrice[0] = highestPrice;\r\n    tokenIndexToOwner[0] = nextRoundWinner;\r\n    tokenWinner[0] = tokenIndexToOwner[0];\r\n    \r\n    for (uint index = 1; index <= donateTokenCount; index++) {\r\n      tokenIndexToPrice[index] = 0.001 ether;\r\n      tokenWinner[index] = tokenIndexToOwner[index];\r\n    }\r\n    highestPrice = 0.001 ether;\r\n    lastBuyBlock = block.number;\r\n  }\r\n\r\n  function getNextPrice(uint price) public pure returns (uint) {\r\n    if (price < 1 ether)\r\n      return price.mul(200).div(87);\r\n    return price.mul(120).div(87);\r\n  }\r\n\r\n  function buyToken(uint _tokenId) public payable {\r\n    address oldOwner = tokenIndexToOwner[_tokenId];\r\n    uint256 sellingPrice = tokenIndexToPrice[_tokenId];\r\n    require(oldOwner!=msg.sender);\r\n    require(msg.value >= sellingPrice);\r\n    require(sellingPrice > 0);\r\n\r\n    uint256 purchaseExcess = msg.value.sub(sellingPrice);\r\n    uint256 payment = sellingPrice.mul(87).div(100);\r\n    uint256 feeOnce = sellingPrice.sub(payment).div(13);\r\n    uint256 feeThree = feeOnce.mul(3);\r\n    uint256 nextPrice = getNextPrice(sellingPrice);\r\n    // Update prices\r\n    tokenIndexToPrice[_tokenId] = nextPrice;\r\n    // Transfers the Token\r\n    tokenIndexToOwner[_tokenId] = msg.sender;\r\n    lastBuyBlock = block.number;\r\n    if (_tokenId > 0) {\r\n      // Taxes for last round winner or new owner of the All-Donate-Token\r\n      if (tokenIndexToOwner[0]!=address(0))\r\n        tokenIndexToOwner[0].transfer(feeThree);\r\n      // Check for new winner of this round\r\n      if (nextPrice > highestPrice) {\r\n        highestPrice = nextPrice;\r\n        nextRoundWinner = msg.sender;\r\n      }\r\n    }\r\n    // Donation\r\n    donateAddress[_tokenId].transfer(feeThree);\r\n    // Taxes for last round token winner \r\n    if (tokenWinner[_tokenId]!=address(0))\r\n      tokenWinner[_tokenId].transfer(feeThree);\r\n    // Taxes for universe\r\n    yct.ownerOf(0).transfer(feeOnce);\r\n    // Payment for old owner\r\n    if (oldOwner != address(0)) {\r\n      oldOwner.transfer(payment);\r\n    }\r\n\r\n    TokenSold(_tokenId, sellingPrice, oldOwner, msg.sender);\r\n\r\n    // refund when paid too much\r\n    if (purchaseExcess>0)\r\n      msg.sender.transfer(purchaseExcess);\r\n  }\r\n\r\n\r\n  function getCollectibleWithMeta(uint256 tokenId) public view returns (uint256 _tokenId, uint256 sellingPrice, address owner, uint256 nextSellingPrice, address _tokenWinner, address _donateAddress) {\r\n    _tokenId = tokenId;\r\n    sellingPrice = tokenIndexToPrice[tokenId];\r\n    owner = tokenIndexToOwner[tokenId];\r\n    nextSellingPrice = getNextPrice(sellingPrice);\r\n    \r\n    _tokenWinner = tokenWinner[tokenId];\r\n    _donateAddress = donateAddress[tokenId];\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"youCollectContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"changeRoundDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startNextRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yctContract\",\"type\":\"address\"}],\"name\":\"setYctContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yccContract\",\"type\":\"address\"}],\"name\":\"setYccContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"updateDonateTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextRoundWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"addYouCollectContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptCooOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ycmContract\",\"type\":\"address\"}],\"name\":\"setYcmContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"getNextPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yccContract\",\"type\":\"address\"},{\"name\":\"yctContract\",\"type\":\"address\"},{\"name\":\"ycmContract\",\"type\":\"address\"},{\"name\":\"otherContracts\",\"type\":\"address[]\"}],\"name\":\"setMainYouCollectContractAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"addDonateTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCollectibleWithMeta\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"nextSellingPrice\",\"type\":\"uint256\"},{\"name\":\"_tokenWinner\",\"type\":\"address\"},{\"name\":\"_donateAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptCeoOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlocksUntilNextRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"donateAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"RedButton\",\"type\":\"event\"}]","ContractName":"Donate","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://28de85807a94f9f6c891553efd5b1eaefad1b462f032d1c8077694c32f3f4083"}]}