{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/// ERC20 contract interface With ERC23/ERC223 Extensions\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n\r\n    // ERC223 and ERC20 functions and events\r\n    function totalSupply() constant public returns (uint256 _supply);\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool ok);\r\n    function transfer(address to, uint256 value, bytes data) public returns (bool ok);\r\n    function name() constant public returns (string _name);\r\n    function symbol() constant public returns (string _symbol);\r\n    function decimals() constant public returns (uint8 _decimals);\r\n\r\n    // ERC20 Event \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes indexed data);\r\n    event FrozenFunds(address target, bool frozen);\r\n\tevent Burn(address indexed from, uint256 value);\r\n    \r\n}\r\n\r\n/// Include SafeMath Lib\r\ncontract SafeMath {\r\n    uint256 constant public MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function safeAdd(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        if (x > MAX_UINT256 - y) revert();\r\n        return x + y;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        if (x < y) revert();\r\n        return x - y;\r\n    }\r\n\r\n    function safeMul(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        if (y == 0) return 0;\r\n        if (x > MAX_UINT256 / y) revert();\r\n        return x * y;\r\n    }\r\n}\r\n\r\n/// Contract that is working with ERC223 tokens\r\ncontract ContractReceiver {\r\n\tstruct TKN {\r\n        address sender;\r\n        uint256 value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public pure {\r\n      TKN memory tkn;\r\n      tkn.sender = _from;\r\n      tkn.value = _value;\r\n      tkn.data = _data;\r\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n      tkn.sig = bytes4(u);\r\n    }\r\n\t\r\n\tfunction rewiewToken  () public pure returns (address, uint, bytes, bytes4) {\r\n        TKN memory tkn;\r\n        return (tkn.sender, tkn.value, tkn.data, tkn.sig);\r\n    }\r\n}\r\n\r\n/// Realthium is an ERC20 token with ERC223 Extensions\r\ncontract TokenRK60Z is ERC20, SafeMath {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    address public owner;\r\n    bool public SC_locked = false;\r\n    bool public tokenCreated = false;\r\n\tuint public DateCreateToken;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => bool) public frozenAccount;\r\n\tmapping(address => bool) public SmartContract_Allowed;\r\n\r\n    // Initialize\r\n    // Constructor is called only once and can not be called again (Ethereum Solidity specification)\r\n    function TokenRK50Z() public {\r\n        // Security check in case EVM has future flaw or exploit to call constructor multiple times\r\n        require(tokenCreated == false);\r\n\r\n        owner = msg.sender;\r\n        \r\n\t\tname = \"RK60Z\";\r\n        symbol = \"RK60Z\";\r\n        decimals = 5;\r\n        totalSupply = 500000000 * 10 ** uint256(decimals);\r\n        balances[owner] = totalSupply;\r\n        emit Transfer(owner, owner, totalSupply);\r\n\t\t\r\n        tokenCreated = true;\r\n\r\n        // Final sanity check to ensure owner balance is greater than zero\r\n        require(balances[owner] > 0);\r\n\r\n\t\t// Date Deploy Contract\r\n\t\tDateCreateToken = now;\r\n    }\r\n\t\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\t// Function to create date token.\r\n    function DateCreateToken() public view returns (uint256 _DateCreateToken) {\r\n\t\treturn DateCreateToken;\r\n\t}\r\n   \t\r\n    // Function to access name of token .\r\n    function name() view public returns (string _name) {\r\n\t\treturn name;\r\n\t}\r\n\t\r\n    // Function to access symbol of token .\r\n    function symbol() public view returns (string _symbol) {\r\n\t\treturn symbol;\r\n    }\r\n\r\n    // Function to access decimals of token .\r\n    function decimals() public view returns (uint8 _decimals) {\t\r\n\t\treturn decimals;\r\n    }\r\n\r\n    // Function to access total supply of tokens .\r\n    function totalSupply() public view returns (uint256 _totalSupply) {\r\n\t\treturn totalSupply;\r\n\t}\r\n\t\r\n\t// Get balance of the address provided\r\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\t// Get Smart Contract of the address approved\r\n    function SmartContract_Allowed(address _target) constant public returns (bool _sc_address_allowed) {\r\n        return SmartContract_Allowed[_target];\r\n    }\r\n\r\n    // Function that is called when a user or another contract wants to transfer funds .\r\n    function transfer(address _to, uint256 _value, bytes _data) public  returns (bool success) {\r\n        // Only allow transfer once Locked\r\n        // Once it is Locked, it is Locked forever and no one can lock again\r\n\t\trequire(!SC_locked);\r\n\t\trequire(!frozenAccount[msg.sender]);\r\n\t\trequire(!frozenAccount[_to]);\r\n\t\t\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        } \r\n        else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    // Standard function transfer similar to ERC20 transfer with no _data .\r\n    // Added due to backwards compatibility reasons .\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        // Only allow transfer once Locked\r\n        require(!SC_locked);\r\n\t\trequire(!frozenAccount[msg.sender]);\r\n\t\trequire(!frozenAccount[_to]);\r\n\r\n        //standard function transfer similar to ERC20 transfer with no _data\r\n        //added due to backwards compatibility reasons\r\n        bytes memory empty;\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        } \r\n        else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n\t// assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n\r\n    // function that is called when transaction target is an address\r\n    function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool success) {\r\n        if (balanceOf(msg.sender) < _value) revert();\r\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    // function that is called when transaction target is a contract\r\n    function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool success) {\r\n        require(SmartContract_Allowed[_to]);\r\n\t\t\r\n\t\tif (balanceOf(msg.sender) < _value) revert();\r\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n\t// Function to activate Ether reception in the smart Contract address only by the Owner\r\n    function () public payable { \r\n\t\tif(msg.sender != owner) { revert(); }\r\n    }\r\n\r\n\t// Creator/Owner can Locked/Unlock smart contract\r\n    function OWN_contractlocked(bool _locked) onlyOwner public {\r\n        SC_locked = _locked;\r\n    }\r\n\t\r\n\t// Destroy tokens amount from another account (Caution!!! the operation is destructive and you can not go back)\r\n    function OWN_burnToken(address _from, uint256 _value)  onlyOwner public returns (bool success) {\r\n        require(balances[_from] >= _value);\r\n        balances[_from] -= _value;\r\n        totalSupply -= _value;\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n\t\r\n\t//Generate other tokens after starting the program\r\n    function OWN_mintToken(uint256 mintedAmount) onlyOwner public {\r\n        //aggiungo i decimali al valore che imposto\r\n        balances[owner] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        emit Transfer(0, this, mintedAmount);\r\n        emit Transfer(this, owner, mintedAmount);\r\n    }\r\n\t\r\n\t// Block / Unlock address handling tokens\r\n    function OWN_freezeAddress(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\t\t\r\n\t// Function to destroy the smart contract\r\n    function OWN_kill() onlyOwner public { \r\n\t\tselfdestruct(owner); \r\n    }\r\n\t\r\n\t// Function Change Owner\r\n\tfunction OWN_transferOwnership(address newOwner) onlyOwner public {\r\n        // function allowed only if the address is not smart contract\r\n        if (!isContract(newOwner)) {\t\r\n\t\t\towner = newOwner;\r\n\t\t}\r\n    }\r\n\t\r\n\t// Smart Contract approved\r\n    function OWN_SmartContract_Allowed(address target, bool _allowed) onlyOwner public {\r\n\t\t// function allowed only for smart contract\r\n        if (isContract(target)) {\r\n\t\t\tSmartContract_Allowed[target] = _allowed;\r\n\t\t}\r\n    }\r\n\r\n\t// Distribution Token from Admin\r\n\tfunction OWN_DistributeTokenAdmin_Multi(address[] addresses, uint256 _value, bool freeze) onlyOwner public {\r\n\t\tfor (uint i = 0; i < addresses.length; i++) {\r\n\t\t\t//Block / Unlock address handling tokens\r\n\t\t\tfrozenAccount[addresses[i]] = freeze;\r\n\t\t\temit FrozenFunds(addresses[i], freeze);\r\n\t\t\t\r\n\t\t\tbytes memory empty;\r\n\t\t\tif (isContract(addresses[i])) {\r\n\t\t\t\ttransferToContract(addresses[i], _value, empty);\r\n\t\t\t} \r\n\t\t\telse {\r\n\t\t\t\ttransferToAddress(addresses[i], _value, empty);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OWN_kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"OWN_contractlocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"OWN_DistributeTokenAdmin_Multi\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"OWN_freezeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"OWN_SmartContract_Allowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DateCreateToken\",\"outputs\":[{\"name\":\"_DateCreateToken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OWN_transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"OWN_burnToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SC_locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"TokenRK50Z\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"SmartContract_Allowed\",\"outputs\":[{\"name\":\"_sc_address_allowed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"OWN_mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"TokenRK60Z","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://846ddcc7676f2dea210fc15f5d774063823cce046c8b4640c02a6a456afbad13"}]}