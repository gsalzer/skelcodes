{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n \r\n\r\ncontract owned {\r\n\r\n    address public owner;\r\n\r\n \r\n\r\n    function owned() public {\r\n\r\n        owner = msg.sender;\r\n\r\n    }\r\n\r\n \r\n\r\n    modifier onlyOwner {\r\n\r\n        require(msg.sender == owner);\r\n\r\n        _;\r\n\r\n    }\r\n\r\n \r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n\r\n        owner = newOwner;\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\n \r\n\r\ncontract TokenERC20 {\r\n\r\n    // Public variables of the token\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public decimals = 18;\r\n\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n\r\n    uint256 public totalSupply;\r\n\r\n \r\n\r\n    // This creates an array with all balances\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n \r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n \r\n\r\n    // This notifies clients about the amount burnt\r\n\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n \r\n\r\n    /**\r\n\r\n     * Constrctor function\r\n\r\n     *\r\n\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n\r\n     */\r\n\r\n    function TokenERC20(\r\n\r\n        uint256 initialSupply,\r\n\r\n        string tokenName,\r\n\r\n        string tokenSymbol\r\n\r\n    ) public {\r\n\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n\r\n        name = tokenName;                                   // Set the name for display purposes\r\n\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n\r\n    }\r\n\r\n \r\n\r\n    /**\r\n\r\n     * Internal transfer, only can be called by this contract\r\n\r\n     */\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n\r\n        require(_to != 0x0);\r\n\r\n        // Check if the sender has enough\r\n\r\n        require(balanceOf[_from] >= _value);\r\n\r\n        // Check for overflows\r\n\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\n        // Save this for an assertion in the future\r\n\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\n        // Subtract from the sender\r\n\r\n        balanceOf[_from] -= _value;\r\n\r\n        // Add the same to the recipient\r\n\r\n        balanceOf[_to] += _value;\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\r\n    }\r\n\r\n \r\n\r\n    /**\r\n\r\n     * Transfer tokens\r\n\r\n     *\r\n\r\n     * Send `_value` tokens to `_to` from your account\r\n\r\n     *\r\n\r\n     * @param _to The address of the recipient\r\n\r\n     * @param _value the amount to send\r\n\r\n     */\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n\r\n        _transfer(msg.sender, _to, _value);\r\n\r\n    }\r\n\r\n \r\n\r\n    /**\r\n\r\n     * Transfer tokens from other address\r\n\r\n     *\r\n\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n\r\n     *\r\n\r\n     * @param _from The address of the sender\r\n\r\n     * @param _to The address of the recipient\r\n\r\n     * @param _value the amount to send\r\n\r\n     */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n\r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n \r\n\r\n    /**\r\n\r\n     * Set allowance for other address\r\n\r\n     *\r\n\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n\r\n     *\r\n\r\n     * @param _spender The address authorized to spend\r\n\r\n     * @param _value the max amount they can spend\r\n\r\n     */\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n\r\n        returns (bool success) {\r\n\r\n        allowance[msg.sender][_spender] = _value;\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n \r\n\r\n    /**\r\n\r\n     * Set allowance for other address and notify\r\n\r\n     *\r\n\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n\r\n     *\r\n\r\n     * @param _spender The address authorized to spend\r\n\r\n     * @param _value the max amount they can spend\r\n\r\n     * @param _extraData some extra information to send to the approved contract\r\n\r\n     */\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n\r\n        public\r\n\r\n        returns (bool success) {\r\n\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n\r\n        if (approve(_spender, _value)) {\r\n\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n    }\r\n\r\n \r\n\r\n    /**\r\n\r\n     * Destroy tokens\r\n\r\n     *\r\n\r\n     * Remove `_value` tokens from the system irreversibly\r\n\r\n     *\r\n\r\n     * @param _value the amount of money to burn\r\n\r\n     */\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n\r\n        Burn(msg.sender, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n \r\n\r\n    /**\r\n\r\n     * Destroy tokens from other account\r\n\r\n     *\r\n\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n\r\n     *\r\n\r\n     * @param _from the address of the sender\r\n\r\n     * @param _value the amount of money to burn\r\n\r\n     */\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n\r\n        totalSupply -= _value;                              // Update totalSupply\r\n\r\n        Burn(_from, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\n\r\n/******************************************/\r\n\r\n/*       ADVANCED TOKEN STARTS HERE       */\r\n\r\n/******************************************/\r\n\r\n \r\n\r\ncontract PACCOIN is owned, TokenERC20 {\r\n\r\n \r\n\r\n    uint256 public sellPrice;\r\n\r\n    uint256 public buyPrice;\r\n\r\n \r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n \r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n\r\n    event FrozenFunds(address target, bool frozen);\r\n    \r\n    using SafeMath for uint256;\r\n \r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n\r\n    function PACCOIN(\r\n\r\n        uint256 initialSupply,\r\n\r\n        string tokenName,\r\n\r\n        string tokenSymbol\r\n\r\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n\r\n \r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n\r\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\r\n\r\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n\r\n        balanceOf[_from] -= _value;                         // Subtract from the sender\r\n\r\n        balanceOf[_to] += _value;                           // Add the same to the recipient\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n    }\r\n    \r\n    function batchTransfer(address[] _tos, uint256[] _amount) onlyOwner public returns (bool success) {\r\n        require(_tos.length == _amount.length); \r\n        uint256 i;\r\n        uint256 sum = 0;\r\n        for(i = 0; i < _amount.length; i++) { \r\n            sum = sum.add(_amount[i]); \r\n            require(_tos[i] != address(0));\r\n        }\r\n        require(balanceOf[msg.sender] >= sum);\r\n        for(i = 0; i < _tos.length; i++){\r\n            transfer(_tos[i], _amount[i]);\r\n            return true; \r\n        }\r\n    }\r\n\r\n \r\n\r\n    /// @notice Create `mintedAmount` tokens and send it to `target`\r\n\r\n    /// @param target Address to receive the tokens\r\n\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n\r\n        balanceOf[target] += mintedAmount;\r\n\r\n        totalSupply += mintedAmount;\r\n\r\n        Transfer(0, this, mintedAmount);\r\n\r\n        Transfer(this, target, mintedAmount);\r\n\r\n    }\r\n\r\n \r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n\r\n    /// @param target Address to be frozen\r\n\r\n    /// @param freeze either to freeze it or not\r\n\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n\r\n        frozenAccount[target] = freeze;\r\n\r\n        FrozenFunds(target, freeze);\r\n\r\n    }\r\n\r\n \r\n\r\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\r\n\r\n    /// @param newSellPrice Price the users can sell to the contract\r\n\r\n    /// @param newBuyPrice Price users can buy from the contract\r\n\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n\r\n        sellPrice = newSellPrice;\r\n\r\n        buyPrice = newBuyPrice;\r\n\r\n    }\r\n\r\n \r\n\r\n    /// @notice Buy tokens from contract by sending ether\r\n\r\n    function buy() payable public {\r\n\r\n        uint amount = msg.value / buyPrice;               // calculates the amount\r\n\r\n        _transfer(this, msg.sender, amount);              // makes the transfers\r\n\r\n    }\r\n\r\n \r\n\r\n    /// @notice Sell `amount` tokens to contract\r\n\r\n    /// @param amount amount of tokens to be sold\r\n\r\n    function sell(uint256 amount) public {\r\n\r\n        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\r\n\r\n        _transfer(msg.sender, this, amount);              // makes the transfers\r\n\r\n        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"PACCOIN","CompilerVersion":"v0.4.25-nightly.2018.6.8+commit.81c5a6e4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000007504143434f494e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035041430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://19e9b3ef94a49e098b5e8496035d46229713f2d3bda668cab6802fd438084346"}]}