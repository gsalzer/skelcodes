{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// '0xCatether Token' contract\r\n\r\n// Mineable ERC20 Token using Proof Of Work\r\n\r\n//\r\n\r\n// Symbol      : 0xCATE\r\n\r\n// Name        : 0xCatether Token\r\n\r\n// Total supply: No Limit\r\n\r\n// Decimals    : 8\r\n\r\n//\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// Safe maths\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        c = a + b;\r\n\r\n        require(c >= a);\r\n\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        require(b <= a);\r\n\r\n        c = a - b;\r\n\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        c = a * b;\r\n\r\n        require(a == 0 || c / a == b);\r\n\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        require(b > 0);\r\n\r\n        c = a / b;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nlibrary ExtendedMath {\r\n\r\n\r\n    //return the smaller of the two inputs (a or b)\r\n    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        if(a > b) return b;\r\n\r\n        return a;\r\n\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// ERC Token Standard #20 Interface\r\n\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Interface {\r\n\r\n    function totalSupply() public constant returns (uint);\r\n\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// Contract function to receive approval and execute function in one call\r\n\r\n//\r\n\r\n// Borrowed from MiniMeToken\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ApproveAndCallFallBack {\r\n\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// Owned contract\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n\r\n    constructor() public {\r\n\r\n        owner = msg.sender;\r\n\r\n    }\r\n\r\n\r\n    modifier onlyOwner {\r\n\r\n        require(msg.sender == owner);\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n\r\n        newOwner = _newOwner;\r\n\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n\r\n        newOwner = address(0);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// ERC20 Token, with the addition of symbol, name and decimals and an\r\n\r\n// initial fixed supply\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract _0xCatetherToken is ERC20Interface, Owned {\r\n\r\n    using SafeMath for uint;\r\n    using ExtendedMath for uint;\r\n\r\n\r\n    string public symbol;\r\n\r\n    string public  name;\r\n\r\n    uint8 public decimals;\r\n\r\n    uint public _totalSupply;\r\n\r\n\r\n\r\n    uint public latestDifficultyPeriodStarted;\r\n\r\n\r\n    uint public epochCount;//number of 'blocks' mined\r\n\r\n    //a little number\r\n    uint public  _MINIMUM_TARGET = 2**16;\r\n\r\n\r\n    //a big number is easier ; just find a solution that is smaller\r\n    //uint public  _MAXIMUM_TARGET = 2**224;  bitcoin uses 224\r\n    uint public  _MAXIMUM_TARGET = 2**224;\r\n\r\n\r\n    uint public miningTarget;\r\n\r\n    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\r\n\r\n\r\n    address public lastRewardTo;\r\n    uint public lastRewardAmount;\r\n    uint public lastRewardEthBlockNumber;\r\n\r\n    // a bunch of maps to know where this is going (pun intended)\r\n    \r\n    mapping(bytes32 => bytes32) public solutionForChallenge;\r\n    mapping(uint => uint) public timeStampForEpoch;\r\n    mapping(uint => uint) public targetForEpoch;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => address) donationsTo;\r\n\r\n\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    event Donation(address donation);\r\n    event DonationAddressOf(address donator, address donnationAddress);\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Constructor\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    constructor() public{\r\n\r\n        symbol = \"0xCATE\";\r\n\r\n        name = \"0xCatether Token\";\r\n\r\n        decimals = 8;\r\n        epochCount = 0;\r\n        _totalSupply = 0;\r\n\r\n        miningTarget = _MAXIMUM_TARGET;\r\n        challengeNumber = \"GENESIS_BLOCK\";\r\n        solutionForChallenge[challengeNumber] = \"Yes, this is the Genesis block.\";\r\n\r\n        latestDifficultyPeriodStarted = block.number;\r\n\r\n        _startNewMiningEpoch();\r\n\r\n\r\n        //The owner gets nothing! You must mine this ERC20 token\r\n        //balances[owner] = _totalSupply;\r\n        //Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n\r\n\r\n\r\n        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\r\n\r\n\r\n            //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\r\n            bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\r\n\r\n            //the challenge digest must match the expected\r\n            if (digest != challenge_digest) revert();\r\n\r\n            //the digest must be smaller than the target\r\n            if(uint256(digest) > miningTarget) revert();\r\n\r\n\r\n            //only allow one reward for each challenge\r\n             bytes32 solution = solutionForChallenge[challengeNumber];\r\n             solutionForChallenge[challengeNumber] = digest;\r\n             if(solution != 0x0) revert();  //prevent the same answer from awarding twice\r\n\r\n\r\n            uint reward_amount = getMiningReward(digest);\r\n\r\n            balances[msg.sender] = balances[msg.sender].add(reward_amount);\r\n\r\n            _totalSupply = _totalSupply.add(reward_amount);\r\n\r\n            //set readonly diagnostics data\r\n            lastRewardTo = msg.sender;\r\n            lastRewardAmount = reward_amount;\r\n            lastRewardEthBlockNumber = block.number;\r\n\r\n             _startNewMiningEpoch();\r\n\r\n              emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\r\n\r\n           return true;\r\n\r\n        }\r\n\r\n\r\n    //a new 'block' to be mined\r\n    function _startNewMiningEpoch() internal {\r\n        \r\n        targetForEpoch[epochCount] = miningTarget;\r\n        timeStampForEpoch[epochCount] = block.timestamp;\r\n        epochCount = epochCount.add(1);\r\n    \r\n      //Difficulty adjustment following the DigiChieldv3 implementation (Tempered-SMA)\r\n      // Allows more thorough protection against multi-pool hash attacks\r\n      // https://github.com/zawy12/difficulty-algorithms/issues/9\r\n        _reAdjustDifficulty();\r\n\r\n\r\n      //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\r\n      //do this last since this is a protection mechanism in the mint() function\r\n      challengeNumber = blockhash(block.number - 1);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    //https://github.com/zawy12/difficulty-algorithms/issues/9\r\n    //readjust the target via a tempered SMA\r\n    function _reAdjustDifficulty() internal {\r\n        \r\n        //we want miners to spend 1 minutes to mine each 'block'\r\n        //for that, we need to approximate as closely as possible the current difficulty, by averaging the 28 last difficulties,\r\n        // compared to the average time it took to mine each block.\r\n        // also, since we can't really do that if we don't even have 28 mined blocks, difficulty will not move until we reach that number.\r\n        \r\n        uint timeTarget = 188; // roughly equals to Pi number. (There's also Phi somewhere below)\r\n        \r\n        if(epochCount>28) {\r\n            // counter, difficulty-sum, solve-time-sum, solve-time\r\n            uint i = 0;\r\n            uint sumD = 0;\r\n            uint sumST = 0;  // the first calculation of the timestamp difference can be negative, but it's not that bad (see below)\r\n            uint solvetime;\r\n            \r\n            for(i=epochCount.sub(28); i<epochCount; i++){\r\n                sumD = sumD.add(targetForEpoch[i]);\r\n                solvetime = timeStampForEpoch[i] - timeStampForEpoch[i-1];\r\n                if (solvetime > timeTarget.mul(7)) {solvetime = timeTarget.mul(7); }\r\n                //if (solvetime < timeTarget.mul(-6)) {solvetime = timeTarget.mul(-6); }    Ethereum EVM doesn't allow for a timestamp that make time go \"backwards\" anyway, so, we're good\r\n                sumST += solvetime;                                                   //    (block.timestamp is an uint256 => negative = very very long time, thus rejected by the network)\r\n                // we don't use safeAdd because in sore rare cases, it can underflow. However, the EVM structure WILL make it overflow right after, thus giving a correct SumST after a few loops\r\n            }\r\n            sumST = sumST.mul(10000).div(2523).add(1260); // 1260 seconds is a 75% weighing on what should be the actual time to mine 28 blocks.\r\n            miningTarget = sumD.mul(60).div(sumST); //We add it to the actual time it took with a weighted average (tempering)\r\n        }\r\n        \r\n        latestDifficultyPeriodStarted = block.number;\r\n\r\n        if(miningTarget < _MINIMUM_TARGET) //very difficult\r\n        {\r\n          miningTarget = _MINIMUM_TARGET;\r\n        }\r\n\r\n        if(miningTarget > _MAXIMUM_TARGET) //very easy\r\n        {\r\n          miningTarget = _MAXIMUM_TARGET;\r\n        }\r\n        targetForEpoch[epochCount] = miningTarget;\r\n    }\r\n\r\n\r\n    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\r\n    function getChallengeNumber() public constant returns (bytes32) {\r\n        return challengeNumber;\r\n    }\r\n\r\n    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\r\n     function getMiningDifficulty() public constant returns (uint) {\r\n        return _MAXIMUM_TARGET.div(miningTarget);\r\n    }\r\n\r\n    function getMiningTarget() public constant returns (uint) {\r\n       return miningTarget;\r\n   }\r\n\r\n\r\n\r\n    //There's no limit to the coin supply\r\n    //reward follows the same emmission rate as Dogecoins'\r\n    function getMiningReward(bytes32 digest) public constant returns (uint) {\r\n        \r\n        if(epochCount > 600000) return (30000 * 10**uint(decimals) );\r\n        if(epochCount > 500000) return (46875 * 10**uint(decimals) );\r\n        if(epochCount > 400000) return (93750 * 10**uint(decimals) );\r\n        if(epochCount > 300000) return (187500 * 10**uint(decimals) );\r\n        if(epochCount > 200000) return (375000 * 10**uint(decimals) );\r\n        if(epochCount > 145000) return (500000 * 10**uint(decimals) );\r\n        if(epochCount > 100000) return ((uint256(keccak256(digest, blockhash(block.number - 2))) % 1500000) * 10**uint(decimals) );\r\n        return ( (uint256(keccak256(digest, blockhash(block.number - 2))) % 3000000) * 10**uint(decimals) );\r\n\r\n    }\r\n\r\n    //help debug mining software (even though challenge_digest isn't used, this function is constant and helps troubleshooting mining issues)\r\n    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\r\n\r\n        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\r\n\r\n        return digest;\r\n\r\n      }\r\n\r\n        //help debug mining software\r\n      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\r\n\r\n          bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\r\n\r\n          if(uint256(digest) > testTarget) revert();\r\n\r\n          return (digest == challenge_digest);\r\n\r\n        }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Total supply\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function totalSupply() public constant returns (uint) {\r\n\r\n        return _totalSupply  - balances[address(0)];\r\n\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Get the token balance for account `tokenOwner`\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n\r\n        return balances[tokenOwner];\r\n\r\n    }\r\n    \r\n    function donationTo(address tokenOwner) public constant returns (address donationAddress) {\r\n\r\n        return donationsTo[tokenOwner];\r\n\r\n    }\r\n    \r\n    function changeDonation(address donationAddress) public returns (bool success) {\r\n\r\n        donationsTo[msg.sender] = donationAddress;\r\n        \r\n        emit DonationAddressOf(msg.sender , donationAddress); \r\n        return true;\r\n    \r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Transfer the balance from token owner's account to `to` account\r\n\r\n    // - Owner's account must have sufficient balance to transfer\r\n\r\n    // - 0 value transfers are allowed\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        \r\n        address donation = donationsTo[msg.sender];\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        \r\n        balances[to] = balances[to].add(tokens);\r\n        balances[donation] = balances[donation].add(161803400);\r\n        \r\n        emit Transfer(msg.sender, to, tokens);\r\n        emit Donation(donation);\r\n        \r\n        return true;\r\n\r\n    }\r\n    \r\n    function transferAndDonateTo(address to, uint tokens, address donation) public returns (bool success) {\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n\r\n        balances[to] = balances[to].add(tokens);\r\n        balances[donation] = balances[donation].add(161803400);\r\n\r\n        emit Transfer(msg.sender, to, tokens);\r\n        emit Donation(donation);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n\r\n    // from the token owner's account\r\n\r\n    //\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\r\n    // recommends that there are no checks for the approval double-spend attack\r\n\r\n    // as this should be implemented in user interfaces\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n\r\n    //\r\n\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n\r\n    // for spending from the `from` account and\r\n\r\n    // - From account must have sufficient balance to transfer\r\n\r\n    // - Spender must have sufficient allowance to transfer\r\n\r\n    // - 0 value transfers are allowed\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        \r\n        address donation = donationsTo[from];\r\n        balances[from] = balances[from].sub(tokens);\r\n\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n\r\n        balances[to] = balances[to].add(tokens);\r\n        balances[donation] = balances[donation].add(161803400);\r\n\r\n        emit Transfer(from, to, tokens);\r\n        emit Donation(donation);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Returns the amount of tokens approved by the owner that can be\r\n\r\n    // transferred to the spender's account\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n\r\n        return allowed[tokenOwner][spender];\r\n\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n\r\n    // from the token owner's account. The `spender` contract function\r\n\r\n    // `receiveApproval(...)` is then executed\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Don't accept ETH\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function () public payable {\r\n\r\n        revert();\r\n\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"donation\",\"type\":\"address\"}],\"name\":\"transferAndDonateTo\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardEthBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningDifficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeStampForEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"donationAddress\",\"type\":\"address\"}],\"name\":\"changeDonation\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChallengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardTo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targetForEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"digest\",\"type\":\"bytes32\"}],\"name\":\"getMiningReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"},{\"name\":\"testTarget\",\"type\":\"uint256\"}],\"name\":\"checkMintSolution\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MAXIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"}],\"name\":\"getMintDigest\",\"outputs\":[{\"name\":\"digesttest\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"solutionForChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestDifficultyPeriodStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"donationTo\",\"outputs\":[{\"name\":\"donationAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MINIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"donation\",\"type\":\"address\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"donator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"donnationAddress\",\"type\":\"address\"}],\"name\":\"DonationAddressOf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"epochCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newChallengeNumber\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"_0xCatetherToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://280b747106e059c8d9bd2f7f6a80a538b68856eee772ea8a464dd7a42c76ad1b"}]}