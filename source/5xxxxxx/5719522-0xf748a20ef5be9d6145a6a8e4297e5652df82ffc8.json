{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract DelegateProvider {\r\n    function getDelegate() public view returns (address delegate);\r\n}\r\n\r\ncontract DelegateProxy {\r\n  /**\r\n   * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\r\n   * @param _dst Destination address to perform the delegatecall\r\n   * @param _calldata Calldata for the delegatecall\r\n   */\r\n  function delegatedFwd(address _dst, bytes _calldata) internal {\r\n    assembly {\r\n      let result := delegatecall(sub(gas, 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\r\n      let size := returndatasize\r\n\r\n      let ptr := mload(0x40)\r\n      returndatacopy(ptr, 0, size)\r\n\r\n      // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\r\n      // if the call returned error data, forward it\r\n      switch result case 0 { revert(ptr, size) }\r\n      default { return(ptr, size) }\r\n    }\r\n  }\r\n}\r\n\r\ncontract Token {\r\n    function transfer(address _to, uint _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n}\r\n\r\ncontract WalletStorage {\r\n    address public owner;\r\n}\r\n\r\ncontract WalletProxy is WalletStorage, DelegateProxy {\r\n    event ReceivedETH(address from, uint256 amount);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function() public payable {\r\n        if (msg.value > 0) {\r\n            emit ReceivedETH(msg.sender, msg.value);\r\n        }\r\n        if (gasleft() > 2400) {\r\n            delegatedFwd(DelegateProvider(owner).getDelegate(), msg.data);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Wallet is WalletStorage {\r\n    function transferERC20Token(Token token, address to, uint256 amount) public returns (bool) {\r\n        require(msg.sender == owner);\r\n        return token.transfer(to, amount);\r\n    }\r\n    \r\n    function transferEther(address to, uint256 amount) public returns (bool) {\r\n        require(msg.sender == owner);\r\n        return to.call.value(amount)();\r\n    }\r\n\r\n    function() public payable {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Wallet","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cbe336eb29e8a46a8e0bc206f1bb761241137e7acfcc9f2b9a009ba92f233896"}]}