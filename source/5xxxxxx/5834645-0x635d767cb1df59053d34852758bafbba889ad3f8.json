{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * 4art ERC20 StandardToken\r\n * Author: scalify.it\r\n * */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event DelegatedTransfer(address indexed from, address indexed to, address indexed delegate, uint256 value, uint256 fee);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) public balances;\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract FourArt is StandardToken, Owned {\r\n    string public constant name = \"4ArtCoin\";\r\n    string public constant symbol = \"4Art\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public sellPrice = 0; // eth\r\n    uint256 public buyPrice = 0; // eth\r\n    mapping (address => bool) private SubFounders;       \r\n    mapping (address => bool) private TeamAdviserPartner;\r\n    \r\n    //FounderAddress1 is main founder\r\n    address private FounderAddress1;\r\n    address private FounderAddress2;\r\n    address private FounderAddress3;\r\n    address private FounderAddress4;\r\n    address private FounderAddress5;\r\n    address private teamAddress;\r\n    address private adviserAddress;\r\n    address private partnershipAddress;\r\n    address private bountyAddress;\r\n    address private affiliateAddress;\r\n    address private miscAddress;\r\n\r\n    function FourArt(\r\n        address _founderAddress1, \r\n        address _founderAddress2,\r\n        address _founderAddress3, \r\n        address _founderAddress4, \r\n        address _founderAddress5, \r\n        address _teamAddress, \r\n        address _adviserAddress, \r\n        address _partnershipAddress, \r\n        address _bountyAddress, \r\n        address _affiliateAddress,\r\n        address _miscAddress\r\n        )  {\r\n        totalSupply = 6500000000e18;\r\n        //assign initial tokens for sale to contracter\r\n        balances[msg.sender] = 4354000000e18;\r\n        FounderAddress1 = _founderAddress1;\r\n        FounderAddress2 = _founderAddress2;\r\n        FounderAddress3 = _founderAddress3;\r\n        FounderAddress4 = _founderAddress4;\r\n        FounderAddress5 = _founderAddress5;\r\n        teamAddress = _teamAddress;\r\n        adviserAddress =  _adviserAddress;\r\n        partnershipAddress = _partnershipAddress;\r\n        bountyAddress = _bountyAddress;\r\n        affiliateAddress = _affiliateAddress;\r\n        miscAddress =  _miscAddress;\r\n        \r\n        //Assign tokens to the addresses at contract deployment\r\n        balances[FounderAddress1] = 1390000000e18;\r\n        balances[FounderAddress2] = 27500000e18;\r\n        balances[FounderAddress3] = 27500000e18;\r\n        balances[FounderAddress4] = 27500000e18;\r\n        balances[FounderAddress5] = 27500000e18;\r\n        balances[teamAddress] = 39000000e18;\r\n        balances[adviserAddress] = 39000000e18;\r\n        balances[partnershipAddress] = 39000000e18;\r\n        balances[bountyAddress] = 65000000e18;\r\n        balances[affiliateAddress] = 364000000e18;\r\n        balances[miscAddress] = 100000000e18;\r\n\r\n        //checks for tokens transfer        \r\n        SubFounders[FounderAddress2] = true;        \r\n        SubFounders[FounderAddress3] = true;        \r\n        SubFounders[FounderAddress4] = true;        \r\n        SubFounders[FounderAddress5] = true;        \r\n        TeamAdviserPartner[teamAddress] = true;     \r\n        TeamAdviserPartner[adviserAddress] = true;  \r\n        TeamAdviserPartner[partnershipAddress] = true;\r\n    }\r\n\r\n    // Set buy and sell price of 1 token in eth.\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n    // @notice Buy tokens from contract by sending ether\r\n    function buy() payable public {\r\n        require(now > 1543536000); // seconds since 01.01.1970 to 30.11.2018 (18:00:00 o'clock GMT)\r\n        uint amount = msg.value.div(buyPrice);       // calculates the amount\r\n        _transfer(owner, msg.sender, amount);   // makes the transfers\r\n    }\r\n\r\n    // @notice Sell `amount` tokens to contract\r\n    function sell(uint256 amount) public {\r\n        require(now > 1543536000); // seconds since 01.01.1970 to 30.11.2018 (18:00:00 o'clock GMT) \r\n        require(amount > 0);\r\n        require(balances[msg.sender] >= amount);\r\n        uint256 requiredBalance = amount.mul(sellPrice);\r\n        require(this.balance >= requiredBalance);  // checks if the contract has enough ether to pay\r\n        balances[msg.sender] -= amount;\r\n        balances[owner] += amount;\r\n        Transfer(msg.sender, owner, amount); \r\n        msg.sender.transfer(requiredBalance);    // sends ether to the seller.\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balances[_from] >= _value);\r\n        // Check for overflows\r\n        require(balances[_to] + _value > balances[_to]);\r\n        // Subtract from the sender\r\n        balances[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balances[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    // @dev if owner wants to transfer contract ether balance to own account.\r\n    function transferBalanceToOwner(uint256 _value) public onlyOwner {\r\n        require(_value <= this.balance);\r\n        owner.transfer(_value);\r\n    }\r\n    \r\n    // @dev if someone wants to transfer tokens to other account.\r\n    function transferTokens(address _to, uint256 _tokens) lockTokenTransferBeforeStage4 TeamTransferConditions(_tokens, msg.sender)   public {\r\n        _transfer(msg.sender, _to, _tokens);\r\n    }\r\n    \r\n    // @dev Transfer tokens from one address to another\r\n    function transferFrom(address _from, address _to, uint256 _value) lockTokenTransferBeforeStage4 TeamTransferConditions(_value, _from)  public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    modifier lockTokenTransferBeforeStage4{\r\n        if(msg.sender != owner){\r\n           require(now > 1533513600); // Locking till stage 4 starting date (ICO).\r\n        }\r\n        _;\r\n    }\r\n    \r\n    modifier TeamTransferConditions(uint256 _tokens,  address _address) {\r\n        if(SubFounders[_address]){\r\n            require(now > 1543536000);\r\n            if(now > 1543536000 && now < 1569628800){\r\n                //90% lock of total 27500000e18\r\n                isLocked(_tokens, 24750000e18, _address);\r\n            } \r\n            if(now > 1569628800 && now < 1601251200){\r\n               //50% lock of total 27500000e18\r\n               isLocked(_tokens, 13750000e18, _address);\r\n            }\r\n        }\r\n        \r\n        if(TeamAdviserPartner[_address]){\r\n            require(now > 1543536000);\r\n            if(now > 1543536000 && now < 1569628800){\r\n                //85% lock of total 39000000e18\r\n                isLocked(_tokens, 33150000e18, _address);\r\n            } \r\n            if(now > 1569628800 && now < 1601251200){\r\n               //60% lock of total 39000000e18\r\n               isLocked(_tokens, 23400000e18, _address);\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    // @dev if someone wants to transfer tokens to other account.    \r\n    function isLocked(uint256 _value,uint256 remainingTokens, address _address)  internal returns (bool) {\r\n            uint256 remainingBalance = balances[_address].sub(_value);\r\n            require(remainingBalance >= remainingTokens);\r\n            return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferBalanceToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_founderAddress1\",\"type\":\"address\"},{\"name\":\"_founderAddress2\",\"type\":\"address\"},{\"name\":\"_founderAddress3\",\"type\":\"address\"},{\"name\":\"_founderAddress4\",\"type\":\"address\"},{\"name\":\"_founderAddress5\",\"type\":\"address\"},{\"name\":\"_teamAddress\",\"type\":\"address\"},{\"name\":\"_adviserAddress\",\"type\":\"address\"},{\"name\":\"_partnershipAddress\",\"type\":\"address\"},{\"name\":\"_bountyAddress\",\"type\":\"address\"},{\"name\":\"_affiliateAddress\",\"type\":\"address\"},{\"name\":\"_miscAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"DelegatedTransfer\",\"type\":\"event\"}]","ContractName":"FourArt","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c2e9248160ee2f77d69611fa45a36f941eafc1ca000000000000000000000000b6790202dad8f3750e93e74ca040330705fe2987000000000000000000000000f34e425ac144e50bdfcc6e54b64064ab05c94ef2000000000000000000000000ee1be8a57051c392d2d1f587545376ba65547f22000000000000000000000000a2088f0bd7650a32a807934605ea17453f8091fb00000000000000000000000040e2a66571a06a8d6e8dbab4d1209d14427573c00000000000000000000000009d498c1b1bf16e5de040591d6011dcd48d080e38000000000000000000000000d3cfc8961a38bd5d4f8ad0659543e95e8275a94d0000000000000000000000001012fb3640e8e8224c1475414c4bf855407a4767000000000000000000000000504b7573db9dee062c7e091c1e51380a85aa70550000000000000000000000001449b742a1deadcdd975a8d63cc576c9c2b5007d","Library":"","SwarmSource":"bzzr://40b5737822426c49c489a687a10a1e958998f3a0bd89411c4a71f26caaec6e94"}]}