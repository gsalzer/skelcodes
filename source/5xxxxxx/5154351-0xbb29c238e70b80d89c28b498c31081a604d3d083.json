{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract WEE is ERC20,Ownable{\r\n\tusing SafeMath for uint256;\r\n\r\n\t//the base info of the token\r\n\tstring public constant name=\"WITEE TOKEN\";\r\n\tstring public constant symbol=\"WEE\";\r\n\tstring public constant version = \"1.0\";\r\n\tuint256 public constant decimals = 18;\r\n\r\n\r\n\tuint256 public constant PARTNER_SUPPLY=270000000*10**decimals;\r\n\r\n\tuint256 public constant MAX_PRIVATE_FUNDING_SUPPLY=648000000*10**decimals;\r\n\r\n\tuint256 public constant COOPERATE_REWARD=270000000*10**decimals;\r\n\r\n\tuint256 public constant ADVISOR_REWARD=90000000*10**decimals;\r\n\r\n\tuint256 public constant COMMON_WITHDRAW_SUPPLY=PARTNER_SUPPLY+MAX_PRIVATE_FUNDING_SUPPLY+COOPERATE_REWARD+ADVISOR_REWARD;\r\n\r\n\tuint256 public constant MAX_PUBLIC_FUNDING_SUPPLY=180000000*10**decimals;\r\n\r\n\tuint256 public constant TEAM_KEEPING=342000000*10**decimals;\r\n\r\n\tuint256 public constant MAX_SUPPLY=COMMON_WITHDRAW_SUPPLY+MAX_PUBLIC_FUNDING_SUPPLY+TEAM_KEEPING;\r\n\r\n\r\n\tuint256 public rate;\r\n\r\n\tmapping(address=>uint256) public publicFundingWhiteList;\r\n\tmapping(address=>uint256) public  userPublicFundingEthCountMap;\r\n\t\r\n\tuint256 public publicFundingPersonalEthLimit;\r\n\r\n\r\n\tuint256 public totalCommonWithdrawSupply;\r\n\r\n\tuint256 public totalPublicFundingSupply;\r\n\r\n\tbool public hasTeamKeepingWithdraw;\r\n\r\n\tuint256 public startTime;\r\n\tuint256 public endTime;\r\n\t\r\n    struct epoch  {\r\n        uint256 lockEndTime;\r\n        uint256 lockAmount;\r\n    }\r\n\r\n    mapping(address=>epoch[]) public lockEpochsMap;\r\n\t \r\n    mapping(address => uint256) balances;\r\n\tmapping (address => mapping (address => uint256)) allowed;\r\n\t\r\n\r\n\tfunction WEE(){\r\n\t\ttotalSupply = 0 ;\r\n\t\ttotalCommonWithdrawSupply=0;\r\n\t\ttotalPublicFundingSupply = 0;\r\n\t\thasTeamKeepingWithdraw=false;\r\n\r\n\t\tstartTime = 1525104000;\r\n\t\tendTime = 1525104000;\r\n\t\trate=18300;\r\n\t\tpublicFundingPersonalEthLimit = 10000000000000000000;\r\n\t}\r\n\r\n\tevent CreateWEE(address indexed _to, uint256 _value);\r\n\r\n\r\n\tmodifier notReachTotalSupply(uint256 _value,uint256 _rate){\r\n\t\tassert(MAX_SUPPLY>=totalSupply.add(_value.mul(_rate)));\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier notReachPublicFundingSupply(uint256 _value,uint256 _rate){\r\n\t\tassert(MAX_PUBLIC_FUNDING_SUPPLY>=totalPublicFundingSupply.add(_value.mul(_rate)));\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier notReachCommonWithdrawSupply(uint256 _value,uint256 _rate){\r\n\t\tassert(COMMON_WITHDRAW_SUPPLY>=totalCommonWithdrawSupply.add(_value.mul(_rate)));\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier assertFalse(bool withdrawStatus){\r\n\t\tassert(!withdrawStatus);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier notBeforeTime(uint256 targetTime){\r\n\t\tassert(now>targetTime);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier notAfterTime(uint256 targetTime){\r\n\t\tassert(now<=targetTime);\r\n\t\t_;\r\n\t}\r\n\tfunction etherProceeds() external\r\n\t\tonlyOwner\r\n\r\n\t{\r\n\t\tif(!msg.sender.send(this.balance)) revert();\r\n\t}\r\n\r\n\r\n\tfunction processFunding(address receiver,uint256 _value,uint256 _rate) internal\r\n\t\tnotReachTotalSupply(_value,_rate)\r\n\t{\r\n\t\tuint256 amount=_value.mul(_rate);\r\n\t\ttotalSupply=totalSupply.add(amount);\r\n\t\tbalances[receiver] +=amount;\r\n\t\tCreateWEE(receiver,amount);\r\n\t\tTransfer(0x0, receiver, amount);\r\n\t}\r\n\r\n\r\n\r\n\tfunction commonWithdraw(uint256 _value) external\r\n\t\tonlyOwner\r\n\t\tnotReachCommonWithdrawSupply(_value,1)\r\n\r\n\t{\r\n\t\tprocessFunding(msg.sender,_value,1);\r\n\t\ttotalCommonWithdrawSupply=totalCommonWithdrawSupply.add(_value);\r\n\t}\r\n\r\n\r\n\tfunction withdrawToTeam() external\r\n\t\tonlyOwner\r\n\t\tassertFalse(hasTeamKeepingWithdraw)\r\n\t\tnotBeforeTime(1545753600)\r\n\t{\r\n\t\tprocessFunding(msg.sender,TEAM_KEEPING,1);\r\n\t\thasTeamKeepingWithdraw = true;\r\n\t}\r\n\r\n\r\n\r\n\tfunction () payable external\r\n\t\tnotBeforeTime(startTime)\r\n\t\tnotAfterTime(endTime)\r\n\t\tnotReachPublicFundingSupply(msg.value,rate)\r\n\t{\r\n\t\trequire(publicFundingWhiteList[msg.sender]==1);\r\n\r\n\t\trequire(userPublicFundingEthCountMap[msg.sender].add(msg.value)<=publicFundingPersonalEthLimit);\r\n\r\n\t\tprocessFunding(msg.sender,msg.value,rate);\r\n\t\tuint256 amount=msg.value.mul(rate);\r\n\t\ttotalPublicFundingSupply = totalPublicFundingSupply.add(amount);\r\n\r\n\t\tuserPublicFundingEthCountMap[msg.sender] = userPublicFundingEthCountMap[msg.sender].add(msg.value);\r\n\t}\r\n\r\n\r\n\r\n  \tfunction transfer(address _to, uint256 _value) public  returns (bool)\r\n \t{\r\n\t\trequire(_to != address(0));\r\n\r\n\t\t//计算锁仓份额\r\n\t\tepoch[] epochs = lockEpochsMap[msg.sender];\r\n\t\tuint256 needLockBalance = 0;\r\n\t\tfor(uint256 i;i<epochs.length;i++)\r\n\t\t{\r\n\t\t\tif( now < epochs[i].lockEndTime )\r\n\t\t\t{\r\n\t\t\t\tneedLockBalance=needLockBalance.add(epochs[i].lockAmount);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trequire(balances[msg.sender].sub(_value)>=needLockBalance);\r\n\r\n\t\t// SafeMath.sub will throw if there is not enough balance.\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n  \t}\r\n\r\n  \tfunction balanceOf(address _owner) public constant returns (uint256 balance) \r\n  \t{\r\n\t\treturn balances[_owner];\r\n  \t}\r\n\r\n\r\n  \tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) \r\n  \t{\r\n\t\trequire(_to != address(0));\r\n\r\n\t\tepoch[] epochs = lockEpochsMap[_from];\r\n\t\tuint256 needLockBalance = 0;\r\n\t\tfor(uint256 i;i<epochs.length;i++)\r\n\t\t{\r\n\t\t\tif( now < epochs[i].lockEndTime )\r\n\t\t\t{\r\n\t\t\t\tneedLockBalance = needLockBalance.add(epochs[i].lockAmount);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trequire(balances[_from].sub(_value)>=needLockBalance);\r\n\r\n\t\tuint256 _allowance = allowed[_from][msg.sender];\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n  \t}\r\n\r\n  \tfunction approve(address _spender, uint256 _value) public returns (bool) \r\n  \t{\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n  \t}\r\n\r\n  \tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \r\n  \t{\r\n\t\treturn allowed[_owner][_spender];\r\n  \t}\r\n\r\n\tfunction lockBalance(address user, uint256 lockAmount,uint256 lockEndTime) external\r\n\t\tonlyOwner\r\n\t{\r\n\t\t epoch[] storage epochs = lockEpochsMap[user];\r\n\t\t epochs.push(epoch(lockEndTime,lockAmount));\r\n\t}\r\n\r\n    function addPublicFundingWhiteList(address[] _list) external\r\n    \tonlyOwner\r\n    {\r\n        uint256 count = _list.length;\r\n        for (uint256 i = 0; i < count; i++) {\r\n        \tpublicFundingWhiteList[_list [i]] = 1;\r\n        }    \t\r\n    }\r\n\r\n\tfunction refreshRate(uint256 _rate) external\r\n\t\tonlyOwner\r\n\t{\r\n\t\trate=_rate;\r\n\t}\r\n\t\r\n    function refreshPublicFundingTime(uint256 _startTime,uint256 _endTime) external\r\n        onlyOwner\r\n    {\r\n\t\tstartTime=_startTime;\r\n\t\tendTime=_endTime;\r\n    }\r\n\r\n    function refreshPublicFundingPersonalEthLimit (uint256 _publicFundingPersonalEthLimit)  external\r\n    \tonlyOwner\r\n    {\r\n    \tpublicFundingPersonalEthLimit=_publicFundingPersonalEthLimit;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPublicFundingEthCountMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"refreshRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicFundingPersonalEthLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_KEEPING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasTeamKeepingWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPublicFundingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"refreshPublicFundingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PRIVATE_FUNDING_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_publicFundingPersonalEthLimit\",\"type\":\"uint256\"}],\"name\":\"refreshPublicFundingPersonalEthLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COOPERATE_REWARD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockEpochsMap\",\"outputs\":[{\"name\":\"lockEndTime\",\"type\":\"uint256\"},{\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"etherProceeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"commonWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"name\":\"lockEndTime\",\"type\":\"uint256\"}],\"name\":\"lockBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PUBLIC_FUNDING_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"addPublicFundingWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADVISOR_REWARD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMON_WITHDRAW_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PARTNER_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"publicFundingWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCommonWithdrawSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawToTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateWEE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"WEE","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://046433067c3d799899074e7bb3de16ead95dd769bd5b366edbb9d5c4f9d49ffd"}]}