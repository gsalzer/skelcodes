{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Eliptic curve signature operations\r\n *\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n */\r\n\r\nlibrary ECRecovery {\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using his signature\r\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 hash, bytes sig) public pure returns (address) {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    //Check the signature length\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/// @title Unidirectional Ether payment channels contract.\r\ncontract Unidirectional {\r\n    using SafeMath for uint256;\r\n\r\n    struct PaymentChannel {\r\n        address sender;\r\n        address receiver;\r\n        uint256 value; // Total amount of money deposited to the channel.\r\n\r\n        uint32 settlingPeriod; // How many blocks to wait for the receiver to claim her funds, after sender starts settling.\r\n        uint256 settlingUntil; // Starting with this block number, anyone can settle the channel.\r\n    }\r\n\r\n    mapping (bytes32 => PaymentChannel) public channels;\r\n\r\n    event DidOpen(bytes32 indexed channelId, address indexed sender, address indexed receiver, uint256 value);\r\n    event DidDeposit(bytes32 indexed channelId, uint256 deposit);\r\n    event DidClaim(bytes32 indexed channelId);\r\n    event DidStartSettling(bytes32 indexed channelId);\r\n    event DidSettle(bytes32 indexed channelId);\r\n\r\n    /*** ACTIONS AND CONSTRAINTS ***/\r\n\r\n    /// @notice Open a new channel between `msg.sender` and `receiver`, and do an initial deposit to the channel.\r\n    /// @param channelId Unique identifier of the channel to be created.\r\n    /// @param receiver Receiver of the funds, counter-party of `msg.sender`.\r\n    /// @param settlingPeriod Number of blocks to wait for receiver to `claim` her funds after the sender starts settling period (see `startSettling`).\r\n    /// After that period is over anyone could call `settle`, and move all the channel funds to the sender.\r\n    function open(bytes32 channelId, address receiver, uint32 settlingPeriod) public payable {\r\n        require(isAbsent(channelId));\r\n\r\n        channels[channelId] = PaymentChannel({\r\n            sender: msg.sender,\r\n            receiver: receiver,\r\n            value: msg.value,\r\n            settlingPeriod: settlingPeriod,\r\n            settlingUntil: 0\r\n        });\r\n\r\n        DidOpen(channelId, msg.sender, receiver, msg.value);\r\n    }\r\n\r\n    /// @notice Ensure `origin` address can deposit money into the channel identified by `channelId`.\r\n    /// @dev Constraint `deposit` call.\r\n    /// @param channelId Identifier of the channel.\r\n    /// @param origin Caller of `deposit` function.\r\n    function canDeposit(bytes32 channelId, address origin) public view returns(bool) {\r\n        PaymentChannel memory channel = channels[channelId];\r\n        bool isSender = channel.sender == origin;\r\n        return isOpen(channelId) && isSender;\r\n    }\r\n\r\n    /// @notice Add more money to the contract.\r\n    /// @param channelId Identifier of the channel.\r\n    function deposit(bytes32 channelId) public payable {\r\n        require(canDeposit(channelId, msg.sender));\r\n\r\n        channels[channelId].value += msg.value;\r\n\r\n        DidDeposit(channelId, msg.value);\r\n    }\r\n\r\n    /// @notice Ensure `origin` address can start settling the channel identified by `channelId`.\r\n    /// @dev Constraint `startSettling` call.\r\n    /// @param channelId Identifier of the channel.\r\n    /// @param origin Caller of `startSettling` function.\r\n    function canStartSettling(bytes32 channelId, address origin) public view returns(bool) {\r\n        PaymentChannel memory channel = channels[channelId];\r\n        bool isSender = channel.sender == origin;\r\n        return isOpen(channelId) && isSender;\r\n    }\r\n\r\n    /// @notice Sender initiates settling of the contract.\r\n    /// @dev Actually set `settlingUntil` field of the PaymentChannel structure.\r\n    /// @param channelId Identifier of the channel.\r\n    function startSettling(bytes32 channelId) public {\r\n        require(canStartSettling(channelId, msg.sender));\r\n\r\n        PaymentChannel storage channel = channels[channelId];\r\n        channel.settlingUntil = block.number + channel.settlingPeriod;\r\n\r\n        DidStartSettling(channelId);\r\n    }\r\n\r\n    /// @notice Ensure one can settle the channel identified by `channelId`.\r\n    /// @dev Check if settling period is over by comparing `settlingUntil` to a current block number.\r\n    /// @param channelId Identifier of the channel.\r\n    function canSettle(bytes32 channelId) public view returns(bool) {\r\n        PaymentChannel memory channel = channels[channelId];\r\n        bool isWaitingOver = isSettling(channelId) && block.number >= channel.settlingUntil;\r\n        return isSettling(channelId) && isWaitingOver;\r\n    }\r\n\r\n    /// @notice Move the money to sender, and close the channel.\r\n    /// After the settling period is over, and receiver has not claimed the funds, anyone could call that.\r\n    /// @param channelId Identifier of the channel.\r\n    function settle(bytes32 channelId) public {\r\n        require(canSettle(channelId));\r\n        PaymentChannel storage channel = channels[channelId];\r\n        channel.sender.transfer(channel.value);\r\n\r\n        delete channels[channelId];\r\n        DidSettle(channelId);\r\n    }\r\n\r\n    /// @notice Ensure `origin` address can claim `payment` amount on channel identified by `channelId`.\r\n    /// @dev Check if `signature` is made by sender part of the channel, and is for payment promise (see `paymentDigest`).\r\n    /// @param channelId Identifier of the channel.\r\n    /// @param payment Amount claimed.\r\n    /// @param origin Caller of `claim` function.\r\n    /// @param signature Signature for the payment promise.\r\n    function canClaim(bytes32 channelId, uint256 payment, address origin, bytes signature) public view returns(bool) {\r\n        PaymentChannel memory channel = channels[channelId];\r\n        bool isReceiver = origin == channel.receiver;\r\n        bytes32 hash = recoveryPaymentDigest(channelId, payment);\r\n        bool isSigned = channel.sender == ECRecovery.recover(hash, signature);\r\n\r\n        return isReceiver && isSigned;\r\n    }\r\n\r\n    /// @notice Claim the funds, and close the channel.\r\n    /// @dev Can be claimed by channel receiver only. Guarded by `canClaim`.\r\n    /// @param channelId Identifier of the channel.\r\n    /// @param payment Amount claimed.\r\n    /// @param signature Signature for the payment promise.\r\n    function claim(bytes32 channelId, uint256 payment, bytes signature) public {\r\n        require(canClaim(channelId, payment, msg.sender, signature));\r\n\r\n        PaymentChannel memory channel = channels[channelId];\r\n\r\n        if (payment >= channel.value) {\r\n            channel.receiver.transfer(channel.value);\r\n        } else {\r\n            channel.receiver.transfer(payment);\r\n            channel.sender.transfer(channel.value.sub(payment));\r\n        }\r\n\r\n        delete channels[channelId];\r\n\r\n        DidClaim(channelId);\r\n    }\r\n\r\n    /*** CHANNEL STATE ***/\r\n\r\n    /// @notice Check if the channel is present: in open or settling state.\r\n    /// @param channelId Identifier of the channel.\r\n    function isPresent(bytes32 channelId) public view returns(bool) {\r\n        return !isAbsent(channelId);\r\n    }\r\n\r\n    /// @notice Check if the channel is not present.\r\n    /// @param channelId Identifier of the channel.\r\n    function isAbsent(bytes32 channelId) public view returns(bool) {\r\n        PaymentChannel memory channel = channels[channelId];\r\n        return channel.sender == 0;\r\n    }\r\n\r\n    /// @notice Check if the channel is in settling state: waits till the settling period is over.\r\n    /// @dev It is settling, if `settlingUntil` is set to non-zero.\r\n    /// @param channelId Identifier of the channel.\r\n    function isSettling(bytes32 channelId) public view returns(bool) {\r\n        PaymentChannel memory channel = channels[channelId];\r\n        return channel.settlingUntil != 0;\r\n    }\r\n\r\n    /// @notice Check if the channel is open: present and not settling.\r\n    /// @param channelId Identifier of the channel.\r\n    function isOpen(bytes32 channelId) public view returns(bool) {\r\n        return isPresent(channelId) && !isSettling(channelId);\r\n    }\r\n\r\n    /*** PAYMENT DIGEST ***/\r\n\r\n    /// @return Hash of the payment promise to sign.\r\n    /// @param channelId Identifier of the channel.\r\n    /// @param payment Amount to send, and to claim later.\r\n    function paymentDigest(bytes32 channelId, uint256 payment) public view returns(bytes32) {\r\n        return keccak256(address(this), channelId, payment);\r\n    }\r\n\r\n    /// @return Actually signed hash of the payment promise, considering \"Ethereum Signed Message\" prefix.\r\n    /// @param channelId Identifier of the channel.\r\n    /// @param payment Amount to send, and to claim later.\r\n    function recoveryPaymentDigest(bytes32 channelId, uint256 payment) internal view returns(bytes32) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        return keccak256(prefix, paymentDigest(channelId, payment));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"isPresent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"},{\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"canDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"},{\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"paymentDigest\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"},{\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"canStartSettling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"isAbsent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"isSettling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"},{\"name\":\"payment\",\"type\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"channels\",\"outputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"settlingPeriod\",\"type\":\"uint32\"},{\"name\":\"settlingUntil\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"settle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"canSettle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"settlingPeriod\",\"type\":\"uint32\"}],\"name\":\"open\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"startSettling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"},{\"name\":\"payment\",\"type\":\"uint256\"},{\"name\":\"origin\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"canClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DidOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"DidDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"DidClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"DidStartSettling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"DidSettle\",\"type\":\"event\"}]","ContractName":"Unidirectional","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"ECRecovery:be7c52c9f88af54f3b29cd472c71a03c7863d1eb","SwarmSource":"bzzr://54107390e3abdedc00b3ae8b66039c130a5995a3ce03c1875e71bb0084435c46"}]}