{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n  \r\n // ----------------------------------------------------------------------------------------------\r\n // ERC20 token contract\r\n // BlockchainMX / NewCryptoOrder 2018.\r\n // ----------------------------------------------------------------------------------------------\r\n  \r\n // ERC Token Standard #20 Interface\r\n // https://github.com/ethereum/EIPs/issues/20\r\n contract ERC20Interface {\r\n     // Get the total token supply\r\n     function totalSupply() constant returns (uint256 totalSupply);\r\n  \r\n     // Get the account balance of another account with address _owner\r\n     function balanceOf(address _owner) constant returns (uint256 balance);\r\n  \r\n     // Send _value amount of tokens to address _to\r\n     function transfer(address _to, uint256 _value) returns (bool success);\r\n  \r\n     // Send _value amount of tokens from address _from to address _to\r\n     function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n  \r\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     // this function is required for some DEX functionality\r\n     function approve(address _spender, uint256 _value) returns (bool success);\r\n  \r\n     // Returns the amount which _spender is still allowed to withdraw from _owner\r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n  \r\n     // Triggered when tokens are transferred.\r\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  \r\n     // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n }\r\n  \r\n contract PryvCn is ERC20Interface {\r\n     string public constant symbol = \"PRYV\";\r\n     string public constant name = \"pryvateCoin\";\r\n     uint8 public constant decimals = 18;\r\n     uint256 _totalSupply = 200000000000000000000000000;\r\n    //price code here\r\n    uint256 public constant unitsOneEthCanBuy = 833333; \r\n    uint256 public totalEthInWei;         // WEI is the smallest unit of ETH (the equivalent of cent in USD or satoshi in BTC). We'll store the total ETH raised via our ICO here.  \r\n    //address public fundsWallet; \r\n    //price code here\r\n\r\n     // Owner of this contract\r\n     address public owner;\r\n  \r\n     // Balances for each account\r\n     mapping(address => uint256) balances;\r\n  \r\n     // Owner of account approves the transfer of an amount to another account\r\n     mapping(address => mapping (address => uint256)) allowed;\r\n  \r\n\r\n     // Functions with this modifier can only be executed by the owner\r\n     modifier onlyOwner() {\r\n         if (msg.sender != owner) {\r\n             throw;\r\n         }\r\n         _;\r\n     }\r\n  \r\n     // Constructor\r\n     function PryvCn() {\r\n         owner = msg.sender;\r\n         balances[owner] = _totalSupply;\r\n     }\r\n  \r\n     function totalSupply() constant returns (uint256 totalSupply) {\r\n         totalSupply = _totalSupply;\r\n     }\r\n  \r\n     // What is the balance of a particular account?\r\n     function balanceOf(address _owner) constant returns (uint256 balance) {\r\n         return balances[_owner];\r\n     }\r\n\r\n\r\n\r\n    //payment code here\r\n    function() payable{\r\n        totalEthInWei = totalEthInWei + msg.value;\r\n        uint256 amount = msg.value * unitsOneEthCanBuy;\r\n        if (balances[owner] < amount) {\r\n            return;\r\n        }\r\n\r\n        balances[owner] = balances[owner] - amount;\r\n        balances[msg.sender] = balances[msg.sender] + amount;\r\n\r\n        Transfer(owner, msg.sender, amount); // Broadcast a message to the blockchain\r\n\r\n        //Transfer ether to fundsWallet (owner)\r\n        owner.transfer(msg.value);                               \r\n    }\r\n    //payment code here\r\n\r\n\r\n\r\n\r\n     // Transfer the balance from owner's account to another account\r\n     function transfer(address _to, uint256 _amount) returns (bool success) {\r\n         if (balances[msg.sender] >= _amount \r\n             && _amount > 0\r\n             && balances[_to] + _amount > balances[_to]) {\r\n             balances[msg.sender] -= _amount;\r\n             balances[_to] += _amount;\r\n             Transfer(msg.sender, _to, _amount);\r\n             return true;\r\n         } else {\r\n             return false;\r\n         }\r\n     }\r\n  \r\n     // Send _value amount of tokens from address _from to address _to\r\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n     // fees in sub-currencies; the command should fail unless the _from account has\r\n     // deliberately authorized the sender of the message via some mechanism; we propose\r\n     // these standardized APIs for approval:\r\n     function transferFrom(\r\n         address _from,\r\n         address _to,\r\n         uint256 _amount\r\n     ) returns (bool success) {\r\n         if (balances[_from] >= _amount\r\n             && allowed[_from][msg.sender] >= _amount\r\n             && _amount > 0\r\n             && balances[_to] + _amount > balances[_to]) {\r\n             balances[_from] -= _amount;\r\n             allowed[_from][msg.sender] -= _amount;\r\n             balances[_to] += _amount;\r\n             Transfer(_from, _to, _amount);\r\n             return true;\r\n         } else {\r\n             return false;\r\n         }\r\n     }\r\n  \r\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     function approve(address _spender, uint256 _amount) returns (bool success) {\r\n         allowed[msg.sender][_spender] = _amount;\r\n         Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n  \r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n         return allowed[_owner][_spender];\r\n     }\r\n }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitsOneEthCanBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PryvCn","CompilerVersion":"v0.4.20-nightly.2017.12.20+commit.efc198d5","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5adee82b8c5f5fc383603c078607cb79f125334e62ea47db4c6df7443ae5b976"}]}