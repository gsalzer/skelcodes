{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/Certification.sol\r\n\r\ncontract Certification  {\r\n\r\n  /**\r\n    * Address of certifier contract this certificate belongs to.\r\n    */\r\n  address public certifierAddress;\r\n\r\n  string public CompanyName;\r\n  string public Norm;\r\n  string public CertID;\r\n  string public issued;\r\n  string public expires;\r\n  string public Scope;\r\n  string public issuingBody;\r\n\r\n  /**\r\n    * Constructor.\r\n    *\r\n    * @param _CompanyName Name of company name the certificate is issued to.\r\n    * @param _Norm The norm.\r\n    * @param _CertID Unique identifier of the certificate.\r\n    * @param _issued Timestamp (Unix epoch) when the certificate was issued.\r\n    * @param _expires Timestamp (Unix epoch) when the certificate will expire.\r\n    * @param _Scope The scope of the certificate.\r\n    * @param _issuingBody The issuer of the certificate.\r\n    */\r\n  function Certification(string _CompanyName,\r\n      string _Norm,\r\n      string _CertID,\r\n      string _issued,\r\n      string _expires,\r\n      string _Scope,\r\n      string _issuingBody) public {\r\n\r\n      certifierAddress = msg.sender;\r\n\r\n      CompanyName = _CompanyName;\r\n      Norm =_Norm;\r\n      CertID = _CertID;\r\n      issued = _issued;\r\n      expires = _expires;\r\n      Scope = _Scope;\r\n      issuingBody = _issuingBody;\r\n  }\r\n\r\n  /**\r\n    * Extinguish this certificate.\r\n    *\r\n    * This can be done the same certifier contract which has created\r\n    * the certificate in the first place only.\r\n    */\r\n  function deleteCertificate() public {\r\n      require(msg.sender == certifierAddress);\r\n      selfdestruct(tx.origin);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Certifier.sol\r\n\r\n/**\r\n  * @title   Certification Contract\r\n  * @author  Chainstep GmbH\r\n  *\r\n  * This contract represents the singleton certificate registry.\r\n  */\r\ncontract Certifier {\r\n\r\n    /** @dev Dictionary of all Certificate Contracts issued by the Certifier.\r\n             Stores the Certification key derived from the sha(CertID) and stores the\r\n             address where the coresponding Certificate is stored. */\r\n    mapping (bytes32 => address) public CertificateAddresses;\r\n\r\n    /** @dev Dictionary that stores which addresses are owned by Certification administrators */\r\n    mapping (address => bool) public CertAdmins;\r\n\r\n    /** @dev stores the address of the Global Administrator*/\r\n    address public GlobalAdmin;\r\n\r\n    event CertificationSet(string _certID, address _certAdrress, uint setTime);\r\n    event CertificationDeleted(string _certID, address _certAdrress, uint delTime);\r\n    event CertAdminAdded(address _certAdmin);\r\n    event CertAdminDeleted(address _certAdmin);\r\n    event GlobalAdminChanged(address _globalAdmin);\r\n\r\n\r\n\r\n    /**\r\n      * Constructor.\r\n      *\r\n      * The creator of this contract becomes the global administrator.\r\n      */\r\n    function Certifier() public {\r\n        GlobalAdmin = msg.sender;\r\n    }\r\n\r\n    // Functions\r\n\r\n    /**\r\n      * Create a new certificate contract.\r\n      * This can be done by an certificate administrator only.\r\n      *\r\n      * @param _CompanyName Name of company name the certificate is issued to.\r\n      * @param _Norm The norm.\r\n      * @param _CertID Unique identifier of the certificate.\r\n      * @param _issued Timestamp (Unix epoch) when the certificate was issued.\r\n      * @param _expires Timestamp (Unix epoch) when the certificate will expire.\r\n      * @param _Scope The scope of the certificate.\r\n      * @param _issuingBody The issuer of the certificate.\r\n      */\r\n    function setCertificate(string _CompanyName,\r\n                            string _Norm,\r\n                            string _CertID,\r\n                            string _issued,\r\n                            string _expires,\r\n                            string _Scope,\r\n                            string _issuingBody) public onlyCertAdmin {\r\n        bytes32 certKey = getCertKey(_CertID);\r\n\r\n        CertificateAddresses[certKey] = new Certification(_CompanyName,\r\n                                                               _Norm,\r\n                                                               _CertID,\r\n                                                               _issued,\r\n                                                               _expires,\r\n                                                               _Scope,\r\n                                                               _issuingBody);\r\n        CertificationSet(_CertID, CertificateAddresses[certKey], now);\r\n    }\r\n\r\n    /**\r\n      * Delete an exisiting certificate.\r\n      *\r\n      * This can be done by an certificate administrator only.\r\n      *\r\n      * @param _CertID Unique identifier of the certificate to delete.\r\n      */\r\n    function delCertificate(string _CertID) public onlyCertAdmin {\r\n        bytes32 certKey = getCertKey(_CertID);\r\n\r\n        Certification(CertificateAddresses[certKey]).deleteCertificate();\r\n        CertificationDeleted(_CertID, CertificateAddresses[certKey], now);\r\n        delete CertificateAddresses[certKey];\r\n    }\r\n\r\n    /**\r\n      * Register a certificate administrator.\r\n      *\r\n      * This can be done by the global administrator only.\r\n      *\r\n      * @param _CertAdmin Address of certificate administrator to be added.\r\n      */\r\n    function addCertAdmin(address _CertAdmin) public onlyGlobalAdmin {\r\n        CertAdmins[_CertAdmin] = true;\r\n        CertAdminAdded(_CertAdmin);\r\n    }\r\n\r\n    /**\r\n      * Delete a certificate administrator.\r\n      *\r\n      * This can be done by the global administrator only.\r\n      *\r\n      * @param _CertAdmin Address of certificate administrator to be removed.\r\n      */\r\n    function delCertAdmin(address _CertAdmin) public onlyGlobalAdmin {\r\n        delete CertAdmins[_CertAdmin];\r\n        CertAdminDeleted(_CertAdmin);\r\n    }\r\n    /**\r\n      * Change the address of the global administrator.\r\n      *\r\n      * This can be done by the global administrator only.\r\n      *\r\n      * @param _GlobalAdmin Address of new global administrator to be set.\r\n      */\r\n    function changeGlobalAdmin(address _GlobalAdmin) public onlyGlobalAdmin {\r\n        GlobalAdmin=_GlobalAdmin;\r\n        GlobalAdminChanged(_GlobalAdmin);\r\n\r\n    }\r\n\r\n    // Constant Functions\r\n\r\n    /**\r\n      * Determines the address of a certificate contract.\r\n      *\r\n      * @param _CertID Unique certificate identifier.\r\n      * @return Address of certification contract.\r\n      */\r\n    function getCertAddressByID(string _CertID) public constant returns (address) {\r\n        return CertificateAddresses[getCertKey(_CertID)];\r\n    }\r\n\r\n    /**\r\n      * Derives an unique key from a certificate identifier to be used in the\r\n      * global mapping CertificateAddresses.\r\n      *\r\n      * This is necessary due to certificate identifiers are of type string\r\n      * which cannot be used as dictionary keys.\r\n      *\r\n      * @param _CertID The unique certificate identifier.\r\n      * @return The key derived from certificate identifier.\r\n      */\r\n    function getCertKey(string _CertID) public pure returns (bytes32) {\r\n        return sha256(_CertID);\r\n    }\r\n\r\n\r\n    // Modifiers\r\n\r\n    /**\r\n      * Ensure that only the global administrator is able to perform.\r\n      */\r\n    modifier onlyGlobalAdmin () {\r\n        require(msg.sender==GlobalAdmin);\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * Ensure that only a certificate administrator is able to perform.\r\n      */\r\n    modifier onlyCertAdmin () {\r\n        require(CertAdmins[msg.sender]);\r\n        _;\r\n    }\r\n\r\n}\r\n/**\r\n  * @title   Certificate Contract\r\n  * @author  Chainstep GmbH\r\n  *\r\n  * Each instance of this contract represents a single certificate.\r\n  */","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_GlobalAdmin\",\"type\":\"address\"}],\"name\":\"changeGlobalAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CertAdmin\",\"type\":\"address\"}],\"name\":\"addCertAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_CertID\",\"type\":\"string\"}],\"name\":\"getCertKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CompanyName\",\"type\":\"string\"},{\"name\":\"_Norm\",\"type\":\"string\"},{\"name\":\"_CertID\",\"type\":\"string\"},{\"name\":\"_issued\",\"type\":\"string\"},{\"name\":\"_expires\",\"type\":\"string\"},{\"name\":\"_Scope\",\"type\":\"string\"},{\"name\":\"_issuingBody\",\"type\":\"string\"}],\"name\":\"setCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_CertID\",\"type\":\"string\"}],\"name\":\"getCertAddressByID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"CertAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GlobalAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CertID\",\"type\":\"string\"}],\"name\":\"delCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CertAdmin\",\"type\":\"address\"}],\"name\":\"delCertAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"CertificateAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_certID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_certAdrress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"setTime\",\"type\":\"uint256\"}],\"name\":\"CertificationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_certID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_certAdrress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"delTime\",\"type\":\"uint256\"}],\"name\":\"CertificationDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_certAdmin\",\"type\":\"address\"}],\"name\":\"CertAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_certAdmin\",\"type\":\"address\"}],\"name\":\"CertAdminDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_globalAdmin\",\"type\":\"address\"}],\"name\":\"GlobalAdminChanged\",\"type\":\"event\"}]","ContractName":"Certifier","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://14d23f8c31a29c87c4ef86c9f13556ce216fefc298e1ae0d7cf7a3ec80826d01"}]}