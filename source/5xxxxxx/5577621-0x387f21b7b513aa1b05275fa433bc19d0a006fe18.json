{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\ninterface Presale {\r\n    function tokenAddress() constant returns (address);\r\n}\r\n\r\n\r\ninterface Crowdsale {\r\n    function tokenAddress() constant returns (address);\r\n}\r\n\r\n\r\ncontract Admins {\r\n    address public admin1;\r\n\r\n    address public admin2;\r\n\r\n    address public admin3;\r\n\r\n    function Admins(address a1, address a2, address a3) public {\r\n        admin1 = a1;\r\n        admin2 = a2;\r\n        admin3 = a3;\r\n    }\r\n\r\n    modifier onlyAdmins {\r\n        require(msg.sender == admin1 || msg.sender == admin2 || msg.sender == admin3);\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address _adminAddress) onlyAdmins public {\r\n\r\n        require(_adminAddress != admin1);\r\n        require(_adminAddress != admin2);\r\n        require(_adminAddress != admin3);\r\n\r\n        if (admin1 == msg.sender) {\r\n            admin1 = _adminAddress;\r\n        }\r\n        else\r\n        if (admin2 == msg.sender) {\r\n            admin2 = _adminAddress;\r\n        }\r\n        else\r\n        if (admin3 == msg.sender) {\r\n            admin3 = _adminAddress;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract TokenERC20 {\r\n    // Public variables of the token\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public decimals = 18;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function TokenERC20(\r\n    uint256 initialSupply,\r\n    string tokenName,\r\n    string tokenSymbol\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);\r\n        // Update total supply with the decimal amount\r\n        balanceOf[this] = totalSupply;\r\n        // Give the creator all initial tokens\r\n        name = tokenName;\r\n        // Set the name for display purposes\r\n        symbol = tokenSymbol;\r\n        // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n    returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;\r\n        // Subtract from the sender\r\n        totalSupply -= _value;\r\n        // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);\r\n        // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        // Check allowance\r\n        balanceOf[_from] -= _value;\r\n        // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;\r\n        // Subtract from the sender's allowance\r\n        totalSupply -= _value;\r\n        // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract TrimpoToken is Admins, TokenERC20 {\r\n\r\n    uint public transferredManually = 0;\r\n\r\n    uint public transferredPresale = 0;\r\n\r\n    uint public transferredCrowdsale = 0;\r\n\r\n    address public presaleAddr;\r\n\r\n    address public crowdsaleAddr;\r\n\r\n    modifier onlyPresale {\r\n        require(msg.sender == presaleAddr);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCrowdsale {\r\n        require(msg.sender == crowdsaleAddr);\r\n        _;\r\n    }\r\n\r\n\r\n    function TrimpoToken(\r\n    uint256 initialSupply,\r\n    string tokenName,\r\n    string tokenSymbol,\r\n    address a1,\r\n    address a2,\r\n    address a3\r\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) Admins(a1, a2, a3) public {}\r\n\r\n\r\n    function transferManual(address _to, uint _value) onlyAdmins public {\r\n        _transfer(this, _to, _value);\r\n        transferredManually += _value;\r\n    }\r\n\r\n    function setPresale(address _presale) onlyAdmins public {\r\n        require(_presale != 0x0);\r\n        bool allow = false;\r\n        Presale newPresale = Presale(_presale);\r\n\r\n        if (newPresale.tokenAddress() == address(this)) {\r\n            presaleAddr = _presale;\r\n        }\r\n        else {\r\n            revert();\r\n        }\r\n\r\n    }\r\n\r\n    function setCrowdsale(address _crowdsale) onlyAdmins public {\r\n        require(_crowdsale != 0x0);\r\n        Crowdsale newCrowdsale = Crowdsale(_crowdsale);\r\n\r\n        if (newCrowdsale.tokenAddress() == address(this)) {\r\n\r\n            crowdsaleAddr = _crowdsale;\r\n        }\r\n        else {\r\n            revert();\r\n        }\r\n\r\n    }\r\n\r\n    function transferPresale(address _to, uint _value) onlyPresale public {\r\n        _transfer(this, _to, _value);\r\n        transferredPresale += _value;\r\n    }\r\n\r\n    function transferCrowdsale(address _to, uint _value) onlyCrowdsale public {\r\n        _transfer(this, _to, _value);\r\n        transferredCrowdsale += _value;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"admin2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"name\":\"setCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferManual\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferredPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferredManually\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferredCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presale\",\"type\":\"address\"}],\"name\":\"setPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"a1\",\"type\":\"address\"},{\"name\":\"a2\",\"type\":\"address\"},{\"name\":\"a3\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"TrimpoToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000001dcd650000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000023b3d7671b37ea2a270fbeba084f1668db3201f70000000000000000000000008f9a35e38af4a3856c9f096a52747a662d8f00cc00000000000000000000000005d3704372f0ed7b9e04c78746a95d8c1e150af4000000000000000000000000000000000000000000000000000000000000000c5472696d706f20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065452494d504f0000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://b6faa157b039e1d8d40ad26085737361ec5bd31e02522ceb3a89a484c36d29df"}]}