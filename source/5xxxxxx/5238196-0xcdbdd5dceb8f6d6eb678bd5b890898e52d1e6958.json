{"status":"1","message":"OK","result":[{"SourceCode":"// OwnTheDay-Token Source code\r\n// copyright 2018 xeroblood <https://owntheday.io>\r\n\r\npragma solidity 0.4.19;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /* Withdraw */\r\n    /*\r\n    NOTICE: These functions withdraw the developer's cut which is left\r\n    in the contract. User funds are immediately sent to the old\r\n    owner in `claimDay`, no user funds are left in the contract.\r\n    */\r\n    function withdrawAll() public onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function withdrawAmount(uint256 _amount) public onlyOwner {\r\n        require(_amount <= this.balance);\r\n        owner.transfer(_amount);\r\n    }\r\n\r\n    function contractBalance() public view returns (uint256) {\r\n        return this.balance;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title Pausable\r\n* @dev Base contract which allows children to implement an emergency stop mechanism.\r\n*/\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title Helps contracts guard agains reentrancy attacks.\r\n* @author Remco Bloemen <remco@2Ï€.com>\r\n* @notice If you mark a function `nonReentrant`, you should also\r\n* mark it `external`.\r\n*/\r\ncontract ReentrancyGuard {\r\n\r\n    /**\r\n    * @dev We use a single lock for the whole contract.\r\n    */\r\n    bool private reentrancyLock = false;\r\n\r\n    /**\r\n    * @dev Prevents a contract from calling itself, directly or indirectly.\r\n    * @notice If you mark a function `nonReentrant`, you should also\r\n    * mark it `external`. Calling one nonReentrant function from\r\n    * another is not supported. Instead, you can implement a\r\n    * `private` function doing the actual work, and a `external`\r\n    * wrapper marked as `nonReentrant`.\r\n    */\r\n    modifier nonReentrant() {\r\n        require(!reentrancyLock);\r\n        reentrancyLock = true;\r\n        _;\r\n        reentrancyLock = false;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n* @title ERC721 interface\r\n* @dev see https://github.com/ethereum/eips/issues/721\r\n*/\r\ncontract ERC721 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\n\r\n/// @title Own the Day!\r\n/// @author xeroblood (https://owntheday.io)\r\ncontract OwnTheDayContract is ERC721, Pausable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    event Bought (uint256 indexed _dayIndex, address indexed _owner, uint256 _price);\r\n    event Sold (uint256 indexed _dayIndex, address indexed _owner, uint256 _price);\r\n\r\n    // Total amount of tokens\r\n    uint256 private totalTokens;\r\n    bool private mintingFinished = false;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) public tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) public tokenApprovals;\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping (address => uint256[]) public ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) public ownedTokensIndex;\r\n\r\n    /// @dev A mapping from Day Index to Current Price.\r\n    ///  Initial Price set at 1 finney (1/1000th of an ether).\r\n    mapping (uint256 => uint256) public dayIndexToPrice;\r\n\r\n    /// @dev A mapping from Day Index to the address owner. Days with\r\n    ///  no valid owner address are assigned to contract owner.\r\n    //mapping (uint256 => address) public dayIndexToOwner;      // <---  redundant with tokenOwner\r\n\r\n    /// @dev A mapping from Account Address to Nickname.\r\n    mapping (address => string) public ownerAddressToName;\r\n\r\n    /**\r\n    * @dev Guarantees msg.sender is owner of the given token\r\n    * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n    */\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(ownerOf(_tokenId) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function name() public pure returns (string _name) {\r\n        return \"OwnTheDay.io Days\";\r\n    }\r\n\r\n    function symbol() public pure returns (string _symbol) {\r\n        return \"DAYS\";\r\n    }\r\n\r\n    /// @dev Creates the initial day tokens available (this is the minting process)\r\n    function createInitialDays(uint256 _count) public onlyOwner canMint {\r\n        require(totalTokens < 366 && _count > 0);\r\n        for (uint256 i = 0; i < _count && totalTokens < 366; i++) {\r\n            _mint(msg.sender, totalTokens);\r\n        }\r\n    }\r\n\r\n    /// @dev Assigns initial days to owners during minting period.\r\n    /// This is only used during migration from old contract to new contract (this one).\r\n    function assignInitialDays(address _to, uint256 _tokenId, uint256 _price) public onlyOwner canMint {\r\n        require(msg.sender != address(0));\r\n        require(_to != address(0));\r\n        require(_tokenId >= 0 && _tokenId < 366);\r\n        require(_price >= 1 finney);\r\n\r\n        tokenOwner[_tokenId] = _to;\r\n        uint256 length = balanceOf(_to);\r\n        ownedTokens[_to].push(_tokenId);\r\n        ownedTokensIndex[_tokenId] = length;\r\n        totalTokens = totalTokens.add(1);\r\n        dayIndexToPrice[_tokenId] = _price;\r\n        Transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function finishMinting() public onlyOwner {\r\n        require(!mintingFinished);\r\n        mintingFinished = true;\r\n    }\r\n\r\n    function isMintingFinished() public view returns (bool) {\r\n        return mintingFinished;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the total amount of tokens stored by the contract\r\n    * @return uint256 representing the total amount of tokens\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalTokens;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address\r\n    * @param _owner address to query the balance of\r\n    * @return uint256 representing the amount owned by the passed address\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return ownedTokens[_owner].length;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the list of tokens owned by a given address\r\n    * @param _owner address to query the tokens of\r\n    * @return uint256[] representing the list of tokens owned by the passed address\r\n    */\r\n    function tokensOf(address _owner) public view returns (uint256[]) {\r\n        return ownedTokens[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the owner of the specified token ID\r\n    * @param _tokenId uint256 ID of the token to query the owner of\r\n    * @return owner address currently marked as the owner of the given token ID\r\n    */\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        address owner = tokenOwner[_tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the approved address to take ownership of a given token ID\r\n    * @param _tokenId uint256 ID of the token to query the approval of\r\n    * @return address currently approved to take ownership of the given token ID\r\n    */\r\n    function approvedFor(uint256 _tokenId) public view returns (address) {\r\n        return tokenApprovals[_tokenId];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers the ownership of a given token ID to another address\r\n    * @param _to address to receive the ownership of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n        clearApprovalAndTransfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Approves another address to claim for the ownership of the given token ID\r\n    * @param _to address to be approved for the given token ID\r\n    * @param _tokenId uint256 ID of the token to be approved\r\n    */\r\n    function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n        address owner = ownerOf(_tokenId);\r\n        require(_to != owner);\r\n        if (approvedFor(_tokenId) != 0 || _to != 0) {\r\n            tokenApprovals[_tokenId] = _to;\r\n            Approval(owner, _to, _tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Claims the ownership of a given token ID\r\n    * @param _tokenId uint256 ID of the token being claimed by the msg.sender\r\n    */\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        require(isApprovedFor(msg.sender, _tokenId));\r\n        clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n    }\r\n\r\n    /// @dev Calculate the Final Sale Price after the Owner-Cut has been calculated\r\n    function calculateOwnerCut(uint256 _price) public pure returns (uint256) {\r\n        if (_price > 5000 finney) {\r\n            return _price.mul(2).div(100);\r\n        } else if (_price > 500 finney) {\r\n            return _price.mul(3).div(100);\r\n        } else if (_price > 250 finney) {\r\n            return _price.mul(4).div(100);\r\n        }\r\n        return _price.mul(5).div(100);\r\n    }\r\n\r\n    /// @dev Calculate the Price Increase based on the current Purchase Price\r\n    function calculatePriceIncrease(uint256 _price) public pure returns (uint256) {\r\n        if (_price > 5000 finney) {\r\n            return _price.mul(15).div(100);\r\n        } else if (_price > 2500 finney) {\r\n            return _price.mul(18).div(100);\r\n        } else if (_price > 500 finney) {\r\n            return _price.mul(26).div(100);\r\n        } else if (_price > 250 finney) {\r\n            return _price.mul(36).div(100);\r\n        }\r\n        return _price; // 100% increase\r\n    }\r\n\r\n    /// @dev Gets the Current (or Default) Price of a Day\r\n    function getPriceByDayIndex(uint256 _dayIndex) public view returns (uint256) {\r\n        require(_dayIndex >= 0 && _dayIndex < 366);\r\n        uint256 price = dayIndexToPrice[_dayIndex];\r\n        if (price == 0) { price = 1 finney; }\r\n        return price;\r\n    }\r\n\r\n    /// @dev Sets the Nickname for an Account Address\r\n    function setAccountNickname(string _nickname) public whenNotPaused {\r\n        require(msg.sender != address(0));\r\n        require(bytes(_nickname).length > 0);\r\n        ownerAddressToName[msg.sender] = _nickname;\r\n    }\r\n\r\n    /// @dev Claim a Day for Your Very Own!\r\n    /// The Purchase Price is Paid to the Previous Owner\r\n    function claimDay(uint256 _dayIndex) public nonReentrant whenNotPaused payable {\r\n        require(msg.sender != address(0));\r\n        require(_dayIndex >= 0 && _dayIndex < 366);\r\n\r\n        address buyer = msg.sender;\r\n        address seller = tokenOwner[_dayIndex];\r\n        require(msg.sender != seller); // Prevent buying from self\r\n\r\n        uint256 amountPaid = msg.value;\r\n        uint256 purchasePrice = dayIndexToPrice[_dayIndex];\r\n        if (purchasePrice == 0) {\r\n            purchasePrice = 1 finney; // == 0.001 ether or 1000000000000000 wei\r\n        }\r\n        require(amountPaid >= purchasePrice);\r\n\r\n        // If too much was paid, track the change to be returned\r\n        uint256 changeToReturn = 0;\r\n        if (amountPaid > purchasePrice) {\r\n            changeToReturn = amountPaid.sub(purchasePrice);\r\n            amountPaid -= changeToReturn;\r\n        }\r\n\r\n        // Calculate New Purchase Price and update storage\r\n        uint256 priceIncrease = calculatePriceIncrease(purchasePrice);\r\n        uint256 newPurchasePrice = purchasePrice.add(priceIncrease);\r\n        dayIndexToPrice[_dayIndex] = newPurchasePrice;\r\n\r\n        // Calculate Sale Price after Dev-Cut\r\n        //  - Dev-Cut is left in the contract\r\n        //  - Sale Price is transfered to seller immediately\r\n        uint256 ownerCut = calculateOwnerCut(amountPaid);\r\n        uint256 salePrice = amountPaid.sub(ownerCut);\r\n\r\n        // Fire Claim Events\r\n        Bought(_dayIndex, buyer, purchasePrice);\r\n        Sold(_dayIndex, seller, purchasePrice);\r\n\r\n        // Transfer token\r\n        clearApprovalAndTransfer(seller, buyer, _dayIndex);\r\n\r\n        // Transfer Funds\r\n        if (seller != address(0)) {\r\n            seller.transfer(salePrice);\r\n        }\r\n        if (changeToReturn > 0) {\r\n            buyer.transfer(changeToReturn);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Mint token function\r\n    * @param _to The address that will own the minted token\r\n    * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n    */\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        require(_to != address(0));\r\n        addToken(_to, _tokenId);\r\n        Transfer(0x0, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Tells whether the msg.sender is approved for the given token ID or not\r\n    * This function is not private so it can be extended in further implementations like the operatable ERC721\r\n    * @param _owner address of the owner to query the approval of\r\n    * @param _tokenId uint256 ID of the token to query the approval of\r\n    * @return bool whether the msg.sender is approved for the given token ID or not\r\n    */\r\n    function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\r\n        return approvedFor(_tokenId) == _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to clear current approval and transfer the ownership of a given token ID\r\n    * @param _from address which you want to send tokens from\r\n    * @param _to address which you want to transfer the token to\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\r\n        require(_to != address(0));\r\n        require(_to != ownerOf(_tokenId));\r\n        require(ownerOf(_tokenId) == _from);\r\n\r\n        clearApproval(_from, _tokenId);\r\n        removeToken(_from, _tokenId);\r\n        addToken(_to, _tokenId);\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to clear current approval of a given token ID\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function clearApproval(address _owner, uint256 _tokenId) private {\r\n        require(ownerOf(_tokenId) == _owner);\r\n        tokenApprovals[_tokenId] = 0;\r\n        Approval(_owner, 0, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to add a token ID to the list of a given address\r\n    * @param _to address representing the new owner of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n    */\r\n    function addToken(address _to, uint256 _tokenId) private {\r\n        require(tokenOwner[_tokenId] == address(0));\r\n        tokenOwner[_tokenId] = _to;\r\n        uint256 length = balanceOf(_to);\r\n        ownedTokens[_to].push(_tokenId);\r\n        ownedTokensIndex[_tokenId] = length;\r\n        totalTokens = totalTokens.add(1);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to remove a token ID from the list of a given address\r\n    * @param _from address representing the previous owner of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n    */\r\n    function removeToken(address _from, uint256 _tokenId) private {\r\n        require(ownerOf(_tokenId) == _from);\r\n\r\n        uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n        uint256 lastTokenIndex = balanceOf(_from).sub(1);\r\n        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n        tokenOwner[_tokenId] = 0;\r\n        ownedTokens[_from][tokenIndex] = lastToken;\r\n        ownedTokens[_from][lastTokenIndex] = 0;\r\n        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are\r\n        // going to be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we\r\n        // are first swapping the lastToken to the first position, and then dropping the element placed in the last\r\n        // position of the list\r\n\r\n        ownedTokens[_from].length--;\r\n        ownedTokensIndex[_tokenId] = 0;\r\n        ownedTokensIndex[lastToken] = tokenIndex;\r\n        totalTokens = totalTokens.sub(1);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dayIndex\",\"type\":\"uint256\"}],\"name\":\"claimDay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"assignInitialDays\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateOwnerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"createInitialDays\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayIndexToPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nickname\",\"type\":\"string\"}],\"name\":\"setAccountNickname\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_dayIndex\",\"type\":\"uint256\"}],\"name\":\"getPriceByDayIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedTokensIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenApprovals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculatePriceIncrease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerAddressToName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_dayIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_dayIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"OwnTheDayContract","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://337c2b8c1fd20fecd4c5bd0c43c94381601b185118164cf00e2835bcbdf3a1fe"}]}