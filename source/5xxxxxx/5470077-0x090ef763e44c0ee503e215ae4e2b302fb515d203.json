{"status":"1","message":"OK","result":[{"SourceCode":"// based on Bryn Bellomy code\r\n// https://medium.com/@bryn.bellomy/solidity-tutorial-building-a-simple-auction-contract-fcc918b0878a\r\n//\r\n// updated to 0.4.21 standard, replaced blocks with time, converted to hot potato style by Chibi Fighters\r\n// added custom start command for owner so they don't take off immidiately\r\n//\r\n\r\npragma solidity ^0.4.21;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, returns 0 if it would go into minus range.\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b >= a) {\r\n            return 0;\r\n        }\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract AuctionPotato {\r\n    using SafeMath for uint256; \r\n    // static\r\n    address public owner;\r\n    uint public bidIncrement;\r\n    uint public startTime;\r\n    uint public endTime;\r\n    string public infoUrl;\r\n    string name;\r\n    \r\n    // start auction manually at given time\r\n    bool started;\r\n\r\n    // pototo\r\n    uint public potato;\r\n    \r\n    // state\r\n    bool public canceled;\r\n    \r\n    uint public highestBindingBid;\r\n    address public highestBidder;\r\n    \r\n    mapping(address => uint256) public fundsByBidder;\r\n    bool ownerHasWithdrawn;\r\n\r\n    event LogBid(address bidder, uint bid, address highestBidder, uint highestBindingBid);\r\n    event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount);\r\n    event LogCanceled();\r\n    \r\n    \r\n    // initial settings on contract creation\r\n    constructor() public {\r\n\r\n        owner = msg.sender;\r\n        // 0.01 ETH\r\n        bidIncrement = 10000000000000000;\r\n        \r\n        started = false;\r\n        \r\n        name = \"Lizard People\";\r\n        infoUrl = \"https://chibifighters.io\";\r\n        \r\n    }\r\n\r\n    function getHighestBid() internal\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return fundsByBidder[highestBidder];\r\n    }\r\n    \r\n    function timeLeft() public view returns (uint time) {\r\n        if (now >= endTime) return 0;\r\n        return endTime - now;\r\n    }\r\n    \r\n    function auctionName() public view returns (string _name) {\r\n        return name;\r\n    }\r\n    \r\n    function nextBid() public view returns (uint _nextBid) {\r\n        return bidIncrement.add(highestBindingBid).add(potato);\r\n    }\r\n    \r\n    function startAuction(string _name, uint _duration_secs) public onlyOwner returns (bool success){\r\n        require(started == false);\r\n        \r\n        started = true;\r\n        startTime = now;\r\n        endTime = now + _duration_secs;\r\n        name = _name;\r\n        \r\n        return true;\r\n        \r\n    }\r\n    \r\n    function isStarted() public view returns (bool success) {\r\n        return started;\r\n    }\r\n\r\n    function placeBid() public\r\n        payable\r\n        onlyAfterStart\r\n        onlyBeforeEnd\r\n        onlyNotCanceled\r\n        onlyNotOwner\r\n        returns (bool success)\r\n    {   \r\n        // we are only allowing to increase in bidIncrements to make for true hot potato style\r\n        require(msg.value == highestBindingBid.add(bidIncrement).add(potato));\r\n        require(msg.sender != highestBidder);\r\n        require(started == true);\r\n        \r\n        // calculate the user's total bid based on the current amount they've sent to the contract\r\n        // plus whatever has been sent with this transaction\r\n        uint newBid = highestBindingBid.add(bidIncrement);\r\n\r\n        fundsByBidder[msg.sender] = fundsByBidder[msg.sender].add(newBid);\r\n        \r\n        fundsByBidder[highestBidder] = fundsByBidder[highestBidder].add(potato);\r\n        \r\n        // set new highest bidder\r\n        highestBidder = msg.sender;\r\n        highestBindingBid = newBid;\r\n        \r\n        // set new increment size\r\n        bidIncrement = bidIncrement.mul(5).div(4);\r\n        \r\n        // 10% potato\r\n        potato = highestBindingBid.div(100).mul(20);\r\n        \r\n        emit LogBid(msg.sender, newBid, highestBidder, highestBindingBid);\r\n        return true;\r\n    }\r\n\r\n    function cancelAuction() public\r\n        onlyOwner\r\n        onlyBeforeEnd\r\n        onlyNotCanceled\r\n        returns (bool success)\r\n    {\r\n        canceled = true;\r\n        emit LogCanceled();\r\n        return true;\r\n    }\r\n\r\n    function withdraw() public\r\n    // can withdraw once overbid\r\n        returns (bool success)\r\n    {\r\n        address withdrawalAccount;\r\n        uint withdrawalAmount;\r\n\r\n        if (canceled) {\r\n            // if the auction was canceled, everyone should simply be allowed to withdraw their funds\r\n            withdrawalAccount = msg.sender;\r\n            withdrawalAmount = fundsByBidder[withdrawalAccount];\r\n            // set funds to 0\r\n            fundsByBidder[withdrawalAccount] = 0;\r\n        }\r\n        \r\n        // owner can withdraw once auction is cancelled or ended\r\n        //if (ownerHasWithdrawn == false && msg.sender == owner && (canceled == true || now > endTime)) {\r\n        if (msg.sender == owner) {\r\n            withdrawalAccount = owner;\r\n            withdrawalAmount = highestBindingBid;\r\n            ownerHasWithdrawn = true;\r\n            \r\n            // set funds to 0\r\n            fundsByBidder[withdrawalAccount] = 0;\r\n        }\r\n        \r\n        // overbid people can withdraw their bid + profit\r\n        // exclude owner because he is set above\r\n        if (!canceled && (msg.sender != highestBidder && msg.sender != owner)) {\r\n            withdrawalAccount = msg.sender;\r\n            withdrawalAmount = fundsByBidder[withdrawalAccount];\r\n            fundsByBidder[withdrawalAccount] = 0;\r\n        }\r\n\r\n        // highest bidder can withdraw leftovers if he didn't before\r\n        if (msg.sender == highestBidder && msg.sender != owner) {\r\n            withdrawalAccount = msg.sender;\r\n            withdrawalAmount = fundsByBidder[withdrawalAccount].sub(highestBindingBid);\r\n            fundsByBidder[withdrawalAccount] = fundsByBidder[withdrawalAccount].sub(withdrawalAmount);\r\n        }\r\n\r\n        if (withdrawalAmount == 0) revert();\r\n    \r\n        // send the funds\r\n        if (!msg.sender.send(withdrawalAmount)) revert();\r\n\r\n        emit LogWithdrawal(msg.sender, withdrawalAccount, withdrawalAmount);\r\n\r\n        return true;\r\n    }\r\n    \r\n    // just in case the contract is bust and can't pay\r\n    function fuelContract() public onlyOwner payable {\r\n        \r\n    }\r\n    \r\n    function balance() public view returns (uint _balance) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) revert();\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotOwner {\r\n        if (msg.sender == owner) revert();\r\n        _;\r\n    }\r\n\r\n    modifier onlyAfterStart {\r\n        if (now < startTime) revert();\r\n        _;\r\n    }\r\n\r\n    modifier onlyBeforeEnd {\r\n        if (now > endTime) revert();\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotCanceled {\r\n        if (canceled) revert();\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"timeLeft\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextBid\",\"outputs\":[{\"name\":\"_nextBid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"infoUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canceled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_duration_secs\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelAuction\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bidIncrement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fuelContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionName\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundsByBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"placeBid\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBindingBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potato\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"highestBidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"highestBindingBid\",\"type\":\"uint256\"}],\"name\":\"LogBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawalAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogCanceled\",\"type\":\"event\"}]","ContractName":"AuctionPotato","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fa35f8bb4ea6fdf47b940ef8471a7c681c9499d0760e149f3e3cd4a33d8d29c2"}]}