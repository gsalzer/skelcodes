{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract Math \r\n{\r\n    /*\r\n    standard uint256 functions\r\n     */\r\n\r\n    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x * y) >= x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n}\r\n\r\ncontract Grass is Math\r\n{\r\n  uint256 public availableTokens;\r\n  uint256 currentTokenPriceInDollar;\r\n\r\n  uint256 public lastUpdateEtherPrice;\r\n  uint256 public etherPriceInDollarIn;\r\n  uint256 public etherPriceInDollarOut;\r\n\r\n  function getCurrentTokenPrice() public constant returns (uint256)\r\n  {\r\n      uint256 today = getToday();\r\n      return (tokenPriceHistory[today] == 0)?currentTokenPriceInDollar:tokenPriceHistory[today];\r\n  }\r\n\r\n  mapping(uint256 => uint256) public tokenPriceHistory;\r\n  struct ExtraTokensInfo\r\n  {\r\n    uint256 timestamp;\r\n    uint256 extraTokens;\r\n    string  proofLink;\r\n    uint256 videoFileHash;\r\n  }\r\n\r\n  ExtraTokensInfo[] public extraTokens;\r\n\r\n  struct TokenInfo \r\n  {    \r\n    uint256 amount;\r\n    bool isReturnedInPool;    \r\n  }\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n\r\n  // address => day => amount  \r\n  mapping(address => mapping(uint256 => TokenInfo)) timeTable;\r\n  mapping(address => mapping(uint256 => uint256)) bonuses;\r\n  mapping (address => uint256) public balances;  \r\n  uint256 public totalSupply;\r\n\r\n  string public name;\r\n  uint8 public decimals;\r\n  string public symbol;\r\n  \r\n  bool isCanBuy = true;\r\n\r\n  modifier canBuy()\r\n  {\r\n      assert(isCanBuy);\r\n      _;\r\n  }\r\n\r\n  function changeState(bool bNewState) public onlyAdmin\r\n  {\r\n      isCanBuy = bNewState;\r\n  }\r\n  \r\n  address owner;\r\n  mapping(address => bool) admins;\r\n  modifier onlyAdmin()\r\n  {\r\n      assert(admins[msg.sender] == true || msg.sender == owner);\r\n      _;\r\n  }\r\n\r\n  modifier onlyOwner()\r\n  {\r\n      assert(msg.sender == owner);\r\n      _;\r\n  }\r\n  function addAdmin(address addr) public onlyOwner\r\n  {\r\n      admins[addr] = true;\r\n  }\r\n  function removeAdmin(address addr) public onlyOwner\r\n  {\r\n      admins[addr] = false;\r\n  }\r\n    \r\n  function Grass() public\r\n  {   \r\n    // startTime = block.timestamp;\r\n    owner = msg.sender;\r\n    admins[msg.sender] = true;\r\n    totalSupply = 0;                        \r\n    name = 'GRASS Token';                   \r\n    decimals = 18;                          \r\n    symbol = 'GRASS';\r\n    availableTokens = 800 * 10**18;\r\n    currentTokenPriceInDollar = 35 * 100; // 35.00$ (price may change) \r\n\r\n    etherPriceInDollarIn = 530 * 100;  // 550.00 $  (price may change)\r\n    etherPriceInDollarOut = 530 * 100; // 550.00 $  (price may change)\r\n    lastUpdateEtherPrice = block.timestamp;\r\n  }\r\n\r\n  function increaseMaxAvailableTokens(uint256 amount, string link, uint256 videoFileHash) onlyAdmin public\r\n  {\r\n    extraTokens.push(ExtraTokensInfo(block.timestamp, amount, link, videoFileHash));\r\n    availableTokens = add(availableTokens, amount);\r\n  }\r\n  \r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n      return balances[_owner];\r\n  }\r\n\r\n  function updateEtherPrice (uint256 newPriceIn, uint256 newPriceOut) onlyAdmin public \r\n  {   \r\n    etherPriceInDollarIn = newPriceIn;\r\n    etherPriceInDollarOut = newPriceOut;\r\n    lastUpdateEtherPrice = block.timestamp;\r\n  }\r\n\r\n  modifier isEtherPriceUpdated() \r\n  {\r\n      require(now - lastUpdateEtherPrice < 24 hours);\r\n      _;\r\n  }\r\n\r\n  function updateTokenPrice (uint256 newPrice) onlyAdmin public \r\n  {   \r\n    currentTokenPriceInDollar = newPrice;   \r\n  }\r\n  \r\n  function getToday() public constant returns (uint256)\r\n  {\r\n      return block.timestamp / 24 hours;\r\n  }\r\n\r\n  function() isEtherPriceUpdated canBuy payable public\r\n  {\r\n      buyInternal(msg.sender);\r\n  }\r\n\r\n  function buyFor(address addr) isEtherPriceUpdated canBuy payable public\r\n  {\r\n      buyInternal(addr);\r\n      // \r\n      if (addr.balance == 0) addr.transfer(1 finney);\r\n  }\r\n\r\n  function buy() isEtherPriceUpdated canBuy payable public\r\n  {\r\n    buyInternal(msg.sender);\r\n  }\r\n  \r\n  function getPartnerBalance (address addr) public view returns(uint256)  \r\n  {\r\n    return partners[addr];\r\n  }\r\n\r\n  function partnerWithdraw () public \r\n  {\r\n    assert (partners[msg.sender] > 0);\r\n    uint256 ethToWidthdraw = partners[msg.sender];\r\n    partners[msg.sender] = 0;\r\n    msg.sender.transfer(ethToWidthdraw);\r\n  }  \r\n  \r\n  mapping(address => uint256) partners;\r\n  // refferal => partner\r\n  mapping(address => address) referrals;\r\n\r\n  function takeEther(address dest, uint256 amount) onlyAdmin public\r\n  {\r\n      dest.transfer(amount);\r\n  }\r\n  \r\n  function addEther() payable onlyAdmin public\r\n  {\r\n  }\r\n\r\n  function buyWithPromo(address partner) isEtherPriceUpdated canBuy payable public\r\n  {\r\n      if (referrals[msg.sender] == 0 && partner != msg.sender)\r\n      {\r\n        referrals[msg.sender] = partner;\r\n      }\r\n\r\n      buyInternal(msg.sender);\r\n  }\r\n  \r\n  function buyInternal(address addr) internal\r\n  {\r\n    if (referrals[addr] != 0)\r\n    {\r\n        partners[referrals[addr]] += msg.value / 100; // 1% to partner\r\n    }  \r\n      \r\n    // проверка lastUpdateEtherPrice\r\n    uint256 today = getToday();\r\n    if (tokenPriceHistory[today] == 0) tokenPriceHistory[today] = currentTokenPriceInDollar;\r\n\r\n    // timeTable\r\n    uint256 amount = msg.value * etherPriceInDollarIn / tokenPriceHistory[today] ;\r\n    if (amount > availableTokens)\r\n    {\r\n       addr.transfer((amount - availableTokens) * tokenPriceHistory[today] / etherPriceInDollarIn);\r\n       amount = availableTokens;\r\n    }\r\n      \r\n    assert(amount > 0);\r\n      \r\n    availableTokens = sub(availableTokens, amount);\r\n\r\n    // is new day ?\r\n    if (timeTable[addr][today].amount == 0)\r\n    {\r\n      timeTable[addr][today] = TokenInfo(amount, false);\r\n    }\r\n    else\r\n    {\r\n      timeTable[addr][today].amount += amount;\r\n    }\r\n\r\n    //                  < 30.03.2018\r\n    if (block.timestamp < 1522357200 && bonuses[addr][today] == 0)\r\n    {\r\n      bonuses[addr][today] = 1;\r\n    }\r\n\r\n    balances[addr] = add(balances[addr], amount);\r\n    totalSupply = add(totalSupply, amount);\r\n    emit Transfer(0, addr, amount);\r\n  }\r\n\r\n  function calculateProfit (uint256 day) public constant returns(int256) \r\n  {\r\n    uint256 today = getToday();\r\n    assert(today >= day);\r\n    uint256 daysLeft = today - day;\r\n    int256 extraProfit = 0;\r\n\r\n    // is referral ?\r\n    if (referrals[msg.sender] != 0) extraProfit++;\r\n    // participant until March 30\r\n    if (bonuses[msg.sender][day] > 0) extraProfit++;\r\n\r\n    if (daysLeft <= 7) return -10;\r\n    if (daysLeft <= 14) return -5;\r\n    if (daysLeft <= 21) return 1 + extraProfit;\r\n    if (daysLeft <= 28) return 3 + extraProfit;\r\n    if (daysLeft <= 60) return 5 + extraProfit;\r\n    if (daysLeft <= 90) return 12 + extraProfit;\r\n    return 18 + extraProfit;  \r\n  }\r\n  \r\n  function getTokensPerDay(uint256 _day) public view returns (uint256)\r\n  {\r\n      return timeTable[msg.sender][_day].amount;\r\n  }\r\n\r\n  // returns amount, ether  \r\n  function getProfitForDay(uint256 day, uint256 amount) isEtherPriceUpdated public constant returns(uint256, uint256)\r\n  {      \r\n    assert (day <= getToday());\r\n    \r\n    uint256 tokenPrice = tokenPriceHistory[day];\r\n    if (timeTable[msg.sender][day].amount < amount) amount = timeTable[msg.sender][day].amount;    \r\n\r\n    assert (amount > 0);\r\n          \r\n    return (amount, amount * tokenPrice * uint256(100 + calculateProfit(day)) / 100 / etherPriceInDollarOut);\r\n  }\r\n\r\n  function returnTokensInPool (address[] addr, uint256[] _days) public\r\n  {\r\n    assert (addr.length == _days.length);\r\n    \r\n    TokenInfo storage info; \r\n    for(uint256 i = 0; i < addr.length;i++)\r\n    {\r\n      assert(_days[i] + 92 < getToday() && info.amount > 0);\r\n      info = timeTable[addr[i]][_days[i]];\r\n      info.isReturnedInPool = true;\r\n      availableTokens = add(availableTokens, info.amount);      \r\n    }\r\n  }\r\n\r\n  function getInfo(address addr, uint256 start, uint256 end) public constant returns (uint256[30] _days, uint256[30] _amounts, int256[30] _profits, uint256[30] _etherAmounts)\r\n  {\r\n      if (addr == 0) addr = msg.sender;\r\n\r\n      uint256 j = 0;\r\n      for(uint256 iDay = start; iDay < end; iDay++)\r\n      {\r\n        if (timeTable[addr][iDay].amount > 0)\r\n        {\r\n          _days[j] = iDay;\r\n          _profits[j] = calculateProfit(iDay);\r\n          _amounts[j] = timeTable[addr][iDay].amount;\r\n          (_amounts[j], _etherAmounts[j]) = getProfitForDay(iDay, _amounts[j]);\r\n          j++;\r\n          if (j == 30) break;\r\n        }\r\n      }\r\n  }\r\n  \r\n  function returnTokensForDay(uint256 day, uint256 userTokensAmount) public \r\n  {\r\n    uint256 tokensAmount;\r\n    uint256 etherAmount;\r\n    (tokensAmount, etherAmount) = getProfitForDay(day, userTokensAmount);\r\n\r\n    require(day > 0);\r\n    require(balances[msg.sender] >= tokensAmount);\r\n    \r\n    balances[msg.sender] = sub(balances[msg.sender], tokensAmount);\r\n    totalSupply = sub(totalSupply, tokensAmount);\r\n    timeTable[msg.sender][day].amount = sub(timeTable[msg.sender][day].amount, tokensAmount);\r\n    \r\n    if (!timeTable[msg.sender][day].isReturnedInPool)\r\n    {\r\n      availableTokens = add(availableTokens, tokensAmount);      \r\n    }\r\n\r\n    msg.sender.transfer(etherAmount);\r\n    emit Transfer(msg.sender, 0, tokensAmount);\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPartnerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPriceIn\",\"type\":\"uint256\"},{\"name\":\"newPriceOut\",\"type\":\"uint256\"}],\"name\":\"updateEtherPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extraTokens\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"extraTokens\",\"type\":\"uint256\"},{\"name\":\"proofLink\",\"type\":\"string\"},{\"name\":\"videoFileHash\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bNewState\",\"type\":\"bool\"}],\"name\":\"changeState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"_days\",\"type\":\"uint256[30]\"},{\"name\":\"_amounts\",\"type\":\"uint256[30]\"},{\"name\":\"_profits\",\"type\":\"int256[30]\"},{\"name\":\"_etherAmounts\",\"type\":\"uint256[30]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPriceHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"calculateProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdateEtherPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"buyFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPriceInDollarOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPriceInDollarIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"partnerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"buyWithPromo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getTokensPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[]\"},{\"name\":\"_days\",\"type\":\"uint256[]\"}],\"name\":\"returnTokensInPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"},{\"name\":\"userTokensAmount\",\"type\":\"uint256\"}],\"name\":\"returnTokensForDay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"link\",\"type\":\"string\"},{\"name\":\"videoFileHash\",\"type\":\"uint256\"}],\"name\":\"increaseMaxAvailableTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getProfitForDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Grass","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1611d69862104b0584a20d96a656c9f600b57ccdb658f587037ee1d0e78eed6c"}]}