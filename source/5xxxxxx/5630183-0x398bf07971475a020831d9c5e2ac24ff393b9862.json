{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract FairPonzi {\r\n    struct Investment {\r\n        uint initamount;\r\n        uint inittime;\r\n        \r\n        uint refbonus;\r\n        address refaddress;\r\n        uint refcount;\r\n    }\r\n    struct Payment {\r\n        address receiver;\r\n        uint inamount;\r\n        uint outamount;\r\n    }\r\n    mapping(uint => mapping(address => Investment)) public investmentTable;\r\n    mapping(uint => Payment) public payoutList;\r\n    \r\n    uint public rewardinterval = 3600 * 24; // 1day\r\n    //uint public rewardinterval = 60; // 1min\r\n    uint public constant minbid = 1000000000000; // 1uETH\r\n    uint public payoutcount = 0;\r\n    uint public constant startblock = 5646372; // this disables preinvest advantage\r\n    uint public payincount = 0;\r\n    uint roundcount = 0;\r\n    uint constant maxdays = 365 * 3; // max 3 years, to cap gas costs\r\n    \r\n    address constant restaddress = 0x9feA38edD1875cefD3D071C549a3f7Cc7983B455;\r\n    address constant nulladdress = 0x0000000000000000000000000000000000000000;\r\n    \r\n    constructor() public {\r\n    }\r\n    \r\n    function () public payable {\r\n        buyin(nulladdress); // if normal transaction, nobody get referral\r\n    }\r\n    function buyin(address refaddr)public payable{\r\n        if(block.number < startblock) revert();\r\n        if(msg.value < minbid) { // wants a payout\r\n            redeemPayout();\r\n            return;\r\n        }\r\n        Investment storage acc = investmentTable[roundcount][msg.sender];\r\n        uint addreward = getAccountBalance(msg.sender);\r\n        uint win = addreward - acc.initamount;\r\n        if(win > 0){\r\n            investmentTable[roundcount][acc.refaddress].refbonus += win / 10; // Referral get 10%\r\n        }\r\n        \r\n        acc.initamount = msg.value + addreward;\r\n        acc.inittime = block.timestamp;\r\n        if(refaddr != msg.sender && acc.refaddress == nulladdress){\r\n            acc.refaddress = refaddr;\r\n            investmentTable[roundcount][refaddr].refcount++;\r\n        }\r\n        \r\n        payincount++;\r\n    }\r\n    function redeemPayout() public {\r\n        Investment storage acc = investmentTable[roundcount][msg.sender];\r\n        uint addreward = getAccountBalance(msg.sender);\r\n        uint win = addreward - acc.initamount;\r\n        uint payamount = addreward + acc.refbonus;\r\n        if(payamount <= 0) return;\r\n        if(address(this).balance < payamount){\r\n            reset();\r\n        }else{\r\n            payoutList[payoutcount++] = Payment(msg.sender, acc.initamount, payamount);\r\n            acc.initamount = 0;\r\n            acc.refbonus = 0;\r\n            msg.sender.transfer(payamount);\r\n            investmentTable[roundcount][acc.refaddress].refbonus += win / 10; // Referral get 10%\r\n        }\r\n    }\r\n    function reset() private {\r\n        // todo reset list\r\n        if(restaddress.send(address(this).balance)){\r\n            // Should always be possible, otherwise new payers have good luck ;)\r\n        }\r\n        roundcount++;\r\n        payincount = 0;\r\n    }\r\n    function getAccountBalance(address addr)public constant returns (uint amount){\r\n        Investment storage acc = investmentTable[roundcount][addr];\r\n        uint ret = acc.initamount;\r\n        if(acc.initamount > 0){\r\n            uint rewardcount = (block.timestamp - acc.inittime) / rewardinterval;\r\n            if(rewardcount > maxdays) rewardcount = maxdays;\r\n            while(rewardcount > 0){\r\n                ret += ret / 200; // 0.5%\r\n                rewardcount--;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    function getPayout(uint idrel) public constant returns (address bidder, uint inamount, uint outamount) {\r\n        Payment storage cur =  payoutList[idrel];\r\n        return (cur.receiver, cur.inamount, cur.outamount);\r\n    }\r\n    function getBlocksUntilStart() public constant returns (uint count){\r\n        if(startblock <= block.number) return 0;\r\n        else return startblock - block.number;\r\n    }\r\n    function getAccountInfo(address addr) public constant returns (address retaddr, uint initamount, uint investmenttime, uint currentbalance, uint _timeuntilnextreward, uint _refbonus, address _refaddress, uint _refcount) {\r\n        Investment storage acc = investmentTable[roundcount][addr];\r\n        uint nextreward = rewardinterval - ((block.timestamp - acc.inittime) % rewardinterval);\r\n        if(acc.initamount <= 0) nextreward = 0;\r\n        return (addr, acc.initamount, block.timestamp - acc.inittime, getAccountBalance(addr), nextreward, acc.refbonus, acc.refaddress, acc.refcount);\r\n    }\r\n    function getAccountInfo() public constant returns (address retaddr, uint initamount, uint investmenttime, uint currentbalance, uint _timeuntilnextreward, uint _refbonus, address _refaddress, uint _refcount) {\r\n        return getAccountInfo(msg.sender);\r\n    }\r\n    function getStatus() public constant returns (uint _payoutcount, uint _blocksUntilStart, uint _payincount){\r\n        return (payoutcount, getBlocksUntilStart(), payincount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"startblock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutcount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardinterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccountInfo\",\"outputs\":[{\"name\":\"retaddr\",\"type\":\"address\"},{\"name\":\"initamount\",\"type\":\"uint256\"},{\"name\":\"investmenttime\",\"type\":\"uint256\"},{\"name\":\"currentbalance\",\"type\":\"uint256\"},{\"name\":\"_timeuntilnextreward\",\"type\":\"uint256\"},{\"name\":\"_refbonus\",\"type\":\"uint256\"},{\"name\":\"_refaddress\",\"type\":\"address\"},{\"name\":\"_refcount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeemPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idrel\",\"type\":\"uint256\"}],\"name\":\"getPayout\",\"outputs\":[{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"inamount\",\"type\":\"uint256\"},{\"name\":\"outamount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlocksUntilStart\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"_payoutcount\",\"type\":\"uint256\"},{\"name\":\"_blocksUntilStart\",\"type\":\"uint256\"},{\"name\":\"_payincount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investmentTable\",\"outputs\":[{\"name\":\"initamount\",\"type\":\"uint256\"},{\"name\":\"inittime\",\"type\":\"uint256\"},{\"name\":\"refbonus\",\"type\":\"uint256\"},{\"name\":\"refaddress\",\"type\":\"address\"},{\"name\":\"refcount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"name\":\"retaddr\",\"type\":\"address\"},{\"name\":\"initamount\",\"type\":\"uint256\"},{\"name\":\"investmenttime\",\"type\":\"uint256\"},{\"name\":\"currentbalance\",\"type\":\"uint256\"},{\"name\":\"_timeuntilnextreward\",\"type\":\"uint256\"},{\"name\":\"_refbonus\",\"type\":\"uint256\"},{\"name\":\"_refaddress\",\"type\":\"address\"},{\"name\":\"_refcount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payoutList\",\"outputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"inamount\",\"type\":\"uint256\"},{\"name\":\"outamount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAccountBalance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minbid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payincount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refaddr\",\"type\":\"address\"}],\"name\":\"buyin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"FairPonzi","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d837c9610a0d9fb9ea90d48da8f73ceb755dd6af69d189820fde461f6208e020"}]}