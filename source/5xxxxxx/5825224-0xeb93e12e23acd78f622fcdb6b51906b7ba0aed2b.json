{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/* SNAILFARM 2\r\n\r\n// We keep the same basics as SnailFarm: hatch eggs into snails, buy or sell eggs for money.\r\n// Hatching now comes with a small ETH cost.\r\n// Your snails don't die anymore when you sell eggs.\r\n// Referrals are gone.\r\n// The formula for buying and selling eggs is simplified.\r\n// Only a finite number of eggs is available for sale.\r\n// This number is based on initial seed, and varies based on player buys and sells.\r\n// Eggs sell for half of the current buy price.\r\n// There is no more extra inflation tied to hatching.\r\n\r\n// The ultimate goal of the game is the Snailmaster title.\r\n// The reward is now a lump sum rather than a constant fee.\r\n// To become Snailmaster, you need a certain number of snails.\r\n// Once you take the Snailmaster title, you lose 90% of your snails.\r\n// 20% of the snailpot is immediately paid out to the Snailmaster.\r\n// When someone becomes the Snailmaster, a new round starts.\r\n// The amount of snails required to claim the title increases with each new round.\r\n// The amount of starting snails also increases by that same amount for new players.\r\n\r\n// We introduce a new mechanic: the Ethertree.\r\n// Every ETH added to the contract is split 50/50 between the snailpot and the treepot.\r\n// Players can claim ETH from the ethertree through selling acorns.\r\n// Players can buy acorns for twice their current price.\r\n// (Half of the ETH goes in the snailpot, half of the ETH buys acorns at their going rate.)\r\n// Players get a better rate on acorn buys if the current snailpot is under the previous snailpot.\r\n// The price of acorns can only rise over time.\r\n\r\n// We add three hot potato items: the SpiderQueen, the TadpolePrince, and the SquirrelDuke.\r\n// Owning any of these boosts adds base hatch size to your hatch, cumulative.\r\n// (With 2 boosts, you get 1+1+1 = 3 times the snails when you hatch your eggs.)\r\n// The Tadpole Prince costs ETH, and rises by 20% with every buy.\r\n// 10% goes to the previous holder, 5% goes to the snailpot, 5% to the treepot.\r\n// The Spider Queen costs snails, this cost doubles with every buy.\r\n// The Squirrel Duke costs acorns, this cost doubles with every buy.\r\n\r\n*/\r\n\r\ncontract SnailFarm2 {\r\n    using SafeMath for uint;\r\n    \r\n    /* Event */\r\n    \r\n    event SoldAcorn (address indexed seller, uint acorns, uint eth);\r\n    event BoughtAcorn (address indexed buyer, uint acorns, uint eth);\r\n    event BecameMaster (address indexed newmaster, uint indexed round, uint reward, uint pot);\r\n    event WithdrewEarnings (address indexed player, uint eth);\r\n    event Hatched (address indexed player, uint eggs, uint snails);\r\n    event SoldEgg (address indexed seller, uint eggs, uint eth);\r\n    event BoughtEgg (address indexed buyer, uint eggs, uint eth);\r\n    event StartedSnailing (address indexed player, uint indexed round);\r\n    event BecameQueen (address indexed newqueen, uint indexed round, uint newreq);\r\n    event BecameDuke (address indexed newduke, uint indexed round, uint newreq);\r\n    event BecamePrince (address indexed newprince, uint indexed round, uint newreq);\r\n\r\n    /* Constants */\r\n    \r\n    uint256 public TIME_TO_HATCH_1SNAIL = 86400; //seconds in a day\r\n    uint256 public STARTING_SNAIL       = 200;\r\n    uint256 public SNAILMASTER_INCREASE = 100000;\r\n    uint256 public STARTING_SNAIL_COST  = 0.004 ether;\r\n    uint256 public HATCHING_COST        = 0.0008 ether;\r\n    uint256 public SPIDER_BASE_REQ      = 80;\r\n    uint256 public SPIDER_BOOST         = 1;\r\n    uint256 public TADPOLE_BASE_REQ     = 0.02 ether;\r\n    uint256 public TADPOLE_BOOST        = 1;\r\n\tuint256 public SQUIRREL_BASE_REQ    = 1;\r\n    uint256 public SQUIRREL_BOOST       = 1;\r\n\r\n\t\r\n    /* Variables */\r\n    \r\n\t//Becomes true one time to start the game\r\n    bool public gameStarted             = false;\r\n\t\r\n\t//Used to ensure a proper game start\r\n    address public gameOwner;\r\n\t\r\n\t//Current round\r\n    uint256 public round                = 0;\r\n\t\r\n\t//Owners of hot potatoes\r\n    address public currentSpiderOwner;\r\n    address public currentTadpoleOwner;\r\n\taddress public currentSquirrelOwner;\r\n\t\r\n\t//Current requirement for hot potatoes\r\n\tuint256 public spiderReq;\r\n    uint256 public tadpoleReq;\r\n\tuint256 public squirrelReq;\r\n\t\r\n\t//Current requirement for snailmaster\r\n    uint256 public snailmasterReq       = SNAILMASTER_INCREASE;\r\n    \r\n    //Current amount of snails given to new players\r\n\tuint256 public startingSnailAmount  = STARTING_SNAIL;\r\n\t\r\n\t//Current number of eggs for sale\r\n    uint256 public marketEggs;\r\n\t\r\n\t//Current number of acorns in existence\r\n\tuint256 public totalAcorns;\r\n\t\t\r\n\t//Ether pots\r\n    uint256 public snailPot;\r\n\tuint256 public previousSnailPot;\r\n    uint256 public treePot;\r\n\r\n    \t\r\n    /* Mappings */\r\n    \r\n\tmapping (address => bool) public hasStartingSnails;\r\n    mapping (address => uint256) public hatcherySnail;\r\n    mapping (address => uint256) public claimedEggs;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => uint256) public playerAcorns;\r\n    mapping (address => uint256) public playerEarnings;\r\n    mapping (address => uint256) public playerProdBoost;\r\n    \r\n\t\r\n    /* Functions */\r\n    \r\n    // Constructor\r\n    // Sets msg.sender as gameOwner for SeedMarket purposes\r\n    // Assigns all hot potatoes to gameOwner and sets his prodBoost accordingly\r\n    // (gameOwner is banned from playing the game)\r\n    \r\n    constructor() public {\r\n        gameOwner = msg.sender;\r\n        \r\n        currentTadpoleOwner = gameOwner;\r\n        currentSquirrelOwner = gameOwner;\r\n        currentSpiderOwner = gameOwner;\r\n        hasStartingSnails[gameOwner] = true; //prevents buying starting snails\r\n        playerProdBoost[gameOwner] = 4; //base+tadpole+squirrel+spider\r\n    }\r\n    \r\n    // SeedMarket\r\n    // Sets eggs and acorns, funds the pot, starts the game\r\n\t\r\n\t// 10000:1 ratio for _eggs:msg.value gives near parity with starting snails\r\n\t// Recommended ratio = 5000:1\r\n\t// Acorns can be any amount, the higher the better as we deal with integers\r\n\t// Recommended value = 1000000\r\n\t// 1% of the acorns are left without an owner\r\n\t// This prevents an infinite acorn price rise,\r\n\t// In the case of a complete acorn dump followed by egg buys\r\n    \r\n    function SeedMarket(uint256 _eggs, uint256 _acorns) public payable {\r\n        require(msg.value > 0);\r\n        require(round == 0);\r\n        require(msg.sender == gameOwner);\r\n        \r\n        marketEggs = _eggs.mul(TIME_TO_HATCH_1SNAIL); //for readability\r\n        snailPot = msg.value.div(2); //50% to the snailpot\r\n        treePot = msg.value.sub(snailPot); //remainder to the treepot\r\n\t\tpreviousSnailPot = snailPot.mul(10); //encourage early acorn funding\r\n        totalAcorns = _acorns; \r\n        playerAcorns[msg.sender] = _acorns.mul(99).div(100); \r\n        spiderReq = SPIDER_BASE_REQ;\r\n        tadpoleReq = TADPOLE_BASE_REQ;\r\n\t\tsquirrelReq = SQUIRREL_BASE_REQ;\r\n        round = 1;\r\n        gameStarted = true;\r\n    }\r\n    \r\n    // SellAcorns\r\n    // Takes a given amount of acorns, increases player ETH balance\r\n    \r\n    function SellAcorns(uint256 _acorns) public {\r\n        require(playerAcorns[msg.sender] > 0);\r\n        \r\n        playerAcorns[msg.sender] = playerAcorns[msg.sender].sub(_acorns);\r\n        uint256 _acornEth = ComputeAcornPrice().mul(_acorns);\r\n        totalAcorns = totalAcorns.sub(_acorns);\r\n        treePot = treePot.sub(_acornEth);\r\n        playerEarnings[msg.sender] = playerEarnings[msg.sender].add(_acornEth);\r\n        \r\n        emit SoldAcorn(msg.sender, _acorns, _acornEth);\r\n    }\r\n    \r\n    // BuyAcorns\r\n    // Takes a given amount of ETH, gives acorns in return\r\n\t\r\n\t// If current snailpot is under previous snailpot, 3 acorns for the price of 4\r\n\t// If current snailpot is equal or above, 1 acorn for the price of \r\n    \r\n    function BuyAcorns() public payable {\r\n        require(msg.value > 0);\r\n        require(tx.origin == msg.sender);\r\n        require(gameStarted);\r\n        \r\n\t\tif (snailPot < previousSnailPot) {\r\n\t\t\tuint256 _acornBought = ((msg.value.div(ComputeAcornPrice())).mul(3)).div(4);\r\n\t\t\tAcornPotSplit(msg.value);\r\n\t\t} else {\r\n\t\t\t_acornBought = (msg.value.div(ComputeAcornPrice())).div(2);\r\n\t\t\tPotSplit(msg.value);\r\n\t\t}\r\n        totalAcorns = totalAcorns.add(_acornBought);\r\n        playerAcorns[msg.sender] = playerAcorns[msg.sender].add(_acornBought);\r\n        \r\n        emit BoughtAcorn(msg.sender, _acornBought, msg.value);\r\n    }\r\n    \r\n    // BecomeSnailmaster\r\n    // Gives out 20% of the snailpot and increments round for a snail sacrifice\r\n\t\r\n    // Increases Snailmaster requirement\r\n    // Resets Spider and Tadpole reqs to initial values\r\n    \r\n    function BecomeSnailmaster() public {\r\n        require(gameStarted);\r\n        require(hatcherySnail[msg.sender] >= snailmasterReq);\r\n        \r\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].div(10);\r\n        \r\n        uint256 _snailReqIncrease = round.mul(SNAILMASTER_INCREASE);\r\n        snailmasterReq = snailmasterReq.add(_snailReqIncrease);\r\n        uint256 _startingSnailIncrease = round.mul(STARTING_SNAIL);\r\n        startingSnailAmount = startingSnailAmount.add(_startingSnailIncrease);\r\n        \r\n        spiderReq = SPIDER_BASE_REQ;\r\n        tadpoleReq = TADPOLE_BASE_REQ;\r\n        squirrelReq = SQUIRREL_BASE_REQ;\r\n        \r\n        previousSnailPot = snailPot;\r\n        uint256 _rewardSnailmaster = snailPot.div(5);\r\n        snailPot = snailPot.sub(_rewardSnailmaster);\r\n        round++;\r\n        playerEarnings[msg.sender] = playerEarnings[msg.sender].add(_rewardSnailmaster);\r\n        \r\n        emit BecameMaster(msg.sender, round, _rewardSnailmaster, snailPot);\r\n    }\r\n    \r\n    // WithdrawEarnings\r\n    // Withdraws all ETH earnings of a player to his wallet\r\n    \r\n    function WithdrawEarnings() public {\r\n        require(playerEarnings[msg.sender] > 0);\r\n        \r\n        uint _amount = playerEarnings[msg.sender];\r\n        playerEarnings[msg.sender] = 0;\r\n        msg.sender.transfer(_amount);\r\n        \r\n        emit WithdrewEarnings(msg.sender, _amount);\r\n    }\r\n    \r\n    // PotSplit\r\n\t// Splits value equally between the two pots\r\n\t\r\n    // Should be called each time ether is spent on the game\r\n    \r\n    function PotSplit(uint256 _msgValue) private {\r\n        uint256 _potBoost = _msgValue.div(2);\r\n        snailPot = snailPot.add(_potBoost);\r\n        treePot = treePot.add(_potBoost);\r\n    }\r\n\t\r\n\t// AcornPotSplit\t\r\n    // Gives one fourth to the snailpot, three fourths to the treepot\r\n    \r\n\t// Variant of PotSplit with a privileged rate\r\n\t// Encourages pot funding with each new round\r\n\t\r\n    function AcornPotSplit(uint256 _msgValue) private {\r\n        uint256 _snailBoost = _msgValue.div(4);\r\n\t\tuint256 _treeBoost = _msgValue.sub(_snailBoost);\r\n        snailPot = snailPot.add(_snailBoost);\r\n        treePot = treePot.add(_treeBoost);\r\n    }\r\n    \r\n    // HatchEggs\r\n    // Hatches eggs into snails for a slight ETH cost\r\n\t\r\n    // If the player owns a hot potato, adjust prodBoost accordingly\r\n    \r\n    function HatchEggs() public payable {\r\n        require(gameStarted);\r\n        require(msg.value == HATCHING_COST);\t\t\r\n        \r\n        PotSplit(msg.value);\r\n        uint256 eggsUsed = ComputeMyEggs();\r\n        uint256 newSnail = (eggsUsed.div(TIME_TO_HATCH_1SNAIL)).mul(playerProdBoost[msg.sender]);\r\n        claimedEggs[msg.sender]= 0;\r\n        lastHatch[msg.sender]= now;\r\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].add(newSnail);\r\n        \r\n        emit Hatched(msg.sender, eggsUsed, newSnail);\r\n    }\r\n    \r\n    // SellEggs\r\n    // Sells current player eggs for ETH at a snail cost\r\n\t\r\n    // Ether is taken from the snailpot\r\n\t// Eggs sold are added to the market\r\n    \r\n    function SellEggs() public {\r\n        require(gameStarted);\r\n        \r\n        uint256 eggsSold = ComputeMyEggs();\r\n        uint256 eggValue = ComputeSell(eggsSold);\r\n        claimedEggs[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n        marketEggs = marketEggs.add(eggsSold);\r\n        snailPot = snailPot.sub(eggValue);\r\n        playerEarnings[msg.sender] = playerEarnings[msg.sender].add(eggValue);\r\n        \r\n        emit SoldEgg(msg.sender, eggsSold, eggValue);\r\n    }\r\n    \r\n    // BuyEggs\r\n    // Buy a calculated amount of eggs for a given amount of ETH\r\n\t\r\n\t// Eggs bought are removed from the market\r\n    \r\n    function BuyEggs() public payable {\r\n        require(gameStarted);\r\n        require(hasStartingSnails[msg.sender] == true);\r\n        require(msg.sender != gameOwner);\r\n        \r\n        uint256 eggsBought = ComputeBuy(msg.value);\r\n        PotSplit(msg.value);\r\n        marketEggs = marketEggs.sub(eggsBought);\r\n        claimedEggs[msg.sender] = claimedEggs[msg.sender].add(eggsBought);\r\n        \r\n        emit BoughtEgg(msg.sender, eggsBought, msg.value);\r\n    }\r\n    \r\n    // BuyStartingSnails\r\n    // Gives starting snails and sets playerProdBoost to 1\r\n    \r\n    function BuyStartingSnails() public payable {\r\n        require(gameStarted);\r\n        require(tx.origin == msg.sender);\r\n        require(hasStartingSnails[msg.sender] == false);\r\n        require(msg.value == STARTING_SNAIL_COST); \r\n\r\n        PotSplit(msg.value);\r\n\t\thasStartingSnails[msg.sender] = true;\r\n        lastHatch[msg.sender] = now;\r\n\t\tplayerProdBoost[msg.sender] = 1;\r\n        hatcherySnail[msg.sender] = startingSnailAmount;\r\n        \r\n        emit StartedSnailing(msg.sender, round);\r\n    }\r\n    \r\n    // BecomeSpiderQueen\r\n    // Increases playerProdBoost while held, obtained with a snail sacrifice\r\n\t\r\n\t// Hot potato item, requirement doubles with every buy\r\n    \r\n    function BecomeSpiderQueen() public {\r\n        require(gameStarted);\r\n        require(hatcherySnail[msg.sender] >= spiderReq);\r\n\r\n        // Remove sacrificed snails, increase req\r\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].sub(spiderReq);\r\n        spiderReq = spiderReq.mul(2);\r\n        \r\n        // Lower prodBoost of old spider owner\r\n        playerProdBoost[currentSpiderOwner] = playerProdBoost[currentSpiderOwner].sub(SPIDER_BOOST);\r\n        \r\n        // Give ownership to msg.sender, then increases his prodBoost\r\n        currentSpiderOwner = msg.sender;\r\n        playerProdBoost[currentSpiderOwner] = playerProdBoost[currentSpiderOwner].add(SPIDER_BOOST);\r\n        \r\n        emit BecameQueen(msg.sender, round, spiderReq);\r\n    }\r\n\t\r\n\t// BecomeSquirrelDuke\r\n\t// Increases playerProdBoost while held, obtained with an acorn sacrifice\r\n\r\n    // Hot potato item, requirement doubles with every buy\r\n    \r\n    function BecomeSquirrelDuke() public {\r\n        require(gameStarted);\r\n        require(hasStartingSnails[msg.sender] == true);\r\n        require(playerAcorns[msg.sender] >= squirrelReq);\r\n        \r\n        // Remove sacrificed acorns, change totalAcorns in consequence, increase req\r\n        playerAcorns[msg.sender] = playerAcorns[msg.sender].sub(squirrelReq);\r\n\t\ttotalAcorns = totalAcorns.sub(squirrelReq);\r\n        squirrelReq = squirrelReq.mul(2);\r\n        \r\n        // Lower prodBoost of old squirrel owner\r\n        playerProdBoost[currentSquirrelOwner] = playerProdBoost[currentSquirrelOwner].sub(SQUIRREL_BOOST);\r\n        \r\n        // Give ownership to msg.sender, then increases his prodBoost\r\n        currentSquirrelOwner = msg.sender;\r\n        playerProdBoost[currentSquirrelOwner] = playerProdBoost[currentSquirrelOwner].add(SQUIRREL_BOOST);\r\n        \r\n        emit BecameDuke(msg.sender, round, squirrelReq);\r\n    }\r\n    \r\n    // BecomeTadpolePrince\r\n    // Increases playerProdBoost while held, obtained with ETH\r\n\t\r\n    // Hot potato item, price increases by 20% with every buy\r\n    \r\n    function BecomeTadpolePrince() public payable {\r\n        require(gameStarted);\r\n        require(hasStartingSnails[msg.sender] == true);\r\n        require(msg.value >= tadpoleReq);\r\n        \r\n        // If player sent more ETH than needed, refund excess to playerEarnings\r\n        if (msg.value > tadpoleReq) {\r\n            uint _excess = msg.value.sub(tadpoleReq);\r\n            playerEarnings[msg.sender] = playerEarnings[msg.sender].add(_excess);\r\n        }  \r\n        \r\n        // Calculate +10% from previous price\r\n        // Give result to the potsplit\r\n        uint _extra = tadpoleReq.div(12); \r\n        PotSplit(_extra);\r\n        \r\n        // Calculate 110% of previous price\r\n        // Give result to the previous owner\r\n        uint _previousFlip = tadpoleReq.mul(11).div(12);\r\n        playerEarnings[currentTadpoleOwner] = playerEarnings[currentTadpoleOwner].add(_previousFlip);\r\n        \r\n        // Increase ETH required for next buy by 20%\r\n        tadpoleReq = (tadpoleReq.mul(6)).div(5); \r\n        \r\n        // Lower prodBoost of old tadpole owner\r\n        playerProdBoost[currentTadpoleOwner] = playerProdBoost[currentTadpoleOwner].sub(TADPOLE_BOOST);\r\n        \r\n        // Give ownership to msg.sender, then increase his prodBoost\r\n        currentTadpoleOwner = msg.sender;\r\n        playerProdBoost[currentTadpoleOwner] = playerProdBoost[currentTadpoleOwner].add(TADPOLE_BOOST);\r\n        \r\n        emit BecamePrince(msg.sender, round, tadpoleReq);\r\n    }\r\n    \r\n    // ComputeAcornPrice\r\n\t// Returns the current ether value of one acorn\r\n\t\r\n    // Acorn price = treePot / totalAcorns\r\n    \r\n    function ComputeAcornPrice() public view returns(uint256) {\r\n        return treePot.div(totalAcorns);\r\n    }\r\n    \r\n    // ComputeSell\r\n\t// Calculates ether value for a given amount of eggs being sold\r\n    \r\n\t// ETH = (eggs / (eggs + marketeggs)) * snailpot / 2\r\n\t// A sale can never give more than half of the snailpot\r\n    \r\n    function ComputeSell(uint256 eggspent) public view returns(uint256) {\r\n        uint256 _eggPool = eggspent.add(marketEggs);\r\n        uint256 _eggFactor = eggspent.mul(snailPot).div(_eggPool);\r\n        return _eggFactor.div(2);\r\n    }\r\n    \r\n    // ComputeBuy\r\n\t// Calculates number of eggs bought for a given amount of ether\r\n\t\r\n    // Eggs bought = ETH spent / (ETH spent + snailpot) * marketeggs\r\n    \r\n    function ComputeBuy(uint256 ethspent) public view returns(uint256) {\r\n        uint256 _ethPool = ethspent.add(snailPot);\r\n        uint256 _ethFactor = ethspent.mul(marketEggs).div(_ethPool);\r\n        return _ethFactor;\r\n    }\r\n    \r\n    // ComputeMyEggs\r\n    // Returns current player eggs\r\n    \r\n    function ComputeMyEggs() public view returns(uint256) {\r\n        return claimedEggs[msg.sender].add(ComputeEggsSinceLastHatch(msg.sender));\r\n    }\r\n    \r\n    // ComputeEggsSinceLastHatch\r\n    // Returns eggs produced since last hatch\r\n    \r\n    function ComputeEggsSinceLastHatch(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed = min(TIME_TO_HATCH_1SNAIL , now.sub(lastHatch[adr]));\r\n        return secondsPassed.mul(hatcherySnail[adr]);\r\n    }\r\n    \r\n    // Helper function for CalculateEggsSinceLastHatch\r\n\t// If a < b, return a\r\n\t// Else, return b\r\n    \r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    // Gets\r\n    \r\n    function GetMySnail() public view returns(uint256) {\r\n        return hatcherySnail[msg.sender];\r\n    }\r\n\t\r\n\tfunction GetMyProd() public view returns(uint256) {\r\n\t\treturn playerProdBoost[msg.sender];\r\n\t}\r\n    \r\n    function GetMyEgg() public view returns(uint256) {\r\n        return ComputeMyEggs().div(TIME_TO_HATCH_1SNAIL);\r\n    }\r\n    \r\n    function GetMyAcorn() public view returns(uint256) {\r\n        return playerAcorns[msg.sender];\r\n    }\r\n\t\r\n\tfunction GetMyEarning() public view returns(uint256) {\r\n\t    return playerEarnings[msg.sender];\r\n\t}\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ComputeMyEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPIDER_BASE_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_acorns\",\"type\":\"uint256\"}],\"name\":\"SellAcorns\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputeAcornPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyStartingSnails\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMySnail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcherySnail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TADPOLE_BASE_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousSnailPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggspent\",\"type\":\"uint256\"}],\"name\":\"ComputeSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SellEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SQUIRREL_BOOST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startingSnailAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BecomeSpiderQueen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snailPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPIDER_BOOST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyAcorns\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SQUIRREL_BASE_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"ComputeEggsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HATCHING_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snailmasterReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_SNAIL_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerAcorns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSpiderOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BecomeTadpolePrince\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eggs\",\"type\":\"uint256\"},{\"name\":\"_acorns\",\"type\":\"uint256\"}],\"name\":\"SeedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_SNAIL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SNAILMASTER_INCREASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TADPOLE_BOOST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tadpoleReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"HatchEggs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerProdBoost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethspent\",\"type\":\"uint256\"}],\"name\":\"ComputeBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAcorns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spiderReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_TO_HATCH_1SNAIL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyAcorn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BecomeSquirrelDuke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyEggs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasStartingSnails\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BecomeSnailmaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"squirrelReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyProd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSquirrelOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTadpoleOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"acorns\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"SoldAcorn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"acorns\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"BoughtAcorn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newmaster\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pot\",\"type\":\"uint256\"}],\"name\":\"BecameMaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"WithdrewEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"snails\",\"type\":\"uint256\"}],\"name\":\"Hatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"SoldEgg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"BoughtEgg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"StartedSnailing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newqueen\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newreq\",\"type\":\"uint256\"}],\"name\":\"BecameQueen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newduke\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newreq\",\"type\":\"uint256\"}],\"name\":\"BecameDuke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newprince\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newreq\",\"type\":\"uint256\"}],\"name\":\"BecamePrince\",\"type\":\"event\"}]","ContractName":"SnailFarm2","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0ec8b8c014a105d90edcdcd86160b8fd8eeb03aaca603695ed6c0af3e8c6339b"}]}