{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n//代币合约\r\n contract token {\r\n     string public name = \"cao token\"; //代币名称\r\n     string public symbol = \"CAO\"; //代币符号比如'$'\r\n     uint8 public decimals = 18;  //代币单位，展示的小数点后面多少个0,和以太币一样后面是是18个0\r\n     uint256 public totalSupply; //代币总量,这里没有做限制,你也可以限定\r\n\r\n    //地址对应的余额\r\n     mapping (address => uint256) public balanceOf;\r\n\r\n     event Transfer(address indexed from, address indexed to, uint256 value);  //转帐通知事件\r\n\r\n     /* 初始化合约，并且把初始的所有代币都给这合约的创建者\r\n      * @param _owned 合约的管理者\r\n      * @param tokenName 代币名称\r\n      * @param tokenSymbol 代币符号\r\n      */\r\n\r\n     function token(address _owned, string tokenName, string tokenSymbol) public {\r\n         //合约的创建者获得的所有代币\r\n         balanceOf[_owned] = totalSupply;\r\n         name = tokenName;\r\n         symbol = tokenSymbol;\r\n     }\r\n\r\n     /**\r\n      * 转帐，具体可以根据自己的需求来实现\r\n      * @param  _to address 接受代币的地址\r\n      * @param  _value uint256 接受代币的数量\r\n      */\r\n     function transfer(address _to, uint256 _value) public{\r\n       //从发送者减掉发送额\r\n       balanceOf[msg.sender] -= _value;\r\n\r\n       //给接收者加上相同的量\r\n       balanceOf[_to] += _value;\r\n\r\n       //通知任何监听该交易的客户端\r\n       Transfer(msg.sender, _to, _value);\r\n     }\r\n\r\n     /**\r\n      * 增加代币，并将代币发送给捐赠新用户,即所谓的增发,本文固定总量,\r\n      * @param  _to address 接受代币的地址\r\n      * @param  _amount uint256 接受代币的数量\r\n      */\r\n     function issue(address _to, uint256 _amount) public{\r\n         totalSupply = totalSupply + _amount;\r\n         balanceOf[_to] += _amount;\r\n\r\n         //通知任何监听该交易的客户端\r\n         Transfer(this, _to, _amount);\r\n     }\r\n  }\r\n\r\n/**\r\n * 众筹合约\r\n */\r\ncontract CAOsale is token {\r\n    address public beneficiary = msg.sender; //受益人地址，测试时为合约创建者,自己发自己\r\n    uint public fundingGoal;  //众筹目标，单位是ether\r\n    uint public amountRaised; //已筹集金额数量， 单位是wei\r\n    uint public deadline; //截止时间\r\n    uint public price;  //代币价格\r\n    bool public fundingGoalReached = false;  //达成众筹目标,默认未完成\r\n    bool public crowdsaleClosed = false; //众筹关闭,默认不关闭\r\n\r\n\r\n    mapping(address => uint256) public balance; //保存众筹地址\r\n\r\n    //记录已接收的eth通知\r\n    event GoalReached(address _beneficiary, uint _amountRaised);\r\n\r\n    //转帐时事件\r\n    event FundTransfer(address _backer, uint _amount, bool _isContribution);\r\n\r\n    /**\r\n     * 初始化构造函数\r\n     * @param fundingGoalInEthers 众筹以太币总量\r\n     * @param durationInMinutes 众筹截止,单位是分钟\r\n     * @param tokenName 代币名称\r\n     * @param tokenSymbol 代币符号\r\n     */\r\n\r\n    //  在初始化众筹合约构造函数的时候，我们会将众筹合约的帐户地址，\r\n    //  传递给代币做为管理地址，这里使用的是关键字this表示当前合约的地址，\r\n    //  也可以传递给某个人，初始创建时奖励给这个人指定量的代币。\r\n    function CAOsale(\r\n        uint fundingGoalInEthers,\r\n        uint durationInMinutes,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public token(this, tokenName, tokenSymbol){\r\n        fundingGoal = fundingGoalInEthers * 1 ether;\r\n        deadline = now + durationInMinutes * 1 minutes;\r\n        price = 0.00001 ether; //1个以太币可以买 1 个代币\r\n    }\r\n\r\n    // 在众筹合约中，用于设置众筹以太币总量、众筹截止时间、以太币和代币的兑换比例,\r\n    // 如果不使用单位进行声明换算，默认在以太坊中，所有的单位都是wei，1 ether=10^18 wei：\r\n\r\n    /**\r\n     * 默认函数\r\n     *\r\n     * 默认函数，可以向合约直接打款\r\n     */\r\n    function () payable public{\r\n        //判断是否关闭众筹\r\n        //如果关闭,则禁止打款.\r\n        require(!crowdsaleClosed);\r\n        // if (!crowdsaleClosed) throw; 这个是老写法,版本大坑啊!\r\n        uint amount = msg.value;\r\n\r\n        //捐款人的金额累加\r\n        balance[msg.sender] += amount;\r\n\r\n        //捐款总额累加\r\n        amountRaised += amount;\r\n\r\n        //转帐操作，转多少代币给捐款人\r\n        issue(msg.sender, amount / price * 10 ** uint256(decimals));\r\n        FundTransfer(msg.sender, amount, true);\r\n    }\r\n\r\n    /**\r\n     * 判断是否已经过了众筹截止限期\r\n     */\r\n    modifier afterDeadline() {\r\n        // if (this == msg.sender && now >= deadline) _; 并且该方法只能被创建者调用,严格一点\r\n        if (now >= deadline) _;\r\n        }\r\n\r\n    /**\r\n     * 检测众筹目标是否完成\r\n     */\r\n    function checkGoalReached() afterDeadline public{\r\n        if (amountRaised >= fundingGoal){\r\n            //达成众筹目标\r\n            fundingGoalReached = true;\r\n            GoalReached(beneficiary, amountRaised);\r\n        }\r\n        //关闭众筹,禁止打款\r\n        crowdsaleClosed = true;\r\n    }\r\n\r\n    /**\r\n     * 收回资金\r\n     * 检查是否达到了目标或时间限制，如果有，并且达到了资金目标，\r\n     * 将全部金额发送给受益人。如果没有达到目标，每个贡献者都可以退出\r\n     * 他们贡献的金额\r\n     */\r\n    function safeWithdrawal() afterDeadline public{\r\n\r\n        //如果没有达成众筹目标,清空代币\r\n        if (!fundingGoalReached) {\r\n            //获取合约调用者已捐款余额\r\n            uint amount = balance[msg.sender];\r\n\r\n            if (amount > 0) {\r\n                //返回合约发起者所有余额\r\n                //transfer是自带的方法,就是朝msg.sender转入数量的意思.类似方法还有 send\r\n                //文档具体地址:http://solidity.readthedocs.io/en/develop/types.html#members-of-addresses\r\n                msg.sender.transfer(amount);\r\n                FundTransfer(msg.sender, amount, false);\r\n                balance[msg.sender] = 0;\r\n            }\r\n        }\r\n\r\n        //如果达成众筹目标，并且合约调用者是受益人\r\n        if (fundingGoalReached && beneficiary == msg.sender) {\r\n\r\n            //将所有捐款从合约中给受益人\r\n            beneficiary.transfer(amountRaised);\r\n\r\n            FundTransfer(beneficiary, amount, false);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"fundingGoalInEthers\",\"type\":\"uint256\"},{\"name\":\"durationInMinutes\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CAOsale","CompilerVersion":"v0.4.22-nightly.2018.3.27+commit.af262281","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000004f1a00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000963616f20746f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000343414f0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f01e858468c89abf78e128df44a27963989aadc35fd1693ac0143bb7d0573619"}]}