{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n \r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Token\r\n * @dev Implemented token interface\r\n */\r\ncontract Token {\r\n    function transferSoldToken(address _contractAddr, address _to, uint256 _value) public returns(bool);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function totalSupply() public view returns (uint256);\r\n}\r\ncontract WhiteList {\r\n\tfunction register(address _address) public;\r\n\tfunction unregister(address _address) public;\r\n\tfunction isRegistered(address _address) public view returns(bool);\t\r\n}\r\n/**\r\n * @title BtradeIcoSale\r\n * @dev Smart contract for ico sale\r\n */\r\ncontract PriIcoSale {\r\n    using SafeMath for uint256;  // use SafeMath\r\n    \r\n    address public owner;              // BtradeIcoSale creator\r\n    address public beneficiary;        // After ico end, send to address\r\n    uint public fundingEthGoal;        // Goal funding ethereum amount\r\n    uint public raisedEthAmt;          // Funded ethereum amout\r\n    uint public totalSoldTokenCount;   // Sold total token count\r\n    uint public pricePerEther;         // Percentage of token per ethereum\r\n    \r\n    Token public tokenReward;          // ERC20 based token address\r\n\tWhiteList public whiteListMge;     // Whitelist manage contract address\r\n\t\r\n    bool enableWhiteList = false;      // check whitelist flag\r\n    bool public icoProceeding = false; // Whether ico is in progress\r\n    \r\n    mapping(address => uint256) public funderEthAmt;\r\n    \r\n    event ResistWhiteList(address funder, bool isRegist); // white list resist event\r\n    event UnregisteWhiteList(address funder, bool isRegist); // white list remove event\r\n    event FundTransfer(address backer, uint amount, bool isContribution); // Investment Event\r\n    event StartICO(address owner, bool isStart);\r\n\tevent CloseICO(address recipient, uint totalAmountRaised); // ico close event\r\n    event ReturnExcessAmount(address funder, uint amount);\r\n    \r\n    /**\r\n     * Constructor function\r\n     * Setup the owner\r\n     */\r\n    function PriIcoSale(address _sendAddress, uint _goalEthers, uint _dividendRate, address _tokenAddress, address _whiteListAddress) public {\r\n        require(_sendAddress != address(0));\r\n        require(_tokenAddress != address(0));\r\n        require(_whiteListAddress != address(0));\r\n        \r\n        owner = msg.sender; // set owner\r\n        beneficiary = _sendAddress; // set beneficiary \r\n        fundingEthGoal = _goalEthers * 1 ether; // set goal ethereu\r\n        pricePerEther = _dividendRate; // set price per ether\r\n        \r\n        tokenReward = Token(_tokenAddress); // set token address\r\n        \r\n    }\r\n    /**\r\n     * Start ICO crowdsale.\r\n     */\r\n    function startIco() public {\r\n        require(msg.sender == owner);\r\n        require(!icoProceeding);\r\n        icoProceeding = true;\r\n\t\temit StartICO(msg.sender, true);\r\n    }\r\n    /**\r\n     * Close ICO crowdsale.\r\n     */\r\n    function endIco() public {\r\n        require(msg.sender == owner);\r\n        require(icoProceeding);\r\n        icoProceeding = false;\r\n        emit CloseICO(beneficiary, raisedEthAmt);\r\n    }\r\n    /**\r\n     * Check whiteList.\r\n     */\r\n    function setEnableWhiteList(bool _flag) public {\r\n        require(msg.sender == owner);\r\n        require(enableWhiteList != _flag);\r\n        enableWhiteList = _flag;\r\n    }\r\n    /**\r\n     * Resist White list for to fund\r\n     * @param _funderAddress the address of the funder\r\n     */\r\n    function resistWhiteList(address _funderAddress) public {\r\n        require(msg.sender == owner);\r\n        require(_funderAddress != address(0));\t\t\r\n\t\trequire(!whiteListMge.isRegistered(_funderAddress));\r\n\t\t\r\n\t\twhiteListMge.register(_funderAddress);\r\n        emit ResistWhiteList(_funderAddress, true);\r\n    }\r\n    function removeWhiteList(address _funderAddress) public {\r\n        require(msg.sender == owner);\r\n        require(_funderAddress != address(0));\r\n        require(whiteListMge.isRegistered(_funderAddress));\r\n        \r\n        whiteListMge.unregister(_funderAddress);\r\n        emit UnregisteWhiteList(_funderAddress, false);\r\n    }\r\n    /**\r\n     * Fallback function\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () public payable {\r\n        require(icoProceeding);\r\n        require(raisedEthAmt < fundingEthGoal);\r\n        require(msg.value >= 0.1 ether); // Minimum deposit amount\r\n        if (enableWhiteList) {\r\n            require(whiteListMge.isRegistered(msg.sender));\r\n        }\r\n        \r\n        uint amount = msg.value; // Deposit amount\r\n        uint remainToGoal = fundingEthGoal - raisedEthAmt;\r\n        uint returnAmt = 0; // Amount to return when the goal is exceeded\r\n        if (remainToGoal < amount) {\r\n            returnAmt = msg.value.sub(remainToGoal);\r\n            amount = remainToGoal;\r\n        }\r\n        \r\n        // Token quantity calculation and token transfer, if excess amount is exceeded, it is sent to investor\r\n        uint tokenCount = amount.mul(pricePerEther);\r\n        if (tokenReward.transferSoldToken(address(this), msg.sender, tokenCount)) {\r\n            raisedEthAmt = raisedEthAmt.add(amount);\r\n            totalSoldTokenCount = totalSoldTokenCount.add(tokenCount);\r\n            funderEthAmt[msg.sender] = funderEthAmt[msg.sender].add(amount);\r\n            emit FundTransfer(msg.sender, amount, true);\r\n            \r\n            // The amount above the target amount is returned.\r\n            if (returnAmt > 0) {\r\n                msg.sender.transfer(returnAmt);\r\n                icoProceeding = false; // ICO close\r\n                emit ReturnExcessAmount(msg.sender, returnAmt);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Check if goal was reached\r\n     *\r\n     * Checks if the goal or time limit has been reached and ends the campaign\r\n     */\r\n    function checkGoalReached() public {\r\n        require(msg.sender == owner);\r\n        if (raisedEthAmt >= fundingEthGoal){\r\n            safeWithdrawal();\r\n        }\r\n        icoProceeding = false;\r\n    }\r\n    /**\r\n     * Withdraw the funds\r\n     */\r\n    function safeWithdrawal() public {\r\n        require(msg.sender == owner);\r\n        beneficiary.transfer(address(this).balance);\r\n        emit FundTransfer(beneficiary, address(this).balance, false);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_funderAddress\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setEnableWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedEthAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoProceeding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_funderAddress\",\"type\":\"address\"}],\"name\":\"resistWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSoldTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteListMge\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEthGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"funderEthAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_sendAddress\",\"type\":\"address\"},{\"name\":\"_goalEthers\",\"type\":\"uint256\"},{\"name\":\"_dividendRate\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_whiteListAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isRegist\",\"type\":\"bool\"}],\"name\":\"ResistWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isRegist\",\"type\":\"bool\"}],\"name\":\"UnregisteWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isStart\",\"type\":\"bool\"}],\"name\":\"StartICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"CloseICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReturnExcessAmount\",\"type\":\"event\"}]","ContractName":"PriIcoSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006c4764b1fa4b7ac3f8b49afb5f472dae57e364ee0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000ea60000000000000000000000000901322601f454149fc130093364720f32a8b0cb7000000000000000000000000839d4bc00744a64af316000c31ecbf26fc07727a","Library":"","SwarmSource":"bzzr://e335138fedcc5cdfce0259833fe779b037b529a4fef7bf024185fd8c8c3d9fc9"}]}