{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ETHERCFeeModifiers is Ownable {\r\n\r\n    // common discount/rebate\r\n    uint256 public commonDiscount;\r\n    uint256 public commonRebate;\r\n\r\n    // mapping of user addresses to fee discount\r\n    mapping (address => uint256) discounts;\r\n    // mapping of user addresses to fee rebate\r\n    mapping (address => uint256) rebates;\r\n\r\n    function ETHERCFeeModifiers() public {\r\n        commonDiscount = 0;\r\n        commonRebate = 0;\r\n    }\r\n\r\n    function accountFeeModifiers(address _user) public view returns (uint256 feeDiscount, uint256 feeRebate) {\r\n        feeDiscount = discounts[_user] > commonDiscount ? discounts[_user] : commonDiscount;\r\n        feeRebate = rebates[_user] > commonRebate ? rebates[_user] : commonRebate;\r\n    }\r\n\r\n    function tradingFeeModifiers(address _maker, address _taker) public view returns (uint256 feeMakeDiscount, uint256 feeTakeDiscount, uint256 feeRebate) {\r\n        feeMakeDiscount = discounts[_maker] > commonDiscount ? discounts[_maker] : commonDiscount;\r\n        feeTakeDiscount = discounts[_taker] > commonDiscount ? discounts[_taker] : commonDiscount;\r\n        feeRebate = rebates[_maker] > commonRebate ? rebates[_maker] : commonRebate;\r\n    }\r\n\r\n    function setAccountFeeModifiers(address _user, uint256 _feeDiscount, uint256 _feeRebate) public onlyOwner {\r\n        require(_feeDiscount <= 100 && _feeRebate <= 100);\r\n        discounts[_user] = _feeDiscount;\r\n        rebates[_user] = _feeRebate;\r\n    }\r\n\r\n    function changeCommonDiscount(uint256 _commonDiscount) public onlyOwner {\r\n        require(_commonDiscount <=100);\r\n        commonDiscount = _commonDiscount;\r\n    }\r\n\r\n    function changeCommonRebate(uint256 _commonRebate) public onlyOwner {\r\n        require(_commonRebate <=100);\r\n        commonRebate = _commonRebate;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"commonDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commonDiscount\",\"type\":\"uint256\"}],\"name\":\"changeCommonDiscount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"accountFeeModifiers\",\"outputs\":[{\"name\":\"feeDiscount\",\"type\":\"uint256\"},{\"name\":\"feeRebate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commonRebate\",\"type\":\"uint256\"}],\"name\":\"changeCommonRebate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commonRebate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"},{\"name\":\"_taker\",\"type\":\"address\"}],\"name\":\"tradingFeeModifiers\",\"outputs\":[{\"name\":\"feeMakeDiscount\",\"type\":\"uint256\"},{\"name\":\"feeTakeDiscount\",\"type\":\"uint256\"},{\"name\":\"feeRebate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_feeDiscount\",\"type\":\"uint256\"},{\"name\":\"_feeRebate\",\"type\":\"uint256\"}],\"name\":\"setAccountFeeModifiers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ETHERCFeeModifiers","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b42054d585c31b1dedfb0cd4d016b0f072a38543eacdb621c5533af5151cad86"}]}