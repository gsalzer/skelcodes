{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// File: contracts/Interfaces/MasterDepositInterface.sol\r\n\r\n/**\r\n * @dev Interface of MasterDeposit that should be used in child contracts \r\n * @dev this ensures that no duplication of code and implicit gasprice will be used for the dynamic creation of child contract\r\n */\r\ncontract MasterDepositInterface {\r\n    address public coldWallet1;\r\n    address public coldWallet2;\r\n    uint public percentage;\r\n    function fireDepositToChildEvent(uint _amount) public;\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ChildDeposit.sol\r\n\r\n/**\r\n* @dev Should be dinamically created from master contract \r\n* @dev multiple payers can contribute here \r\n*/\r\ncontract ChildDeposit {\r\n    \r\n    /**\r\n    * @dev prevents over and under flows\r\n    */\r\n    using SafeMath for uint;\r\n    \r\n    /**\r\n    * @dev import only the interface for low gas cost\r\n    */\r\n    // MasterDepositInterface public master;\r\n    address masterAddress;\r\n\r\n    function ChildDeposit() public {\r\n        masterAddress = msg.sender;\r\n        // master = MasterDepositInterface(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev any ETH income will fire a master deposit contract event\r\n    * @dev the redirect of ETH will be split in the two wallets provided by the master with respect to the share percentage set for wallet 1 \r\n    */\r\n    function() public payable {\r\n\r\n        MasterDepositInterface master = MasterDepositInterface(masterAddress);\r\n        // fire transfer event\r\n        master.fireDepositToChildEvent(msg.value);\r\n\r\n        // trasnfer of ETH\r\n        // with respect to the percentage set\r\n        uint coldWallet1Share = msg.value.mul(master.percentage()).div(100);\r\n        \r\n        // actual transfer\r\n        master.coldWallet1().transfer(coldWallet1Share);\r\n        master.coldWallet2().transfer(msg.value.sub(coldWallet1Share));\r\n    }\r\n\r\n    /**\r\n    * @dev function that can only be called by the creator of this contract\r\n    * @dev the actual condition of transfer is in the logic of the master contract\r\n    * @param _value ERC20 amount \r\n    * @param _tokenAddress ERC20 contract address \r\n    * @param _destination should be onbe of the 2 coldwallets\r\n    */\r\n    function withdraw(address _tokenAddress, uint _value, address _destination) public onlyMaster {\r\n        ERC20(_tokenAddress).transfer(_destination, _value);\r\n    }\r\n\r\n    modifier onlyMaster() {\r\n        require(msg.sender == address(masterAddress));\r\n        _;\r\n    }\r\n    \r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ReentrancyGuard.sol\r\n\r\n/**\r\n * @title Helps contracts guard agains reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancy_lock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancy_lock);\r\n    reentrancy_lock = true;\r\n    _;\r\n    reentrancy_lock = false;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Claimable.sol\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n// File: contracts/MasterDeposit.sol\r\n\r\n/**\r\n* @dev master contract that creates ChildDeposits. Responsible for controlling and setup of deposit chain.  \r\n* @dev all functions that should be called from child deposits are specified in the MasterDepositInterface \r\n*/\r\ncontract MasterDeposit is MasterDepositInterface, Claimable, ReentrancyGuard {\r\n    \r\n    /**\r\n    * @dev prevents over and under flows\r\n    */\r\n    using SafeMath for uint;\r\n\r\n    /**\r\n    * @dev mapping of all created child deposits\r\n    */\r\n    mapping (address => bool) public childDeposits;\r\n\r\n    /**\r\n    * @dev responsible for creating deposits (in this way the owner isn't exposed to a api/server security breach)\r\n    * @dev by loosing the depositCreator key an attacker can only create deposits that will not be a real threat and another depositCreator can be allocated\r\n    */\r\n    address public depositCreator;\r\n\r\n    /**\r\n    * @dev Fired at create time\r\n    * @param _depositAddress blockchain address of the newly created deposit contract\r\n    */\r\n    event CreatedDepositEvent (\r\n    address indexed _depositAddress\r\n    );\r\n    \r\n    /**\r\n    * @dev Fired at transfer time\r\n    * @dev Event that signals the transfer of an ETH amount \r\n    * @param _depositAddress blockchain address of the deposit contract that received ETH\r\n    * @param _amount of ETH\r\n    */\r\n    event DepositToChildEvent(\r\n    address indexed _depositAddress, \r\n    uint _amount\r\n    );\r\n\r\n\r\n    /**\r\n    * @param _wallet1 redirect of tokens (ERC20) or ETH\r\n    * @param _wallet2 redirect of tokens (ERC20) or eth\r\n    * @param _percentage _wallet1 split percentage \r\n    */\r\n    function MasterDeposit(address _wallet1, address _wallet2, uint _percentage) onlyValidPercentage(_percentage) public {\r\n        require(_wallet1 != address(0));\r\n        require(_wallet2 != address(0));\r\n        percentage = _percentage;\r\n        coldWallet1 = _wallet1;\r\n        coldWallet2 = _wallet2;\r\n    }\r\n\r\n    /**\r\n    * @dev creates a number of instances of ChildDeposit contracts\r\n    * @param _count creates a specified number of deposit contracts\r\n    */\r\n    function createChildDeposits(uint _count) public onlyDepositCreatorOrMaster {\r\n        for (uint i = 0; i < _count; i++) {\r\n            ChildDeposit childDeposit = new ChildDeposit();\r\n            childDeposits[address(childDeposit)] = true;\r\n            emit CreatedDepositEvent(address(childDeposit));    \r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev setter for the address that is responsible for creating deposits \r\n    */\r\n    function setDepositCreator(address _depositCreator) public onlyOwner {\r\n        require(_depositCreator != address(0));\r\n        depositCreator = _depositCreator;\r\n    }\r\n\r\n    /**\r\n    * @dev Setter for the income percentage in the first coldwallet (not setting this the second wallet will receive all income)\r\n    */\r\n    function setColdWallet1SplitPercentage(uint _percentage) public onlyOwner onlyValidPercentage(_percentage) {\r\n        percentage = _percentage;\r\n    }\r\n\r\n    /**\r\n    * @dev function created to emit the ETH transfer event from the child contract only\r\n    * @param _amount ETH amount \r\n    */\r\n    function fireDepositToChildEvent(uint _amount) public onlyChildContract {\r\n        emit DepositToChildEvent(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev changes the coldwallet1 address\r\n    */\r\n    function setColdWallet1(address _coldWallet1) public onlyOwner {\r\n        require(_coldWallet1 != address(0));\r\n        coldWallet1 = _coldWallet1;\r\n    }\r\n\r\n    /**\r\n    * @dev changes the coldwallet2 address\r\n    */\r\n    function setColdWallet2(address _coldWallet2) public onlyOwner {\r\n        require(_coldWallet2 != address(0));\r\n        coldWallet2 = _coldWallet2;\r\n    }\r\n\r\n    /**\r\n    * @dev function that can be called only by owner due to security reasons and will withdraw the amount of ERC20 tokens\r\n    * @dev from the deposit contract list to the cold wallets \r\n    * @dev transfers only the ERC20 tokens, ETH should be transferred automatically\r\n    * @param _deposits batch list with all deposit contracts that might hold ERC20 tokens\r\n    * @param _tokenContractAddress specifies what token to be transfered form each deposit from the batch to the cold wallets\r\n    */\r\n    function transferTokens(address[] _deposits, address _tokenContractAddress) public onlyOwner nonReentrant {\r\n        for (uint i = 0; i < _deposits.length; i++) {\r\n            address deposit = _deposits[i];\r\n            uint erc20Balance = ERC20(_tokenContractAddress).balanceOf(deposit);\r\n\r\n            // if no balance found just skip\r\n            if (erc20Balance == 0) {\r\n                continue;\r\n            }\r\n            \r\n            // trasnfer of erc20 tokens\r\n            // with respect to the percentage set\r\n            uint coldWallet1Share = erc20Balance.mul(percentage).div(100);\r\n            uint coldWallet2Share = erc20Balance.sub(coldWallet1Share); \r\n            ChildDeposit(deposit).withdraw(_tokenContractAddress,coldWallet1Share, coldWallet1);\r\n            ChildDeposit(deposit).withdraw(_tokenContractAddress,coldWallet2Share, coldWallet2);\r\n        }\r\n    }\r\n\r\n    modifier onlyChildContract() {\r\n        require(childDeposits[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDepositCreatorOrMaster() {\r\n        require(msg.sender == owner || msg.sender == depositCreator);\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidPercentage(uint _percentage) {\r\n        require(_percentage >=0 && _percentage <= 100);\r\n        _;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_deposits\",\"type\":\"address[]\"},{\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coldWallet2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fireDepositToChildEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coldWallet2\",\"type\":\"address\"}],\"name\":\"setColdWallet2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setColdWallet1SplitPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"createChildDeposits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coldWallet1\",\"type\":\"address\"}],\"name\":\"setColdWallet1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"childDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coldWallet1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_depositCreator\",\"type\":\"address\"}],\"name\":\"setDepositCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet1\",\"type\":\"address\"},{\"name\":\"_wallet2\",\"type\":\"address\"},{\"name\":\"_percentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_depositAddress\",\"type\":\"address\"}],\"name\":\"CreatedDepositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_depositAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositToChildEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MasterDeposit","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009e96604445ec19ffed9a5e8dd7b50a29c899a10c0000000000000000000000000d6b5a54f940bf3d52e438cab785981aaefdf40c0000000000000000000000000000000000000000000000000000000000000032","Library":"","SwarmSource":"bzzr://8627e710f6a862c593ab778fea898909bc783a318766b9179a6c460dca700e33"}]}