{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n\r\n\r\ncontract AnthillFarmer{\r\n    //uint256 ANTS_PER_ANTHILL_PER_SECOND=1;\r\n    uint256 public ANTS_TO_COLLECT_1ANTHILL=86400;//for final version should be seconds in a day\r\n    uint256 public STARTING_ANTHILL=300;\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized=false;\r\n    address public ceoAddress;\r\n    mapping (address => uint256) public Anthills;\r\n    mapping (address => uint256) public claimedAnts;\r\n    mapping (address => uint256) public lastCollect;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketAnts;\r\n    function AnthillFarmer() public{\r\n        ceoAddress=msg.sender;\r\n    }\r\n    function collectAnts(address ref) public{\r\n        require(initialized);\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 antsUsed=getMyAnts();\r\n        uint256 newAnthill=SafeMath.div(antsUsed,ANTS_TO_COLLECT_1ANTHILL);\r\n        Anthills[msg.sender]=SafeMath.add(Anthills[msg.sender],newAnthill);\r\n        claimedAnts[msg.sender]=0;\r\n        lastCollect[msg.sender]=now;\r\n        \r\n        //send referral ants\r\n        claimedAnts[referrals[msg.sender]]=SafeMath.add(claimedAnts[referrals[msg.sender]],SafeMath.div(antsUsed,5));\r\n        \r\n        //boost market to nerf anthill hoarding\r\n        marketAnts=SafeMath.add(marketAnts,SafeMath.div(antsUsed,10));\r\n    }\r\n    function sellAnts() public{\r\n        require(initialized);\r\n        uint256 hasAnts=getMyAnts();\r\n        uint256 antValue=calculateAntSell(hasAnts);\r\n        uint256 fee=devFee(antValue);\r\n        claimedAnts[msg.sender]=0;\r\n        lastCollect[msg.sender]=now;\r\n        marketAnts=SafeMath.add(marketAnts,hasAnts);\r\n        ceoAddress.transfer(fee);\r\n        msg.sender.transfer(SafeMath.sub(antValue,fee));\r\n    }\r\n    function buyAnts() public payable{\r\n        require(initialized);\r\n        uint256 antsBought=calculateAntBuy(msg.value,SafeMath.sub(this.balance,msg.value));\r\n        antsBought=SafeMath.sub(antsBought,devFee(antsBought));\r\n        ceoAddress.transfer(devFee(msg.value));\r\n        claimedAnts[msg.sender]=SafeMath.add(claimedAnts[msg.sender],antsBought);\r\n    }\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculateAntSell(uint256 ants) public view returns(uint256){\r\n        return calculateTrade(ants,marketAnts,this.balance);\r\n    }\r\n    function calculateAntBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth,contractBalance,marketAnts);\r\n    }\r\n    function calculateAntBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateAntBuy(eth,this.balance);\r\n    }\r\n    function devFee(uint256 amount) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,4),100);\r\n    }\r\n    function seedMarket(uint256 ants) public payable{\r\n        require(marketAnts==0);\r\n        initialized=true;\r\n        marketAnts=ants;\r\n    }\r\n    function getFreeAnthill() public{\r\n        require(initialized);\r\n        require(Anthills[msg.sender]==0);\r\n        lastCollect[msg.sender]=now;\r\n        Anthills[msg.sender]=STARTING_ANTHILL;\r\n    }\r\n    function getBalance() public view returns(uint256){\r\n        return this.balance;\r\n    }\r\n    function getMyAnthill() public view returns(uint256){\r\n        return Anthills[msg.sender];\r\n    }\r\n    function getMyAnts() public view returns(uint256){\r\n        return SafeMath.add(claimedAnts[msg.sender],getAntsSinceLastCollect(msg.sender));\r\n    }\r\n    function getAntsSinceLastCollect(address adr) public view returns(uint256){\r\n        uint256 secondsPassed=min(ANTS_TO_COLLECT_1ANTHILL,SafeMath.sub(now,lastCollect[adr]));\r\n        return SafeMath.mul(secondsPassed,Anthills[adr]);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketAnts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Anthills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ants\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_ANTHILL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyAnthill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAnts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastCollect\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyAnts\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getAntsSinceLastCollect\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFreeAnthill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellAnts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"collectAnts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateAntBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ants\",\"type\":\"uint256\"}],\"name\":\"calculateAntSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyAnts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateAntBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ANTS_TO_COLLECT_1ANTHILL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"AnthillFarmer","CompilerVersion":"v0.4.24-nightly.2018.5.16+commit.7f965c86","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a5cdce4b90268318e57d9dd41921c9399aabf7693125116c53721d2f77951622"}]}