{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) pure internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a,uint b) pure internal returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) pure internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) pure internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract EthPyramid {\r\n  function buyPrice() public constant returns (uint) {}   \r\n}\r\n\r\ncontract PonziBet {\r\n    \r\n  using SafeMath for uint;\r\n\r\n  EthPyramid public pyramid;\r\n\r\n  address public admin;\r\n  address public contractAddress;\r\n\r\n  uint public minBet;\r\n  uint public roundTime;\r\n  uint public startPrice;  \r\n  uint public endPrice;\r\n  \r\n  uint[] public upBetRecords; \r\n  uint[] public downBetRecords;\r\n  \r\n  mapping (address => uint) lastBet;\r\n  mapping (address => bool) userBet;\r\n  mapping (bool => uint) totalBalance;\r\n  mapping (address => uint) feeBalance;\r\n  mapping (address => mapping (bool => uint)) userBalances;\r\n  \r\n  function PonziBet() public {\r\n    admin = msg.sender;      \r\n  }       \r\n  \r\n  modifier onlyAdmin() {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }  \r\n\r\n  function changeContractAddress(address _contract) \r\n     external\r\n     onlyAdmin\r\n  {\r\n     contractAddress = _contract;\r\n     pyramid = EthPyramid(contractAddress);\r\n  }\r\n\r\n  function changeMinBet(uint _minBet)\r\n     external\r\n     onlyAdmin\r\n  {\r\n     minBet = _minBet;\r\n  }\r\n\r\n  function withdrawFromFeeBalance() \r\n     external\r\n     onlyAdmin\r\n  {\r\n    if(!msg.sender.send(feeBalance[msg.sender])) revert();  \r\n  } \r\n\r\n  function recordBet(bool _bet,uint _userAmount)\r\n    private\r\n  {\r\n    userBalances[msg.sender][_bet] = _userAmount;\r\n    totalBalance[_bet] = totalBalance[_bet].add(_userAmount);\r\n    userBet[msg.sender] = _bet;\r\n    _bet ? upBetRecords.push(_userAmount) : downBetRecords.push(_userAmount);      \r\n  }\r\n\r\n  function enterRound(bool _bet) \r\n     external \r\n     payable \r\n  {\r\n    require(msg.value >= 10000000000000000);\r\n    if(roundTime == uint(0) || roundTime + 30 minutes <= now) {\r\n      endPrice = uint(0);\r\n      upBetRecords.length = uint(0);\r\n      downBetRecords.length = uint(0);\r\n      startPrice = pyramid.buyPrice();\r\n      roundTime = now;    \r\n    }\r\n    if(roundTime + 15 minutes > now) {\r\n      uint fee = msg.value.div(20);\r\n      uint userAmount = msg.value.sub(fee);\r\n      feeBalance[admin] =  feeBalance[admin].add(fee);\r\n      if(_bet == true) {\r\n        recordBet(true,userAmount);\r\n      }\r\n      else if(_bet == false) {\r\n        recordBet(false,userAmount);\r\n      }   \r\n      lastBet[msg.sender] = now;\r\n    }\r\n    else {\r\n      revert();\r\n    }\r\n  }    \r\n  \r\n  function settleBet(bool _bet)\r\n    private\r\n  {\r\n      uint reward = (userBalances[msg.sender][_bet].mul(totalBalance[!_bet])).div(totalBalance[_bet]);\r\n      uint totalWithdrawal = reward.add(userBalances[msg.sender][_bet]);\r\n      totalBalance[!_bet] = totalBalance[!_bet].sub(reward);\r\n      totalBalance[_bet] = totalBalance[_bet].sub(userBalances[msg.sender][_bet]);\r\n      msg.sender.transfer(totalWithdrawal);\r\n  }\r\n  \r\n  function placeBet() \r\n     external\r\n  {\r\n    require(lastBet[msg.sender] < roundTime + 15 minutes && roundTime + 15 minutes < now && roundTime + 30 minutes > now);\r\n    if(endPrice == uint(0)) {\r\n      endPrice = pyramid.buyPrice();    \r\n    }\r\n    if(startPrice >= endPrice && userBet[msg.sender] == true ) {\r\n      settleBet(true);\r\n    }\r\n    else if(startPrice < endPrice && userBet[msg.sender] == false ) {\r\n      settleBet(false);\r\n    }\r\n    else {\r\n      revert();\r\n    }\r\n  }\r\n  \r\n  function totalBalanceUp() view external returns(uint) {\r\n      return totalBalance[true];\r\n  }\r\n  \r\n  function totalBalanceDown() view external returns(uint) {\r\n      return totalBalance[false];\r\n  }\r\n  \r\n  function getUserBet() view external returns(bool) {\r\n    return userBet[msg.sender];\r\n  }\r\n\r\n  function getUserBalances() view external returns(uint) {\r\n    return userBalances[msg.sender][userBet[msg.sender]];\r\n  }\r\n  \r\n  function getUserBalancesLastBet() view external returns(uint) {\r\n    return lastBet[msg.sender];\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalBalanceDown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"downBetRecords\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pyramid\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bet\",\"type\":\"bool\"}],\"name\":\"enterRound\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBalanceUp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserBet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"changeContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"upBetRecords\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserBalancesLastBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBet\",\"type\":\"uint256\"}],\"name\":\"changeMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFromFeeBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"placeBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PonziBet","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://93619b244d5f0092b7e113b10d23222f67abdd17070ccb0273b84ab3f9a33e06"}]}