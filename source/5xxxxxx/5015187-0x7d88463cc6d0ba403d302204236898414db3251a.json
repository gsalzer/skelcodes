{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Application Entity Generic Contract\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n    Used for the ABI interface when assets need to call Application Entity.\r\n\r\n    This is required, otherwise we end up loading the assets themselves when we load the ApplicationEntity contract\r\n    and end up in a loop\r\n*/\r\n\r\n\r\n\r\ncontract ApplicationEntityABI {\r\n\r\n    address public ProposalsEntity;\r\n    address public FundingEntity;\r\n    address public MilestonesEntity;\r\n    address public MeetingsEntity;\r\n    address public BountyManagerEntity;\r\n    address public TokenManagerEntity;\r\n    address public ListingContractEntity;\r\n    address public FundingManagerEntity;\r\n    address public NewsContractEntity;\r\n\r\n    bool public _initialized = false;\r\n    bool public _locked = false;\r\n    uint8 public CurrentEntityState;\r\n    uint8 public AssetCollectionNum;\r\n    address public GatewayInterfaceAddress;\r\n    address public deployerAddress;\r\n    address testAddressAllowUpgradeFrom;\r\n    mapping (bytes32 => uint8) public EntityStates;\r\n    mapping (bytes32 => address) public AssetCollection;\r\n    mapping (uint8 => bytes32) public AssetCollectionIdToName;\r\n    mapping (bytes32 => uint256) public BylawsUint256;\r\n    mapping (bytes32 => bytes32) public BylawsBytes32;\r\n\r\n    function ApplicationEntity() public;\r\n    function getEntityState(bytes32 name) public view returns (uint8);\r\n    function linkToGateway( address _GatewayInterfaceAddress, bytes32 _sourceCodeUrl ) external;\r\n    function setUpgradeState(uint8 state) public ;\r\n    function addAssetProposals(address _assetAddresses) external;\r\n    function addAssetFunding(address _assetAddresses) external;\r\n    function addAssetMilestones(address _assetAddresses) external;\r\n    function addAssetMeetings(address _assetAddresses) external;\r\n    function addAssetBountyManager(address _assetAddresses) external;\r\n    function addAssetTokenManager(address _assetAddresses) external;\r\n    function addAssetFundingManager(address _assetAddresses) external;\r\n    function addAssetListingContract(address _assetAddresses) external;\r\n    function addAssetNewsContract(address _assetAddresses) external;\r\n    function getAssetAddressByName(bytes32 _name) public view returns (address);\r\n    function setBylawUint256(bytes32 name, uint256 value) public;\r\n    function getBylawUint256(bytes32 name) public view returns (uint256);\r\n    function setBylawBytes32(bytes32 name, bytes32 value) public;\r\n    function getBylawBytes32(bytes32 name) public view returns (bytes32);\r\n    function initialize() external returns (bool);\r\n    function getParentAddress() external view returns(address);\r\n    function createCodeUpgradeProposal( address _newAddress, bytes32 _sourceCodeUrl ) external returns (uint256);\r\n    function acceptCodeUpgradeProposal(address _newAddress) external;\r\n    function initializeAssetsToThisApplication() external returns (bool);\r\n    function transferAssetsToNewApplication(address _newAddress) external returns (bool);\r\n    function lock() external returns (bool);\r\n    function canInitiateCodeUpgrade(address _sender) public view returns(bool);\r\n    function doStateChanges() public;\r\n    function hasRequiredStateChanges() public view returns (bool);\r\n    function anyAssetHasChanges() public view returns (bool);\r\n    function extendedAnyAssetHasChanges() internal view returns (bool);\r\n    function getRequiredStateChanges() public view returns (uint8, uint8);\r\n    function getTimestamp() view public returns (uint256);\r\n\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Application Asset Contract\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n Any contract inheriting this will be usable as an Asset in the Application Entity\r\n\r\n*/\r\n\r\n\r\n\r\n\r\ncontract ApplicationAsset {\r\n\r\n    event EventAppAssetOwnerSet(bytes32 indexed _name, address indexed _owner);\r\n    event EventRunBeforeInit(bytes32 indexed _name);\r\n    event EventRunBeforeApplyingSettings(bytes32 indexed _name);\r\n\r\n\r\n    mapping (bytes32 => uint8) public EntityStates;\r\n    mapping (bytes32 => uint8) public RecordStates;\r\n    uint8 public CurrentEntityState;\r\n\r\n    event EventEntityProcessor(bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required);\r\n    event DebugEntityRequiredChanges( bytes32 _assetName, uint8 indexed _current, uint8 indexed _required );\r\n\r\n    bytes32 public assetName;\r\n\r\n    /* Asset records */\r\n    uint8 public RecordNum = 0;\r\n\r\n    /* Asset initialised or not */\r\n    bool public _initialized = false;\r\n\r\n    /* Asset settings present or not */\r\n    bool public _settingsApplied = false;\r\n\r\n    /* Asset owner ( ApplicationEntity address ) */\r\n    address public owner = address(0x0) ;\r\n    address public deployerAddress;\r\n\r\n    function ApplicationAsset() public {\r\n        deployerAddress = msg.sender;\r\n    }\r\n\r\n    function setInitialApplicationAddress(address _ownerAddress) public onlyDeployer requireNotInitialised {\r\n        owner = _ownerAddress;\r\n    }\r\n\r\n    function setInitialOwnerAndName(bytes32 _name) external\r\n        requireNotInitialised\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        // init states\r\n        setAssetStates();\r\n        assetName = _name;\r\n        // set initial state\r\n        CurrentEntityState = getEntityState(\"NEW\");\r\n        runBeforeInitialization();\r\n        _initialized = true;\r\n        EventAppAssetOwnerSet(_name, owner);\r\n        return true;\r\n    }\r\n\r\n    function setAssetStates() internal {\r\n        // Asset States\r\n        EntityStates[\"__IGNORED__\"]     = 0;\r\n        EntityStates[\"NEW\"]             = 1;\r\n        // Funding Stage States\r\n        RecordStates[\"__IGNORED__\"]     = 0;\r\n    }\r\n\r\n    function getRecordState(bytes32 name) public view returns (uint8) {\r\n        return RecordStates[name];\r\n    }\r\n\r\n    function getEntityState(bytes32 name) public view returns (uint8) {\r\n        return EntityStates[name];\r\n    }\r\n\r\n    function runBeforeInitialization() internal requireNotInitialised  {\r\n        EventRunBeforeInit(assetName);\r\n    }\r\n\r\n    function applyAndLockSettings()\r\n        public\r\n        onlyDeployer\r\n        requireInitialised\r\n        requireSettingsNotApplied\r\n        returns(bool)\r\n    {\r\n        runBeforeApplyingSettings();\r\n        _settingsApplied = true;\r\n        return true;\r\n    }\r\n\r\n    function runBeforeApplyingSettings() internal requireInitialised requireSettingsNotApplied  {\r\n        EventRunBeforeApplyingSettings(assetName);\r\n    }\r\n\r\n    function transferToNewOwner(address _newOwner) public requireInitialised onlyOwner returns (bool) {\r\n        require(owner != address(0x0) && _newOwner != address(0x0));\r\n        owner = _newOwner;\r\n        EventAppAssetOwnerSet(assetName, owner);\r\n        return true;\r\n    }\r\n\r\n    function getApplicationAssetAddressByName(bytes32 _name)\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        address asset = ApplicationEntityABI(owner).getAssetAddressByName(_name);\r\n        if( asset != address(0x0) ) {\r\n            return asset;\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function getApplicationState() public view returns (uint8) {\r\n        return ApplicationEntityABI(owner).CurrentEntityState();\r\n    }\r\n\r\n    function getApplicationEntityState(bytes32 name) public view returns (uint8) {\r\n        return ApplicationEntityABI(owner).getEntityState(name);\r\n    }\r\n\r\n    function getAppBylawUint256(bytes32 name) public view requireInitialised returns (uint256) {\r\n        ApplicationEntityABI CurrentApp = ApplicationEntityABI(owner);\r\n        return CurrentApp.getBylawUint256(name);\r\n    }\r\n\r\n    function getAppBylawBytes32(bytes32 name) public view requireInitialised returns (bytes32) {\r\n        ApplicationEntityABI CurrentApp = ApplicationEntityABI(owner);\r\n        return CurrentApp.getBylawBytes32(name);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyApplicationEntity() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier requireInitialised() {\r\n        require(_initialized == true);\r\n        _;\r\n    }\r\n\r\n    modifier requireNotInitialised() {\r\n        require(_initialized == false);\r\n        _;\r\n    }\r\n\r\n    modifier requireSettingsApplied() {\r\n        require(_settingsApplied == true);\r\n        _;\r\n    }\r\n\r\n    modifier requireSettingsNotApplied() {\r\n        require(_settingsApplied == false);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDeployer() {\r\n        require(msg.sender == deployerAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAsset(bytes32 _name) {\r\n        address AssetAddress = getApplicationAssetAddressByName(_name);\r\n        require( msg.sender == AssetAddress);\r\n        _;\r\n    }\r\n\r\n    function getTimestamp() view public returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        News Contract\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n Contains This Application's News Items\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract NewsContract is ApplicationAsset {\r\n\r\n    // state types\r\n    // 1 - generic news item\r\n\r\n    // 2 - FUNDING FAILED\r\n    // 3 - FUNDING SUCCESSFUL\r\n    // 4 - MEETING DATE AND TIME SET\r\n    // 5 - VOTING INITIATED\r\n\r\n    // 10 - GLOBAL CASHBACK AVAILABLE\r\n    // 50 - CODE UPGRADE PROPOSAL INITIATED\r\n\r\n    // 100 - DEVELOPMENT COMPLETE, HELLO SKYNET\r\n\r\n    // news items\r\n    struct item {\r\n        string hash;\r\n        uint8 itemType;\r\n        uint256 length;\r\n    }\r\n\r\n    mapping ( uint256 => item ) public items;\r\n    uint256 public itemNum = 0;\r\n\r\n    event EventNewsItem(string _hash);\r\n    event EventNewsState(uint8 itemType);\r\n\r\n    function NewsContract() ApplicationAsset() public {\r\n\r\n    }\r\n\r\n    function addInternalMessage(uint8 state) public requireInitialised {\r\n        require(msg.sender == owner); // only application\r\n        item storage child = items[++itemNum];\r\n        child.itemType = state;\r\n        EventNewsState(state);\r\n    }\r\n\r\n    function addItem(string _hash, uint256 _length) public onlyAppDeployer requireInitialised {\r\n        item storage child = items[++itemNum];\r\n        child.hash = _hash;\r\n        child.itemType = 1;\r\n        child.length = _length;\r\n        EventNewsItem(_hash);\r\n    }\r\n\r\n    modifier onlyAppDeployer() {\r\n        ApplicationEntityABI currentApp = ApplicationEntityABI(owner);\r\n        require(msg.sender == currentApp.deployerAddress());\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getRecordState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"addInternalMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RecordNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"string\"},{\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"addItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"RecordStates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"EntityStates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getApplicationState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurrentEntityState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferToNewOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getApplicationAssetAddressByName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"applyAndLockSettings\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"setInitialOwnerAndName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"setInitialApplicationAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"name\":\"hash\",\"type\":\"string\"},{\"name\":\"itemType\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_settingsApplied\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAppBylawBytes32\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getEntityState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"itemNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAppBylawUint256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getApplicationEntityState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"EventNewsItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"itemType\",\"type\":\"uint8\"}],\"name\":\"EventNewsState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_name\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"EventAppAssetOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"EventRunBeforeInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"EventRunBeforeApplyingSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_assetName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_current\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"_required\",\"type\":\"uint8\"}],\"name\":\"EventEntityProcessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_assetName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_current\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"_required\",\"type\":\"uint8\"}],\"name\":\"DebugEntityRequiredChanges\",\"type\":\"event\"}]","ContractName":"NewsContract","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c5bd41f12e4dca4ca6fb2f7bb352bc49ea4051091a9ea4402ca6e1787686208a"}]}