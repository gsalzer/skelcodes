{"status":"1","message":"OK","result":[{"SourceCode":"contract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value) returns (bool);\r\n  function approve(address spender, uint value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/*\r\nThe owner (or anyone) will deposit tokens in here\r\nThe owner calls the multisend method to send out payments\r\n*/\r\ncontract BatchedPayments is Ownable {\r\n\r\n    mapping(bytes32 => bool) successfulPayments;\r\n\r\n\r\n    function paymentSuccessful(bytes32 paymentId) public constant returns (bool){\r\n        return (successfulPayments[paymentId] == true);\r\n    }\r\n\r\n    //withdraw any eth inside\r\n    function withdraw() public onlyOwner {\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n\r\n    function send(address _tokenAddr, address dest, uint value)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n     return ERC20(_tokenAddr).transfer(dest, value);\r\n    }\r\n\r\n    function multisend(address _tokenAddr, bytes32 paymentId, address[] dests, uint256[] values)\r\n    public onlyOwner\r\n    returns (uint256)\r\n     {\r\n\r\n        require(dests.length > 0);\r\n        require(values.length >= dests.length);\r\n        require(successfulPayments[paymentId] != true);\r\n\r\n        uint256 i = 0;\r\n        while (i < dests.length) {\r\n           require(ERC20(_tokenAddr).transfer(dests[i], values[i]));\r\n           i += 1;\r\n        }\r\n\r\n        successfulPayments[paymentId] = true;\r\n\r\n        return (i);\r\n\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"paymentId\",\"type\":\"bytes32\"}],\"name\":\"paymentSuccessful\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multisend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BatchedPayments","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d884a9f1fb9dbdd9ed0ad8ecb78382ed46a67597555ea0cf75d99d481f189977"}]}