{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract Auscoin is StandardToken, Ownable {\r\n  // Publicly listed name\r\n  string public name = \"AUSCOIN COIN\";\r\n  // Symbol under which token will be trading\r\n  string public symbol = \"AUSC\";\r\n  // 1 ETH consists of 10^18 Wei, which is the smallest ETH unit\r\n  uint8 public decimals = 18;\r\n  // Defining the value of a million for easy calculations - order of declaration matters (hoisting)\r\n  uint256 million = 1000000 * (uint256(10) ** decimals);\r\n  // We are offering a total of 100 Million Auscoin Tokens to distribute\r\n  uint256 public totalSupply = 100 * million;\r\n  // This is established on contract deployment in relevance to the (at the time) ETH/USD exchange rate\r\n  uint256 public exchangeRate;\r\n  // Initialized to 0, this value tracks the total amount of ETH sent to the smart contract\r\n  uint256 public totalEthRaised = 0;\r\n  // The time at which the ICO allows for buy interactions, 12th Feb 6PM\r\n  uint256 public startTime;\r\n  // The time at which the ICO stops buy interactions, 12th Feb 6PM + 28 days, after this only transfers and withdrawals are allowed\r\n  uint256 public endTime;\r\n  // The AusGroup token allocation will not be available to AusGroup until this date\r\n  uint256 public ausGroupReleaseDate;\r\n  // Address where the ether raised is transfered to and address where the token balance is stored within the balances mapping\r\n  address public fundsWallet;\r\n  // Address where the bonus tokens are transferred to and held\r\n  address public bonusWallet;\r\n  // Address where AusGroup tokens are held\r\n  address public ausGroup;\r\n  // Whitelister - the entity with permission to add addresses to the whiteList mapping\r\n  address public whiteLister;\r\n\r\n  // Initial Allocation amounts\r\n  uint256 public ausGroupAllocation = 50 * million;\r\n  uint256 public bountyAllocation = 1 * million;\r\n  uint256 public preSeedAllocation = 3 * million;\r\n  uint256 public bonusAllocation = 6 * million;\r\n\r\n  // Whitelisted mapping - the addresses which have participated in the ICO and are allowed to transact after the ICO.\r\n  // ICO Participants need to be verify their identity before they can use AusCoin\r\n  mapping (address => bool) public whiteListed;\r\n\r\n  // ICO Participant\r\n  mapping (address => bool) isICOParticipant;\r\n\r\n  // Constants\r\n  uint256 numberOfMillisecsPerYear = 365 * 24 * 60 * 60 * 1000;\r\n  uint256 amountPerYearAvailableToAusGroup = 5 * million;\r\n\r\n  function Auscoin(\r\n    uint256 _startTime,\r\n    uint256 _endTime,\r\n    uint256 _ausGroupReleaseDate,\r\n    uint256 _exchangeRate,\r\n    address _bonusWallet,\r\n    address _ausGroup,\r\n    address _bounty,\r\n    address _preSeedFund,\r\n    address _whiteLister\r\n  )\r\n    public\r\n  {\r\n    fundsWallet = owner;\r\n    bonusWallet = _bonusWallet;\r\n    startTime = _startTime;\r\n    endTime = _endTime; // 4 weeks\r\n    ausGroupReleaseDate = _ausGroupReleaseDate;\r\n    exchangeRate = _exchangeRate;\r\n    ausGroup = _ausGroup;\r\n    whiteLister = _whiteLister;\r\n\r\n    // Assign total supply to funds wallet\r\n    // https://github.com/OpenZeppelin/zeppelin-solidity/issues/494\r\n    // A token contract which creates new tokens SHOULD trigger a Transfer event with the _from address set to 0x0 when tokens are created.\r\n    balances[fundsWallet] = totalSupply;\r\n    Transfer(0x0, fundsWallet, totalSupply);\r\n\r\n    // Allocate bonus tokens\r\n    // https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/BasicToken.sol\r\n    // The inherited transfer method from the StandardToken which inherits from BasicToken emits Transfer events and subtracts/adds respective\r\n    // amounts to respective accounts\r\n    super.transfer(bonusWallet, bonusAllocation);\r\n\r\n    // Transfer pre-allocated funds\r\n    super.transfer(_ausGroup, ausGroupAllocation);\r\n\r\n    // Allocate bounty funds\r\n    super.transfer(_bounty, bountyAllocation);\r\n\r\n    // Allocate pre-seed funds\r\n    super.transfer(_preSeedFund, preSeedAllocation);\r\n  }\r\n\r\n  // Time utility function\r\n  function currentTime() public view returns (uint256) {\r\n    return now * 1000;\r\n  }\r\n\r\n  // calculateBonusAmount, view tag attached as it does not manipulate state\r\n  function calculateBonusAmount(uint256 amount) view internal returns (uint256) {\r\n    uint256 totalAvailableDuringICO = totalSupply - (bonusAllocation + ausGroupAllocation + bountyAllocation + preSeedAllocation);\r\n    uint256 sold = totalAvailableDuringICO - balances[fundsWallet];\r\n\r\n    uint256 amountForThirtyBonusBracket = int256((10 * million) - sold) > 0 ? (10 * million) - sold : 0;\r\n    uint256 amountForTwentyBonusBracket = int256((20 * million) - sold) > 0 ? (20 * million) - sold : 0;\r\n    uint256 amountForTenBonusBracket = int256((30 * million) - sold) > 0 ? (30 * million) - sold : 0;\r\n\r\n    uint256 thirtyBonusBracket = Math.min256(Math.max256(0, amountForThirtyBonusBracket), Math.min256(amount, (10 * million)));\r\n    uint256 twentyBonusBracket = Math.min256(Math.max256(0, amountForTwentyBonusBracket), Math.min256(amount - thirtyBonusBracket, (10 * million)));\r\n    uint256 tenBonusBracket = Math.min256(Math.max256(0, amountForTenBonusBracket), Math.min256(amount - twentyBonusBracket - thirtyBonusBracket, (10 * million)));\r\n\r\n    uint256 totalBonus = thirtyBonusBracket.mul(30).div(100) + twentyBonusBracket.mul(20).div(100) + tenBonusBracket.mul(10).div(100);\r\n\r\n    return totalBonus;\r\n  }\r\n\r\n  // Payable functions. Fall out and low level buy\r\n  // isIcoOpen modifier ensures ETH payments can only be made if the ICO is 'open', after start and before end date (or if all tokens are sold)\r\n  // payable is needed on the fallback function in order to receive Ether\r\n  // Reference: http://solidity.readthedocs.io/en/develop/contracts.html\r\n  function() isIcoOpen payable public {\r\n    buyTokens();\r\n  }\r\n\r\n  function buyTokens() isIcoOpen payable public {\r\n    // Use the exchange rate set at deployment to calculate the amount of tokens the transferred ETH converts to\r\n    uint256 tokenAmount = msg.value.mul(exchangeRate);\r\n    // Calculate the bonus the sender will receive based on which Tier the current Smart Contract is sitting on\r\n    uint256 bonusAmount = calculateBonusAmount(tokenAmount);\r\n    // Ensure that the tokenAmount is greater than the total funds currently present\r\n    require(balances[fundsWallet] >= tokenAmount);\r\n    // Ensure that the bonusAmount is greater than the total bonus currently availbale in the bonusWallet\r\n    require(balances[bonusWallet] >= bonusAmount);\r\n\r\n    // Add to the state level ETH raised value\r\n    totalEthRaised = totalEthRaised.add(msg.value);\r\n\r\n    // Deduct the said amount from the relevant wallet addresses in the balance map\r\n    balances[bonusWallet] = balances[bonusWallet].sub(bonusAmount);\r\n    balances[fundsWallet] = balances[fundsWallet].sub(tokenAmount);\r\n    // Add the sold tokens to the sender's wallet address in the balance map for them to claim after ICO\r\n    balances[msg.sender] = balances[msg.sender].add(tokenAmount.add(bonusAmount));\r\n\r\n    // Add them to the isICOParticipant mapping\r\n    isICOParticipant[msg.sender] = true;\r\n\r\n    fundsWallet.transfer(msg.value);\r\n\r\n    // Since we did not use the transfer method, we manually emit the Transfer event\r\n    Transfer(fundsWallet, msg.sender, tokenAmount);\r\n    Transfer(bonusWallet, msg.sender, bonusAmount);\r\n  }\r\n\r\n  function addToWhiteList(address _purchaser) canAddToWhiteList public {\r\n    whiteListed[_purchaser] = true;\r\n  }\r\n\r\n  function setWhiteLister(address _newWhiteLister) onlyOwner public {\r\n    whiteLister = _newWhiteLister;\r\n  }\r\n\r\n  // Transfers\r\n  function transfer(address _to, uint _value) isIcoClosed public returns (bool success) {\r\n    require(msg.sender != ausGroup);\r\n    if (isICOParticipant[msg.sender]) {\r\n      require(whiteListed[msg.sender]);\r\n    }\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function ausgroupTransfer(address _to, uint _value) timeRestrictedAccess isValidAusGroupTransfer(_value) public returns (bool success) {\r\n    require(msg.sender == ausGroup);\r\n    require(balances[ausGroup] >= _value);\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  // Override to enforce modifier that ensures that ICO is closed before the following function is invoked\r\n  function transferFrom(address _from, address _to, uint _value) isIcoClosed public returns (bool success) {\r\n    require(_from != ausGroup);\r\n    if (isICOParticipant[_from]) {\r\n      require(whiteListed[_from]);\r\n    }\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function burnUnsoldTokens() isIcoClosed onlyOwner public {\r\n    uint256 bonusLeft = balances[bonusWallet];\r\n    uint256 fundsLeft = balances[fundsWallet];\r\n    // Burn anything in our balances map\r\n    balances[bonusWallet] = 0;\r\n    balances[fundsWallet] = 0;\r\n    Transfer(bonusWallet, 0, bonusLeft);\r\n    Transfer(fundsWallet, 0, fundsLeft);\r\n  }\r\n\r\n  // Modifiers\r\n  modifier isIcoOpen() {\r\n    require(currentTime() >= startTime);\r\n    require(currentTime() < endTime);\r\n    _;\r\n  }\r\n\r\n  modifier isIcoClosed() {\r\n    require(currentTime() >= endTime);\r\n    _;\r\n  }\r\n\r\n  modifier timeRestrictedAccess() {\r\n    require(currentTime() >= ausGroupReleaseDate);\r\n    _;\r\n  }\r\n\r\n  modifier canAddToWhiteList() {\r\n    require(msg.sender == whiteLister);\r\n    _;\r\n  }\r\n\r\n  modifier isValidAusGroupTransfer(uint256 _value) {\r\n    uint256 yearsAfterRelease = ((currentTime() - ausGroupReleaseDate) / numberOfMillisecsPerYear) + 1;\r\n    uint256 cumulativeTotalAvailable = yearsAfterRelease * amountPerYearAvailableToAusGroup;\r\n    require(cumulativeTotalAvailable > 0);\r\n    uint256 amountAlreadyTransferred = ausGroupAllocation - balances[ausGroup];\r\n    uint256 amountAvailable = cumulativeTotalAvailable - amountAlreadyTransferred;\r\n    require(_value <= amountAvailable);\r\n    _;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"bonusAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ausGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_purchaser\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ausgroupTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWhiteLister\",\"type\":\"address\"}],\"name\":\"setWhiteLister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ausGroupReleaseDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ausGroupAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteLister\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSeedAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_ausGroupReleaseDate\",\"type\":\"uint256\"},{\"name\":\"_exchangeRate\",\"type\":\"uint256\"},{\"name\":\"_bonusWallet\",\"type\":\"address\"},{\"name\":\"_ausGroup\",\"type\":\"address\"},{\"name\":\"_bounty\",\"type\":\"address\"},{\"name\":\"_preSeedFund\",\"type\":\"address\"},{\"name\":\"_whiteLister\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Auscoin","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000016188d02d800000000000000000000000000000000000000000000000000000016219023d80000000000000000000000000000000000000000000000000000001782015c180000000000000000000000000000000000000000000000000000000000000047e000000000000000000000000f15a103b07467224d1e90cb3e39349646c18323800000000000000000000000080d10df9bab5faad5a4869e0067ce3d529b0a614000000000000000000000000f48a37499eef8c8a8f3456a715cf449461cca7100000000000000000000000008588473ded6b54f5b2428409d4b23dd922bfc75d00000000000000000000000023d3fe92dac510f940ae68faf700c809229c6c27","Library":"","SwarmSource":"bzzr://e9df579f23b898d0ecc85579dc81ff80510bc861533777b12591948255aef044"}]}