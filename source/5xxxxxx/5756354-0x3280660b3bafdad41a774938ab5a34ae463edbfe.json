{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// Deploying version: https://github.com/astralship/auction-ethereum/commit/1359e14e0319c6019eb9c7e57348b95c722e3dd6\r\n// Timestamp Converter: 1529279999\r\n// Is equivalent to: 06/17/2018 @ 11:59pm (UTC)\r\n// Sunday midnight, in a week ?\r\n\r\ncontract Auction {\r\n  \r\n  string public description;\r\n  string public instructions; // will be used for delivery address or email\r\n  uint public price;\r\n  bool public initialPrice = true; // at first asking price is OK, then +25% required\r\n  uint public timestampEnd;\r\n  address public beneficiary;\r\n  bool public finalized = false;\r\n\r\n  address public owner;\r\n  address public winner;\r\n  mapping(address => uint) public bids;\r\n  address[] public accountsList; // so we can iterate: https://ethereum.stackexchange.com/questions/13167/are-there-well-solved-and-simple-storage-patterns-for-solidity\r\n\r\n  // THINK: should be (an optional) constructor parameter?\r\n  // For now if you want to change - simply modify the code\r\n  uint public increaseTimeIfBidBeforeEnd = 24 * 60 * 60; // Naming things: https://www.instagram.com/p/BSa_O5zjh8X/\r\n  uint public increaseTimeBy = 24 * 60 * 60;\r\n  \r\n\r\n  event Bid(address indexed winner, uint indexed price, uint indexed timestamp);\r\n  event Refund(address indexed sender, uint indexed amount, uint indexed timestamp);\r\n  \r\n  modifier onlyOwner { require(owner == msg.sender, \"only owner\"); _; }\r\n  modifier onlyWinner { require(winner == msg.sender, \"only winner\"); _; }\r\n  modifier ended { require(now > timestampEnd, \"not ended yet\"); _; }\r\n\r\n  function setDescription(string _description) public onlyOwner() {\r\n    description = _description;\r\n  }\r\n\r\n  function setInstructions(string _instructions) public ended() onlyWinner()  {\r\n    instructions = _instructions;\r\n  }\r\n\r\n  constructor(uint _price, string _description, uint _timestampEnd, address _beneficiary) public {\r\n    require(_timestampEnd > now, \"end of the auction must be in the future\");\r\n    owner = msg.sender;\r\n    price = _price;\r\n    description = _description;\r\n    timestampEnd = _timestampEnd;\r\n    beneficiary = _beneficiary;\r\n  }\r\n\r\n  function() public payable {\r\n\r\n    if (msg.value == 0) { // when sending `0` it acts as if it was `withdraw`\r\n      refund();\r\n      return;\r\n    }\r\n\r\n    require(now < timestampEnd, \"auction has ended\"); // sending ether only allowed before the end\r\n\r\n    if (bids[msg.sender] > 0) { // First we add the bid to an existing bid\r\n      bids[msg.sender] += msg.value;\r\n    } else {\r\n      bids[msg.sender] = msg.value;\r\n      accountsList.push(msg.sender); // this is out first bid, therefore adding \r\n    }\r\n\r\n    if (initialPrice) {\r\n      require(bids[msg.sender] >= price, \"bid too low, minimum is the initial price\");\r\n    } else {\r\n      require(bids[msg.sender] >= (price * 5 / 4), \"bid too low, minimum 25% increment\");\r\n    }\r\n    \r\n    if (now > timestampEnd - increaseTimeIfBidBeforeEnd) {\r\n      timestampEnd = now + increaseTimeBy;\r\n    }\r\n\r\n    initialPrice = false;\r\n    price = bids[msg.sender];\r\n    winner = msg.sender;\r\n    emit Bid(winner, price, now);\r\n  }\r\n\r\n  function finalize() public ended() onlyOwner() {\r\n    require(finalized == false, \"can withdraw only once\");\r\n    require(initialPrice == false, \"can withdraw only if there were bids\");\r\n\r\n    finalized = true; // THINK: DAO hack reentrancy - does it matter which order? (just in case setting it first)\r\n    beneficiary.send(price);\r\n\r\n    bids[winner] = 0; // setting it to zero that in the refund loop it is skipped\r\n    for (uint i = 0; i < accountsList.length;  i++) {\r\n      if (bids[accountsList[i]] > 0) {\r\n        accountsList[i].send( bids[accountsList[i]] ); // send? transfer? tell me baby: https://ethereum.stackexchange.com/a/38642/2524\r\n        bids[accountsList[i]] = 0; // in case someone calls `refund` again\r\n      }\r\n    }     \r\n  }\r\n\r\n  function refund() public {\r\n    require(msg.sender != winner, \"winner cannot refund\");\r\n\r\n    msg.sender.send( bids[msg.sender] );\r\n    emit Refund(msg.sender, bids[msg.sender], now);\r\n    bids[msg.sender] = 0;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"timestampEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"instructions\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"increaseTimeIfBidBeforeEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"increaseTimeBy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountsList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_instructions\",\"type\":\"string\"}],\"name\":\"setInstructions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_timestampEnd\",\"type\":\"uint256\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"}]","ContractName":"Auction","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005b26f5ff000000000000000000000000a6528eb6737f42180acbb8cb5dd44f66d0c17141000000000000000000000000000000000000000000000000000000000000001e4f726967696e616c207369676e656420454f5320776869746570617065720000","Library":"","SwarmSource":"bzzr://fc3863bf337d79b60f798d025138b8249e82acdcc925427621fb980475221921"}]}