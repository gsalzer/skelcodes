{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ncontract ColorsData is Ownable {\r\n\r\n    struct Color {\r\n\t    string label;\r\n\t\tuint64 creationTime;\r\n    }\r\n\r\n\tevent Transfer(address from, address to, uint256 colorId);\r\n    event Sold(uint256 colorId, uint256 priceWei, address winner);\r\n\t\r\n    Color[] colors;\r\n\r\n    mapping (uint256 => address) public ColorIdToOwner;\r\n    mapping (uint256 => uint256) public ColorIdToLastPaid;\r\n    \r\n}\r\n\r\ncontract ColorsApis is ColorsData {\r\n\r\n    function getColor(uint256 _id) external view returns (string label, uint256 lastPaid, uint256 price) {\r\n        Color storage color1 = colors[_id];\r\n\t\tlabel = color1.label;\r\n        lastPaid = ColorIdToLastPaid[_id];\r\n\t\tprice = lastPaid + ((lastPaid * 2) / 10);\r\n    }\r\n\r\n    function registerColor(string label, uint256 startingPrice) external onlyOwner {        \r\n        Color memory _Color = Color({\r\n\t\t    label: label,\r\n            creationTime: uint64(now)\r\n        });\r\n\r\n        uint256 newColorId = colors.push(_Color) - 1;\r\n\t\tColorIdToLastPaid[newColorId] = startingPrice;\r\n        _transfer(0, msg.sender, newColorId);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _ColorId) external {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(ColorIdToOwner[_ColorId] == msg.sender);\r\n        _transfer(msg.sender, _to, _ColorId);\r\n    }\r\n\r\n    function ownerOf(uint256 _ColorId) external view returns (address owner) {\r\n        owner = ColorIdToOwner[_ColorId];\r\n        require(owner != address(0));\r\n    }\r\n        \r\n    function bid(uint256 _ColorId) external payable {\r\n        uint256 lastPaid = ColorIdToLastPaid[_ColorId];\r\n        require(lastPaid > 0);\r\n\t\t\r\n\t\tuint256 price = lastPaid + ((lastPaid * 2) / 10);\r\n        require(msg.value >= price);\r\n\t\t\r\n\t\taddress colorOwner = ColorIdToOwner[_ColorId];\r\n\t\tuint256 colorOwnerPayout = lastPaid + (lastPaid / 10);\r\n        colorOwner.transfer(colorOwnerPayout);\r\n\t\t\r\n\t\t// Transfer whatever is left to owner\r\n        owner.transfer(msg.value - colorOwnerPayout);\r\n\t\t\r\n\t\tColorIdToLastPaid[_ColorId] = msg.value;\r\n\t\tColorIdToOwner[_ColorId] = msg.sender;\r\n\r\n\t\t// Trigger sold event\r\n        Sold(_ColorId, msg.value, msg.sender); \r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _ColorId) internal {\r\n        ColorIdToOwner[_ColorId] = _to;        \r\n        Transfer(_from, _to, _ColorId);\r\n    }\r\n}\r\n\r\ncontract ColorsMain is ColorsApis {\r\n\r\n    function ColorsMain() public payable {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function createStartingColors() external onlyOwner {\r\n        require(colors.length == 0);\r\n        this.registerColor(\"Red\", 1);\r\n    }\r\n    \r\n    function() external payable {\r\n        require(msg.sender == address(0));\r\n    }\r\n    \r\n}\r\n\r\ncontract PixelsData is Ownable {\r\n\r\n    struct Pixel {\r\n        address currentOwner;\r\n        uint256 lastPricePaid;\r\n\t\tuint64 lastUpdatedTime;\r\n    }\r\n\r\n    event Sold(uint256 x, uint256 y, uint256 colorId, uint256 priceWei, address winner);\r\n\t\r\n    mapping (uint256 => Pixel) public PixelKeyToPixel;\r\n    \r\n    ColorsMain colorsMain;\r\n    \r\n    uint256 startingPriceWei = 5000000000000000;\r\n}\r\n\r\ncontract PixelsApi is PixelsData {\r\n    \r\n    function bidBatch(uint256[] inputs, address optionlReferrer) external payable {\r\n        require(inputs.length > 0);\r\n        require(inputs.length % 3 == 0);        \r\n        \r\n        uint256 rollingPriceRequired = 0;\r\n        \r\n        for(uint256 i = 0; i < inputs.length; i+=3)\r\n        {\r\n            uint256 x = inputs[i];\r\n            uint256 y = inputs[i+1];\r\n        \r\n            uint256 lastPaid = startingPriceWei;\r\n            uint256 pixelKey =  x + (y * 10000000);\r\n            Pixel storage pixel = PixelKeyToPixel[pixelKey];\r\n            \r\n            if(pixel.lastUpdatedTime != 0) {\r\n                lastPaid = pixel.lastPricePaid;\r\n            }\r\n    \t\t\r\n    \t\trollingPriceRequired += lastPaid + ((lastPaid * 2) / 10);\r\n        }\r\n        \r\n        require(msg.value >= rollingPriceRequired);\r\n        \r\n        for(uint256 z = 0; z < inputs.length; z+=3)\r\n        {\r\n            uint256 x1 = inputs[z];\r\n            uint256 y1 = inputs[z+1];\r\n            uint256 colorId = inputs[z+2];\r\n            bid(x1, y1, colorId, optionlReferrer);\r\n        }\r\n    }\r\n    \r\n    function bid(uint256 x, uint256 y, uint256 colorId, address optionlReferrer) internal {\r\n        uint256 lastPaid = startingPriceWei;\r\n        address currentOwner = owner;\r\n        uint256 pixelKey =  x + (y * 10000000);\r\n        \r\n        Pixel storage pixel = PixelKeyToPixel[pixelKey];\r\n        \r\n        if(pixel.lastUpdatedTime != 0) {\r\n            lastPaid = pixel.lastPricePaid;\r\n            currentOwner = pixel.currentOwner;\r\n        }\r\n\t\t\r\n\t\tuint256 price = lastPaid + ((lastPaid * 2) / 10);\r\n        require(msg.value >= price);\r\n        \r\n        address colorOwner;\r\n        \r\n        if(colorId == 99999) { //white\r\n            colorOwner = owner;\r\n        } else {\r\n            colorOwner = colorsMain.ownerOf(colorId);\r\n        }\r\n        \r\n\t\trequire(colorOwner != 0);\r\n\t\t\r\n\t\tuint256 currentOwnerPayout = lastPaid + (lastPaid / 10);\r\n        currentOwner.transfer(currentOwnerPayout);\r\n        \r\n\t\tuint256 remainingPayout = price - currentOwnerPayout;\r\n\t\tuint256 colorOwnersFee = remainingPayout / 2;\r\n        colorOwner.transfer(colorOwnersFee);\r\n        \r\n        uint256 referralFee = 0;\r\n        \r\n        if(optionlReferrer != 0) {\r\n            referralFee = colorOwnersFee / 2;\r\n            optionlReferrer.transfer(referralFee);\r\n        }\r\n        \r\n        owner.transfer(colorOwnersFee - referralFee);\r\n        \r\n        Pixel memory _Pixel = Pixel({\r\n            currentOwner: msg.sender,\r\n\t\t    lastPricePaid: price,\r\n            lastUpdatedTime: uint64(now)\r\n        });\r\n\r\n        PixelKeyToPixel[pixelKey] = _Pixel;\r\n\r\n        Sold(x, y, colorId, price, msg.sender); \r\n    }\r\n    \r\n    function setColorContract(address colorContract) external onlyOwner {        \r\n        colorsMain = ColorsMain(colorContract);\r\n    }\r\n    \r\n}\r\n\r\ncontract PixelsMain is PixelsApi {\r\n \r\n    function PixelsMain() public payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function() external payable {\r\n        require(msg.sender == address(0));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"name\":\"optionlReferrer\",\"type\":\"address\"}],\"name\":\"bidBatch\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PixelKeyToPixel\",\"outputs\":[{\"name\":\"currentOwner\",\"type\":\"address\"},{\"name\":\"lastPricePaid\",\"type\":\"uint256\"},{\"name\":\"lastUpdatedTime\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"colorContract\",\"type\":\"address\"}],\"name\":\"setColorContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"colorId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"Sold\",\"type\":\"event\"}]","ContractName":"PixelsMain","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b017f95b4b24fefafbf5676fdf49c2873867c2700c3e4e58928744454983a678"}]}