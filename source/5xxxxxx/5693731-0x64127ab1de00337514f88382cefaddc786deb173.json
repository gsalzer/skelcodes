{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract Gladiethers\r\n{\r\n    address public m_Owner;\r\n    address public partner;\r\n\r\n    mapping (address => uint) public gladiatorToPower; // gladiator power\r\n    mapping (address => uint) public gladiatorToCooldown;\r\n    mapping(address => uint) public gladiatorToQueuePosition;\r\n    mapping(address => uint) public gladiatorToPowerBonus;\r\n    mapping(address => bool)  public trustedContracts;\r\n    address public kingGladiator;\r\n    address[] public queue;\r\n\r\n    uint founders = 0;\r\n\r\n    event fightEvent(address indexed g1,address indexed g2,uint random,uint fightPower,uint g1Power);\r\n    modifier OnlyOwnerAndContracts() {\r\n        require(msg.sender == m_Owner ||  trustedContracts[msg.sender]);\r\n        _;\r\n    }\r\n    function ChangeAddressTrust(address contract_address,bool trust_flag) public OnlyOwnerAndContracts() {\r\n        require(msg.sender != contract_address);\r\n        trustedContracts[contract_address] = trust_flag;\r\n    }\r\n    \r\n    function Gladiethers() public{\r\n        m_Owner = msg.sender;\r\n    }\r\n    \r\n    function setPartner(address contract_partner) public OnlyOwnerAndContracts(){\r\n        partner = contract_partner;\r\n    }\r\n\r\n    function joinArena() public payable returns (bool){\r\n\r\n        require( msg.value >= 10 finney );\r\n\r\n        if(founders < 50 && gladiatorToPowerBonus[msg.sender] == 0){\r\n            gladiatorToPowerBonus[msg.sender] = 5; // 5% increase in the power of your gladiator for eveeer\r\n            founders++;\r\n        }else if(founders < 100 && gladiatorToPowerBonus[msg.sender] == 0){\r\n            gladiatorToPowerBonus[msg.sender] = 2; // 2% increase in the power\r\n            founders++;\r\n        }else if(founders < 200 && gladiatorToPowerBonus[msg.sender] == 0){\r\n            gladiatorToPowerBonus[msg.sender] = 1; // 1% increase in the power\r\n            founders++;\r\n        }\r\n\r\n        if(queue.length > gladiatorToQueuePosition[msg.sender]){\r\n\r\n            if(queue[gladiatorToQueuePosition[msg.sender]] == msg.sender){\r\n                gladiatorToPower[msg.sender] += msg.value;\r\n                return false;\r\n            }\r\n            \r\n        }\r\n        \r\n        enter(msg.sender);\r\n        return true;  \r\n\r\n    }\r\n\r\n    function enter(address gladiator) private{\r\n        gladiatorToCooldown[gladiator] = now + 1 days;\r\n        queue.push(gladiator);\r\n        gladiatorToQueuePosition[gladiator] = queue.length - 1;\r\n        gladiatorToPower[gladiator] += msg.value;\r\n    }\r\n\r\n\r\n    function remove(address gladiator) private returns(bool){\r\n        \r\n        if(queue.length > gladiatorToQueuePosition[gladiator]){\r\n\r\n            if(queue[gladiatorToQueuePosition[gladiator]] == gladiator){ // is on the line ?\r\n            \r\n                queue[gladiatorToQueuePosition[gladiator]] = queue[queue.length - 1];\r\n                gladiatorToQueuePosition[queue[queue.length - 1]] = gladiatorToQueuePosition[gladiator];\r\n                gladiatorToCooldown[gladiator] =  9999999999999; // indicative number to know when it is in battle\r\n                delete queue[queue.length - 1];\r\n                queue.length = queue.length - (1);\r\n                return true;\r\n                \r\n            }\r\n           \r\n        }\r\n        return false;\r\n        \r\n        \r\n    }\r\n\r\n    function removeOrc(address _gladiator) public OnlyOwnerAndContracts(){\r\n         remove(_gladiator);\r\n    }\r\n\r\n    function setCooldown(address gladiator, uint cooldown) internal{\r\n        gladiatorToCooldown[gladiator] = cooldown;\r\n    }\r\n\r\n    function getGladiatorPower(address gladiator) public view returns (uint){\r\n        return gladiatorToPower[gladiator];\r\n    }\r\n    \r\n    function getQueueLenght() public view returns (uint){\r\n        return queue.length;\r\n    }\r\n\r\n    function fight(address gladiator1,string _result) public OnlyOwnerAndContracts(){\r\n\r\n        uint indexgladiator2 = uint(sha3(_result)) % queue.length; // this is an efficient way to get the uint out in the [0, maxRange] range\r\n        uint randomNumber = uint(sha3(_result)) % 1000;\r\n        address gladiator2 = queue[indexgladiator2];\r\n        \r\n        require(gladiatorToPower[gladiator1] >= 10 finney && gladiator1 != gladiator2);\r\n\r\n        \r\n        uint g1chance = getChancePowerWithBonus(gladiator1);\r\n        uint g2chance = getChancePowerWithBonus(gladiator2);\r\n        uint fightPower = SafeMath.add(g1chance,g2chance);\r\n\r\n        g1chance = (g1chance*1000)/fightPower;\r\n\r\n        if(g1chance <= 958){\r\n            g1chance = SafeMath.add(g1chance,40);\r\n        }else{\r\n            g1chance = 998;\r\n        }\r\n\r\n        fightEvent( gladiator1, gladiator2,randomNumber,fightPower,getChancePowerWithBonus(gladiator1));\r\n        uint devFee;\r\n\r\n        if(randomNumber <= g1chance ){ // Wins the Attacker\r\n            devFee = SafeMath.div(SafeMath.mul(gladiatorToPower[gladiator2],4),100);\r\n\r\n            gladiatorToPower[gladiator1] =  SafeMath.add( gladiatorToPower[gladiator1], SafeMath.sub(gladiatorToPower[gladiator2],devFee) );\r\n            queue[gladiatorToQueuePosition[gladiator2]] = gladiator1;\r\n            gladiatorToQueuePosition[gladiator1] = gladiatorToQueuePosition[gladiator2];\r\n            gladiatorToPower[gladiator2] = 0;\r\n            gladiatorToCooldown[gladiator1] = now + 1 days; // reset atacker cooldown\r\n\r\n            if(gladiatorToPower[gladiator1] > gladiatorToPower[kingGladiator] ){ // check if is the biggest guy in the arena\r\n                kingGladiator = gladiator1;\r\n            }\r\n\r\n        }else{\r\n            //Defender Wins\r\n            devFee = SafeMath.div(SafeMath.mul(gladiatorToPower[gladiator1],4),100);\r\n\r\n            gladiatorToPower[gladiator2] = SafeMath.add( gladiatorToPower[gladiator2],SafeMath.sub(gladiatorToPower[gladiator1],devFee) );\r\n            gladiatorToPower[gladiator1] = 0;\r\n\r\n            if(gladiatorToPower[gladiator2] > gladiatorToPower[kingGladiator] ){\r\n                kingGladiator = gladiator2;\r\n            }\r\n\r\n        }\r\n\r\n        \r\n        gladiatorToPower[kingGladiator] = SafeMath.add( gladiatorToPower[kingGladiator],SafeMath.div(devFee,4) ); // gives 1%      (4% dead gladiator / 4 )\r\n        gladiatorToPower[m_Owner] = SafeMath.add( gladiatorToPower[m_Owner] , SafeMath.sub(devFee,SafeMath.div(devFee,4)) ); // 4total - 1king  = 3%\r\n\r\n    }\r\n\r\n    function getChancePowerWithBonus(address gladiator) public view returns(uint power){\r\n        return SafeMath.add(gladiatorToPower[gladiator],SafeMath.div(SafeMath.mul(gladiatorToPower[gladiator],gladiatorToPowerBonus[gladiator]),100));\r\n    }\r\n\r\n\r\n    function withdraw(uint amount) public  returns (bool success){\r\n        address withdrawalAccount;\r\n        uint withdrawalAmount;\r\n\r\n        // owner and partner can withdraw\r\n        if (msg.sender == m_Owner || msg.sender == partner ) {\r\n            withdrawalAccount = m_Owner;\r\n            withdrawalAmount = gladiatorToPower[m_Owner];\r\n            uint partnerFee = SafeMath.div(SafeMath.mul(gladiatorToPower[withdrawalAccount],15),100);\r\n\r\n            // set funds to 0\r\n            gladiatorToPower[withdrawalAccount] = 0;\r\n\r\n            if (!m_Owner.send(SafeMath.sub(withdrawalAmount,partnerFee))) revert(); // send to owner\r\n            if (!partner.send(partnerFee)) revert(); // send to partner\r\n\r\n            return true;\r\n        }else{\r\n\r\n            withdrawalAccount = msg.sender;\r\n            withdrawalAmount = amount;\r\n\r\n            // cooldown has been reached and the ammout i possible\r\n            if(gladiatorToCooldown[msg.sender] < now && gladiatorToPower[withdrawalAccount] >= withdrawalAmount){\r\n\r\n                gladiatorToPower[withdrawalAccount] = SafeMath.sub(gladiatorToPower[withdrawalAccount],withdrawalAmount);\r\n\r\n                // gladiator have to be removed from areana if the power is less then 0.01 eth\r\n                if(gladiatorToPower[withdrawalAccount] < 10 finney){\r\n                    remove(msg.sender);\r\n                }\r\n\r\n            }else{\r\n                return false;\r\n            }\r\n\r\n        }\r\n\r\n        if (withdrawalAmount == 0) revert();\r\n\r\n        // send the funds\r\n        if (!msg.sender.send(withdrawalAmount)) revert();\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"gladiator\",\"type\":\"address\"}],\"name\":\"getGladiatorPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gladiator\",\"type\":\"address\"}],\"name\":\"removeOrc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gladiatorToPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kingGladiator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gladiator\",\"type\":\"address\"}],\"name\":\"getChancePowerWithBonus\",\"outputs\":[{\"name\":\"power\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinArena\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contract_partner\",\"type\":\"address\"}],\"name\":\"setPartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gladiator1\",\"type\":\"address\"},{\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"fight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQueueLenght\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gladiatorToQueuePosition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_Owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gladiatorToCooldown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contract_address\",\"type\":\"address\"},{\"name\":\"trust_flag\",\"type\":\"bool\"}],\"name\":\"ChangeAddressTrust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"trustedContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gladiatorToPowerBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"g1\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"g2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"random\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fightPower\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"g1Power\",\"type\":\"uint256\"}],\"name\":\"fightEvent\",\"type\":\"event\"}]","ContractName":"Gladiethers","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://97d915e7a862fd212ec659df312ee1ec7c490fd56123d06e609847c87270f991"}]}