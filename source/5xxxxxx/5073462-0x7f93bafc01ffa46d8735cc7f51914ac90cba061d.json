{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * Libraries\r\n */\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * Helper contracts\r\n */\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract Destructible is Ownable {\r\n\r\n  function Destructible() public payable { }\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) onlyOwner public {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Proxy\r\n */\r\n\r\ncontract Proxy is Ownable, Destructible, Pausable {\r\n    // crowdsale contract\r\n    Crowdsale public crowdsale;\r\n\r\n    function Proxy(Crowdsale _crowdsale) public {\r\n        setCrowdsale(_crowdsale);\r\n    }\r\n\r\n    function setCrowdsale(address _crowdsale) onlyOwner public {\r\n        require(_crowdsale != address(0));\r\n        crowdsale = Crowdsale(_crowdsale);\r\n    }\r\n\r\n    function () external whenNotPaused payable {\r\n        // buy tokens from crowdsale\r\n        crowdsale.buyTokens.value(msg.value)(msg.sender);\r\n    }\r\n}\r\n\r\n/**\r\n * Proxy\r\n */\r\n\r\ncontract Referral is Ownable, Destructible, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    Crowdsale public crowdsale;\r\n    Token public token;\r\n\r\n    address public beneficiary;\r\n\r\n    function Referral(address _crowdsale, address _token, address _beneficiary) public {\r\n        setCrowdsale(_crowdsale);\r\n        setToken(_token);\r\n        setBeneficiary(_beneficiary);\r\n    }\r\n\r\n    function setCrowdsale(address _crowdsale) onlyOwner public {\r\n        require(_crowdsale != address(0));\r\n        crowdsale = Crowdsale(_crowdsale);\r\n    }\r\n\r\n    function setToken(address _token) onlyOwner public {\r\n        require(_token != address(0));\r\n        token = Token(_token);\r\n    }\r\n\r\n    function setBeneficiary(address _beneficiary) onlyOwner public {\r\n        require(_beneficiary != address(0));\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function () external whenNotPaused payable {\r\n        uint256 tokens = crowdsale.buyTokens.value(msg.value)(this);\r\n\r\n        uint256 baseAmount = crowdsale.getBaseAmount(msg.value);\r\n        uint256 refTokens = baseAmount.div(10);\r\n\r\n        // send 10% to referral\r\n        token.transfer(beneficiary, refTokens);\r\n\r\n        // remove 10%\r\n        tokens = tokens.sub(refTokens);\r\n\r\n        // send eth to buyer\r\n        token.transfer(msg.sender, tokens);\r\n    }\r\n}\r\n\r\n/**\r\n * CCOS Token\r\n */\r\n\r\ncontract Token is StandardToken, BurnableToken, DetailedERC20, Destructible {\r\n    function Token(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply)\r\n        DetailedERC20(_name, _symbol, _decimals) public\r\n        {\r\n\r\n        // covert to ether\r\n        _totalSupply = _totalSupply;\r\n\r\n        totalSupply_ = _totalSupply;\r\n\r\n        // give moneyz to us\r\n        balances[msg.sender] = totalSupply_;\r\n\r\n        // first event\r\n        Transfer(0x0, msg.sender, totalSupply_);\r\n    }\r\n}\r\n\r\n/**\r\n * CCOS Crowdsale\r\n */\r\n\r\ncontract Crowdsale is Ownable, Pausable, Destructible {\r\n    using SafeMath for uint256;\r\n\r\n    struct Vault {\r\n        uint256 tokenAmount;\r\n        uint256 weiValue;\r\n        address referralBeneficiary;\r\n    }\r\n\r\n    struct CustomContract {\r\n        bool isReferral;\r\n        bool isSpecial;\r\n        address referralAddress;\r\n    }\r\n\r\n    // Manual kill switch\r\n    bool crowdsaleConcluded = false;\r\n\r\n    // The token being sold\r\n    Token public token;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // minimum investment\r\n    uint256 minimum_invest = 100000000000000;\r\n\r\n    // regular bonus amounts\r\n    uint256 week_1 = 20;\r\n    uint256 week_2 = 15;\r\n    uint256 week_3 = 10;\r\n    uint256 week_4 = 0;\r\n\r\n    // custom bonus amounts\r\n    uint256 week_special_1 = 40;\r\n    uint256 week_special_2 = 15;\r\n    uint256 week_special_3 = 10;\r\n    uint256 week_special_4 = 0;\r\n\r\n    uint256 week_referral_1 = 25;\r\n    uint256 week_referral_2 = 20;\r\n    uint256 week_referral_3 = 15;\r\n    uint256 week_referral_4 = 5;\r\n\r\n    // bonus ducks\r\n    mapping (address => CustomContract) public customBonuses;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public rate;\r\n\r\n    // amount of raised in wei\r\n    uint256 public weiRaised;\r\n    uint256 public tokensSold;\r\n\r\n    // amount on hold for KYC\r\n    uint256 public tokensOnHold;\r\n\r\n    // high-ballers\r\n    mapping(address => Vault) ballers;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _token) public {\r\n        require(_endTime >= _startTime);\r\n        require(_rate > 0);\r\n        require(_wallet != address(0));\r\n        require(_token != address(0));\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n        token = Token(_token);\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () external whenNotPaused payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address _beneficiary) public whenNotPaused payable returns (uint256) {\r\n        require(!hasEnded());\r\n\r\n        // minimum investment\r\n        require(minimum_invest <= msg.value);\r\n\r\n        address beneficiary = _beneficiary;\r\n\r\n        require(beneficiary != address(0));\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be sent\r\n        var tokens = getTokenAmount(weiAmount);\r\n\r\n        // if we run out of tokens\r\n        bool isLess = false;\r\n        if (!hasEnoughTokensLeft(weiAmount)) {\r\n            isLess = true;\r\n\r\n            uint256 percentOfValue = tokensLeft().mul(100).div(tokens);\r\n            require(percentOfValue <= 100);\r\n\r\n            tokens = tokens.mul(percentOfValue).div(100);\r\n            weiAmount = weiAmount.mul(percentOfValue).div(100);\r\n\r\n            // send back unused ethers\r\n            beneficiary.transfer(msg.value.sub(weiAmount));\r\n        }\r\n\r\n        // update raised ETH amount\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        tokensSold = tokensSold.add(tokens);\r\n\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        // Require a KYC, but tokens on hold\r\n        if ((11 ether) <= weiAmount) {\r\n            // we have a KYC requirement\r\n            // add tokens to his/her vault to release/refund manually afterawards\r\n\r\n            tokensOnHold = tokensOnHold.add(tokens);\r\n\r\n            ballers[beneficiary].tokenAmount += tokens;\r\n            ballers[beneficiary].weiValue += weiAmount;\r\n            ballers[beneficiary].referralBeneficiary = address(0);\r\n\r\n            // set referral address if referral contract\r\n            if (customBonuses[msg.sender].isReferral == true) {\r\n              ballers[beneficiary].referralBeneficiary = customBonuses[msg.sender].referralAddress;\r\n            }\r\n\r\n            return (0);\r\n        }\r\n\r\n        token.transfer(beneficiary, tokens);\r\n\r\n        forwardFunds(weiAmount);\r\n\r\n        if (isLess == true) {\r\n          return (tokens);\r\n        }\r\n        return (tokens);\r\n    }\r\n\r\n    /**\r\n     * Release / Refund logics\r\n     */\r\n\r\n    function viewFunds(address _wallet) public view returns (uint256) {\r\n        return ballers[_wallet].tokenAmount;\r\n    }\r\n\r\n    function releaseFunds(address _wallet) onlyOwner public {\r\n        require(ballers[_wallet].tokenAmount > 0);\r\n        require(ballers[_wallet].weiValue <= this.balance);\r\n\r\n        // held tokens count for this buyer\r\n        uint256 tokens = ballers[_wallet].tokenAmount;\r\n\r\n        // remove from tokens on hold\r\n        tokensOnHold = tokensOnHold.sub(tokens);\r\n\r\n        // transfer ether to our wallet\r\n        forwardFunds(ballers[_wallet].weiValue);\r\n\r\n        // if it's a referral release give bonus tokens to referral\r\n        if (ballers[_wallet].referralBeneficiary != address(0)) {\r\n          uint256 refTokens = tokens.mul(10).div(100);\r\n          token.transfer(ballers[_wallet].referralBeneficiary, refTokens);\r\n\r\n          // subtract referral tokens from total\r\n          tokens = tokens.sub(refTokens);\r\n        }\r\n\r\n        // send tokens to buyer\r\n        token.transfer(_wallet, tokens);\r\n\r\n\r\n        // reset vault\r\n        ballers[_wallet].tokenAmount = 0;\r\n        ballers[_wallet].weiValue = 0;\r\n    }\r\n\r\n    function refundFunds(address _wallet) onlyOwner public {\r\n        require(ballers[_wallet].tokenAmount > 0);\r\n        require(ballers[_wallet].weiValue <= this.balance);\r\n\r\n        // remove from tokens on hold\r\n        tokensOnHold = tokensOnHold.sub(ballers[_wallet].tokenAmount);\r\n\r\n        _wallet.transfer(ballers[_wallet].weiValue);\r\n\r\n        weiRaised = weiRaised.sub(ballers[_wallet].weiValue);\r\n        tokensSold = tokensSold.sub(ballers[_wallet].tokenAmount);\r\n\r\n        ballers[_wallet].tokenAmount = 0;\r\n        ballers[_wallet].weiValue = 0;\r\n    }\r\n\r\n    /**\r\n     * Editors\r\n     */\r\n\r\n    function addOldInvestment(address _beneficiary, uint256 _weiAmount, uint256 _tokensWithDecimals) onlyOwner public {\r\n      require(_beneficiary != address(0));\r\n\r\n      // update sold tokens amount\r\n      weiRaised = weiRaised.add(_weiAmount);\r\n      tokensSold = tokensSold.add(_tokensWithDecimals);\r\n\r\n      token.transfer(_beneficiary, _tokensWithDecimals);\r\n\r\n      TokenPurchase(msg.sender, _beneficiary, _weiAmount, _tokensWithDecimals);\r\n    }\r\n\r\n    function setCustomBonus(address _contract, bool _isReferral, bool _isSpecial, address _referralAddress) onlyOwner public {\r\n      require(_contract != address(0));\r\n\r\n      customBonuses[_contract] = CustomContract({\r\n          isReferral: _isReferral,\r\n          isSpecial: _isSpecial,\r\n          referralAddress: _referralAddress\r\n      });\r\n    }\r\n\r\n    function addOnHold(uint256 _amount) onlyOwner public {\r\n      tokensOnHold = tokensOnHold.add(_amount);\r\n    }\r\n\r\n    function subOnHold(uint256 _amount) onlyOwner public {\r\n      tokensOnHold = tokensOnHold.sub(_amount);\r\n    }\r\n\r\n    function setMinInvestment(uint256 _investment) onlyOwner public {\r\n      require(_investment > 0);\r\n      minimum_invest = _investment;\r\n    }\r\n\r\n    function changeEndTime(uint256 _endTime) onlyOwner public {\r\n        require(_endTime > startTime);\r\n        endTime = _endTime;\r\n    }\r\n\r\n    function changeStartTime(uint256 _startTime) onlyOwner public {\r\n        require(endTime > _startTime);\r\n        startTime = _startTime;\r\n    }\r\n\r\n    function setWallet(address _wallet) onlyOwner public {\r\n        require(_wallet != address(0));\r\n        wallet = _wallet;\r\n    }\r\n\r\n    function setToken(address _token) onlyOwner public {\r\n        require(_token != address(0));\r\n        token = Token(_token);\r\n    }\r\n\r\n    /**\r\n     * End crowdsale manually\r\n     */\r\n\r\n    function endSale() onlyOwner public {\r\n      // close crowdsale\r\n      crowdsaleConcluded = true;\r\n\r\n      // burn all tokens left\r\n      token.burn(token.balanceOf(this));\r\n    }\r\n\r\n    /**\r\n     * When at risk, evacuate tokens\r\n     */\r\n\r\n    function evacuateTokens(address _wallet) onlyOwner public {\r\n      require(_wallet != address(0));\r\n      token.transfer(_wallet, token.balanceOf(this));\r\n    }\r\n\r\n    /**\r\n     * Calculations\r\n     */\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return now > endTime || token.balanceOf(this) == 0 || crowdsaleConcluded;\r\n    }\r\n\r\n    function getBaseAmount(uint256 _weiAmount) public view returns (uint256) {\r\n        return _weiAmount.mul(rate);\r\n    }\r\n\r\n    // Override this method to have a way to add business logic to your crowdsale when buying\r\n    function getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        uint256 tokens = getBaseAmount(_weiAmount);\r\n        uint256 percentage = 0;\r\n\r\n         // Special bonuses\r\n        if (customBonuses[msg.sender].isSpecial == true) {\r\n\r\n          if ( startTime <= now && now < startTime + 7 days ) {\r\n            percentage = week_special_1;\r\n          } else if ( startTime + 7 days <= now && now < startTime + 14 days ) {\r\n            percentage = week_special_2;\r\n          } else if ( startTime + 14 days <= now && now < startTime + 21 days ) {\r\n            percentage = week_special_3;\r\n          } else if ( startTime + 21 days <= now && now <= endTime ) {\r\n            percentage = week_special_4;\r\n          }\r\n\r\n        // Regular bonuses\r\n        } else {\r\n\r\n          if ( startTime <= now && now < startTime + 7 days ) {\r\n            percentage = week_1;\r\n          } else if ( startTime + 7 days <= now && now < startTime + 14 days ) {\r\n            percentage = week_2;\r\n          } else if ( startTime + 14 days <= now && now < startTime + 21 days ) {\r\n            percentage = week_3;\r\n          } else if ( startTime + 21 days <= now && now <= endTime ) {\r\n            percentage = week_4;\r\n          }\r\n\r\n          // Referral bonuses\r\n          if (customBonuses[msg.sender].isReferral == true) {\r\n            percentage += 15; // 5 for buyer, 10 for referrer\r\n          }\r\n\r\n        }\r\n\r\n        // Large contributors\r\n        if (msg.value >= 50 ether) {\r\n          percentage += 80;\r\n        } else if (msg.value >= 30 ether) {\r\n          percentage += 70;\r\n        } else if (msg.value >= 10 ether) {\r\n          percentage += 50;\r\n        } else if (msg.value >= 5 ether) {\r\n          percentage += 30;\r\n        } else if (msg.value >= 3 ether) {\r\n          percentage += 10;\r\n        }\r\n\r\n        tokens += tokens.mul(percentage).div(100);\r\n\r\n        assert(tokens > 0);\r\n\r\n        return (tokens);\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    function forwardFunds(uint256 _amount) internal {\r\n        wallet.transfer(_amount);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal view returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n    function tokensLeft() public view returns (uint256) {\r\n        return token.balanceOf(this).sub(tokensOnHold);\r\n    }\r\n\r\n    function hasEnoughTokensLeft(uint256 _weiAmount) public payable returns (bool) {\r\n        return tokensLeft().sub(_weiAmount) >= getBaseAmount(_weiAmount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"releaseFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"customBonuses\",\"outputs\":[{\"name\":\"isReferral\",\"type\":\"bool\"},{\"name\":\"isSpecial\",\"type\":\"bool\"},{\"name\":\"referralAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"changeEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_isReferral\",\"type\":\"bool\"},{\"name\":\"_isSpecial\",\"type\":\"bool\"},{\"name\":\"_referralAddress\",\"type\":\"address\"}],\"name\":\"setCustomBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensOnHold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"hasEnoughTokensLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"changeStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addOnHold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"name\":\"_tokensWithDecimals\",\"type\":\"uint256\"}],\"name\":\"addOldInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investment\",\"type\":\"uint256\"}],\"name\":\"setMinInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"evacuateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"getBaseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"refundFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"subOnHold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"viewFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a815790000000000000000000000000000000000000000000000000000000005aa6f85f000000000000000000000000000000000000000000000000000000000000271000000000000000000000000049f7dbb9ff76efbc368bdf35e2cbb3c704b06bee00000000000000000000000079186ba0fc6fa49fd9db2f0ba34f36f8c24489c7","Library":"","SwarmSource":"bzzr://f87eff5e8b10b3d8f70b1343ca9e7ea013e1a3ef5fc1bd120c70a8b501d6a228"}]}