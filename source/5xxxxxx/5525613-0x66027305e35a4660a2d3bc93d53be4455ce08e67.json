{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts/commons/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin (partially)\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/ERC20TokenInterface.sol\r\n\r\n/**\r\n * Token contract interface for external use\r\n */\r\ncontract ERC20TokenInterface {\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 value);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n}\r\n\r\n// File: contracts/interfaces/FiatContractInterface.sol\r\n\r\n/**\r\n* @title Fiat currency contract\r\n* @dev This contract will return the value of 0.01$ ETH in wei\r\n*/\r\ncontract FiatContractInterface {\r\n\r\n    function EUR(uint _id) public constant returns (uint256);\r\n\r\n}\r\n\r\n// File: contracts/NETRico.sol\r\n\r\n/**\r\n* @title NETRico sale main contract\r\n*/\r\ncontract NETRico {\r\n\r\n    FiatContractInterface price = FiatContractInterface(0x8055d0504666e2B6942BeB8D6014c964658Ca591); // MAINNET ADDRESS\r\n\r\n    using SafeMath for uint256;\r\n\r\n    //This sale have 3 stages\r\n    enum State {\r\n        Stage1,\r\n        Stage2,\r\n        Successful\r\n    }\r\n\r\n    //public variables\r\n    State public state = State.Stage1; //Set initial stage\r\n    uint256 public startTime;\r\n    uint256 public startStage2Time;\r\n    uint256 public deadline;\r\n    uint256 public totalRaised; //eth in wei\r\n    uint256 public totalDistributed; //tokens distributed\r\n    uint256 public completedAt; //Time stamp when the sale finish\r\n    ERC20TokenInterface public tokenReward; //Address of the valid token used as reward\r\n    address public creator; //Address of the contract deployer\r\n    string public campaignUrl; //Web site of the campaign\r\n    string public version = \"2\";\r\n\r\n    //events for log\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(address _creator, string _url);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCreator() {\r\n        require(msg.sender == creator);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice NETRico constructor\r\n    * @param _campaignUrl is the ICO _url\r\n    * @param _addressOfTokenUsedAsReward is the token totalDistributed\r\n    * @param _startTime timestamp of Stage1 start\r\n    * @param _startStage2Time timestamp of Stage2 start\r\n    * @param _deadline timestamp of Stage2 stop\r\n    */\r\n    function NETRico(string _campaignUrl, ERC20TokenInterface _addressOfTokenUsedAsReward,\r\n        uint256 _startTime, uint256 _startStage2Time, uint256 _deadline) public {\r\n        require(_addressOfTokenUsedAsReward != address(0)\r\n            && _startTime > now\r\n            && _startStage2Time > _startTime\r\n            && _deadline > _startStage2Time);\r\n\r\n        creator = 0xB987B463c7573f0B7b6eD7cc8E5Fab9042272065;\r\n        //creator = msg.sender;\r\n        campaignUrl = _campaignUrl;\r\n        tokenReward = ERC20TokenInterface(_addressOfTokenUsedAsReward);\r\n\r\n        startTime = _startTime;\r\n        startStage2Time = _startStage2Time;\r\n        deadline = _deadline;\r\n\r\n        emit LogFunderInitialized(creator, campaignUrl);\r\n    }\r\n\r\n    /**\r\n    * @notice Function to handle eth transfers\r\n    * @dev BEWARE: if a call to this functions doesn't have\r\n    * enough gas, transaction could not be finished\r\n    */\r\n    function() public payable {\r\n        contribute();\r\n    }\r\n\r\n    /**\r\n    * @notice Set timestamp of Stage2 start\r\n    **/\r\n    function setStage2Start(uint256 _startStage2Time) public onlyCreator {\r\n        require(_startStage2Time > now && _startStage2Time > startTime && _startStage2Time < deadline);\r\n        startStage2Time = _startStage2Time;\r\n    }\r\n\r\n    /**\r\n    * @notice Set timestamp of deadline\r\n    **/\r\n    function setDeadline(uint256 _deadline) public onlyCreator {\r\n        require(_deadline > now && _deadline > startStage2Time);\r\n        deadline = _deadline;\r\n    }\r\n\r\n    /**\r\n    * @notice contribution handler\r\n    */\r\n    function contribute() public notFinished payable {\r\n        require(now >= startTime);\r\n\r\n        uint256 tokenBought;\r\n        //Variable to store amount of tokens bought\r\n        uint256 tokenPrice = price.EUR(0);\r\n        //1 cent value in wei\r\n\r\n        totalRaised = totalRaised.add(msg.value);\r\n        //Save the total eth totalRaised (in wei)\r\n\r\n        tokenPrice = tokenPrice.mul(2);\r\n        //0.02$ EUR value in wei\r\n        tokenPrice = tokenPrice.div(10 ** 8);\r\n        //Change base 18 to 10\r\n\r\n        tokenBought = msg.value.div(tokenPrice);\r\n        //Base 18/ Base 10 = Base 8\r\n        tokenBought = tokenBought.mul(10 ** 10);\r\n        //Base 8 to Base 18\r\n\r\n        require(tokenBought >= 100 * 10 ** 18);\r\n        //Minimum 100 base tokens\r\n\r\n        //Bonus calculation\r\n        if (state == State.Stage1) {\r\n            tokenBought = tokenBought.mul(140);\r\n            tokenBought = tokenBought.div(100);\r\n            //+40%\r\n        } else if (state == State.Stage2) {\r\n            tokenBought = tokenBought.mul(120);\r\n            tokenBought = tokenBought.div(100);\r\n            //+20%\r\n        }\r\n\r\n        totalDistributed = totalDistributed.add(tokenBought);\r\n        //Save to total tokens distributed\r\n\r\n        tokenReward.transfer(msg.sender, tokenBought);\r\n        //Send Tokens\r\n\r\n        creator.transfer(msg.value);\r\n        // Send ETH to creator\r\n        emit LogBeneficiaryPaid(creator);\r\n\r\n        //LOGS\r\n        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        emit LogContributorsPayout(msg.sender, tokenBought);\r\n\r\n        checkIfFundingCompleteOrExpired();\r\n    }\r\n\r\n    /**\r\n    * @notice check status\r\n    */\r\n    function checkIfFundingCompleteOrExpired() public {\r\n\r\n        if (now > deadline && state != State.Successful) {\r\n\r\n            state = State.Successful;\r\n            //Sale becomes Successful\r\n            completedAt = now;\r\n            //ICO finished\r\n\r\n            emit LogFundingSuccessful(totalRaised);\r\n            //we log the finish\r\n\r\n            finished();\r\n        } else if (state == State.Stage1 && now >= startStage2Time) {\r\n\r\n            state = State.Stage2;\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Function for closure handle\r\n    */\r\n    function finished() public { //When finished eth are transferred to creator\r\n        require(state == State.Successful);\r\n        //Only when sale finish\r\n\r\n        uint256 remainder = tokenReward.balanceOf(this);\r\n        //Remaining tokens on contract\r\n        //Funds send to creator if any\r\n        if (address(this).balance > 0) {\r\n            creator.transfer(address(this).balance);\r\n            emit LogBeneficiaryPaid(creator);\r\n        }\r\n\r\n        tokenReward.transfer(creator, remainder);\r\n        //remainder tokens send to creator\r\n        emit LogContributorsPayout(creator, remainder);\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice Function to claim any token stuck on contract\r\n    */\r\n    function claimTokens(ERC20TokenInterface _address) public {\r\n        require(state == State.Successful);\r\n        //Only when sale finish\r\n        require(msg.sender == creator);\r\n\r\n        uint256 remainder = _address.balanceOf(this);\r\n        //Check remainder tokens\r\n        _address.transfer(creator, remainder);\r\n        //Transfer tokens to creator\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"setDeadline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startStage2Time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startStage2Time\",\"type\":\"uint256\"}],\"name\":\"setStage2Start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaignUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_campaignUrl\",\"type\":\"string\"},{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_startStage2Time\",\"type\":\"uint256\"},{\"name\":\"_deadline\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"}]","ContractName":"NETRico","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000dcff91d00e4cb10f789c9802c5a0bdcfc416d2e5000000000000000000000000000000000000000000000000000000005ae65c80000000000000000000000000000000000000000000000000000000005b381980000000000000000000000000000000000000000000000000000000005bb163800000000000000000000000000000000000000000000000000000000000000014687474703a2f2f6e657474657269756d2e636f6d000000000000000000000000","Library":"","SwarmSource":"bzzr://abc795e0b25401d43d229c1bf478faf4ec91cf25792f24fd21a95fde23e9bc4f"}]}