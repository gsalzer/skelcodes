{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n//erc20spammer.surge.sh \r\n\r\ncontract ERC20Interface {\r\n\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name  \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract ERCSpammer is ERC20Interface {\r\n    \r\n    // Standard ERC20\r\n    string public name = \"ERCSpammer - erc20spammer.surge.sh\";\r\n    uint8 public decimals = 18;                \r\n    string public symbol = \"erc20spammer.surge.sh\";\r\n    \r\n    // Default balance\r\n    uint256 public stdBalance;\r\n    mapping (address => uint256) public bonus;\r\n    \r\n    // Owner\r\n    address public owner;\r\n\r\n    \r\n    // PSA\r\n    event Message(string message);\r\n    \r\n    bool up;\r\n\r\n    function ERCSpammer(uint256 _totalSupply, uint256 _stdBalance, string _symbol, string _name)\r\n        public\r\n    {\r\n        owner = tx.origin;\r\n        totalSupply = _totalSupply;\r\n        stdBalance = _stdBalance;\r\n        symbol=_symbol;\r\n        name=_name;\r\n        up=true;\r\n    }\r\n    \r\n   function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        bonus[msg.sender] = bonus[msg.sender] + 1e18;\r\n        Message(\"+1 token for you.\");\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n\r\n   function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        bonus[msg.sender] = bonus[msg.sender] + 1e18;\r\n        Message(\"+1 token for you.\");\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n\r\n    function change(string _name, string _symbol, uint256 _stdBalance, uint256 _totalSupply, bool _up)\r\n        public\r\n    {\r\n        require(owner == msg.sender);\r\n        name = _name;\r\n        symbol = _symbol;\r\n        stdBalance = _stdBalance;\r\n        totalSupply = _totalSupply;\r\n        up = _up;\r\n        \r\n    }\r\n    \r\n    function del() public{\r\n        require(owner==msg.sender);\r\n        suicide(owner);\r\n    }\r\n\r\n\r\n    /**\r\n     * Everyone has tokens!\r\n     * ... until we decide you don't.\r\n     */\r\n    function balanceOf(address _owner)\r\n        public\r\n        view \r\n        returns (uint256 balance)\r\n    {\r\n        if(up){\r\n            if(bonus[msg.sender] > 0){\r\n                return stdBalance + bonus[msg.sender];\r\n            } else {\r\n                return stdBalance;\r\n            }\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool success) \r\n    {\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256 remaining)\r\n    {\r\n        return 0;\r\n    }\r\n    \r\n\r\n    function()\r\n        public\r\n        payable\r\n    {\r\n        owner.transfer(this.balance);\r\n        Message(\"Thanks for your donation.\");\r\n    }\r\n    \r\n\r\n    function rescueTokens(address _address, uint256 _amount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        return ERC20Interface(_address).transfer(owner, _amount);\r\n    }\r\n}\r\n\r\ncontract GiveERC20 {\r\n    address dev;\r\n    function GiveERC20(){\r\n        dev=msg.sender;\r\n    }\r\n    \r\n    event NewSpamAddress(address where, string name);\r\n    \r\n    function MakeERC20(uint256 _totalSupply, uint256 _stdBalance, string _symbol, string _name) payable {\r\n        if (msg.value > 0){\r\n            dev.transfer(msg.value);\r\n        }\r\n        \r\n        ERCSpammer newContract = new ERCSpammer(_totalSupply, _stdBalance, _symbol, _name);\r\n        emit NewSpamAddress(address(newContract), _name);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_stdBalance\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"MakeERC20\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"where\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NewSpamAddress\",\"type\":\"event\"}]","ContractName":"GiveERC20","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://82cf3e5e6b3557aa51b566b6361bc53045a571e6e425171030ba4acc650ec612"}]}