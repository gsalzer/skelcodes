{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SimpleToken\r\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract FIN is StandardToken {\r\n  string public constant name = \"Financial Incentive Network Points\";\r\n  string public constant symbol = \"FIN\";\r\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\r\n\r\n  uint256 private constant OFFSET = 10 ** uint256(decimals);\r\n  uint256 private constant BILLION = (10 ** 9) * OFFSET; // 1 billion is a 1 followed by 9 zeroes\r\n  \r\n  uint256 private TOTAL_SUPPLY;\r\n\r\n  constructor(address _holderA, address _holderB, address _holderC) public {\r\n    balances[_holderA] = BILLION;\r\n    emit Transfer(0x0, _holderA, BILLION);\r\n\r\n    balances[_holderB] = BILLION;\r\n    emit Transfer(0x0, _holderB, BILLION);\r\n\r\n    balances[_holderC] = BILLION / 2;\r\n    emit Transfer(0x0, _holderC, BILLION / 2);\r\n    \r\n    TOTAL_SUPPLY = balances[_holderA] + balances[_holderB] + balances[_holderC];\r\n  }\r\n  \r\n  function totalSupply() public view returns (uint256) {\r\n      return TOTAL_SUPPLY;\r\n  }\r\n}\r\n\r\n\r\ninterface TokenValidator {\r\n  function check(\r\n    address _token,\r\n    address _user\r\n  ) external returns(byte result);\r\n\r\n  function check(\r\n    address _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _amount\r\n  ) external returns (byte result);\r\n}\r\n\r\n\r\ninterface ValidatedToken {\r\n  event Validation(\r\n    byte    indexed result,\r\n    address indexed user\r\n  );\r\n\r\n  event Validation(\r\n    byte    indexed result,\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256         value\r\n  );\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ReferenceToken is Ownable, ERC20, ValidatedToken {\r\n    using SafeMath for uint256;\r\n\r\n    string internal mName;\r\n    string internal mSymbol;\r\n\r\n    uint256 internal mGranularity;\r\n    uint256 internal mTotalSupply;\r\n\r\n    mapping(address => uint) internal mBalances;\r\n    mapping(address => mapping(address => bool)) internal mAuthorized;\r\n    mapping(address => mapping(address => uint256)) internal mAllowed;\r\n\r\n    uint8 public decimals = 18;\r\n\r\n    // Single validator\r\n    TokenValidator internal validator;\r\n\r\n    constructor(\r\n        string         _name,\r\n        string         _symbol,\r\n        uint256        _granularity,\r\n        TokenValidator _validator\r\n    ) public {\r\n        require(_granularity >= 1);\r\n\r\n        mName = _name;\r\n        mSymbol = _symbol;\r\n        mTotalSupply = 0;\r\n        mGranularity = _granularity;\r\n        validator = TokenValidator(_validator);\r\n    }\r\n\r\n    // Validation Helpers\r\n\r\n    function validate(address _user) internal returns (byte) {\r\n        byte checkResult = validator.check(this, _user);\r\n        emit Validation(checkResult, _user);\r\n        return checkResult;\r\n    }\r\n\r\n    function validate(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (byte) {\r\n        byte checkResult = validator.check(this, _from, _to, _amount);\r\n        emit Validation(checkResult, _from, _to, _amount);\r\n        return checkResult;\r\n    }\r\n\r\n    // Status Code Helpers\r\n\r\n    function isOk(byte _statusCode) internal pure returns (bool) {\r\n        return (_statusCode & hex\"0F\") == 1;\r\n    }\r\n\r\n    function requireOk(byte _statusCode) internal pure {\r\n        require(isOk(_statusCode));\r\n    }\r\n\r\n    function name() public constant returns (string) {\r\n        return mName;\r\n    }\r\n\r\n    function symbol() public constant returns(string) {\r\n        return mSymbol;\r\n    }\r\n\r\n    function granularity() public constant returns(uint256) {\r\n        return mGranularity;\r\n    }\r\n\r\n    function totalSupply() public constant returns(uint256) {\r\n        return mTotalSupply;\r\n    }\r\n\r\n    function balanceOf(address _tokenHolder) public constant returns (uint256) {\r\n        return mBalances[_tokenHolder];\r\n    }\r\n\r\n    function isMultiple(uint256 _amount) internal view returns (bool) {\r\n      return _amount.div(mGranularity).mul(mGranularity) == _amount;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        if(validate(msg.sender, _spender, _amount) != 1) { return false; }\r\n\r\n        mAllowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return mAllowed[_owner][_spender];\r\n    }\r\n\r\n    function mint(address _tokenHolder, uint256 _amount) public onlyOwner {\r\n        requireOk(validate(_tokenHolder));\r\n        require(isMultiple(_amount));\r\n\r\n        mTotalSupply = mTotalSupply.add(_amount);\r\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].add(_amount);\r\n\r\n        emit Transfer(0x0, _tokenHolder, _amount);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        doSend(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n        require(_amount <= mAllowed[_from][msg.sender]);\r\n\r\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\r\n        doSend(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function doSend(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(canTransfer(_from, _to, _amount));\r\n\r\n        mBalances[_from] = mBalances[_from].sub(_amount);\r\n        mBalances[_to] = mBalances[_to].add(_amount);\r\n\r\n        emit Transfer(_from, _to, _amount);\r\n    }\r\n\r\n    function canTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (bool) {\r\n        return (\r\n            (_to != address(0)) // Forbid sending to 0x0 (=burning)\r\n            && isMultiple(_amount)\r\n            && (mBalances[_from] >= _amount) // Ensure enough funds\r\n            && isOk(validate(_from, _to, _amount)) // Ensure passes validation\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract Lunar is ReferenceToken {\r\n    uint256 constant DECIMAL_SHIFT = 10 ** 18;\r\n    \r\n    constructor(TokenValidator _validator)\r\n      ReferenceToken(\"Lunar Token - SAMPLE NO VALUE\", \"LNRX\", 1, _validator)\r\n      public {\r\n          uint256 supply = 5000000 * DECIMAL_SHIFT;\r\n\r\n          mTotalSupply = supply;\r\n          mBalances[msg.sender] = supply;\r\n\r\n          emit Transfer(0x0, msg.sender, supply);\r\n      }\r\n}\r\n\r\n\r\ncontract SimpleAuthorization is TokenValidator, Ownable {\r\n    mapping(address => bool) private auths;\r\n\r\n    constructor() public {}\r\n\r\n    function check(\r\n        address /* token */,\r\n        address _address\r\n    ) external returns (byte resultCode) {\r\n        if (auths[_address]) {\r\n            return hex\"11\";\r\n        } else {\r\n            return hex\"10\";\r\n        }\r\n    }\r\n\r\n    function check(\r\n        address /* _token */,\r\n        address _from,\r\n        address _to,\r\n        uint256 /* _amount */\r\n    ) external returns (byte resultCode) {\r\n        if (auths[_from] && auths[_to]) {\r\n            return hex\"11\";\r\n        } else {\r\n            return hex\"10\";\r\n        }\r\n    }\r\n\r\n    function setAuthorized(address _address, bool _status) public onlyOwner {\r\n        auths[_address] = _status;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"result\",\"type\":\"bytes1\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Validation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"result\",\"type\":\"bytes1\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Validation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Lunar","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000db2cfb74752c2886e1ae83889d9240ce50709321","Library":"","SwarmSource":"bzzr://0a69fc2c4e2950a919baf702ac9fe6d8a7e14f582c4bab32c273f722d388ccb2"}]}