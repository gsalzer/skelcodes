{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() constant returns (uint totalSupply);\r\n\tfunction balanceOf(address _owner) constant returns (uint balance);\r\n\tfunction transfer(address _to, uint _value) returns (bool success);\r\n\tfunction transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n\tfunction approve(address _spender, uint _value) returns (bool success);\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint remaining);\r\n\tevent Transfer(address indexed _from, address indexed _to, uint _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n\r\n\r\ncontract QuadriCoin is IERC20{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 private _totalSupply = 0;\r\n\r\n\tbool public purchasingAllowed = true;\r\n\tbool private bonusAllowed = true;\t\r\n\r\n\tstring public constant symbol = \"QDC\";\r\n\tstring public constant name = \"QuadriCoin\";\r\n\tuint256 public constant decimals = 18;\r\n\r\n\tuint256 private CREATOR_TOKEN = 3100000000 * 10**decimals;\r\n\tuint256 private CREATOR_TOKEN_END = 465000000 * 10**decimals;\r\n\tuint256 private constant RATE = 100000;\r\n\tuint constant LENGHT_BONUS = 7 * 1 days;\r\n\tuint constant PERC_BONUS = 100;\r\n\tuint constant LENGHT_BONUS2 = 7 * 1 days;\r\n\tuint constant PERC_BONUS2 = 30;\r\n\tuint constant LENGHT_BONUS3 = 7 * 1 days;\r\n\tuint constant PERC_BONUS3 = 30;\r\n\tuint constant LENGHT_BONUS4 = 7 * 1 days;\r\n\tuint constant PERC_BONUS4 = 20;\r\n\tuint constant LENGHT_BONUS5 = 7 * 1 days;\r\n\tuint constant PERC_BONUS5 = 20;\r\n\tuint constant LENGHT_BONUS6 = 7 * 1 days;\r\n\tuint constant PERC_BONUS6 = 15;\r\n\tuint constant LENGHT_BONUS7 = 7 * 1 days;\r\n\tuint constant PERC_BONUS7 = 10;\r\n\tuint constant LENGHT_BONUS8 = 7 * 1 days;\r\n\tuint constant PERC_BONUS8 = 10;\r\n\tuint constant LENGHT_BONUS9 = 7 * 1 days;\r\n\tuint constant PERC_BONUS9 = 5;\r\n\tuint constant LENGHT_BONUS10 = 7 * 1 days;\r\n\tuint constant PERC_BONUS10 = 5;\r\n\r\n\t\t\r\n\taddress private owner;\r\n\r\n\tmapping(address => uint256) balances;\r\n\tmapping(address => mapping(address => uint256)) allowed;\r\n\r\n\tuint private start;\r\n\tuint private end;\r\n\tuint private end2;\r\n\tuint private end3;\r\n\tuint private end4;\r\n\tuint private end5;\r\n\tuint private end6;\r\n\tuint private end7;\r\n\tuint private end8;\r\n\tuint private end9;\r\n\tuint private end10;\r\n\t\r\n\tstruct Buyer{\r\n\t    address to;\r\n\t    uint256 value;\r\n\t}\r\n\t\r\n\tBuyer[] buyers;\r\n\t\r\n\tmodifier onlyOwner {\r\n\t    require(msg.sender == owner);\r\n\t    _;\r\n\t}\r\n\t\r\n\tfunction() payable{\r\n\t\trequire(purchasingAllowed);\t\t\r\n\t\tcreateTokens();\r\n\t}\r\n   \r\n\tfunction QuadriCoin(){\r\n\t\towner = msg.sender;\r\n\t\tbalances[msg.sender] = CREATOR_TOKEN;\r\n\t\tstart = now;\r\n\t\tend = now.add(LENGHT_BONUS);\r\n\t\tend2 = end.add(LENGHT_BONUS2);\r\n\t\tend3 = end2.add(LENGHT_BONUS3);\r\n\t\tend4 = end3.add(LENGHT_BONUS4);\r\n\t\tend5 = end4.add(LENGHT_BONUS5);\r\n\t\tend6 = end5.add(LENGHT_BONUS6);\r\n\t\tend7 = end6.add(LENGHT_BONUS7);\r\n\t\tend8 = end7.add(LENGHT_BONUS8);\r\n\t\tend9 = end8.add(LENGHT_BONUS9);\r\n\t\tend10 = end9.add(LENGHT_BONUS10);\r\n\t}\r\n   \r\n\tfunction createTokens() payable{\r\n\t    bool bSend = true;\r\n\t\trequire(msg.value >= 0);\r\n\t\tuint256 tokens = msg.value.mul(10 ** decimals);\r\n\t\ttokens = tokens.mul(RATE);\r\n\t\ttokens = tokens.div(10 ** 18);\r\n\t\tif (bonusAllowed)\r\n\t\t{\r\n\t\t\tif (now >= start && now < end)\r\n\t\t\t{\r\n\t\t\ttokens += tokens.mul(PERC_BONUS).div(100);\r\n\t\t\tbSend = false;\r\n\t\t\t}\r\n\t\t\tif (now >= end && now < end2)\r\n\t\t\t{\r\n\t\t\ttokens += tokens.mul(PERC_BONUS2).div(100);\r\n\t\t\tbSend = false;\r\n\t\t\t}\r\n\t\t\tif (now >= end2 && now < end3)\r\n\t\t\t{\r\n\t\t\ttokens += tokens.mul(PERC_BONUS3).div(100);\r\n\t\t\tbSend = false;\r\n\t\t\t}\r\n\t\t\tif (now >= end3 && now < end4)\r\n\t\t\t{\r\n\t\t\ttokens += tokens.mul(PERC_BONUS4).div(100);\r\n\t\t\tbSend = false;\r\n\t\t\t}\r\n\t\t\tif (now >= end4 && now < end5)\r\n\t\t\t{\r\n\t\t\ttokens += tokens.mul(PERC_BONUS5).div(100);\r\n\t\t\tbSend = false;\r\n\t\t\t}\r\n\t\t\tif (now >= end5 && now < end6)\r\n\t\t\t{\r\n\t\t\ttokens += tokens.mul(PERC_BONUS6).div(100);\r\n\t\t\tbSend = false;\r\n\t\t\t}\r\n\t\t\tif (now >= end6 && now < end7)\r\n\t\t\t{\r\n\t\t\ttokens += tokens.mul(PERC_BONUS7).div(100);\r\n\t\t\tbSend = false;\r\n\t\t\t}\r\n\t\t\tif (now >= end7 && now < end8)\r\n\t\t\t{\r\n\t\t\ttokens += tokens.mul(PERC_BONUS8).div(100);\r\n\t\t\tbSend = false;\r\n\t\t\t}\r\n\t\t\tif (now >= end8 && now < end9)\r\n\t\t\t{\r\n\t\t\ttokens += tokens.mul(PERC_BONUS9).div(100);\r\n\t\t\tbSend = false;\r\n\t\t\t}\r\n\t\t\tif (now >= end9 && now < end10)\r\n\t\t\t{\r\n\t\t\ttokens += tokens.mul(PERC_BONUS10).div(100);\r\n\t\t\tbSend = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tuint256 sum2 = balances[owner].sub(tokens);\t\t\r\n\t\trequire(sum2 >= CREATOR_TOKEN_END);\r\n\t\tuint256 sum = _totalSupply.add(tokens);\t\t\r\n\t\t_totalSupply = sum;\r\n\t\towner.transfer(msg.value);\r\n\t\tif (!bSend){\r\n    \t\tbuyers.push(Buyer(msg.sender, tokens));\r\n\t    \tTransfer(msg.sender, owner, msg.value);\r\n\t\t} else {\r\n\t        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n\t\t    balances[owner] = balances[owner].sub(tokens);\t\t    \r\n            Transfer(msg.sender, owner, msg.value);\r\n\t\t}\r\n\t}\r\n   \r\n\tfunction totalSupply() constant returns (uint totalSupply){\r\n\t\treturn _totalSupply;\r\n\t}\r\n   \r\n\tfunction balanceOf(address _owner) constant returns (uint balance){\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\tfunction enablePurchasing() onlyOwner {\r\n\t\tpurchasingAllowed = true;\r\n\t}\r\n\t\r\n\tfunction disablePurchasing() onlyOwner {\r\n\t\tpurchasingAllowed = false;\r\n\t}   \r\n\t\r\n\tfunction enableBonus() onlyOwner {\r\n\t\tbonusAllowed = true;\r\n\t}\r\n\t\r\n\tfunction disableBonus() onlyOwner {\r\n\t\tbonusAllowed = false;\r\n\t}   \r\n\r\n\tfunction transfer(address _to, uint256 _value) returns (bool success){\r\n\t\trequire(balances[msg.sender] >= _value\t&& _value > 0);\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n   \r\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success){\r\n\t\trequire(allowed[_from][msg.sender] >= _value && balances[msg.sender] >= _value\t&& _value > 0);\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n   \r\n\tfunction approve(address _spender, uint256 _value) returns (bool success){\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n   \r\n\tfunction allowance(address _owner, address _spender) constant returns (uint remaining){\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\t\r\n\tfunction burnAll() onlyOwner public {\t\t\r\n\t\taddress burner = msg.sender;\r\n\t\tuint256 total = balances[burner];\r\n\t\tif (total > CREATOR_TOKEN_END) {\r\n\t\t\ttotal = total.sub(CREATOR_TOKEN_END);\r\n\t\t\tbalances[burner] = balances[burner].sub(total);\r\n\t\t\tif (_totalSupply >= total){\r\n\t\t\t\t_totalSupply = _totalSupply.sub(total);\r\n\t\t\t}\r\n\t\t\tBurn(burner, total);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction burn(uint256 _value) onlyOwner public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n\t\t_value = _value.mul(10 ** decimals);\r\n        address burner = msg.sender;\r\n\t\tuint t = balances[burner].sub(_value);\r\n\t\trequire(t >= CREATOR_TOKEN_END);\r\n        balances[burner] = balances[burner].sub(_value);\r\n        if (_totalSupply >= _value){\r\n\t\t\t_totalSupply = _totalSupply.sub(_value);\r\n\t\t}\r\n        Burn(burner, _value);\r\n\t}\r\n\t\t\r\n    function mintToken(uint256 _value) onlyOwner public {\r\n        require(_value > 0);\r\n\t\t_value = _value.mul(10 ** decimals);\r\n        balances[owner] = balances[owner].add(_value);\r\n        _totalSupply = _totalSupply.add(_value);\r\n        Transfer(0, this, _value);\r\n    }\r\n\t\r\n\tfunction TransferTokens() onlyOwner public {\r\n\t    for (uint i = 0; i<buyers.length; i++){\r\n    \t\tbalances[buyers[i].to] = balances[buyers[i].to].add(buyers[i].value);\r\n    \t\tbalances[owner] = balances[owner].sub(buyers[i].value);\r\n\t        Transfer(owner, buyers[i].to, buyers[i].value);\r\n\t    }\r\n\t    delete buyers;\r\n\t}\r\n\t\r\n\tevent Transfer(address indexed _from, address indexed _to, uint _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\tevent Burn(address indexed burner, uint256 value);\t   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disablePurchasing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enablePurchasing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"TransferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchasingAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"QuadriCoin","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cc90fa59420934dceb279ee13467d2290c49e68c77dc3bf3a3ae926b5c7dc096"}]}