{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ncontract owned {\r\n        address public owner;\r\n\r\n        function owned() public{\r\n            owner = msg.sender;\r\n        }\r\n\r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n\r\n        function transferOwnership(address newOwner) public onlyOwner {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\ncontract Verification is owned {\r\n\tusing SafeMath for uint256;\r\n    mapping(address => uint256) veruser;\r\n\t\r\n\tfunction RA(address _to) public view returns(bool){\r\n\t\tif(veruser[_to]>0){\r\n\t\t\treturn true;\r\n\t\t\t}else{\r\n\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t}\r\n\t\r\n\tfunction Verification() public {\r\n\t    if(RA(msg.sender) == false){\r\n\t\t\tveruser[msg.sender] = veruser[msg.sender].add(1);\r\n\t\t\t}\r\n\t}\r\n\t\r\n\t/*Удаление верификации*/\r\n\tfunction DelVer(address _address) public onlyOwner{\r\n\t\tif(RA(_address) == true){\r\n\t\t\tveruser[_address] = veruser[_address].sub(0);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"RA\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"DelVer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Verification","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9619bc4bfd3b46b109aef74d3114b8acd01f24fe3fc3a49840b26299761b69e9"}]}