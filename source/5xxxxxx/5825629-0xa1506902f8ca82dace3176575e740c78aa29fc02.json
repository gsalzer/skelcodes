{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Storage {\r\n\r\n    bytes32[] public data;\r\n    bool readOnly;\r\n    function uploadData(bytes _data) public {\r\n        require(readOnly != true);\r\n        uint index = data.length;\r\n        for(uint i = 0; i < _data.length / 32; i++) {\r\n            bytes32 word;\r\n            assembly {\r\n                word:= mload(add(_data, add(32, mul(i, 32))))\r\n            }\r\n            data.length++;\r\n            data[index + i] = word;\r\n        }\r\n    }\r\n    function uploadFinish() public {\r\n        readOnly = true;\r\n    }\r\n    function getData() public view returns (bytes){\r\n        bytes memory result = new bytes(data.length*0x20);\r\n        for(uint i = 0; i < data.length; i++) {\r\n            bytes32 word = data[i];\r\n            assembly {\r\n                mstore(add(result, add(0x20, mul(i, 32))), word)\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getData\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uploadData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"uploadFinish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"data\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Storage","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://af8a046dac14f73d15c3c908695137573f7d6faa6bb4f03f16b3caedffda84c1"}]}