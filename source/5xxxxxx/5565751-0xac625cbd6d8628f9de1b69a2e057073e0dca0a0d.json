{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract AccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = false;\r\n\r\n    function AccessControl() public {\r\n        owner = msg.sender;\r\n        moderators[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n\r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ncontract DTT is AccessControl{\r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n  function balanceOf(address _addr) public returns (uint);\r\n  mapping (address => mapping (address => uint256)) public allowance;\r\n}\r\n\r\ncontract DataBase is AccessControl{\r\n  function addMonsterObj(uint64 _monsterId,uint256 _genes,uint32 _classId,address _master,string _name,string _skills) public;\r\n  function getTotalMonster() constant public returns(uint64);\r\n  function setMonsterGene(uint64 _monsterId,uint256 _genes) public;\r\n}\r\ncontract NFTToken is AccessControl{\r\n  function transferAuction(address _from, address _to, uint256 _value) external;\r\n  function ownerOf(uint256 _tokenId) public constant returns (address owner);\r\n}\r\n\r\ncontract CryptoAndDragonsPresale is AccessControl{\r\n  event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event Hatch(address indexed _owner, uint16 _tableId);\r\n\r\n  address public thisAddress;\r\n  address public dragonTreasureToken;\r\n  address public databaseContract;\r\n  address public ERC721Contract;\r\n  uint256 public totalClass;\r\n  uint256 public totalMonster;\r\n  uint256 public totalAuction;\r\n  uint256 private increaseRate = 0.1 ether;\r\n  uint64 public cooldownTime = 2 hours;\r\n  mapping (address => address) public masterToReferral;\r\n  mapping (uint16 => uint32[]) private EggTable;\r\n  mapping (uint8 => uint256) public EggTotal;\r\n  function setNewMonster(uint256 _genes,uint32 _classId,address _master,string _name,string _skills) onlyModerators public returns(uint64 _monsterId) {\r\n    DataBase data = DataBase(databaseContract);\r\n    uint64 monsterId = data.getTotalMonster() + 1;\r\n    data.addMonsterObj(monsterId,_genes,_classId,_master,_name,_skills);\r\n    return monsterId;\r\n  }\r\n  function setMasterToReferral(address _master, address _referral) onlyOwner public{\r\n    masterToReferral[_master] = _referral;\r\n  }\r\n  function setEggTotal(uint8 _tableNum,uint256 _tableVal) onlyOwner public{\r\n    EggTotal[_tableNum] = _tableVal;\r\n  }\r\n  function setAddresses(address _dragonTreasureToken,address _databaseContract,address _ERC721Contract) onlyOwner public{\r\n    dragonTreasureToken = _dragonTreasureToken;\r\n    databaseContract = _databaseContract;\r\n    ERC721Contract = _ERC721Contract;\r\n  }\r\n  function setEggTable(uint16 _tableNum,uint32[] _tableVals) onlyOwner public{\r\n    EggTable[_tableNum] = _tableVals;\r\n  }\r\n  function userWithdraw(uint256 _value) public{\r\n    DTT DTTtoken = DTT(dragonTreasureToken);\r\n    DTTtoken.transferFrom(this,msg.sender,_value);\r\n  }\r\n\r\n  struct Egg {\r\n    uint8 tableId;\r\n    uint32 classId;\r\n    uint256 genes;\r\n    uint256 hatchTime;\r\n    uint32 matronId;\r\n    uint32 sireId;\r\n    uint16 generation;\r\n    address master;\r\n  }\r\n\r\n  struct Auction {\r\n    uint256 classId;\r\n    uint256 monsterId;\r\n    uint256 price;\r\n    uint256 endTime;\r\n    uint8 rarity;\r\n    address bidder;\r\n  }\r\n\r\n  Egg[] public eggs;\r\n  Auction[] public auctions;\r\n\r\n\r\n  uint randNonce = 0;\r\n  function randMod(uint _modulus) internal returns(uint) {\r\n    randNonce++;\r\n    return uint(keccak256(now, msg.sender, randNonce)) % _modulus;\r\n  }\r\n\r\n  function setCooldown(uint64 _time) onlyOwner public{\r\n    cooldownTime = _time;\r\n  }\r\n\r\n  function getSortedArray(uint[] storageInt) public pure returns(uint[]) {\r\n      uint[] memory a = getCloneArray(storageInt);\r\n      quicksort(a);\r\n      return a;\r\n  }\r\n  function getCloneArray(uint[] a) private pure returns(uint[]) {\r\n      return a;\r\n  }\r\n  function swap(uint[] a, uint l, uint r) private pure {\r\n      uint t = a[l];\r\n      a[l] = a[r];\r\n      a[r] = t;\r\n  }\r\n  function getPivot(uint a, uint b, uint c) private pure returns(uint) {\r\n      if(a > b){\r\n          if(b > c){\r\n              return b;\r\n          }else{\r\n              return a > c ? c : a ;\r\n          }\r\n      }else{\r\n          if(a > c){\r\n              return a;\r\n          }else{\r\n              return b > c ? c : b ;\r\n          }\r\n      }\r\n  }\r\n  function quicksort(uint[] a) private pure {\r\n      uint left = 0;\r\n      uint right = a.length - 1;\r\n      quicksort_core(a, left, right);\r\n  }\r\n  function quicksort_core(uint[] a, uint left, uint right) private pure {\r\n      if(right <= left){\r\n          return;\r\n      }\r\n      uint l = left;\r\n      uint r = right;\r\n      uint p = getPivot(a[l], a[l+1], a[r]);\r\n      while(true){\r\n          while(a[l] < p){\r\n              l++;\r\n          }\r\n          while(p < a[r]){\r\n              r--;\r\n          }\r\n          if(r <= l){\r\n              break;\r\n          }\r\n          swap(a, l, r);\r\n          l++;\r\n          r--;\r\n      }\r\n      quicksort_core(a, left, l-1);\r\n      quicksort_core(a, r+1, right);\r\n  }\r\n\r\n  /* Withdraw */\r\n  /*\r\n    NOTICE: These functions withdraw the developer's cut which is left\r\n    in the contract by `buy`. User funds are immediately sent to the old\r\n    owner in `buy`, no user funds are left in the contract.\r\n  */\r\n  function withdrawAll () onlyOwner public {\r\n    msg.sender.transfer(this.balance);\r\n  }\r\n\r\n  function withdrawAmount (uint256 _amount) onlyOwner public {\r\n    msg.sender.transfer(_amount);\r\n  }\r\n\r\n\r\n  function addAuction(uint32 _classId, uint256 _monsterId, uint256 _price, uint8 _rarity, uint8 _endTime) onlyOwner public {\r\n    Auction memory auction = Auction({\r\n      classId: _classId,\r\n      monsterId: _monsterId,\r\n      price: _price,\r\n      rarity: _rarity,\r\n      endTime: 86400 * _endTime + now,\r\n      bidder: msg.sender\r\n    });\r\n    auctions.push(auction);\r\n    totalAuction += 1;\r\n  }\r\n\r\n  function burnAuction() onlyOwner external {\r\n    uint256 counter = 0;\r\n    for (uint256 i = 0; i < totalAuction; i++) {\r\n      if(auctions[i].endTime < now - 86400 * 3){\r\n        delete auctions[i];\r\n        counter++;\r\n      }\r\n    }\r\n    totalAuction -= counter;\r\n  }\r\n\r\n  /* Buying */\r\n\r\n  function ceil(uint a) public pure returns (uint ) {\r\n    return uint(int(a * 100) / 100);\r\n  }\r\n  /*\r\n     Buy a country directly from the contract for the calculated price\r\n     which ensures that the owner gets a profit.  All countries that\r\n     have been listed can be bought by this method. User funds are sent\r\n     directly to the previous owner and are never stored in the contract.\r\n  */\r\n  function setGenes(uint256 _price, uint256 _monsterId) internal{\r\n    DataBase data = DataBase(databaseContract);\r\n    uint256 gene = _price / 10000000000000000;\r\n    if(gene > 255)\r\n      gene = 255;\r\n    uint256 genes = 0;\r\n    genes += gene * 1000000000000000;\r\n    genes += gene * 1000000000000;\r\n    genes += gene * 1000000000;\r\n    genes += gene * 1000000;\r\n    genes += gene * 1000;\r\n    genes += gene;\r\n    if(genes > 255255255255255255)\r\n      genes = 255255255255255255;\r\n    data.setMonsterGene(uint64(_monsterId),genes);\r\n  }\r\n\r\n  function buy (uint256 _auctionId, address _referral) payable public {\r\n    NFTToken CNDERC721 = NFTToken(ERC721Contract);\r\n    require(auctions[_auctionId].endTime > now);\r\n    require(CNDERC721.ownerOf(auctions[_auctionId].monsterId) != address(0));\r\n    require(ceil(msg.value) >= ceil(auctions[_auctionId].price + increaseRate));\r\n    require(CNDERC721.ownerOf(auctions[_auctionId].monsterId) != msg.sender);\r\n    require(!isContract(msg.sender));\r\n    require(msg.sender != address(0));\r\n    address oldOwner = CNDERC721.ownerOf(auctions[_auctionId].monsterId);\r\n    address newOwner = msg.sender;\r\n    uint256 oldPrice = auctions[_auctionId].price;\r\n    uint256 price = ceil(msg.value);\r\n    setGenes(price,auctions[_auctionId].monsterId);\r\n    CNDERC721.transferAuction(oldOwner, newOwner, auctions[_auctionId].monsterId);\r\n    auctions[_auctionId].price = ceil(price);\r\n    auctions[_auctionId].bidder = msg.sender;\r\n    DTT DTTtoken = DTT(dragonTreasureToken);\r\n    if(masterToReferral[msg.sender] != address(0) && masterToReferral[msg.sender] != msg.sender){\r\n      DTTtoken.approve(masterToReferral[msg.sender], DTTtoken.allowance(this,masterToReferral[msg.sender]) + price / 1000000000 * 5);\r\n    }else if(_referral != address(0) && _referral != msg.sender){\r\n      masterToReferral[msg.sender] = _referral;\r\n      DTTtoken.approve(_referral, DTTtoken.allowance(this,_referral) + price / 1000000000 * 5);\r\n    }\r\n\r\n    DTTtoken.approve(msg.sender, DTTtoken.allowance(this,msg.sender) + price / 1000000000 * 5);\r\n    if(oldPrice > 0)\r\n      oldOwner.transfer(oldPrice);\r\n    Bought(auctions[_auctionId].monsterId, newOwner, price);\r\n    Sold(auctions[_auctionId].monsterId, oldOwner, price);\r\n  }\r\n\r\n  function buyBlueStarEgg(address _sender, uint256 _tokens, uint16 _amount) isActive public returns(uint256) {\r\n    require(_amount <= 10 && _amount > 0);\r\n    uint256 price = ceil(5 * 10**8);\r\n    if (_tokens < price)\r\n        revert();\r\n    DataBase data = DataBase(databaseContract);\r\n    for (uint8 i = 0; i < _amount; i++) {\r\n      uint256 genes = 0;\r\n      genes += (randMod(205) + 51) * 1000000000000000;\r\n      genes += (randMod(205) + 51) * 1000000000000;\r\n      genes += (randMod(205) + 51) * 1000000000;\r\n      genes += (randMod(205) + 51) * 1000000;\r\n      genes += (randMod(205) + 51) * 1000;\r\n      genes += randMod(205) + 51;\r\n      uint32 classId = EggTable[1][randMod(EggTable[1].length)];\r\n      EggTotal[1] += 1;\r\n      uint64 monsterId = data.getTotalMonster() + 1;\r\n      data.addMonsterObj(monsterId,genes,classId,_sender,\"\",\"\");\r\n    }\r\n    Hatch(msg.sender, 1);\r\n    return price * _amount;\r\n  }\r\n\r\n  function buyRareEgg(uint8 _table, uint _amount, address _referral) isActive payable public {\r\n    require(_amount <= 10 && _amount > 0);\r\n    uint256 price = 0.1 ether;\r\n    if(EggTotal[_table] > 0)\r\n    price += uint((int(EggTotal[_table] / 500) * 10**18) / 20);\r\n    require(msg.value >= price * _amount);\r\n\r\n    DTT DTTtoken = DTT(dragonTreasureToken);\r\n    DataBase data = DataBase(databaseContract);\r\n    uint256 bonus = 10;\r\n    if(_amount >= 10){\r\n      bonus = 12;\r\n    }\r\n    if(masterToReferral[msg.sender] != address(0) && masterToReferral[msg.sender] != msg.sender){\r\n      DTTtoken.approve(masterToReferral[msg.sender], DTTtoken.allowance(this,masterToReferral[msg.sender]) + price / 10000000000 * 5 * bonus * _amount);\r\n    }else if(_referral != address(0) && _referral != msg.sender){\r\n      masterToReferral[msg.sender] = _referral;\r\n      DTTtoken.approve(_referral, DTTtoken.allowance(this,_referral) + price / 10000000000 * 5 * bonus * _amount);\r\n    }\r\n\r\n    DTTtoken.approve(msg.sender, DTTtoken.allowance(this,msg.sender) + price / 10000000000 * 5 * bonus * _amount);\r\n    for (uint8 i = 0; i < _amount; i++) {\r\n      uint256 genes = 0;\r\n      genes += (randMod(155) + 101) * 1000000000000000;\r\n      genes += (randMod(155) + 101) * 1000000000000;\r\n      genes += (randMod(155) + 101) * 1000000000;\r\n      genes += (randMod(155) + 101) * 1000000;\r\n      genes += (randMod(155) + 101) * 1000;\r\n      genes += randMod(155) + 101;\r\n      uint32 classId = EggTable[_table][randMod(EggTable[_table].length)];\r\n      EggTotal[_table] += 1;\r\n      uint64 monsterId = data.getTotalMonster() + 1;\r\n      data.addMonsterObj(monsterId,genes,classId,msg.sender,\"\",\"\");\r\n    }\r\n    Hatch(msg.sender, _table);\r\n  }\r\n\r\n  function hatchEgg(uint256 _eggId, string _name) public{\r\n    require(eggs[_eggId].hatchTime <= now);\r\n    require(eggs[_eggId].classId != 0 && eggs[_eggId].master == msg.sender);\r\n    DataBase CNDDB = DataBase(databaseContract);\r\n    uint64 monsterId = CNDDB.getTotalMonster() + 1;\r\n    string memory skills = \"0:0:0:0\";\r\n    CNDDB.addMonsterObj(monsterId,eggs[_eggId].genes,eggs[_eggId].classId,msg.sender,_name,skills);\r\n    eggs[_eggId].classId = 0;\r\n    eggs[_eggId].master = address(0);\r\n  }\r\n\r\n  function monstersForSale (uint8 optSort) external view returns (uint256[] _monsters){\r\n    uint256[] memory mcount = new uint256[](totalAuction);\r\n    uint256 counter = 0;\r\n    for (uint256 i = 0; i < totalAuction; i++) {\r\n        mcount[counter] = i;\r\n        counter++;\r\n    }\r\n    if(optSort != 0){\r\n      sortAuction(mcount);\r\n    }\r\n    return mcount;\r\n  }\r\n  function sortAuction (uint256[] _mcount) public view returns (uint256[] _monsters){\r\n    uint256[] memory mcount = new uint256[](_mcount.length);\r\n    for(uint256 i = 0; i < _mcount.length; i++){\r\n      mcount[i] = auctions[i].price * 10000000000 + i;\r\n    }\r\n    uint256[] memory tmps = getSortedArray(_mcount);\r\n    uint256[] memory result = new uint256[](tmps.length);\r\n    for(uint256 i2 = 0; i2 < tmps.length; i2++){\r\n      result[i2] = tmps[i2] % 10000000000;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /* Util */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(addr) } // solium-disable-line\r\n    return size > 0;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tableNum\",\"type\":\"uint16\"},{\"name\":\"_tableVals\",\"type\":\"uint32[]\"}],\"name\":\"setEggTable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tableNum\",\"type\":\"uint8\"},{\"name\":\"_tableVal\",\"type\":\"uint256\"}],\"name\":\"setEggTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_table\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"buyRareEgg\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"storageInt\",\"type\":\"uint256[]\"}],\"name\":\"getSortedArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_master\",\"type\":\"address\"},{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"setMasterToReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"EggTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonTreasureToken\",\"type\":\"address\"},{\"name\":\"_databaseContract\",\"type\":\"address\"},{\"name\":\"_ERC721Contract\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC721Contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"userWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"ceil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint64\"}],\"name\":\"setCooldown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"name\":\"classId\",\"type\":\"uint256\"},{\"name\":\"monsterId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"rarity\",\"type\":\"uint8\"},{\"name\":\"bidder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_master\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_skills\",\"type\":\"string\"}],\"name\":\"setNewMonster\",\"outputs\":[{\"name\":\"_monsterId\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint16\"}],\"name\":\"buyBlueStarEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"databaseContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"masterToReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_monsterId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_rarity\",\"type\":\"uint8\"},{\"name\":\"_endTime\",\"type\":\"uint8\"}],\"name\":\"addAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMonster\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClass\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"optSort\",\"type\":\"uint8\"}],\"name\":\"monstersForSale\",\"outputs\":[{\"name\":\"_monsters\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_mcount\",\"type\":\"uint256[]\"}],\"name\":\"sortAuction\",\"outputs\":[{\"name\":\"_monsters\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooldownTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eggs\",\"outputs\":[{\"name\":\"tableId\",\"type\":\"uint8\"},{\"name\":\"classId\",\"type\":\"uint32\"},{\"name\":\"genes\",\"type\":\"uint256\"},{\"name\":\"hatchTime\",\"type\":\"uint256\"},{\"name\":\"matronId\",\"type\":\"uint32\"},{\"name\":\"sireId\",\"type\":\"uint32\"},{\"name\":\"generation\",\"type\":\"uint16\"},{\"name\":\"master\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dragonTreasureToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thisAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eggId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"hatchEgg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tableId\",\"type\":\"uint16\"}],\"name\":\"Hatch\",\"type\":\"event\"}]","ContractName":"CryptoAndDragonsPresale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://88065423851bab4149f0cfbd0c67ef9008f295f2691fb19b63a1f8a015dc919d"}]}