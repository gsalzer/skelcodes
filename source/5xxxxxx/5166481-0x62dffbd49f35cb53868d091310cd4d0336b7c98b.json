{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract BlockchainBattleground {\r\n    address public owner;\r\n    address public owner2 = 0xc49D45ff52B1ABF1901B6c4f3D3e0615Ff85b9a3;\r\n    uint public matchCount;\r\n    Match private currentMatch;\r\n    bool matchPaidOff;\r\n\r\n    struct Gladiator {\r\n    \tstring name;\r\n    \tuint totalAmount;\r\n    \taddress[] backersList; // list with unique payers (no duplicates)\r\n    \tmapping(address => uint) amountPaid; // no need to initialize the mapping explicitly\r\n    }\r\n\r\n    struct Match {\r\n    \tuint matchId;\r\n    \tuint creationTime;\r\n    \tuint durationTime;\r\n    \tstring matchName;\r\n    \tGladiator left;\r\n    \tGladiator right;\r\n    }\r\n\r\n    function BlockchainBattleground() public payable {\r\n        owner = msg.sender;\r\n\tmatchCount = 0;\r\n\tmatchPaidOff = true;\r\n\r\n\tcreateMatch(\"Bitcoin Cash\", \"Bitcoin\", 7 days, \"Which is the real Bitcoin?\");\r\n    }\r\n\r\n    function createMatch(string leftName, string rightName, uint duration, string matchQuestion) public onlyOwner matchPaidOffModifier {\r\n\t    Gladiator memory leftGlad = Gladiator(leftName, 0, new address[](0));\r\n\t    Gladiator memory rightGlad = Gladiator(rightName, 0, new address[](0));\r\n\r\n\t    currentMatch = Match(matchCount, block.timestamp, duration, matchQuestion, leftGlad, rightGlad);\r\n\r\n\t    matchCount += 1;\r\n\t    matchPaidOff = false;\r\n    }\r\n\r\n    function payOff() public matchTimeOver {\r\n\t    // Anybody can call this and pay off the winners, after the match is over\r\n\t    Gladiator memory winnerGladiator;\r\n\t    uint winner;\r\n\t    if (currentMatch.left.totalAmount > currentMatch.right.totalAmount) {\r\n\t\t     winnerGladiator = currentMatch.left;\r\n\t\t     winner = 0;\r\n\t    }\r\n\t    else {\r\n\t\t    winnerGladiator = currentMatch.right;\r\n\t\t    winner = 1;\r\n\t    }\r\n\t    uint jackpot = (this.balance - winnerGladiator.totalAmount) * 96 / 100;\r\n\t    payWinningGladiator(winner, jackpot);\r\n            // we get the remaining 4% of the losing team\r\n\t    owner.transfer(this.balance / 2); \r\n\t    owner2.transfer(this.balance);\r\n\r\n\t    matchPaidOff = true;\r\n    }\r\n\r\n    function payWinningGladiator(uint winner, uint jackpot) private {\r\n\t    Gladiator winnerGlad = (winner == 0) ? currentMatch.left : currentMatch.right;\r\n            for (uint i = 0; i < winnerGlad.backersList.length; i++) {\r\n\t\t    address backerAddress = winnerGlad.backersList[i];\r\n\t\t    uint valueToPay = winnerGlad.amountPaid[backerAddress] + winnerGlad.amountPaid[backerAddress] * jackpot / winnerGlad.totalAmount;\r\n\t\t    backerAddress.transfer(valueToPay);\r\n\t    }\r\n    }\r\n\r\n    function payForYourGladiator(uint yourChoice) public payable matchTimeNotOver {\r\n\t    Gladiator currGlad = (yourChoice == 0) ? currentMatch.left : currentMatch.right;\r\n\t    if (currGlad.amountPaid[msg.sender] == 0)  {\r\n\t\t    currGlad.backersList.push(msg.sender);\r\n\t    }\r\n\t    currGlad.amountPaid[msg.sender] += msg.value;\r\n\t    currGlad.totalAmount += msg.value;\r\n    }\r\n\r\n    function getMatchInfo() public view returns (string leftGladName,\r\n                                              string rightGladName,\r\n                                              uint leftGladAmount,\r\n                                              uint rightGladAmount,\r\n                                              string matchName,\r\n                                              uint creationTime,\r\n                                              uint durationTime,\r\n\t\t\t\t\t      bool matchPaidOffReturn,\r\n\t\t\t\t\t      uint blockTimestamp) {\r\n        return (currentMatch.left.name,\r\n                currentMatch.right.name,\r\n                currentMatch.left.totalAmount,\r\n                currentMatch.right.totalAmount,\r\n                currentMatch.matchName,\r\n                currentMatch.creationTime,\r\n                currentMatch.durationTime,\r\n\t        matchPaidOff,\r\n\t        block.timestamp);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier matchTimeOver() {\r\n        require(block.timestamp > currentMatch.creationTime + currentMatch.durationTime);\r\n        _;\r\n    }\r\n\r\n    modifier matchTimeNotOver() {\r\n        require(block.timestamp < currentMatch.creationTime + currentMatch.durationTime);\r\n        _;\r\n    }\r\n\r\n    modifier matchPaidOffModifier() {\r\n\trequire(matchPaidOff);\r\n\t_;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getMatchInfo\",\"outputs\":[{\"name\":\"leftGladName\",\"type\":\"string\"},{\"name\":\"rightGladName\",\"type\":\"string\"},{\"name\":\"leftGladAmount\",\"type\":\"uint256\"},{\"name\":\"rightGladAmount\",\"type\":\"uint256\"},{\"name\":\"matchName\",\"type\":\"string\"},{\"name\":\"creationTime\",\"type\":\"uint256\"},{\"name\":\"durationTime\",\"type\":\"uint256\"},{\"name\":\"matchPaidOffReturn\",\"type\":\"bool\"},{\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yourChoice\",\"type\":\"uint256\"}],\"name\":\"payForYourGladiator\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payOff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"matchCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leftName\",\"type\":\"string\"},{\"name\":\"rightName\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"matchQuestion\",\"type\":\"string\"}],\"name\":\"createMatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]","ContractName":"BlockchainBattleground","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://adb3cbb3c942af37ba7fde1722b89fb3e17a0f4f193d27e740e19ba385dac647"}]}