{"status":"1","message":"OK","result":[{"SourceCode":"// Author : shift\r\n\r\npragma solidity ^0.4.18;\r\n\r\n//--------- OpenZeppelin's Safe Math\r\n//Source : https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n//-----------------------------------------------------\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n}\r\n\r\n/*\r\n  This contract stores twice every key value in order to be able to redistribute funds\r\n  when the bonus tokens are received (which is typically X months after the initial buy).\r\n*/\r\n\r\ncontract Moongang {\r\n  using SafeMath for uint256;\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier minAmountReached {\r\n    //In reality, the correct amount is the amount + 1%\r\n    require(this.balance >= SafeMath.div(SafeMath.mul(min_amount, 100), 99));\r\n    _;\r\n  }\r\n\r\n  modifier underMaxAmount {\r\n    require(max_amount == 0 || this.balance <= max_amount);\r\n    _;\r\n  }\r\n\r\n  //Constants of the contract\r\n  uint256 constant FEE = 100;    //1% fee\r\n  //SafeMath.div(20, 3) = 6\r\n  uint256 constant FEE_DEV = 6; //15% on the 1% fee\r\n  uint256 constant FEE_AUDIT = 12; //7.5% on the 1% fee\r\n  address public owner;\r\n  address constant public developer = 0xEE06BdDafFA56a303718DE53A5bc347EfbE4C68f;\r\n  address constant public auditor = 0x63F7547Ac277ea0B52A0B060Be6af8C5904953aa;\r\n  uint256 public individual_cap;\r\n\r\n  //Variables subject to changes\r\n  uint256 public max_amount;  //0 means there is no limit\r\n  uint256 public min_amount;\r\n\r\n  //Store the amount of ETH deposited by each account.\r\n  mapping (address => uint256) public balances;\r\n  mapping (address => uint256) public balances_bonus;\r\n  // Track whether the contract has bought the tokens yet.\r\n  bool public bought_tokens;\r\n  // Record ETH value of tokens currently held by contract.\r\n  uint256 public contract_eth_value;\r\n  uint256 public contract_eth_value_bonus;\r\n  //Set by the owner in order to allow the withdrawal of bonus tokens.\r\n  bool public bonus_received;\r\n  //The address of the contact.\r\n  address public sale;\r\n  //Token address\r\n  ERC20 public token;\r\n  //Records the fees that have to be sent\r\n  uint256 fees;\r\n  //Set by the owner. Allows people to refund totally or partially.\r\n  bool public allow_refunds;\r\n  //The reduction of the allocation in % | example : 40 -> 40% reduction\r\n  uint256 public percent_reduction;\r\n  bool public owner_supplied_eth;\r\n\r\n  //Internal functions\r\n  function Moongang(uint256 max, uint256 min, uint256 cap) {\r\n    /*\r\n    Constructor\r\n    */\r\n    owner = msg.sender;\r\n    max_amount = SafeMath.div(SafeMath.mul(max, 100), 99);\r\n    min_amount = min;\r\n    individual_cap = cap;\r\n  }\r\n\r\n  //Functions for the owner\r\n\r\n  // Buy the tokens. Sends ETH to the presale wallet and records the ETH amount held in the contract.\r\n  function buy_the_tokens() onlyOwner minAmountReached underMaxAmount {\r\n    //Avoids burning the funds\r\n    require(!bought_tokens && sale != 0x0);\r\n    //Record that the contract has bought the tokens.\r\n    bought_tokens = true;\r\n    //Sends the fee before so the contract_eth_value contains the correct balance\r\n    uint256 dev_fee = SafeMath.div(fees, FEE_DEV);\r\n    uint256 audit_fee = SafeMath.div(fees, FEE_AUDIT);\r\n    owner.transfer(SafeMath.sub(SafeMath.sub(fees, dev_fee), audit_fee));\r\n    developer.transfer(dev_fee);\r\n    auditor.transfer(audit_fee);\r\n    //Record the amount of ETH sent as the contract's current value.\r\n    contract_eth_value = this.balance;\r\n    contract_eth_value_bonus = this.balance;\r\n    // Transfer all the funds to the crowdsale address.\r\n    sale.transfer(contract_eth_value);\r\n  }\r\n\r\n  function force_refund(address _to_refund) onlyOwner {\r\n    require(!bought_tokens);\r\n    uint256 eth_to_withdraw = SafeMath.div(SafeMath.mul(balances[_to_refund], 100), 99);\r\n    balances[_to_refund] = 0;\r\n    balances_bonus[_to_refund] = 0;\r\n    fees = SafeMath.sub(fees, SafeMath.div(eth_to_withdraw, FEE));\r\n    _to_refund.transfer(eth_to_withdraw);\r\n  }\r\n\r\n  function force_partial_refund(address _to_refund) onlyOwner {\r\n    require(bought_tokens && percent_reduction > 0);\r\n    //Amount to refund is the amount minus the X% of the reduction\r\n    //amount_to_refund = balance*X\r\n    uint256 amount = SafeMath.div(SafeMath.mul(balances[_to_refund], percent_reduction), 100);\r\n    balances[_to_refund] = SafeMath.sub(balances[_to_refund], amount);\r\n    balances_bonus[_to_refund] = balances[_to_refund];\r\n    if (owner_supplied_eth) {\r\n      //dev fees aren't refunded, only owner fees\r\n      uint256 fee = amount.div(FEE).mul(percent_reduction).div(100);\r\n      amount = amount.add(fee);\r\n    }\r\n    _to_refund.transfer(amount);\r\n  }\r\n\r\n  function set_sale_address(address _sale) onlyOwner {\r\n    //Avoid mistake of putting 0x0 and can't change twice the sale address\r\n    require(_sale != 0x0);\r\n    sale = _sale;\r\n  }\r\n\r\n  function set_token_address(address _token) onlyOwner {\r\n    require(_token != 0x0);\r\n    token = ERC20(_token);\r\n  }\r\n\r\n  function set_bonus_received(bool _boolean) onlyOwner {\r\n    bonus_received = _boolean;\r\n  }\r\n\r\n  function set_allow_refunds(bool _boolean) onlyOwner {\r\n    /*\r\n    In case, for some reasons, the project refunds the money\r\n    */\r\n    allow_refunds = _boolean;\r\n  }\r\n\r\n  function set_percent_reduction(uint256 _reduction) onlyOwner payable {\r\n    require(bought_tokens && _reduction <= 100);\r\n    percent_reduction = _reduction;\r\n    if (msg.value > 0) {\r\n      owner_supplied_eth = true;\r\n    }\r\n    //we substract by contract_eth_value*_reduction basically\r\n    contract_eth_value = contract_eth_value.sub((contract_eth_value.mul(_reduction)).div(100));\r\n    contract_eth_value_bonus = contract_eth_value;\r\n  }\r\n\r\n  function change_individual_cap(uint256 _cap) onlyOwner {\r\n    individual_cap = _cap;\r\n  }\r\n\r\n  function change_owner(address new_owner) onlyOwner {\r\n    require(new_owner != 0x0);\r\n    owner = new_owner;\r\n  }\r\n\r\n  function change_max_amount(uint256 _amount) onlyOwner {\r\n      //ATTENTION! The new amount should be in wei\r\n      //Use https://etherconverter.online/\r\n      max_amount = SafeMath.div(SafeMath.mul(_amount, 100), 99);\r\n  }\r\n\r\n  function change_min_amount(uint256 _amount) onlyOwner {\r\n      //ATTENTION! The new amount should be in wei\r\n      //Use https://etherconverter.online/\r\n      min_amount = _amount;\r\n  }\r\n\r\n  //Public functions\r\n\r\n  // Allows any user to withdraw his tokens.\r\n  function withdraw() {\r\n    // Disallow withdraw if tokens haven't been bought yet.\r\n    require(bought_tokens);\r\n    uint256 contract_token_balance = token.balanceOf(address(this));\r\n    // Disallow token withdrawals if there are no tokens to withdraw.\r\n    require(contract_token_balance != 0);\r\n    uint256 tokens_to_withdraw = SafeMath.div(SafeMath.mul(balances[msg.sender], contract_token_balance), contract_eth_value);\r\n    // Update the value of tokens currently held by the contract.\r\n    contract_eth_value = SafeMath.sub(contract_eth_value, balances[msg.sender]);\r\n    // Update the user's balance prior to sending to prevent recursive call.\r\n    balances[msg.sender] = 0;\r\n    // Send the funds.  Throws on failure to prevent loss of funds.\r\n    require(token.transfer(msg.sender, tokens_to_withdraw));\r\n  }\r\n\r\n  function withdraw_bonus() {\r\n  /*\r\n    Special function to withdraw the bonus tokens after the 6 months lockup.\r\n    bonus_received has to be set to true.\r\n  */\r\n    require(bought_tokens && bonus_received);\r\n    uint256 contract_token_balance = token.balanceOf(address(this));\r\n    require(contract_token_balance != 0);\r\n    uint256 tokens_to_withdraw = SafeMath.div(SafeMath.mul(balances_bonus[msg.sender], contract_token_balance), contract_eth_value_bonus);\r\n    contract_eth_value_bonus = SafeMath.sub(contract_eth_value_bonus, balances_bonus[msg.sender]);\r\n    balances_bonus[msg.sender] = 0;\r\n    require(token.transfer(msg.sender, tokens_to_withdraw));\r\n  }\r\n\r\n  // Allows any user to get his eth refunded before the purchase is made.\r\n  function refund() {\r\n    require(!bought_tokens && allow_refunds && percent_reduction == 0);\r\n    //balance of contributor = contribution * 0.99\r\n    //so contribution = balance/0.99\r\n    uint256 eth_to_withdraw = SafeMath.div(SafeMath.mul(balances[msg.sender], 100), 99);\r\n    // Update the user's balance prior to sending ETH to prevent recursive call.\r\n    balances[msg.sender] = 0;\r\n    //Updates the balances_bonus too\r\n    balances_bonus[msg.sender] = 0;\r\n    //Updates the fees variable by substracting the refunded fee\r\n    fees = SafeMath.sub(fees, SafeMath.div(eth_to_withdraw, FEE));\r\n    // Return the user's funds.  Throws on failure to prevent loss of funds.\r\n    msg.sender.transfer(eth_to_withdraw);\r\n  }\r\n\r\n  //Allows any user to get a part of his ETH refunded, in proportion\r\n  //to the % reduced of the allocation\r\n  function partial_refund() {\r\n    require(bought_tokens && percent_reduction > 0);\r\n    //Amount to refund is the amount minus the X% of the reduction\r\n    //amount_to_refund = balance*X\r\n    uint256 amount = SafeMath.div(SafeMath.mul(balances[msg.sender], percent_reduction), 100);\r\n    balances[msg.sender] = SafeMath.sub(balances[msg.sender], amount);\r\n    balances_bonus[msg.sender] = balances[msg.sender];\r\n    if (owner_supplied_eth) {\r\n      //dev fees aren't refunded, only owner fees\r\n      uint256 fee = amount.div(FEE).mul(percent_reduction).div(100);\r\n      amount = amount.add(fee);\r\n    }\r\n    msg.sender.transfer(amount);\r\n  }\r\n\r\n  // Default function.  Called when a user sends ETH to the contract.\r\n  function () payable underMaxAmount {\r\n    require(!bought_tokens);\r\n    //1% fee is taken on the ETH\r\n    uint256 fee = SafeMath.div(msg.value, FEE);\r\n    fees = SafeMath.add(fees, fee);\r\n    //Updates both of the balances\r\n    balances[msg.sender] = SafeMath.add(balances[msg.sender], SafeMath.sub(msg.value, fee));\r\n    //Checks if the individual cap is respected\r\n    //If it's not, changes are reverted\r\n    require(individual_cap == 0 || balances[msg.sender] <= individual_cap);\r\n    balances_bonus[msg.sender] = balances[msg.sender];\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_bonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"individual_cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to_refund\",\"type\":\"address\"}],\"name\":\"force_refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances_bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allow_refunds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"change_owner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy_the_tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"change_individual_cap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"change_min_amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boolean\",\"type\":\"bool\"}],\"name\":\"set_bonus_received\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"change_max_amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auditor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_token_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reduction\",\"type\":\"uint256\"}],\"name\":\"set_percent_reduction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"partial_refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_supplied_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to_refund\",\"type\":\"address\"}],\"name\":\"force_partial_refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus_received\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_eth_value_bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percent_reduction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boolean\",\"type\":\"bool\"}],\"name\":\"set_allow_refunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sale\",\"type\":\"address\"}],\"name\":\"set_sale_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"max\",\"type\":\"uint256\"},{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Moongang","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000001043561a882930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://3c82ec773a957d585ecd112757507ab179d1a59f20d697e3b536e0db0ceb56be"}]}