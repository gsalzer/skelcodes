{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// GZR 'Gizer Gaming' token public sale contract\r\n//\r\n// For details, please visit: http://www.gizer.io\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// SafeMath (division not needed)\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary SafeMath {\r\n\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require( c >= a );\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require( b <= a );\r\n    c = a - b;\r\n  }\r\n\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require( a == 0 || c / a == b );\r\n  }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// Owned contract\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Owned {\r\n\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  // Events ---------------------------\r\n\r\n  event OwnershipTransferProposed(address indexed _from, address indexed _to);\r\n  event OwnershipTransferred(address indexed _to);\r\n\r\n  // Modifier -------------------------\r\n\r\n  modifier onlyOwner {\r\n    require( msg.sender == owner );\r\n    _;\r\n  }\r\n\r\n  // Functions ------------------------\r\n\r\n  function Owned() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require( _newOwner != owner );\r\n    require( _newOwner != address(0x0) );\r\n    newOwner = _newOwner;\r\n    OwnershipTransferProposed(owner, _newOwner);\r\n  }\r\n\r\n  function acceptOwnership() public {\r\n    require( msg.sender == newOwner );\r\n    owner = newOwner;\r\n    OwnershipTransferred(owner);\r\n  }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Interface {\r\n\r\n  // Events ---------------------------\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n  // Functions ------------------------\r\n\r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address _owner) public view returns (uint balance);\r\n  function transfer(address _to, uint _value) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n  function approve(address _spender, uint _value) public returns (bool success);\r\n  function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC Token Standard #20\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Token is ERC20Interface, Owned {\r\n  \r\n  using SafeMath for uint;\r\n\r\n  uint public tokensIssuedTotal = 0;\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping (address => uint)) allowed;\r\n\r\n  // Functions ------------------------\r\n\r\n  /* Total token supply */\r\n\r\n  function totalSupply() public view returns (uint) {\r\n    return tokensIssuedTotal;\r\n  }\r\n\r\n  /* Get the account balance for an address */\r\n\r\n  function balanceOf(address _owner) public view returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /* Transfer the balance from owner's account to another account */\r\n\r\n  function transfer(address _to, uint _amount) public returns (bool success) {\r\n    // amount sent cannot exceed balance\r\n    require( balances[msg.sender] >= _amount );\r\n\r\n    // update balances\r\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n    balances[_to]        = balances[_to].add(_amount);\r\n\r\n    // log event\r\n    Transfer(msg.sender, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /* Allow _spender to withdraw from your account up to _amount */\r\n\r\n  function approve(address _spender, uint _amount) public returns (bool success) {\r\n    // approval amount cannot exceed the balance\r\n    require( balances[msg.sender] >= _amount );\r\n      \r\n    // update allowed amount\r\n    allowed[msg.sender][_spender] = _amount;\r\n    \r\n    // log event\r\n    Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /* Spender of tokens transfers tokens from the owner's balance */\r\n  /* Must be pre-approved by owner */\r\n\r\n  function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\r\n    // balance checks\r\n    require( balances[_from] >= _amount );\r\n    require( allowed[_from][msg.sender] >= _amount );\r\n\r\n    // update balances and allowed amount\r\n    balances[_from]            = balances[_from].sub(_amount);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n    balances[_to]              = balances[_to].add(_amount);\r\n\r\n    // log event\r\n    Transfer(_from, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /* Returns the amount of tokens approved by the owner */\r\n  /* that can be transferred by spender */\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// GZR public token sale\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract GizerToken is ERC20Token {\r\n\r\n  /* Utility variable */\r\n  \r\n  uint constant E6  = 10**6;\r\n\r\n  /* Basic token data */\r\n\r\n  string public constant name     = \"Gizer Gaming Token\";\r\n  string public constant symbol   = \"GZR\";\r\n  uint8  public constant decimals = 6;\r\n\r\n  /* Wallets */\r\n  \r\n  address public wallet;\r\n  address public redemptionWallet;\r\n\r\n  /* Crowdsale parameters (constants) */\r\n\r\n  uint public constant DATE_ICO_START = 1518962400; // 18-Feb-2018 14:00 UTC 09:00 EST\r\n  uint public constant DATE_ICO_END   = 1521122400; // 15-Mar-2018 14:00 UTC 10:00 EST\r\n\r\n  uint public constant TOKEN_SUPPLY_TOTAL = 10000000 * E6;\r\n  uint public constant TOKEN_SUPPLY_CROWD =  6112926 * E6;\r\n  uint public constant TOKEN_SUPPLY_OWNER =  3887074 * E6; // 2,000,000 tokens reserve\r\n                                                           // 1,887,074 presale tokens\r\n\r\n  uint public constant MIN_CONTRIBUTION = 1 ether / 100;  \r\n  \r\n  uint public constant TOKENS_PER_ETH = 1000;\r\n  \r\n  uint public constant DATE_TOKENS_UNLOCKED = 1537020000; // 15-SEP-2018 14:00 UTC 10:00 EST\r\n  \r\n  /* Crowdsale variables */\r\n\r\n  uint public tokensIssuedCrowd  = 0;\r\n  uint public tokensIssuedOwner  = 0;\r\n  uint public tokensIssuedLocked = 0;\r\n  \r\n  uint public etherReceived = 0; // does not include presale ethers\r\n\r\n  /* Keep track of + ethers contributed,\r\n                   + tokens received \r\n                   + tokens locked during Crowdsale */\r\n  \r\n  mapping(address => uint) public etherContributed;\r\n  mapping(address => uint) public tokensReceived;\r\n  mapping(address => uint) public locked;\r\n  \r\n  // Events ---------------------------\r\n  \r\n  event WalletUpdated(address _newWallet);\r\n  event RedemptionWalletUpdated(address _newRedemptionWallet);\r\n  event EthCentsUpdated(uint _cents);\r\n  event TokensIssuedCrowd(address indexed _recipient, uint _tokens, uint _ether);\r\n  event TokensIssuedOwner(address indexed _recipient, uint _tokens, bool _locked);\r\n\r\n  // Basic Functions ------------------\r\n\r\n  /* Initialize */\r\n\r\n  function GizerToken() public {\r\n    require( TOKEN_SUPPLY_OWNER + TOKEN_SUPPLY_CROWD == TOKEN_SUPPLY_TOTAL );\r\n    wallet = owner;\r\n    redemptionWallet = owner;\r\n  }\r\n\r\n  /* Fallback */\r\n  \r\n  function () public payable {\r\n    buyTokens();\r\n  }\r\n\r\n  // Information Functions ------------\r\n  \r\n  /* What time is it? */\r\n  \r\n  function atNow() public view returns (uint) {\r\n    return now;\r\n  }\r\n\r\n  /* Are tokens tradeable */\r\n  \r\n  function tradeable() public view returns (bool) {\r\n    if (atNow() > DATE_ICO_END) return true ;\r\n    return false;\r\n  }\r\n  \r\n  /* Available to mint by owner */\r\n  \r\n  function availableToMint() public view returns (uint available) {\r\n    if (atNow() <= DATE_ICO_END) {\r\n      available = TOKEN_SUPPLY_OWNER.sub(tokensIssuedOwner);\r\n    } else {\r\n      available = TOKEN_SUPPLY_TOTAL.sub(tokensIssuedTotal);\r\n    }\r\n  }\r\n  \r\n  /* Unlocked tokens in an account */\r\n  \r\n  function unlockedTokens(address _account) public view returns (uint _unlockedTokens) {\r\n    if (atNow() <= DATE_TOKENS_UNLOCKED) {\r\n      return balances[_account] - locked[_account];\r\n    } else {\r\n      return balances[_account];\r\n    }\r\n  }\r\n\r\n  // Owner Functions ------------------\r\n  \r\n  /* Change the crowdsale wallet address */\r\n\r\n  function setWallet(address _wallet) public onlyOwner {\r\n    require( _wallet != address(0x0) );\r\n    wallet = _wallet;\r\n    WalletUpdated(_wallet);\r\n  }\r\n\r\n  /* Change the redemption wallet address */\r\n\r\n  function setRedemptionWallet(address _wallet) public onlyOwner {\r\n    require( _wallet != address(0x0) );\r\n    redemptionWallet = _wallet;\r\n    RedemptionWalletUpdated(_wallet);\r\n  }\r\n  \r\n  /* Minting of tokens by owner */\r\n\r\n  function mintTokens(address _account, uint _tokens) public onlyOwner {\r\n    // check token amount\r\n    require( _tokens <= availableToMint() );\r\n    \r\n    // update\r\n    balances[_account] = balances[_account].add(_tokens);\r\n    tokensIssuedOwner  = tokensIssuedOwner.add(_tokens);\r\n    tokensIssuedTotal  = tokensIssuedTotal.add(_tokens);\r\n    \r\n    // log event\r\n    Transfer(0x0, _account, _tokens);\r\n    TokensIssuedOwner(_account, _tokens, false);\r\n  }\r\n\r\n  /* Minting of tokens by owner */\r\n\r\n  function mintTokensLocked(address _account, uint _tokens) public onlyOwner {\r\n    // check token amount\r\n    require( _tokens <= availableToMint() );\r\n    \r\n    // update\r\n    balances[_account] = balances[_account].add(_tokens);\r\n    locked[_account]   = locked[_account].add(_tokens);\r\n    tokensIssuedOwner  = tokensIssuedOwner.add(_tokens);\r\n    tokensIssuedTotal  = tokensIssuedTotal.add(_tokens);\r\n    tokensIssuedLocked = tokensIssuedLocked.add(_tokens);\r\n    \r\n    // log event\r\n    Transfer(0x0, _account, _tokens);\r\n    TokensIssuedOwner(_account, _tokens, true);\r\n  }  \r\n  \r\n  /* Transfer out any accidentally sent ERC20 tokens */\r\n\r\n  function transferAnyERC20Token(address tokenAddress, uint amount) public onlyOwner returns (bool success) {\r\n      return ERC20Interface(tokenAddress).transfer(owner, amount);\r\n  }\r\n\r\n  // Private functions ----------------\r\n\r\n  /* Accept ETH during crowdsale (called by default function) */\r\n\r\n  function buyTokens() private {\r\n    \r\n    // basic checks\r\n    require( atNow() > DATE_ICO_START && atNow() < DATE_ICO_END );\r\n    require( msg.value >= MIN_CONTRIBUTION );\r\n    \r\n    // check token volume\r\n    uint tokensAvailable = TOKEN_SUPPLY_CROWD.sub(tokensIssuedCrowd);\r\n    uint tokens = msg.value.mul(TOKENS_PER_ETH) / 10**12;\r\n    require( tokens <= tokensAvailable );\r\n    \r\n    // issue tokens\r\n    balances[msg.sender] = balances[msg.sender].add(tokens);\r\n    \r\n    // update global tracking variables\r\n    tokensIssuedCrowd  = tokensIssuedCrowd.add(tokens);\r\n    tokensIssuedTotal  = tokensIssuedTotal.add(tokens);\r\n    etherReceived      = etherReceived.add(msg.value);\r\n    \r\n    // update contributor tracking variables\r\n    etherContributed[msg.sender] = etherContributed[msg.sender].add(msg.value);\r\n    tokensReceived[msg.sender]   = tokensReceived[msg.sender].add(tokens);\r\n    \r\n    // transfer Ether out\r\n    if (this.balance > 0) wallet.transfer(this.balance);\r\n\r\n    // log token issuance\r\n    TokensIssuedCrowd(msg.sender, tokens, msg.value);\r\n    Transfer(0x0, msg.sender, tokens);\r\n  }\r\n\r\n  // ERC20 functions ------------------\r\n\r\n  /* Override \"transfer\" */\r\n\r\n  function transfer(address _to, uint _amount) public returns (bool success) {\r\n    require( tradeable() );\r\n    require( unlockedTokens(msg.sender) >= _amount );\r\n    return super.transfer(_to, _amount);\r\n  }\r\n  \r\n  /* Override \"transferFrom\" */\r\n\r\n  function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\r\n    require( tradeable() );\r\n    require( unlockedTokens(_from) >= _amount ); \r\n    return super.transferFrom(_from, _to, _amount);\r\n  }\r\n\r\n  // Bulk token transfer function -----\r\n\r\n  /* Multiple token transfers from one address to save gas */\r\n\r\n  function transferMultiple(address[] _addresses, uint[] _amounts) external {\r\n    require( tradeable() );\r\n    require( _addresses.length == _amounts.length );\r\n    require( _addresses.length <= 100 );\r\n    \r\n    uint i;\r\n    \r\n    // check token amounts\r\n    uint tokens_to_transfer = 0;\r\n    for (i = 0; i < _addresses.length; i++) {\r\n      tokens_to_transfer = tokens_to_transfer.add(_amounts[i]);\r\n    }\r\n    require( tokens_to_transfer <= unlockedTokens(msg.sender) );\r\n    \r\n    // do the transfers\r\n    for (i = 0; i < _addresses.length; i++) {\r\n      super.transfer(_addresses[i], _amounts[i]);\r\n    }\r\n  }  \r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DATE_TOKENS_UNLOCKED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensIssuedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensIssuedCrowd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_CROWD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"mintTokensLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableToMint\",\"outputs\":[{\"name\":\"available\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redemptionWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensIssuedLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unlockedTokens\",\"outputs\":[{\"name\":\"_unlockedTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensIssuedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setRedemptionWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DATE_ICO_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"etherContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_PER_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DATE_ICO_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_TOTAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"WalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newRedemptionWallet\",\"type\":\"address\"}],\"name\":\"RedemptionWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_cents\",\"type\":\"uint256\"}],\"name\":\"EthCentsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"TokensIssuedCrowd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"TokensIssuedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GizerToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2ee6f888e941a07d7bb7b1094315c3f4f359f9f723e03526ba3abd804a784651"}]}