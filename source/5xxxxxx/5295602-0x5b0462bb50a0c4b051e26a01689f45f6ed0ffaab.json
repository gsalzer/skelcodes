{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  function totalSupply() constant public returns (uint);\r\n\r\n  function balanceOf(address who) constant public returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\n// File: contracts/ERC20BatchTransfer.sol\r\n\r\ncontract ERC20BatchTransfer {\r\n\r\n  function batchTransfer(address _tokenAddress, address[] _beneficiaries, uint256 _amount) public {\r\n    require(_amount > 0);\r\n    ERC20 tokenContract = ERC20(_tokenAddress);\r\n    for (uint b = 0; b < _beneficiaries.length; b++) {\r\n      require(tokenContract.transferFrom(msg.sender, _beneficiaries[b], _amount));\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC20BatchTransfer","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://568b6172428c6b93e7cad7ae1b1f34bc1b78fc0f0ddc0303b5d2c00736aee574"}]}