{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ItemRegistry {\r\n  using SafeMath for uint256;\r\n\r\n  enum ItemClass {TIER1, TIER2, TIER3, TIER4}\r\n\r\n  event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n\r\n  address public owner;\r\n  uint256 cutNumerator = 5;\r\n  uint256 cutDenominator = 100;\r\n\r\n  uint256[] private listedItems;\r\n  mapping (uint256 => address) private ownerOfItem;\r\n  mapping (uint256 => uint256) private startingPriceOfItem;\r\n  mapping (uint256 => uint256) private priceOfItem;\r\n  mapping (uint256 => ItemClass) private classOfItem;\r\n\r\n  function ItemRegistry () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /* Modifiers */\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /* Admin */\r\n  function setOwner (address _owner) onlyOwner() public {\r\n    owner = _owner;\r\n  }\r\n\r\n  function setCut (uint256 _n, uint256 _d) onlyOwner() public {\r\n    cutNumerator = _n;\r\n    cutDenominator = _d;\r\n  }\r\n\r\n  function withdraw () onlyOwner() public {\r\n    owner.transfer(this.balance);\r\n  }\r\n\r\n  function listItem (uint256 _itemId, uint256 _price, ItemClass _class) onlyOwner() public {\r\n    require(_price > 0);\r\n    require(priceOfItem[_itemId] == 0);\r\n    require(ownerOfItem[_itemId] == address(0));\r\n    require(_class <= ItemClass.TIER4);\r\n\r\n    ownerOfItem[_itemId] = owner;\r\n    priceOfItem[_itemId] = _price;\r\n    startingPriceOfItem[_itemId] = _price;\r\n    classOfItem[_itemId] = _class;\r\n    listedItems.push(_itemId);\r\n  }\r\n\r\n  function listMultipleItems (uint256[] _itemIds, uint256 _price, ItemClass _class) onlyOwner() external {\r\n    for (uint256 i = 0; i < _itemIds.length; i++) {\r\n      listItem(_itemIds[i], _price, _class);\r\n    }\r\n  }\r\n\r\n  /* Read */\r\n  function balanceOf (address _owner) public view returns (uint256 _balance) {\r\n    uint256 counter = 0;\r\n\r\n    for (uint256 i = 0; i < listedItems.length; i++) {\r\n      if (ownerOf(listedItems[i]) == _owner) {\r\n        counter++;\r\n      }\r\n    }\r\n\r\n    return counter;\r\n  }\r\n\r\n  function ownerOf (uint256 _itemId) public view returns (address _owner) {\r\n    return ownerOfItem[_itemId];\r\n  }\r\n\r\n  function startingPriceOf (uint256 _itemId) public view returns (uint256 _startingPrice) {\r\n    return startingPriceOfItem[_itemId];\r\n  }\r\n\r\n  function priceOf (uint256 _itemId) public view returns (uint256 _price) {\r\n    return priceOfItem[_itemId];\r\n  }\r\n\r\n  function classOf (uint256 _itemId) public view returns (ItemClass _class) {\r\n    return classOfItem[_itemId];\r\n  }\r\n\r\n  function nextPriceOf (uint256 _itemId) public view returns (uint256 _nextPrice) {\r\n    return calculateNextPrice(priceOf(_itemId), classOf(_itemId));\r\n  }\r\n\r\n  function allOf (uint256 _itemId) external view returns (address _owner, uint256 _startingPrice, uint256 _price, ItemClass _class, uint256 _nextPrice) {\r\n    return (ownerOf(_itemId), startingPriceOf(_itemId), priceOf(_itemId), classOf(_itemId), nextPriceOf(_itemId));\r\n  }\r\n\r\n  function itemsOfOwner (address _owner) public view returns (uint256[] _items) {\r\n    uint256[] memory items = new uint256[](balanceOf(_owner));\r\n\r\n    uint256 itemCounter = 0;\r\n    for (uint256 i = 0; i < listedItems.length; i++) {\r\n      if (ownerOf(listedItems[i]) == _owner) {\r\n        items[itemCounter] = listedItems[i];\r\n        itemCounter += 1;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  function numberOfItemsForSale () public view returns (uint256 _n) {\r\n    return listedItems.length;\r\n  }\r\n\r\n  function itemsForSaleLimit (uint256 _from, uint256 _take) public view returns (uint256[] _items) {\r\n    uint256[] memory items = new uint256[](_take);\r\n\r\n    for (uint256 i = 0; i < _take; i++) {\r\n      items[i] = listedItems[_from + i];\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  function allItemsForSale () public view returns (uint256[] _items) {\r\n    return listedItems;\r\n  }\r\n\r\n  /* Next price */\r\n  function calculateNextPrice (uint256 _currentPrice, ItemClass _class) public pure returns (uint256 _newPrice) {\r\n    if (_class == ItemClass.TIER1) {\r\n      if (_currentPrice <= 0.05 ether) {\r\n        return _currentPrice.mul(2); // 2\r\n      } else if (_currentPrice <= 0.5 ether) {\r\n        return _currentPrice.mul(117).div(100); // 1.17\r\n      } else {\r\n        return _currentPrice.mul(112).div(100); // 1.12\r\n      }\r\n    }\r\n\r\n    if (_class == ItemClass.TIER2) {\r\n      if (_currentPrice <= 0.1 ether) {\r\n        return _currentPrice.mul(2); // 2\r\n      } else if (_currentPrice <= 0.5 ether) {\r\n        return _currentPrice.mul(118).div(100); // 1.18\r\n      } else {\r\n        return _currentPrice.mul(113).div(100); // 1.13\r\n      }\r\n    }\r\n\r\n    if (_class == ItemClass.TIER3) {\r\n      if (_currentPrice <= 0.15 ether) {\r\n        return _currentPrice * 2; // 2\r\n      } else if (_currentPrice <= 0.5 ether) {\r\n        return _currentPrice.mul(119).div(100); // 1.19\r\n      } else {\r\n        return _currentPrice.mul(114).div(100); // 1.14\r\n      }\r\n    }\r\n\r\n    if (_class == ItemClass.TIER4) {\r\n      if (_currentPrice <= 0.2 ether) {\r\n        return _currentPrice.mul(2); // 2\r\n      } else if (_currentPrice <= 0.5 ether) {\r\n        return _currentPrice.mul(120).div(100); // 1.2\r\n      } else {\r\n        return  _currentPrice.mul(115).div(100); // 1.15\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Buy */\r\n  function buy (uint256 _itemId) payable public {\r\n    require(priceOf(_itemId) > 0);\r\n    require(ownerOf(_itemId) != address(0));\r\n    require(msg.value == priceOf(_itemId));\r\n    require(ownerOf(_itemId) != msg.sender);\r\n    require(!isContract(msg.sender));\r\n\r\n    address oldOwner = ownerOf(_itemId);\r\n    address newOwner = msg.sender;\r\n    uint256 price = priceOf(_itemId);\r\n\r\n    ownerOfItem[_itemId] = newOwner;\r\n    priceOfItem[_itemId] = nextPriceOf(_itemId);\r\n\r\n    Bought(_itemId, newOwner, price);\r\n    Sold(_itemId, oldOwner, price);\r\n\r\n    uint256 cut = 0;\r\n    if (cutDenominator > 0 && cutNumerator > 0) {\r\n      cut = price.mul(cutNumerator).div(cutDenominator);\r\n    }\r\n\r\n    oldOwner.transfer(price - cut);\r\n  }\r\n\r\n  /* Util */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(addr) } // solium-disable-line\r\n    return size > 0;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"allOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_class\",\"type\":\"uint8\"},{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfItemsForSale\",\"outputs\":[{\"name\":\"_n\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"classOf\",\"outputs\":[{\"name\":\"_class\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_class\",\"type\":\"uint8\"}],\"name\":\"listMultipleItems\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_take\",\"type\":\"uint256\"}],\"name\":\"itemsForSaleLimit\",\"outputs\":[{\"name\":\"_items\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"nextPriceOf\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"itemsOfOwner\",\"outputs\":[{\"name\":\"_items\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_n\",\"type\":\"uint256\"},{\"name\":\"_d\",\"type\":\"uint256\"}],\"name\":\"setCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"startingPriceOf\",\"outputs\":[{\"name\":\"_startingPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allItemsForSale\",\"outputs\":[{\"name\":\"_items\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_class\",\"type\":\"uint8\"}],\"name\":\"listItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_currentPrice\",\"type\":\"uint256\"},{\"name\":\"_class\",\"type\":\"uint8\"}],\"name\":\"calculateNextPrice\",\"outputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"}]","ContractName":"ItemRegistry","CompilerVersion":"v0.4.20-nightly.2018.1.6+commit.2548228b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3ab6528beb272bbb0990fcb33f960de7f826d48d64b196381b6774fad5bf7403"}]}