{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) { return 0; }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    \r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n    \r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n    \r\n    bool public paused = false;\r\n    \r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n    \r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n    \r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n    \r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    \r\n    function transfer(\r\n        address to, \r\n        uint256 value\r\n    ) \r\n        public \r\n        returns (bool);\r\n    \r\n    event Transfer(\r\n        address indexed from, \r\n        address indexed to, \r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) \r\n        public view returns (uint256);\r\n        \r\n    function transferFrom(address from, address to, uint256 value) \r\n        public returns (bool);\r\n        \r\n    function approve(address spender, uint256 value) \r\n        public returns (bool);\r\n        \r\n    event Approval(\r\n        address indexed owner, \r\n        address indexed spender, \r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\ncontract TokenRecipient {\r\n    function receiveApproval(\r\n        address from, \r\n        uint256 tokens, \r\n        address token, \r\n        bytes data\r\n    )\r\n        public;\r\n}\r\n\r\n\r\ncontract CLIXToken is ERC20, Ownable, Pausable {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (address => bool) public whitelist;\r\n    mapping (address => bool) public blacklisted;\r\n    mapping (address => bool) public hasReceived;\r\n\r\n    string public name = \"CLIXToken\";\r\n    string public symbol = \"CLIX\";\r\n    \r\n    uint public decimals = 18;\r\n    uint256 private totalSupply_ = 200000000e18;\r\n    uint256 private totalReserved = (totalSupply_.div(100)).mul(10);\r\n    uint256 private totalBounties = (totalSupply_.div(100)).mul(5);\r\n    uint256 public totalDistributed = totalReserved.add(totalBounties);\r\n    uint256 public totalRemaining = totalSupply_.sub(totalDistributed);\r\n    uint256 public tokenRate;\r\n    \r\n    bool public distributionFinished;\r\n\r\n    event Transfer(\r\n        address indexed _from, \r\n        address indexed _to, \r\n        uint256 _value\r\n    );\r\n    \r\n    event Approval(\r\n        address indexed _owner, \r\n        address indexed _spender, \r\n        uint256 _value\r\n    );\r\n    \r\n    event Distribution(\r\n        address indexed to, \r\n        uint256 amount\r\n    );\r\n    \r\n    modifier distributionAllowed() {\r\n        require(!distributionFinished);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyWhitelist() {\r\n        require(whitelist[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    modifier notBlacklisted() {\r\n        require(!blacklisted[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    // mitigates the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n    \r\n    constructor(uint256 _tokenRate) public {\r\n        tokenRate = _tokenRate;\r\n        balances[msg.sender] = totalDistributed;\r\n    }\r\n    \r\n    function() external payable { getClixToken(); }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n\t    return balances[_owner];\r\n    }\r\n    \r\n    function setTokenRate(uint256 _tokenRate) public onlyOwner {\r\n        tokenRate = _tokenRate;\r\n    }\r\n    \r\n    function enableWhitelist(address[] addresses) public onlyOwner {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            whitelist[addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function disableWhitelist(address[] addresses) public onlyOwner {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            whitelist[addresses[i]] = false;\r\n        }\r\n    }\r\n    \r\n    function enableBlacklist(address[] addresses) public onlyOwner {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            blacklisted[addresses[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function disableBlacklist(address[] addresses) public onlyOwner {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            blacklisted[addresses[i]] = false;\r\n        }\r\n    }\r\n    \r\n    function distributeToken(\r\n        address _to, \r\n        uint256 _amount\r\n    ) \r\n        private \r\n        distributionAllowed \r\n        whenNotPaused \r\n        returns (bool)\r\n    {\r\n        totalDistributed = totalDistributed.add(_amount);\r\n        totalRemaining = totalRemaining.sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Distribution(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n        \r\n        if (totalDistributed >= totalSupply_) {\r\n            distributionFinished = true;\r\n        }\r\n    }\r\n    \r\n    function getClixToken() \r\n        public \r\n        payable \r\n        distributionAllowed \r\n        onlyWhitelist \r\n        whenNotPaused \r\n    {\r\n        require(tokenRate <= totalRemaining);\r\n        \r\n        /* Buyer has previously received their free tokens so this time we \r\n        calculate how many tokens to send based on the amount of eth sent to the \r\n        contract */\r\n        if (hasReceived[msg.sender]) {\r\n            uint256 ethInWei = msg.value;\r\n            uint256 weiNumber = 1000000000000000000;\r\n            uint256 divider = weiNumber.div(tokenRate.div(weiNumber));\r\n            uint256 tokenReceived = (ethInWei.div(divider)).mul(weiNumber);\r\n            distributeToken(msg.sender, tokenReceived);\r\n        } else {\r\n            // First time buyer gets free tokens (tokenRate)\r\n            distributeToken(msg.sender, tokenRate);\r\n        }\r\n\r\n        if (!hasReceived[msg.sender] && tokenRate > 0) {\r\n            hasReceived[msg.sender] = true;\r\n        }\r\n\r\n        if (totalDistributed >= totalSupply_) {\r\n            distributionFinished = true;\r\n        }\r\n    }\r\n    \r\n    function transfer(\r\n        address _to, \r\n        uint256 _amount\r\n    ) \r\n        public \r\n        onlyPayloadSize(2 * 32) \r\n        whenNotPaused \r\n        notBlacklisted \r\n        returns (bool success) \r\n    {\r\n        require(_to != address(0));\r\n        require(_amount <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(\r\n        address _from, \r\n        address _to, \r\n        uint256 _amount\r\n    )\r\n        public \r\n        onlyPayloadSize(3 * 32) \r\n        whenNotPaused \r\n        notBlacklisted \r\n        returns (bool success) \r\n    {\r\n        require(_to != address(0));\r\n        require(_amount <= balances[_from]);\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function approve(\r\n        address _spender, \r\n        uint256 _value\r\n    ) \r\n        public \r\n        whenNotPaused \r\n        returns (bool success) \r\n    {\r\n        // mitigates the ERC20 spend/approval race condition\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(\r\n        address _owner, \r\n        address _spender\r\n    ) \r\n        public \r\n        view \r\n        whenNotPaused \r\n        returns (uint256) \r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function withdraw() public onlyOwner {\r\n        uint256 etherBalance = address(this).balance;\r\n        owner.transfer(etherBalance);\r\n    }\r\n    \r\n    function withdrawTokens(\r\n        address tokenAddress, \r\n        uint256 tokens\r\n    ) \r\n        public\r\n        onlyOwner \r\n        returns (bool success)\r\n    {\r\n        return ERC20Basic(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    \r\n    function approveAndCall(\r\n        address _spender, \r\n        uint256 _value, \r\n        bytes _extraData\r\n    ) \r\n        public \r\n        whenNotPaused \r\n    {\r\n        approve(_spender, _value);\r\n        TokenRecipient(_spender).receiveApproval(\r\n            msg.sender, \r\n            _value, \r\n            address(this), \r\n            _extraData\r\n        );\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"disableBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenRate\",\"type\":\"uint256\"}],\"name\":\"setTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"enableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getClixToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"enableBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CLIXToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000021e19e0c9bab2400000","Library":"","SwarmSource":"bzzr://6c54f69f78e76985641e3cba5326322589114c7724c906cf0ccd15355aba8109"}]}