{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract CryptoVideoGameItem {\r\n\r\n    address contractCreator = 0xC15d9f97aC926a6A29A681f5c19e2b56fd208f00; \r\n    address devFeeAddress = 0xC15d9f97aC926a6A29A681f5c19e2b56fd208f00;\r\n\r\n    address cryptoVideoGames = 0xdEc14D8f4DA25108Fd0d32Bf2DeCD9538564D069; \r\n\r\n    struct VideoGameItem {\r\n        string videoGameItemName;\r\n        address ownerAddress;\r\n        uint256 currentPrice;\r\n        uint parentVideoGame;\r\n    }\r\n    VideoGameItem[] videoGameItems;\r\n\r\n    modifier onlyContractCreator() {\r\n        require (msg.sender == contractCreator);\r\n        _;\r\n    }\r\n\r\n    bool isPaused;\r\n    \r\n    \r\n    /*\r\n    We use the following functions to pause and unpause the game.\r\n    */\r\n    function pauseGame() public onlyContractCreator {\r\n        isPaused = true;\r\n    }\r\n    function unPauseGame() public onlyContractCreator {\r\n        isPaused = false;\r\n    }\r\n    function GetGamestatus() public view returns(bool) {\r\n       return(isPaused);\r\n    }\r\n\r\n    /*\r\n    This function allows users to purchase Video Game Item. \r\n    The price is automatically multiplied by 2 after each purchase.\r\n    Users can purchase multiple video game Items.\r\n    */\r\n    function purchaseVideoGameItem(uint _videoGameItemId) public payable {\r\n        require(msg.value >= videoGameItems[_videoGameItemId].currentPrice);\r\n        require(isPaused == false);\r\n\r\n        CryptoVideoGames parentContract = CryptoVideoGames(cryptoVideoGames);\r\n        uint256 currentPrice = videoGameItems[_videoGameItemId].currentPrice;\r\n        uint256 excess = msg.value - currentPrice;\r\n        // Calculate the 10% value\r\n        uint256 devFee = (currentPrice / 10);\r\n        uint256 parentOwnerFee = (currentPrice / 10);\r\n\r\n        address parentOwner = parentContract.getVideoGameOwner(videoGameItems[_videoGameItemId].parentVideoGame);\r\n        address newOwner = msg.sender;\r\n        // Calculate the video game owner commission on this sale & transfer the commission to the owner.     \r\n        uint256 commissionOwner = currentPrice - devFee - parentOwnerFee; // => 80%\r\n        videoGameItems[_videoGameItemId].ownerAddress.transfer(commissionOwner);\r\n\r\n        // Transfer the 10% commission to the developer\r\n        devFeeAddress.transfer(devFee); // => 10% \r\n        parentOwner.transfer(parentOwnerFee); // => 10%   \r\n        newOwner.transfer(excess);              \r\n\r\n        // Update the video game owner and set the new price\r\n        videoGameItems[_videoGameItemId].ownerAddress = newOwner;\r\n        videoGameItems[_videoGameItemId].currentPrice = mul(videoGameItems[_videoGameItemId].currentPrice, 2);\r\n    }\r\n    \r\n    /*\r\n    This function can be used by the owner of a video game item to modify the price of its video game item.\r\n    He can make the price lesser than the current price only.\r\n    */\r\n    function modifyCurrentVideoGameItemPrice(uint _videoGameItemId, uint256 _newPrice) public {\r\n        require(_newPrice > 0);\r\n        require(videoGameItems[_videoGameItemId].ownerAddress == msg.sender);\r\n        require(_newPrice < videoGameItems[_videoGameItemId].currentPrice);\r\n        videoGameItems[_videoGameItemId].currentPrice = _newPrice;\r\n    }\r\n    \r\n    // This function will return all of the details of the Video Game Item\r\n    function getVideoGameItemDetails(uint _videoGameItemId) public view returns (\r\n        string videoGameItemName,\r\n        address ownerAddress,\r\n        uint256 currentPrice,\r\n        uint parentVideoGame\r\n    ) {\r\n        VideoGameItem memory _videoGameItem = videoGameItems[_videoGameItemId];\r\n\r\n        videoGameItemName = _videoGameItem.videoGameItemName;\r\n        ownerAddress = _videoGameItem.ownerAddress;\r\n        currentPrice = _videoGameItem.currentPrice;\r\n        parentVideoGame = _videoGameItem.parentVideoGame;\r\n    }\r\n    \r\n    // This function will return only the price of a specific Video Game Item\r\n    function getVideoGameItemCurrentPrice(uint _videoGameItemId) public view returns(uint256) {\r\n        return(videoGameItems[_videoGameItemId].currentPrice);\r\n    }\r\n    \r\n    // This function will return only the owner address of a specific Video Game\r\n    function getVideoGameItemOwner(uint _videoGameItemId) public view returns(address) {\r\n        return(videoGameItems[_videoGameItemId].ownerAddress);\r\n    }\r\n    \r\n    \r\n    /**\r\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    // This function will be used to add a new video game by the contract creator\r\n    function addVideoGameItem(string videoGameItemName, address ownerAddress, uint256 currentPrice, uint parentVideoGame) public onlyContractCreator {\r\n        videoGameItems.push(VideoGameItem(videoGameItemName,ownerAddress,currentPrice, parentVideoGame));\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\ncontract CryptoVideoGames {\r\n    \r\n    \r\n    \r\n    // This function will return only the owner address of a specific Video Game\r\n    function getVideoGameOwner(uint _videoGameId) public view returns(address) {\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"GetGamestatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_videoGameItemId\",\"type\":\"uint256\"}],\"name\":\"getVideoGameItemCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_videoGameItemId\",\"type\":\"uint256\"}],\"name\":\"getVideoGameItemOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_videoGameItemId\",\"type\":\"uint256\"}],\"name\":\"purchaseVideoGameItem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"videoGameItemName\",\"type\":\"string\"},{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"parentVideoGame\",\"type\":\"uint256\"}],\"name\":\"addVideoGameItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_videoGameItemId\",\"type\":\"uint256\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"modifyCurrentVideoGameItemPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_videoGameItemId\",\"type\":\"uint256\"}],\"name\":\"getVideoGameItemDetails\",\"outputs\":[{\"name\":\"videoGameItemName\",\"type\":\"string\"},{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"parentVideoGame\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unPauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoVideoGameItem","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://de1f4dc3bcabc69771bb83b261f98a3ee42fb843111b77b2e92823a6aa522e4f"}]}