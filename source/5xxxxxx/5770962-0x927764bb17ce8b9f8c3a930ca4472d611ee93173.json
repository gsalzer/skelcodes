{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n _ _ _  _____  _____  _____  __            ___    _____  _____  _____  _____  _____\r\n| | | ||  |  ||   __||   __||  |      ___ |  _|  |   __||_   _||  |  ||   __|| __  |\r\n| | | ||     ||   __||   __||  |__   | . ||  _|  |   __|  | |  |     ||   __||    -|\r\n|_____||__|__||_____||_____||_____|  |___||_|    |_____|  |_|  |__|__||_____||__|__|\r\n\r\n\r\n\r\n                                  `.-::::::::::::-.`\r\n                           .:::+:-.`            `.-:+:::.\r\n                      `::::.   `-                  -`   .:::-`\r\n                   .:::`        :                  :        `:::.\r\n                `:/-            `-                -`            -/:`\r\n              ./:`               :               `:               `:/.\r\n            .+:                   :              :                  `:+.\r\n          `/-`..`                 -`            `-                 `..`-/`\r\n         :/`    ..`                :            :                `..    `/:\r\n       `+.        ..`              -`          `-              `..        .+`\r\n      .+`           ..`             :          :             `..           `+.\r\n     -+               ..`           -.        ..           `..               +-\r\n    .+                 `..`          :        :          `..                  +.\r\n   `o                    `..`        ..      ..        `..`                    o`\r\n   o`                      `..`     `./------/.`     `..`                      `o\r\n  -+``                       `..``-::.````````.::-``..`                       ``+-\r\n  s```....````                 `+:.  ..------..  .:+`                 ````....```o\r\n .+       ````...````         .+. `--``      ``--` .+.         ````...````       +.\r\n +.              ````....`````+` .:`            `:. `o`````....````              ./\r\n o                       ````s` `/                /` `s````                       o\r\n s                           s  /`                .:  s                           s\r\n s                           s  /`                `/  s                           s\r\n s                        ```s` `/                /` `s```                        o\r\n +.               ````....```.+  .:`            `:.  +.```....````               .+\r\n ./        ```....````        -/` `--`        `--` `/.        ````....```        +.\r\n  s````....```                 .+:` `.--------.` `:+.                 ```....````s\r\n  :/```                       ..`.::-.``    ``.-::.`..                       ```/:\r\n   o`                       ..`     `-/-::::-/-`     `..                       `o\r\n   `o                     ..`        ..      ..        `..                     o`\r\n    -/                  ..`          :        :          `..                  /-\r\n     -/               ..`           ..        ..           `..               /-\r\n      -+`           ..`             :          :             `-.           `+-\r\n       .+.        .-`              -`          ..              `-.        .+.\r\n         /:     .-`                :            :                `-.    `:/\r\n          ./- .-`                 -`            `-                 `-. -/.\r\n            -+-                   :              :                   :+-\r\n              -/-`               -`              `-               `-/-\r\n                .:/.             :                :             ./:.\r\n                   -:/-         :                  :         -/:-\r\n                      .:::-`   `-                  -`   `-:::.\r\n                          `-:::+-.`              `.:+:::-`\r\n                                `.-::::::::::::::-.`\r\n\r\n---Design---\r\nJörmungandr\r\n\r\n---Contract and Frontend---\r\nMr Fahrenheit\r\nJörmungandr\r\n\r\n---Contract Auditor---\r\n8 ฿ł₮ ₮Ɽł₱\r\n\r\n---Contract Advisors---\r\nEtherguy\r\nNorsefire\r\n\r\n**/\r\n\r\ncontract WheelOfEther {\r\n    using SafeMath for uint;\r\n\r\n    //  Modifiers\r\n\r\n    modifier nonContract() {                // contracts pls go\r\n        require(tx.origin == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier gameActive() {\r\n        require(gamePaused == false);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin(){\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    // Events\r\n\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 ethereumIn,\r\n        uint256 contractBal,\r\n        uint256 devFee,\r\n        uint timestamp\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 ethereumOut,\r\n        uint256 contractBal,\r\n        uint timestamp\r\n    );\r\n\r\n    event spinResult(\r\n        address indexed customerAddress,\r\n        uint256 wheelNumber,\r\n        uint256 outcome,\r\n        uint256 ethSpent,\r\n        uint256 ethReturned,\r\n        uint256 userBalance,\r\n        uint timestamp\r\n    );\r\n\r\n    uint256 _seed;\r\n    address admin;\r\n    bool public gamePaused = false;\r\n    uint256 minBet = 0.01 ether;\r\n    uint256 maxBet = 5 ether;\r\n    uint256 devFeeBalance = 0;\r\n\r\n    uint8[10] brackets = [1,3,6,12,24,40,56,68,76,80];\r\n\r\n    uint256 internal globalFactor = 10e21;\r\n    uint256 constant internal constantFactor = 10e21 * 10e21;\r\n    mapping(address => uint256) internal personalFactorLedger_;\r\n    mapping(address => uint256) internal balanceLedger_;\r\n\r\n\r\n    constructor()\r\n        public\r\n    {\r\n        admin = msg.sender;\r\n    }\r\n\r\n\r\n    function getBalance()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return this.balance;\r\n    }\r\n\r\n\r\n    function buyTokens()\r\n        public\r\n        payable\r\n        nonContract\r\n        gameActive\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        // User must buy at least 0.02 eth\r\n        require(msg.value >= (minBet * 2));\r\n\r\n        // Add 2% fee of the buy to devFeeBalance\r\n        uint256 devFee = msg.value / 50;\r\n        devFeeBalance = devFeeBalance.add(devFee);\r\n\r\n        // Adjust ledgers while taking the dev fee into account\r\n        balanceLedger_[_customerAddress] = ethBalanceOf(_customerAddress).add(msg.value).sub(devFee);\r\n        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\r\n\r\n        onTokenPurchase(_customerAddress, msg.value, this.balance, devFee, now);\r\n    }\r\n\r\n\r\n    function sell(uint256 sellEth)\r\n        public\r\n        nonContract\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        // User must have enough eth and cannot sell 0\r\n        require(sellEth <= ethBalanceOf(_customerAddress));\r\n        require(sellEth > 0);\r\n        // Transfer balance and update user ledgers\r\n        _customerAddress.transfer(sellEth);\r\n        balanceLedger_[_customerAddress] = ethBalanceOf(_customerAddress).sub(sellEth);\r\n\t\tpersonalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\r\n\r\n        onTokenSell(_customerAddress, sellEth, this.balance, now);\r\n    }\r\n\r\n\r\n    function sellAll()\r\n        public\r\n        nonContract\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        // Set the sell amount to the user's full balance, don't sell if empty\r\n        uint256 sellEth = ethBalanceOf(_customerAddress);\r\n        require(sellEth > 0);\r\n        // Transfer balance and update user ledgers\r\n        _customerAddress.transfer(sellEth);\r\n        balanceLedger_[_customerAddress] = 0;\r\n\t\tpersonalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\r\n\r\n        onTokenSell(_customerAddress, sellEth, this.balance, now);\r\n    }\r\n\r\n\r\n    function ethBalanceOf(address _customerAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Balance ledger * personal factor * globalFactor / constantFactor\r\n        return balanceLedger_[_customerAddress].mul(personalFactorLedger_[_customerAddress]).mul(globalFactor) / constantFactor;\r\n    }\r\n\r\n\r\n    function tokenSpin(uint256 betEth)\r\n        public\r\n        nonContract\r\n        gameActive\r\n        returns (uint256 resultNum)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        // User must have enough eth\r\n        require(ethBalanceOf(_customerAddress) >= betEth);\r\n        // User must bet at least the minimum\r\n        require(betEth >= minBet);\r\n        // If the user bets more than maximum...they just bet the maximum\r\n        if (betEth > maxBet){\r\n            betEth = maxBet;\r\n        }\r\n        // User cannot bet more than 10% of available pool\r\n        if (betEth > betPool(_customerAddress)/10) {\r\n            betEth = betPool(_customerAddress)/10;\r\n        }\r\n        // Execute the bet and return the outcome\r\n        resultNum = bet(betEth, _customerAddress);\r\n    }\r\n\r\n\r\n    function spinAllTokens()\r\n        public\r\n        nonContract\r\n        gameActive\r\n        returns (uint256 resultNum)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        // set the bet amount to the user's full balance\r\n        uint256 betEth = ethBalanceOf(_customerAddress);\r\n        // User cannot bet more than 10% of available pool\r\n        if (betEth > betPool(_customerAddress)/10) {\r\n            betEth = betPool(_customerAddress)/10;\r\n        }\r\n        // User must bet more than the minimum\r\n        require(betEth >= minBet);\r\n        // If the user bets more than maximum...they just bet the maximum\r\n        if (betEth >= maxBet){\r\n            betEth = maxBet;\r\n        }\r\n        // Execute the bet and return the outcome\r\n        resultNum = bet(betEth, _customerAddress);\r\n    }\r\n\r\n\r\n    function etherSpin()\r\n        public\r\n        payable\r\n        nonContract\r\n        gameActive\r\n        returns (uint256 resultNum)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        uint256 betEth = msg.value;\r\n\r\n        // All eth is converted into tokens before the bet\r\n        // User must buy at least 0.02 eth\r\n        require(betEth >= (minBet * 2));\r\n\r\n        // Add 2% fee of the buy to devFeeBalance\r\n        uint256 devFee = betEth / 50;\r\n        devFeeBalance = devFeeBalance.add(devFee);\r\n        betEth = betEth.sub(devFee);\r\n\r\n        // If the user bets more than maximum...they just bet the maximum\r\n        if (betEth >= maxBet){\r\n            betEth = maxBet;\r\n        }\r\n\r\n        // Adjust ledgers while taking the dev fee into account\r\n        balanceLedger_[_customerAddress] = ethBalanceOf(_customerAddress).add(msg.value).sub(devFee);\r\n\t\tpersonalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\r\n\r\n        // User cannot bet more than 10% of available pool\r\n        if (betEth > betPool(_customerAddress)/10) {\r\n            betEth = betPool(_customerAddress)/10;\r\n        }\r\n\r\n        // Execute the bet while taking the dev fee into account, and return the outcome\r\n        resultNum = bet(betEth, _customerAddress);\r\n    }\r\n\r\n\r\n    function betPool(address _customerAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Balance of contract, minus eth balance of user and accrued dev fees\r\n        return this.balance.sub(ethBalanceOf(_customerAddress)).sub(devFeeBalance);\r\n    }\r\n\r\n    /*\r\n        panicButton and refundUser are here incase of an emergency, or launch of a new contract\r\n        The game will be frozen, and all token holders will be refunded\r\n    */\r\n\r\n    function panicButton(bool newStatus)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        gamePaused = newStatus;\r\n    }\r\n\r\n\r\n    function refundUser(address _customerAddress)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        uint256 sellEth = ethBalanceOf(_customerAddress);\r\n        _customerAddress.transfer(sellEth);\r\n        balanceLedger_[_customerAddress] = 0;\r\n\t\tpersonalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\r\n        onTokenSell(_customerAddress, sellEth, this.balance, now);\r\n    }\r\n\r\n    function getDevBalance()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return devFeeBalance;\r\n    }\r\n\r\n\r\n    function withdrawDevFees()\r\n        public\r\n        onlyAdmin\r\n    {\r\n        admin.transfer(devFeeBalance);\r\n        devFeeBalance = 0;\r\n    }\r\n\r\n\r\n    // Internal Functions\r\n\r\n\r\n    function bet(uint256 betEth, address _customerAddress)\r\n        internal\r\n        returns (uint256 resultNum)\r\n    {\r\n        // Spin the wheel\r\n        resultNum = random(80);\r\n        // Determine the outcome\r\n        uint result = determinePrize(resultNum);\r\n\r\n        uint256 returnedEth;\r\n\r\n\t\tif (result < 5)                                             // < 5 = WIN\r\n\t\t{\r\n\t\t\tuint256 wonEth;\r\n\t\t\tif (result == 0){                                       // Grand Jackpot\r\n\t\t\t\twonEth = betEth.mul(9) / 10;                        // +90% of original bet\r\n\t\t\t} else if (result == 1){                                // Jackpot\r\n\t\t\t\twonEth = betEth.mul(8) / 10;                        // +80% of original bet\r\n\t\t\t} else if (result == 2){                                // Grand Prize\r\n\t\t\t\twonEth = betEth.mul(7) / 10;                        // +70% of original bet\r\n\t\t\t} else if (result == 3){                                // Major Prize\r\n\t\t\t\twonEth = betEth.mul(6) / 10;                        // +60% of original bet\r\n\t\t\t} else if (result == 4){                                // Minor Prize\r\n\t\t\t\twonEth = betEth.mul(3) / 10;                        // +30% of original bet\r\n\t\t\t}\r\n\t\t\twinEth(_customerAddress, wonEth);                       // Award the user their prize\r\n            returnedEth = betEth.add(wonEth);\r\n        } else if (result == 5){                                    // 5 = Refund\r\n            returnedEth = betEth;\r\n\t\t}\r\n\t\telse {                                                      // > 5 = LOSE\r\n\t\t\tuint256 lostEth;\r\n\t\t\tif (result == 6){                                \t\t// Minor Loss\r\n\t\t\t\tlostEth = betEth / 10;                    \t\t    // -10% of original bet\r\n\t\t\t} else if (result == 7){                                // Major Loss\r\n\t\t\t\tlostEth = betEth / 4;                     \t\t\t// -25% of original bet\r\n\t\t\t} else if (result == 8){                                // Grand Loss\r\n\t\t\t\tlostEth = betEth / 2;                     \t        // -50% of original bet\r\n\t\t\t} else if (result == 9){                                // Total Loss\r\n\t\t\t\tlostEth = betEth;                                   // -100% of original bet\r\n\t\t\t}\r\n\t\t\tloseEth(_customerAddress, lostEth);                     // \"Award\" the user their loss\r\n            returnedEth = betEth.sub(lostEth);\r\n\t\t}\r\n        uint256 newBal = ethBalanceOf(_customerAddress);\r\n        spinResult(_customerAddress, resultNum, result, betEth, returnedEth, newBal, now);\r\n        return resultNum;\r\n    }\r\n\r\n    function maxRandom()\r\n        internal\r\n        returns (uint256 randomNumber)\r\n    {\r\n        _seed = uint256(keccak256(\r\n            abi.encodePacked(_seed,\r\n                blockhash(block.number - 1),\r\n                block.coinbase,\r\n                block.difficulty,\r\n                now)\r\n        ));\r\n        return _seed;\r\n    }\r\n\r\n\r\n    function random(uint256 upper)\r\n        internal\r\n        returns (uint256 randomNumber)\r\n    {\r\n        return maxRandom() % upper + 1;\r\n    }\r\n\r\n\r\n    function determinePrize(uint256 result)\r\n        internal\r\n        returns (uint256 resultNum)\r\n    {\r\n        // Loop until the result bracket is determined\r\n        for (uint8 i=0;i<=9;i++){\r\n            if (result <= brackets[i]){\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function loseEth(address _customerAddress, uint256 lostEth)\r\n        internal\r\n    {\r\n        uint256 customerEth = ethBalanceOf(_customerAddress);\r\n        // Increase amount of eth everyone else owns\r\n        uint256 globalIncrease = globalFactor.mul(lostEth) / betPool(_customerAddress);\r\n        globalFactor = globalFactor.add(globalIncrease);\r\n        // Update user ledgers\r\n        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\r\n        // User can't lose more than they have\r\n        if (lostEth > customerEth){\r\n            lostEth = customerEth;\r\n        }\r\n        balanceLedger_[_customerAddress] = customerEth.sub(lostEth);\r\n    }\r\n\r\n\r\n    function winEth(address _customerAddress, uint256 wonEth)\r\n        internal\r\n    {\r\n        uint256 customerEth = ethBalanceOf(_customerAddress);\r\n        // Decrease amount of eth everyone else owns\r\n        uint256 globalDecrease = globalFactor.mul(wonEth) / betPool(_customerAddress);\r\n        globalFactor = globalFactor.sub(globalDecrease);\r\n        // Update user ledgers\r\n        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\r\n        balanceLedger_[_customerAddress] = customerEth.add(wonEth);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDevFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"panicButton\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"spinAllTokens\",\"outputs\":[{\"name\":\"resultNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"betPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"ethBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"refundUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"betEth\",\"type\":\"uint256\"}],\"name\":\"tokenSpin\",\"outputs\":[{\"name\":\"resultNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"etherSpin\",\"outputs\":[{\"name\":\"resultNum\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDevBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellEth\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contractBal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"devFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contractBal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wheelNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"outcome\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"spinResult\",\"type\":\"event\"}]","ContractName":"WheelOfEther","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b4bc1577b942d4356714a8bbba6ab5bb12c72b9281521c4381a74be3d7f4dcae"}]}