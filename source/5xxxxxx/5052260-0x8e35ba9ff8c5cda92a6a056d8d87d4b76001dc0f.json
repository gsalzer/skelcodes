{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract SignatureChecker {\r\n    function checkTransferDelegated(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _maxReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) public constant returns (bool);\r\n\r\n    function checkTransferAndCallDelegated(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data,\r\n        uint256 _maxReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) public constant returns (bool);\r\n\r\n    function checkTransferMultipleDelegated(\r\n        address _from,\r\n        address[] _addrs,\r\n        uint256[] _values,\r\n        uint256 _maxReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) public constant returns (bool);\r\n}\r\n\r\ncontract SignatureCheckerImpl {\r\n    function _bytesToSignature(bytes sig) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\r\n        require(sig.length == 65);\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := and(mload(add(sig, 65)), 0xFF)\r\n        }\r\n        return (v, r, s);\r\n    }\r\n\r\n    bytes32 transferDelegatedHash = keccak256(\r\n        \"address contract\",\r\n        \"string method\",\r\n        \"address to\",\r\n        \"uint256 value\",\r\n        \"uint256 maxReward\",\r\n        \"uint256 nonce\"\r\n    );\r\n\r\n    function checkTransferDelegated(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _maxReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) public constant returns (bool) {\r\n        bytes32 hash = keccak256(\r\n            transferDelegatedHash,\r\n            keccak256(msg.sender, \"transferDelegated\", _to, _value, _maxReward, _nonce)\r\n        );\r\n        var (v, r, s) = _bytesToSignature(_signature);\r\n        return ecrecover(hash, v, r, s) == _from;\r\n    }\r\n\r\n    bytes32 transferAndCallDelegatedHash = keccak256(\r\n        \"address contract\",\r\n        \"string method\",\r\n        \"address to\",\r\n        \"uint256 value\",\r\n        \"bytes data\",\r\n        \"uint256 maxReward\",\r\n        \"uint256 nonce\"\r\n    );\r\n\r\n    function checkTransferAndCallDelegated(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data,\r\n        uint256 _maxReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) public constant returns (bool) {\r\n        bytes32 hash = keccak256(\r\n            transferAndCallDelegatedHash,\r\n            keccak256(msg.sender, \"transferAndCallDelegated\", _to, _value, _data, _maxReward, _nonce)\r\n        );\r\n        var (v, r, s) = _bytesToSignature(_signature);\r\n        return ecrecover(hash, v, r, s) == _from;\r\n    }\r\n\r\n    bytes32 transferMultipleDelegatedHash = keccak256(\r\n        \"address contract\",\r\n        \"string method\",\r\n        \"address[] addrs\",\r\n        \"uint256[] values\",\r\n        \"uint256 maxReward\",\r\n        \"uint256 nonce\"\r\n    );\r\n\r\n    function checkTransferMultipleDelegated(\r\n        address _from,\r\n        address[] _addrs,\r\n        uint256[] _values,\r\n        uint256 _maxReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) public constant returns (bool) {\r\n        bytes32 hash = keccak256(\r\n            transferMultipleDelegatedHash,\r\n            keccak256(msg.sender, \"transferMultipleDelegated\", _addrs, _values, _maxReward, _nonce)\r\n        );\r\n        var (v, r, s) = _bytesToSignature(_signature);\r\n        return ecrecover(hash, v, r, s) == _from;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_maxReward\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"checkTransferDelegated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_maxReward\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"checkTransferMultipleDelegated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_maxReward\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"checkTransferAndCallDelegated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SignatureCheckerImpl","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://930224f4d7aeea834b9cdcac631a41b062383d6d60e2af1bea4159533474cb4e"}]}