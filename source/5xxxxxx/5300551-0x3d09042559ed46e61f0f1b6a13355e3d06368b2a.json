{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/XdacToken.sol\r\n\r\ncontract XdacToken is StandardToken, Ownable {\r\n    string public name = \"XDAC COIN\";\r\n    string public symbol = \"XDAC\";\r\n    uint8 public decimals = 18;\r\n    /**\r\n     * @dev Constructor that gives msg.sender all of existing tokens.\r\n     */\r\n    function XdacToken(uint256 _initial_supply) public {\r\n        totalSupply_ = _initial_supply;\r\n        balances[msg.sender] = _initial_supply;\r\n        Transfer(0x0, msg.sender, _initial_supply);\r\n    }\r\n}\r\n\r\n// File: contracts/XdacTokenCrowdsale.sol\r\n\r\n/**\r\n * @title XdacTokenCrowdsale\r\n */\r\ncontract XdacTokenCrowdsale is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    uint256[] roundGoals;\r\n    uint256[] roundRates;\r\n    uint256 minContribution;\r\n\r\n    // The token being sold\r\n    ERC20 public token;\r\n\r\n    // Address where funds are collected\r\n    address public wallet;\r\n\r\n    mapping(address => Contributor) public contributors;\r\n    //Array of the addresses who participated\r\n    address[] addresses;\r\n\r\n    // Amount of wei raised\r\n    uint256 public weiDelivered;\r\n\r\n\r\n    event TokenRefund(address indexed purchaser, uint256 amount);\r\n    event TokenPurchase(address indexed purchaser, address indexed contributor, uint256 value, uint256 amount);\r\n\r\n    struct Contributor {\r\n        uint256 eth;\r\n        bool whitelisted;\r\n        bool created;\r\n    }\r\n\r\n\r\n    function XdacTokenCrowdsale(\r\n        address _wallet,\r\n        uint256[] _roundGoals,\r\n        uint256[] _roundRates,\r\n        uint256 _minContribution,\r\n        uint256 _initial_supply\r\n    ) public {\r\n        require(_wallet != address(0));\r\n        require(_roundRates.length == 5);\r\n        require(_roundGoals.length == 5);\r\n        roundGoals = _roundGoals;\r\n        roundRates = _roundRates;\r\n        minContribution = _minContribution;\r\n        token = new XdacToken(_initial_supply);\r\n        wallet = _wallet;\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // Crowdsale external interface\r\n    // -----------------------------------------\r\n\r\n    /**\r\n     * @dev fallback function\r\n     */\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev token purchase\r\n     * @param _contributor Address performing the token purchase\r\n     */\r\n    function buyTokens(address _contributor) public payable {\r\n        require(_contributor != address(0));\r\n        require(msg.value != 0);\r\n        require(msg.value >= minContribution);\r\n        require(weiDelivered.add(msg.value) <= roundGoals[4]);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = _getTokenAmount(msg.value);\r\n\r\n        TokenPurchase(msg.sender, _contributor, msg.value, tokens);\r\n        _forwardFunds();\r\n    }\r\n\r\n    /**********internal***********/\r\n    function _getCurrentRound() internal view returns (uint) {\r\n        for (uint i = 0; i < 5; i++) {\r\n            if (weiDelivered < roundGoals[i]) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev the way in which ether is converted to tokens.\r\n     * @param _weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _weiAmount\r\n     */\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        uint curRound = _getCurrentRound();\r\n        uint256 calculatedTokenAmount = 0;\r\n        uint256 roundWei = 0;\r\n        uint256 weiRaisedIntermediate = weiDelivered;\r\n        uint256 weiAmount = _weiAmount;\r\n\r\n        for (curRound; curRound < 5; curRound++) {\r\n            if (weiRaisedIntermediate.add(weiAmount) > roundGoals[curRound]) {\r\n                roundWei = roundGoals[curRound].sub(weiRaisedIntermediate);\r\n                weiRaisedIntermediate = weiRaisedIntermediate.add(roundWei);\r\n                weiAmount = weiAmount.sub(roundWei);\r\n                calculatedTokenAmount = calculatedTokenAmount.add(roundWei.mul(roundRates[curRound]));\r\n            }\r\n            else {\r\n                calculatedTokenAmount = calculatedTokenAmount.add(weiAmount.mul(roundRates[curRound]));\r\n                break;\r\n            }\r\n        }\r\n        return calculatedTokenAmount;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev the way in which tokens is converted to ether.\r\n     * @param _tokenAmount Value in token to be converted into wei\r\n     * @return Number of ether that required to purchase with the specified _tokenAmount\r\n     */\r\n    function _getEthAmount(uint256 _tokenAmount) internal view returns (uint256) {\r\n        uint curRound = _getCurrentRound();\r\n        uint256 calculatedWeiAmount = 0;\r\n        uint256 roundWei = 0;\r\n        uint256 weiRaisedIntermediate = weiDelivered;\r\n        uint256 tokenAmount = _tokenAmount;\r\n\r\n        for (curRound; curRound < 5; curRound++) {\r\n            if(weiRaisedIntermediate.add(tokenAmount.div(roundRates[curRound])) > roundGoals[curRound]) {\r\n                roundWei = roundGoals[curRound].sub(weiRaisedIntermediate);\r\n                weiRaisedIntermediate = weiRaisedIntermediate.add(roundWei);\r\n                tokenAmount = tokenAmount.sub(roundWei.div(roundRates[curRound]));\r\n                calculatedWeiAmount = calculatedWeiAmount.add(tokenAmount.div(roundRates[curRound]));\r\n            }\r\n            else {\r\n                calculatedWeiAmount = calculatedWeiAmount.add(tokenAmount.div(roundRates[curRound]));\r\n                break;\r\n            }\r\n        }\r\n\r\n        return calculatedWeiAmount;\r\n    }\r\n\r\n    function _forwardFunds() internal {\r\n        Contributor storage contributor = contributors[msg.sender];\r\n        contributor.eth = contributor.eth.add(msg.value);\r\n        if (contributor.created == false) {\r\n            contributor.created = true;\r\n            addresses.push(msg.sender);\r\n        }\r\n        if (contributor.whitelisted) {\r\n            _deliverTokens(msg.sender);\r\n        }\r\n    }\r\n\r\n    function _deliverTokens(address _contributor) internal {\r\n        Contributor storage contributor = contributors[_contributor];\r\n        uint256 amountEth = contributor.eth;\r\n        uint256 amountToken = _getTokenAmount(amountEth);\r\n        require(amountToken > 0);\r\n        require(amountEth > 0);\r\n        require(contributor.whitelisted);\r\n        contributor.eth = 0;\r\n        weiDelivered = weiDelivered.add(amountEth);\r\n        wallet.transfer(amountEth);\r\n        token.transfer(_contributor, amountToken);\r\n    }\r\n\r\n    function _refundTokens(address _contributor) internal {\r\n        Contributor storage contributor = contributors[_contributor];\r\n        uint256 ethAmount = contributor.eth;\r\n        require(ethAmount > 0);\r\n        contributor.eth = 0;\r\n        TokenRefund(_contributor, ethAmount);\r\n        _contributor.transfer(ethAmount);\r\n    }\r\n\r\n    function _whitelistAddress(address _contributor) internal {\r\n        Contributor storage contributor = contributors[_contributor];\r\n        contributor.whitelisted = true;\r\n        if (contributor.created == false) {\r\n            contributor.created = true;\r\n            addresses.push(_contributor);\r\n        }\r\n        //Auto deliver tokens\r\n        if (contributor.eth > 0) {\r\n            _deliverTokens(_contributor);\r\n        }\r\n    }\r\n\r\n    function _sendToken(address _address, uint256 _amountTokens) internal{\r\n        XdacToken _token = XdacToken(token);\r\n        require(_token.balanceOf(_token.owner()) >= _amountTokens);\r\n        _whitelistAddress(_address);\r\n        _token.transfer(_address, _amountTokens);\r\n    }\r\n\r\n    /**********************owner*************************/\r\n\r\n    function whitelistAddresses(address[] _contributors) public onlyOwner {\r\n        for (uint256 i = 0; i < _contributors.length; i++) {\r\n            _whitelistAddress(_contributors[i]);\r\n        }\r\n    }\r\n\r\n\r\n    function whitelistAddress(address _contributor) public onlyOwner {\r\n        _whitelistAddress(_contributor);\r\n    }\r\n\r\n    function transferTokenOwnership(address _newOwner) public onlyOwner returns(bool success) {\r\n        XdacToken _token = XdacToken(token);\r\n        _token.transfer(_newOwner, _token.balanceOf(_token.owner()));\r\n        _token.transferOwnership(_newOwner);\r\n        return true;\r\n    }\r\n\r\n    function sendToken(address _address, uint256 _amountTokens) public onlyOwner returns(bool success) {\r\n        _sendToken(_address, _amountTokens);\r\n        return true;\r\n    }\r\n\r\n    function sendTokens(address[] _addresses, uint256[] _amountTokens) public onlyOwner returns(bool success) {\r\n        require(_addresses.length > 0);\r\n        require(_amountTokens.length > 0);\r\n        require(_addresses.length  == _amountTokens.length);\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            _sendToken(_addresses[i], _amountTokens[i]);\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Refound tokens. For owner\r\n     */\r\n    function refundTokensForAddress(address _contributor) public onlyOwner {\r\n        _refundTokens(_contributor);\r\n    }\r\n\r\n\r\n    /**********************contributor*************************/\r\n\r\n    function getAddresses() public onlyOwner view returns (address[] )  {\r\n        return addresses;\r\n    }\r\n\r\n    /**\r\n    * @dev Refound tokens. For contributors\r\n    */\r\n    function refundTokens() public {\r\n        _refundTokens(msg.sender);\r\n    }\r\n    /**\r\n     * @dev Returns tokens according to rate\r\n     */\r\n    function getTokenAmount(uint256 _weiAmount) public view returns (uint256) {\r\n        return _getTokenAmount(_weiAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns ether according to rate\r\n     */\r\n    function getEthAmount(uint256 _tokenAmount) public view returns (uint256) {\r\n        return _getEthAmount(_tokenAmount);\r\n    }\r\n\r\n    function getCurrentRate() public view returns (uint256) {\r\n        return roundRates[_getCurrentRound()];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"whitelisted\",\"type\":\"bool\"},{\"name\":\"created\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"}],\"name\":\"whitelistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amountTokens\",\"type\":\"uint256\"}],\"name\":\"sendToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"refundTokensForAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getEthAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amountTokens\",\"type\":\"uint256[]\"}],\"name\":\"sendTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiDelivered\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_roundGoals\",\"type\":\"uint256[]\"},{\"name\":\"_roundRates\",\"type\":\"uint256[]\"},{\"name\":\"_minContribution\",\"type\":\"uint256\"},{\"name\":\"_initial_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"XdacTokenCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005e3a35df396c1324a0292309052882cc342383eb00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000005150ae84a8cdf0000000000000000000000000000000000000000000000000021e19e0c9bab24000000000000000000000000000000000000000000000000003eae3130ecc969000000000000000000000000000000000000000000000000005b7ac4553de7ae00000000000000000000000000000000000000000000000000784757798f05f300000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000005aa00000000000000000000000000000000000000000000000000000000000004b0000000000000000000000000000000000000000000000000000000000000047e000000000000000000000000000000000000000000000000000000000000044c00000000000000000000000000000000000000000000000000000000000003e8","Library":"","SwarmSource":"bzzr://963e00c09313bac9eb0f9ec37147870fc746090097f25a323081dc2758d806e6"}]}