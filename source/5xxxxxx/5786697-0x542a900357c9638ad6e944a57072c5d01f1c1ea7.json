{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Love {\r\n\r\n  mapping (address => address) private propose;\r\n  mapping (address => address) private partner;\r\n  mapping (uint256 => string[]) private partnerMessages;\r\n  mapping (uint256 => bool) private isHiddenMessages;\r\n  uint public proposeCount;\r\n  uint public partnerCount;\r\n\r\n  event Propose(address indexed from, address indexed to);\r\n  event CancelPropose(address indexed from, address indexed to);\r\n  event Partner(address indexed from, address indexed to);\r\n  event Farewell(address indexed from, address indexed to);\r\n  event Message(address indexed addressOne, address indexed addressTwo, string message, uint index);\r\n  event HiddenMessages(address indexed addressOne, address indexed addressTwo, bool flag);\r\n\r\n  function proposeTo(address to) public {\r\n    require(to != address(0));\r\n    require(msg.sender != to);\r\n    require(partner[msg.sender] != to);\r\n\r\n    address alreadyPropose = propose[to];\r\n    if (alreadyPropose == msg.sender) {\r\n      propose[to] = address(0);\r\n      if (propose[msg.sender] != address(0)) {\r\n        propose[msg.sender] = address(0);\r\n        proposeCount -= 2;\r\n\r\n      } else {\r\n        proposeCount--;\r\n      }\r\n\r\n      address selfPartner = partner[msg.sender];\r\n      if (selfPartner != address(0)) {\r\n        if (partner[selfPartner] == msg.sender) {\r\n          partner[selfPartner] = address(0);\r\n          partnerCount--;\r\n          Farewell(msg.sender, selfPartner);\r\n        }\r\n      }\r\n      partner[msg.sender] = to;\r\n\r\n      address targetPartner = partner[to];\r\n      if (targetPartner != address(0)) {\r\n        if (partner[targetPartner] == to) {\r\n          partner[targetPartner] = address(0);\r\n          partnerCount--;\r\n          Farewell(to, targetPartner);\r\n        }\r\n      }\r\n      partner[to] = msg.sender;\r\n\r\n      partnerCount++;\r\n      Partner(msg.sender, to);\r\n\r\n    } else {\r\n      if (propose[msg.sender] == address(0)) {\r\n        proposeCount++;\r\n      }\r\n      propose[msg.sender] = to;\r\n      Propose(msg.sender, to);\r\n    }\r\n  }\r\n\r\n  function cancelProposeTo() public {\r\n    address proposingTo = propose[msg.sender];\r\n    require(proposingTo != address(0));\r\n    propose[msg.sender] = address(0);\r\n    proposeCount--;\r\n    CancelPropose(msg.sender, proposingTo);\r\n  }\r\n\r\n  function addMessage(string message) public {\r\n    address target = partner[msg.sender];\r\n    require(isPartner(msg.sender, target) == true);\r\n    uint index = partnerMessages[uint256(keccak256(craetePartnerBytes(msg.sender, target)))].push(message) - 1;\r\n    Message(msg.sender, target, message, index);\r\n  }\r\n\r\n  function farewellTo(address to) public {\r\n    require(partner[msg.sender] == to);\r\n    require(partner[to] == msg.sender);\r\n    partner[msg.sender] = address(0);\r\n    partner[to] = address(0);\r\n    partnerCount--;\r\n    Farewell(msg.sender, to);\r\n  }\r\n\r\n  function isPartner(address a, address b) public view returns (bool) {\r\n    require(a != address(0));\r\n    require(b != address(0));\r\n    return (a == partner[b]) && (b == partner[a]);\r\n  }\r\n\r\n  function getPropose(address a) public view returns (address) {\r\n    return propose[a];\r\n  }\r\n\r\n  function getPartner(address a) public view returns (address) {\r\n    return partner[a];\r\n  }\r\n\r\n  function getPartnerMessage(address a, address b, uint index) public view returns (string) {\r\n    require(isPartner(a, b) == true);\r\n    uint256 key = uint256(keccak256(craetePartnerBytes(a, b)));\r\n    if (isHiddenMessages[key] == true) {\r\n      require((msg.sender == a) || (msg.sender == b));\r\n    }\r\n    uint count = partnerMessages[key].length;\r\n    require(index < count);\r\n    return partnerMessages[key][index];\r\n  }\r\n\r\n  function partnerMessagesCount(address a, address b) public view returns (uint) {\r\n    require(isPartner(a, b) == true);\r\n    uint256 key = uint256(keccak256(craetePartnerBytes(a, b)));\r\n    if (isHiddenMessages[key] == true) {\r\n      require((msg.sender == a) || (msg.sender == b));\r\n    }\r\n    return partnerMessages[key].length;\r\n  }\r\n\r\n  function getOwnPartnerMessage(uint index) public view returns (string) {\r\n    return getPartnerMessage(msg.sender, partner[msg.sender], index);\r\n  }\r\n\r\n  function craetePartnerBytes(address a, address b) private pure returns(bytes) {\r\n    bytes memory arr = new bytes(64);\r\n    bytes32 first;\r\n    bytes32 second;\r\n    if (uint160(a) < uint160(b)) {\r\n      first = keccak256(a);\r\n      second = keccak256(b);\r\n    } else {\r\n      first = keccak256(b);\r\n      second = keccak256(a);\r\n    }\r\n\r\n    for (uint i = 0; i < 32; i++) {\r\n      arr[i] = first[i];\r\n      arr[i + 32] = second[i];\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  function setIsHiddenMessages(bool flag) public {\r\n    require(isPartner(msg.sender, partner[msg.sender]) == true);\r\n    uint256 key = uint256(keccak256(craetePartnerBytes(msg.sender, partner[msg.sender])));\r\n    isHiddenMessages[key] = flag;\r\n    HiddenMessages(msg.sender, partner[msg.sender], flag);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOwnPartnerMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"addMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"farewellTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"proposeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"b\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPartnerMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setIsHiddenMessages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getPropose\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"b\",\"type\":\"address\"}],\"name\":\"partnerMessagesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelProposeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Propose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"CancelPropose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Partner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Farewell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressOne\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"addressTwo\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Message\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressOne\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"addressTwo\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"HiddenMessages\",\"type\":\"event\"}]","ContractName":"Love","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dd9d009488476c2e14a1e406e6d9f80959a3f7175031e46a26de0f4aa9fc1657"}]}