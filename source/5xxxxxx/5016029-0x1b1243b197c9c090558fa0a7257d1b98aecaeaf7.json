{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface token { function transferFrom(address _from, address _to, uint256 _value) public returns (bool success); }\r\n\r\ncontract CZRSnowLocker is owned {\r\n    \r\n    address public tokenAddr;\r\n    bool public isPaused = false;\r\n\r\n    event Lock(address indexed addr, uint index, uint amount);\r\n    event Unlock(address indexed addr, uint index, uint lockAmount, uint rewardAmount);\r\n    \r\n    struct LockRecord {\r\n        uint time;\r\n        uint amount;\r\n        bool completed;\r\n    }\r\n    \r\n    mapping(address => LockRecord[]) public lockRecordMap;\r\n    \r\n    function CZRSnowLocker(address _tokenAddr) public {\r\n        tokenAddr = _tokenAddr;\r\n    }\r\n    \r\n    function start() onlyOwner public {\r\n        isPaused = false;\r\n    }\r\n    \r\n    function pause() onlyOwner public {\r\n        isPaused = true;\r\n    }\r\n\r\n    /// @notice impl tokenRecipient interface\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public {\r\n        require(_token == tokenAddr);\r\n        require(_extraData.length == 0);\r\n        _lock(_from, _value);\r\n    }\r\n\r\n    function _lock(address addr, uint amount) internal {\r\n        require(!isPaused);\r\n        require(amount >= 100 ether);\r\n\r\n        token t = token(tokenAddr);\r\n        t.transferFrom(addr, owner, amount);\r\n\r\n        lockRecordMap[addr].push(LockRecord(now, amount, false));\r\n        \r\n        uint index = lockRecordMap[addr].length - 1;\r\n        Lock(addr, index, amount);\r\n    }\r\n    \r\n    /// @notice withdraw CZR\r\n    /// @param addr address to withdraw\r\n    /// @param index deposit index\r\n    function unlock(address addr, uint index) public {\r\n        require(addr == msg.sender);\r\n        \r\n        var lock = lockRecordMap[addr][index];\r\n        require(lock.amount > 0 && !lock.completed);\r\n\r\n        var during = now - lock.time;\r\n        var reward = _calcReward(during, lock.amount);\r\n\r\n        token t = token(tokenAddr);\r\n        t.transferFrom(owner, addr, lock.amount + reward);\r\n\r\n        lock.completed = true;\r\n\r\n        Unlock(addr, index, lock.amount, reward);        \r\n    }\r\n\r\n    function _calcReward(uint during, uint amount) internal view returns (uint) {\r\n        uint n = during / 90 days;\r\n        if (n == 0)\r\n             return 0;\r\n        if (n == 1)\r\n            return amount * 2 / 100;\r\n        if (n == 2)\r\n            return amount * 5 / 100;\r\n        if (n == 3)\r\n            return amount * 8 / 100;\r\n        return amount * 12 / 100;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockRecordMap\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"completed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"}]","ContractName":"CZRSnowLocker","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000223fc70574214f65813fe336d870ac47e147fae","Library":"","SwarmSource":"bzzr://e6ad4547eaf43f1ca14a6c8cf7dad83d0f941433ef8b04075bd3f06343a19892"}]}