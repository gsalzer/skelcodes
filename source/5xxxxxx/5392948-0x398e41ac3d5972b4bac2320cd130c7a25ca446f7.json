{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n   * @dev Multiplies two numbers, throws on overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two numbers, truncating the quotient.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two numbers, throws on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. \r\n *\r\n * Presales:\r\n * Certain addresses are allowed to buy at a presale rate during the presale period. The\r\n * contribution of the investor needs to be of at least 5 ETH. A maximum of 15 million tokens\r\n * in total can be bought at the presale rate. Once the presale has been instructed to end, it\r\n * is not possible to enable it again.\r\n *\r\n * Sales:\r\n * Any address can purchase at the regular sale price. Sales can be pauses, resumed, and stopped.\r\n *\r\n * Minting:\r\n * The transferTokens function will mint the tokens in the Token contract. After the minting \r\n * is done, the Crowdsale is reset.\r\n * \r\n * Refunds:\r\n * A investor can be refunded by the owner. Calling the refund function resets the tokens bought\r\n * to zero for that investor. The Ether refund needs to be processed manually. It is important\r\n * to record how many tokens the investor had bought before calling refund().\r\n *\r\n*/\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  StandardToken public token;\r\n\r\n  // How many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // How many token units a buyer gets per wei if entitled to the presale\r\n  uint public presaleRate;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  // Administrator of the sale\r\n  address public owner;\r\n\r\n  // How many tokens each address bought at the normal rate\r\n  mapping (address => uint) public regularTokensSold;\r\n\r\n  // How many tokens each address bought at the presale rate\r\n  mapping (address => uint) public presaleTokensSold;\r\n\r\n  // List of all the investors\r\n  address[] public investors;\r\n\r\n  // Whether the sale is active\r\n  bool public inSale = true;\r\n\r\n  // Whether the presale is active\r\n  bool public inPresale = true;\r\n\r\n  // How many tokens each address can buy at the presale rate\r\n  mapping (address => uint) public presaleAllocations;\r\n\r\n  // The total number of tokens bought\r\n  uint256 public totalPresaleTokensSold = 0;\r\n\r\n  // The total number of tokens bought\r\n  uint256 public totalRegularTokensSold = 0;\r\n\r\n  // The maximum number of tokens which can be sold during presale\r\n  uint256 constant public PRESALETOKENMAXSALES = 15000000000000000000000000;\r\n\r\n  // The maximum number of tokens which can be sold during regular sale\r\n  uint256 public regularTokenMaxSales = 16000000000000000000000000;\r\n\r\n  // The minimum investment (5 ETH) during presale\r\n  uint256 constant public MINIMUMINVESTMENTPRESALE = 5000000000000000000;\r\n\r\n  // The minimum investment (5 ETH) during sale\r\n  uint256 constant public MINIMUMINVESTMENTSALE = 1000000000000000000;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier onlyDuringPresale() {\r\n    require(inPresale);\r\n    _;\r\n  }\r\n\r\n  modifier onlyWhenSalesEnabled() {\r\n    require(inSale);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   * @param rate the rate at which the tokens were purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 rate);\r\n\r\n  /**\r\n   * Constructor for the crowdsale\r\n   * @param _owner owner of the contract, which can call privileged functions, and where every ether\r\n   *        is sent to\r\n   * @param _rate the rate for regular sales\r\n   * @param _rate the rate for presales\r\n   * @param _ownerInitialTokens the number of tokens the owner is allocated initially\r\n   */\r\n  function Crowdsale(\r\n    address _owner, \r\n    uint256 _rate, \r\n    uint256 _presaleRate, \r\n    uint256 _ownerInitialTokens\r\n  ) public payable {\r\n    require(_rate > 0);\r\n    require(_presaleRate > 0);\r\n    require(_owner != address(0));\r\n\r\n    rate = _rate;\r\n    presaleRate = _presaleRate;\r\n    owner = _owner;\r\n\r\n    investors.push(owner);\r\n    regularTokensSold[owner] = _ownerInitialTokens;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  function () external payable {\r\n    buyTokens();\r\n  }\r\n\r\n  /**\r\n   * Sets the address of the Token contract.\r\n   */\r\n  function setToken(StandardToken _token) public onlyOwner {\r\n    token = _token;\r\n  }\r\n\r\n  /**\r\n   * Buy a token at presale price. Converts ETH to as much QNT the sender can purchase. Any change\r\n   * is refunded to the sender. Minimum contribution is 5 ETH.\r\n   */\r\n  function buyPresaleTokens() onlyDuringPresale onlyWhenSalesEnabled public payable {\r\n    address _beneficiary = msg.sender;\r\n    uint256 weiAmount = msg.value;\r\n\r\n    _preValidatePurchase(_beneficiary);\r\n    require(weiAmount >= MINIMUMINVESTMENTPRESALE);\r\n\r\n    uint256 presaleAllocation = presaleAllocations[_beneficiary];\r\n\r\n    uint256 presaleTokens = _min256(weiAmount.mul(presaleRate), presaleAllocation);\r\n\r\n    _recordPresalePurchase(_beneficiary, presaleTokens);\r\n\r\n    // Remove presale tokens allocation\r\n    presaleAllocations[_beneficiary] = presaleAllocations[_beneficiary].sub(presaleTokens);\r\n\r\n    uint256 weiCharged = presaleTokens.div(presaleRate);\r\n\r\n    // Return any extra Wei to the sender\r\n    uint256 change = weiAmount.sub(weiCharged);\r\n    _beneficiary.transfer(change);\r\n\r\n    // Update total number of Wei raised\r\n    weiRaised = weiRaised.add(weiAmount.sub(change));\r\n\r\n    emit TokenPurchase(msg.sender, _beneficiary, weiCharged, presaleTokens, presaleRate);\r\n\r\n    // Forward the funds to owner\r\n    _forwardFunds(weiCharged);\r\n  }\r\n\r\n  /**\r\n   * Buy a token at sale price. Minimum contribution is 1 ETH.\r\n   */\r\n  function buyTokens() onlyWhenSalesEnabled public payable {\r\n    address _beneficiary = msg.sender;\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(_beneficiary);\r\n\r\n    require(weiAmount >= MINIMUMINVESTMENTSALE);\r\n\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // Check we haven't sold too many tokens\r\n    totalRegularTokensSold = totalRegularTokensSold.add(tokens);\r\n    require(totalRegularTokensSold <= regularTokenMaxSales);\r\n\r\n    // Update total number of Wei raised\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    investors.push(_beneficiary);\r\n\r\n    // Give tokens\r\n    regularTokensSold[_beneficiary] = regularTokensSold[_beneficiary].add(tokens);\r\n\r\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens, rate);\r\n\r\n    // Forward the funds to owner\r\n    _forwardFunds(weiAmount);\r\n  }\r\n\r\n  /**\r\n   * Records a purchase which has been completed before the instantiation of this contract.\r\n   * @param _beneficiary the investor\r\n   * @param _presaleTokens the number of tokens which the investor has bought\r\n   */\r\n  function recordPresalePurchase(address _beneficiary, uint256 _presaleTokens) public onlyOwner {\r\n    weiRaised = weiRaised.add(_presaleTokens.div(presaleRate));\r\n    return _recordPresalePurchase(_beneficiary, _presaleTokens);\r\n  }\r\n\r\n  function enableSale() onlyOwner public {\r\n    inSale = true;\r\n  }\r\n\r\n  function disableSale() onlyOwner public {\r\n    inSale = false;\r\n  }\r\n\r\n  function endPresale() onlyOwner public {\r\n    inPresale = false;\r\n\r\n    // Convert the unsold presale tokens to regular tokens\r\n    uint256 remainingPresaleTokens = PRESALETOKENMAXSALES.sub(totalPresaleTokensSold);\r\n    regularTokenMaxSales = regularTokenMaxSales.add(remainingPresaleTokens);\r\n  }\r\n\r\n  /**\r\n   * Mints the tokens in the Token contract.\r\n   */\r\n  function transferTokens() public onlyOwner {\r\n    for (uint256 i = 0; i < investors.length; i = i.add(1)) {\r\n      address investor = investors[i];\r\n\r\n      uint256 tokens = regularTokensSold[investor];\r\n      uint256 presaleTokens = presaleTokensSold[investor];\r\n      \r\n      regularTokensSold[investor] = 0;\r\n      presaleTokensSold[investor] = 0;\r\n\r\n      if (tokens > 0) {\r\n        _deliverTokens(token, investor, tokens);\r\n      }\r\n\r\n      if (presaleTokens > 0) {\r\n        _deliverTokens(token, investor, presaleTokens);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mints the tokens in the Token contract. With Offset and Limit\r\n   */\r\n  function transferTokensWithOffsetAndLimit(uint256 offset, uint256 limit) public onlyOwner {\r\n    for (uint256 i = offset; i <  _min256(investors.length,offset+limit); i = i.add(1)) {\r\n      address investor = investors[i];\r\n\r\n      uint256 tokens = regularTokensSold[investor];\r\n      uint256 presaleTokens = presaleTokensSold[investor];\r\n\r\n      regularTokensSold[investor] = 0;\r\n      presaleTokensSold[investor] = 0;\r\n\r\n      if (tokens > 0) {\r\n        _deliverTokens(token, investor, tokens);\r\n      }\r\n\r\n      if (presaleTokens > 0) {\r\n        _deliverTokens(token, investor, presaleTokens);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Clears the number of tokens bought by an investor. The ETH refund needs to be processed\r\n   * manually.\r\n   */\r\n  function refund(address investor) onlyOwner public {\r\n    require(investor != owner);\r\n\r\n    uint256 regularTokens = regularTokensSold[investor];\r\n    totalRegularTokensSold = totalRegularTokensSold.sub(regularTokens);\r\n    weiRaised = weiRaised.sub(regularTokens.div(rate));\r\n\r\n    uint256 presaleTokens = presaleTokensSold[investor];\r\n    totalPresaleTokensSold = totalPresaleTokensSold.sub(presaleTokens);\r\n    weiRaised = weiRaised.sub(presaleTokens.div(presaleRate));\r\n\r\n    regularTokensSold[investor] = 0;\r\n    presaleTokensSold[investor] = 0;\r\n\r\n    // Manually send ether to the account\r\n  }\r\n\r\n  /**\r\n  * Accessor for Index\r\n  */\r\n  function getInvestorAtIndex(uint256 _index) public view returns(address) {\r\n    return investors[_index];\r\n  }\r\n\r\n  /**\r\n  * Return the length of the investors array\r\n  */\r\n  function getInvestorsLength() public view returns(uint256) {\r\n    return investors.length;\r\n  }\r\n\r\n  /**\r\n   * Get the number of tokens bought at the regular price for an address.\r\n   */\r\n  function getNumRegularTokensBought(address _address) public view returns(uint256) {\r\n    return regularTokensSold[_address];\r\n  }\r\n\r\n  /**\r\n   * Get the number of tokens bought at the presale price for an address.\r\n   */\r\n  function getNumPresaleTokensBought(address _address) public view returns(uint256) {\r\n    return presaleTokensSold[_address];\r\n  }\r\n\r\n  /**\r\n   * Get the number of tokens which an investor can purchase at presale rate.\r\n   */\r\n  function getPresaleAllocation(address investor) view public returns(uint256) {\r\n    return presaleAllocations[investor];\r\n  }\r\n\r\n  /**\r\n   * Set the number of tokens which an investor can purchase at presale rate.\r\n   */\r\n  function setPresaleAllocation(address investor, uint allocation) onlyOwner public {\r\n    presaleAllocations[investor] = allocation;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function _preValidatePurchase(address _beneficiary) internal pure {\r\n    require(_beneficiary != address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(StandardToken _token, address _beneficiary, uint256 _tokenAmount) internal {\r\n    _token.mint(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds(uint256 amount) internal {\r\n    owner.transfer(amount);\r\n  }\r\n\r\n  function _min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * Records a presale purchase.\r\n   * @param _beneficiary the investor\r\n   * @param _presaleTokens the number of tokens which the investor has bought\r\n   */\r\n  function _recordPresalePurchase(address _beneficiary, uint256 _presaleTokens) internal {\r\n    // Check we haven't sold too many presale tokens\r\n    totalPresaleTokensSold = totalPresaleTokensSold.add(_presaleTokens);\r\n    require(totalPresaleTokensSold <= PRESALETOKENMAXSALES);\r\n\r\n    investors.push(_beneficiary);\r\n\r\n    // Give presale tokens\r\n    presaleTokensSold[_beneficiary] = presaleTokensSold[_beneficiary].add(_presaleTokens);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_ = 45467000000000000000000000;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  // Name of the token\r\n  string constant public name = \"Quant\";\r\n  // Token abbreviation\r\n  string constant public symbol = \"QNT\";\r\n  // Decimal places\r\n  uint8 constant public decimals = 18;\r\n  // Zeros after the point\r\n  uint256 constant public DECIMAL_ZEROS = 1000000000000000000;\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  address public crowdsale;\r\n\r\n  modifier onlyCrowdsale() {\r\n    require(msg.sender == crowdsale);\r\n    _;\r\n  }\r\n\r\n  function StandardToken(address _crowdsale) public {\r\n    require(_crowdsale != address(0));\r\n    crowdsale = _crowdsale;\r\n  }\r\n\r\n  function mint(address _address, uint256 _value) public onlyCrowdsale {\r\n    balances[_address] = balances[_address].add(_value);\r\n    emit Transfer(0, _address, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNumPresaleTokensBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"regularTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALETOKENMAXSALES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_presaleTokens\",\"type\":\"uint256\"}],\"name\":\"recordPresalePurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPresaleTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPresaleTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRegularTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"setPresaleAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNumRegularTokensBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"regularTokenMaxSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUMINVESTMENTSALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleAllocations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getPresaleAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUMINVESTMENTPRESALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"offset\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"transferTokensWithOffsetAndLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getInvestorAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_presaleRate\",\"type\":\"uint256\"},{\"name\":\"_ownerInitialTokens\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f5e38bbedc78efea055e0c56035adb320e64c4bc00000000000000000000000000000000000000000000000000000000000001ae00000000000000000000000000000000000000000000000000000000000002af0000000000000000000000000000000000000000000bf781a43734f3ebe00000","Library":"","SwarmSource":"bzzr://a325f6a65abf0486ddf7ae77816bb5da7d9f6166c42f17ca3f6c771555b3777c"}]}