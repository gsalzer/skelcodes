{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address addr, string roleName);\r\n  event RoleRemoved(address addr, string roleName);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address addr, string roleName)\r\n    view\r\n    public\r\n  {\r\n    roles[roleName].check(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address addr, string roleName)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[roleName].has(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function addRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].add(addr);\r\n    emit RoleAdded(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function removeRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].remove(addr);\r\n    emit RoleRemoved(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string roleName)\r\n  {\r\n    checkRole(msg.sender, roleName);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param roleNames the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] roleNames) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < roleNames.length; i++) {\r\n  //         if (hasRole(msg.sender, roleNames[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n\r\ncontract RBACWithAdmin is RBAC {\r\n  /**\r\n   * A constant role name for indicating admins.\r\n   */\r\n  string public constant ROLE_ADMIN = \"admin\";\r\n  string public constant ROLE_PAUSE_ADMIN = \"pauseAdmin\";\r\n\r\n  /**\r\n   * @dev modifier to scope access to admins\r\n   * // reverts\r\n   */\r\n  modifier onlyAdmin()\r\n  {\r\n    checkRole(msg.sender, ROLE_ADMIN);\r\n    _;\r\n  }\r\n  modifier onlyPauseAdmin()\r\n  {\r\n    checkRole(msg.sender, ROLE_PAUSE_ADMIN);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev constructor. Sets msg.sender as admin by default\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    addRole(msg.sender, ROLE_ADMIN);\r\n    addRole(msg.sender, ROLE_PAUSE_ADMIN);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function adminAddRole(address addr, string roleName)\r\n    onlyAdmin\r\n    public\r\n  {\r\n    addRole(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function adminRemoveRole(address addr, string roleName)\r\n    onlyAdmin\r\n    public\r\n  {\r\n    removeRole(addr, roleName);\r\n  }\r\n}\r\n\r\n\r\ncontract DragonStats is RBACWithAdmin {\r\n    uint256 constant UINT128_MAX = 340282366920938463463374607431768211455;\r\n    uint256 constant UINT248_MAX = 452312848583266388373324160190187140051835877600158453279131187530910662655;\r\n    struct parent {\r\n        uint128 parentOne;\r\n        uint128 parentTwo;\r\n    }\r\n    \r\n    struct lastAction {\r\n        uint8  lastActionID;\r\n        uint248 lastActionDragonID;\r\n    }\r\n    \r\n    struct dragonStat {\r\n        uint32 fightWin;\r\n        uint32 fightLose;\r\n        uint32 children;\r\n        uint32 fightToDeathWin;\r\n        uint32 mutagenFace;\r\n        uint32 mutagenFight;\r\n        uint32 genLabFace;\r\n        uint32 genLabFight;\r\n    }\r\n    \r\n    mapping(uint256 => uint256) public birthBlock;\r\n    mapping(uint256 => uint256) public deathBlock;\r\n    mapping(uint256 => parent)  public parents;\r\n    mapping(uint256 => lastAction) public lastActions;\r\n    mapping(uint256 => dragonStat) public dragonStats;\r\n\r\n\r\n    function setBirthBlock(uint256 _dragonID) external onlyRole(\"MainContract\") {\r\n        require(birthBlock[_dragonID] == 0);\r\n        birthBlock[_dragonID] = block.number;\r\n    }\r\n    \r\n    function setDeathBlock(uint256 _dragonID) external onlyRole(\"MainContract\") {\r\n        require(deathBlock[_dragonID] == 0);\r\n        deathBlock[_dragonID] = block.number;\r\n    }\r\n    \r\n    function setParents(uint256 _dragonID, uint256 _parentOne, uint256 _parentTwo) \r\n        external \r\n        onlyRole(\"MainContract\") \r\n    {\r\n        \r\n        require(birthBlock[_dragonID] == 0);\r\n        \r\n        if (_parentOne <= UINT128_MAX) { \r\n            parents[_dragonID].parentOne = uint128(_parentOne);\r\n        }\r\n        \r\n        if (_parentTwo <= UINT128_MAX) { \r\n            parents[_dragonID].parentTwo = uint128(_parentTwo);\r\n        }\r\n    }\r\n    \r\n    function setLastAction(uint256 _dragonID, uint256 _lastActionDragonID, uint8 _lastActionID) \r\n        external \r\n        onlyRole(\"ActionContract\") \r\n    {\r\n        lastActions[_dragonID].lastActionID = _lastActionID;\r\n        if (_lastActionDragonID > UINT248_MAX) {\r\n            lastActions[_dragonID].lastActionDragonID = 0;\r\n        } else {\r\n            lastActions[_dragonID].lastActionDragonID = uint248(_lastActionDragonID);\r\n        }\r\n    }\r\n    \r\n    function incFightWin(uint256 _dragonID) external onlyRole(\"FightContract\") {\r\n        dragonStats[_dragonID].fightWin++;\r\n    }\r\n    \r\n    function incFightLose(uint256 _dragonID) external onlyRole(\"FightContract\") {\r\n        dragonStats[_dragonID].fightLose++;\r\n    }\r\n    \r\n    function incFightToDeathWin(uint256 _dragonID) external onlyRole(\"DeathContract\") {\r\n        dragonStats[_dragonID].fightToDeathWin++;\r\n    }\r\n    \r\n    function incChildren(uint256 _dragonID) external onlyRole(\"MainContract\") {\r\n        dragonStats[_dragonID].children++;\r\n    }\r\n    \r\n    function addMutagenFace(uint256 _dragonID, uint256 _mutagenCount) \r\n        external \r\n        onlyRole(\"MutagenFaceContract\") \r\n    {\r\n        dragonStats[_dragonID].mutagenFace = dragonStats[_dragonID].mutagenFace + uint32(_mutagenCount);\r\n    }\r\n    \r\n    function addMutagenFight(uint256 _dragonID, uint256 _mutagenCount) \r\n        external \r\n        onlyRole(\"MutagenFightContract\") \r\n    {\r\n        dragonStats[_dragonID].mutagenFight = dragonStats[_dragonID].mutagenFight + uint32(_mutagenCount);\r\n    }\r\n    \r\n    function incGenLabFace(uint256 _dragonID) external onlyRole(\"GenLabContract\") {\r\n        dragonStats[_dragonID].genLabFace++;\r\n    }\r\n    \r\n    function incGenLabFight(uint256 _dragonID) external onlyRole(\"GenLabContract\") {\r\n        dragonStats[_dragonID].genLabFight++;\r\n    }\r\n    \r\n    function getDragonFight(uint256 _dragonID) external view returns (uint256){\r\n        return  (dragonStats[_dragonID].fightWin + dragonStats[_dragonID].fightLose + dragonStats[_dragonID].fightToDeathWin);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"},{\"name\":\"_mutagenCount\",\"type\":\"uint256\"}],\"name\":\"addMutagenFight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"incFightWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"},{\"name\":\"_parentOne\",\"type\":\"uint256\"},{\"name\":\"_parentTwo\",\"type\":\"uint256\"}],\"name\":\"setParents\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_PAUSE_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"incFightLose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"},{\"name\":\"_mutagenCount\",\"type\":\"uint256\"}],\"name\":\"addMutagenFace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"birthBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"adminRemoveRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"parents\",\"outputs\":[{\"name\":\"parentOne\",\"type\":\"uint128\"},{\"name\":\"parentTwo\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastActions\",\"outputs\":[{\"name\":\"lastActionID\",\"type\":\"uint8\"},{\"name\":\"lastActionDragonID\",\"type\":\"uint248\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"incChildren\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"setBirthBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"incFightToDeathWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"},{\"name\":\"_lastActionDragonID\",\"type\":\"uint256\"},{\"name\":\"_lastActionID\",\"type\":\"uint8\"}],\"name\":\"setLastAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"adminAddRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deathBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"getDragonFight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dragonStats\",\"outputs\":[{\"name\":\"fightWin\",\"type\":\"uint32\"},{\"name\":\"fightLose\",\"type\":\"uint32\"},{\"name\":\"children\",\"type\":\"uint32\"},{\"name\":\"fightToDeathWin\",\"type\":\"uint32\"},{\"name\":\"mutagenFace\",\"type\":\"uint32\"},{\"name\":\"mutagenFight\",\"type\":\"uint32\"},{\"name\":\"genLabFace\",\"type\":\"uint32\"},{\"name\":\"genLabFight\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"incGenLabFace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"incGenLabFight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"setDeathBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"}]","ContractName":"DragonStats","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3825be73e23d2402d44b0cc423fc7408ba82eea1d09572cc468f79068492d156"}]}