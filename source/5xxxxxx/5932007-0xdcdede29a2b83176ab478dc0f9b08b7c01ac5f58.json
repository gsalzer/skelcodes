{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\nlibrary SafeMath32 {\r\n  function add(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    uint32 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function Owned() \r\n    public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) \r\n        onlyOwner \r\n    public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract BalanceHolder {\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    event LogWithdraw(\r\n        address indexed user,\r\n        uint256 amount\r\n    );\r\n\r\n    function withdraw() \r\n    public {\r\n        uint256 bal = balanceOf[msg.sender];\r\n        balanceOf[msg.sender] = 0;\r\n        msg.sender.transfer(bal);\r\n        LogWithdraw(msg.sender, bal);\r\n    }\r\n\r\n}\r\ncontract RealityCheck is BalanceHolder {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath32 for uint32;\r\n\r\n    address constant NULL_ADDRESS = address(0);\r\n\r\n    // History hash when no history is created, or history has been cleared\r\n    bytes32 constant NULL_HASH = bytes32(0);\r\n\r\n    // An unitinalized finalize_ts for a question will indicate an unanswered question.\r\n    uint32 constant UNANSWERED = 0;\r\n\r\n    // An unanswered reveal_ts for a commitment will indicate that it does not exist.\r\n    uint256 constant COMMITMENT_NON_EXISTENT = 0;\r\n\r\n    // Commit->reveal timeout is 1/8 of the question timeout (rounded down).\r\n    uint32 constant COMMITMENT_TIMEOUT_RATIO = 8;\r\n\r\n    event LogSetQuestionFee(\r\n        address arbitrator,\r\n        uint256 amount\r\n    );\r\n\r\n    event LogNewTemplate(\r\n        uint256 indexed template_id,\r\n        address indexed user, \r\n        string question_text\r\n    );\r\n\r\n    event LogNewQuestion(\r\n        bytes32 indexed question_id,\r\n        address indexed user, \r\n        uint256 template_id,\r\n        string question,\r\n        bytes32 indexed content_hash,\r\n        address arbitrator, \r\n        uint32 timeout,\r\n        uint32 opening_ts,\r\n        uint256 nonce,\r\n        uint256 created\r\n    );\r\n\r\n    event LogFundAnswerBounty(\r\n        bytes32 indexed question_id,\r\n        uint256 bounty_added,\r\n        uint256 bounty,\r\n        address indexed user \r\n    );\r\n\r\n    event LogNewAnswer(\r\n        bytes32 answer,\r\n        bytes32 indexed question_id,\r\n        bytes32 history_hash,\r\n        address indexed user,\r\n        uint256 bond,\r\n        uint256 ts,\r\n        bool is_commitment\r\n    );\r\n\r\n    event LogAnswerReveal(\r\n        bytes32 indexed question_id, \r\n        address indexed user, \r\n        bytes32 indexed answer_hash, \r\n        bytes32 answer, \r\n        uint256 nonce, \r\n        uint256 bond\r\n    );\r\n\r\n    event LogNotifyOfArbitrationRequest(\r\n        bytes32 indexed question_id,\r\n        address indexed user \r\n    );\r\n\r\n    event LogFinalize(\r\n        bytes32 indexed question_id,\r\n        bytes32 indexed answer\r\n    );\r\n\r\n    event LogClaim(\r\n        bytes32 indexed question_id,\r\n        address indexed user,\r\n        uint256 amount\r\n    );\r\n\r\n    struct Question {\r\n        bytes32 content_hash;\r\n        address arbitrator;\r\n        uint32 opening_ts;\r\n        uint32 timeout;\r\n        uint32 finalize_ts;\r\n        bool is_pending_arbitration;\r\n        uint256 bounty;\r\n        bytes32 best_answer;\r\n        bytes32 history_hash;\r\n        uint256 bond;\r\n    }\r\n\r\n    // Stored in a mapping indexed by commitment_id, a hash of commitment hash, question, bond. \r\n    struct Commitment {\r\n        uint32 reveal_ts;\r\n        bool is_revealed;\r\n        bytes32 revealed_answer;\r\n    }\r\n\r\n    // Only used when claiming more bonds than fits into a transaction\r\n    // Stored in a mapping indexed by question_id.\r\n    struct Claim {\r\n        address payee;\r\n        uint256 last_bond;\r\n        uint256 queued_funds;\r\n    }\r\n\r\n    uint256 nextTemplateID = 0;\r\n    mapping(uint256 => uint256) public templates;\r\n    mapping(uint256 => bytes32) public template_hashes;\r\n    mapping(bytes32 => Question) public questions;\r\n    mapping(bytes32 => Claim) question_claims;\r\n    mapping(bytes32 => Commitment) public commitments;\r\n    mapping(address => uint256) public arbitrator_question_fees; \r\n\r\n    modifier onlyArbitrator(bytes32 question_id) {\r\n        require(msg.sender == questions[question_id].arbitrator);\r\n        _;\r\n    }\r\n\r\n    modifier stateAny() {\r\n        _;\r\n    }\r\n\r\n    modifier stateNotCreated(bytes32 question_id) {\r\n        require(questions[question_id].timeout == 0);\r\n        _;\r\n    }\r\n\r\n    modifier stateOpen(bytes32 question_id) {\r\n        require(questions[question_id].timeout > 0); // Check existence\r\n        require(!questions[question_id].is_pending_arbitration);\r\n        uint32 finalize_ts = questions[question_id].finalize_ts;\r\n        require(finalize_ts == UNANSWERED || finalize_ts > uint32(now));\r\n        uint32 opening_ts = questions[question_id].opening_ts;\r\n        require(opening_ts == 0 || opening_ts <= uint32(now)); \r\n        _;\r\n    }\r\n\r\n    modifier statePendingArbitration(bytes32 question_id) {\r\n        require(questions[question_id].is_pending_arbitration);\r\n        _;\r\n    }\r\n\r\n    modifier stateOpenOrPendingArbitration(bytes32 question_id) {\r\n        require(questions[question_id].timeout > 0); // Check existence\r\n        uint32 finalize_ts = questions[question_id].finalize_ts;\r\n        require(finalize_ts == UNANSWERED || finalize_ts > uint32(now));\r\n        uint32 opening_ts = questions[question_id].opening_ts;\r\n        require(opening_ts == 0 || opening_ts <= uint32(now)); \r\n        _;\r\n    }\r\n\r\n    modifier stateFinalized(bytes32 question_id) {\r\n        require(isFinalized(question_id));\r\n        _;\r\n    }\r\n\r\n    modifier bondMustBeZero() {\r\n        require(msg.value == 0);\r\n        _;\r\n    }\r\n\r\n    modifier bondMustDouble(bytes32 question_id) {\r\n        require(msg.value > 0); \r\n        require(msg.value >= (questions[question_id].bond.mul(2)));\r\n        _;\r\n    }\r\n\r\n    modifier previousBondMustNotBeatMaxPrevious(bytes32 question_id, uint256 max_previous) {\r\n        if (max_previous > 0) {\r\n            require(questions[question_id].bond <= max_previous);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @notice Constructor, sets up some initial templates\r\n    /// @dev Creates some generalized templates for different question types used in the DApp.\r\n    function RealityCheck() \r\n    public {\r\n        createTemplate('{\"title\": \"%s\", \"type\": \"bool\", \"category\": \"%s\"}');\r\n        createTemplate('{\"title\": \"%s\", \"type\": \"uint\", \"decimals\": 18, \"category\": \"%s\"}');\r\n        createTemplate('{\"title\": \"%s\", \"type\": \"single-select\", \"outcomes\": [%s], \"category\": \"%s\"}');\r\n        createTemplate('{\"title\": \"%s\", \"type\": \"multiple-select\", \"outcomes\": [%s], \"category\": \"%s\"}');\r\n        createTemplate('{\"title\": \"%s\", \"type\": \"datetime\", \"category\": \"%s\"}');\r\n    }\r\n\r\n    /// @notice Function for arbitrator to set an optional per-question fee. \r\n    /// @dev The per-question fee, charged when a question is asked, is intended as an anti-spam measure.\r\n    /// @param fee The fee to be charged by the arbitrator when a question is asked\r\n    function setQuestionFee(uint256 fee) \r\n        stateAny() \r\n    external {\r\n        arbitrator_question_fees[msg.sender] = fee;\r\n        LogSetQuestionFee(msg.sender, fee);\r\n    }\r\n\r\n    /// @notice Create a reusable template, which should be a JSON document.\r\n    /// Placeholders should use gettext() syntax, eg %s.\r\n    /// @dev Template data is only stored in the event logs, but its block number is kept in contract storage.\r\n    /// @param content The template content\r\n    /// @return The ID of the newly-created template, which is created sequentially.\r\n    function createTemplate(string content) \r\n        stateAny()\r\n    public returns (uint256) {\r\n        uint256 id = nextTemplateID;\r\n        templates[id] = block.number;\r\n        template_hashes[id] = keccak256(content);\r\n        LogNewTemplate(id, msg.sender, content);\r\n        nextTemplateID = id.add(1);\r\n        return id;\r\n    }\r\n\r\n    /// @notice Create a new reusable template and use it to ask a question\r\n    /// @dev Template data is only stored in the event logs, but its block number is kept in contract storage.\r\n    /// @param content The template content\r\n    /// @param question A string containing the parameters that will be passed into the template to make the question\r\n    /// @param arbitrator The arbitration contract that will have the final word on the answer if there is a dispute\r\n    /// @param timeout How long the contract should wait after the answer is changed before finalizing on that answer\r\n    /// @param opening_ts If set, the earliest time it should be possible to answer the question.\r\n    /// @param nonce A user-specified nonce used in the question ID. Change it to repeat a question.\r\n    /// @return The ID of the newly-created template, which is created sequentially.\r\n    function createTemplateAndAskQuestion(\r\n        string content, \r\n        string question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce \r\n    ) \r\n        // stateNotCreated is enforced by the internal _askQuestion\r\n    public payable returns (bytes32) {\r\n        uint256 template_id = createTemplate(content);\r\n        return askQuestion(template_id, question, arbitrator, timeout, opening_ts, nonce);\r\n    }\r\n\r\n    /// @notice Ask a new question and return the ID\r\n    /// @dev Template data is only stored in the event logs, but its block number is kept in contract storage.\r\n    /// @param template_id The ID number of the template the question will use\r\n    /// @param question A string containing the parameters that will be passed into the template to make the question\r\n    /// @param arbitrator The arbitration contract that will have the final word on the answer if there is a dispute\r\n    /// @param timeout How long the contract should wait after the answer is changed before finalizing on that answer\r\n    /// @param opening_ts If set, the earliest time it should be possible to answer the question.\r\n    /// @param nonce A user-specified nonce used in the question ID. Change it to repeat a question.\r\n    /// @return The ID of the newly-created question, created deterministically.\r\n    function askQuestion(uint256 template_id, string question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) \r\n        // stateNotCreated is enforced by the internal _askQuestion\r\n    public payable returns (bytes32) {\r\n\r\n        require(templates[template_id] > 0); // Template must exist\r\n\r\n        bytes32 content_hash = keccak256(template_id, opening_ts, question);\r\n        bytes32 question_id = keccak256(content_hash, arbitrator, timeout, msg.sender, nonce);\r\n\r\n        _askQuestion(question_id, content_hash, arbitrator, timeout, opening_ts);\r\n        LogNewQuestion(question_id, msg.sender, template_id, question, content_hash, arbitrator, timeout, opening_ts, nonce, now);\r\n\r\n        return question_id;\r\n    }\r\n\r\n    function _askQuestion(bytes32 question_id, bytes32 content_hash, address arbitrator, uint32 timeout, uint32 opening_ts) \r\n        stateNotCreated(question_id)\r\n    internal {\r\n\r\n        // A timeout of 0 makes no sense, and we will use this to check existence\r\n        require(timeout > 0); \r\n        require(timeout < 365 days); \r\n        require(arbitrator != NULL_ADDRESS);\r\n\r\n        uint256 bounty = msg.value;\r\n\r\n        // The arbitrator can set a fee for asking a question. \r\n        // This is intended as an anti-spam defence.\r\n        // The fee is waived if the arbitrator is asking the question.\r\n        // This allows them to set an impossibly high fee and make users proxy the question through them.\r\n        // This would allow more sophisticated pricing, question whitelisting etc.\r\n        if (msg.sender != arbitrator) {\r\n            uint256 question_fee = arbitrator_question_fees[arbitrator];\r\n            require(bounty >= question_fee); \r\n            bounty = bounty.sub(question_fee);\r\n            balanceOf[arbitrator] = balanceOf[arbitrator].add(question_fee);\r\n        }\r\n\r\n        questions[question_id].content_hash = content_hash;\r\n        questions[question_id].arbitrator = arbitrator;\r\n        questions[question_id].opening_ts = opening_ts;\r\n        questions[question_id].timeout = timeout;\r\n        questions[question_id].bounty = bounty;\r\n\r\n    }\r\n\r\n    /// @notice Add funds to the bounty for a question\r\n    /// @dev Add bounty funds after the initial question creation. Can be done any time until the question is finalized.\r\n    /// @param question_id The ID of the question you wish to fund\r\n    function fundAnswerBounty(bytes32 question_id) \r\n        stateOpen(question_id)\r\n    external payable {\r\n        questions[question_id].bounty = questions[question_id].bounty.add(msg.value);\r\n        LogFundAnswerBounty(question_id, msg.value, questions[question_id].bounty, msg.sender);\r\n    }\r\n\r\n    /// @notice Submit an answer for a question.\r\n    /// @dev Adds the answer to the history and updates the current \"best\" answer.\r\n    /// May be subject to front-running attacks; Substitute submitAnswerCommitment()->submitAnswerReveal() to prevent them.\r\n    /// @param question_id The ID of the question\r\n    /// @param answer The answer, encoded into bytes32\r\n    /// @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.\r\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) \r\n        stateOpen(question_id)\r\n        bondMustDouble(question_id)\r\n        previousBondMustNotBeatMaxPrevious(question_id, max_previous)\r\n    external payable {\r\n        _addAnswerToHistory(question_id, answer, msg.sender, msg.value, false);\r\n        _updateCurrentAnswer(question_id, answer, questions[question_id].timeout);\r\n    }\r\n\r\n    /// @notice Submit the hash of an answer, laying your claim to that answer if you reveal it in a subsequent transaction.\r\n    /// @dev Creates a hash, commitment_id, uniquely identifying this answer, to this question, with this bond.\r\n    /// The commitment_id is stored in the answer history where the answer would normally go.\r\n    /// Does not update the current best answer - this is left to the later submitAnswerReveal() transaction.\r\n    /// @param question_id The ID of the question\r\n    /// @param answer_hash The hash of your answer, plus a nonce that you will later reveal\r\n    /// @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.\r\n    /// @param _answerer If specified, the address to be given as the question answerer. Defaults to the sender.\r\n    /// @dev Specifying the answerer is useful if you want to delegate the commit-and-reveal to a third-party.\r\n    function submitAnswerCommitment(bytes32 question_id, bytes32 answer_hash, uint256 max_previous, address _answerer) \r\n        stateOpen(question_id)\r\n        bondMustDouble(question_id)\r\n        previousBondMustNotBeatMaxPrevious(question_id, max_previous)\r\n    external payable {\r\n\r\n        bytes32 commitment_id = keccak256(question_id, answer_hash, msg.value);\r\n        address answerer = (_answerer == NULL_ADDRESS) ? msg.sender : _answerer;\r\n\r\n        require(commitments[commitment_id].reveal_ts == COMMITMENT_NON_EXISTENT);\r\n\r\n        uint32 commitment_timeout = questions[question_id].timeout / COMMITMENT_TIMEOUT_RATIO;\r\n        commitments[commitment_id].reveal_ts = uint32(now).add(commitment_timeout);\r\n\r\n        _addAnswerToHistory(question_id, commitment_id, answerer, msg.value, true);\r\n\r\n    }\r\n\r\n    /// @notice Submit the answer whose hash you sent in a previous submitAnswerCommitment() transaction\r\n    /// @dev Checks the parameters supplied recreate an existing commitment, and stores the revealed answer\r\n    /// Updates the current answer unless someone has since supplied a new answer with a higher bond\r\n    /// msg.sender is intentionally not restricted to the user who originally sent the commitment; \r\n    /// For example, the user may want to provide the answer+nonce to a third-party service and let them send the tx\r\n    /// NB If we are pending arbitration, it will be up to the arbitrator to wait and see any outstanding reveal is sent\r\n    /// @param question_id The ID of the question\r\n    /// @param answer The answer, encoded as bytes32\r\n    /// @param nonce The nonce that, combined with the answer, recreates the answer_hash you gave in submitAnswerCommitment()\r\n    /// @param bond The bond that you paid in your submitAnswerCommitment() transaction\r\n    function submitAnswerReveal(bytes32 question_id, bytes32 answer, uint256 nonce, uint256 bond) \r\n        stateOpenOrPendingArbitration(question_id)\r\n    external {\r\n\r\n        bytes32 answer_hash = keccak256(answer, nonce);\r\n        bytes32 commitment_id = keccak256(question_id, answer_hash, bond);\r\n\r\n        require(!commitments[commitment_id].is_revealed);\r\n        require(commitments[commitment_id].reveal_ts > uint32(now)); // Reveal deadline must not have passed\r\n\r\n        commitments[commitment_id].revealed_answer = answer;\r\n        commitments[commitment_id].is_revealed = true;\r\n\r\n        if (bond == questions[question_id].bond) {\r\n            _updateCurrentAnswer(question_id, answer, questions[question_id].timeout);\r\n        }\r\n\r\n        LogAnswerReveal(question_id, msg.sender, answer_hash, answer, nonce, bond);\r\n\r\n    }\r\n\r\n    function _addAnswerToHistory(bytes32 question_id, bytes32 answer_or_commitment_id, address answerer, uint256 bond, bool is_commitment) \r\n    internal \r\n    {\r\n        bytes32 new_history_hash = keccak256(questions[question_id].history_hash, answer_or_commitment_id, bond, answerer, is_commitment);\r\n\r\n        questions[question_id].bond = bond;\r\n        questions[question_id].history_hash = new_history_hash;\r\n\r\n        LogNewAnswer(answer_or_commitment_id, question_id, new_history_hash, answerer, bond, now, is_commitment);\r\n    }\r\n\r\n    function _updateCurrentAnswer(bytes32 question_id, bytes32 answer, uint32 timeout_secs)\r\n    internal {\r\n        questions[question_id].best_answer = answer;\r\n        questions[question_id].finalize_ts = uint32(now).add(timeout_secs);\r\n    }\r\n\r\n    /// @notice Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision.\r\n    /// @dev The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.\r\n    /// @param question_id The ID of the question\r\n    /// @param requester The account that requested arbitration\r\n    /// @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.\r\n    function notifyOfArbitrationRequest(bytes32 question_id, address requester, uint256 max_previous) \r\n        onlyArbitrator(question_id)\r\n        stateOpen(question_id)\r\n        previousBondMustNotBeatMaxPrevious(question_id, max_previous)\r\n    external {\r\n        questions[question_id].is_pending_arbitration = true;\r\n        LogNotifyOfArbitrationRequest(question_id, requester);\r\n    }\r\n\r\n    /// @notice Submit the answer for a question, for use by the arbitrator.\r\n    /// @dev Doesn't require (or allow) a bond.\r\n    /// If the current final answer is correct, the account should be whoever submitted it.\r\n    /// If the current final answer is wrong, the account should be whoever paid for arbitration.\r\n    /// However, the answerer stipulations are not enforced by the contract.\r\n    /// @param question_id The ID of the question\r\n    /// @param answer The answer, encoded into bytes32\r\n    /// @param answerer The account credited with this answer for the purpose of bond claims\r\n    function submitAnswerByArbitrator(bytes32 question_id, bytes32 answer, address answerer) \r\n        onlyArbitrator(question_id)\r\n        statePendingArbitration(question_id)\r\n        bondMustBeZero\r\n    external {\r\n\r\n        require(answerer != NULL_ADDRESS);\r\n        LogFinalize(question_id, answer);\r\n\r\n        questions[question_id].is_pending_arbitration = false;\r\n        _addAnswerToHistory(question_id, answer, answerer, 0, false);\r\n        _updateCurrentAnswer(question_id, answer, 0);\r\n\r\n    }\r\n\r\n    /// @notice Report whether the answer to the specified question is finalized\r\n    /// @param question_id The ID of the question\r\n    /// @return Return true if finalized\r\n    function isFinalized(bytes32 question_id) \r\n    constant public returns (bool) {\r\n        uint32 finalize_ts = questions[question_id].finalize_ts;\r\n        return ( !questions[question_id].is_pending_arbitration && (finalize_ts > UNANSWERED) && (finalize_ts <= uint32(now)) );\r\n    }\r\n\r\n    /// @notice Return the final answer to the specified question, or revert if there isn't one\r\n    /// @param question_id The ID of the question\r\n    /// @return The answer formatted as a bytes32\r\n    function getFinalAnswer(bytes32 question_id) \r\n        stateFinalized(question_id)\r\n    external constant returns (bytes32) {\r\n        return questions[question_id].best_answer;\r\n    }\r\n\r\n    /// @notice Return the final answer to the specified question, provided it matches the specified criteria.\r\n    /// @dev Reverts if the question is not finalized, or if it does not match the specified criteria.\r\n    /// @param question_id The ID of the question\r\n    /// @param content_hash The hash of the question content (template ID + opening time + question parameter string)\r\n    /// @param arbitrator The arbitrator chosen for the question (regardless of whether they are asked to arbitrate)\r\n    /// @param min_timeout The timeout set in the initial question settings must be this high or higher\r\n    /// @param min_bond The bond sent with the final answer must be this high or higher\r\n    /// @return The answer formatted as a bytes32\r\n    function getFinalAnswerIfMatches(\r\n        bytes32 question_id, \r\n        bytes32 content_hash, address arbitrator, uint32 min_timeout, uint256 min_bond\r\n    ) \r\n        stateFinalized(question_id)\r\n    external constant returns (bytes32) {\r\n        require(content_hash == questions[question_id].content_hash);\r\n        require(arbitrator == questions[question_id].arbitrator);\r\n        require(min_timeout <= questions[question_id].timeout);\r\n        require(min_bond <= questions[question_id].bond);\r\n        return questions[question_id].best_answer;\r\n    }\r\n\r\n    /// @notice Assigns the winnings (bounty and bonds) to everyone who gave the accepted answer\r\n    /// Caller must provide the answer history, in reverse order\r\n    /// @dev Works up the chain and assign bonds to the person who gave the right answer\r\n    /// If someone gave the winning answer earlier, they must get paid from the higher bond\r\n    /// That means we can't pay out the bond added at n until we have looked at n-1\r\n    /// The first answer is authenticated by checking against the stored history_hash.\r\n    /// One of the inputs to history_hash is the history_hash before it, so we use that to authenticate the next entry, etc\r\n    /// Once we get to a null hash we'll know we're done and there are no more answers.\r\n    /// Usually you would call the whole thing in a single transaction, but if not then the data is persisted to pick up later.\r\n    /// @param question_id The ID of the question\r\n    /// @param history_hashes Second-last-to-first, the hash of each history entry. (Final one should be empty).\r\n    /// @param addrs Last-to-first, the address of each answerer or commitment sender\r\n    /// @param bonds Last-to-first, the bond supplied with each answer or commitment\r\n    /// @param answers Last-to-first, each answer supplied, or commitment ID if the answer was supplied with commit->reveal\r\n    function claimWinnings(\r\n        bytes32 question_id, \r\n        bytes32[] history_hashes, address[] addrs, uint256[] bonds, bytes32[] answers\r\n    ) \r\n        stateFinalized(question_id)\r\n    public {\r\n\r\n        require(history_hashes.length > 0);\r\n\r\n        // These are only set if we split our claim over multiple transactions.\r\n        address payee = question_claims[question_id].payee; \r\n        uint256 last_bond = question_claims[question_id].last_bond; \r\n        uint256 queued_funds = question_claims[question_id].queued_funds; \r\n\r\n        // Starts as the hash of the final answer submitted. It'll be cleared when we're done.\r\n        // If we're splitting the claim over multiple transactions, it'll be the hash where we left off last time\r\n        bytes32 last_history_hash = questions[question_id].history_hash;\r\n\r\n        bytes32 best_answer = questions[question_id].best_answer;\r\n\r\n        uint256 i;\r\n        for (i = 0; i < history_hashes.length; i++) {\r\n        \r\n            // Check input against the history hash, and see which of 2 possible values of is_commitment fits.\r\n            bool is_commitment = _verifyHistoryInputOrRevert(last_history_hash, history_hashes[i], answers[i], bonds[i], addrs[i]);\r\n            \r\n            queued_funds = queued_funds.add(last_bond); \r\n            (queued_funds, payee) = _processHistoryItem(\r\n                question_id, best_answer, queued_funds, payee, \r\n                addrs[i], bonds[i], answers[i], is_commitment);\r\n \r\n            // Line the bond up for next time, when it will be added to somebody's queued_funds\r\n            last_bond = bonds[i];\r\n            last_history_hash = history_hashes[i];\r\n\r\n        }\r\n \r\n        if (last_history_hash != NULL_HASH) {\r\n            // We haven't yet got to the null hash (1st answer), ie the caller didn't supply the full answer chain.\r\n            // Persist the details so we can pick up later where we left off later.\r\n\r\n            // If we know who to pay we can go ahead and pay them out, only keeping back last_bond\r\n            // (We always know who to pay unless all we saw were unrevealed commits)\r\n            if (payee != NULL_ADDRESS) {\r\n                _payPayee(question_id, payee, queued_funds);\r\n                queued_funds = 0;\r\n            }\r\n\r\n            question_claims[question_id].payee = payee;\r\n            question_claims[question_id].last_bond = last_bond;\r\n            question_claims[question_id].queued_funds = queued_funds;\r\n        } else {\r\n            // There is nothing left below us so the payee can keep what remains\r\n            _payPayee(question_id, payee, queued_funds.add(last_bond));\r\n            delete question_claims[question_id];\r\n        }\r\n\r\n        questions[question_id].history_hash = last_history_hash;\r\n\r\n    }\r\n\r\n    function _payPayee(bytes32 question_id, address payee, uint256 value) \r\n    internal {\r\n        balanceOf[payee] = balanceOf[payee].add(value);\r\n        LogClaim(question_id, payee, value);\r\n    }\r\n\r\n    function _verifyHistoryInputOrRevert(\r\n        bytes32 last_history_hash,\r\n        bytes32 history_hash, bytes32 answer, uint256 bond, address addr\r\n    )\r\n    internal pure returns (bool) {\r\n        if (last_history_hash == keccak256(history_hash, answer, bond, addr, true) ) {\r\n            return true;\r\n        }\r\n        if (last_history_hash == keccak256(history_hash, answer, bond, addr, false) ) {\r\n            return false;\r\n        } \r\n        revert();\r\n    }\r\n\r\n    function _processHistoryItem(\r\n        bytes32 question_id, bytes32 best_answer, \r\n        uint256 queued_funds, address payee, \r\n        address addr, uint256 bond, bytes32 answer, bool is_commitment\r\n    )\r\n    internal returns (uint256, address) {\r\n\r\n        // For commit-and-reveal, the answer history holds the commitment ID instead of the answer.\r\n        // We look at the referenced commitment ID and switch in the actual answer.\r\n        if (is_commitment) {\r\n            bytes32 commitment_id = answer;\r\n            // If it's a commit but it hasn't been revealed, it will always be considered wrong.\r\n            if (!commitments[commitment_id].is_revealed) {\r\n                delete commitments[commitment_id];\r\n                return (queued_funds, payee);\r\n            } else {\r\n                answer = commitments[commitment_id].revealed_answer;\r\n                delete commitments[commitment_id];\r\n            }\r\n        }\r\n\r\n        if (answer == best_answer) {\r\n\r\n            if (payee == NULL_ADDRESS) {\r\n\r\n                // The entry is for the first payee we come to, ie the winner.\r\n                // They get the question bounty.\r\n                payee = addr;\r\n                queued_funds = queued_funds.add(questions[question_id].bounty);\r\n                questions[question_id].bounty = 0;\r\n\r\n            } else if (addr != payee) {\r\n\r\n                // Answerer has changed, ie we found someone lower down who needs to be paid\r\n\r\n                // The lower answerer will take over receiving bonds from higher answerer.\r\n                // They should also be paid the takeover fee, which is set at a rate equivalent to their bond. \r\n                // (This is our arbitrary rule, to give consistent right-answerers a defence against high-rollers.)\r\n\r\n                // There should be enough for the fee, but if not, take what we have.\r\n                // There's an edge case involving weird arbitrator behaviour where we may be short.\r\n                uint256 answer_takeover_fee = (queued_funds >= bond) ? bond : queued_funds;\r\n\r\n                // Settle up with the old (higher-bonded) payee\r\n                _payPayee(question_id, payee, queued_funds.sub(answer_takeover_fee));\r\n\r\n                // Now start queued_funds again for the new (lower-bonded) payee\r\n                payee = addr;\r\n                queued_funds = answer_takeover_fee;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return (queued_funds, payee);\r\n\r\n    }\r\n\r\n    /// @notice Convenience function to assign bounties/bonds for multiple questions in one go, then withdraw all your funds.\r\n    /// Caller must provide the answer history for each question, in reverse order\r\n    /// @dev Can be called by anyone to assign bonds/bounties, but funds are only withdrawn for the user making the call.\r\n    /// @param question_ids The IDs of the questions you want to claim for\r\n    /// @param lengths The number of history entries you will supply for each question ID\r\n    /// @param hist_hashes In a single list for all supplied questions, the hash of each history entry.\r\n    /// @param addrs In a single list for all supplied questions, the address of each answerer or commitment sender\r\n    /// @param bonds In a single list for all supplied questions, the bond supplied with each answer or commitment\r\n    /// @param answers In a single list for all supplied questions, each answer supplied, or commitment ID \r\n    function claimMultipleAndWithdrawBalance(\r\n        bytes32[] question_ids, uint256[] lengths, \r\n        bytes32[] hist_hashes, address[] addrs, uint256[] bonds, bytes32[] answers\r\n    ) \r\n        stateAny() // The finalization checks are done in the claimWinnings function\r\n    public {\r\n        \r\n        uint256 qi;\r\n        uint256 i;\r\n        for (qi = 0; qi < question_ids.length; qi++) {\r\n            bytes32 qid = question_ids[qi];\r\n            uint256 ln = lengths[qi];\r\n            bytes32[] memory hh = new bytes32[](ln);\r\n            address[] memory ad = new address[](ln);\r\n            uint256[] memory bo = new uint256[](ln);\r\n            bytes32[] memory an = new bytes32[](ln);\r\n            uint256 j;\r\n            for (j = 0; j < ln; j++) {\r\n                hh[j] = hist_hashes[i];\r\n                ad[j] = addrs[i];\r\n                bo[j] = bonds[i];\r\n                an[j] = answers[i];\r\n                i++;\r\n            }\r\n            claimWinnings(qid, hh, ad, bo, an);\r\n        }\r\n        withdraw();\r\n    }\r\n}\r\ncontract Arbitrator is Owned {\r\n\r\n    RealityCheck public realitycheck;\r\n\r\n    mapping(bytes32 => uint256) public arbitration_bounties;\r\n\r\n    uint256 dispute_fee;\r\n    mapping(bytes32 => uint256) custom_dispute_fees;\r\n\r\n    event LogRequestArbitration(\r\n        bytes32 indexed question_id,\r\n        uint256 fee_paid,\r\n        address requester,\r\n        uint256 remaining\r\n    );\r\n\r\n    event LogSetRealityCheck(\r\n        address realitycheck\r\n    );\r\n\r\n    event LogSetQuestionFee(\r\n        uint256 fee\r\n    );\r\n\r\n\r\n    event LogSetDisputeFee(\r\n        uint256 fee\r\n    );\r\n\r\n    event LogSetCustomDisputeFee(\r\n        bytes32 indexed question_id,\r\n        uint256 fee\r\n    );\r\n\r\n    /// @notice Constructor. Sets the deploying address as owner.\r\n    function Arbitrator() \r\n    public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice Set the Reality Check contract address\r\n    /// @param addr The address of the Reality Check contract\r\n    function setRealityCheck(address addr) \r\n        onlyOwner \r\n    public {\r\n        realitycheck = RealityCheck(addr);\r\n        LogSetRealityCheck(addr);\r\n    }\r\n\r\n    /// @notice Set the default fee\r\n    /// @param fee The default fee amount\r\n    function setDisputeFee(uint256 fee) \r\n        onlyOwner \r\n    public {\r\n        dispute_fee = fee;\r\n        LogSetDisputeFee(fee);\r\n    }\r\n\r\n    /// @notice Set a custom fee for this particular question\r\n    /// @param question_id The question in question\r\n    /// @param fee The fee amount\r\n    function setCustomDisputeFee(bytes32 question_id, uint256 fee) \r\n        onlyOwner \r\n    public {\r\n        custom_dispute_fees[question_id] = fee;\r\n        LogSetCustomDisputeFee(question_id, fee);\r\n    }\r\n\r\n    /// @notice Return the dispute fee for the specified question. 0 indicates that we won't arbitrate it.\r\n    /// @param question_id The question in question\r\n    /// @dev Uses a general default, but can be over-ridden on a question-by-question basis.\r\n    function getDisputeFee(bytes32 question_id) \r\n    public constant returns (uint256) {\r\n        return (custom_dispute_fees[question_id] > 0) ? custom_dispute_fees[question_id] : dispute_fee;\r\n    }\r\n\r\n    /// @notice Set a fee for asking a question with us as the arbitrator\r\n    /// @param fee The fee amount\r\n    /// @dev Default is no fee. Unlike the dispute fee, 0 is an acceptable setting.\r\n    /// You could set an impossibly high fee if you want to prevent us being used as arbitrator unless we submit the question.\r\n    /// (Submitting the question ourselves is not implemented here.)\r\n    /// This fee can be used as a revenue source, an anti-spam measure, or both.\r\n    function setQuestionFee(uint256 fee) \r\n        onlyOwner \r\n    public {\r\n        realitycheck.setQuestionFee(fee);\r\n        LogSetQuestionFee(fee);\r\n    }\r\n\r\n    /// @notice Submit the arbitrator's answer to a question.\r\n    /// @param question_id The question in question\r\n    /// @param answer The answer\r\n    /// @param answerer The answerer. If arbitration changed the answer, it should be the payer. If not, the old answerer.\r\n    function submitAnswerByArbitrator(bytes32 question_id, bytes32 answer, address answerer) \r\n        onlyOwner \r\n    public {\r\n        delete arbitration_bounties[question_id];\r\n        realitycheck.submitAnswerByArbitrator(question_id, answer, answerer);\r\n    }\r\n\r\n    /// @notice Request arbitration, freezing the question until we send submitAnswerByArbitrator\r\n    /// @dev The bounty can be paid only in part, in which case the last person to pay will be considered the payer\r\n    /// Will trigger an error if the notification fails, eg because the question has already been finalized\r\n    /// @param question_id The question in question\r\n    /// @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.\r\n    function requestArbitration(bytes32 question_id, uint256 max_previous) \r\n    external payable returns (bool) {\r\n\r\n        uint256 arbitration_fee = getDisputeFee(question_id);\r\n        require(arbitration_fee > 0);\r\n\r\n        arbitration_bounties[question_id] += msg.value;\r\n        uint256 paid = arbitration_bounties[question_id];\r\n\r\n        if (paid >= arbitration_fee) {\r\n            realitycheck.notifyOfArbitrationRequest(question_id, msg.sender, max_previous);\r\n            LogRequestArbitration(question_id, msg.value, msg.sender, 0);\r\n            return true;\r\n        } else {\r\n            require(!realitycheck.isFinalized(question_id));\r\n            LogRequestArbitration(question_id, msg.value, msg.sender, arbitration_fee - paid);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /// @notice Withdraw any accumulated fees to the specified address\r\n    /// @param addr The address to which the balance should be sent\r\n    function withdraw(address addr) \r\n        onlyOwner \r\n    public {\r\n        addr.transfer(this.balance); \r\n    }\r\n\r\n    function() \r\n    public payable {\r\n    }\r\n\r\n    /// @notice Withdraw any accumulated question fees from the specified address into this contract\r\n    /// @dev Funds can then be liberated from this contract with our withdraw() function\r\n    function callWithdraw() \r\n        onlyOwner \r\n    public {\r\n        realitycheck.withdraw(); \r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"realitycheck\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setDisputeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"question_id\",\"type\":\"bytes32\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setCustomDisputeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setQuestionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setRealityCheck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"arbitration_bounties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"question_id\",\"type\":\"bytes32\"}],\"name\":\"getDisputeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"question_id\",\"type\":\"bytes32\"},{\"name\":\"max_previous\",\"type\":\"uint256\"}],\"name\":\"requestArbitration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"callWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"question_id\",\"type\":\"bytes32\"},{\"name\":\"answer\",\"type\":\"bytes32\"},{\"name\":\"answerer\",\"type\":\"address\"}],\"name\":\"submitAnswerByArbitrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"question_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"fee_paid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"LogRequestArbitration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"realitycheck\",\"type\":\"address\"}],\"name\":\"LogSetRealityCheck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogSetQuestionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogSetDisputeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"question_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogSetCustomDisputeFee\",\"type\":\"event\"}]","ContractName":"Arbitrator","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://50fc45fc126aa9a60eeb5a564c737780602944a3da92d0c38eb4beeac65e5449"}]}