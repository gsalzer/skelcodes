{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        \r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract TokenERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n    * Constructor function\r\n    *\r\n    * Initializes contract with initial supply tokens to the creator of the contract\r\n    */\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n    * Internal transfer, only can be called by this contract\r\n    *\r\n    * Send `_value` tokens to `_to` from `_from`\r\n    *\r\n    * @param _from Address of the sender\r\n    * @param _to Address of the recipient\r\n    * @param _value the amount to send\r\n    */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n\r\n        // Check for overflows\r\n        require(balanceOf[_to].add(_value) > balanceOf[_to]);\r\n\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n\r\n        // Subtract from the sender\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n\r\n        // Add the same to the recipient\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\r\n    }\r\n\r\n    /**\r\n    * Transfer tokens\r\n    *\r\n    * Send `_value` tokens to `_to` from your account\r\n    *\r\n    * @param _to The address of the recipient\r\n    * @param _value the amount to send\r\n    */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * Transfer tokens from other address\r\n    *\r\n    * Send `_value` tokens to `_to` in behalf of `_from`\r\n    *\r\n    * @param _from The address of the sender\r\n    * @param _to The address of the recipient\r\n    * @param _value the amount to send\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        //allowance[_from][msg.sender] -= _value;\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Set allowance for other address\r\n    *\r\n    * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n    *\r\n    * @param _spender The address authorized to spend\r\n    * @param _value the max amount they can spend\r\n    */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Set allowance for other address and notify\r\n    *\r\n    * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n    *\r\n    * @param _spender The address authorized to spend\r\n    * @param _value the max amount they can spend\r\n    * @param _extraData some extra information to send to the approved contract\r\n    */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\t\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n/******************************************/\r\n/*       ADVANCED TOKEN STARTS HERE       */\r\n/******************************************/\r\ncontract ICONIC_NIC is Ownable, TokenERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => bool)    public  frozenAccount;\r\n    mapping (address => uint256) public freezingPeriod; // how many days the account must remain frozen?\r\n\r\n    mapping (address => bool) public exchangesAccounts;\r\n\r\n    address public bountyManagerAddress; //bounty manager address\r\n    address public bountyManagerDistributionContract = 0x0; // bounty distributor smart contract address\r\n\r\n    address public fundAccount; \t// ballast fund address\r\n    bool public isSetFund = false;\t// if ballast fund is set\r\n\r\n    uint256 public creationDate;\r\n\r\n    uint256 public constant frozenDaysForAdvisor       = 186;  \r\n    uint256 public constant frozenDaysForBounty        = 186;\r\n    uint256 public constant frozenDaysForEarlyInvestor = 51;\r\n    uint256 public constant frozenDaysForICO           = 65;   \r\n    uint256 public constant frozenDaysForPartner       = 369;\r\n    uint256 public constant frozenDaysForPreICO        = 51;\r\n\r\n    /**\r\n    * allowed for a bounty manager account only\r\n    */\r\n    modifier onlyBountyManager(){\r\n        require((msg.sender == bountyManagerDistributionContract) || (msg.sender == bountyManagerAddress));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * allowed for a fund account only\r\n    */\r\n    modifier onlyFund(){\r\n        require(msg.sender == fundAccount);\r\n        _;\r\n    }\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /**\r\n    * Initializes contract with initial supply tokens to the creator of the contract\r\n    */\r\n    function ICONIC_NIC(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public \r\n    {\r\n        /* solium-disable-next-line */\r\n        creationDate = now;\r\n\r\n        // PARTNERS DISTRIBUTION\r\n        _initializeAccount(0x85abeD924205bbE4D32077E596e45B9F40AAF8d9, frozenDaysForPartner, 2115007);\r\n        _initializeAccount(0xf7817F08C2660970014a086a4Ba679636e73E8ef, frozenDaysForPartner, 8745473);\r\n        _initializeAccount(0x2c208677f8BAB9c6A44bBe3554f36d2440C9b6C2, frozenDaysForPartner, 3498189);\r\n        _initializeAccount(0x3689B9a43ab904D70f396B2A27DDac0E5885CF68, frozenDaysForPartner, 26236419);\r\n        _initializeAccount(0x245B058C8c256D011742aF5Faa296198735eE0Ee, frozenDaysForPartner, 211501);\r\n        _initializeAccount(0xeEFA9f8f39aaF1d1Ed160Ac2465e937A8F154182, frozenDaysForPartner, 1749095);\r\n\r\n        // EARLY INVESTOR DISTRIBUTION\r\n        _initializeAccount(0x4718bB26bCE82459913aaCA09a006Daa517F1c0E, frozenDaysForEarlyInvestor, 225000);\r\n        _initializeAccount(0x8cC1d930e685c977EFcEf9dc412D3ADbE11B84c1, frozenDaysForEarlyInvestor, 2678100);\r\n\r\n        // ADVISOR DISTRIBUTION\r\n        _initializeAccount(0x272c41b76Bad949739839E6BB5Eb9f2B0CDFD95D, frozenDaysForAdvisor, 1057503);\r\n        _initializeAccount(0x3a5cd9E7ccFE4DD5484335F3AF30CCAba95D07C3, frozenDaysForAdvisor, 528752);\r\n        _initializeAccount(0xA10CC5321E834c41137f2150A9b0f2Aa1c5016, frozenDaysForAdvisor, 1057503);\r\n        _initializeAccount(0x59B640c5663E5e79Ce9F68EBbC28454490DbA7B8, frozenDaysForAdvisor, 1057503);\r\n        _initializeAccount(0xdCA69FbfEFf48851ceC91B57610FA60ABc27Af3B, frozenDaysForAdvisor, 3172510);\r\n        _initializeAccount(0x332526F0082d4d385F9Ef393841f44c1bf813D8c, frozenDaysForAdvisor, 3172510);\r\n        _initializeAccount(0xf6B436cBB177777A170819128EbBeF0715101eA2, frozenDaysForAdvisor, 1275000);\r\n        _initializeAccount(0xB76a63Fa7658aD0480986e609b9d5b1f1b6B53b9, frozenDaysForAdvisor, 1487500);\r\n        _initializeAccount(0x2bC240bc0D28725dF790706da7663413ac8Fa5ee, frozenDaysForAdvisor, 2125000);\r\n        _initializeAccount(0x32Aa02961fa15e74D896C45A428E5d1884af2217, frozenDaysForAdvisor, 1057503);\r\n        _initializeAccount(0x5340EC716a00Db16a9C289369e4b30ae897C25d3, frozenDaysForAdvisor, 1586255);\r\n        _initializeAccount(0x39d6FDB4B0f8dfE39EC0b4fE5Dd9B2f66e30f8D1, frozenDaysForAdvisor, 846003);\r\n        _initializeAccount(0xCe438C52D95ee47634f9AeE36de5488D0d5D0FBd, frozenDaysForAdvisor, 250000);\r\n\r\n        // BOUNTY DISTRIBUTION\r\n        bountyManagerAddress = 0xA9939938e6BAcC0b748045be80FD9E958898eB79;\r\n        _initializeAccount(bountyManagerAddress, frozenDaysForBounty, 15000000);\r\n    }\r\n\r\n    /**\r\n    * Only owner function to set ballast fund account address\r\n    * \r\n    * @dev it can be set only once\r\n    * @param _address smart contract address of ballast fund\r\n    */\r\n    function setFundAccount(address _address) onlyOwner public{\r\n        require (_address != 0x0);\r\n        require (!isSetFund);\r\n        fundAccount = _address;\r\n        isSetFund = true;    \r\n    }\r\n\r\n    /**\r\n    * Only owner function to add Exchange Accounts\r\n    *\r\n    * @param _address Exchange address\r\n    */\r\n    function addExchangeTestAccounts(address _address) onlyOwner public{\r\n        require(_address != 0x0);\r\n        exchangesAccounts[_address] = true;\r\n    }\r\n\r\n    /**\r\n    * Only owner function to remove Exchange Accounts\r\n    *\r\n    * @param _address Exchange address\r\n    */\r\n    function removeExchangeTestAccounts(address _address) onlyOwner public{\r\n        delete exchangesAccounts[_address];\r\n    }\r\n\r\n    /**\r\n    * Initialize accounts when token deploy occurs\r\n    *\r\n    * initialize `_address` account, with balance equal `_value` and frozen for `_frozenDays`\r\n    *\r\n    * @param _address wallet address to initialize\r\n    * @param _frozenDays quantity of days to freeze account\r\n    * @param _value quantity of tokens to send to account\r\n    */\r\n    function _initializeAccount(address _address, uint _frozenDays, uint _value) internal{\r\n        _transfer(msg.sender, _address, _value * 10 ** uint256(decimals));\r\n        freezingPeriod[_address] = _frozenDays;\r\n        _freezeAccount(_address, true);\r\n    }\r\n\r\n    /**\r\n    * Check if account freezing period expired\r\n    *\r\n    * `now` has to be greater or equal than `creationDate` + `freezingPeriod[_address]` * `1 day`\r\n    *\r\n    * @param _address account address to check if allowed to transfer tokens\r\n    * @return bool true if is allowed to transfer and false if not\r\n    */\r\n    function _isTransferAllowed( address _address ) view public returns (bool)\r\n    {\r\n        /* solium-disable-next-line */\r\n        if( now >= creationDate + freezingPeriod[_address] * 1 days ){\r\n            return ( true );\r\n        } else {\r\n            return ( false );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Internal function to transfer tokens\r\n    *\r\n    * @param _from account to withdraw tokens\r\n    * @param _to account to receive tokens\r\n    * @param _value quantity of tokens to transfer\r\n    */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);                                  // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceOf[_from] >= _value);                  // Check if the sender has enough\r\n        require (balanceOf[_to].add(_value) > balanceOf[_to]); // Check for overflows\r\n\r\n        // check if the sender is under a freezing period\r\n        if(_isTransferAllowed(_from)){ \r\n            _setFreezingPeriod(_from, false, 0);\r\n        }\r\n\r\n        // check if the recipient is under a freezing period\r\n        if(_isTransferAllowed(_to)){\r\n            _setFreezingPeriod(_to, false, 0);\r\n        }\r\n\r\n        require(!frozenAccount[_from]);     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);       // Check if recipient is frozen                \r\n        \r\n        balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\r\n\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n    \r\n    /**\r\n    * Internal function to deliver tokens for bounty, pre-ICO or ICO with determined freezing periods\r\n    *\r\n    * @param _from account address to withdraw tokens\r\n    * @param _to account address to send tokens\r\n    * @param _value quantity of tokes to send\r\n    * @param _frozenDays quantity of days to freeze account\r\n    */\r\n    function _tokenDelivery(address _from, address _to, uint _value, uint _frozenDays) internal {\r\n        freezingPeriod[_to] = 0;\r\n        _freezeAccount(_to, false);\r\n        _transfer(_from, _to, _value);\r\n        freezingPeriod[_to] = _frozenDays;\r\n        _freezeAccount(_to, true); \r\n    }\r\n    \r\n    /**\r\n    * Only owner function to deliver tokens for pre-ICO investors\r\n    *\r\n    * @param _to account address who will receive the tokens\r\n    * @param _value quantity of tokens to deliver\r\n    */\r\n    function preICOTokenDelivery(address _to, uint _value) onlyOwner public {\r\n        _tokenDelivery(msg.sender, _to, _value, frozenDaysForPreICO);\r\n    }\r\n    \r\n    /**\r\n    * Only owner function to deliver tokens for ICO investors\r\n    *\r\n    * @param _to account address who will receive tokens\r\n    * @param _value quantity of tokens to deliver\r\n    */\r\n    function ICOTokenDelivery(address _to, uint _value) onlyOwner public {\r\n        _tokenDelivery(msg.sender, _to, _value, frozenDaysForICO);\r\n    }\r\n    \r\n    function setBountyDistributionContract(address _contractAddress) onlyOwner public {\r\n        bountyManagerDistributionContract = _contractAddress;\r\n    }\r\n\r\n    /**\r\n    * Only bounty manager distribution contract function to deliver tokens for bounty community\r\n    *\r\n    * @param _to account addres who will receive tokens\r\n    * @param _value quantity of tokens to deliver\r\n    */\r\n    function bountyTransfer(address _to, uint _value) onlyBountyManager public {\r\n        _freezeAccount(bountyManagerAddress, false);\r\n        _tokenDelivery(bountyManagerAddress, _to, _value, frozenDaysForBounty);\r\n        _freezeAccount(bountyManagerAddress, true);\r\n    }\r\n\r\n    /**\r\n    * Function to get days to unfreeze some account\r\n    *\r\n    * @param _address account address to get days\r\n    * @return result quantity of days to unfreeze `address`\r\n    */\r\n    function daysToUnfreeze(address _address) public view returns (uint256) {\r\n        require(_address != 0x0);\r\n\r\n        /* solium-disable-next-line */\r\n        uint256 _now = now;\r\n        uint256 result = 0;\r\n\r\n        if( _now <= creationDate + freezingPeriod[_address] * 1 days ) {\r\n            // still under the freezing period.\r\n            uint256 finalPeriod = (creationDate + freezingPeriod[_address] * 1 days) / 1 days;\r\n            uint256 currePeriod = _now / 1 days;\r\n            result = finalPeriod - currePeriod;\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    * @param target Address to be frozen\r\n    * @param freeze either to freeze it or not\r\n    */\r\n    function _freezeAccount(address target, bool freeze) internal {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    /**\r\n    * Only owner function to call `_freezeAccount` directly\r\n    *\r\n    * @param target account address to freeze\r\n    * @param freeze true to freeze account and false to unfreeze\r\n    */\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        _freezeAccount(target, freeze);\r\n    }\r\n    \r\n    /**\r\n    * Internal call to set freezing period for some account\r\n    *\r\n    * @param _target account address to freeze\r\n    * @param _freeze true to freeze account and false to unfreeze\r\n    * @param _days period to keep account frozen\r\n    */\r\n    function _setFreezingPeriod(address _target, bool _freeze, uint256 _days) internal {\r\n        _freezeAccount(_target, _freeze);\r\n        freezingPeriod[_target] = _days;\r\n    }\r\n    \r\n    /**\r\n    * Only owner function to call `_setFreezingPeriod` directly\r\n    *\r\n    * @param _target account address to freeze\r\n    * @param _freeze true to freeze account and false to unfreeze\r\n    * @param _days period to keep account frozen\r\n    */\r\n    function setFreezingPeriod(address _target, bool _freeze, uint256 _days) onlyOwner public {\r\n        _setFreezingPeriod(_target, _freeze, _days);\r\n    }\r\n    \r\n    /**\r\n    * Transfer tokens from other address\r\n    *\r\n    * Send `_value` tokens to `_to` in behalf of `_from`\r\n    *\r\n    * @param _from The address of the sender\r\n    * @param _to The address of the recipient\r\n    * @param _value the amount to send\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        //allowance[_from][msg.sender] -= _value;\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Set allowance for other address\r\n    *\r\n    * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n    *\r\n    * @param _spender The address authorized to spend\r\n    * @param _value the max amount they can spend\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        // check if the sender is under a freezing period\r\n        if( _isTransferAllowed(msg.sender) )  {\r\n            _setFreezingPeriod(msg.sender, false, 0);\r\n        }\r\n        \r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Set allowance for other address and notify\r\n    *\r\n    * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n    *\r\n    * @param _spender The address authorized to spend\r\n    * @param _value the max amount they can spend\r\n    * @param _extraData some extra information to send to the approved contract\r\n    */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        // check if the sender is under a freezing period\r\n        if( _isTransferAllowed(msg.sender) ) {\r\n            _setFreezingPeriod(msg.sender, false, 0);\r\n        }\r\n\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Destroy tokens\r\n    *\r\n    * Remove `_value` tokens from the system irreversibly\r\n    *\r\n    * @param _value the amount of money to burn\r\n    */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        return _burn(msg.sender, _value);\r\n    }\r\n\r\n    /**\r\n    * Internal call to burn tokens\r\n    * \r\n    * @param _from the address to burn tokens\r\n    * @param _value the amount of tokens to burn\r\n    */\r\n    function _burn(address _from, uint256 _value) internal returns (bool success) {\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);            // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Destroy tokens from other account\r\n    *\r\n    * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n    *\r\n    * @param _from the address of to withdraw tokens\r\n    * @param _value the amount of tokens to burn\r\n    */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                                     // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);                         // Check allowance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); // Subtract from the sender's allowance\r\n        return _burn(_from, _value);\r\n    }\r\n\r\n    /**\r\n    * Only ballast fund function to burn tokens from account\r\n    *\r\n    * Allows `fundAccount` burn tokens to send equivalent ether for account that claimed it\r\n    * @param _from account address to burn tokens\r\n    * @param _value quantity of tokens to burn\r\n    */\r\n    function redemptionBurn(address _from, uint256 _value) onlyFund public{\r\n        _burn(_from, _value);\r\n    }   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creationDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ICOTokenDelivery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenDaysForPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenDaysForBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"bountyTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSetFund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenDaysForEarlyInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenDaysForPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"},{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setFreezingPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFundAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addExchangeTestAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyManagerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"redemptionBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenDaysForICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"preICOTokenDelivery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyManagerDistributionContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeExchangeTestAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenDaysForAdvisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"daysToUnfreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_isTransferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangesAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setBountyDistributionContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ICONIC_NIC","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000001dcd6500000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000a49434f4e4943204e49430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034e49430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://7173f914d98da8a236e66af608fbdc70ffb72ac84044db2ec34e327758a241ae"}]}