{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n//compound interest based ponzi coin\r\n\r\ncontract BoomerCoin\r\n{\r\n    string constant public name = \"BoomerCoin\";\r\n    string constant public symbol = \"SSN\";\r\n    uint8 constant public decimals = 5;\r\n    \r\n    mapping(address => uint) public initialBalance;\r\n    mapping(address => uint) public boughtTime;\r\n    \r\n    uint constant public buyPrice = 12 szabo; //20% higher than the sell price, it takes 6.4 hours to break even\r\n    uint constant public sellPrice = 10 szabo;\r\n\r\n    uint constant public Q = 35; //interest rate of 2.85%, ((1/2.85)*100, see fracExp)\r\n\r\n    function BoomerCoin() public {\r\n        //0.83 ether premine for myself\r\n        initialBalance[msg.sender] = 1 ether / buyPrice;\r\n        boughtTime[msg.sender] = now;\r\n    }\r\n\r\n    //calc geometric growth\r\n    //taken from https://ethereum.stackexchange.com/questions/35819/how-do-you-calculate-compound-interest-in-solidity/38078#38078\r\n    function fracExp(uint k, uint q, uint n, uint p) internal pure returns (uint) {\r\n        uint s = 0;\r\n        uint N = 1;\r\n        uint B = 1;\r\n        for (uint i = 0; i < p; ++i){\r\n            s += k * N / B / (q**i);\r\n            N  = N * (n-i);\r\n            B  = B * (i+1);\r\n        }\r\n        return s;\r\n    }\r\n\r\n    //grant tokens according to the buy price\r\n    function fund() payable public returns (uint) {\r\n        require(msg.value > 0.000001 ether);\r\n        require(msg.value < 200 ether);\r\n\r\n        uint tokens = div(msg.value, buyPrice);\r\n        initialBalance[msg.sender] = add(balanceOf(msg.sender), tokens);\r\n\r\n        //reset compounding time\r\n        boughtTime[msg.sender] = now;\r\n\r\n        return tokens;\r\n    }\r\n\r\n    function balanceOf(address addr) public constant returns (uint) {\r\n\r\n        uint elapsedHours;\r\n\r\n        if (boughtTime[addr] == 0) {\r\n            elapsedHours = 0;\r\n        }\r\n        else {\r\n            elapsedHours = sub(now, boughtTime[addr]) / 60 / 60;\r\n\r\n            //technically impossible, but still. defensive code\r\n            if (elapsedHours < 0) {\r\n                elapsedHours = 0;\r\n            }\r\n            else if (elapsedHours > 1000) {\r\n                //set cap of 1000 hours (41 days), inflation is beyond runaway at that point with this interest rate\r\n                elapsedHours = 1000;\r\n            }\r\n        }\r\n\r\n        uint amount = fracExp(initialBalance[addr], Q, elapsedHours, 8);\r\n\r\n         //this should never happen, but make sure balance never goes negative\r\n        if (amount < 0) amount = 0;\r\n\r\n        return amount;\r\n    }\r\n    \r\n    function epoch() public constant returns (uint) {\r\n        return now;\r\n    }\r\n\r\n    //sell tokens back to the contract for wei\r\n    function sell(uint tokens) public {\r\n\r\n        uint tokensAvailable = balanceOf(msg.sender);\r\n\r\n        require(tokens > 0);\r\n        require(this.balance > 0); //make sure the contract is solvent\r\n        require(tokensAvailable > 0);\r\n        require(tokens <= tokensAvailable);\r\n\r\n        uint weiRequested = mul(tokens, sellPrice);\r\n\r\n        if (weiRequested > this.balance) {          //if this sell will make the contract insolvent\r\n\r\n            //we still have leftover tokens even if the contract is insolvent\r\n            uint insolventWei = sub(weiRequested, this.balance);\r\n            uint remainingTokens = div(insolventWei, sellPrice);\r\n\r\n            //update user's token balance\r\n            initialBalance[msg.sender] = remainingTokens;\r\n\r\n            //reset compound interest time\r\n            boughtTime[msg.sender] = now;\r\n\r\n            msg.sender.transfer(this.balance);      //send the entire balance\r\n        }\r\n        else {\r\n            //reset compound interest time\r\n            boughtTime[msg.sender] = now;\r\n\r\n            //update user's token balance\r\n            initialBalance[msg.sender] = sub(tokensAvailable, tokens);\r\n            msg.sender.transfer(weiRequested);\r\n        }\r\n    }\r\n\r\n    //sell entire token balance\r\n    function getMeOutOfHere() public {\r\n        uint amount = balanceOf(msg.sender);\r\n        sell(amount);\r\n    }\r\n\r\n    //in case anyone sends money directly to the contract\r\n    function() payable public {\r\n        fund();\r\n    }\r\n\r\n    //functions pulled from the SafeMath library to avoid overflows\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMeOutOfHere\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"boughtTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Q\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BoomerCoin","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9beaca18d5fc36f364da6851df427049397094d4927775f1d88a545f6cad3f3c"}]}