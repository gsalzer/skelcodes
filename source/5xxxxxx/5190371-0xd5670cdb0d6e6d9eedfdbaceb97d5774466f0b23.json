{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract InterfaceContentCreatorUniverse {\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price);\r\n  function getNextPrice(uint price, uint _tokenId) public pure returns (uint);\r\n  function lastSubTokenBuyerOf(uint tokenId) public view returns(address);\r\n  function lastSubTokenCreatorOf(uint tokenId) public view returns(address);\r\n\r\n  //\r\n  function createCollectible(uint256 tokenId, uint256 _price, address creator, address owner) external ;\r\n}\r\n\r\ncontract InterfaceYCC {\r\n  function payForUpgrade(address user, uint price) external  returns (bool success);\r\n  function mintCoinsForOldCollectibles(address to, uint256 amount, address universeOwner) external  returns (bool success);\r\n  function tradePreToken(uint price, address buyer, address seller, uint burnPercent, address universeOwner) external;\r\n  function payoutForMining(address user, uint amount) external;\r\n  uint256 public totalSupply;\r\n}\r\n\r\ncontract InterfaceMining {\r\n  function createMineForToken(uint tokenId, uint level, uint xp, uint nextLevelBreak, uint blocknumber) external;\r\n  function payoutMining(uint tokenId, address owner, address newOwner) external;\r\n  function levelUpMining(uint tokenId) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Owned {\r\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n  address private newCeoAddress;\r\n  address private newCooAddress;\r\n\r\n\r\n  function Owned() public {\r\n      ceoAddress = msg.sender;\r\n      cooAddress = msg.sender;\r\n  }\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require(\r\n      msg.sender == ceoAddress ||\r\n      msg.sender == cooAddress\r\n    );\r\n    _;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n    newCeoAddress = _newCEO;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\r\n  /// @param _newCOO The address of the new COO\r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n    newCooAddress = _newCOO;\r\n  }\r\n\r\n  function acceptCeoOwnership() public {\r\n      require(msg.sender == newCeoAddress);\r\n      require(address(0) != newCeoAddress);\r\n      ceoAddress = newCeoAddress;\r\n      newCeoAddress = address(0);\r\n  }\r\n\r\n  function acceptCooOwnership() public {\r\n      require(msg.sender == newCooAddress);\r\n      require(address(0) != newCooAddress);\r\n      cooAddress = newCooAddress;\r\n      newCooAddress = address(0);\r\n  }\r\n\r\n  mapping (address => bool) public youCollectContracts;\r\n  function addYouCollectContract(address contractAddress, bool active) public onlyCOO {\r\n    youCollectContracts[contractAddress] = active;\r\n  }\r\n  modifier onlyYCC() {\r\n    require(youCollectContracts[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  InterfaceYCC ycc;\r\n  InterfaceContentCreatorUniverse yct;\r\n  InterfaceMining ycm;\r\n  function setMainYouCollectContractAddresses(address yccContract, address yctContract, address ycmContract, address[] otherContracts) public onlyCOO {\r\n    ycc = InterfaceYCC(yccContract);\r\n    yct = InterfaceContentCreatorUniverse(yctContract);\r\n    ycm = InterfaceMining(ycmContract);\r\n    youCollectContracts[yccContract] = true;\r\n    youCollectContracts[yctContract] = true;\r\n    youCollectContracts[ycmContract] = true;\r\n    for (uint16 index = 0; index < otherContracts.length; index++) {\r\n      youCollectContracts[otherContracts[index]] = true;\r\n    }\r\n  }\r\n  function setYccContractAddress(address yccContract) public onlyCOO {\r\n    ycc = InterfaceYCC(yccContract);\r\n    youCollectContracts[yccContract] = true;\r\n  }\r\n  function setYctContractAddress(address yctContract) public onlyCOO {\r\n    yct = InterfaceContentCreatorUniverse(yctContract);\r\n    youCollectContracts[yctContract] = true;\r\n  }\r\n  function setYcmContractAddress(address ycmContract) public onlyCOO {\r\n    ycm = InterfaceMining(ycmContract);\r\n    youCollectContracts[ycmContract] = true;\r\n  }\r\n\r\n}\r\n\r\ncontract TransferInterfaceERC721YC {\r\n  function transferToken(address to, uint256 tokenId) public returns (bool success);\r\n}\r\ncontract TransferInterfaceERC20 {\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol\r\n// ----------------------------------------------------------------------------\r\ncontract YouCollectBase is Owned {\r\n  using SafeMath for uint256;\r\n\r\n  event RedButton(uint value, uint totalSupply);\r\n\r\n  // Payout\r\n  function payout(address _to) public onlyCLevel {\r\n    _payout(_to, this.balance);\r\n  }\r\n  function payout(address _to, uint amount) public onlyCLevel {\r\n    if (amount>this.balance)\r\n      amount = this.balance;\r\n    _payout(_to, amount);\r\n  }\r\n  function _payout(address _to, uint amount) private {\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(amount);\r\n    } else {\r\n      _to.transfer(amount);\r\n    }\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Owner can transfer out any accidentally sent ERC20 tokens\r\n  // ------------------------------------------------------------------------\r\n  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyCEO returns (bool success) {\r\n      return TransferInterfaceERC20(tokenAddress).transfer(ceoAddress, tokens);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\ncontract YouCollectCoins is YouCollectBase {\r\n\r\n  //\r\n  //  ERC20 \r\n  //\r\n    /*** CONSTANTS ***/\r\n    string public constant NAME = \"YouCollectCoin\";\r\n    string public constant SYMBOL = \"YCC\";\r\n    uint8 public constant DECIMALS = 18;  \r\n\r\n    uint256 public totalSupply;\r\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    bool allowTransfer;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function YouCollectCoins() {\r\n      addYouCollectContract(msg.sender, true);\r\n    }\r\n\r\n    /// @dev Required for ERC-20 compliance.\r\n    function name() public pure returns (string) {\r\n      return NAME;\r\n    }\r\n\r\n    /// @dev Required for ERC-20 compliance.\r\n    function symbol() public pure returns (string) {\r\n      return SYMBOL;\r\n    }\r\n    /// @dev Required for ERC-20 compliance.\r\n    function decimals() public pure returns (uint8) {\r\n      return DECIMALS;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(allowTransfer);\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(allowTransfer);\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowance >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        if (allowance < MAX_UINT256) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(allowTransfer);\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        require(allowTransfer);\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }   \r\n  //\r\n  //\r\n\r\n\r\n  //\r\n  // Coin sale controlled by external smart contract\r\n  //\r\n    bool public coinSaleStarted;\r\n    address public mintableAddress;\r\n    uint public totalTokenSellAmount;\r\n    function mintCoins(address to, uint256 amount) external returns (bool success) {\r\n      require(coinSaleStarted);\r\n      require(msg.sender == mintableAddress);\r\n      require(balances[this] >= amount);\r\n      balances[this] -= amount;\r\n      balances[to] += amount;\r\n      uint bonus = amount.div(100);\r\n      address universeOwner = yct.ownerOf(0);\r\n      balances[universeOwner] += bonus;\r\n      totalSupply += bonus;\r\n      Transfer(this, to, amount);\r\n      Transfer(address(0), universeOwner, bonus);\r\n      return true;\r\n    }\r\n    function startCoinSale(uint totalTokens, address sellingContractAddress) public onlyCEO {\r\n      require(!coinSaleStarted);\r\n      totalTokenSellAmount = totalTokens;\r\n      mintableAddress = sellingContractAddress;\r\n    }\r\n    function acceptCoinSale() public onlyCEO {\r\n      coinSaleStarted = true;\r\n      balances[this] = totalTokenSellAmount;\r\n      totalSupply += totalTokenSellAmount;\r\n    }\r\n    function changeTransfer(bool allowTransfers) external {\r\n        require(msg.sender == mintableAddress);\r\n        allowTransfer = allowTransfers;\r\n    }\r\n  //\r\n  //\r\n\r\n\r\n  function mintCoinsForOldCollectibles(address to, uint256 amount, address universeOwner) external onlyYCC returns (bool success) {\r\n    balances[to] += amount;\r\n    uint bonus = amount.div(100);\r\n    balances[universeOwner] += bonus;\r\n    totalSupply += amount + bonus;\r\n    Transfer(address(0), to, amount);\r\n    Transfer(address(0), universeOwner, amount);\r\n    return true;\r\n  }\r\n\r\n  function payForUpgrade(address user, uint price) external onlyYCC returns (bool success) {\r\n    require(balances[user] >= price);\r\n    balances[user] -= price;\r\n    totalSupply -= price;\r\n    Transfer(user, address(0), price);\r\n    return true;\r\n  }\r\n\r\n  function payoutForMining(address user, uint amount) external onlyYCC {\r\n    balances[user] += amount;\r\n    totalSupply += amount;\r\n    Transfer(address(0), user, amount);\r\n  }\r\n\r\n  function tradePreToken(uint price, address buyer, address seller, uint burnPercent, address universeOwner) external onlyYCC {\r\n    require(balances[buyer] >= price);\r\n    balances[buyer] -= price;\r\n    if (seller != address(0)) {\r\n      uint256 onePercent = price.div(100);\r\n      uint256 payment = price.sub(onePercent.mul(burnPercent+1));\r\n      // Payment for old owner\r\n      balances[seller] += payment;\r\n      totalSupply -= onePercent.mul(burnPercent);\r\n      balances[universeOwner] += onePercent;\r\n      Transfer(buyer, seller, payment);\r\n      Transfer(buyer, universeOwner, onePercent);\r\n    }else {\r\n      totalSupply -= price;\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowTransfers\",\"type\":\"bool\"}],\"name\":\"changeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"youCollectContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yctContract\",\"type\":\"address\"}],\"name\":\"setYctContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"name\":\"sellingContractAddress\",\"type\":\"address\"}],\"name\":\"startCoinSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yccContract\",\"type\":\"address\"}],\"name\":\"setYccContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"universeOwner\",\"type\":\"address\"}],\"name\":\"mintCoinsForOldCollectibles\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"addYouCollectContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptCooOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"payForUpgrade\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSellAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ycmContract\",\"type\":\"address\"}],\"name\":\"setYcmContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinSaleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payoutForMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"burnPercent\",\"type\":\"uint256\"},{\"name\":\"universeOwner\",\"type\":\"address\"}],\"name\":\"tradePreToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yccContract\",\"type\":\"address\"},{\"name\":\"yctContract\",\"type\":\"address\"},{\"name\":\"ycmContract\",\"type\":\"address\"},{\"name\":\"otherContracts\",\"type\":\"address[]\"}],\"name\":\"setMainYouCollectContractAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintCoins\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintableAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptCeoOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptCoinSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"RedButton\",\"type\":\"event\"}]","ContractName":"YouCollectCoins","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://04876f95fe2cb2b27e63cae70a12391f8b8ef3eb389cfd9e3c0990b632d0d754"}]}