{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/// @title Whitelist for TKO token sale.\r\n/// @author Takeoff Technology OU - <info@takeoff.ws>\r\n/// @dev Based on code by OpenZeppelin's WhitelistedCrowdsale.sol\r\ncontract TkoWhitelist is Ownable{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Manage whitelist account address.\r\n    address public admin;\r\n\r\n    mapping(address => uint256) internal totalIndividualWeiAmount;\r\n    mapping(address => bool) internal whitelist;\r\n\r\n    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\r\n\r\n\r\n    /**\r\n     * TkoWhitelist\r\n     * @dev TkoWhitelist is the storage for whitelist and total amount by contributor's address.\r\n     * @param _admin Address of managing whitelist.\r\n     */\r\n    function TkoWhitelist (address _admin) public {\r\n        require(_admin != address(0));\r\n        admin = _admin;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner or the admin.\r\n     */\r\n    modifier onlyOwnerOrAdmin() {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to change administrator account of the contract to a newAdmin.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function changeAdmin(address newAdmin) public onlyOwner {\r\n        require(newAdmin != address(0));\r\n        emit AdminChanged(admin, newAdmin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n\r\n    /**\r\n      * @dev Returen whether the beneficiary is whitelisted.\r\n      */\r\n    function isWhitelisted(address _beneficiary) external view onlyOwnerOrAdmin returns (bool) {\r\n        return whitelist[_beneficiary];\r\n    }\r\n\r\n    /**\r\n     * @dev Adds single address to whitelist.\r\n     * @param _beneficiary Address to be added to the whitelist\r\n     */\r\n    function addToWhitelist(address _beneficiary) external onlyOwnerOrAdmin {\r\n        whitelist[_beneficiary] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds list of addresses to whitelist.\r\n     * @param _beneficiaries Addresses to be added to the whitelist\r\n     */\r\n    function addManyToWhitelist(address[] _beneficiaries) external onlyOwnerOrAdmin {\r\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n            whitelist[_beneficiaries[i]] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes single address from whitelist.\r\n     * @param _beneficiary Address to be removed to the whitelist\r\n     */\r\n    function removeFromWhitelist(address _beneficiary) external onlyOwnerOrAdmin {\r\n        whitelist[_beneficiary] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Return total individual wei amount.\r\n     * @param _beneficiary Addresses to get total wei amount .\r\n     * @return Total wei amount for the address.\r\n     */\r\n    function getTotalIndividualWeiAmount(address _beneficiary) external view onlyOwnerOrAdmin returns (uint256) {\r\n        return totalIndividualWeiAmount[_beneficiary];\r\n    }\r\n\r\n    /**\r\n     * @dev Set total individual wei amount.\r\n     * @param _beneficiary Addresses to set total wei amount.\r\n     * @param _totalWeiAmount Total wei amount for the address.\r\n     */\r\n    function setTotalIndividualWeiAmount(address _beneficiary,uint256 _totalWeiAmount) external onlyOwner {\r\n        totalIndividualWeiAmount[_beneficiary] = _totalWeiAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Add total individual wei amount.\r\n     * @param _beneficiary Addresses to add total wei amount.\r\n     * @param _weiAmount Total wei amount to be added for the address.\r\n     */\r\n    function addTotalIndividualWeiAmount(address _beneficiary,uint256 _weiAmount) external onlyOwner {\r\n        totalIndividualWeiAmount[_beneficiary] = totalIndividualWeiAmount[_beneficiary].add(_weiAmount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getTotalIndividualWeiAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"addTotalIndividualWeiAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_totalWeiAmount\",\"type\":\"uint256\"}],\"name\":\"setTotalIndividualWeiAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addManyToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TkoWhitelist","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d2a368fe98d855a8d631c3ac9ad5ce5f590f1883","Library":"","SwarmSource":"bzzr://442bb51b9d398365ab5d4bf183c633ac40942a76345bbe87def79adad3048124"}]}