{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    modifier onlyOwner() { require(msg.sender == owner); _; }\r\n    function Ownable() public { \r\n\t    owner = msg.sender; \r\n\t\t}\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(this));\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(owner, newOwner);\r\n    }\r\n}\r\ncontract bjTest is Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 public JoustNum = 1; \r\n    uint256 public NumberOfPart = 0; \r\n    uint256 public Commission = 0.024 * 1 ether; \r\n    uint256 public RateEth = 0.3 * 1 ether; \r\n    uint256 public TotalRate = 2.4 * 1 ether; \r\n    struct BJJtab { \r\n        uint256 JoustNumber;\r\n        uint256 UserNumber;       \r\n        address UserAddress; \r\n        uint256 CoincidNum;   \r\n        uint256 Winning; \r\n    }\r\n    mapping(uint256 => mapping(uint256 => BJJtab)) public BJJtable; \r\n    struct BJJraundHis{\r\n        uint256 JoustNum; \r\n        uint256 CapAmouth; \r\n        uint256 BetOverlap; \r\n        string Cap1;\r\n        string Cap2;\r\n        string Cap3;\r\n    }\r\n    mapping(uint256 => BJJraundHis) public BJJhis;\r\n    uint256 public AllCaptcha = 0; \r\n    uint256 public BetOverlap = 0; \r\n    event BJJraund (uint256 UserNum, address User, uint256 CoincidNum, uint256 Winning);\r\n    event BJJhist (uint256 JoustNum, uint256 CapAllAmouth, uint256 CapPrice, string Cap1, string Cap2, string Cap3);\r\n    /*Всупление в игру*/\r\n    function ApushJoustUser(address _address) public onlyOwner{       \r\n        NumberOfPart += 1;      \r\n        BJJtable[JoustNum][NumberOfPart].JoustNumber = JoustNum;\r\n        BJJtable[JoustNum][NumberOfPart].UserNumber = NumberOfPart; \r\n        BJJtable[JoustNum][NumberOfPart].UserAddress = _address;\r\n        BJJtable[JoustNum][NumberOfPart].CoincidNum = 0;\r\n        BJJtable[JoustNum][NumberOfPart].Winning = 0; \r\n        if(NumberOfPart == 8){\r\n            toAsciiString();\r\n            NumberOfPart = 0;\r\n            JoustNum += 1;\r\n            AllCaptcha = 0;\r\n        }\r\n    }\r\n    function ArJoust(uint256 _n, uint256 _n2) public view returns(uint256){\r\n        //var Tab = BJJtable[_n][_n2];\r\n        return BJJtable[_n][_n2].CoincidNum;\r\n    }    \r\n    string public Ast;\r\n    string public Bst;\r\n    string public Cst;\r\n    uint256 public  captcha = 0;     \r\n    uint public gasprice = tx.gasprice;\r\n    uint public blockdif = block.difficulty;\r\n    function substring(string str, uint startIndex, uint endIndex, uint256 Jnum, uint256 Usnum) public returns (string) {\r\n    bytes memory strBytes = bytes(str);\r\n    bytes memory result = new bytes(endIndex-startIndex);\r\n    for(uint i = startIndex; i < endIndex; i++) {\r\n        result[i-startIndex] = strBytes[i];\r\n        if(keccak256(strBytes[i]) == keccak256(Ast) || keccak256(strBytes[i]) == keccak256(Bst) || keccak256(strBytes[i]) == keccak256(Cst)){ \r\n            BJJtable[Jnum][Usnum].CoincidNum += 1; \r\n            AllCaptcha += 1;\r\n        }\r\n    }\r\n    return string(result);\r\n    }\r\n    uint256 public Winn;\r\n    function Distribution() public {\r\n\r\n        BetOverlap = (TotalRate - Commission) / AllCaptcha; \r\n        BJJhis[JoustNum].JoustNum = JoustNum;\r\n        BJJhis[JoustNum].CapAmouth = AllCaptcha; \r\n        BJJhis[JoustNum].BetOverlap = BetOverlap; \r\n        BJJhis[JoustNum].Cap1 = Ast;\r\n        BJJhis[JoustNum].Cap2 = Bst;\r\n        BJJhis[JoustNum].Cap3 = Cst;        \r\n        emit BJJhist(JoustNum, AllCaptcha, BetOverlap, Ast, Bst, Cst);         \r\n        for(uint i = 1; i<9; i++){\r\n            BJJtable[JoustNum][i].Winning = BJJtable[JoustNum][i].CoincidNum * BetOverlap;\r\n            Winn = BJJtable[JoustNum][i].Winning;\r\n            emit BJJraund(BJJtable[JoustNum][i].UserNumber, BJJtable[JoustNum][i].UserAddress, BJJtable[JoustNum][i].CoincidNum, Winn);\r\n        }\r\n    }\r\n    function toAsciiString() public returns (string) {\r\n    Random();\r\n    for(uint a = 1; a < 9; a++){  \r\n    address x = BJJtable[JoustNum][a].UserAddress; \r\n    bytes memory s = new bytes(40);\r\n    for (uint i = 0; i < 20; i++) {\r\n        byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\r\n        byte hi = byte(uint8(b) / 16);\r\n        byte lo = byte(uint8(b) - 16 * uint8(hi));\r\n        s[2*i] = char(hi);\r\n        s[2*i+1] = char(lo);            \r\n    }\r\n    substring(string(s), 20, 40, JoustNum, a); \r\n    }\r\n    Distribution();\r\n    return string(s);\r\n    }\r\n\r\n    function char(byte b) public pure returns(byte c) {\r\n        if (b < 10){ return byte(uint8(b) + 0x30); } else {\r\n            return byte(uint8(b) + 0x57); }\r\n    }\r\n    string[] public arrint = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"];\r\n    string[] public arrstr = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"];\r\n    uint256 public randomA;\r\n    uint256 public randomB;\r\n    uint256 public randomC;\r\n    function Random() public{\r\n        randomA = uint256(block.blockhash(block.number-1))%9 + 1; //uint\r\n        randomC = uint256(block.timestamp)%9 +1; //uint\r\n        randomB = uint256(block.timestamp)%5 +1; // str\r\n        Ast = arrint[randomA];\r\n        Cst = arrint[randomC]; \r\n        Bst = arrstr[randomB];\r\n    }   \r\n    function kill() public onlyOwner {\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"Cst\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ApushJoustUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_n\",\"type\":\"uint256\"},{\"name\":\"_n2\",\"type\":\"uint256\"}],\"name\":\"ArJoust\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Commission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BJJtable\",\"outputs\":[{\"name\":\"JoustNumber\",\"type\":\"uint256\"},{\"name\":\"UserNumber\",\"type\":\"uint256\"},{\"name\":\"UserAddress\",\"type\":\"address\"},{\"name\":\"CoincidNum\",\"type\":\"uint256\"},{\"name\":\"Winning\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"captcha\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AllCaptcha\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Winn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Distribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Random\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"b\",\"type\":\"bytes1\"}],\"name\":\"char\",\"outputs\":[{\"name\":\"c\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Bst\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasprice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toAsciiString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BetOverlap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrint\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BJJhis\",\"outputs\":[{\"name\":\"JoustNum\",\"type\":\"uint256\"},{\"name\":\"CapAmouth\",\"type\":\"uint256\"},{\"name\":\"BetOverlap\",\"type\":\"uint256\"},{\"name\":\"Cap1\",\"type\":\"string\"},{\"name\":\"Cap2\",\"type\":\"string\"},{\"name\":\"Cap3\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NumberOfPart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JoustNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockdif\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Ast\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrstr\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"str\",\"type\":\"string\"},{\"name\":\"startIndex\",\"type\":\"uint256\"},{\"name\":\"endIndex\",\"type\":\"uint256\"},{\"name\":\"Jnum\",\"type\":\"uint256\"},{\"name\":\"Usnum\",\"type\":\"uint256\"}],\"name\":\"substring\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RateEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"UserNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"User\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"CoincidNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Winning\",\"type\":\"uint256\"}],\"name\":\"BJJraund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"JoustNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"CapAllAmouth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"CapPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Cap1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"Cap2\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"Cap3\",\"type\":\"string\"}],\"name\":\"BJJhist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"bjTest","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1b16fc4aef648b02d5300402271f6b5c7a2eb6de437a6d35036a6f87555f8d3a"}]}