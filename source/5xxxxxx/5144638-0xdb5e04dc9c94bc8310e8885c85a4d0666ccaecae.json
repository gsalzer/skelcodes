{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n///>[ Crypto Brands ]>>>>\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function implementsERC721() public pure returns (bool);\r\n    function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n    function takeOwnership(uint256 _tokenId) public;\r\n    function totalSupply() public view returns (uint256 total);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n}\r\n\r\ncontract EtherBrand is ERC721 {\r\n\r\n  /*** EVENTS ***/\r\n  event Birth(uint256 tokenId, bytes32 name, address owner);\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, bytes32 name);\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  /*** STRUCTS ***/\r\n  struct Brand {\r\n    bytes32 name;\r\n    address owner;\r\n    uint256 price;\r\n    uint256 last_price;\r\n    address approve_transfer_to;\r\n  }\r\n  \r\n  struct TopOwner {\r\n    address addr;\r\n    uint256 price;\r\n  }\r\n\r\n  /*** CONSTANTS ***/\r\n  string public constant NAME = \"EtherBrands\";\r\n  string public constant SYMBOL = \"EtherBrand\";\r\n  \r\n  bool public gameOpen = false;\r\n\r\n  /*** STORAGE ***/\r\n  mapping (address => uint256) private ownerCount;\r\n  mapping (uint256 => TopOwner) private topOwner;\r\n  mapping (uint256 => address) private lastBuyer;\r\n\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n  address public cfoAddress;\r\n  mapping (uint256 => address) public extra;\r\n  \r\n  uint256 brand_count;\r\n  uint256 lowest_top_brand;\r\n \r\n  mapping (uint256 => Brand) private brands;\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  modifier onlyCEO() { require(msg.sender == ceoAddress); _; }\r\n  modifier onlyCOO() { require(msg.sender == cooAddress); _; }\r\n  modifier onlyCXX() { require(msg.sender == ceoAddress || msg.sender == cooAddress); _; }\r\n\r\n  /*** ACCESS MODIFIES ***/\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n    ceoAddress = _newCEO;\r\n  }\r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n    cooAddress = _newCOO;\r\n  }\r\n  function setCFO(address _newCFO) public onlyCEO {\r\n    require(_newCFO != address(0));\r\n    cfoAddress = _newCFO;\r\n  }\r\n  function setExtra(uint256 _id, address _newExtra) public onlyCXX {\r\n    require(_newExtra != address(0));\r\n    // failsave :3 require(_id <= 2); // 3 = 1 ETH, 4 = 2.5 ETH, 5 = 5 ETH\r\n    extra[_id] = _newExtra;\r\n  }\r\n\r\n  /*** DEFAULT METHODS ***/\r\n  function symbol() public pure returns (string) { return SYMBOL; }\r\n  function name() public pure returns (string) { return NAME; }\r\n  function implementsERC721() public pure returns (bool) { return true; }\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  function EtherBrand() public {\r\n    ceoAddress = msg.sender;\r\n    cooAddress = msg.sender;\r\n    cfoAddress = msg.sender;\r\n    topOwner[1] = TopOwner(msg.sender, 0); // 0.5\r\n    topOwner[2] = TopOwner(msg.sender, 0); // 0.1\r\n    topOwner[3] = TopOwner(msg.sender, 0); // 0.05\r\n    topOwner[4] = TopOwner(msg.sender, 0);\r\n    topOwner[5] = TopOwner(msg.sender, 0);\r\n    lastBuyer[1] = msg.sender;\r\n    lastBuyer[2] = msg.sender;\r\n    lastBuyer[3] = msg.sender;\r\n    extra[1] = msg.sender;\r\n    extra[2] = msg.sender;\r\n    extra[3] = msg.sender;\r\n    extra[4] = msg.sender;\r\n    extra[5] = msg.sender;\r\n  }\r\n\r\n  /*** INTERFACE METHODS ***/\r\n\r\n  function createBrand(bytes32 _name, uint256 _price) public onlyCXX {\r\n    require(msg.sender != address(0));\r\n    _create_brand(_name, address(this), _price, 0);\r\n  }\r\n\r\n  function createPromoBrand(bytes32 _name, address _owner, uint256 _price, uint256 _last_price) public onlyCXX {\r\n    require(msg.sender != address(0));\r\n    require(_owner != address(0));\r\n    _create_brand(_name, _owner, _price, _last_price);\r\n  }\r\n\r\n  function openGame() public onlyCXX {\r\n    require(msg.sender != address(0));\r\n    gameOpen = true;\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return brand_count;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownerCount[_owner];\r\n  }\r\n  function priceOf(uint256 _brand_id) public view returns (uint256 price) {\r\n    return brands[_brand_id].price;\r\n  }\r\n\r\n  function getBrand(uint256 _brand_id) public view returns (\r\n    uint256 id,\r\n    bytes32 brand_name,\r\n    address owner,\r\n    uint256 price,\r\n    uint256 last_price\r\n  ) {\r\n    id = _brand_id;\r\n    brand_name = brands[_brand_id].name;\r\n    owner = brands[_brand_id].owner;\r\n    price = brands[_brand_id].price;\r\n    last_price = brands[_brand_id].last_price;\r\n  }\r\n  \r\n  function getBrands() public view returns (uint256[], bytes32[], address[], uint256[]) {\r\n    uint256[] memory ids = new uint256[](brand_count);\r\n    bytes32[] memory names = new bytes32[](brand_count);\r\n    address[] memory owners = new address[](brand_count);\r\n    uint256[] memory prices = new uint256[](brand_count);\r\n    for(uint256 _id = 0; _id < brand_count; _id++){\r\n      ids[_id] = _id;\r\n      names[_id] = brands[_id].name;\r\n      owners[_id] = brands[_id].owner;\r\n      prices[_id] = brands[_id].price;\r\n    }\r\n    return (ids, names, owners, prices);\r\n  }\r\n  \r\n  function purchase(uint256 _brand_id) public payable {\r\n    require(gameOpen == true);\r\n    Brand storage brand = brands[_brand_id];\r\n\r\n    require(brand.owner != msg.sender);\r\n    require(msg.sender != address(0));\r\n    require(msg.value >= brand.price);\r\n\r\n    uint256 excess = SafeMath.sub(msg.value, brand.price);\r\n    uint256 half_diff = SafeMath.div(SafeMath.sub(brand.price, brand.last_price), 2);\r\n    uint256 reward = SafeMath.add(half_diff, brand.last_price);\r\n\r\n    topOwner[1].addr.transfer(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 15)));  // 15%\r\n    topOwner[2].addr.transfer(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 12)));  // 12%\r\n    topOwner[3].addr.transfer(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 9)));   // 9%\r\n    topOwner[4].addr.transfer(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 5)));   // 5%\r\n    topOwner[5].addr.transfer(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 2)));   // 2% == 43%\r\n  \r\n    lastBuyer[1].transfer(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 20))); // 20%\r\n    lastBuyer[2].transfer(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 15))); // 15%\r\n    lastBuyer[3].transfer(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 10))); // 10% == 45%\r\n  \r\n    extra[1].transfer(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 1)));      // 1%\r\n    extra[2].transfer(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 1)));      // 1%\r\n    extra[3].transfer(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 1)));      // 1%\r\n    extra[4].transfer(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 1)));      // 1%\r\n    extra[5].transfer(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 1)));      // 1%\r\n    \r\n    cfoAddress.transfer(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 6)));    // 6%\r\n    cooAddress.transfer(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 1)));    // 1%\r\n\r\n    if(brand.owner == address(this)){\r\n      cfoAddress.transfer(reward);\r\n    } else {\r\n      brand.owner.transfer(reward);\r\n    }\r\n    \r\n    if(brand.price > topOwner[5].price){\r\n        for(uint8 i = 1; i <= 5; i++){\r\n            if(brand.price > topOwner[(i+1)].price){\r\n                if(i >= 4){ topOwner[5] = topOwner[4]; }\r\n                if(i >= 3){ topOwner[4] = topOwner[3]; }\r\n                if(i >= 2){ topOwner[3] = topOwner[2]; }\r\n                if(i >= 1){ topOwner[2] = topOwner[1]; }\r\n                topOwner[i] = TopOwner(msg.sender, brand.price);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if(extra[3] == ceoAddress && brand.price >= 1000000000000000000){ extra[3] == msg.sender; } // 1 ETH\r\n    if(extra[4] == ceoAddress && brand.price >= 2500000000000000000){ extra[4] == msg.sender; } // 2.5 ETH\r\n    if(extra[5] == ceoAddress && brand.price >= 5000000000000000000){ extra[5] == msg.sender; } // 5 ETH\r\n    \r\n    brand.last_price = brand.price;\r\n    address _old_owner = brand.owner;\r\n    \r\n    if(brand.price < 50000000000000000){ // 0.05\r\n        brand.price = SafeMath.mul(SafeMath.div(brand.price, 100), 150);\r\n    } else {\r\n        brand.price = SafeMath.mul(SafeMath.div(brand.price, 100), 125);\r\n    }\r\n    brand.owner = msg.sender;\r\n\r\n    lastBuyer[3] = lastBuyer[2];\r\n    lastBuyer[2] = lastBuyer[1];\r\n    lastBuyer[1] = msg.sender;\r\n\r\n    Transfer(_old_owner, brand.owner, _brand_id);\r\n    TokenSold(_brand_id, brand.last_price, brand.price, _old_owner, brand.owner, brand.name);\r\n\r\n    msg.sender.transfer(excess);\r\n  }\r\n\r\n  function payout() public onlyCEO {\r\n    cfoAddress.transfer(this.balance);\r\n  }\r\n\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 resultIndex = 0;\r\n      for (uint256 brandId = 0; brandId <= totalSupply(); brandId++) {\r\n        if (brands[brandId].owner == _owner) {\r\n          result[resultIndex] = brandId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /*** ERC-721 compliance. ***/\r\n\r\n  function approve(address _to, uint256 _brand_id) public {\r\n    require(msg.sender == brands[_brand_id].owner);\r\n    brands[_brand_id].approve_transfer_to = _to;\r\n    Approval(msg.sender, _to, _brand_id);\r\n  }\r\n  function ownerOf(uint256 _brand_id) public view returns (address owner){\r\n    owner = brands[_brand_id].owner;\r\n    require(owner != address(0));\r\n  }\r\n  function takeOwnership(uint256 _brand_id) public {\r\n    address oldOwner = brands[_brand_id].owner;\r\n    require(msg.sender != address(0));\r\n    require(brands[_brand_id].approve_transfer_to == msg.sender);\r\n    _transfer(oldOwner, msg.sender, _brand_id);\r\n  }\r\n  function transfer(address _to, uint256 _brand_id) public {\r\n    require(msg.sender != address(0));\r\n    require(msg.sender == brands[_brand_id].owner);\r\n    _transfer(msg.sender, _to, _brand_id);\r\n  }\r\n  function transferFrom(address _from, address _to, uint256 _brand_id) public {\r\n    require(_from == brands[_brand_id].owner);\r\n    require(brands[_brand_id].approve_transfer_to == _to);\r\n    require(_to != address(0));\r\n    _transfer(_from, _to, _brand_id);\r\n  }\r\n\r\n  /*** PRIVATE METHODS ***/\r\n\r\n  function _create_brand(bytes32 _name, address _owner, uint256 _price, uint256 _last_price) private {\r\n    // Params: name, owner, price, is_for_sale, is_public, share_price, increase, fee, share_count,\r\n    brands[brand_count] = Brand({\r\n      name: _name,\r\n      owner: _owner,\r\n      price: _price,\r\n      last_price: _last_price,\r\n      approve_transfer_to: address(0)\r\n    });\r\n    \r\n    Brand storage brand = brands[brand_count];\r\n    \r\n    if(brand.price > topOwner[5].price){\r\n        for(uint8 i = 1; i <= 5; i++){\r\n            if(brand.price > topOwner[(i+1)].price){\r\n                if(i >= 4){ topOwner[5] = topOwner[4]; }\r\n                if(i >= 3){ topOwner[4] = topOwner[3]; }\r\n                if(i >= 2){ topOwner[3] = topOwner[2]; }\r\n                if(i >= 1){ topOwner[2] = topOwner[1]; }\r\n                topOwner[i] = TopOwner(msg.sender, brand.price);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    Birth(brand_count, _name, _owner);\r\n    Transfer(address(this), _owner, brand_count);\r\n    brand_count++;\r\n  }\r\n\r\n  function _transfer(address _from, address _to, uint256 _brand_id) private {\r\n    brands[_brand_id].owner = _to;\r\n    brands[_brand_id].approve_transfer_to = address(0);\r\n    ownerCount[_from] -= 1;\r\n    ownerCount[_to] += 1;\r\n    Transfer(_from, _to, _brand_id);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_brand_id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_brand_id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_newExtra\",\"type\":\"address\"}],\"name\":\"setExtra\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_brand_id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extra\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBrands\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_brand_id\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_brand_id\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_brand_id\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createBrand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_brand_id\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_brand_id\",\"type\":\"uint256\"}],\"name\":\"getBrand\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"brand_name\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"last_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_last_price\",\"type\":\"uint256\"}],\"name\":\"createPromoBrand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EtherBrand","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5f58c871b44f170e93346a84a2d406c6723bef9873fe659990b6ca72610b3a79"}]}