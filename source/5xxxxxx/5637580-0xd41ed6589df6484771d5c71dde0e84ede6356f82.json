{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n// similar to the original shrimper , with these changes:\r\n// 0. already initialized\r\n// 1. the \"free\" 1000 YouTubes cost 0.001 eth (in line with the mining fee)\r\n// 2. Coming to http://CraigGrantShrimper.surge.sh\r\n// 3. bots should have a harder time, and whales can compete for the devfee\r\n\r\ncontract CraigGrantShrimper{\r\n    string public name = \"CraigGrantShrimper\";\r\n\tstring public symbol = \"CGshrimper\";\r\n    //uint256 subscribers_PER_CraigGrant_PER_SECOND=1;\r\n    uint256 public subscribers_TO_HATCH_1CraigGrant=86400;//for final version should be seconds in a day\r\n    uint256 public STARTING_CraigGrant=1000;\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized=true;\r\n    address public ceoAddress;\r\n    mapping (address => uint256) public hatcheryCraigGrant;\r\n    mapping (address => uint256) public claimedsubscribers;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketsubscribers = 1000000000;\r\n    uint256 public YouTubemasterReq=100000;\r\n    \r\n    function CraigGrantShrimper() public{\r\n        ceoAddress=msg.sender;\r\n    }\r\n    modifier onlyCEO(){\r\n\t\trequire(msg.sender == ceoAddress );\r\n\t\t_;\r\n\t}\r\n    function becomeYouTubemaster() public{\r\n        require(initialized);\r\n        require(hatcheryCraigGrant[msg.sender]>=YouTubemasterReq);\r\n        hatcheryCraigGrant[msg.sender]=SafeMath.sub(hatcheryCraigGrant[msg.sender],YouTubemasterReq);\r\n        YouTubemasterReq=SafeMath.add(YouTubemasterReq,100000);//+100k CraigGrants each time\r\n        ceoAddress=msg.sender;\r\n    }\r\n    function hatchsubscribers(address ref) public{\r\n        require(initialized);\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 subscribersUsed=getMysubscribers();\r\n        uint256 newCraigGrant=SafeMath.div(subscribersUsed,subscribers_TO_HATCH_1CraigGrant);\r\n        hatcheryCraigGrant[msg.sender]=SafeMath.add(hatcheryCraigGrant[msg.sender],newCraigGrant);\r\n        claimedsubscribers[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        \r\n        //send referral subscribers\r\n        claimedsubscribers[referrals[msg.sender]]=SafeMath.add(claimedsubscribers[referrals[msg.sender]],SafeMath.div(subscribersUsed,5));\r\n        \r\n        //boost market to nerf CraigGrant hoarding\r\n        marketsubscribers=SafeMath.add(marketsubscribers,SafeMath.div(subscribersUsed,10));\r\n    }\r\n    function sellsubscribers() public{\r\n        require(initialized);\r\n        uint256 hassubscribers=getMysubscribers();\r\n        uint256 eggValue=calculatesubscribersell(hassubscribers);\r\n        uint256 fee=devFee(eggValue);\r\n        claimedsubscribers[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        marketsubscribers=SafeMath.add(marketsubscribers,hassubscribers);\r\n        ceoAddress.transfer(fee);\r\n    }\r\n    function buysubscribers() public payable{\r\n        require(initialized);\r\n        uint256 subscribersBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\r\n        subscribersBought=SafeMath.sub(subscribersBought,devFee(subscribersBought));\r\n        ceoAddress.transfer(devFee(msg.value));\r\n        claimedsubscribers[msg.sender]=SafeMath.add(claimedsubscribers[msg.sender],subscribersBought);\r\n    }\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculatesubscribersell(uint256 subscribers) public view returns(uint256){\r\n        return calculateTrade(subscribers,marketsubscribers,this.balance);\r\n    }\r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth,contractBalance,marketsubscribers);\r\n    }\r\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateEggBuy(eth,this.balance);\r\n    }\r\n    function devFee(uint256 amount) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,4),100);\r\n    }\r\n    function seedMarket(uint256 subscribers) public payable{\r\n        require(marketsubscribers==0);\r\n        initialized=true;\r\n        marketsubscribers=subscribers;\r\n    }\r\n    function getFreeCraigGrant() public payable{\r\n        require(initialized);\r\n        require(msg.value==0.001 ether); //similar to mining fee, prevents bots\r\n        ceoAddress.transfer(msg.value); //YouTubemaster gets this entrance fee\r\n        require(hatcheryCraigGrant[msg.sender]==0);\r\n        lastHatch[msg.sender]=now;\r\n        hatcheryCraigGrant[msg.sender]=STARTING_CraigGrant;\r\n    }\r\n    function getBalance() public view returns(uint256){\r\n        return this.balance;\r\n    }\r\n    function getMyCraigGrant() public view returns(uint256){\r\n        return hatcheryCraigGrant[msg.sender];\r\n    }\r\n    function getYouTubemasterReq() public view returns(uint256){\r\n        return YouTubemasterReq;\r\n    }\r\n    function getMysubscribers() public view returns(uint256){\r\n        return SafeMath.add(claimedsubscribers[msg.sender],getsubscribersSinceLastHatch(msg.sender));\r\n    }\r\n    function getsubscribersSinceLastHatch(address adr) public view returns(uint256){\r\n        uint256 secondsPassed=min(subscribers_TO_HATCH_1CraigGrant,SafeMath.sub(now,lastHatch[adr]));\r\n        return SafeMath.mul(secondsPassed,hatcheryCraigGrant[adr]);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n    function transferOwnership() onlyCEO public {\r\n\t\tuint256 etherBalance = this.balance;\r\n\t\tceoAddress.transfer(etherBalance);\r\n\t}\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedsubscribers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getYouTubemasterReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"subscribers\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketsubscribers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchsubscribers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buysubscribers\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellsubscribers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryCraigGrant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getsubscribersSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMysubscribers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"becomeYouTubemaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_CraigGrant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFreeCraigGrant\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyCraigGrant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YouTubemasterReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"subscribers_TO_HATCH_1CraigGrant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscribers\",\"type\":\"uint256\"}],\"name\":\"calculatesubscribersell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CraigGrantShrimper","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0143a546ab2b1d4b6dfe64ec86cc8a5de4734d23e7787df19013d01057f08aa4"}]}