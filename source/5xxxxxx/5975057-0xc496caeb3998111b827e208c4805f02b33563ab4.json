{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// File: contracts/ExchangeHandler.sol\r\n\r\n/// @title Interface for all exchange handler contracts\r\ninterface ExchangeHandler {\r\n\r\n    /// @dev Get the available amount left to fill for an order\r\n    /// @param orderAddresses Array of address values needed for this DEX order\r\n    /// @param orderValues Array of uint values needed for this DEX order\r\n    /// @param exchangeFee Value indicating the fee for this DEX order\r\n    /// @param v ECDSA signature parameter v\r\n    /// @param r ECDSA signature parameter r\r\n    /// @param s ECDSA signature parameter s\r\n    /// @return Available amount left to fill for this order\r\n    function getAvailableAmount(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 exchangeFee,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256);\r\n\r\n    /// @dev Perform a buy order at the exchange\r\n    /// @param orderAddresses Array of address values needed for each DEX order\r\n    /// @param orderValues Array of uint values needed for each DEX order\r\n    /// @param exchangeFee Value indicating the fee for this DEX order\r\n    /// @param amountToFill Amount to fill in this order\r\n    /// @param v ECDSA signature parameter v\r\n    /// @param r ECDSA signature parameter r\r\n    /// @param s ECDSA signature parameter s\r\n    /// @return Amount filled in this order\r\n    function performBuy(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 exchangeFee,\r\n        uint256 amountToFill,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable returns (uint256);\r\n\r\n    /// @dev Perform a sell order at the exchange\r\n    /// @param orderAddresses Array of address values needed for each DEX order\r\n    /// @param orderValues Array of uint values needed for each DEX order\r\n    /// @param exchangeFee Value indicating the fee for this DEX order\r\n    /// @param amountToFill Amount to fill in this order\r\n    /// @param v ECDSA signature parameter v\r\n    /// @param r ECDSA signature parameter r\r\n    /// @param s ECDSA signature parameter s\r\n    /// @return Amount filled in this order\r\n    function performSell(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 exchangeFee,\r\n        uint256 amountToFill,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract Token is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface BancorConverter {\r\n    function quickConvert(address[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\r\n}\r\n\r\ncontract BancorHandler is ExchangeHandler, Ownable {\r\n    address public totlePrimary;\r\n    uint256 constant MAX_UINT = 2**256 - 1;\r\n\r\n    modifier onlyTotle() {\r\n        require(msg.sender == totlePrimary, \"BancorHandler - Only TotlePrimary allowed to call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _totlePrimary\r\n    ) public {\r\n        require(_totlePrimary != address(0x0));\r\n        totlePrimary = _totlePrimary;\r\n    }\r\n\r\n    // Public functions\r\n    function getAvailableAmount(\r\n        address[8] orderAddresses, // [converterAddress, conversionPath ... ]\r\n        uint256[6] orderValues, // [amountToGive, minReturn, EMPTY, EMPTY, EMPTY, EMPTY]\r\n        uint256 exchangeFee, // ignore\r\n        uint8 v, // ignore\r\n        bytes32 r, // ignore\r\n        bytes32 s // ignore\r\n    ) external returns (uint256) {\r\n        // Return amountToGive\r\n        return orderValues[0];\r\n    }\r\n\r\n    function performBuy(\r\n        address[8] orderAddresses, // [converterAddress, conversionPath ... ]\r\n        uint256[6] orderValues, // [amountToGive, minReturn, EMPTY, EMPTY, EMPTY, EMPTY]\r\n        uint256 exchangeFee, // ignore\r\n        uint256 amountToFill, // ignore\r\n        uint8 v, // ignore\r\n        bytes32 r, // ignore\r\n        bytes32 s // ignore\r\n    ) external payable onlyTotle returns (uint256 amountObtained) {\r\n        address destinationToken;\r\n        (amountObtained, destinationToken) = trade(orderAddresses, orderValues);\r\n        transferTokenToSender(destinationToken, amountObtained);\r\n    }\r\n\r\n    function performSell(\r\n        address[8] orderAddresses, // [converterAddress, conversionPath ... ]\r\n        uint256[6] orderValues, // [amountToGive, minReturn, EMPTY, EMPTY, EMPTY, EMPTY]\r\n        uint256 exchangeFee, // ignore\r\n        uint256 amountToFill, // ignore\r\n        uint8 v, // ignore\r\n        bytes32 r, // ignore\r\n        bytes32 s // ignore\r\n    ) external onlyTotle returns (uint256 amountObtained) {\r\n        approveExchange(orderAddresses[0], orderAddresses[1]);\r\n        (amountObtained, ) = trade(orderAddresses, orderValues);\r\n        transferEtherToSender(amountObtained);\r\n    }\r\n\r\n    function trade(\r\n        address[8] orderAddresses, // [converterAddress, conversionPath ... ]\r\n        uint256[6] orderValues // [amountToGive, minReturn, EMPTY, EMPTY, EMPTY, EMPTY]\r\n    ) internal returns (uint256 amountObtained, address destinationToken) {\r\n        // Find the length of the conversion path\r\n        uint256 len;\r\n        for(len = 1; len < orderAddresses.length; len++) {\r\n            if(orderAddresses[len] == 0) {\r\n                require(len > 1, \"BancorHandler - Invalid conversion path\");\r\n                destinationToken = orderAddresses[len - 1];\r\n                len--;\r\n                break;\r\n            } else if(len == orderAddresses.length - 1) {\r\n                destinationToken = orderAddresses[len];\r\n                break;\r\n            }\r\n        }\r\n        // Create an array of that length\r\n        address[] memory conversionPath = new address[](len);\r\n\r\n        // Move the contents from orderAddresses to conversionPath\r\n        for(uint256 i = 0; i < len; i++) {\r\n            conversionPath[i] = orderAddresses[i + 1];\r\n        }\r\n\r\n        amountObtained = BancorConverter(orderAddresses[0])\r\n                            .quickConvert.value(msg.value)(conversionPath, orderValues[0], orderValues[1]);\r\n    }\r\n\r\n    function transferTokenToSender(address token, uint256 amount) internal {\r\n        require(Token(token).transfer(msg.sender, amount), \"BancorHandler - Failed to transfer token to msg.sender\");\r\n    }\r\n\r\n    function transferEtherToSender(uint256 amount) internal {\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function approveExchange(address exchange, address token) internal {\r\n        if(Token(token).allowance(address(this), exchange) == 0) {\r\n            require(Token(token).approve(exchange, MAX_UINT), \"BancorHandler - Failed to approve token\");\r\n        }\r\n    }\r\n\r\n    function withdrawToken(address _token, uint _amount) external onlyOwner returns (bool) {\r\n        return Token(_token).transfer(owner, _amount);\r\n    }\r\n\r\n    function withdrawETH(uint _amount) external onlyOwner returns (bool) {\r\n        owner.transfer(_amount);\r\n    }\r\n\r\n    function setTotle(address _totlePrimary) external onlyOwner {\r\n        require(_totlePrimary != address(0), \"Invalid address for totlePrimary\");\r\n        totlePrimary = _totlePrimary;\r\n    }\r\n\r\n    function() public payable {\r\n        // Check in here that the sender is a contract! (to stop accidents)\r\n        uint256 size;\r\n        address sender = msg.sender;\r\n        assembly {\r\n            size := extcodesize(sender)\r\n        }\r\n        require(size > 0, \"BancorHandler - can only send ether from another contract\");\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_totlePrimary\",\"type\":\"address\"}],\"name\":\"setTotle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[8]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6]\"},{\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"getAvailableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[8]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6]\"},{\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"name\":\"amountToFill\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"performSell\",\"outputs\":[{\"name\":\"amountObtained\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totlePrimary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[8]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6]\"},{\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"name\":\"amountToFill\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"performBuy\",\"outputs\":[{\"name\":\"amountObtained\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totlePrimary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BancorHandler","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000dc596c680aa1ed68ea26ab9c19d6e9acc68c06c2","Library":"","SwarmSource":"bzzr://50b5408034b1a2f9969d8cd60c749dc4768a4b830b3d7465728b398eeda077a1"}]}