{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ptc {\r\n    function balanceOf(address _owner) constant public returns (uint256);\r\n}\r\n\r\ncontract Jade {\r\n    using SafeMath for uint256;\r\n    /* Public variables of the token */\r\n    uint256 public totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 3;\r\n    uint256 public totalMember;\r\n\r\n    uint256 private tickets = 50*(10**18);\r\n    uint256 private max_level = 20;\r\n    uint256 private ajust_time = 30*24*60*60;\r\n    uint256 private min_interval = (24*60*60 - 30*60);\r\n    uint256 private creation_time;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => uint256) public levels;\r\n\r\n    mapping (address => uint256) private last_mine_time;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    address private ptc_addr = 0xeCa906474016f727D1C2Ec096046C03eAc4Aa085;\r\n    Ptc ptc_ins = Ptc(ptc_addr);\r\n\r\n    constructor(string _name, string _symbol) public{\r\n        totalSupply = 0;\r\n        totalMember = 0;\r\n        creation_time = now;\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    // all call_func from msg.sender must at least have 50 ptc coins\r\n    modifier only_ptc_owner {\r\n        require(ptc_ins.balanceOf(msg.sender) >= tickets);\r\n        _;\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) public only_ptc_owner{\r\n        /* if the sender doenst have enough balance then stop */\r\n        require (balanceOf[msg.sender] >= _value);\r\n        require (balanceOf[_to] + _value >= balanceOf[_to]);\r\n\r\n        /* Add and subtract new balances */\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n\r\n        /* Notifiy anyone listening that this transfer took place */\r\n        emit Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function ptc_balance(address addr) constant public returns(uint256){\r\n        return ptc_ins.balanceOf(addr);\r\n    }\r\n\r\n    function rest_time() constant public only_ptc_owner returns(uint256) {\r\n        if (now >= last_mine_time[msg.sender].add(min_interval))\r\n            return 0;\r\n        else\r\n            return last_mine_time[msg.sender].add(min_interval).sub(now);\r\n    }\r\n\r\n    function catch_the_thief(address check_addr) public only_ptc_owner returns(bool){\r\n        if (ptc_ins.balanceOf(check_addr) < tickets) {\r\n            levels[msg.sender] = levels[msg.sender].add(levels[check_addr]);\r\n            update_power();\r\n\r\n            balanceOf[check_addr] = 0;\r\n            levels[check_addr] = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function mine_jade() public only_ptc_owner returns(uint256) {\r\n        if (last_mine_time[msg.sender] == 0) {\r\n            last_mine_time[msg.sender] = now;\r\n            update_power();\r\n\r\n            balanceOf[msg.sender] = mine_jade_ex(levels[msg.sender]);\r\n            totalSupply = totalSupply.add(mine_jade_ex(levels[msg.sender]));\r\n            totalMember = totalMember.add(1);\r\n\r\n            return mine_jade_ex(levels[msg.sender]);\r\n        } else if (now >= last_mine_time[msg.sender].add(min_interval)) {\r\n            last_mine_time[msg.sender] = now;\r\n            update_power();\r\n\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].add(mine_jade_ex(levels[msg.sender]));\r\n            totalSupply = totalSupply.add(mine_jade_ex(levels[msg.sender]));\r\n\r\n            return mine_jade_ex(levels[msg.sender]);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function mine_jade_ex(uint256 power) private view returns(uint256) {\r\n        uint256 cycle = now.sub(creation_time).div(ajust_time);\r\n        require (cycle >= 0);\r\n        require (power >= 0);\r\n        require (power <= max_level);\r\n\r\n        return ((100*power + 20*(power**2)).mul(95**cycle)).div(100**cycle);\r\n    }\r\n\r\n    function update_power() private {\r\n        require (levels[msg.sender] >= 0);\r\n        if (levels[msg.sender] < max_level)\r\n            levels[msg.sender] = levels[msg.sender].add(1);\r\n        else\r\n            levels[msg.sender] = max_level;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mine_jade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"levels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMember\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"check_addr\",\"type\":\"address\"}],\"name\":\"catch_the_thief\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ptc_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rest_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Jade","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000044a4144450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a41444500000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://92081150189eaa09a8a56c5ae608dbb4a231f4d5d2f1567c1c6531df6e264741"}]}