{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n*/\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n */\r\n\r\ninterface ERC20 {\r\n\r\n    //Returns the account balance of another account with address _owner.\r\n    function balanceOf(address _owner) external constant returns (uint256 balance);\r\n\r\n    //Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\r\n    //The function SHOULD throw if the _from account balance does not have enough tokens to spend.\r\n    //\r\n    //Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    //Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\r\n    //\r\n    //The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.\r\n    //This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge\r\n    //fees in sub-currencies. The function SHOULD throw unless the _from account has deliberately authorized\r\n    //the sender of the message via some mechanism.\r\n    //\r\n    //Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n    //Allows _spender to withdraw from your account multiple times, up to the _value amount.\r\n    //If this function is called again it overwrites the current allowance with _value.\r\n    //\r\n    //NOTE: To prevent attack vectors like the one described here and discussed here, clients SHOULD make\r\n    //sure to create user interfaces in such a way that they set the allowance first to 0 before setting it\r\n    //to another value for the same spender. THOUGH The contract itself shouldn't enforce it, to allow\r\n    //backwards compatibility with contracts deployed before\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    //Returns the amount which _spender is still allowed to withdraw from _owner.\r\n    function allowance(address _owner, address _spender) external returns (uint256 remaining);\r\n\r\n    //MUST trigger when tokens are transferred, including zero value transfers.\r\n    //\r\n    //A token contract which creates new tokens SHOULD trigger a Transfer event with the _from\r\n    //address set to 0x0 when tokens are created.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    //MUST trigger on any successful call to approve(address _spender, uint256 _value).\r\n    event Approval(address indexed _owner, address indexed _spender, uint256  _value);\r\n}\r\n\r\n\r\ncontract POMZ is ERC20 {\r\n\r\n    //use libraries section\r\n\tusing SafeMath for uint256;\r\n\r\n    //token characteristics section\r\n    uint public constant decimals = 8;\r\n    uint256 public totalSupply = 5000000000 * 10 ** decimals;\r\n    string public constant name = \"POMZ\";\r\n    string public constant symbol = \"POMZ\";\r\n\r\n    //storage section\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    //all token to creator\r\n\tconstructor() public {\r\n\t\tbalances[msg.sender] = totalSupply;\r\n\t}\r\n\r\n    //Returns the account balance of another account with address _owner.\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n\t    return balances[_owner];\r\n    }\r\n\r\n    //Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\r\n    //The function SHOULD throw if the _from account balance does not have enough tokens to spend.\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[msg.sender] >= _value);\r\n        require(balances[_to] + _value >= balances[_to]);\r\n\r\n        uint256 previousBalances = balances[_to];\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        assert(balances[_to].sub(_value) == previousBalances);\r\n        return true;\r\n    }\r\n\r\n    //Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value);\r\n        require(allowed[_from][msg.sender] >= _value);\r\n        require(balances[_to] + _value >= balances[_to]);\r\n\r\n        uint256 previousBalances = balances[_to];\r\n\t    balances[_from] = balances[_from].sub(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n\t\tassert(balances[_to].sub(_value) == previousBalances);\r\n        return true;\r\n    }\r\n\r\n    //Allows _spender to withdraw from your account multiple times, up to the _value amount.\r\n    //If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        \r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    //Returns the amount which _spender is still allowed to withdraw from _owner.\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // If ether is sent to this address, send it back.\r\n\tfunction () public {\r\n        revert();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"POMZ","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8d438ce722bd25976f692c936834ed899532427a51cf6c0df68c9981d49ed9e9"}]}