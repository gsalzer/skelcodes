{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Reputation {\r\n\r\n  address owner;\r\n  mapping(address => bool) whitelist;\r\n  mapping(address => int) ratings;\r\n\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function addToWhitelist(address _contractAddress) public {\r\n    require(msg.sender == owner);\r\n    whitelist[_contractAddress] = true;\r\n  }\r\n\r\n  function change(address _userAddress, int _delta) public {\r\n    require(whitelist[msg.sender]);\r\n    ratings[_userAddress] += _delta;\r\n  }\r\n\r\n  function getMy() public view returns (int) {\r\n    return ratings[msg.sender];\r\n  }\r\n\r\n  function get(address _userAddress) public view returns (int) {\r\n    return ratings[_userAddress];\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract EthToSmthSwaps {\r\n\r\n  using SafeMath for uint;\r\n\r\n  address public owner;\r\n  address public ratingContractAddress;\r\n  uint256 SafeTime = 1 hours; // atomic swap timeOut\r\n\r\n  struct Swap {\r\n    bytes32 secret;\r\n    bytes20 secretHash;\r\n    uint256 createdAt;\r\n    uint256 balance;\r\n  }\r\n\r\n  // ETH Owner => BTC Owner => Swap\r\n  mapping(address => mapping(address => Swap)) public swaps;\r\n  mapping(address => mapping(address => uint)) public participantSigns;\r\n\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function setReputationAddress(address _ratingContractAddress) public {\r\n    require(owner == msg.sender);\r\n    ratingContractAddress = _ratingContractAddress;\r\n  }\r\n\r\n  event Sign();\r\n\r\n  // ETH Owner signs swap\r\n  // initializing time for correct work of close() method\r\n  function sign(address _participantAddress) public {\r\n    require(swaps[msg.sender][_participantAddress].balance == 0);\r\n    participantSigns[msg.sender][_participantAddress] = now;\r\n\r\n    Sign();\r\n  }\r\n\r\n  // BTC Owner checks if ETH Owner signed swap\r\n  function checkSign(address _ownerAddress) public view returns (uint) {\r\n    return participantSigns[_ownerAddress][msg.sender];\r\n  }\r\n\r\n  event CreateSwap(uint256 createdAt);\r\n\r\n  // ETH Owner creates Swap with secretHash\r\n  // ETH Owner make token deposit\r\n  function createSwap(bytes20 _secretHash, address _participantAddress) public payable {\r\n    require(msg.value > 0);\r\n    require(participantSigns[msg.sender][_participantAddress].add(SafeTime) > now);\r\n    require(swaps[msg.sender][_participantAddress].balance == uint256(0));\r\n\r\n    swaps[msg.sender][_participantAddress] = Swap(\r\n      bytes32(0),\r\n      _secretHash,\r\n      now,\r\n      msg.value\r\n    );\r\n\r\n    CreateSwap(now);\r\n  }\r\n\r\n  function getBalance(address _ownerAddress) public view returns (uint256) {\r\n    return swaps[_ownerAddress][msg.sender].balance;\r\n  }\r\n\r\n  event Withdraw();\r\n\r\n  // BTC Owner withdraw money and adds secret key to swap\r\n  // BTC Owner receive +1 reputation\r\n  function withdraw(bytes32 _secret, address _ownerAddress) public {\r\n    Swap memory swap = swaps[_ownerAddress][msg.sender];\r\n\r\n    require(swap.secretHash == ripemd160(_secret));\r\n    require(swap.balance > uint256(0));\r\n    require(swap.createdAt.add(SafeTime) > now);\r\n\r\n    Reputation(ratingContractAddress).change(msg.sender, 1);\r\n    msg.sender.transfer(swap.balance);\r\n\r\n    swaps[_ownerAddress][msg.sender].balance = 0;\r\n    swaps[_ownerAddress][msg.sender].secret = _secret;\r\n\r\n    Withdraw();\r\n  }\r\n\r\n  // ETH Owner receive secret\r\n  function getSecret(address _participantAddress) public view returns (bytes32) {\r\n    return swaps[msg.sender][_participantAddress].secret;\r\n  }\r\n\r\n  event Close();\r\n\r\n  // ETH Owner closes swap\r\n  // ETH Owner receive +1 reputation\r\n  function close(address _participantAddress) public {\r\n    require(swaps[msg.sender][_participantAddress].balance == 0);\r\n\r\n    Reputation(ratingContractAddress).change(msg.sender, 1);\r\n    clean(msg.sender, _participantAddress);\r\n\r\n    Close();\r\n  }\r\n\r\n  event Refund();\r\n\r\n  // ETH Owner refund money\r\n  // BTC Owner gets -1 reputation\r\n  function refund(address _participantAddress) public {\r\n    Swap memory swap = swaps[msg.sender][_participantAddress];\r\n\r\n    require(swap.balance > uint256(0));\r\n    require(swap.createdAt.add(SafeTime) < now);\r\n\r\n    msg.sender.transfer(swap.balance);\r\n    // TODO it looks like ETH Owner can create as many swaps as possible and refund them to decrease someone reputation\r\n    Reputation(ratingContractAddress).change(_participantAddress, -1);\r\n    clean(msg.sender, _participantAddress);\r\n\r\n    Refund();\r\n  }\r\n\r\n  event Abort();\r\n\r\n  // BTC Owner closes Swap\r\n  // If ETH Owner don't create swap after init in in safeTime\r\n  // ETH Owner -1 reputation\r\n  function abort(address _ownerAddress) public {\r\n    require(swaps[_ownerAddress][msg.sender].balance == uint256(0));\r\n    require(participantSigns[_ownerAddress][msg.sender] != uint(0));\r\n    require(participantSigns[_ownerAddress][msg.sender].add(SafeTime) < now);\r\n\r\n    Reputation(ratingContractAddress).change(_ownerAddress, -1);\r\n    clean(_ownerAddress, msg.sender);\r\n\r\n    Abort();\r\n  }\r\n\r\n  function clean(address _ownerAddress, address _participantAddress) internal {\r\n    delete swaps[_ownerAddress][_participantAddress];\r\n    delete participantSigns[_ownerAddress][_participantAddress];\r\n  }\r\n  \r\n  //WE ARE IN THE ALPHA, of course this function WILL BE removed in future\r\n  function withdr(uint amount) {\r\n     require(msg.sender == owner);\r\n     owner.transfer(amount);\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_secret\",\"type\":\"bytes32\"},{\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participantAddress\",\"type\":\"address\"}],\"name\":\"getSecret\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ratingContractAddress\",\"type\":\"address\"}],\"name\":\"setReputationAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantSigns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"abort\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"swaps\",\"outputs\":[{\"name\":\"secret\",\"type\":\"bytes32\"},{\"name\":\"secretHash\",\"type\":\"bytes20\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"name\":\"_participantAddress\",\"type\":\"address\"}],\"name\":\"createSwap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"checkSign\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participantAddress\",\"type\":\"address\"}],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratingContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participantAddress\",\"type\":\"address\"}],\"name\":\"sign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participantAddress\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Sign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"createdAt\",\"type\":\"uint256\"}],\"name\":\"CreateSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Close\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Abort\",\"type\":\"event\"}]","ContractName":"EthToSmthSwaps","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cb586576cbc24136967f57f01c39f2bffe54caf3d9c386759c8f25dc84c712a6"}]}