{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract Trabet_Coin is owned {\r\n    // Public variables of the token\r\n    string public name = \"Trabet Coin\";\r\n    string public symbol = \"TC\";\r\n    uint8 public decimals = 4;\r\n    uint256 public totalSupply = 7000000 * 10 ** uint256(decimals);\r\n\r\n    bool public released = false;\r\n\r\n    /// contract that is allowed to create new tokens and allows unlift the transfer limits on this token\r\n    address public crowdsaleAgent;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public frozenAccount;\r\n   \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n    \r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    constructor () public {\r\n        balanceOf[owner] = totalSupply;\r\n    }\r\n    modifier canTransfer() {\r\n        require(released);\r\n       _;\r\n     }\r\n\r\n    modifier onlyCrowdsaleAgent() {\r\n        require(msg.sender == crowdsaleAgent);\r\n        _;\r\n    }\r\n\r\n    function releaseToken() public onlyOwner {\r\n        released = true;\r\n    }\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) canTransfer internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Check if sender is frozen\r\n        require(!frozenAccount[_from]);\r\n        // Check if recipient is frozen\r\n        require(!frozenAccount[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) canTransfer public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Create `mintedAmount` tokens and send it to `target`\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n    function mintToken(address target, uint256 mintedAmount) onlyCrowdsaleAgent public {\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        emit Transfer(this, target, mintedAmount);\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    /// @dev Set the contract that can call release and make the token transferable.\r\n    /// @param _crowdsaleAgent crowdsale contract address\r\n    function setCrowdsaleAgent(address _crowdsaleAgent) onlyOwner public {\r\n        crowdsaleAgent = _crowdsaleAgent;\r\n    }\r\n}\r\n\r\ncontract Killable is owned {\r\n    function kill() onlyOwner public {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\ncontract Trabet_Coin_PreICO is owned, Killable {\r\n    /// The token we are selling\r\n    Trabet_Coin public token;\r\n\r\n    ///fund goes to\r\n    address public beneficiary;\r\n\r\n    /// the UNIX timestamp start date of the crowdsale\r\n    uint public startsAt = 1521748800;\r\n\r\n    /// the UNIX timestamp end date of the crowdsale\r\n    uint public endsAt = 1532563200;\r\n\r\n    /// the price of token\r\n    uint256 public TokenPerETH = 1065;\r\n\r\n    /// Has this crowdsale been finalized\r\n    bool public finalized = false;\r\n\r\n    /// the number of tokens already sold through this contract\r\n    uint public tokensSold = 0;\r\n\r\n    /// the number of ETH raised through this contract\r\n    uint public weiRaised = 0;\r\n\r\n    /// How many distinct addresses have invested\r\n    uint public investorCount = 0;\r\n\r\n    /// How much wei we have given back to investors.\r\n    uint public weiRefunded = 0;\r\n\r\n    /// Has this crowdsale reFunding\r\n    bool public reFunding = false;\r\n\r\n    /// How much ETH each address has invested to this crowdsale\r\n    mapping (address => uint256) public investedAmountOf;\r\n\r\n    /// A new investment was made\r\n    event Invested(address investor, uint weiAmount, uint tokenAmount);\r\n    /// Crowdsale Start time has been changed\r\n    event StartsAtChanged(uint startsAt);\r\n    /// Crowdsale end time has been changed\r\n    event EndsAtChanged(uint endsAt);\r\n    /// Calculated new price\r\n    event RateChanged(uint oldValue, uint newValue);\r\n    /// Refund was processed for a contributor\r\n    event Refund(address investor, uint weiAmount);\r\n\r\n    constructor (address _token, address _beneficiary) public {\r\n        token = Trabet_Coin(_token);\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function investInternal(address receiver, address refer) private {\r\n        require(!finalized);\r\n        require(startsAt <= now && endsAt > now);\r\n        require(msg.value >= 100000000000000);\r\n\r\n        if(investedAmountOf[receiver] == 0) {\r\n            // A new investor\r\n            investorCount++;\r\n        }\r\n\r\n        // Update investor\r\n        uint tokensAmount = msg.value * TokenPerETH / 100000000000000;\r\n        investedAmountOf[receiver] += msg.value;\r\n        // Update totals\r\n        tokensSold += tokensAmount;\r\n        weiRaised += msg.value;\r\n\r\n        // Tell us invest was success\r\n        emit Invested(receiver, msg.value, tokensAmount);\r\n\r\n        token.mintToken(receiver, tokensAmount);\r\n\r\n        if (refer != 0x0) {\r\n            refer.transfer(msg.value/10);\r\n        }\r\n\r\n        // Transfer Fund to owner's address\r\n        beneficiary.transfer(address(this).balance);\r\n\r\n    }\r\n\r\n    function buy(address refer) public payable {\r\n        investInternal(msg.sender, refer);\r\n    }\r\n    \r\n    function () public payable {\r\n        investInternal(msg.sender, 0x0);\r\n    }\r\n    \r\n    function payforRefund () public payable {\r\n    }\r\n    function setStartsAt(uint time) onlyOwner public {\r\n        require(!finalized);\r\n        startsAt = time;\r\n        emit StartsAtChanged(startsAt);\r\n    }\r\n    function setEndsAt(uint time) onlyOwner public {\r\n        require(!finalized);\r\n        endsAt = time;\r\n        emit EndsAtChanged(endsAt);\r\n    }\r\n    function setRate(uint value) onlyOwner public {\r\n        require(!finalized);\r\n        require(value > 0);\r\n        emit RateChanged(TokenPerETH, value);\r\n        TokenPerETH = value;\r\n    }\r\n\r\n    function finalize() public onlyOwner {\r\n        // Finalized Pre ICO crowdsele.\r\n        finalized = true;\r\n    }\r\n\r\n    function EnableRefund() public onlyOwner {\r\n        // Finalized Pre ICO crowdsele.\r\n        reFunding = true;\r\n    }\r\n\r\n    function setBeneficiary(address _beneficiary) public onlyOwner {\r\n        // Finalized Pre ICO crowdsele.\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    /// @dev Investors can claim refund.\r\n    function refund() public {\r\n        require(reFunding);\r\n        uint256 weiValue = investedAmountOf[msg.sender];\r\n        investedAmountOf[msg.sender] = 0;\r\n        weiRefunded = weiRefunded + weiValue;\r\n        emit Refund(msg.sender, weiValue);\r\n        msg.sender.transfer(weiValue);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenPerETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setEndsAt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"EnableRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payforRefund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStartsAt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startsAt\",\"type\":\"uint256\"}],\"name\":\"StartsAtChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endsAt\",\"type\":\"uint256\"}],\"name\":\"EndsAtChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"}]","ContractName":"Trabet_Coin_PreICO","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002f7f26470517c43cd142ecb9a75347454af74b000000000000000000000000000e000d777cbe5d6e287c7344786be61a98bf17c6","Library":"","SwarmSource":"bzzr://0cc3f6489cc185861b86e027cc6b2741028f0e53abe7c0d3ccc152eff2a60528"}]}