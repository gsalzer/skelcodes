{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert_ex(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // assert_ex(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert_ex(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert_ex(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert_ex(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal   pure  returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function assert_ex(bool assert_exion) internal pure{\r\n        if (!assert_exion) {\r\n          revert();\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n\r\n    using SafeMath for uint;\r\n    uint public _totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n\r\n\r\n    function totalSupply() constant returns (uint256 totalSupply) {\r\n      totalSupply = _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns balance of the `_owner`.\r\n     *\r\n     * @param _owner   The address whose balance will be returned.\r\n     * @return balance Balance of the `_owner`.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * Set allowed for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowed to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {\r\n          revert();\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * Atomic increment of approved spending\r\n     *\r\n     * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     */\r\n    function addApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Atomic decrement of approved spending.\r\n     *\r\n     * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     */\r\n    function subApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n          allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n          allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Contract that will work with ERC223 tokens.\r\n */\r\ncontract ERC223ReceivingContract {\r\n\r\n    event TokenFallback(address _from, uint _value, bytes _data);\r\n\r\n    /**\r\n     * @dev Standard ERC223 function that will handle incoming token transfers.\r\n     *\r\n     * @param _from  Token sender address.\r\n     * @param _value Amount of tokens.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function tokenFallback(address _from, uint _value, bytes _data)public {\r\n        TokenFallback(_from,_value,_data);\r\n    }\r\n}\r\n\r\n\r\ncontract StanderdToken is ERC20Interface, ERC223ReceivingContract, Owned {\r\n\r\n\r\n\r\n    /**\r\n     *\r\n     * Fix for the ERC20 short address attack\r\n     *\r\n     * http://vessenes.com/the-erc20-short-address-attack-explained/\r\n     */\r\n    modifier onlyPayloadSize(uint size) {\r\n        if(msg.data.length != size + 4) {\r\n         revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      This function works the same with the previous one\r\n     *      but doesn't contain `_data` param.\r\n     *      Added due to backwards compatibility reasons.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     */\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        address _from = msg.sender;\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address _from,address _to, uint _value) public returns (bool) {\r\n        //require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract PreviligedToken is Owned {\r\n\r\n    using SafeMath for uint;\r\n\r\n    mapping (address => uint) previligedBalances;\r\n    mapping (address => mapping (address => uint)) previligedallowed;\r\n\r\n    event PreviligedLock(address indexed from, address indexed to, uint value);\r\n    event PreviligedUnLock(address indexed from, address indexed to, uint value);\r\n    event Previligedallowed(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    function previligedBalanceOf(address _owner) public view returns (uint balance) {\r\n        return previligedBalances[_owner];\r\n    }\r\n\r\n    function previligedApprove(address _owner, address _spender, uint _value) onlyOwner public returns (bool success) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowed to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_value != 0) && (previligedallowed[_owner][_spender] != 0)) {\r\n          revert();\r\n        }\r\n\r\n        previligedallowed[_owner][_spender] = _value;\r\n        Previligedallowed(_owner, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function getPreviligedallowed(address _owner, address _spender) public view returns (uint remaining) {\r\n        return previligedallowed[_owner][_spender];\r\n    }\r\n\r\n    function previligedAddApproval(address _owner, address _spender, uint _addedValue) onlyOwner public returns (bool) {\r\n        previligedallowed[_owner][_spender] = previligedallowed[_owner][_spender].add(_addedValue);\r\n        Previligedallowed(_owner, _spender, previligedallowed[_owner][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function previligedSubApproval(address _owner, address _spender, uint _subtractedValue) onlyOwner public returns (bool) {\r\n        uint oldValue = previligedallowed[_owner][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n          previligedallowed[_owner][_spender] = 0;\r\n        } else {\r\n          previligedallowed[_owner][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Previligedallowed(_owner, _spender, previligedallowed[_owner][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract MitToken is StanderdToken, PreviligedToken {\r\n\r\n    using SafeMath for uint;\r\n\r\n    event Burned(address burner, uint burnedAmount);\r\n\r\n    function MitToken() public {\r\n\r\n        uint initialSupply = 6000000000;\r\n\r\n        decimals = 18;\r\n        _totalSupply = initialSupply * 10 ** uint(decimals);  // Update total supply with the decimal amount\r\n        balances[msg.sender] = _totalSupply;                // Give the creator all initial tokens\r\n        name = \"MitCoin\";                                   // Set the name for display purposes\r\n        symbol = \"MITC\";                               // Set the symbol for display purposes3\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @notice Create `mintedAmount` tokens and send it to `_target`\r\n     * @param _target The address that will receive the minted tokens.\r\n     * @param _mintedAmount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mintToken(address _target, uint _mintedAmount) onlyOwner public {\r\n        balances[_target] = balances[_target].add(_mintedAmount);\r\n        _totalSupply = _totalSupply.add(_mintedAmount);\r\n\r\n        Transfer(address(0), _target, _mintedAmount);\r\n    }\r\n\r\n    function burn(uint _amount) onlyOwner public {\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_amount);\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n\r\n        Burned(burner, _amount);\r\n    }\r\n\r\n    function previligedLock(address _to, uint _value) onlyOwner public returns (bool) {\r\n        address _from = msg.sender;\r\n        balances[_from] = balances[_from].sub(_value);\r\n        //balances[_to] = balances[_to].add(_value);\r\n        previligedBalances[_to] = previligedBalances[_to].add(_value);\r\n        PreviligedLock(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function previligedUnLock(address _from, uint _value) public returns (bool) {\r\n        address to = msg.sender; // we force the address_to to be the the caller\r\n        require(to != address(0));\r\n        require(_value <= previligedBalances[_from]);\r\n        require(_value <= previligedallowed[_from][msg.sender]);\r\n\r\n        previligedBalances[_from] = previligedBalances[_from].sub(_value);\r\n        balances[to] = balances[to].add(_value);\r\n        previligedallowed[_from][msg.sender] = previligedallowed[_from][msg.sender].sub(_value);\r\n        PreviligedUnLock(_from, to, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"previligedSubApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"previligedAddApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"previligedBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"getPreviligedallowed\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"previligedUnLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"addApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"previligedApprove\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"subApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"previligedLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PreviligedLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PreviligedUnLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Previligedallowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"TokenFallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MitToken","CompilerVersion":"v0.4.25-nightly.2018.5.23+commit.18c651b7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8d5f1319109d5fa4e0b3fa419d5fe21a83ee74f027153e9dfc3ccb0ea1a6e78c"}]}