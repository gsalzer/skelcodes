{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nMIT License\r\n\r\nCopyright (c) 2018 Nguyen Vu Nhat Minh\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n\r\npragma solidity ^0.4.20;\r\n\r\ncontract EtherChat {\r\n    event messageSentEvent(address indexed from, address indexed to, bytes message, bytes32 encryption);\r\n    event addContactEvent(address indexed from, address indexed to);\r\n    event acceptContactEvent(address indexed from, address indexed to);\r\n    event profileUpdateEvent(address indexed from, bytes32 name, bytes32 avatarUrl);\r\n    event blockContactEvent(address indexed from, address indexed to);\r\n    event unblockContactEvent(address indexed from, address indexed to);\r\n    \r\n    enum RelationshipType {NoRelation, Requested, Connected, Blocked}\r\n    \r\n    struct Member {\r\n        bytes32 publicKeyLeft;\r\n        bytes32 publicKeyRight;\r\n        bytes32 name;\r\n        bytes32 avatarUrl;\r\n        uint messageStartBlock;\r\n        bool isMember;\r\n    }\r\n    \r\n    mapping (address => mapping (address => RelationshipType)) relationships;\r\n    mapping (address => Member) public members;\r\n    \r\n    function addContact(address addr) public onlyMember {\r\n        require(relationships[msg.sender][addr] == RelationshipType.NoRelation);\r\n        require(relationships[addr][msg.sender] == RelationshipType.NoRelation);\r\n        \r\n        relationships[msg.sender][addr] = RelationshipType.Requested;\r\n        emit addContactEvent(msg.sender, addr);\r\n    }\r\n\r\n    function acceptContactRequest(address addr) public onlyMember {\r\n        require(relationships[addr][msg.sender] == RelationshipType.Requested);\r\n        \r\n        relationships[msg.sender][addr] = RelationshipType.Connected;\r\n        relationships[addr][msg.sender] = RelationshipType.Connected;\r\n\r\n        emit acceptContactEvent(msg.sender, addr);\r\n    }\r\n    \r\n    function join(bytes32 publicKeyLeft, bytes32 publicKeyRight) public {\r\n        require(members[msg.sender].isMember == false);\r\n        \r\n        Member memory newMember = Member(publicKeyLeft, publicKeyRight, \"\", \"\", 0, true);\r\n        members[msg.sender] = newMember;\r\n    }\r\n    \r\n    function sendMessage(address to, bytes message, bytes32 encryption) public onlyMember {\r\n        require(relationships[to][msg.sender] == RelationshipType.Connected);\r\n\r\n        if (members[to].messageStartBlock == 0) {\r\n            members[to].messageStartBlock = block.number;\r\n        }\r\n        \r\n        emit messageSentEvent(msg.sender, to, message, encryption);\r\n    }\r\n    \r\n    function blockMessagesFrom(address from) public onlyMember {\r\n        require(relationships[msg.sender][from] == RelationshipType.Connected);\r\n\r\n        relationships[msg.sender][from] = RelationshipType.Blocked;\r\n        emit blockContactEvent(msg.sender, from);\r\n    }\r\n    \r\n    function unblockMessagesFrom(address from) public onlyMember {\r\n        require(relationships[msg.sender][from] == RelationshipType.Blocked);\r\n\r\n        relationships[msg.sender][from] = RelationshipType.Connected;\r\n        emit unblockContactEvent(msg.sender, from);\r\n    }\r\n    \r\n    function updateProfile(bytes32 name, bytes32 avatarUrl) public onlyMember {\r\n        members[msg.sender].name = name;\r\n        members[msg.sender].avatarUrl = avatarUrl;\r\n        emit profileUpdateEvent(msg.sender, name, avatarUrl);\r\n    }\r\n    \r\n    modifier onlyMember() {\r\n        require(members[msg.sender].isMember == true);\r\n        _;\r\n    }\r\n    \r\n    function getRelationWith(address a) public view onlyMember returns (RelationshipType) {\r\n        return relationships[msg.sender][a];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"publicKeyLeft\",\"type\":\"bytes32\"},{\"name\":\"publicKeyRight\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"avatarUrl\",\"type\":\"bytes32\"},{\"name\":\"messageStartBlock\",\"type\":\"uint256\"},{\"name\":\"isMember\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"blockMessagesFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"message\",\"type\":\"bytes\"},{\"name\":\"encryption\",\"type\":\"bytes32\"}],\"name\":\"sendMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"publicKeyLeft\",\"type\":\"bytes32\"},{\"name\":\"publicKeyRight\",\"type\":\"bytes32\"}],\"name\":\"join\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getRelationWith\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"acceptContactRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addContact\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"unblockMessagesFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"avatarUrl\",\"type\":\"bytes32\"}],\"name\":\"updateProfile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"encryption\",\"type\":\"bytes32\"}],\"name\":\"messageSentEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addContactEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"acceptContactEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"avatarUrl\",\"type\":\"bytes32\"}],\"name\":\"profileUpdateEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"blockContactEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"unblockContactEvent\",\"type\":\"event\"}]","ContractName":"EtherChat","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d6d29be5085ebf9f0df714e9866f3c65a949b89c41c6a8e3148d9a4d76610f02"}]}