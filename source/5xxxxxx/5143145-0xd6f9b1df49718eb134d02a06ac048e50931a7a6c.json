{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ZastrinPay {\r\n\r\n  /*\r\n   * Author: Mahesh Murthy\r\n   * Company: Zastrin, Inc\r\n   * Contact: mahesh@zastrin.com\r\n   */\r\n\r\n  address public owner;\r\n\r\n  struct paymentInfo {\r\n    uint userId;\r\n    uint amount;\r\n    uint purchasedAt;\r\n    bool refunded;\r\n    bool cashedOut;\r\n  }\r\n\r\n  mapping(uint => bool) coursesOffered;\r\n  mapping(address => mapping(uint => paymentInfo)) customers;\r\n\r\n  uint fallbackAmount;\r\n\r\n  event NewPayment(uint indexed _courseId, uint indexed _userId, address indexed _customer, uint _amount);\r\n  event RefundPayment(uint indexed _courseId, uint indexed _userId, address indexed _customer);\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function ZastrinPay() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function addCourse(uint _courseId) public onlyOwner {\r\n    coursesOffered[_courseId] = true;\r\n  }\r\n\r\n  function buyCourse(uint _courseId, uint _userId) public payable {\r\n    require(coursesOffered[_courseId]);\r\n    customers[msg.sender][_courseId].amount += msg.value;\r\n    customers[msg.sender][_courseId].purchasedAt = now;\r\n    customers[msg.sender][_courseId].userId = _userId;\r\n    NewPayment(_courseId, _userId, msg.sender, msg.value);\r\n  }\r\n\r\n  function getRefund(uint _courseId) public {\r\n    require(customers[msg.sender][_courseId].userId > 0);\r\n    require(customers[msg.sender][_courseId].refunded == false);\r\n    require(customers[msg.sender][_courseId].purchasedAt + (3 hours) > now);\r\n    customers[msg.sender][_courseId].refunded = true;\r\n    msg.sender.transfer(customers[msg.sender][_courseId].amount);\r\n    RefundPayment(_courseId, customers[msg.sender][_courseId].userId, msg.sender);\r\n  }\r\n\r\n  function cashOut(address _customer, uint _courseId) public onlyOwner {\r\n    require(customers[_customer][_courseId].refunded == false);\r\n    require(customers[_customer][_courseId].cashedOut == false);\r\n    require(customers[_customer][_courseId].purchasedAt + (3 hours) < now);\r\n    customers[_customer][_courseId].cashedOut = true;\r\n    owner.transfer(customers[_customer][_courseId].amount);\r\n  }\r\n\r\n  function cashOutFallbackAmount() public onlyOwner {\r\n    owner.transfer(fallbackAmount);\r\n  }\r\n\r\n  function() public payable {\r\n    fallbackAmount += msg.value;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_courseId\",\"type\":\"uint256\"}],\"name\":\"cashOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cashOutFallbackAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_courseId\",\"type\":\"uint256\"}],\"name\":\"addCourse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_courseId\",\"type\":\"uint256\"},{\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"buyCourse\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_courseId\",\"type\":\"uint256\"}],\"name\":\"getRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_courseId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_userId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"NewPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_courseId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_userId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"RefundPayment\",\"type\":\"event\"}]","ContractName":"ZastrinPay","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d01b8b32da953866b4b47edcd06b5e58c98a1ccee7f8552d27f9bfe3e85f9c53"}]}