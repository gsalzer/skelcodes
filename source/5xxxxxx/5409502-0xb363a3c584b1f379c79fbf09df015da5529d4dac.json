{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract Owned {\r\n\taddress public owner;\r\n\taddress public signer;\r\n\r\n    function Owned() public {\r\n    \towner = msg.sender;\r\n    \tsigner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n    \trequire(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\tmodifier onlySigner {\r\n    \trequire(msg.sender == signer);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n    \towner = newOwner;\r\n\t}\r\n\r\n\tfunction transferSignership(address newSigner) public onlyOwner {\r\n        signer = newSigner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Token {\r\n\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balances;\r\n\r\n\t// Mapping for allowance\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Approval(address indexed sender, address indexed spender, uint256 value);\r\n\r\n\tfunction ERC20Token(uint256 _supply, string _name, string _symbol)\r\n\t\tpublic\r\n\t{\r\n\t\t//initial mint\r\n        totalSupply = _supply * 10**uint256(decimals);\r\n        balances[msg.sender] = totalSupply;\r\n\r\n\t\t//set variables\r\n\t\tname=_name;\r\n\t\tsymbol=_symbol;\r\n\r\n    \t//trigger event\r\n        Transfer(0x0, msg.sender, totalSupply);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current tokens total supply\r\n\t */\r\n    function totalSupply()\r\n    \tpublic\r\n    \tconstant\r\n    \treturns (uint256)\r\n    {\r\n\t\treturn totalSupply;\r\n    }\r\n\r\n\t/**\r\n     * Get the token balance for account `tokenOwner`\r\n     */\r\n    function balanceOf(address _owner)\r\n    \tpublic\r\n    \tconstant\r\n    \treturns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n\t/**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value)\r\n    \tpublic\r\n    \treturns (bool success)\r\n    {\r\n\t\t// To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n      \t//set allowance\r\n      \tallowed[msg.sender][_spender] = _value;\r\n\r\n\t\t//trigger event\r\n      \tApproval(msg.sender, _spender, _value);\r\n\r\n\t\treturn true;\r\n    }\r\n\r\n    /**\r\n     * Show allowance\r\n     */\r\n    function allowance(address _owner, address _spender)\r\n    \tpublic\r\n    \tconstant\r\n    \treturns (uint256 remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\t/**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value)\r\n    \tinternal\r\n    \treturns (bool success)\r\n    {\r\n\t\t// Do not allow transfer to 0x0 or the token contract itself or from address to itself\r\n\t\trequire((_to != address(0)) && (_to != address(this)) && (_to != _from));\r\n\r\n        // Check if the sender has enough\r\n        require((_value > 0) && (balances[_from] >= _value));\r\n\r\n        // Check for overflows\r\n        require(balances[_to] + _value > balances[_to]);\r\n\r\n        // Subtract from the sender\r\n        balances[_from] -= _value;\r\n\r\n        // Add the same to the recipient\r\n        balances[_to] += _value;\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n\t/**\r\n      * Transfer tokens\r\n      *\r\n      * Send `_value` tokens to `_to` from your account\r\n      *\r\n      * @param _to The address of the recipient\r\n      * @param _value the amount to send\r\n      */\r\n    function transfer(address _to, uint256 _value)\r\n    \tpublic\r\n    \treturns (bool success)\r\n    {\r\n    \treturn _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n  \t/**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    \tpublic\r\n    \treturns (bool success)\r\n    {\r\n\t\t// Check allowance\r\n    \trequire(_value <= allowed[_from][msg.sender]);\r\n\r\n\t\t//decrement allowance\r\n\t\tallowed[_from][msg.sender] -= _value;\r\n\r\n    \t//transfer tokens\r\n        return _transfer(_from, _to, _value);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract MiracleTeleToken is ERC20Token, Owned {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Mapping for allowance\r\n    mapping (address => uint8) public delegations;\r\n\r\n\tmapping (address => uint256) public contributions;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Delegate(address indexed from, address indexed to);\r\n    event UnDelegate(address indexed from, address indexed to);\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Contribute(address indexed from, uint256 indexed value);\r\n    event Reward(address indexed from, uint256 indexed value);\r\n\r\n    /**\r\n\t * Initializes contract with initial supply tokens to the creator of the contract\r\n\t */\r\n    function MiracleTeleToken(uint256 _supply) ERC20Token(_supply, \"MiracleTele\", \"TELE\") public {}\r\n\r\n\t/**\r\n\t * Mint new tokens\r\n\t *\r\n\t * @param _value the amount of new tokens\r\n\t */\r\n    function mint(uint256 _value)\r\n        public\r\n        onlyOwner\r\n    {\r\n    \t// Prevent mine 0 tokens\r\n        require(_value > 0);\r\n\r\n    \t// Check overflow\r\n    \tbalances[owner] = balances[owner].add(_value);\r\n        totalSupply = totalSupply.add(_value);\r\n\r\n        Transfer(address(0), owner, _value);\r\n    }\r\n\r\n    function delegate(uint8 _v, bytes32 _r, bytes32 _s)\r\n        public\r\n        onlySigner\r\n    {\r\n\t\taddress allowes = ecrecover(getPrefixedHash(signer), _v, _r, _s);\r\n\r\n        delegations[allowes]=1;\r\n\r\n        Delegate(allowes, signer);\r\n    }\r\n\r\n\tfunction unDelegate(uint8 _v, bytes32 _r, bytes32 _s)\r\n        public\r\n        onlySigner\r\n    {\r\n    \taddress allowes = ecrecover(getPrefixedHash(signer), _v, _r, _s);\r\n\r\n        delegations[allowes]=0;\r\n\r\n        UnDelegate(allowes, signer);\r\n    }\r\n\r\n\t/**\r\n     * Show delegation\r\n     */\r\n    function delegation(address _owner)\r\n    \tpublic\r\n    \tconstant\r\n    \treturns (uint8 status)\r\n    {\r\n        return delegations[_owner];\r\n    }\r\n\r\n    /**\r\n     * @notice Hash a hash with `\"\\x19Ethereum Signed Message:\\n32\"`\r\n     * @param _message Data to ign\r\n     * @return signHash Hash to be signed.\r\n     */\r\n    function getPrefixedHash(address _message)\r\n        pure\r\n        public\r\n        returns(bytes32 signHash)\r\n    {\r\n        signHash = keccak256(\"\\x19Ethereum Signed Message:\\n20\", _message);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferDelegated(address _from, address _to, uint256 _value)\r\n        public\r\n        onlySigner\r\n        returns (bool success)\r\n    {\r\n        // Check delegate\r\n    \trequire(delegations[_from]==1);\r\n\r\n    \t//transfer tokens\r\n        return _transfer(_from, _to, _value);\r\n    }\r\n\r\n\t/**\r\n      * Contribute tokens from delegated address\r\n      *\r\n      * Contribute `_value` tokens `_from` address\r\n      *\r\n      * @param _from The address of the sender\r\n\t  * @param _value the amount to send\r\n      */\r\n    function contributeDelegated(address _from, uint256 _value)\r\n        public\r\n        onlySigner\r\n    {\r\n        // Check delegate\r\n    \trequire(delegations[_from]==1);\r\n\r\n        // Check if the sender has enough\r\n        require((_value > 0) && (balances[_from] >= _value));\r\n\r\n        // Subtract from the sender\r\n        balances[_from] = balances[_from].sub(_value);\r\n\r\n        contributions[_from] = contributions[_from].add(_value);\r\n\r\n        Contribute(_from, _value);\r\n    }\r\n\r\n\t/**\r\n      * Reward tokens from delegated address\r\n      *\r\n      * Reward `_value` tokens to `_from` address\r\n      *\r\n      * @param _from The address of the sender\r\n\t  * @param _value the amount to send\r\n      */\r\n    function reward(address _from, uint256 _value)\r\n        public\r\n        onlySigner\r\n    {\r\n        require(contributions[_from]>=_value);\r\n\r\n        contributions[_from] = contributions[_from].sub(_value);\r\n\r\n        balances[_from] = balances[_from].add(_value);\r\n\r\n        Reward(_from, _value);\r\n    }\r\n\r\n    /**\r\n     * Don't accept ETH, it is utility token\r\n     */\r\n\tfunction ()\r\n\t    public\r\n\t    payable\r\n\t{\r\n\t\trevert();\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"unDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"delegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"transferSignership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"contributeDelegated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferDelegated\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_message\",\"type\":\"address\"}],\"name\":\"getPrefixedHash\",\"outputs\":[{\"name\":\"signHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"delegation\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Delegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"UnDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Contribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MiracleTeleToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000008f0d180","Library":"","SwarmSource":"bzzr://b5239f953dbddd906d2d07ee57bd83922fa69f628a95cbaf8e6719ed3fd02fce"}]}