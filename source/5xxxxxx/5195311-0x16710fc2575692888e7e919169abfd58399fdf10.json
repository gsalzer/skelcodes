{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.20;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title StarCoin\r\n *\r\n * @dev Burnable Ownable ERC20 token\r\n */\r\ncontract StarCoin is MintableToken {\r\n\r\n  string public constant name = \"StarCoin\";\r\n  string public constant symbol = \"STAR\";\r\n  uint8 public constant decimals = 18;\r\n  uint public constant INITIAL_SUPPLY = 40000000 * 1 ether; //40M tokens accroding to https://starflow.com/ico/\r\n  uint public constant MAXIMUM_SUPPLY = 100000000 * 1 ether; // 100M tokens is maximum according to https://starflow.com/ico/\r\n\r\n  /* The finalizer contract that allows unlift the transfer limits on this token */\r\n  address public releaseAgent;\r\n\r\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\r\n  bool public released = false;\r\n\r\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\r\n  mapping (address => bool) public transferAgents;\r\n\r\n  /**\r\n   * Limit token transfer until the crowdsale is over.\r\n   *\r\n   */\r\n  modifier canTransfer(address _sender) {\r\n    require(released || transferAgents[_sender]);\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only before or after the tokens have been released */\r\n  modifier inReleaseState(bool releaseState) {\r\n    require(releaseState == released);\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only by a whitelisted release agent. */\r\n  modifier onlyReleaseAgent() {\r\n    require(msg.sender == releaseAgent);\r\n    _;\r\n  }\r\n\r\n  /** Restrict minting by the MAXIMUM_SUPPLY allowed **/\r\n  modifier bellowMaximumSupply(uint _amount) {\r\n    require(_amount + totalSupply_ < MAXIMUM_SUPPLY);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Constructor that gives msg.sender all of existing tokens.\r\n   */\r\n  function StarCoin() {\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n\r\n\r\n  /**\r\n   * Set the contract that can call release and make the token transferable.\r\n   *\r\n   * Design choice. Allow reset the release agent to fix fat finger mistakes.\r\n   */\r\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\r\n    require(addr != 0x0);\r\n\r\n    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\r\n    releaseAgent = addr;\r\n  }\r\n\r\n  function release() onlyReleaseAgent inReleaseState(false) public {\r\n    released = true;\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\r\n   */\r\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\r\n    require(addr != 0x0);\r\n    transferAgents[addr] = state;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\r\n    // Call Burnable.transfer()\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\r\n    // Call Burnable.transferForm()\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n    /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint _amount) onlyOwner canMint bellowMaximumSupply(_amount) public returns (bool) {\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    return super.finishMinting();\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract InvestorWhiteList is Ownable {\r\n  mapping (address => bool) public investorWhiteList;\r\n\r\n  mapping (address => address) public referralList;\r\n\r\n  function InvestorWhiteList() {\r\n\r\n  }\r\n\r\n  function addInvestorToWhiteList(address investor) external onlyOwner {\r\n    require(investor != 0x0 && !investorWhiteList[investor]);\r\n    investorWhiteList[investor] = true;\r\n  }\r\n\r\n  function removeInvestorFromWhiteList(address investor) external onlyOwner {\r\n    require(investor != 0x0 && investorWhiteList[investor]);\r\n    investorWhiteList[investor] = false;\r\n  }\r\n\r\n  //when new user will contribute ICO contract will automatically send bonus to referral\r\n  function addReferralOf(address investor, address referral) external onlyOwner {\r\n    require(investor != 0x0 && referral != 0x0 && referralList[investor] == 0x0 && investor != referral);\r\n    referralList[investor] = referral;\r\n  }\r\n\r\n  function isAllowed(address investor) constant external returns (bool result) {\r\n    return investorWhiteList[investor];\r\n  }\r\n\r\n  function getReferralOf(address investor) constant external returns (address result) {\r\n    return referralList[investor];\r\n  }\r\n}\r\n\r\ncontract StarCoinPreSale is Pausable {\r\n  using SafeMath for uint;\r\n\r\n  string public constant name = \"StarCoin Token ICO\";\r\n\r\n  StarCoin public token;\r\n\r\n  address public beneficiary;\r\n\r\n  InvestorWhiteList public investorWhiteList;\r\n\r\n  uint public starEthRate;\r\n\r\n  uint public hardCap;\r\n\r\n  uint public softCap;\r\n\r\n  uint public collected = 0;\r\n\r\n  uint public tokensSold = 0;\r\n\r\n  uint public weiRefunded = 0;\r\n\r\n  uint public startBlock;\r\n\r\n  uint public endBlock;\r\n\r\n  bool public softCapReached = false;\r\n\r\n  bool public crowdsaleFinished = false;\r\n\r\n  mapping (address => uint) public deposited;\r\n\r\n  uint constant VOLUME_20_REF_7 = 5000 ether;\r\n\r\n  uint constant VOLUME_15_REF_6 = 2000 ether;\r\n\r\n  uint constant VOLUME_12d5_REF_5d5 = 1000 ether;\r\n\r\n  uint constant VOLUME_10_REF_5 = 500 ether;\r\n\r\n  uint constant VOLUME_7_REF_4 = 250 ether;\r\n\r\n  uint constant VOLUME_5_REF_3 = 100 ether;\r\n\r\n  event SoftCapReached(uint softCap);\r\n\r\n  event NewContribution(address indexed holder, uint tokenAmount, uint etherAmount);\r\n\r\n  event NewReferralTransfer(address indexed investor, address indexed referral, uint tokenAmount);\r\n\r\n  event Refunded(address indexed holder, uint amount);\r\n\r\n  modifier icoActive() {\r\n    require(block.number >= startBlock && block.number < endBlock);\r\n    _;\r\n  }\r\n\r\n  modifier icoEnded() {\r\n    require(block.number >= endBlock);\r\n    _;\r\n  }\r\n\r\n  modifier minInvestment() {\r\n    require(msg.value >= 0.1 * 1 ether);\r\n    _;\r\n  }\r\n\r\n  modifier inWhiteList() {\r\n    require(investorWhiteList.isAllowed(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function StarCoinPreSale(\r\n    uint _hardCapSTAR,\r\n    uint _softCapSTAR,\r\n    address _token,\r\n    address _beneficiary,\r\n    address _investorWhiteList,\r\n    uint _baseStarEthPrice,\r\n\r\n    uint _startBlock,\r\n    uint _endBlock\r\n  ) {\r\n    hardCap = _hardCapSTAR.mul(1 ether);\r\n    softCap = _softCapSTAR.mul(1 ether);\r\n\r\n    token = StarCoin(_token);\r\n    beneficiary = _beneficiary;\r\n    investorWhiteList = InvestorWhiteList(_investorWhiteList);\r\n\r\n    startBlock = _startBlock;\r\n    endBlock = _endBlock;\r\n\r\n    starEthRate = _baseStarEthPrice;\r\n  }\r\n\r\n  function() payable minInvestment inWhiteList {\r\n    doPurchase();\r\n  }\r\n\r\n  function refund() external icoEnded {\r\n    require(softCapReached == false);\r\n    require(deposited[msg.sender] > 0);\r\n\r\n    uint refund = deposited[msg.sender];\r\n\r\n    deposited[msg.sender] = 0;\r\n    msg.sender.transfer(refund);\r\n\r\n    weiRefunded = weiRefunded.add(refund);\r\n    Refunded(msg.sender, refund);\r\n  }\r\n\r\n  function withdraw() external onlyOwner {\r\n    require(softCapReached);\r\n    beneficiary.transfer(collected);\r\n    token.transfer(beneficiary, token.balanceOf(this));\r\n    crowdsaleFinished = true;\r\n  }\r\n\r\n  function calculateBonus(uint tokens) internal constant returns (uint bonus) {\r\n    if (msg.value >= VOLUME_20_REF_7) {\r\n      return tokens.mul(20).div(100);\r\n    }\r\n\r\n    if (msg.value >= VOLUME_15_REF_6) {\r\n      return tokens.mul(15).div(100);\r\n    }\r\n\r\n    if (msg.value >= VOLUME_12d5_REF_5d5) {\r\n      return tokens.mul(125).div(1000);\r\n    }\r\n\r\n    if (msg.value >= VOLUME_10_REF_5) {\r\n      return tokens.mul(10).div(100);\r\n    }\r\n\r\n    if (msg.value >= VOLUME_7_REF_4) {\r\n      return tokens.mul(7).div(100);\r\n    }\r\n\r\n    if (msg.value >= VOLUME_5_REF_3) {\r\n      return tokens.mul(5).div(100);\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  function calculateReferralBonus(uint tokens) internal constant returns (uint bonus) {\r\n    if (msg.value >= VOLUME_20_REF_7) {\r\n      return tokens.mul(7).div(100);\r\n    }\r\n\r\n    if (msg.value >= VOLUME_15_REF_6) {\r\n      return tokens.mul(6).div(100);\r\n    }\r\n\r\n    if (msg.value >= VOLUME_12d5_REF_5d5) {\r\n      return tokens.mul(55).div(1000);\r\n    }\r\n\r\n    if (msg.value >= VOLUME_10_REF_5) {\r\n      return tokens.mul(5).div(100);\r\n    }\r\n\r\n    if (msg.value >= VOLUME_7_REF_4) {\r\n      return tokens.mul(4).div(100);\r\n    }\r\n\r\n    if (msg.value >= VOLUME_5_REF_3) {\r\n      return tokens.mul(3).div(100);\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  function setNewWhiteList(address newWhiteList) external onlyOwner {\r\n    require(newWhiteList != 0x0);\r\n    investorWhiteList = InvestorWhiteList(newWhiteList);\r\n  }\r\n\r\n  function doPurchase() private icoActive whenNotPaused {\r\n    require(!crowdsaleFinished);\r\n\r\n    uint tokens = msg.value.mul(starEthRate);\r\n    uint referralBonus = calculateReferralBonus(tokens);\r\n    address referral = investorWhiteList.getReferralOf(msg.sender);\r\n\r\n    tokens = tokens.add(calculateBonus(tokens));\r\n\r\n    uint newTokensSold = tokensSold.add(tokens);\r\n\r\n    if (referralBonus > 0 && referral != 0x0) {\r\n      newTokensSold = newTokensSold.add(referralBonus);\r\n    }\r\n\r\n    require(newTokensSold <= hardCap);\r\n\r\n    if (!softCapReached && newTokensSold >= softCap) {\r\n      softCapReached = true;\r\n      SoftCapReached(softCap);\r\n    }\r\n\r\n    collected = collected.add(msg.value);\r\n\r\n    tokensSold = newTokensSold;\r\n\r\n    deposited[msg.sender] = deposited[msg.sender].add(msg.value);\r\n\r\n    token.transfer(msg.sender, tokens);\r\n    NewContribution(msg.sender, tokens, msg.value);\r\n\r\n    if (referralBonus > 0 && referral != 0x0) {\r\n      token.transfer(referral, referralBonus);\r\n      NewReferralTransfer(msg.sender, referral, referralBonus);\r\n    }\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner icoEnded {\r\n    super.transferOwnership(newOwner);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starEthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWhiteList\",\"type\":\"address\"}],\"name\":\"setNewWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_hardCapSTAR\",\"type\":\"uint256\"},{\"name\":\"_softCapSTAR\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_investorWhiteList\",\"type\":\"address\"},{\"name\":\"_baseStarEthPrice\",\"type\":\"uint256\"},{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"softCap\",\"type\":\"uint256\"}],\"name\":\"SoftCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"NewContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"NewReferralTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"StarCoinPreSale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000006091b800000000000000000000000000000000000000000000000000000000000001ea000000000000000000000000a765dc5298efaeb5faf948c3103234988b4f0c9c0000000000000000000000007d9778e7607635255c9ec34c078e98ab1ab754a70000000000000000000000001fd6cf63b36e1258ddea7d0accd3838f0fe1aab700000000000000000000000000000000000000000000000000000000000001ea00000000000000000000000000000000000000000000000000000000004f543400000000000000000000000000000000000000000000000000000000005095b0","Library":"","SwarmSource":"bzzr://68fd610da64dd830718ea5afe257fb50b8f1cae0211a2bcbc3788d75aae6050b"}]}