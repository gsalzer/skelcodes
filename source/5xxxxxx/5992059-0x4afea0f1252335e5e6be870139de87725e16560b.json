{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\n//Math operations with safety checks that throw on error\r\n\r\nlibrary SafeMath {\r\n\r\n    //multiply\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    //divide\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    //subtract\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    //addition\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public contractOwner;\r\n\r\n    event TransferredOwnership(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n    constructor() public {        \r\n        contractOwner = msg.sender;\r\n    }\r\n\r\n    modifier ownerOnly() {\r\n        require(msg.sender == contractOwner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) internal ownerOnly {\r\n        require(_newOwner != address(0));\r\n        contractOwner = _newOwner;\r\n\r\n        emit TransferredOwnership(contractOwner, _newOwner);\r\n    }\r\n\r\n}\r\n\r\n// Natmin vesting contract for team members\r\ncontract NatminVesting is Ownable {\r\n    struct Vesting {        \r\n        uint256 amount;\r\n        uint256 endTime;\r\n    }\r\n    mapping(address => Vesting) internal vestings;\r\n\r\n    function addVesting(address _user, uint256 _amount) public ;\r\n    function getVestedAmount(address _user) public view returns (uint256 _amount);\r\n    function getVestingEndTime(address _user) public view returns (uint256 _endTime);\r\n    function vestingEnded(address _user) public view returns (bool) ;\r\n    function endVesting(address _user) public ;\r\n}\r\n\r\n//ERC20 Standard interface specification\r\ncontract ERC20Standard {\r\n    function balanceOf(address _user) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n//ERC223 Standard interface specification\r\ncontract ERC223Standard {\r\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value, bytes _data);\r\n}\r\n\r\n//ERC223 function to handle incoming token transfers\r\ncontract ERC223ReceivingContract { \r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public pure {\r\n        _from;\r\n        _value;\r\n        _data;\r\n    }\r\n}\r\n\r\ncontract BurnToken is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    function burn(uint256 _value) public;\r\n    function _burn(address _user, uint256 _value) internal;\r\n    event Burn(address indexed _user, uint256 _value);\r\n}\r\n\r\n//NatminToken implements the ERC20, ERC223 standard methods\r\ncontract NatminToken is ERC20Standard, ERC223Standard, Ownable, NatminVesting, BurnToken {\r\n    using SafeMath for uint256;\r\n\r\n    string _name = \"Natmin\";\r\n    string _symbol = \"NAT\";\r\n    string _standard = \"ERC20 / ERC223\";\r\n    uint256 _decimals = 18; // same value as wei\r\n    uint256 _totalSupply;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    constructor(uint256 _supply) public {\r\n        require(_supply != 0);\r\n        _totalSupply = _supply * (10 ** 18);\r\n        balances[contractOwner] = _totalSupply;\r\n    }\r\n\r\n    // Returns the _name of the token\r\n    function name() public view returns (string) {\r\n        return _name;        \r\n    }\r\n\r\n    // Returns the _symbol of the token\r\n    function symbol() public view returns (string) {\r\n        return _symbol;\r\n    }\r\n\r\n    // Returns the _standard of the token\r\n    function standard() public view returns (string) {\r\n        return _standard;\r\n    }\r\n\r\n    // Returns the _decimals of the token\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    // Function to return the total supply of the token\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // Function to return the balance of a specified address\r\n    function balanceOf(address _user) public view returns (uint256 balance){\r\n        return balances[_user];\r\n    }   \r\n\r\n    // Transfer function to be compatable with ERC20 Standard\r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n        bytes memory _empty;\r\n        if(isContract(_to)){\r\n            return transferToContract(_to, _value, _empty);\r\n        }else{\r\n            return transferToAddress(_to, _value, _empty);\r\n        }\r\n    }\r\n\r\n    // Transfer function to be compatable with ERC223 Standard\r\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\r\n        if(isContract(_to)){\r\n            return transferToContract(_to, _value, _data);\r\n        }else{\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    // This function checks if the address is a contract or wallet\r\n    // If the codeLength is greater than 0, it is a contract\r\n    function isContract(address _to) internal view returns (bool) {\r\n        uint256 _codeLength;\r\n\r\n        assembly {\r\n            _codeLength := extcodesize(_to)\r\n        }\r\n\r\n        return _codeLength > 0;\r\n    }\r\n\r\n    // This function to be used if the target is a contract address\r\n    function transferToContract(address _to, uint256 _value, bytes _data) internal returns (bool) {\r\n        require(balances[msg.sender] >= _value);\r\n        require(vestingEnded(msg.sender));\r\n        \r\n        // This will override settings and allow contract owner to send to contract\r\n        if(msg.sender != contractOwner){\r\n            ERC223ReceivingContract _tokenReceiver = ERC223ReceivingContract(_to);\r\n            _tokenReceiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    // This function to be used if the target is a normal eth/wallet address \r\n    function transferToAddress(address _to, uint256 _value, bytes _data) internal returns (bool) {\r\n        require(balances[msg.sender] >= _value);\r\n        require(vestingEnded(msg.sender));\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    // ERC20 standard function\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(_value <= balances[_from]);\r\n        require(vestingEnded(_from));\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    // ERC20 standard function\r\n    function approve(address _spender, uint256 _value) public returns (bool success){\r\n        allowed[msg.sender][_spender] = 0;\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    // ERC20 standard function\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining){\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // Stops any attempt from sending Ether to this contract\r\n    function () public {\r\n        revert();\r\n    }\r\n\r\n    // public function to call the _burn function \r\n    function burn(uint256 _value) public ownerOnly {\r\n        _burn(msg.sender, _value);\r\n    }\r\n\r\n    // Burn the specified amount of tokens by the owner\r\n    function _burn(address _user, uint256 _value) internal ownerOnly {\r\n        require(balances[_user] >= _value);\r\n\r\n        balances[_user] = balances[_user].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        \r\n        emit Burn(_user, _value);\r\n        emit Transfer(_user, address(0), _value);\r\n\r\n        bytes memory _empty;\r\n        emit Transfer(_user, address(0), _value, _empty);\r\n    }\r\n\r\n    // Create a vesting entry for the specified user\r\n    function addVesting(address _user, uint256 _amount) public ownerOnly {\r\n        vestings[_user].amount = _amount;\r\n        vestings[_user].endTime = now + 180 days;\r\n    }\r\n\r\n    // Returns the vested amount for a specified user\r\n    function getVestedAmount(address _user) public view returns (uint256 _amount) {\r\n        _amount = vestings[_user].amount;\r\n        return _amount;\r\n    }\r\n\r\n    // Returns the vested end time for a specified user\r\n    function getVestingEndTime(address _user) public view returns (uint256 _endTime) {\r\n        _endTime = vestings[_user].endTime;\r\n        return _endTime;\r\n    }\r\n\r\n    // Checks if the venting period is over for a specified user\r\n    function vestingEnded(address _user) public view returns (bool) {\r\n        if(vestings[_user].endTime <= now) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Manual end vested time \r\n    function endVesting(address _user) public ownerOnly {\r\n        vestings[_user].endTime = now;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVestingEndTime\",\"outputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"endVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVestedAmount\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"vestingEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TransferredOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"NatminToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000017d78400","Library":"","SwarmSource":"bzzr://d3b6d4fbdfe9a9e2b9830828b19ebc9c394b1189b9577697fa8cf5e8a6808b3e"}]}