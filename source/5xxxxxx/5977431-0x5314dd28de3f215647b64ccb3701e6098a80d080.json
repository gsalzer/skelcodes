{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract ADM312 {\r\n\r\n  address public COO;\r\n  address public CTO;\r\n  address public CFO;\r\n  address private coreAddress;\r\n  address public logicAddress;\r\n  address public superAddress;\r\n\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == COO || msg.sender == CTO || msg.sender == CFO);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyContract() {\r\n    require(msg.sender == coreAddress || msg.sender == logicAddress || msg.sender == superAddress);\r\n    _;\r\n  }\r\n    \r\n  modifier onlyContractAdmin() {\r\n    require(msg.sender == coreAddress || msg.sender == logicAddress || msg.sender == superAddress || msg.sender == COO || msg.sender == CTO || msg.sender == CFO);\r\n     _;\r\n  }\r\n  \r\n  function transferAdmin(address _newAdminAddress1, address _newAdminAddress2) public onlyAdmin {\r\n    if(msg.sender == COO)\r\n    {\r\n        CTO = _newAdminAddress1;\r\n        CFO = _newAdminAddress2;\r\n    }\r\n    if(msg.sender == CTO)\r\n    {\r\n        COO = _newAdminAddress1;\r\n        CFO = _newAdminAddress2;\r\n    }\r\n    if(msg.sender == CFO)\r\n    {\r\n        COO = _newAdminAddress1;\r\n        CTO = _newAdminAddress2;\r\n    }\r\n  }\r\n  \r\n  function transferContract(address _newCoreAddress, address _newLogicAddress, address _newSuperAddress) external onlyAdmin {\r\n    coreAddress  = _newCoreAddress;\r\n    logicAddress = _newLogicAddress;\r\n    superAddress = _newSuperAddress;\r\n    SetCoreInterface(_newLogicAddress).setCoreContract(_newCoreAddress);\r\n    SetCoreInterface(_newSuperAddress).setCoreContract(_newCoreAddress);\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract ERC721 {\r\n    \r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function totalSupply() public view returns (uint256 total);\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  \r\n}\r\n\r\ncontract SetCoreInterface {\r\n   function setCoreContract(address _neWCoreAddress) external; \r\n}\r\n\r\ncontract CaData is ADM312, ERC721 {\r\n    \r\n    function CaData() public {\r\n        COO = msg.sender;\r\n        CTO = msg.sender;\r\n        CFO = msg.sender;\r\n        createCustomAtom(0,0,4,0,0,0,0);\r\n    }\r\n    \r\n    function kill() external\r\n\t{\r\n\t    require(msg.sender == COO);\r\n\t\tselfdestruct(msg.sender);\r\n\t}\r\n    \r\n    function() public payable{}\r\n    \r\n    uint public randNonce  = 0;\r\n    \r\n    struct Atom \r\n    {\r\n      uint64   dna;\r\n      uint8    gen;\r\n      uint8    lev;\r\n      uint8    cool;\r\n      uint32   sons;\r\n      uint64   fath;\r\n\t  uint64   moth;\r\n\t  uint128  isRent;\r\n\t  uint128  isBuy;\r\n\t  uint32   isReady;\r\n    }\r\n    \r\n    Atom[] public atoms;\r\n    \r\n    mapping (uint64  => bool) public dnaExist;\r\n    mapping (address => bool) public bonusReceived;\r\n    mapping (address => uint) public ownerAtomsCount;\r\n    mapping (uint => address) public atomOwner;\r\n    \r\n    event NewWithdraw(address sender, uint balance);\r\n    \r\n    function createCustomAtom(uint64 _dna, uint8 _gen, uint8 _lev, uint8 _cool, uint128 _isRent, uint128 _isBuy, uint32 _isReady) public onlyAdmin {\r\n        require(dnaExist[_dna]==false && _cool+_lev>=4);\r\n        Atom memory newAtom = Atom(_dna, _gen, _lev, _cool, 0, 2**50, 2**50, _isRent, _isBuy, _isReady);\r\n        uint id = atoms.push(newAtom) - 1;\r\n        atomOwner[id] = msg.sender;\r\n        ownerAtomsCount[msg.sender]++;\r\n        dnaExist[_dna] = true;\r\n    }\r\n    \r\n    function withdrawBalance() public payable onlyAdmin {\r\n\t\tNewWithdraw(msg.sender, address(this).balance);\r\n        CFO.transfer(address(this).balance);\r\n    }\r\n        \r\n    function incRandNonce() external onlyContract {\r\n        randNonce++;\r\n    }\r\n    \r\n    function setDnaExist(uint64 _dna, bool _newDnaLocking) external onlyContractAdmin {\r\n        dnaExist[_dna] = _newDnaLocking;\r\n    }\r\n    \r\n    function setBonusReceived(address _add, bool _newBonusLocking) external onlyContractAdmin {\r\n        bonusReceived[_add] = _newBonusLocking;\r\n    }\r\n    \r\n    function setOwnerAtomsCount(address _owner, uint _newCount) external onlyContract {\r\n        ownerAtomsCount[_owner] = _newCount;\r\n    }\r\n    \r\n    function setAtomOwner(uint _atomId, address _owner) external onlyContract {\r\n        atomOwner[_atomId] = _owner;\r\n    }\r\n        \r\n    function pushAtom(uint64 _dna, uint8 _gen, uint8 _lev, uint8 _cool, uint32 _sons, uint64 _fathId, uint64 _mothId, uint128 _isRent, uint128 _isBuy, uint32 _isReady) external onlyContract returns (uint id) {\r\n        Atom memory newAtom = Atom(_dna, _gen, _lev, _cool, _sons, _fathId, _mothId, _isRent, _isBuy, _isReady);\r\n        id = atoms.push(newAtom) -1;\r\n    }\r\n\t\r\n\tfunction setAtomDna(uint _atomId, uint64 _dna) external onlyAdmin {\r\n        atoms[_atomId].dna = _dna;\r\n    }\r\n\t\r\n\tfunction setAtomGen(uint _atomId, uint8 _gen) external onlyAdmin {\r\n        atoms[_atomId].gen = _gen;\r\n    }\r\n    \r\n    function setAtomLev(uint _atomId, uint8 _lev) external onlyContract {\r\n        atoms[_atomId].lev = _lev;\r\n    }\r\n    \r\n    function setAtomCool(uint _atomId, uint8 _cool) external onlyContract {\r\n        atoms[_atomId].cool = _cool;\r\n    }\r\n    \r\n    function setAtomSons(uint _atomId, uint32 _sons) external onlyContract {\r\n        atoms[_atomId].sons = _sons;\r\n    }\r\n    \r\n    function setAtomFath(uint _atomId, uint64 _fath) external onlyContract {\r\n        atoms[_atomId].fath = _fath;\r\n    }\r\n    \r\n    function setAtomMoth(uint _atomId, uint64 _moth) external onlyContract {\r\n        atoms[_atomId].moth = _moth;\r\n    }\r\n    \r\n    function setAtomIsRent(uint _atomId, uint128 _isRent) external onlyContract {\r\n        atoms[_atomId].isRent = _isRent;\r\n    }\r\n    \r\n    function setAtomIsBuy(uint _atomId, uint128 _isBuy) external onlyContract {\r\n        atoms[_atomId].isBuy = _isBuy;\r\n    }\r\n    \r\n    function setAtomIsReady(uint _atomId, uint32 _isReady) external onlyContractAdmin {\r\n        atoms[_atomId].isReady = _isReady;\r\n    }\r\n    \r\n    //ERC721\r\n    \r\n    mapping (uint => address) tokenApprovals;\r\n    \r\n    function totalSupply() public view returns (uint256 total){\r\n  \t    return atoms.length;\r\n  \t}\r\n  \t\r\n  \tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return ownerAtomsCount[_owner];\r\n    }\r\n    \r\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\r\n        return atomOwner[_tokenId];\r\n    }\r\n      \r\n    function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n        atoms[_tokenId].isBuy  = 0;\r\n        atoms[_tokenId].isRent = 0;\r\n        ownerAtomsCount[_to]++;\r\n        ownerAtomsCount[_from]--;\r\n        atomOwner[_tokenId] = _to;\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n  \r\n    function transfer(address _to, uint256 _tokenId) public {\r\n        require(msg.sender == atomOwner[_tokenId]);\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n    \r\n    function approve(address _to, uint256 _tokenId) public {\r\n        require(msg.sender == atomOwner[_tokenId]);\r\n        tokenApprovals[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n    \r\n    function takeOwnership(uint256 _tokenId) public {\r\n        require(tokenApprovals[_tokenId] == msg.sender);\r\n        _transfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n    }\r\n    \r\n}\r\n\r\ncontract CaCoreInterface {\r\n    function createCombinedAtom(uint, uint) external returns (uint);\r\n    function createRandomAtom() external returns (uint);\r\n}\r\n\r\ncontract CryptoAtomsLogic{\r\n    \r\n    address public CaDataAddress = 0x9b3554E6FC4F81531F6D43b611258bd1058ef6D5;\r\n    CaData public CaDataContract = CaData(CaDataAddress);\r\n    CaCoreInterface private CaCoreContract;\r\n    \r\n    bool public pauseMode = false;\r\n    bool public bonusMode  = true;\r\n    \r\n    uint128   public newAtomFee = 1 finney;\r\n    \r\n    uint8[4]  public levelupValues  = [0, \r\n                                       2, \r\n                                       6, \r\n                                       12];\r\n\r\n    event NewSetRent(address sender, uint atom);\r\n    event NewSetBuy(address sender, uint atom);\r\n    event NewUnsetRent(address sender, uint atom);\r\n    event NewUnsetBuy(address sender, uint atom);\r\n    event NewAutoRentAtom(address sender, uint atom);\r\n    event NewRentAtom(address sender, uint atom, address receiver, uint amount);\r\n    event NewBuyAtom(address sender, uint atom, address receiver, uint amount);\r\n    event NewEvolveAtom(address sender, uint atom);\r\n    event NewBonusAtom(address sender, uint atom);\r\n    \r\n    function() public payable{}\r\n    \r\n    function kill() external\r\n\t{\r\n\t    require(msg.sender == CaDataContract.CTO());\r\n\t\tselfdestruct(msg.sender); \r\n\t}\r\n\t\r\n\tmodifier onlyAdmin() {\r\n      require(msg.sender == CaDataContract.COO() || msg.sender == CaDataContract.CFO() || msg.sender == CaDataContract.CTO());\r\n      _;\r\n     }\r\n\t\r\n\tmodifier onlyActive() {\r\n        require(pauseMode == false);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwnerOf(uint _atomId, bool _flag) {\r\n        require((msg.sender == CaDataContract.atomOwner(_atomId)) == _flag);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyRenting(uint _atomId, bool _flag) {\r\n        uint128 isRent;\r\n        (,,,,,,,isRent,,) = CaDataContract.atoms(_atomId);\r\n        require((isRent > 0) == _flag);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyBuying(uint _atomId, bool _flag) {\r\n        uint128 isBuy;\r\n        (,,,,,,,,isBuy,) = CaDataContract.atoms(_atomId);\r\n        require((isBuy > 0) == _flag);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyReady(uint _atomId) {\r\n        uint32 isReady;\r\n        (,,,,,,,,,isReady) = CaDataContract.atoms(_atomId);\r\n        require(isReady <= now);\r\n        _;\r\n    }\r\n    \r\n    modifier beDifferent(uint _atomId1, uint _atomId2) {\r\n        require(_atomId1 != _atomId2);\r\n        _;\r\n    }\r\n    \r\n    function setCoreContract(address _neWCoreAddress) external {\r\n        require(msg.sender == CaDataAddress);\r\n        CaCoreContract = CaCoreInterface(_neWCoreAddress);\r\n    }\r\n    \r\n    function setPauseMode(bool _newPauseMode) external onlyAdmin {\r\n        pauseMode = _newPauseMode;\r\n    }\r\n    \r\n    function setGiftMode(bool _newBonusMode) external onlyAdmin {\r\n        bonusMode = _newBonusMode;\r\n    }\r\n    \r\n    function setFee(uint128 _newFee) external onlyAdmin {\r\n        newAtomFee = _newFee;\r\n    }\r\n    \r\n    function setLevelup(uint8[4] _newLevelup) external onlyAdmin {\r\n        levelupValues = _newLevelup;\r\n    }\r\n    \r\n    function setIsRentByAtom(uint _atomId, uint128 _fee) external onlyActive onlyOwnerOf(_atomId,true) onlyRenting(_atomId, false) onlyReady(_atomId) {\r\n\t    require(_fee > 0);\r\n\t    CaDataContract.setAtomIsRent(_atomId,_fee);\r\n\t    NewSetRent(msg.sender,_atomId);\r\n  \t}\r\n  \t\r\n  \tfunction setIsBuyByAtom(uint _atomId, uint128 _fee) external onlyActive onlyOwnerOf(_atomId,true) onlyBuying(_atomId, false){\r\n\t    require(_fee > 0);\r\n\t    CaDataContract.setAtomIsBuy(_atomId,_fee);\r\n\t    NewSetBuy(msg.sender,_atomId);\r\n  \t}\r\n  \t\r\n  \tfunction unsetIsRentByAtom(uint _atomId) external onlyActive onlyOwnerOf(_atomId, true) onlyRenting(_atomId, true){\r\n\t    CaDataContract.setAtomIsRent(_atomId,0);\r\n\t    NewUnsetRent(msg.sender,_atomId);\r\n  \t}\r\n  \t\r\n  \tfunction unsetIsBuyByAtom(uint _atomId) external onlyActive onlyOwnerOf(_atomId, true) onlyBuying(_atomId, true){\r\n\t    CaDataContract.setAtomIsBuy(_atomId,0);\r\n\t    NewUnsetBuy(msg.sender,_atomId);\r\n  \t}\r\n  \t\r\n  \tfunction autoRentByAtom(uint _atomId, uint _ownedId) external payable onlyActive beDifferent(_atomId, _ownedId) onlyOwnerOf(_atomId, true) onlyOwnerOf(_ownedId,true) onlyReady(_atomId) onlyReady(_ownedId)  {\r\n        require(newAtomFee == msg.value);\r\n        CaDataAddress.transfer(newAtomFee);\r\n        uint id = CaCoreContract.createCombinedAtom(_atomId,_ownedId);\r\n        NewAutoRentAtom(msg.sender,id);\r\n  \t}\r\n  \t\r\n  \t function rentByAtom(uint _atomId, uint _ownedId) external payable onlyActive beDifferent(_atomId, _ownedId) onlyOwnerOf(_ownedId, true) onlyRenting(_atomId, true) onlyReady(_ownedId) {\r\n\t    address owner = CaDataContract.atomOwner(_atomId);\r\n\t    uint128 isRent;\r\n        (,,,,,,,isRent,,) = CaDataContract.atoms(_atomId);\r\n\t    require(isRent + newAtomFee == msg.value);\r\n\t    owner.transfer(isRent);\r\n\t    CaDataAddress.transfer(newAtomFee);\r\n        uint id = CaCoreContract.createCombinedAtom(_atomId,_ownedId);\r\n        NewRentAtom(msg.sender,id,owner,isRent);\r\n  \t}\r\n  \t\r\n  \tfunction buyByAtom(uint _atomId) external payable onlyActive onlyOwnerOf(_atomId, false) onlyBuying(_atomId, true) {\r\n  \t    address owner = CaDataContract.atomOwner(_atomId);\r\n  \t    uint128 isBuy;\r\n        (,,,,,,,,isBuy,) = CaDataContract.atoms(_atomId);\r\n\t    require(isBuy == msg.value);\r\n\t    owner.transfer(isBuy);\r\n        CaDataContract.setAtomIsBuy(_atomId,0);\r\n        CaDataContract.setAtomIsRent(_atomId,0);\r\n        CaDataContract.setOwnerAtomsCount(msg.sender,CaDataContract.ownerAtomsCount(msg.sender)+1);\r\n        CaDataContract.setOwnerAtomsCount(owner,CaDataContract.ownerAtomsCount(owner)-1);\r\n        CaDataContract.setAtomOwner(_atomId,msg.sender);\r\n        NewBuyAtom(msg.sender,_atomId,owner,isBuy);\r\n  \t}\r\n  \t\r\n  \tfunction evolveByAtom(uint _atomId) external onlyActive onlyOwnerOf(_atomId, true) {\r\n  \t    uint8 lev;\r\n  \t    uint8 cool;\r\n  \t    uint32 sons;\r\n  \t    (,,lev,cool,sons,,,,,) = CaDataContract.atoms(_atomId);\r\n  \t    require(lev < 4 && sons >= levelupValues[lev]);\r\n  \t    CaDataContract.setAtomLev(_atomId,lev+1);\r\n  \t    CaDataContract.setAtomCool(_atomId,cool-1);\r\n        NewEvolveAtom(msg.sender,_atomId);\r\n  \t}\r\n  \t\r\n  \tfunction receiveBonus() onlyActive external {\r\n  \t    require(bonusMode == true && CaDataContract.bonusReceived(msg.sender) == false);\r\n  \t    CaDataContract.setBonusReceived(msg.sender,true);\r\n        uint id = CaCoreContract.createRandomAtom();\r\n        NewBonusAtom(msg.sender,id);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_atomId\",\"type\":\"uint256\"}],\"name\":\"evolveByAtom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_atomId\",\"type\":\"uint256\"},{\"name\":\"_ownedId\",\"type\":\"uint256\"}],\"name\":\"rentByAtom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint128\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_atomId\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint128\"}],\"name\":\"setIsRentByAtom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_atomId\",\"type\":\"uint256\"},{\"name\":\"_ownedId\",\"type\":\"uint256\"}],\"name\":\"autoRentByAtom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_atomId\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint128\"}],\"name\":\"setIsBuyByAtom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CaDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CaDataAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLevelup\",\"type\":\"uint8[4]\"}],\"name\":\"setLevelup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_atomId\",\"type\":\"uint256\"}],\"name\":\"unsetIsBuyByAtom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_neWCoreAddress\",\"type\":\"address\"}],\"name\":\"setCoreContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBonusMode\",\"type\":\"bool\"}],\"name\":\"setGiftMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelupValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPauseMode\",\"type\":\"bool\"}],\"name\":\"setPauseMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_atomId\",\"type\":\"uint256\"}],\"name\":\"buyByAtom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newAtomFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_atomId\",\"type\":\"uint256\"}],\"name\":\"unsetIsRentByAtom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atom\",\"type\":\"uint256\"}],\"name\":\"NewSetRent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atom\",\"type\":\"uint256\"}],\"name\":\"NewSetBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atom\",\"type\":\"uint256\"}],\"name\":\"NewUnsetRent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atom\",\"type\":\"uint256\"}],\"name\":\"NewUnsetBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atom\",\"type\":\"uint256\"}],\"name\":\"NewAutoRentAtom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atom\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewRentAtom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atom\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBuyAtom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atom\",\"type\":\"uint256\"}],\"name\":\"NewEvolveAtom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atom\",\"type\":\"uint256\"}],\"name\":\"NewBonusAtom\",\"type\":\"event\"}]","ContractName":"CryptoAtomsLogic","CompilerVersion":"v0.4.24-nightly.2018.5.16+commit.7f965c86","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://70ed6447d8e269dd7c0fd406bcabd8d6dedc424a68886d532323821c27928609"}]}