{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n//////////////////////////////\r\n///// ERC20Basic\r\n//////////////////////////////\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n//////////////////////////////\r\n///// ERC20 Interface\r\n//////////////////////////////\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n//////////////////////////////\r\n///// ERC20 Basic\r\n//////////////////////////////\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n//////////////////////////////\r\n///// DetailedERC20\r\n//////////////////////////////\r\n\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n//////////////////////////////\r\n///// Standard Token\r\n//////////////////////////////\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n//////////////////////////////\r\n///// SafeMath\r\n//////////////////////////////\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n//////////////////////////////\r\n///// AddressArrayUtil\r\n//////////////////////////////\r\n\r\n/**\r\n * @title AddressArrayUtil\r\n */\r\nlibrary AddressArrayUtils {\r\n  function hasValue(address[] addresses, address value) internal returns (bool) {\r\n    for (uint i = 0; i < addresses.length; i++) {\r\n      if (addresses[i] == value) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function removeByIndex(address[] storage a, uint256 index) internal returns (uint256) {\r\n    a[index] = a[a.length - 1];\r\n    a.length -= 1;\r\n  }\r\n}\r\n\r\n\r\n//////////////////////////////\r\n///// Set Interface\r\n//////////////////////////////\r\n\r\n/**\r\n * @title Set interface\r\n */\r\ncontract SetInterface {\r\n\r\n  /**\r\n   * @dev Function to convert component into {Set} Tokens\r\n   *\r\n   * Please note that the user's ERC20 component must be approved by\r\n   * their ERC20 contract to transfer their components to this contract.\r\n   *\r\n   * @param _quantity uint The quantity of Sets desired to issue in Wei as a multiple of naturalUnit\r\n   */\r\n  function issue(uint _quantity) public returns (bool success);\r\n  \r\n  /**\r\n   * @dev Function to convert {Set} Tokens into underlying components\r\n   *\r\n   * The ERC20 components do not need to be approved to call this function\r\n   *\r\n   * @param _quantity uint The quantity of Sets desired to redeem in Wei as a multiple of naturalUnit\r\n   */\r\n  function redeem(uint _quantity) public returns (bool success);\r\n\r\n  event LogIssuance(\r\n    address indexed _sender,\r\n    uint _quantity\r\n  );\r\n\r\n  event LogRedemption(\r\n    address indexed _sender,\r\n    uint _quantity\r\n  );\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title {Set}\r\n * @author Felix Feng\r\n * @dev Implementation of the basic {Set} token.\r\n */\r\ncontract SetToken is StandardToken, DetailedERC20(\"Decentralized Exchange Set\", \"DEX\", 18), SetInterface {\r\n  using SafeMath for uint256;\r\n  using AddressArrayUtils for address[];\r\n\r\n  ///////////////////////////////////////////////////////////\r\n  /// Data Structures\r\n  ///////////////////////////////////////////////////////////\r\n  struct Component {\r\n    address address_;\r\n    uint unit_;\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////\r\n  /// States\r\n  ///////////////////////////////////////////////////////////\r\n  uint public naturalUnit;\r\n  Component[] public components;\r\n\r\n  // Mapping of componentHash to isComponent\r\n  mapping(bytes32 => bool) internal isComponent;\r\n  // Mapping of index of component -> user address -> balance\r\n  mapping(uint => mapping(address => uint)) internal unredeemedBalances;\r\n\r\n\r\n  ///////////////////////////////////////////////////////////\r\n  /// Events\r\n  ///////////////////////////////////////////////////////////\r\n  event LogPartialRedemption(\r\n    address indexed _sender,\r\n    uint _quantity,\r\n    bytes32 _excludedComponents\r\n  );\r\n\r\n  event LogRedeemExcluded(\r\n    address indexed _sender,\r\n    bytes32 _components\r\n  );\r\n\r\n  ///////////////////////////////////////////////////////////\r\n  /// Modifiers\r\n  ///////////////////////////////////////////////////////////\r\n  modifier hasSufficientBalance(uint quantity) {\r\n    // Check that the sender has sufficient components\r\n    // Since the component length is defined ahead of time, this is not\r\n    // an unbounded loop\r\n    require(balances[msg.sender] >= quantity, \"User does not have sufficient balance\");\r\n    _;\r\n  }\r\n\r\n  modifier validDestination(address _to) {\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n    _;\r\n  }\r\n\r\n  modifier isMultipleOfNaturalUnit(uint _quantity) {\r\n    require((_quantity % naturalUnit) == 0);\r\n    _;\r\n  }\r\n\r\n  modifier isNonZero(uint _quantity) {\r\n    require(_quantity > 0);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor Function for the issuance of an {Set} token\r\n   * @param _components address[] A list of component address which you want to include\r\n   * @param _units uint[] A list of quantities in gWei of each component (corresponds to the {Set} of _components)\r\n   */\r\n  constructor(address[] _components, uint[] _units, uint _naturalUnit)\r\n    isNonZero(_naturalUnit)\r\n    public {\r\n    // There must be component present\r\n    require(_components.length > 0, \"Component length needs to be great than 0\");\r\n\r\n    // There must be an array of units\r\n    require(_units.length > 0, \"Units must be greater than 0\");\r\n\r\n    // The number of components must equal the number of units\r\n    require(_components.length == _units.length, \"Component and unit lengths must be the same\");\r\n\r\n    naturalUnit = _naturalUnit;\r\n\r\n    // As looping operations are expensive, checking for duplicates will be\r\n    // on the onus of the application developer\r\n\r\n    // NOTE: It will be the onus of developers to check whether the addressExists\r\n    // are in fact ERC20 addresses\r\n    for (uint16 i = 0; i < _units.length; i++) {\r\n      // Check that all units are non-zero. Negative numbers will underflow\r\n      uint currentUnits = _units[i];\r\n      require(currentUnits > 0, \"Unit declarations must be non-zero\");\r\n\r\n      // Check that all addresses are non-zero\r\n      address currentComponent = _components[i];\r\n      require(currentComponent != address(0), \"Components must have non-zero address\");\r\n\r\n      // Check the component has not already been added\r\n      require(!tokenIsComponent(currentComponent));\r\n\r\n      // add component to isComponent mapping\r\n      isComponent[keccak256(currentComponent)] = true;\r\n\r\n      components.push(Component({\r\n        address_: currentComponent,\r\n        unit_: currentUnits\r\n      }));\r\n    }\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////\r\n  /// Set Functions\r\n  ///////////////////////////////////////////////////////////\r\n\r\n  /**\r\n   * @dev Function to convert component into {Set} Tokens\r\n   *\r\n   * Please note that the user's ERC20 component must be approved by\r\n   * their ERC20 contract to transfer their components to this contract.\r\n   *\r\n   * @param _quantity uint The quantity of Sets desired to issue in Wei as a multiple of naturalUnit\r\n   */\r\n  function issue(uint _quantity)\r\n    isMultipleOfNaturalUnit(_quantity)\r\n    isNonZero(_quantity)\r\n    public returns (bool success) {\r\n    // Transfers the sender's components to the contract\r\n    // Since the component length is defined ahead of time, this is not\r\n    // an unbounded loop\r\n    for (uint16 i = 0; i < components.length; i++) {\r\n      address currentComponent = components[i].address_;\r\n      uint currentUnits = components[i].unit_;\r\n\r\n      uint preTransferBalance = ERC20(currentComponent).balanceOf(this);\r\n\r\n      uint transferValue = calculateTransferValue(currentUnits, _quantity);\r\n      require(ERC20(currentComponent).transferFrom(msg.sender, this, transferValue));\r\n\r\n      // Check that preTransferBalance + transfer value is the same as postTransferBalance\r\n      uint postTransferBalance = ERC20(currentComponent).balanceOf(this);\r\n      assert(preTransferBalance.add(transferValue) == postTransferBalance);\r\n    }\r\n\r\n    mint(_quantity);\r\n\r\n    emit LogIssuance(msg.sender, _quantity);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to convert {Set} Tokens into underlying components\r\n   *\r\n   * The ERC20 components do not need to be approved to call this function\r\n   *\r\n   * @param _quantity uint The quantity of Sets desired to redeem in Wei as a multiple of naturalUnit\r\n   */\r\n  function redeem(uint _quantity)\r\n    public\r\n    isMultipleOfNaturalUnit(_quantity)\r\n    hasSufficientBalance(_quantity)\r\n    isNonZero(_quantity)\r\n    returns (bool success)\r\n  {\r\n    burn(_quantity);\r\n\r\n    for (uint16 i = 0; i < components.length; i++) {\r\n      address currentComponent = components[i].address_;\r\n      uint currentUnits = components[i].unit_;\r\n\r\n      uint preTransferBalance = ERC20(currentComponent).balanceOf(this);\r\n\r\n      uint transferValue = calculateTransferValue(currentUnits, _quantity);\r\n      require(ERC20(currentComponent).transfer(msg.sender, transferValue));\r\n\r\n      // Check that preTransferBalance + transfer value is the same as postTransferBalance\r\n      uint postTransferBalance = ERC20(currentComponent).balanceOf(this);\r\n      assert(preTransferBalance.sub(transferValue) == postTransferBalance);\r\n    }\r\n\r\n    emit LogRedemption(msg.sender, _quantity);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to withdraw a portion of the component tokens of a Set\r\n   *\r\n   * This function should be used in the event that a component token has been\r\n   * paused for transfer temporarily or permanently. This allows users a\r\n   * method to withdraw tokens in the event that one token has been frozen.\r\n   *\r\n   * The mask can be computed by summing the powers of 2 of indexes of components to exclude.\r\n   * For example, to exclude the 0th, 1st, and 3rd components, we pass in the hex of\r\n   * 1 + 2 + 8 = 11, padded to length 32 i.e. 0x000000000000000000000000000000000000000000000000000000000000000b\r\n   *\r\n   * @param _quantity uint The quantity of Sets desired to redeem in Wei\r\n   * @param _componentsToExclude bytes32 Hex of bitmask of components to exclude\r\n   */\r\n  function partialRedeem(uint _quantity, bytes32 _componentsToExclude)\r\n    public\r\n    isMultipleOfNaturalUnit(_quantity)\r\n    isNonZero(_quantity)\r\n    hasSufficientBalance(_quantity)\r\n    returns (bool success)\r\n  {\r\n    // Excluded tokens should be less than the number of components\r\n    // Otherwise, use the normal redeem function\r\n    require(_componentsToExclude > 0, \"Excluded components must be non-zero\");\r\n\r\n    burn(_quantity);\r\n\r\n    for (uint16 i = 0; i < components.length; i++) {\r\n      uint transferValue = calculateTransferValue(components[i].unit_, _quantity);\r\n\r\n      // Exclude tokens if 2 raised to the power of their indexes in the components\r\n      // array results in a non zero value following a bitwise AND\r\n      if (_componentsToExclude & bytes32(2 ** i) > 0) {\r\n        unredeemedBalances[i][msg.sender] += transferValue;\r\n      } else {\r\n        uint preTransferBalance = ERC20(components[i].address_).balanceOf(this);\r\n\r\n        require(ERC20(components[i].address_).transfer(msg.sender, transferValue));\r\n\r\n        // Check that preTransferBalance + transfer value is the same as postTransferBalance\r\n        uint postTransferBalance = ERC20(components[i].address_).balanceOf(this);\r\n        assert(preTransferBalance.sub(transferValue) == postTransferBalance);\r\n      }\r\n    }\r\n\r\n    emit LogPartialRedemption(msg.sender, _quantity, _componentsToExclude);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to withdraw tokens that have previously been excluded when calling\r\n   * the partialRedeem method\r\n\r\n   * The mask can be computed by summing the powers of 2 of indexes of components to redeem.\r\n   * For example, to redeem the 0th, 1st, and 3rd components, we pass in the hex of\r\n   * 1 + 2 + 8 = 11, padded to length 32 i.e. 0x000000000000000000000000000000000000000000000000000000000000000b\r\n   *\r\n   * @param _componentsToRedeem bytes32 Hex of bitmask of components to redeem\r\n   */\r\n  function redeemExcluded(bytes32 _componentsToRedeem)\r\n    public\r\n    returns (bool success)\r\n  {\r\n    require(_componentsToRedeem > 0, \"Components to redeem must be non-zero\");\r\n\r\n    for (uint16 i = 0; i < components.length; i++) {\r\n      if (_componentsToRedeem & bytes32(2 ** i) > 0) {\r\n        address currentComponent = components[i].address_;\r\n        uint remainingBalance = unredeemedBalances[i][msg.sender];\r\n\r\n        // To prevent re-entrancy attacks, decrement the user's Set balance\r\n        unredeemedBalances[i][msg.sender] = 0;\r\n\r\n        require(ERC20(currentComponent).transfer(msg.sender, remainingBalance));\r\n      }\r\n    }\r\n\r\n    emit LogRedeemExcluded(msg.sender, _componentsToRedeem);\r\n\r\n    return true;\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////\r\n  /// Getters\r\n  ///////////////////////////////////////////////////////////\r\n  function getComponents() public view returns(address[]) {\r\n    address[] memory componentAddresses = new address[](components.length);\r\n    for (uint16 i = 0; i < components.length; i++) {\r\n        componentAddresses[i] = components[i].address_;\r\n    }\r\n    return componentAddresses;\r\n  }\r\n\r\n  function getUnits() public view returns(uint[]) {\r\n    uint[] memory units = new uint[](components.length);\r\n    for (uint16 i = 0; i < components.length; i++) {\r\n        units[i] = components[i].unit_;\r\n    }\r\n    return units;\r\n  }\r\n\r\n  function getUnredeemedBalance(address _componentAddress, address _userAddress) public view returns (uint256) {\r\n    require(tokenIsComponent(_componentAddress));\r\n\r\n    uint componentIndex;\r\n\r\n    for (uint i = 0; i < components.length; i++) {\r\n      if (components[i].address_ == _componentAddress) {\r\n        componentIndex = i;\r\n      }\r\n    }\r\n\r\n    return unredeemedBalances[componentIndex][_userAddress];\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////\r\n  /// Transfer Updates\r\n  ///////////////////////////////////////////////////////////\r\n  function transfer(address _to, uint256 _value) validDestination(_to) public returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) validDestination(_to) public returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////\r\n  /// Private Function\r\n  ///////////////////////////////////////////////////////////\r\n\r\n  function tokenIsComponent(address _tokenAddress) view internal returns (bool) {\r\n    return isComponent[keccak256(_tokenAddress)];\r\n  }\r\n\r\n  function calculateTransferValue(uint componentUnits, uint quantity) view internal returns(uint) {\r\n    return quantity.div(naturalUnit).mul(componentUnits);\r\n  }\r\n\r\n  function mint(uint quantity) internal {\r\n    balances[msg.sender] = balances[msg.sender].add(quantity);\r\n    totalSupply_ = totalSupply_.add(quantity);\r\n    emit Transfer(address(0), msg.sender, quantity);\r\n  }\r\n\r\n  function burn(uint quantity) internal {\r\n    balances[msg.sender] = balances[msg.sender].sub(quantity);\r\n    totalSupply_ = totalSupply_.sub(quantity);\r\n    emit Transfer(msg.sender, address(0), quantity);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_componentsToRedeem\",\"type\":\"bytes32\"}],\"name\":\"redeemExcluded\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_componentAddress\",\"type\":\"address\"},{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUnredeemedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"naturalUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getComponents\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_quantity\",\"type\":\"uint256\"},{\"name\":\"_componentsToExclude\",\"type\":\"bytes32\"}],\"name\":\"partialRedeem\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"components\",\"outputs\":[{\"name\":\"address_\",\"type\":\"address\"},{\"name\":\"unit_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_components\",\"type\":\"address[]\"},{\"name\":\"_units\",\"type\":\"uint256[]\"},{\"name\":\"_naturalUnit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_excludedComponents\",\"type\":\"bytes32\"}],\"name\":\"LogPartialRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_components\",\"type\":\"bytes32\"}],\"name\":\"LogRedeemExcluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"LogIssuance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"LogRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SetToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000009184e72a0000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000dd974d5c2e2928dea5f71b9825b8b646686bd20000000000000000000000000027054b13b1b798b345b591a4d22e6562d47ea75a00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000001dbdda86d2d37000000000000000000000000000000000000000000000000000078ad08ecab710000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://3029b73e6a686b4c35b55a15f9d888c752d77a28bc82a66a542cad5cb598145c"}]}