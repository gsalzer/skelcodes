{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        }\r\n        else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n\r\n    bool public paused = false;\r\n\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n *\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Capped Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract CappedMintableToken is PausableToken {\r\n\r\n    uint256 public hard_cap;\r\n    // List of agents that are allowed to create new tokens\r\n    mapping (address => bool) mintAgents;\r\n\r\n    event MintingAgentChanged(address addr, bool state);\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    /*\r\n     * @dev Modifier to check if `msg.sender` is an agent allowed to create new tokens\r\n     */\r\n    modifier onlyMintAgent() {\r\n        require(mintAgents[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner can allow a crowdsale contract to mint new tokens\r\n     */\r\n    function setMintAgent(address addr, bool state) onlyOwner whenNotPaused  public {\r\n        mintAgents[addr] = state;\r\n        MintingAgentChanged(addr, state);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyMintAgent whenNotPaused public returns (bool) {\r\n        require (totalSupply.add(_amount) <= hard_cap);\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets if an specified address is allowed to mint tokens\r\n     * @param _user The address to query if is allowed to mint tokens\r\n     * @return An bool representing if the address passed is allowed to mint tokens \r\n     */\r\n    function isMintAgent(address _user) public view returns (bool state) {\r\n        return mintAgents[_user];\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Platform Token\r\n * @dev Contract that allows the Genbby platform to work properly and being scalable\r\n */\r\ncontract PlatformToken is CappedMintableToken {\r\n\r\n    mapping (address => bool) trustedContract;\r\n\r\n    event TrustedContract(address addr, bool state);\r\n\r\n    /**\r\n     * @dev Modifier that check that `msg.sender` is an trusted contract\r\n     */\r\n    modifier onlyTrustedContract() {\r\n        require(trustedContract[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The owner can set a contract as a trusted contract\r\n     */\r\n    function setTrustedContract(address addr, bool state) onlyOwner whenNotPaused public {\r\n        trustedContract[addr] = state;\r\n        TrustedContract(addr, state);\r\n    }\r\n\r\n    /**\r\n     * @dev Function that trusted contracts can use to perform any buying that users do in the platform\r\n     */\r\n    function buy(address who, uint256 amount) onlyTrustedContract whenNotPaused public {\r\n        require (balances[who] >= amount);\r\n        balances[who] = balances[who].sub(amount);\r\n        totalSupply = totalSupply.sub(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check if a contract is marked as a trusted one\r\n     * @param _contract The address of the contract to query of\r\n     * @return A bool indicanting if the passed contract is considered as a trusted one\r\n     */\r\n    function isATrustedContract(address _contract) public view returns (bool state) {\r\n        return trustedContract[_contract];\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title UpgradeAgent\r\n * @dev Interface of a contract that transfers tokens to itself\r\n * Inspired by Lunyr\r\n */\r\ncontract UpgradeAgent {\r\n\r\n    function upgradeBalance(address who, uint256 amount) public;\r\n    function upgradeAllowance(address _owner, address _spender, uint256 amount) public;\r\n    function upgradePendingExchange(address _owner, uint256 amount) public;\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title UpgradableToken\r\n * @dev Allows users to transfers their tokens to a new contract when the token is paused and upgrading \r\n * It is like a guard for unexpected situations \r\n */\r\ncontract UpgradableToken is PlatformToken {\r\n\r\n    // The next contract where the tokens will be migrated\r\n    UpgradeAgent public upgradeAgent;\r\n    uint256 public totalSupplyUpgraded;\r\n    bool public upgrading = false;\r\n\r\n    event UpgradeBalance(address who, uint256 amount);\r\n    event UpgradeAllowance(address owner, address spender, uint256 amount);\r\n    event UpgradePendingExchange(address owner, uint256 value);\r\n    event UpgradeStateChange(bool state);\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is upgrading\r\n     */\r\n    modifier whenUpgrading() {\r\n        require(upgrading);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function that allows the `owner` to set the upgrade agent\r\n     */\r\n    function setUpgradeAgent(address addr) onlyOwner public {\r\n        upgradeAgent = UpgradeAgent(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner when token is paused, triggers upgrading state\r\n     */\r\n    function startUpgrading() onlyOwner whenPaused public {\r\n        upgrading = true;\r\n        UpgradeStateChange(true);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner then token is paused and upgrading, returns to a non-upgrading state\r\n     */\r\n    function stopUpgrading() onlyOwner whenPaused whenUpgrading public {\r\n        upgrading = false;\r\n        UpgradeStateChange(false);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anybody to upgrade tokens from these contract to the new one\r\n     */\r\n    function upgradeBalanceOf(address who) whenUpgrading public {\r\n        uint256 value = balances[who];\r\n        require (value != 0);\r\n        balances[who] = 0;\r\n        totalSupply = totalSupply.sub(value);\r\n        totalSupplyUpgraded = totalSupplyUpgraded.add(value);\r\n        upgradeAgent.upgradeBalance(who, value);\r\n        UpgradeBalance(who, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anybody to upgrade allowances from these contract to the new one\r\n     */\r\n    function upgradeAllowance(address _owner, address _spender) whenUpgrading public {\r\n        uint256 value = allowed[_owner][_spender];\r\n        require (value != 0);\r\n        allowed[_owner][_spender] = 0;\r\n        upgradeAgent.upgradeAllowance(_owner, _spender, value);\r\n        UpgradeAllowance(_owner, _spender, value);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Genbby Token\r\n * @dev Token setting\r\n */\r\ncontract GenbbyToken is UpgradableToken {\r\n\r\n    string public contactInformation;\r\n    string public name = \"Genbby Token\";\r\n    string public symbol = \"GG\";\r\n    uint256 public constant decimals = 18;\r\n    uint256 public constant factor = 10 ** decimals;\r\n\r\n    event UpgradeTokenInformation(string newName, string newSymbol);\r\n\r\n    function GenbbyToken() public {\r\n        hard_cap = (10 ** 9) * factor;\r\n        contactInformation = 'https://genbby.com/';\r\n    }\r\n\r\n    function setTokenInformation(string _name, string _symbol) onlyOwner public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        UpgradeTokenInformation(name, symbol);\r\n    }\r\n\r\n    function setContactInformation(string info) onlyOwner public {\r\n         contactInformation = info;\r\n    }\r\n\r\n    /*\r\n     * @dev Do not allow direct deposits\r\n     */\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Crowdsale Phase 1\r\n * @dev Crowdsale phase 1 smart contract used by https://ico.genbby.com/\r\n */\r\ncontract CrowdsalePhase1 is Pausable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    GenbbyToken public token;\r\n\r\n    uint256 public start;\r\n    uint256 public finish;\r\n    uint256 public tokens_sold;\r\n    uint256 public constant decimals = 18;\r\n    uint256 public constant factor = 10 ** decimals;\r\n    uint256 public constant total_tokens = 37500000 * factor; // 75% 5 % hard cap\r\n\r\n    event TokensGiven(address to, uint256 amount);\r\n\r\n    function CrowdsalePhase1(uint256 _start) public {\r\n        start = _start;\r\n        finish = start + 4 weeks;\r\n    }\r\n\r\n    /**\r\n     * @dev The `owner` can set the token that uses the crowdsale\r\n     */\r\n    function setToken(address tokenAddress) onlyOwner public {\r\n        token = GenbbyToken(tokenAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called when the crowdsale is not running \r\n     */\r\n    modifier whenRunning() {\r\n        require(start <= now && now <= finish);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to give tokens to others users who have bought Genbby tokens\r\n     * @param _to The address that will receive the tokens\r\n     * @param _amount The amount of tokens to give\r\n     * @return A boolean that indicates if the operation was successful\r\n     */\r\n    function giveTokens(address _to, uint256 _amount) onlyOwner whenNotPaused whenRunning public returns (bool) {\r\n        require (tokens_sold.add(_amount) <= total_tokens);\r\n        token.mint(_to, _amount);\r\n        tokens_sold = tokens_sold.add(_amount);\r\n        TokensGiven(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * @dev Do not allow direct deposits\r\n     */\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"giveTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokens_sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensGiven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CrowdsalePhase1","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005b001fd0","Library":"","SwarmSource":"bzzr://1bc491e1492aa476d19a17ac0a9f95c3cbefc7222aeb22056c356b2cd0be9236"}]}