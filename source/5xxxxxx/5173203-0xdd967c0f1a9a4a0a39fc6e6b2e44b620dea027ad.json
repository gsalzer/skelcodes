{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  \r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ninterface Token {\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n}\r\n\r\n\r\n\r\n\r\ncontract Crowdsale is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    Token public token;\r\n\r\n    uint256 public RATE = 50000; // Number of tokens per Ether\r\n    uint256 public START;\r\n    uint256 public minETH = 100 finney;\r\n\r\n    uint256 public constant initialTokens =  4000000000 * 10**18; // Initial number of tokens available\r\n    bool public isFunding = true;\r\n    uint256 public raisedAmount = 0;\r\n\r\n    event BoughtTokens(address indexed to, uint256 value);\r\n\r\n    modifier whenSaleIsActive() {\r\n    // Check if sale is active\r\n        assert(isActive());\r\n        _;\r\n    }\r\n\r\n    function Crowdsale(address _tokenAddr, uint256 _start) public {\r\n        require(_tokenAddr != 0);\r\n        token = Token(_tokenAddr);\r\n        START = _start;\r\n    }\r\n  \r\n    \r\n    function changeSaleStatus (bool _isFunding) external onlyOwner {\r\n       isFunding = _isFunding;\r\n       \r\n    }\r\n    \r\n    function changeRate (uint256 _RATE) external onlyOwner {\r\n       RATE = _RATE;\r\n    }\r\n\r\n    function isActive() public constant returns (bool) {\r\n        return (\r\n            isFunding == true &&\r\n            now >= START && // Must be after the START date\r\n            now <= START.add(92 days)\r\n        );\r\n    }\r\n\r\n    \r\n\r\n\r\n    function () public payable {\r\n        \r\n        if (now >= START && now < START.add(31 days)) {\r\n            RATE = 50000;  // 50,000/ETH for first month and then 40,000/ETH\r\n            buyTokens();\r\n        } \r\n        else {\r\n            RATE = 40000;\r\n            buyTokens(); //40,000/ETH\r\n        }            \r\n    }\r\n      \r\n  \r\n    function buyTokens() public payable whenSaleIsActive {\r\n        \r\n        // Minimum ETH required to buy\r\n        require(msg.value >= minETH);\r\n        \r\n        // Calculate tokens to sell\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = weiAmount.mul(RATE);\r\n\r\n        BoughtTokens(msg.sender, tokens);\r\n        raisedAmount = raisedAmount.add(msg.value);\r\n        token.transfer(msg.sender, tokens);\r\n        owner.transfer(msg.value);\r\n    }\r\n    \r\n    function tokensAvailable() public constant returns (uint256) {\r\n        return token.balanceOf(this);\r\n    }\r\n    \r\n    \r\n    function burnRemaining() public onlyOwner {\r\n        \r\n        uint256 burnThis = token.balanceOf(this);\r\n        token.transfer(address(0), burnThis);\r\n    }\r\n    \r\n\r\n\r\n    function destroy() public onlyOwner {\r\n    \r\n        // Transfer tokens back to owner\r\n        uint256 balance = token.balanceOf(this);\r\n        assert(balance > 0);\r\n        token.transfer(owner, balance);\r\n\r\n        // There should be no ether in the contract but just in case\r\n        selfdestruct(owner);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_RATE\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isFunding\",\"type\":\"bool\"}],\"name\":\"changeSaleStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnRemaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BoughtTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000037eb59665afccd8a9c09a16621a13e51064da9f000000000000000000000000000000000000000000000000000000005a974280","Library":"","SwarmSource":"bzzr://1aa1baf7dbd4467e043959e78da8d9a70898f6ad32e613a6011064519eed3449"}]}