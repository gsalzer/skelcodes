{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract SafeMath {\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ContractReceiver {\r\n     \r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n    \r\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\r\n        TKN memory tkn;\r\n        tkn.sender = _from;\r\n        tkn.value = _value;\r\n        tkn.data = _data;\r\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n        tkn.sig = bytes4(u);\r\n      \r\n        /* tkn variable is analogue of msg variable of Ether transaction\r\n        *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\r\n        *  tkn.value the number of tokens that were sent   (analogue of msg.value)\r\n        *  tkn.data is data of token transaction   (analogue of msg.data)\r\n        *  tkn.sig is 4 bytes signature of function\r\n        *  if data of token transaction is a function execution\r\n        */\r\n    }\r\n}\r\n\r\ncontract ERC223 {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) public view returns (uint);\r\n    \r\n    function name() public view returns (string _name);\r\n    function symbol() public view returns (string _symbol);\r\n    function decimals() public view returns (uint8 _decimals);\r\n    function totalSupply() public view returns (uint256 _supply);\r\n\r\n    function transfer(address to, uint value) public returns (bool ok);\r\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n    function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ERC223Token is ERC223, SafeMath {\r\n\r\n    mapping(address => uint) balances;\r\n    \r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n  \r\n    // Function to access name of token .\r\n    function name() public view returns (string _name) {\r\n        return name;\r\n    }\r\n    // Function to access symbol of token .\r\n    function symbol() public view returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n    // Function to access decimals of token .\r\n    function decimals() public view returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n    // Function to access total supply of tokens .\r\n    function totalSupply() public view returns (uint256 _totalSupply) {\r\n        return totalSupply;\r\n    }\r\n  \r\n  \r\n    // Function that is called when a user or another contract wants to transfer funds .\r\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\n        \r\n        if(isContract(_to)) {\r\n            if (balanceOf(msg.sender) < _value) revert();\r\n            balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n            balances[_to] = safeAdd(balanceOf(_to), _value);\r\n            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n            emit Transfer(msg.sender, _to, _value, _data);\r\n            emit Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    // Function that is called when a user or another contract wants to transfer funds .\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) { \r\n        if(isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        }\r\n        else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n  \r\n    // Standard function transfer similar to ERC20 transfer with no _data .\r\n    // Added due to backwards compatibility reasons .\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        //standard function transfer similar to ERC20 transfer with no _data\r\n        //added due to backwards compatibility reasons\r\n        bytes memory empty;\r\n        if(isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        }\r\n        else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length>0);\r\n    }\r\n\r\n    //function that is called when transaction target is an address\r\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        if (balanceOf(msg.sender) < _value) revert();\r\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n  \r\n    //function that is called when transaction target is a contract\r\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        if (balanceOf(msg.sender) < _value) revert();\r\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract MoeSeed is ERC223Token, owned{\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals;\r\n    uint256 public totalSupply;\r\n    \r\n    constructor() public{\r\n        name = \"Moe Seed\";\r\n        symbol = \"MOE\";\r\n        decimals = 18;\r\n        totalSupply = 10000000000 * 10 ** decimals;\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n    \r\n    function changeOwner(address newOwner) onlyOwner public{\r\n        uint balanceOwner = balanceOf(owner);\r\n        balances[owner] = safeSub(balanceOf(owner), balanceOwner);\r\n        balances[newOwner] = safeAdd(balanceOf(newOwner), balanceOwner);\r\n        bytes memory empty;\r\n        emit Transfer(owner, newOwner, balanceOwner, empty);\r\n        emit Transfer(owner, newOwner, balanceOwner);\r\n        transferOwnership(newOwner);\r\n    }\r\n    \r\n    function transferFromOwner(address _from, address _to, uint _value, uint _fee) onlyOwner public{\r\n        bytes memory empty;\r\n        if (balanceOf(_from) < (_value + _fee)) revert();\r\n        balances[_from] = safeSub(balanceOf(_from), _value);\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n        emit Transfer(_from, _to, _value, empty);\r\n        emit Transfer(_from, _to, _value);\r\n        balances[_from] = safeSub(balanceOf(_from), _fee);\r\n        balances[owner] = safeAdd(balanceOf(owner), _fee);\r\n        emit Transfer(_from, owner, _fee, empty);\r\n        emit Transfer(_from, owner, _fee);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"transferFromOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MoeSeed","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0cf70a8c4e8cac438f924da86a0e27a935cb8a4211bd04c8df168e1e4fa57cd4"}]}