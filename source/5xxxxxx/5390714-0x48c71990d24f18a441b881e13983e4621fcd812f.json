{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transferInternal(address to, uint256 value) internal returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n    function transferInternal(address _to, uint256 _value) internal returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowanceInternal(address owner, address spender) internal view returns (uint256);\r\n    function transferFromInternal(address from, address to, uint256 value) internal returns (bool);\r\n    function approveInternal(address spender, uint256 value) internal returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n    function transferFromInternal(address _from, address _to, uint256 _value) internal returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n    function approveInternal(address _spender, uint256 _value) internal returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n    function allowanceInternal(address _owner, address _spender) internal view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n    function increaseApprovalInternal(address _spender, uint _addedValue) internal returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n    function decreaseApprovalInternal(address _spender, uint _subtractedValue) internal returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/MintableToken.sol\r\n\r\n//import \"./StandardToken.sol\";\r\n//import \"../../ownership/Ownable.sol\";\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n    address public icoContractAddress;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the icoContract.\r\n    */\r\n    modifier onlyIcoContract() {\r\n        require(msg.sender == icoContractAddress);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Function to mint tokens\r\n    * @param _to The address that will receive the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mint(address _to, uint256 _amount) onlyIcoContract canMint external returns (bool) {\r\n        //return true;\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner canMint external returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n    function pause() onlyOwner whenNotPaused external {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n    function unpause() onlyOwner whenPaused external {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n// File: contracts/PausableToken.sol\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n    function transferInternal(address _to, uint256 _value) internal whenNotPaused returns (bool) {\r\n        return super.transferInternal(_to, _value);\r\n    }\r\n\r\n    function transferFromInternal(address _from, address _to, uint256 _value) internal whenNotPaused returns (bool) {\r\n        return super.transferFromInternal(_from, _to, _value);\r\n    }\r\n\r\n    function approveInternal(address _spender, uint256 _value) internal whenNotPaused returns (bool) {\r\n        return super.approveInternal(_spender, _value);\r\n    }\r\n\r\n    function increaseApprovalInternal(address _spender, uint _addedValue) internal whenNotPaused returns (bool success) {\r\n        return super.increaseApprovalInternal(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApprovalInternal(address _spender, uint _subtractedValue) internal whenNotPaused returns (bool success) {\r\n        return super.decreaseApprovalInternal(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\n// File: contracts/ReentrancyGuard.sol\r\n\r\n/**\r\n * @title Helps contracts guard agains reentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancy_lock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancy_lock);\r\n    reentrancy_lock = true;\r\n    _;\r\n    reentrancy_lock = false;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/IiinoCoin.sol\r\n\r\ncontract IiinoCoin is MintableToken, PausableToken, ReentrancyGuard {\r\n    event RewardMint(address indexed to, uint256 amount);\r\n    event RewardMintingAmt(uint256 _amountOfTokensMintedPreCycle);\r\n    event ResetReward();\r\n    event RedeemReward(address indexed to, uint256 value);\r\n\r\n    event CreatedEscrow(bytes32 _tradeHash);\r\n    event ReleasedEscrow(bytes32 _tradeHash);\r\n    event Dispute(bytes32 _tradeHash);\r\n    event CancelledBySeller(bytes32 _tradeHash);\r\n    event CancelledByBuyer(bytes32 _tradeHash);\r\n    event BuyerArbitratorSet(bytes32 _tradeHash);\r\n    event SellerArbitratorSet(bytes32 _tradeHash);\r\n    event DisputeResolved (bytes32 _tradeHash);\r\n    event IcoContractAddressSet (address _icoContractAddress);\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Mapping of rewards to beneficiaries of the reward\r\n    mapping(address => uint256) public reward;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    uint256 public amountMintPerDuration; // amount to mint during one minting cycle\r\n    uint256 public durationBetweenRewardMints; // reward miniting cycle duration\r\n    uint256 public previousDistribution; //EPOCH time of the previous distribution\r\n    uint256 public totalRewardsDistributed; //Total amount of the rewards distributed\r\n    uint256 public totalRewardsRedeemed; //Total amount of the rewards redeemed\r\n    uint256 public minimumRewardWithdrawalLimit; //The minimum limit of rewards that can be withdrawn\r\n    uint256 public rewardAvailableCurrentDistribution; //The amount of rewards available for the current Distribution.\r\n\r\n    function IiinoCoin(\r\n        string _name,\r\n        string _symbol,\r\n        uint8 _decimals,\r\n        uint256 _amountMintPerDuration,\r\n        uint256 _durationBetweenRewardMints\r\n    ) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        amountMintPerDuration = _amountMintPerDuration;\r\n        durationBetweenRewardMints = _durationBetweenRewardMints;\r\n        previousDistribution = now; // To initialize the previous distribution to the time of the creation of the contract\r\n        totalRewardsDistributed = 0;\r\n        totalRewardsRedeemed = 0;\r\n        minimumRewardWithdrawalLimit = 10 ether; //Defaulted to 10 iiinos represented in iii\r\n        rewardAvailableCurrentDistribution = amountMintPerDuration;\r\n        icoContractAddress = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev set the icoContractAddress in the token so that the ico Contract can mint the token\r\n    * @param _icoContractAddress array of address. The address to which the reward needs to be distributed\r\n    */\r\n    function setIcoContractAddress(\r\n        address _icoContractAddress\r\n    ) external nonReentrant onlyOwner whenNotPaused {\r\n        require (_icoContractAddress != address(0));\r\n        emit IcoContractAddressSet(_icoContractAddress);\r\n        icoContractAddress = _icoContractAddress;\r\n    }\r\n\r\n    /**\r\n    * @dev distribute reward tokens to the list of addresses based on their proportion\r\n    * @param _rewardAdresses array of address. The address to which the reward needs to be distributed\r\n    */\r\n    function batchDistributeReward(\r\n        address[] _rewardAdresses,\r\n        uint256[] _amountOfReward,\r\n        uint256 _timestampOfDistribution\r\n    ) external nonReentrant onlyOwner whenNotPaused {\r\n        require(_timestampOfDistribution > previousDistribution.add(durationBetweenRewardMints)); //To only allow a distribution to happen 30 days (2592000 seconds) after the previous distribution\r\n        require(_timestampOfDistribution < now); // To only allow a distribution time in the past\r\n        require(_rewardAdresses.length == _amountOfReward.length); // To verify the length of the arrays are the same.\r\n\r\n        uint256 rewardDistributed = 0;\r\n\r\n        for (uint j = 0; j < _rewardAdresses.length; j++) {\r\n            rewardMint(_rewardAdresses[j], _amountOfReward[j]);\r\n            rewardDistributed = rewardDistributed.add(_amountOfReward[j]);\r\n        }\r\n        require(rewardAvailableCurrentDistribution >= rewardDistributed);\r\n        totalRewardsDistributed = totalRewardsDistributed.add(rewardDistributed);\r\n        rewardAvailableCurrentDistribution = rewardAvailableCurrentDistribution.sub(rewardDistributed);\r\n    }\r\n\r\n    /**\r\n    * @dev distribute reward tokens to a addresse based on the proportion\r\n    * @param _rewardAddress The address to which the reward needs to be distributed\r\n    */\r\n    function distributeReward(\r\n        address _rewardAddress,\r\n        uint256 _amountOfReward,\r\n        uint256 _timestampOfDistribution\r\n    ) external nonReentrant onlyOwner whenNotPaused {\r\n\r\n        require(_timestampOfDistribution > previousDistribution);\r\n        require(_timestampOfDistribution < previousDistribution.add(durationBetweenRewardMints)); //To only allow a distribution to happen 30 days (2592000 seconds) after the previous distribution\r\n        require(_timestampOfDistribution < now); // To only allow a distribution time in the past\r\n        //reward[_rewardAddress] = reward[_rewardAddress].add(_amountOfReward);\r\n        rewardMint(_rewardAddress, _amountOfReward);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev reset reward tokensfor the new duration\r\n    */\r\n    function resetReward() external nonReentrant onlyOwner whenNotPaused {\r\n        require(now > previousDistribution.add(durationBetweenRewardMints)); //To only allow a distribution to happen 30 days (2592000 seconds) after the previous distribution\r\n        previousDistribution = previousDistribution.add(durationBetweenRewardMints); // To set the new distribution period as the previous distribution timestamp\r\n        rewardAvailableCurrentDistribution = amountMintPerDuration;\r\n        emit ResetReward();\r\n    }\r\n\r\n    /**\r\n   * @dev Redeem Reward tokens from one rewards array to balances array\r\n   * @param _beneficiary address The address which contains the reward as well as the address to which the balance will be transferred\r\n   * @param _value uint256 the amount of tokens to be redeemed\r\n   */\r\n    function redeemReward(\r\n        address _beneficiary,\r\n        uint256 _value\r\n    ) external nonReentrant whenNotPaused{\r\n        //Need to consider what happens to rewards after the stopping of minting process\r\n        require(msg.sender == _beneficiary);\r\n        require(_value >= minimumRewardWithdrawalLimit);\r\n        require(reward[_beneficiary] >= _value);\r\n        reward[_beneficiary] = reward[_beneficiary].sub(_value);\r\n        balances[_beneficiary] = balances[_beneficiary].add(_value);\r\n        totalRewardsRedeemed = totalRewardsRedeemed.add(_value);\r\n        emit RedeemReward(_beneficiary, _value);\r\n    }\r\n\r\n    function rewardMint(\r\n        address _to,\r\n        uint256 _amount\r\n    ) onlyOwner canMint whenNotPaused internal returns (bool) {\r\n        require(_amount > 0);\r\n        require(_to != address(0));\r\n        require(rewardAvailableCurrentDistribution >= _amount);\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        reward[_to] = reward[_to].add(_amount);\r\n        totalRewardsDistributed = totalRewardsDistributed.add(_amount);\r\n        rewardAvailableCurrentDistribution = rewardAvailableCurrentDistribution.sub(_amount);\r\n        emit RewardMint(_to, _amount);\r\n        //Transfer(address(0), _to, _amount); //balance of the user will only be updated on claiming the coin\r\n        return true;\r\n    }\r\n    function userRewardAccountBalance(\r\n        address _address\r\n    ) whenNotPaused external view returns (uint256) {\r\n        require(_address != address(0));\r\n        return reward[_address];\r\n    }\r\n    function changeRewardMintingAmount(\r\n        uint256 _newRewardMintAmt\r\n    ) whenNotPaused nonReentrant onlyOwner external {\r\n        require(_newRewardMintAmt < amountMintPerDuration);\r\n        amountMintPerDuration = _newRewardMintAmt;\r\n        emit RewardMintingAmt(_newRewardMintAmt);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external nonReentrant returns (bool) {\r\n        return transferFromInternal(_from, _to, _value);\r\n    }\r\n    function approve(address _spender, uint256 _value) external nonReentrant returns (bool) {\r\n        return approveInternal(_spender, _value);\r\n    }\r\n    function allowance(address _owner, address _spender) external view returns (uint256) {\r\n        return allowanceInternal(_owner, _spender);\r\n    }\r\n    function increaseApproval(address _spender, uint _addedValue) external nonReentrant returns (bool) {\r\n        return increaseApprovalInternal(_spender, _addedValue);\r\n    }\r\n    function decreaseApproval(address _spender, uint _subtractedValue) external nonReentrant returns (bool) {\r\n        return decreaseApprovalInternal(_spender, _subtractedValue);\r\n    }\r\n    function transfer(address _to, uint256 _value) external nonReentrant returns (bool) {\r\n        return transferInternal(_to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"userRewardAccountBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"redeemReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoContractAddress\",\"type\":\"address\"}],\"name\":\"setIcoContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRewardMintAmt\",\"type\":\"uint256\"}],\"name\":\"changeRewardMintingAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"durationBetweenRewardMints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardAvailableCurrentDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumRewardWithdrawalLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewardsRedeemed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rewardAddress\",\"type\":\"address\"},{\"name\":\"_amountOfReward\",\"type\":\"uint256\"},{\"name\":\"_timestampOfDistribution\",\"type\":\"uint256\"}],\"name\":\"distributeReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rewardAdresses\",\"type\":\"address[]\"},{\"name\":\"_amountOfReward\",\"type\":\"uint256[]\"},{\"name\":\"_timestampOfDistribution\",\"type\":\"uint256\"}],\"name\":\"batchDistributeReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewardsDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountMintPerDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_amountMintPerDuration\",\"type\":\"uint256\"},{\"name\":\"_durationBetweenRewardMints\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amountOfTokensMintedPreCycle\",\"type\":\"uint256\"}],\"name\":\"RewardMintingAmt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ResetReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RedeemReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tradeHash\",\"type\":\"bytes32\"}],\"name\":\"CreatedEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tradeHash\",\"type\":\"bytes32\"}],\"name\":\"ReleasedEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tradeHash\",\"type\":\"bytes32\"}],\"name\":\"Dispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tradeHash\",\"type\":\"bytes32\"}],\"name\":\"CancelledBySeller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tradeHash\",\"type\":\"bytes32\"}],\"name\":\"CancelledByBuyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tradeHash\",\"type\":\"bytes32\"}],\"name\":\"BuyerArbitratorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tradeHash\",\"type\":\"bytes32\"}],\"name\":\"SellerArbitratorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tradeHash\",\"type\":\"bytes32\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_icoContractAddress\",\"type\":\"address\"}],\"name\":\"IcoContractAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"IiinoCoin","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000108b2a2c28029094000000000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000000000000000000000000000000000000000000b6969696e6f20546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056969696e6f000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://6743e49142cb6d45b5afd276952c40d63d4477401d2a03306bb949f6d6477ef6"}]}