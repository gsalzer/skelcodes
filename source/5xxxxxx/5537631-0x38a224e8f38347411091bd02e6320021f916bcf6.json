{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function changeOwner(address _newOwner) onlyOwner public {\r\n        require(_newOwner != address(0));\r\n        OwnerChanged(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n}\r\n\r\ninterface IContractStakeToken {\r\n    function depositToken(address _investor, uint8 _stakeType, uint256 _time, uint256 _value) external returns (bool);\r\n    function validWithdrawToken(address _address, uint256 _now) public returns (uint256);\r\n    function withdrawToken(address _address) public returns (uint256);\r\n    function cancel(uint256 _index, address _address) public returns (bool _result);\r\n    function changeRates(uint8 _numberRate, uint256 _percent) public returns (bool);\r\n\r\n\r\n    function getBalanceTokenContract() public view returns (uint256);\r\n    function balanceOfToken(address _owner) external view returns (uint256 balance);\r\n    function getTokenStakeByIndex(uint256 _index) public view returns (\r\n        address _owner,\r\n        uint256 _amount,\r\n        uint8 _stakeType,\r\n        uint256 _time,\r\n        uint8 _status\r\n    );\r\n    function getTokenTransferInsByAddress(address _address, uint256 _index) public view returns (\r\n        uint256 _indexStake,\r\n        bool _isRipe\r\n    );\r\n    function getCountTransferInsToken(address _address) public view returns (uint256 _count);\r\n    function getCountStakesToken() public view returns (uint256 _count);\r\n    function getTotalTokenDepositByAddress(address _owner) public view returns (uint256 _amountEth);\r\n    function getTotalTokenWithdrawByAddress(address _owner) public view returns (uint256 _amountEth);\r\n    function setContractAdmin(address _admin, bool _isAdmin) public;\r\n\r\n    function setContractUser(address _user, bool _isUser) public;\r\n    function calculator(uint8 _currentStake, uint256 _amount, uint256 _amountHours) public view returns (uint256 stakeAmount);\r\n}\r\n\r\ninterface IContractErc20Token {\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool);\r\n    function approve(address _spender, uint256 _value) returns (bool);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n}\r\n\r\ncontract RapidProfit is Ownable {\r\n    using SafeMath for uint256;\r\n    IContractStakeToken public contractStakeToken;\r\n    IContractErc20Token public contractErc20Token;\r\n\r\n    uint256 public balanceTokenContract;\r\n\r\n    event WithdrawEther(address indexed receiver, uint256 amount);\r\n    event WithdrawToken(address indexed receiver, uint256 amount);\r\n\r\n    function RapidProfit(address _owner) public {\r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n        //owner = msg.sender; // for test's\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function() payable public {\r\n    }\r\n\r\n    function setContractStakeToken (address _addressContract) public onlyOwner {\r\n        require(_addressContract != address(0));\r\n        contractStakeToken = IContractStakeToken(_addressContract);\r\n    }\r\n\r\n    function setContractErc20Token (address _addressContract) public onlyOwner {\r\n        require(_addressContract != address(0));\r\n        contractErc20Token = IContractErc20Token(_addressContract);\r\n    }\r\n\r\n    function depositToken(address _investor, uint8 _stakeType, uint256 _value) external payable returns (bool){\r\n        require(_investor != address(0));\r\n        require(_value > 0);\r\n        require(contractErc20Token.allowance(_investor, this) >= _value);\r\n\r\n        bool resultStake = contractStakeToken.depositToken(_investor, _stakeType, now, _value);\r\n        balanceTokenContract = balanceTokenContract.add(_value);\r\n        bool resultErc20 = contractErc20Token.transferFrom(_investor, this, _value);\r\n\r\n        return (resultStake && resultErc20);\r\n    }\r\n\r\n    function validWithdrawToken(address _address, uint256 _now) public returns (uint256 result){\r\n        require(_address != address(0));\r\n        require(_now > 0);\r\n        result = contractStakeToken.validWithdrawToken(_address, _now);\r\n    }\r\n\r\n    function balanceOfToken(address _owner) public view returns (uint256 balance) {\r\n        return contractStakeToken.balanceOfToken(_owner);\r\n    }\r\n\r\n    function getCountStakesToken() public view returns (uint256 result) {\r\n        result = contractStakeToken.getCountStakesToken();\r\n    }\r\n\r\n    function getCountTransferInsToken(address _address) public view returns (uint256 result) {\r\n        result = contractStakeToken.getCountTransferInsToken(_address);\r\n    }\r\n\r\n    function getTokenStakeByIndex(uint256 _index) public view returns (\r\n        address _owner,\r\n        uint256 _amount,\r\n        uint8 _stakeType,\r\n        uint256 _time,\r\n        uint8 _status\r\n    ) {\r\n        (_owner, _amount, _stakeType, _time, _status) = contractStakeToken.getTokenStakeByIndex(_index);\r\n    }\r\n\r\n    function getTokenTransferInsByAddress(address _address, uint256 _index) public view returns (\r\n        uint256 _indexStake,\r\n        bool _isRipe\r\n    ) {\r\n        (_indexStake, _isRipe) = contractStakeToken.getTokenTransferInsByAddress(_address, _index);\r\n    }\r\n\r\n    function removeContract() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function calculator(uint8 _currentStake, uint256 _amount, uint256 _amountHours) public view returns (uint256 result){\r\n        result = contractStakeToken.calculator(_currentStake, _amount, _amountHours);\r\n    }\r\n\r\n    function getBalanceEthContract() public view returns (uint256){\r\n        return this.balance;\r\n    }\r\n\r\n    function getBalanceTokenContract() public view returns (uint256 result){\r\n        return contractErc20Token.balanceOf(this);\r\n    }\r\n\r\n    function withdrawToken(address _address) public returns (uint256 result){\r\n        uint256 amount = contractStakeToken.withdrawToken(_address);\r\n        require(getBalanceTokenContract() >= amount);\r\n        bool success = contractErc20Token.transfer(_address, amount);\r\n        //require(success);\r\n        WithdrawToken(_address, amount);\r\n        result = amount;\r\n    }\r\n\r\n    function cancelToken(uint256 _index) public returns (bool result) {\r\n        require(_index >= 0);\r\n        require(msg.sender != address(0));\r\n        result = contractStakeToken.cancel(_index, msg.sender);\r\n    }\r\n\r\n    function changeRatesToken(uint8 _numberRate, uint256 _percent) public onlyOwner returns (bool result) {\r\n        result = contractStakeToken.changeRates(_numberRate, _percent);\r\n    }\r\n\r\n    function getTotalTokenDepositByAddress(address _owner) public view returns (uint256 result) {\r\n        result = contractStakeToken.getTotalTokenDepositByAddress(_owner);\r\n    }\r\n\r\n    function getTotalTokenWithdrawByAddress(address _owner) public view returns (uint256 result) {\r\n        result = contractStakeToken.getTotalTokenWithdrawByAddress(_owner);\r\n    }\r\n\r\n    function withdrawOwnerEth(uint256 _amount) public onlyOwner returns (bool) {\r\n        require(this.balance >= _amount);\r\n        owner.transfer(_amount);\r\n        WithdrawEther(owner, _amount);\r\n    }\r\n\r\n    function withdrawOwnerToken(uint256 _amount) public onlyOwner returns (bool) {\r\n        require(getBalanceTokenContract() >= _amount);\r\n        contractErc20Token.transfer(owner, _amount);\r\n        WithdrawToken(owner, _amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"contractErc20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressContract\",\"type\":\"address\"}],\"name\":\"setContractStakeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceEthContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"cancelToken\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceTokenContract\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceTokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTotalTokenDepositByAddress\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_stakeType\",\"type\":\"uint8\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenStakeByIndex\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_stakeType\",\"type\":\"uint8\"},{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractStakeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"validWithdrawToken\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getCountTransferInsToken\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressContract\",\"type\":\"address\"}],\"name\":\"setContractErc20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenTransferInsByAddress\",\"outputs\":[{\"name\":\"_indexStake\",\"type\":\"uint256\"},{\"name\":\"_isRipe\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawOwnerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCountStakesToken\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawOwnerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfToken\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_currentStake\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_amountHours\",\"type\":\"uint256\"}],\"name\":\"calculator\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numberRate\",\"type\":\"uint8\"},{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"changeRatesToken\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTotalTokenWithdrawByAddress\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"RapidProfit","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b827eb2b2eff57aa8928132b3e6890e2ee36a270","Library":"","SwarmSource":"bzzr://bb9e68219cfb65a57cb82de6366e1b6eef5c5277b67e9a44806dd7e2fe5019fe"}]}