{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ncontract IERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public constant returns (string) {}\r\n    function symbol() public constant returns (string) {}\r\n    function decimals() public constant returns (uint8) {}\r\n    function totalSupply() public constant returns (uint256) {}\r\n    function balanceOf(address _owner) public constant returns (uint256) { _owner; }\r\n    function allowance(address _owner, address _spender) public constant returns (uint256) { _owner; _spender; }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n///@title - a contract that represents a smart wallet, created by Stox, for every new Stox user\r\nlibrary SmartWalletLib {\r\n\r\n    /*\r\n     *  Structs\r\n     */\r\n    struct Wallet {\r\n        address operatorAccount;\r\n        address backupAccount;\r\n        address userWithdrawalAccount;\r\n        address feesAccount;\r\n    }\r\n\r\n    /*\r\n     *  Members\r\n     */\r\n    string constant VERSION = \"0.1\";\r\n   \r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier validAddress(address _address) {\r\n        require(_address != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier addressNotSet(address _address) {\r\n        require(_address == 0);\r\n        _;\r\n    }\r\n\r\n    modifier operatorOnly(address _operatorAccount) {\r\n        require(msg.sender == _operatorAccount);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event TransferToBackupAccount(address _token, address _backupAccount, uint _amount);\r\n    event TransferToUserWithdrawalAccount(address _token, address _userWithdrawalAccount, uint _amount, address _feesToken, address _feesAccount, uint _fee);\r\n    event SetUserWithdrawalAccount(address _userWithdrawalAccount);\r\n\r\n    /*\r\n        @dev Initialize the wallet with the operator and backupAccount address\r\n        \r\n        @param _self                        Wallet storage\r\n        @param _backupAccount               Operator account to release funds in case the user lost his withdrawal account\r\n        @param _operator                    The operator account\r\n        @param _feesAccount                 The account to transfer fees to\r\n    */\r\n    function initWallet(Wallet storage _self, address _backupAccount, address _operator, address _feesAccount) \r\n            public\r\n            validAddress(_backupAccount)\r\n            validAddress(_operator)\r\n            validAddress(_feesAccount)\r\n            {\r\n        \r\n                _self.operatorAccount = _operator;\r\n                _self.backupAccount = _backupAccount;\r\n                _self.feesAccount = _feesAccount;\r\n    }\r\n\r\n    /*\r\n        @dev Setting the account of the user to send funds to. \r\n        \r\n        @param _self                        Wallet storage\r\n        @param _userWithdrawalAccount       The user account to withdraw funds to\r\n    */\r\n    function setUserWithdrawalAccount(Wallet storage _self, address _userWithdrawalAccount) \r\n            public\r\n            operatorOnly(_self.operatorAccount)\r\n            validAddress(_userWithdrawalAccount)\r\n            addressNotSet(_self.userWithdrawalAccount)\r\n            {\r\n        \r\n                _self.userWithdrawalAccount = _userWithdrawalAccount;\r\n                SetUserWithdrawalAccount(_userWithdrawalAccount);\r\n    }\r\n\r\n    /*\r\n        @dev Withdraw funds to a backup account. \r\n\r\n\r\n        @param _self                Wallet storage\r\n        @param _token               The ERC20 token the owner withdraws from \r\n        @param _amount              Amount to transfer    \r\n    */\r\n    function transferToBackupAccount(Wallet storage _self, IERC20Token _token, uint _amount) \r\n            public \r\n            operatorOnly(_self.operatorAccount)\r\n            {\r\n        \r\n                _token.transfer(_self.backupAccount, _amount);\r\n                TransferToBackupAccount(_token, _self.backupAccount, _amount); \r\n    }\r\n      \r\n    /*\r\n        @dev Withdraw funds to the user account. \r\n\r\n        @param _self                Wallet storage\r\n        @param _token               The ERC20 token the owner withdraws from \r\n        @param _amount              Amount to transfer  \r\n        @param _fee                 Fee to transfer   \r\n    */\r\n    function transferToUserWithdrawalAccount(Wallet storage _self, IERC20Token _token, uint _amount, IERC20Token _feesToken, uint _fee) \r\n            public \r\n            operatorOnly(_self.operatorAccount)\r\n            validAddress(_self.userWithdrawalAccount)\r\n            {\r\n\r\n                if (_fee > 0) {        \r\n                    _feesToken.transfer(_self.feesAccount, _fee); \r\n                }       \r\n                \r\n                _token.transfer(_self.userWithdrawalAccount, _amount);\r\n                TransferToUserWithdrawalAccount(_token, _self.userWithdrawalAccount, _amount,  _feesToken, _self.feesAccount, _fee);   \r\n        \r\n    }\r\n}\r\n\r\n///@title - a contract that represents a smart wallet, created by Stox, for every new Stox user\r\ncontract SmartWallet {\r\n\r\n    /*\r\n     *  Members\r\n     */\r\n    using SmartWalletLib for SmartWalletLib.Wallet;\r\n    SmartWalletLib.Wallet public wallet;\r\n       \r\n   // Wallet public wallet;\r\n    /*\r\n     *  Events\r\n     */\r\n    event TransferToBackupAccount(address _token, address _backupAccount, uint _amount);\r\n    event TransferToUserWithdrawalAccount(address _token, address _userWithdrawalAccount, uint _amount, address _feesToken, address _feesAccount, uint _fee);\r\n    event SetUserWithdrawalAccount(address _userWithdrawalAccount);\r\n     \r\n    /*\r\n        @dev constructor\r\n\r\n        @param _backupAccount       A default operator's account to send funds to, in cases where the user account is\r\n                                    unavailable or lost\r\n        @param _operator            The contract operator address\r\n        @param _feesAccount         The account to transfer fees to \r\n\r\n    */\r\n    function SmartWallet(address _backupAccount, address _operator, address _feesAccount) public {\r\n        wallet.initWallet(_backupAccount, _operator, _feesAccount);\r\n    }\r\n\r\n    /*\r\n        @dev Setting the account of the user to send funds to. \r\n        \r\n        @param _userWithdrawalAccount       The user account to withdraw funds to\r\n        \r\n    */\r\n    function setUserWithdrawalAccount(address _userWithdrawalAccount) public {\r\n        wallet.setUserWithdrawalAccount(_userWithdrawalAccount);\r\n    }\r\n\r\n    /*\r\n        @dev Withdraw funds to a backup account. \r\n\r\n\r\n        @param _token               The ERC20 token the owner withdraws from \r\n        @param _amount              Amount to transfer    \r\n    */\r\n    function transferToBackupAccount(IERC20Token _token, uint _amount) public {\r\n        wallet.transferToBackupAccount(_token, _amount);\r\n    }\r\n\r\n    /*\r\n        @dev Withdraw funds to the user account. \r\n\r\n\r\n        @param _token               The ERC20 token the owner withdraws from \r\n        @param _amount              Amount to transfer    \r\n    */\r\n    function transferToUserWithdrawalAccount(IERC20Token _token, uint _amount, IERC20Token _feesToken, uint _fee) public {\r\n        wallet.transferToUserWithdrawalAccount(_token, _amount, _feesToken, _fee);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_feesToken\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"transferToUserWithdrawalAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"operatorAccount\",\"type\":\"address\"},{\"name\":\"backupAccount\",\"type\":\"address\"},{\"name\":\"userWithdrawalAccount\",\"type\":\"address\"},{\"name\":\"feesAccount\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToBackupAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userWithdrawalAccount\",\"type\":\"address\"}],\"name\":\"setUserWithdrawalAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_backupAccount\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_feesAccount\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_backupAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferToBackupAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_userWithdrawalAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_feesToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_feesAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"TransferToUserWithdrawalAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_userWithdrawalAccount\",\"type\":\"address\"}],\"name\":\"SetUserWithdrawalAccount\",\"type\":\"event\"}]","ContractName":"SmartWallet","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d5dceac7f442067eab507badbc553a0a392da1db000000000000000000000000a28ee03590c8ff8a65bd7d9180b8ed869a147dc2000000000000000000000000ca40d7fa65ca277991075bb63fa6a812f12c010f","Library":"SmartWalletLib:C8B55C7ad00fb9b933B0a016c6CEbcEea0293bb9","SwarmSource":"bzzr://186a6bea456f288efe58b6a02ff0d87e8c97f11f7917c7738449469c750dbe1a"}]}