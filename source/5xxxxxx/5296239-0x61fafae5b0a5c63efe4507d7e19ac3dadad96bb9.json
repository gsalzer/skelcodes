{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n// File: contracts/NokuPricingPlan.sol\r\n\r\n/**\r\n* @dev The NokuPricingPlan contract defines the responsibilities of a Noku pricing plan.\r\n*/\r\ninterface NokuPricingPlan {\r\n    /**\r\n    * @dev Pay the fee for the service identified by the specified name.\r\n    * The fee amount shall already be approved by the client.\r\n    * @param serviceName The name of the target service.\r\n    * @param multiplier The multiplier of the base service fee to apply.\r\n    * @param client The client of the target service.\r\n    * @return true if fee has been paid.\r\n    */\r\n    function payFee(bytes32 serviceName, uint256 multiplier, address client) public returns(bool paid);\r\n\r\n    /**\r\n    * @dev Get the usage fee for the service identified by the specified name.\r\n    * The returned fee amount shall be approved before using #payFee method.\r\n    * @param serviceName The name of the target service.\r\n    * @param multiplier The multiplier of the base service fee to apply.\r\n    * @return The amount to approve before really paying such fee.\r\n    */\r\n    function usageFee(bytes32 serviceName, uint256 multiplier) public constant returns(uint fee);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/NokuTokenBurner.sol\r\n\r\ncontract BurnableERC20 is ERC20 {\r\n    function burn(uint256 amount) public returns (bool burned);\r\n}\r\n\r\n/**\r\n* @dev The NokuTokenBurner contract has the responsibility to burn the configured fraction of received\r\n* ERC20-compliant tokens and distribute the remainder to the configured wallet.\r\n*/\r\ncontract NokuTokenBurner is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    event LogNokuTokenBurnerCreated(address indexed caller, address indexed wallet);\r\n    event LogBurningPercentageChanged(address indexed caller, uint256 indexed burningPercentage);\r\n\r\n    // The wallet receiving the unburnt tokens.\r\n    address public wallet;\r\n\r\n    // The percentage of tokens to burn after being received (range [0, 100])\r\n    uint256 public burningPercentage;\r\n\r\n    // The cumulative amount of burnt tokens.\r\n    uint256 public burnedTokens;\r\n\r\n    // The cumulative amount of tokens transferred back to the wallet.\r\n    uint256 public transferredTokens;\r\n\r\n    /**\r\n    * @dev Create a new NokuTokenBurner with predefined burning fraction.\r\n    * @param _wallet The wallet receiving the unburnt tokens.\r\n    */\r\n    function NokuTokenBurner(address _wallet) public {\r\n        require(_wallet != address(0));\r\n        \r\n        wallet = _wallet;\r\n        burningPercentage = 100;\r\n\r\n        LogNokuTokenBurnerCreated(msg.sender, _wallet);\r\n    }\r\n\r\n    /**\r\n    * @dev Change the percentage of tokens to burn after being received.\r\n    * @param _burningPercentage The percentage of tokens to be burnt.\r\n    */\r\n    function setBurningPercentage(uint256 _burningPercentage) public onlyOwner {\r\n        require(0 <= _burningPercentage && _burningPercentage <= 100);\r\n        require(_burningPercentage != burningPercentage);\r\n        \r\n        burningPercentage = _burningPercentage;\r\n\r\n        LogBurningPercentageChanged(msg.sender, _burningPercentage);\r\n    }\r\n\r\n    /**\r\n    * @dev Called after burnable tokens has been transferred for burning.\r\n    * @param _token THe extended ERC20 interface supported by the sent tokens.\r\n    * @param _amount The amount of burnable tokens just arrived ready for burning.\r\n    */\r\n    function tokenReceived(address _token, uint256 _amount) public whenNotPaused {\r\n        require(_token != address(0));\r\n        require(_amount > 0);\r\n\r\n        uint256 amountToBurn = _amount.mul(burningPercentage).div(100);\r\n        if (amountToBurn > 0) {\r\n            assert(BurnableERC20(_token).burn(amountToBurn));\r\n            \r\n            burnedTokens = burnedTokens.add(amountToBurn);\r\n        }\r\n\r\n        uint256 amountToTransfer = _amount.sub(amountToBurn);\r\n        if (amountToTransfer > 0) {\r\n            assert(BurnableERC20(_token).transfer(wallet, amountToTransfer));\r\n\r\n            transferredTokens = transferredTokens.add(amountToTransfer);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/NokuConsumptionPlan.sol\r\n\r\n/**\r\n* @dev The NokuConsumptionPlan contract implements a flexible pricing plan, manageable by the contract owner, which can be:\r\n* - extended by inserting a new service with its associated fee\r\n* - modified by updating an existing service fee\r\n* - reduced by removing an existing service with its associated fee\r\n* - queried to obtain the count of services\r\n* The service [name, fee] association is maintained using an index in order to make the data traversable.\r\n*/\r\ncontract NokuConsumptionPlan is NokuPricingPlan, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event LogNokuConsumptionPlanCreated(address indexed caller, address indexed nokuMasterToken, address indexed tokenBurner);\r\n    event LogServiceAdded(bytes32 indexed serviceName, uint indexed index, uint indexed serviceFee);\r\n    event LogServiceChanged(bytes32 indexed serviceName, uint indexed index, uint indexed serviceFee);\r\n    event LogServiceRemoved(bytes32 indexed serviceName, uint indexed index);\r\n    \r\n    struct NokuService {\r\n        uint serviceFee;\r\n        uint index;\r\n    }\r\n\r\n    bytes32[] private serviceIndex;\r\n\r\n    mapping(bytes32 => NokuService) private services;\r\n\r\n    // The NOKU utility token used for paying fee  \r\n    address public nokuMasterToken;\r\n\r\n    // The contract responsible for burning the NOKU tokens paid as service fee\r\n    address public tokenBurner;\r\n\r\n    function NokuConsumptionPlan(address _nokuMasterToken, address _tokenBurner) public {\r\n        require(_nokuMasterToken != 0);\r\n        require(_tokenBurner != 0);\r\n\r\n        nokuMasterToken = _nokuMasterToken;\r\n        tokenBurner = _tokenBurner;\r\n\r\n        LogNokuConsumptionPlanCreated(msg.sender, _nokuMasterToken, _tokenBurner);\r\n    }\r\n\r\n    function isService(bytes32 _serviceName) public constant returns(bool isIndeed) {\r\n        require(_serviceName != 0);\r\n\r\n        if (serviceIndex.length == 0)\r\n            return false;\r\n        else\r\n            return (serviceIndex[services[_serviceName].index] == _serviceName);\r\n    }\r\n\r\n    function addService(bytes32 _serviceName, uint _serviceFee) public onlyOwner returns(uint index) {\r\n        require(!isService(_serviceName));\r\n        \r\n        services[_serviceName].serviceFee = _serviceFee;\r\n        services[_serviceName].index = serviceIndex.push(_serviceName)-1;\r\n\r\n        LogServiceAdded(_serviceName, serviceIndex.length-1, _serviceFee);\r\n\r\n        return serviceIndex.length-1;\r\n    }\r\n\r\n    function removeService(bytes32 _serviceName) public onlyOwner returns(uint index) {\r\n        require(isService(_serviceName));\r\n\r\n        uint rowToDelete = services[_serviceName].index;\r\n        bytes32 keyToMove = serviceIndex[serviceIndex.length-1];\r\n        serviceIndex[rowToDelete] = keyToMove;\r\n        services[keyToMove].index = rowToDelete; \r\n        serviceIndex.length--;\r\n\r\n        LogServiceRemoved(_serviceName,  rowToDelete);\r\n        LogServiceChanged(keyToMove, rowToDelete, services[keyToMove].serviceFee);\r\n\r\n        return rowToDelete;\r\n    }\r\n\r\n    function updateServiceFee(bytes32 _serviceName, uint _serviceFee) public onlyOwner returns(bool success) {\r\n        require(isService(_serviceName));\r\n\r\n        services[_serviceName].serviceFee = _serviceFee;\r\n\r\n        LogServiceChanged(_serviceName, services[_serviceName].index, _serviceFee);\r\n\r\n        return true;\r\n    }\r\n\r\n    function payFee(bytes32 _serviceName, uint256 _multiplier, address _client) public returns(bool paid) {\r\n        //require(isService(_serviceName)); // Already checked by #usageFee\r\n        //require(_multiplier != 0); // Already checked by #usageFee\r\n        require(_client != 0);\r\n\r\n        uint256 fee = usageFee(_serviceName, _multiplier);\r\n\r\n        assert(ERC20(nokuMasterToken).transferFrom(_client, tokenBurner, fee));\r\n\r\n        NokuTokenBurner(tokenBurner).tokenReceived(nokuMasterToken, fee);\r\n\r\n        return true;\r\n    }\r\n\r\n    function usageFee(bytes32 _serviceName, uint256 _multiplier) public constant returns(uint fee) {\r\n        require(isService(_serviceName));\r\n        require(_multiplier != 0);\r\n        \r\n        return _multiplier.mul(services[_serviceName].serviceFee);\r\n    }\r\n\r\n    function serviceCount() public constant returns(uint count) {\r\n        return serviceIndex.length;\r\n    }\r\n\r\n    function serviceAtIndex(uint _index) public constant returns(bytes32 serviceName) {\r\n        return serviceIndex[_index];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"serviceCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_serviceName\",\"type\":\"bytes32\"},{\"name\":\"_serviceFee\",\"type\":\"uint256\"}],\"name\":\"updateServiceFee\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBurner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_serviceName\",\"type\":\"bytes32\"},{\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"usageFee\",\"outputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nokuMasterToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_serviceName\",\"type\":\"bytes32\"},{\"name\":\"_serviceFee\",\"type\":\"uint256\"}],\"name\":\"addService\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"serviceAtIndex\",\"outputs\":[{\"name\":\"serviceName\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_serviceName\",\"type\":\"bytes32\"},{\"name\":\"_multiplier\",\"type\":\"uint256\"},{\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"payFee\",\"outputs\":[{\"name\":\"paid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_serviceName\",\"type\":\"bytes32\"}],\"name\":\"removeService\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_serviceName\",\"type\":\"bytes32\"}],\"name\":\"isService\",\"outputs\":[{\"name\":\"isIndeed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nokuMasterToken\",\"type\":\"address\"},{\"name\":\"_tokenBurner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"nokuMasterToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenBurner\",\"type\":\"address\"}],\"name\":\"LogNokuConsumptionPlanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"serviceName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"serviceFee\",\"type\":\"uint256\"}],\"name\":\"LogServiceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"serviceName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"serviceFee\",\"type\":\"uint256\"}],\"name\":\"LogServiceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"serviceName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"LogServiceRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NokuConsumptionPlan","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001fc52f1abade452dd4674477d4711951700b3d27000000000000000000000000891dc3f8b31645ec0323f26507cb0c0c2091405f","Library":"","SwarmSource":"bzzr://e05ffc2f599d2a1a1d70ab9717d75f8843dc3a51c4317ac505b581f3284e4098"}]}