{"status":"1","message":"OK","result":[{"SourceCode":"// loosely based on Bryn Bellomy code\r\n// https://medium.com/@bryn.bellomy/solidity-tutorial-building-a-simple-auction-contract-fcc918b0878a\r\n//\r\n// \r\n// Our Aetherian #0 ownership is now handled by this contract instead of our core. This contract \"owns\" \r\n// the monster and players can bid to get their hands on this mystical creature until someone else outbids them.\r\n// Every following sale increases the price by x1.5 until no one is willing to outbid the current owner.\r\n// Once a player has lost ownership, they will get a full refund of their bid + 50% of the revenue created by the sale.\r\n// The other 50% go to the dev team to fund development. \r\n// This \"hot potato\" style auction technically never ends and enables some very interesting scenarios\r\n// for our in-game world\r\n//\r\n\r\npragma solidity ^0.4.21;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, returns 0 if it would go into minus range.\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b >= a) {\r\n            return 0;\r\n        }\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract AuctionPotato {\r\n    using SafeMath for uint256; \r\n    // static\r\n    address public owner;\r\n    uint public startTime;\r\n    \r\n    string name;\r\n    \r\n    // start auction manually at given time\r\n    bool started;\r\n\r\n    // pototo\r\n    uint public potato;\r\n    uint oldPotato;\r\n    uint oldHighestBindingBid;\r\n    \r\n    // transfer ownership\r\n    address creatureOwner;\r\n    \r\n    event CreatureOwnershipTransferred(address indexed _from, address indexed _to);\r\n    \r\n    \r\n   \r\n    \r\n    uint public highestBindingBid;\r\n    address public highestBidder;\r\n    \r\n    // used to immidiately block placeBids\r\n    bool blockerPay;\r\n    bool blockerWithdraw;\r\n    \r\n    mapping(address => uint256) public fundsByBidder;\r\n  \r\n\r\n    event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid);\r\n    event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount);\r\n    \r\n    \r\n    \r\n    // initial settings on contract creation\r\n    constructor() public {\r\n    \r\n        \r\n        blockerWithdraw = false;\r\n        blockerPay = false;\r\n        \r\n        owner = msg.sender;\r\n        creatureOwner = owner;\r\n        \r\n        // 1 ETH starting price\r\n        highestBindingBid = 1000000000000000000;\r\n        potato = 0;\r\n        \r\n        started = false;\r\n        \r\n        name = \"Aetherian\";\r\n        \r\n    }\r\n\r\n    function getHighestBid() internal\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return fundsByBidder[highestBidder];\r\n    }\r\n    \r\n    \r\n    \r\n    function auctionName() public view returns (string _name) {\r\n        return name;\r\n    }\r\n    \r\n    // calculates the next bid amount so that you can have a one-click buy button\r\n    function nextBid() public view returns (uint _nextBid) {\r\n        return highestBindingBid.add(potato);\r\n    }\r\n    \r\n    \r\n    // command to start the auction\r\n    function startAuction() public onlyOwner returns (bool success){\r\n        require(started == false);\r\n        \r\n        started = true;\r\n        startTime = now;\r\n        \r\n        \r\n        return true;\r\n        \r\n    }\r\n    \r\n    function isStarted() public view returns (bool success) {\r\n        return started;\r\n    }\r\n\r\n    function placeBid() public\r\n        payable\r\n        onlyAfterStart\r\n        onlyNotOwner\r\n        returns (bool success)\r\n    {   \r\n        // we are only allowing to increase in bidIncrements to make for true hot potato style\r\n        // while still allowing overbid to happen in case some parties are trying to \r\n        require(msg.value >= highestBindingBid.add(potato));\r\n        require(msg.sender != highestBidder);\r\n        require(started == true);\r\n        require(blockerPay == false);\r\n        blockerPay = true;\r\n\r\n        // if someone overbids, return their\r\n        if (msg.value > highestBindingBid.add(potato))\r\n        {\r\n            uint overbid = msg.value - highestBindingBid.add(potato);\r\n            msg.sender.transfer(overbid);\r\n        }\r\n        \r\n        // calculate the user's total bid based on the current amount they've sent to the contract\r\n        // plus whatever has been sent with this transaction\r\n\r\n        \r\n        \r\n        oldHighestBindingBid = highestBindingBid;\r\n        \r\n        // set new highest bidder\r\n        highestBidder = msg.sender;\r\n        highestBindingBid = highestBindingBid.add(potato);\r\n        \r\n        fundsByBidder[msg.sender] = fundsByBidder[msg.sender].add(highestBindingBid);\r\n        \r\n        \r\n        oldPotato = potato;\r\n        \r\n        uint potatoShare;\r\n        \r\n        potatoShare = potato.div(2);\r\n        potato = highestBindingBid.mul(5).div(10);\r\n            \r\n        // special case at start of auction\r\n        if (creatureOwner == owner) {\r\n            fundsByBidder[owner] = fundsByBidder[owner].add(highestBindingBid);\r\n        }\r\n        else {\r\n            fundsByBidder[owner] = fundsByBidder[owner].add(potatoShare);\r\n            \r\n            fundsByBidder[creatureOwner] = fundsByBidder[creatureOwner].add(potatoShare);\r\n        }\r\n        \r\n        \r\n        \r\n        \r\n        emit LogBid(msg.sender, highestBidder, oldHighestBindingBid, highestBindingBid);\r\n        \r\n        \r\n        emit CreatureOwnershipTransferred(creatureOwner, msg.sender);\r\n        creatureOwner = msg.sender;\r\n        \r\n        \r\n        blockerPay = false;\r\n        return true;\r\n    }\r\n\r\n    \r\n\r\n    function withdraw() public\r\n    // can withdraw once overbid\r\n        returns (bool success)\r\n    {\r\n        require(blockerWithdraw == false);\r\n        blockerWithdraw = true;\r\n        \r\n        address withdrawalAccount;\r\n        uint withdrawalAmount;\r\n        \r\n        if (msg.sender == owner) {\r\n            withdrawalAccount = owner;\r\n            withdrawalAmount = fundsByBidder[withdrawalAccount];\r\n            \r\n            \r\n            // set funds to 0\r\n            fundsByBidder[withdrawalAccount] = 0;\r\n        }\r\n       \r\n        // overbid people can withdraw their bid + profit\r\n        // exclude owner because he is set above\r\n        if (msg.sender != highestBidder && msg.sender != owner) {\r\n            withdrawalAccount = msg.sender;\r\n            withdrawalAmount = fundsByBidder[withdrawalAccount];\r\n            fundsByBidder[withdrawalAccount] = 0;\r\n        }\r\n        \r\n        if (withdrawalAmount == 0) revert();\r\n    \r\n        // send the funds\r\n        msg.sender.transfer(withdrawalAmount);\r\n\r\n        emit LogWithdrawal(msg.sender, withdrawalAccount, withdrawalAmount);\r\n        blockerWithdraw = false;\r\n        return true;\r\n    }\r\n    \r\n    // amount owner can withdraw\r\n    // that way you can easily compare the contract balance with your amount\r\n    // if there is more in the contract than your balance someone didn't withdraw\r\n    // let them know that :)\r\n    function ownerCanWithdraw() public view returns (uint amount) {\r\n        return fundsByBidder[owner];\r\n    }\r\n    \r\n    // just in case the contract is bust and can't pay\r\n    // should never be needed but who knows\r\n    function fuelContract() public onlyOwner payable {\r\n        \r\n    }\r\n    \r\n    function balance() public view returns (uint _balance) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotOwner {\r\n        require(msg.sender != owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAfterStart {\r\n        if (now < startTime) revert();\r\n        _;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    // who owns the creature (not necessarily auction winner)\r\n    function queryCreatureOwner() public view returns (address _creatureOwner) {\r\n        return creatureOwner;\r\n    }\r\n    \r\n    \r\n    \r\n   \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"nextBid\",\"outputs\":[{\"name\":\"_nextBid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queryCreatureOwner\",\"outputs\":[{\"name\":\"_creatureOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCanWithdraw\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fuelContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionName\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundsByBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"placeBid\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBindingBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potato\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"CreatureOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"highestBidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldHighestBindingBid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"highestBindingBid\",\"type\":\"uint256\"}],\"name\":\"LogBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawalAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"}]","ContractName":"AuctionPotato","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b6addc759d3528ebc10b3fe410e13144a671573c05278b7103fef906533cff89"}]}