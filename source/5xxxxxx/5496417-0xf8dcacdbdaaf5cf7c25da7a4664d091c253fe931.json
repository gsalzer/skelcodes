{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  constructor() public { owner = msg.sender;  }\r\n \r\n  modifier onlyOwner() {     \r\n      address sender =  msg.sender;\r\n      address _owner = owner;\r\n      require(msg.sender == _owner);    \r\n      _;  \r\n  }\r\n  \r\n  function transferOwnership(address newOwner) onlyOwner public { \r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mintFinalize(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SwordToken\r\n * @dev Sword ERC20 Token that can be minted.\r\n * It is meant to be used in Sword crowdsale contract.\r\n */\r\ncontract SwordToken is MintableToken {\r\n\r\n    string public constant name = \"Sword Coin\"; \r\n    string public constant symbol = \"SWDC\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    function getTotalSupply() view public returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        super.transfer(_to, _value);\r\n    }\r\n    \r\n}\r\n\r\ncontract KycContractInterface {\r\n    function isAddressVerified(address _address) public view returns (bool);\r\n}\r\n\r\ncontract KycContract is Ownable {\r\n    \r\n    mapping (address => bool) verifiedAddresses;\r\n    \r\n    function isAddressVerified(address _address) public view returns (bool) {\r\n        return verifiedAddresses[_address];\r\n    }\r\n    \r\n    function addAddress(address _newAddress) public onlyOwner {\r\n        require(!verifiedAddresses[_newAddress]);\r\n        \r\n        verifiedAddresses[_newAddress] = true;\r\n    }\r\n    \r\n    function removeAddress(address _oldAddress) public onlyOwner {\r\n        require(verifiedAddresses[_oldAddress]);\r\n        \r\n        verifiedAddresses[_oldAddress] = false;\r\n    }\r\n    \r\n    function batchAddAddresses(address[] _addresses) public onlyOwner {\r\n        for (uint cnt = 0; cnt < _addresses.length; cnt++) {\r\n            assert(!verifiedAddresses[_addresses[cnt]]);\r\n            verifiedAddresses[_addresses[cnt]] = true;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SwordCrowdsale\r\n * @dev This is Sword's crowdsale contract.\r\n */\r\ncontract SwordCrowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n    uint256 public limitDateSale; // end date in units\r\n   \r\n    bool public isSoftCapHit = false;\r\n    bool public isStarted = false;\r\n    bool public isFinalized = false;\r\n   \r\n   struct ContributorData {\r\n        uint256 contributionAmount;\r\n        uint256 tokensIssued;\r\n    }\r\n   \r\n   address[] public tokenSendFailures;\r\n   \r\n    mapping(address => ContributorData) public contributorList;\r\n    mapping(uint => address) contributorIndexes;\r\n    uint nextContributorIndex;\r\n\r\n    constructor() public {}\r\n    \r\n   function init(uint256 _totalTokens, uint256 _tokensForCrowdsale, address _wallet, \r\n        uint256 _etherInUSD, address _tokenAddress, uint256 _softCapInEthers, uint256 _hardCapInEthers, \r\n        uint _saleDurationInDays, address _kycAddress, uint bonus) onlyOwner public {\r\n        \r\n        setTotalTokens(_totalTokens);\r\n        setTokensForCrowdSale(_tokensForCrowdsale);\r\n        setWallet(_wallet);\r\n        setRate(_etherInUSD);\r\n        setTokenAddress(_tokenAddress);\r\n        setSoftCap(_softCapInEthers);\r\n        setHardCap(_hardCapInEthers);\r\n        setSaleDuration(_saleDurationInDays);\r\n        setKycAddress(_kycAddress);\r\n        setSaleBonus(bonus);\r\n        kyc = KycContract(_kycAddress);\r\n        start(); // starting the crowdsale\r\n   }\r\n   \r\n    /**\r\n    * @dev Must be called to start the crowdsale\r\n    */\r\n    function start() onlyOwner public {\r\n        require(!isStarted);\r\n        require(!hasStarted());\r\n        require(wallet != address(0));\r\n        require(tokenAddress != address(0));\r\n        require(kycAddress != address(0));\r\n        require(rate != 0);\r\n        require(saleDuration != 0);\r\n        require(totalTokens != 0);\r\n        require(tokensForCrowdSale != 0);\r\n        require(softCap != 0);\r\n        require(hardCap != 0);\r\n        \r\n        starting();\r\n        emit SwordStarted();\r\n        \r\n        isStarted = true;\r\n    }\r\n  \r\n  \r\n   uint256 public totalTokens = 0;\r\n   function setTotalTokens(uint256 _totalTokens) onlyOwner public {\r\n       totalTokens = _totalTokens * (10 ** 18); // Total 1 billion tokens, 75 percent will be sold\r\n   }\r\n    \r\n   uint256 public tokensForCrowdSale = 0;\r\n   function setTokensForCrowdSale(uint256 _tokensForCrowdsale) onlyOwner public {\r\n       tokensForCrowdSale = _tokensForCrowdsale * (10 ** 18); // Total 1 billion tokens, 75 percent will be sold \r\n   }\r\n \r\n    // address where funds are collected\r\n    address public wallet = 0x0;\r\n    function setWallet(address _wallet) onlyOwner public {\r\n        wallet = _wallet;\r\n    } \r\n\r\n    uint256 public rate = 0;\r\n    function setRate(uint256 _etherInUSD) public onlyOwner{\r\n         rate = (5 * (10**18) / 100) / _etherInUSD;\r\n    }\r\n    \r\n    // The token being sold\r\n    SwordToken public token;\r\n    address tokenAddress = 0x0; \r\n    function setTokenAddress(address _tokenAddress) public onlyOwner {\r\n        tokenAddress = _tokenAddress; // to check if token address is provided at start\r\n        token = SwordToken(_tokenAddress);\r\n    }\r\n\r\n   uint256 public softCap = 0;\r\n   function setSoftCap(uint256 _softCap) onlyOwner public {\r\n       softCap = _softCap * (10 ** 18); \r\n    }\r\n   \r\n   uint256 public hardCap = 0; \r\n   function setHardCap(uint256 _hardCap) onlyOwner public {\r\n       hardCap = _hardCap * (10 ** 18); \r\n   }\r\n  \r\n    // sale period (includes holidays)\r\n    uint public saleDuration = 0; // in days ex: 60.\r\n    function setSaleDuration(uint _saleDurationInDays) onlyOwner public {\r\n        saleDuration = _saleDurationInDays;\r\n\t\tlimitDateSale = startTime + (saleDuration * 1 days);\r\n        endTime = limitDateSale;\r\n    }\r\n  \r\n    address kycAddress = 0x0;\r\n    function setKycAddress(address _kycAddress) onlyOwner public {\r\n        kycAddress = _kycAddress;\r\n    }\r\n\t\r\n    uint public saleBonus = 0; // ex. 10\r\n    function setSaleBonus(uint bonus) public onlyOwner{\r\n        saleBonus = bonus;\r\n    }\r\n  \r\n   bool public isKYCRequiredToReceiveFunds = true; // whether Kyc is required to receive funds.\r\n    function setKYCRequiredToReceiveFunds(bool IS_KYCRequiredToReceiveFunds) public onlyOwner{\r\n        isKYCRequiredToReceiveFunds = IS_KYCRequiredToReceiveFunds;\r\n    }\r\n    \r\n    bool public isKYCRequiredToSendTokens = true; // whether Kyc is required to send tokens.\r\n      function setKYCRequiredToSendTokens(bool IS_KYCRequiredToSendTokens) public onlyOwner{\r\n        isKYCRequiredToSendTokens = IS_KYCRequiredToSendTokens;\r\n    }\r\n    \r\n    \r\n    // fallback function can be used to buy tokens\r\n    function () public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n    \r\n   KycContract public kyc;\r\n   function transferKycOwnerShip(address _address) onlyOwner public {\r\n       kyc.transferOwnership(_address);\r\n   }\r\n   \r\n   function transferTokenOwnership(address _address) onlyOwner public {\r\n       token.transferOwnership(_address);\r\n   }\r\n   \r\n    /**\r\n     * release Tokens\r\n     */\r\n    function releaseAllTokens() onlyOwner public {\r\n        for(uint i=0; i < nextContributorIndex; i++) {\r\n            address addressToSendTo = contributorIndexes[i]; // address of user\r\n            releaseTokens(addressToSendTo);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * release Tokens of an individual address\r\n     */\r\n    function releaseTokens(address _contributerAddress) onlyOwner public {\r\n        if(isKYCRequiredToSendTokens){\r\n             if(KycContractInterface(kycAddress).isAddressVerified(_contributerAddress)){ // if kyc needs to be checked at release time\r\n                release(_contributerAddress);\r\n             }\r\n        } else {\r\n            release(_contributerAddress);\r\n        }\r\n    }\r\n    \r\n    function release(address _contributerAddress) internal {\r\n        if(contributorList[_contributerAddress].tokensIssued > 0) { \r\n            if(token.mint(_contributerAddress, contributorList[_contributerAddress].tokensIssued)) { // tokens sent successfully\r\n                contributorList[_contributerAddress].tokensIssued = 0;\r\n                contributorList[_contributerAddress].contributionAmount = 0;\r\n            } else { // token sending failed, has to be processed manually\r\n                tokenSendFailures.push(_contributerAddress);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function tokenSendFailuresCount() public view returns (uint) {\r\n        return tokenSendFailures.length;\r\n    }\r\n   \r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != address(0));\r\n        require(validPurchase());\r\n        if(isKYCRequiredToReceiveFunds){\r\n            require(KycContractInterface(kycAddress).isAddressVerified(msg.sender));\r\n        }\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = computeTokens(weiAmount);\r\n\r\n        require(isWithinTokenAllocLimit(tokens));\r\n\r\n        // update state - Add to eth raised\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        if (contributorList[beneficiary].contributionAmount == 0) { // if its a new contributor, add him and increase index\r\n            contributorIndexes[nextContributorIndex] = beneficiary;\r\n            nextContributorIndex += 1;\r\n        }\r\n        contributorList[beneficiary].contributionAmount += weiAmount;\r\n        contributorList[beneficiary].tokensIssued += tokens;\r\n\r\n        emit SwordTokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n        handleFunds();\r\n    }\r\n  \r\n      /**\r\n    * event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n    event SwordTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  \r\n    function investorCount() constant public returns(uint) {\r\n        return nextContributorIndex;\r\n    }\r\n    \r\n    // @return true if crowdsale event has started\r\n    function hasStarted() public constant returns (bool) {\r\n        return (startTime != 0 && now > startTime);\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n    \r\n     // send ether to the fund collection wallet\r\n    function forwardAllRaisedFunds() internal {\r\n        wallet.transfer(weiRaised);\r\n    }\r\n\r\n    function isWithinSaleTimeLimit() internal view returns (bool) {\r\n        return now <= limitDateSale;\r\n    }\r\n\r\n    function isWithinSaleLimit(uint256 _tokens) internal view returns (bool) {\r\n        return token.getTotalSupply().add(_tokens) <= tokensForCrowdSale;\r\n    }\r\n\r\n    function computeTokens(uint256 weiAmount) view internal returns (uint256) {\r\n        uint256 appliedBonus = 0;\r\n        if (isWithinSaleTimeLimit()) {\r\n            appliedBonus = saleBonus;\r\n        } \r\n        return (weiAmount.div(rate) + (weiAmount.div(rate).mul(appliedBonus).div(100))) * (10 ** 18);\r\n    }\r\n    \r\n    function isWithinTokenAllocLimit(uint256 _tokens) view internal returns (bool) {\r\n        return (isWithinSaleTimeLimit() && isWithinSaleLimit(_tokens));\r\n    }\r\n\r\n    function didSoftCapReached() internal returns (bool) {\r\n        if(weiRaised >= softCap){\r\n            isSoftCapHit = true; // setting the flag that soft cap is hit and all funds should be sent directly to wallet from now on.\r\n        } else {\r\n            isSoftCapHit = false;\r\n        }\r\n        return isSoftCapHit;\r\n    }\r\n\r\n    // overriding SwordBaseCrowdsale#validPurchase to add extra cap logic\r\n    // @return true if investors can buy at the moment\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinCap = weiRaised.add(msg.value) <= hardCap;\r\n        bool withinPeriod = now >= startTime && now <= endTime; \r\n        bool nonZeroPurchase = msg.value != 0; \r\n        return (withinPeriod && nonZeroPurchase) && withinCap && isWithinSaleTimeLimit();\r\n    }\r\n\r\n    // overriding Crowdsale#hasEnded to add cap logic\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        bool capReached = weiRaised >= hardCap;\r\n        return (endTime != 0 && now > endTime) || capReached;\r\n    }\r\n\r\n  \r\n\r\n  event SwordStarted();\r\n  event SwordFinalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n   // require(hasEnded());\r\n\r\n    finalization();\r\n    emit SwordFinalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n    function starting() internal {\r\n        startTime = now;\r\n        limitDateSale = startTime + (saleDuration * 1 days);\r\n        endTime = limitDateSale;\r\n    }\r\n\r\n    function finalization() internal {\r\n        uint256 remainingTokens = totalTokens.sub(token.getTotalSupply());\r\n        token.mintFinalize(wallet, remainingTokens);\r\n        forwardAllRaisedFunds(); \r\n    }\r\n    \r\n    // overridden\r\n    function handleFunds() internal {\r\n        if(isSoftCapHit){ // if soft cap is reached, start transferring funds immediately to wallet\r\n            forwardFunds();  \r\n        } else {\r\n            if(didSoftCapReached()){    \r\n                forwardAllRaisedFunds();            \r\n            }\r\n        }\r\n    }\r\n    \r\n     modifier afterDeadline() { if (hasEnded() || isFinalized) _; } // a modifier to tell token sale ended \r\n    \r\n  /**\r\n     * auto refund Tokens\r\n     */\r\n    function refundAllMoney() onlyOwner public {\r\n        for(uint i=0; i < nextContributorIndex; i++) {\r\n            address addressToSendTo = contributorIndexes[i];\r\n            refundMoney(addressToSendTo); \r\n        }\r\n    }\r\n    \r\n    /**\r\n     * refund Tokens of a single address\r\n     */\r\n    function refundMoney(address _address) onlyOwner public {\r\n        uint amount = contributorList[_address].contributionAmount;\r\n        if (amount > 0 && _address.send(amount)) { // user got money back\r\n            contributorList[_address].contributionAmount =  0;\r\n            contributorList[_address].tokensIssued =  0;\r\n        } \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"batchAddAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldAddress\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAddressVerified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"KycContract","CompilerVersion":"v0.4.24-nightly.2018.4.27+commit.1604a996","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b06ed6e33ac9fb9255a3292147ee5f5b4e48e99cb0b68283d4dfff6b7dfa4a09"}]}