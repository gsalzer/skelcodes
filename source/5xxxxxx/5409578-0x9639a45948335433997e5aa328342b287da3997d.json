{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.14;\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Currency contract\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// NRB_Users\r\n// ----------------------------------------------------------------------------\r\ncontract NRB_Users {\r\n    function init(address _main, address _flc) public;\r\n    function registerUserOnToken(address _token, address _user, uint _value, uint _flc, string _json) public returns (uint);\r\n    function getUserIndexOnEther(address _user) constant public returns (uint);\r\n    function getUserIndexOnToken(address _token, address _user) constant public returns (uint);\r\n    function getUserLengthOnEther() constant public returns (uint);\r\n    function getUserLengthOnToken(address _token) constant public returns (uint);\r\n    function getUserNumbersOnToken(address _token, uint _index) constant public returns (uint, uint, uint, uint, address);\r\n    function getUserTotalPaid(address _user, address _token) constant public returns (uint);\r\n    function getUserTotalCredit(address _user, address _token) constant public returns (uint);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// NRB_Tokens contract\r\n// ----------------------------------------------------------------------------\r\ncontract NRB_Tokens {\r\n    function init(address _main, address _flc) public;\r\n    function getTokenListLength() constant public returns (uint);\r\n    function getTokenAddressByIndex(uint _index) constant public returns (address);\r\n    function isTokenRegistered(address _token) constant public returns (bool);\r\n    function registerToken(address _token, string _name, string _symbol, uint _decimals) public;\r\n    function registerTokenPayment(address _token, uint _value) public;\r\n    function sendFLC(address user, address token, uint totalpaid) public returns (uint);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// contract WhiteListAccess\r\n// ----------------------------------------------------------------------------\r\ncontract WhiteListAccess {\r\n    \r\n    function WhiteListAccess() public {\r\n        owner = msg.sender;\r\n        whitelist[owner] = true;\r\n        whitelist[address(this)] = true;\r\n    }\r\n    \r\n    address public owner;\r\n    mapping (address => bool) whitelist;\r\n\r\n    modifier onlyBy(address who) { require(msg.sender == who); _; }\r\n    modifier onlyOwner {require(msg.sender == owner); _;}\r\n    modifier onlyWhitelisted {require(whitelist[msg.sender]); _;}\r\n\r\n    function addToWhiteList(address trusted) public onlyOwner() {\r\n        whitelist[trusted] = true;\r\n    }\r\n\r\n    function removeFromWhiteList(address untrusted) public onlyOwner() {\r\n        whitelist[untrusted] = false;\r\n    }\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// CNTCommon contract\r\n// ----------------------------------------------------------------------------\r\ncontract NRB_Common is WhiteListAccess {\r\n    string public name;             // contract's name\r\n    function NRB_Common() public { ETH_address = 0x1; }\r\n\r\n    // Deployment\r\n    address public ETH_address;    // representation of Ether as Token (0x1)\r\n    address public TOKENS_address;  // NRB_Tokens\r\n    address public USERS_address;   // NRB_Users\r\n    address public FLC_address;     // Four Leaf Clover Token\r\n\r\n    // Debug\r\n    event Debug(string, bool);\r\n    event Debug(string, uint);\r\n    event Debug(string, uint, uint);\r\n    event Debug(string, uint, uint, uint);\r\n    event Debug(string, uint, uint, uint, uint);\r\n    event Debug(string, address);\r\n    event Debug(string, address, address);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// NRB_Main (main) contract\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract NRB_Main is NRB_Common {\r\n    mapping(address => uint) raisedAmount;\r\n    bool _init;\r\n\r\n    function NRB_Main() public {\r\n        _init = false;\r\n        name = \"NRB_Main\";\r\n    }\r\n\r\n    function init(address _tokens, address _users, address _flc) public {\r\n        require(!_init);\r\n        TOKENS_address = _tokens;\r\n        USERS_address = _users;\r\n        FLC_address = _flc;\r\n        NRB_Tokens(TOKENS_address).init(address(this), _flc);\r\n        NRB_Users(USERS_address).init(address(this), _flc);\r\n        _init = true;\r\n    }\r\n\r\n    function isTokenRegistered(address _token) constant public returns (bool) {\r\n        return NRB_Tokens(TOKENS_address).isTokenRegistered(_token);\r\n    }\r\n\r\n    function isInit() constant public returns (bool) {\r\n        return _init;\r\n    }\r\n\r\n    // User Registration ------------------------------------------\r\n    function registerMeOnEther(string _json) payable public {\r\n        return registerMeOnTokenCore(ETH_address, msg.sender, msg.value, _json);\r\n    }\r\n\r\n    function registerMeOnToken(address _token, uint _value, string _json) public {\r\n        return registerMeOnTokenCore(_token, msg.sender, _value, _json);\r\n    }\r\n\r\n    function registerMeOnTokenCore(address _token, address _user, uint _value, string _json) internal {\r\n        require(this.isTokenRegistered(_token));\r\n        raisedAmount[_token] = raisedAmount[_token] + _value;\r\n\r\n        uint _credit = NRB_Users(USERS_address).getUserTotalCredit(_user, _token);\r\n        uint _totalpaid = NRB_Users(USERS_address).getUserTotalPaid(_user, _token) + _value - _credit;\r\n        uint flc = NRB_Tokens(TOKENS_address).sendFLC(_user, _token, _totalpaid);\r\n\r\n        NRB_Users(USERS_address).registerUserOnToken(_token, _user, _value, flc,_json);\r\n        NRB_Tokens(TOKENS_address).registerTokenPayment(_token,_value);\r\n\r\n        withdrawalFrom(_token, _user, _value);\r\n    }\r\n\r\n    function getRaisedAmountOnEther() constant public returns (uint) {\r\n        return this.getRaisedAmountOnToken(ETH_address);\r\n    }\r\n\r\n    function getRaisedAmountOnToken(address _token) constant public returns (uint) {\r\n        return raisedAmount[_token];\r\n    }\r\n\r\n    function getUserIndexOnEther(address _user) constant public returns (uint) {\r\n        return NRB_Users(USERS_address).getUserIndexOnEther(_user);\r\n    }\r\n\r\n    function getUserIndexOnToken(address _token, address _user) constant public returns (uint) {\r\n        return NRB_Users(USERS_address).getUserIndexOnToken(_token, _user);\r\n    }\r\n\r\n    function getUserLengthOnEther() constant public returns (uint) {\r\n        return NRB_Users(USERS_address).getUserLengthOnEther();\r\n    }\r\n\r\n    function getUserLengthOnToken(address _token) constant public returns (uint) {\r\n        return NRB_Users(USERS_address).getUserLengthOnToken(_token);\r\n    }\r\n\r\n    function getUserNumbersOnEther(uint _index) constant public returns (uint, uint, uint, uint, uint) {\r\n        return getUserNumbersOnToken(ETH_address, _index);\r\n    }\r\n\r\n    function getUserNumbersOnToken(address _token, uint _index) constant public returns (uint, uint, uint, uint, uint) {\r\n        address _user;\r\n        uint _time;\r\n        uint _userid;\r\n        uint _userindex;\r\n        uint _paid;\r\n        (_time, _userid, _userindex, _paid, _user) = NRB_Users(USERS_address).getUserNumbersOnToken(_token, _index);\r\n        uint _balance = _paid * 10;\r\n        uint _userbalance = getUserBalanceOnToken(_token, _user);\r\n        if (_userbalance < _balance) {\r\n            _balance = _userbalance;\r\n        }\r\n        return (_time, _balance, _paid, _userid, _userindex);\r\n    }\r\n\r\n\r\n    function getUserBalanceOnEther(address _user) constant public returns (uint) {\r\n        return this.getUserBalanceOnToken(ETH_address, _user);\r\n    }\r\n\r\n    function getUserBalanceOnToken(address _token, address _user) constant public returns (uint) {\r\n        if (_token == ETH_address) {\r\n            return _user.balance;\r\n        } else {\r\n            return ERC20Interface(_token).balanceOf(_user);\r\n        }\r\n    }\r\n    \r\n    function withdrawalFrom(address _token, address _user, uint _value) public {\r\n        if (_token != ETH_address) {\r\n            ERC20Interface(_token).transferFrom(_user, owner, _value);\r\n        } else {\r\n            owner.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    // recover tokens sent accidentally\r\n    function _withdrawal(address _token) public {\r\n        uint _balance =  ERC20Interface(_token).balanceOf(address(this));\r\n        if (_balance > 0) {\r\n            ERC20Interface(_token).transfer(owner, _balance);\r\n        }\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalanceOnToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"untrusted\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserIndexOnEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserLengthOnToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address\"},{\"name\":\"_users\",\"type\":\"address\"},{\"name\":\"_flc\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USERS_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"trusted\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLC_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserLengthOnEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getRaisedAmountOnToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserNumbersOnToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserNumbersOnEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawalFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRaisedAmountOnEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalanceOnEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"_withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_json\",\"type\":\"string\"}],\"name\":\"registerMeOnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_json\",\"type\":\"string\"}],\"name\":\"registerMeOnEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserIndexOnToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"bool\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"Debug\",\"type\":\"event\"}]","ContractName":"NRB_Main","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://18dda450cb4942af919f02f58a0ee67d7076a53283ac664832bee97fca2fbb9d"}]}