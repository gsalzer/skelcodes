{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface (only needed methods)\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title QWoodDAOTokenSale\r\n * @dev The QWoodDAOTokenSale contract receive ether and other foreign tokens and exchange them to set tokens.\r\n */\r\ncontract QWoodDAOTokenSale is Pausable {\r\n  using SafeMath for uint256;\r\n\r\n\r\n  // Represents data of foreign token which can be exchange to token\r\n  struct ReceivedToken {\r\n    // name of foreign token\r\n    string name;\r\n\r\n    // number of token units a buyer gets per foreign token unit\r\n    uint256 rate;\r\n\r\n    // amount of raised foreign tokens\r\n    uint256 raised;\r\n  }\r\n\r\n\r\n  // The token being sold\r\n  ERC20 public token;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // How many token units a buyer gets per wei.\r\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\r\n  // So, if you are using a rate of 1 with a ERC20 token with 3 decimals called TOK\r\n  // 1 wei will give you 1 unit, or 0.001 TOK.\r\n  uint256 public rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  // Map from token address to token data\r\n  mapping (address => ReceivedToken) public receivedTokens;\r\n\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * Event for token purchase for token logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value foreign tokens units paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenForTokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * Event for change rate logging\r\n   * @param newRate new number of token units a buyer gets per wei\r\n   */\r\n  event ChangeRate(uint256 newRate);\r\n\r\n  /**\r\n   * Event for add received token logging\r\n   * @param tokenAddress address of added foreign token\r\n   * @param name name of added token\r\n   * @param rate number of token units a buyer gets per added foreign token unit\r\n   */\r\n  event AddReceivedToken(\r\n    address indexed tokenAddress,\r\n    string name,\r\n    uint256 rate\r\n  );\r\n\r\n  /**\r\n   * Event for remove received token logging\r\n   * @param tokenAddress address of removed foreign token\r\n   */\r\n  event RemoveReceivedToken(address indexed tokenAddress);\r\n\r\n  /**\r\n   * Event for set new received token rate logging\r\n   * @param tokenAddress address of foreign token\r\n   * @param newRate new number of token units a buyer gets per added foreign token unit\r\n   */\r\n  event SetReceivedTokenRate(\r\n    address indexed tokenAddress,\r\n    uint256 newRate\r\n  );\r\n\r\n  /**\r\n   * Event for send excess ether logging\r\n   * @param beneficiary who gets excess ether\r\n   * @param value excess weis\r\n   */\r\n  event SendEtherExcess(\r\n    address indexed beneficiary,\r\n    uint256 value\r\n  );\r\n\r\n  /**\r\n   * Event for send tokens excess logging\r\n   * @param beneficiary who gets tokens excess\r\n   * @param value excess token units\r\n   */\r\n  event SendTokensExcess(\r\n    address indexed beneficiary,\r\n    uint256 value\r\n  );\r\n\r\n  /**\r\n   * Event for logging received tokens from approveAndCall function\r\n   * @param from who send tokens\r\n   * @param amount amount of received purchased\r\n   * @param tokenAddress address of token contract\r\n   * @param extraData data attached to payment\r\n   */\r\n  event ReceivedTokens(\r\n    address indexed from,\r\n    uint256 amount,\r\n    address indexed tokenAddress,\r\n    bytes extraData\r\n  );\r\n\r\n\r\n  /**\r\n   * @param _rate Number of token units a buyer gets per wei\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   * @param _token Address of the token being sold\r\n   */\r\n  constructor (\r\n    uint256 _rate,\r\n    address _wallet,\r\n    ERC20 _token\r\n  )\r\n    public\r\n  {\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    token = _token;\r\n  }\r\n\r\n\r\n  // -----------------------------------------\r\n  // External interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n * @dev fallback function ***DO NOT OVERRIDE***\r\n */\r\n  function () whenNotPaused external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) whenNotPaused public payable {\r\n    require(_beneficiary != address(0));\r\n\r\n    uint256 weiAmount = msg.value;\r\n    require(weiAmount != 0);\r\n\r\n    uint256 tokenBalance = token.balanceOf(address(this));\r\n    require(tokenBalance > 0);\r\n\r\n    uint256 tokens = _getTokenAmount(address(0), weiAmount);\r\n\r\n    if (tokens > tokenBalance) {\r\n      tokens = tokenBalance;\r\n      weiAmount = _inverseGetTokenAmount(address(0), tokens);\r\n\r\n      uint256 senderExcess = msg.value.sub(weiAmount);\r\n      msg.sender.transfer(senderExcess);\r\n\r\n      emit SendEtherExcess(\r\n        msg.sender,\r\n        senderExcess\r\n      );\r\n    }\r\n\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(_beneficiary, tokens);\r\n    emit TokenPurchase(\r\n      msg.sender,\r\n      _beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Sets new rate.\r\n   * @param _newRate New number of token units a buyer gets per wei\r\n   */\r\n  function setRate(uint256 _newRate) onlyOwner external {\r\n    require(_newRate > 0);\r\n    rate = _newRate;\r\n\r\n    emit ChangeRate(_newRate);\r\n  }\r\n\r\n  /**\r\n   * @dev Set new wallet address.\r\n   * @param _newWallet New address where collected funds will be forwarded to\r\n   */\r\n  function setWallet(address _newWallet) onlyOwner external {\r\n    require(_newWallet != address(0));\r\n    wallet = _newWallet;\r\n  }\r\n\r\n  /**\r\n   * @dev Set new token address.\r\n   * @param _newToken New address of the token being sold\r\n   */\r\n  function setToken(ERC20 _newToken) onlyOwner external {\r\n    require(_newToken != address(0));\r\n    token = _newToken;\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraws any tokens from this contract to wallet.\r\n   * @param _tokenContract The address of the foreign token\r\n   */\r\n  function withdrawTokens(ERC20 _tokenContract) onlyOwner external {\r\n    require(_tokenContract != address(0));\r\n\r\n    uint256 amount = _tokenContract.balanceOf(address(this));\r\n    _tokenContract.transfer(wallet, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraws all ether from this contract to wallet.\r\n   */\r\n  function withdraw() onlyOwner external {\r\n    wallet.transfer(address(this).balance);\r\n  }\r\n\r\n  /**\r\n   * @dev Adds received foreign token.\r\n   * @param _tokenAddress Address of the foreign token being added\r\n   * @param _tokenName Name of the foreign token\r\n   * @param _tokenRate Number of token units a buyer gets per foreign token unit\r\n   */\r\n  function addReceivedToken(\r\n    ERC20 _tokenAddress,\r\n    string _tokenName,\r\n    uint256 _tokenRate\r\n  )\r\n    onlyOwner\r\n    external\r\n  {\r\n    require(_tokenAddress != address(0));\r\n    require(_tokenRate > 0);\r\n\r\n    ReceivedToken memory _token = ReceivedToken({\r\n      name: _tokenName,\r\n      rate: _tokenRate,\r\n      raised: 0\r\n    });\r\n\r\n    receivedTokens[_tokenAddress] = _token;\r\n\r\n    emit AddReceivedToken(\r\n      _tokenAddress,\r\n      _token.name,\r\n      _token.rate\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Removes received foreign token.\r\n   * @param _tokenAddress Address of the foreign token being removed\r\n   */\r\n  function removeReceivedToken(ERC20 _tokenAddress) onlyOwner external {\r\n    require(_tokenAddress != address(0));\r\n\r\n    delete receivedTokens[_tokenAddress];\r\n\r\n    emit RemoveReceivedToken(_tokenAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets new rate for received foreign token.\r\n   * @param _tokenAddress Address of the foreign token\r\n   * @param _newTokenRate New number of token units a buyer gets per foreign token unit\r\n   */\r\n  function setReceivedTokenRate(\r\n    ERC20 _tokenAddress,\r\n    uint256 _newTokenRate\r\n  )\r\n    onlyOwner\r\n    external\r\n  {\r\n    require(_tokenAddress != address(0));\r\n    require(receivedTokens[_tokenAddress].rate > 0);\r\n    require(_newTokenRate > 0);\r\n\r\n    receivedTokens[_tokenAddress].rate = _newTokenRate;\r\n\r\n    emit SetReceivedTokenRate(\r\n      _tokenAddress,\r\n      _newTokenRate\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Receives approved foreign tokens and exchange them to tokens.\r\n   * @param _from Address of foreign tokens sender\r\n   * @param _amount Amount of the foreign tokens\r\n   * @param _tokenAddress Address of the foreign token contract\r\n   * @param _extraData Data attached to payment\r\n   */\r\n  function receiveApproval(\r\n    address _from,\r\n    uint256 _amount,\r\n    address _tokenAddress,\r\n    bytes _extraData\r\n  )\r\n    whenNotPaused external\r\n  {\r\n\r\n    require(_from != address(0));\r\n    require(_tokenAddress != address(0));\r\n    require(receivedTokens[_tokenAddress].rate > 0); // check: token in receivedTokens\r\n    require(_amount > 0);\r\n\r\n    require(msg.sender == _tokenAddress);\r\n\r\n    emit ReceivedTokens(\r\n      _from,\r\n      _amount,\r\n      _tokenAddress,\r\n      _extraData\r\n    );\r\n\r\n    _exchangeTokens(ERC20(_tokenAddress), _from, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Deposits foreign token and exchange them to tokens.\r\n   * @param _tokenAddress Address of the foreign token\r\n   * @param _amount Amount of the foreign tokens\r\n   */\r\n  function depositToken(\r\n    ERC20 _tokenAddress,\r\n    uint256 _amount\r\n  )\r\n    whenNotPaused external\r\n  {\r\n    // Remember to call ERC20(address).approve(this, amount)\r\n    // or this contract will not be able to do the transfer on your behalf\r\n    require(_tokenAddress != address(0));\r\n\r\n    require(receivedTokens[_tokenAddress].rate > 0);\r\n    require(_amount > 0);\r\n\r\n    _exchangeTokens(_tokenAddress, msg.sender, _amount);\r\n  }\r\n\r\n\r\n  // -----------------------------------------\r\n  // Internal interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Exchanges foreign tokens to self token. Low-level exchange method.\r\n   * @param _tokenAddress Address of the foreign token contract\r\n   * @param _sender Sender address\r\n   * @param _amount Number of tokens for exchange\r\n   */\r\n  function _exchangeTokens(\r\n    ERC20 _tokenAddress,\r\n    address _sender,\r\n    uint256 _amount\r\n  )\r\n    internal\r\n  {\r\n    uint256 foreignTokenAmount = _amount;\r\n\r\n    require(_tokenAddress.transferFrom(_sender, address(this), foreignTokenAmount));\r\n\r\n    uint256 tokenBalance = token.balanceOf(address(this));\r\n    require(tokenBalance > 0);\r\n\r\n    uint256 tokens = _getTokenAmount(_tokenAddress, foreignTokenAmount);\r\n\r\n    if (tokens > tokenBalance) {\r\n      tokens = tokenBalance;\r\n      foreignTokenAmount = _inverseGetTokenAmount(_tokenAddress, tokens);\r\n\r\n      uint256 senderForeignTokenExcess = _amount.sub(foreignTokenAmount);\r\n      _tokenAddress.transfer(_sender, senderForeignTokenExcess);\r\n\r\n      emit SendTokensExcess(\r\n        _sender,\r\n        senderForeignTokenExcess\r\n      );\r\n    }\r\n\r\n    receivedTokens[_tokenAddress].raised = receivedTokens[_tokenAddress].raised.add(foreignTokenAmount);\r\n\r\n    _processPurchase(_sender, tokens);\r\n    emit TokenForTokenPurchase(\r\n      _sender,\r\n      _sender,\r\n      foreignTokenAmount,\r\n      tokens\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    token.transfer(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether or foreign token unit is converted to tokens.\r\n   * @param _tokenAddress Address of foreign token or 0 if ether to tokens\r\n   * @param _amount Value in wei or foreign token units to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _amount (wei or foreign token units)\r\n   */\r\n  function _getTokenAmount(address _tokenAddress, uint256 _amount)\r\n    internal view returns (uint256)\r\n  {\r\n    uint256 _rate;\r\n\r\n    if (_tokenAddress == address(0)) {\r\n      _rate = rate;\r\n    } else {\r\n      _rate = receivedTokens[_tokenAddress].rate;\r\n    }\r\n\r\n    return _amount.mul(_rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Get wei or foreign tokens amount. Inverse _getTokenAmount method.\r\n   */\r\n  function _inverseGetTokenAmount(address _tokenAddress, uint256 _tokenAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    uint256 _rate;\r\n\r\n    if (_tokenAddress == address(0)) {\r\n      _rate = rate;\r\n    } else {\r\n      _rate = receivedTokens[_tokenAddress].rate;\r\n    }\r\n\r\n    return _tokenAmount.div(_rate);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeReceivedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenRate\",\"type\":\"uint256\"}],\"name\":\"addReceivedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_newTokenRate\",\"type\":\"uint256\"}],\"name\":\"setReceivedTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"receivedTokens\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"raised\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenForTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"ChangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"AddReceivedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"RemoveReceivedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"SetReceivedTokenRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SendEtherExcess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SendTokensExcess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ReceivedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"QWoodDAOTokenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000deb60c5eb7e1321cd0821d31af6722f84f22e1e8000000000000000000000000e641a8593b83cec74fecc3d0f0a9ff848ef426ed","Library":"","SwarmSource":"bzzr://773164804ca330e1944d5d9474d042f8b536b14147a224fd0d042f8512dcf30d"}]}