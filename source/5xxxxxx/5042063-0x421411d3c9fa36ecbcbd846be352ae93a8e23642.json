{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\n    Manages ownership and permissions for the whole contract.\r\n*/\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/*\r\n    Manages ownership and permissions for the whole contract.\r\n*/\r\n\r\ncontract BLAccess {\r\n\r\n    address public mainAddress; //Main Contract Address\r\n    address public bonusAddress; //BonusAddress\r\n    event UpdatedMainAccount(address _newMainAddress);\r\n    event UpdatedBonusAccount(address _newBonusAddress);\r\n\r\n    function BLAccess() public {\r\n        mainAddress = msg.sender;\r\n        bonusAddress = msg.sender;\r\n    }\r\n\r\n    modifier onlyPrimary() {\r\n        require(msg.sender == mainAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBonus() {\r\n      require(msg.sender == bonusAddress);\r\n      _;\r\n    }\r\n\r\n    function setSecondary(address _newSecondary) external onlyPrimary {\r\n      require(_newSecondary != address(0));\r\n      bonusAddress = _newSecondary;\r\n      UpdatedBonusAccount(_newSecondary);\r\n    }\r\n\r\n    //Allows to change the primary account for the contract\r\n    function setPrimaryAccount(address _newMainAddress) external onlyPrimary {\r\n        require(_newMainAddress != address(0));\r\n        mainAddress = _newMainAddress;\r\n        UpdatedMainAccount(_newMainAddress);\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\n Interface for our separate eternal storage.\r\n*/\r\n\r\ncontract DataStorageInterface {\r\n    function getUInt(bytes32 record) public constant returns (uint);\r\n    function setUInt(bytes32 record, uint value) public;\r\n    function getAdd(bytes32 record) public constant returns (address);\r\n    function setAdd(bytes32 record, address value) public;\r\n    function getBytes32(bytes32 record) public constant returns (bytes32);\r\n    function setBytes32(bytes32 record, bytes32 value) public;\r\n    function getBool(bytes32 record) public constant returns (bool);\r\n    function setBool(bytes32 record, bool value) public;\r\n    function withdraw(address beneficiary) public;\r\n}\r\n\r\n/*\r\n Wrapper around Data Storage interface\r\n*/\r\n\r\ncontract BLStorage is BLAccess {\r\n\r\n    DataStorageInterface internal s;\r\n    address public storageAddress;\r\n\r\n    event StorageUpdated(address _newStorageAddress);\r\n\r\n    function BLStorage() public {\r\n        s = DataStorageInterface(mainAddress);\r\n    }\r\n\r\n    // allows to setup a new Storage address. Should never be needed but you never know!\r\n    function setDataStorage(address newAddress) public onlyPrimary {\r\n        s = DataStorageInterface(newAddress);\r\n        storageAddress = newAddress;\r\n        StorageUpdated(newAddress);\r\n    }\r\n\r\n    function getKey(uint x, uint y) internal pure returns(bytes32 key) {\r\n        key = keccak256(x, \":\", y);\r\n    }\r\n}\r\n\r\n\r\ncontract BLBalances is BLStorage {\r\n\r\n    event WithdrawBalance(address indexed owner, uint amount);\r\n    event AllowanceGranted(address indexed owner, uint _amount);\r\n    event SentFeeToPlatform(uint amount);\r\n    event SentAmountToOwner(uint amount, address indexed owner);\r\n    event BonusGranted(address _beneficiary, uint _amount);\r\n    event SentAmountToNeighbours(uint reward, address indexed owner);\r\n\r\n    // get the balance for a given account\r\n    function getBalance() public view returns (uint) {\r\n        return s.getUInt(keccak256(msg.sender, \"balance\"));\r\n    }\r\n\r\n    // get the balance for a given account\r\n    function getAccountBalance(address _account) public view onlyPrimary returns (uint) {\r\n        return s.getUInt(keccak256(_account, \"balance\"));\r\n    }\r\n\r\n    function getAccountAllowance(address _account) public view onlyPrimary returns (uint) {\r\n        return s.getUInt(keccak256(_account, \"promoAllowance\"));\r\n    }\r\n\r\n    function getMyAllowance() public view returns (uint) {\r\n        return s.getUInt(keccak256(msg.sender, \"promoAllowance\"));\r\n    }\r\n\r\n    // IF a block has been assigned a bonus, provude the bonus to the next buyer.\r\n    function giveBonusIfExists(uint x, uint y) internal {\r\n      bytes32 key = getKey(x, y);\r\n      uint bonus = s.getUInt(keccak256(key, \"bonus\"));\r\n      uint balance = s.getUInt(keccak256(msg.sender, \"balance\"));\r\n      uint total = balance + bonus;\r\n      s.setUInt(keccak256(msg.sender, \"balance\"), total);\r\n      s.setUInt(keccak256(key, \"bonus\"), 0);\r\n      if (bonus > 0) {\r\n        BonusGranted(msg.sender, bonus);\r\n      }\r\n    }\r\n\r\n    // allow a block allowance for promo and early beta users\r\n    function grantAllowance(address beneficiary, uint allowance) public onlyPrimary {\r\n        uint existingAllowance = s.getUInt(keccak256(beneficiary, \"promoAllowance\"));\r\n        existingAllowance += allowance;\r\n        s.setUInt(keccak256(beneficiary, \"promoAllowance\"), existingAllowance);\r\n        AllowanceGranted(beneficiary, allowance);\r\n    }\r\n\r\n    // withdraw the current balance\r\n    function withdraw() public {\r\n        uint balance = s.getUInt(keccak256(msg.sender, \"balance\"));\r\n        s.withdraw(msg.sender);\r\n        WithdrawBalance(msg.sender, balance);\r\n    }\r\n\r\n    // Trading and buying balances flow\r\n    function rewardParties (uint x, uint y, uint feePercentage) internal {\r\n        uint fee = msg.value * feePercentage / 100;\r\n        uint remainder = msg.value - fee;\r\n        uint rewardPct = s.getUInt(\"neighbourRewardPercentage\");\r\n        uint toOwner = remainder - (remainder * rewardPct * 8 / 100);\r\n        rewardContract(fee);\r\n        rewardPreviousOwner(x, y, toOwner);\r\n        rewardNeighbours(x, y, remainder, rewardPct);\r\n    }\r\n\r\n    function rewardNeighbours (uint x, uint y, uint remainder, uint rewardPct) internal {\r\n        uint rewardAmount = remainder * rewardPct / 100;\r\n      address nw = s.getAdd(keccak256(keccak256(x-1, \":\", y-1), \"owner\"));\r\n      address n = s.getAdd(keccak256(keccak256(x-1, \":\", y), \"owner\"));\r\n      address ne = s.getAdd(keccak256(keccak256(x-1, \":\", y+1), \"owner\"));\r\n      address w = s.getAdd(keccak256(keccak256(x, \":\", y-1), \"owner\"));\r\n      address e = s.getAdd(keccak256(keccak256(x, \":\", y+1), \"owner\"));\r\n      address sw = s.getAdd(keccak256(keccak256(x+1, \":\", y-1), \"owner\"));\r\n      address south = s.getAdd(keccak256(keccak256(x+1, \":\", y), \"owner\"));\r\n      address se = s.getAdd(keccak256(keccak256(x+1, \":\", y+1), \"owner\"));\r\n      nw != address(0) ? rewardBlock(nw, rewardAmount) : rewardBlock(bonusAddress, rewardAmount);\r\n      n != address(0) ? rewardBlock(n, rewardAmount) : rewardBlock(bonusAddress, rewardAmount);\r\n      ne != address(0) ? rewardBlock(ne, rewardAmount) : rewardBlock(bonusAddress, rewardAmount);\r\n      w != address(0) ? rewardBlock(w, rewardAmount) : rewardBlock(bonusAddress, rewardAmount);\r\n      e != address(0) ? rewardBlock(e, rewardAmount) : rewardBlock(bonusAddress, rewardAmount);\r\n      sw != address(0) ? rewardBlock(sw, rewardAmount) : rewardBlock(bonusAddress, rewardAmount);\r\n      south != address(0) ? rewardBlock(south, rewardAmount) : rewardBlock(bonusAddress, rewardAmount);\r\n      se != address(0) ? rewardBlock(se, rewardAmount) : rewardBlock(bonusAddress, rewardAmount);\r\n    }\r\n\r\n    function rewardBlock(address account, uint reward) internal {\r\n      uint balance = s.getUInt(keccak256(account, \"balance\"));\r\n      balance += reward;\r\n      s.setUInt(keccak256(account, \"balance\"), balance);\r\n      SentAmountToNeighbours(reward,account);\r\n    }\r\n\r\n    // contract commissions\r\n    function rewardContract (uint fee) internal {\r\n        uint mainBalance = s.getUInt(keccak256(mainAddress, \"balance\"));\r\n        mainBalance += fee;\r\n        s.setUInt(keccak256(mainAddress, \"balance\"), mainBalance);\r\n        SentFeeToPlatform(fee);\r\n    }\r\n\r\n    // reward the previous owner of the block or the contract if the block is bought for the first time\r\n    function rewardPreviousOwner (uint x, uint y, uint amount) internal {\r\n        uint rewardBalance;\r\n        bytes32 key = getKey(x, y);\r\n        address owner = s.getAdd(keccak256(key, \"owner\"));\r\n        if (owner == address(0)) {\r\n            rewardBalance = s.getUInt(keccak256(mainAddress, \"balance\"));\r\n            rewardBalance += amount;\r\n            s.setUInt(keccak256(mainAddress, \"balance\"), rewardBalance);\r\n            SentAmountToOwner(amount, mainAddress);\r\n        } else {\r\n            rewardBalance = s.getUInt(keccak256(owner, \"balance\"));\r\n            rewardBalance += amount;\r\n            s.setUInt(keccak256(owner, \"balance\"), rewardBalance);\r\n            SentAmountToOwner(amount, owner);\r\n        }\r\n    }\r\n}\r\n\r\ncontract BLBlocks is BLBalances {\r\n\r\n    event CreatedBlock(\r\n        uint x,\r\n        uint y,\r\n        uint price,\r\n        address indexed owner,\r\n        bytes32 name,\r\n        bytes32 description,\r\n        bytes32 url,\r\n        bytes32 imageURL);\r\n\r\n    event SetBlockForSale(\r\n        uint x,\r\n        uint y,\r\n        uint price,\r\n        address indexed owner);\r\n\r\n    event UnsetBlockForSale(\r\n        uint x,\r\n        uint y,\r\n        address indexed owner);\r\n\r\n    event BoughtBlock(\r\n        uint x,\r\n        uint y,\r\n        uint price,\r\n        address indexed owner,\r\n        bytes32 name,\r\n        bytes32 description,\r\n        bytes32 url,\r\n        bytes32 imageURL);\r\n\r\n    event SoldBlock(\r\n        uint x,\r\n        uint y,\r\n        uint oldPrice,\r\n        uint newPrice,\r\n        uint feePercentage,\r\n        address indexed owner);\r\n\r\n    event UpdatedBlock(uint x,\r\n        uint y,\r\n        bytes32 name,\r\n        bytes32 description,\r\n        bytes32 url,\r\n        bytes32 imageURL,\r\n        address indexed owner);\r\n\r\n    // Create a block if it doesn't exist\r\n    function createBlock(\r\n        uint x,\r\n        uint y,\r\n        bytes32 name,\r\n        bytes32 description,\r\n        bytes32 url,\r\n        bytes32 imageURL\r\n    ) public payable {\r\n        bytes32 key = getKey(x, y);\r\n        uint initialPrice = s.getUInt(\"initialPrice\");\r\n        address owner = s.getAdd(keccak256(key, \"owner\"));\r\n        uint allowance = s.getUInt(keccak256(msg.sender, \"promoAllowance\"));\r\n        require(msg.value >= initialPrice || allowance > 0);\r\n        require(owner == address(0));\r\n        uint feePercentage = s.getUInt(\"buyOutFeePercentage\");\r\n        if (msg.value >= initialPrice) {\r\n            rewardParties(x, y, feePercentage);\r\n            s.setUInt(keccak256(key, \"price\"), msg.value);\r\n        } else {\r\n            allowance--;\r\n            s.setUInt(keccak256(msg.sender, \"promoAllowance\"), allowance);\r\n            s.setUInt(keccak256(key, \"price\"), initialPrice);\r\n        }\r\n        s.setBytes32(keccak256(key, \"name\"), name);\r\n        s.setBytes32(keccak256(key, \"description\"), description);\r\n        s.setBytes32(keccak256(key, \"url\"), url);\r\n        s.setBytes32(keccak256(key, \"imageURL\"), imageURL);\r\n        s.setAdd(keccak256(key, \"owner\"), msg.sender);\r\n        uint blockCount = s.getUInt(\"blockCount\");\r\n        giveBonusIfExists(x, y);\r\n        blockCount++;\r\n        s.setUInt(\"blockCount\", blockCount);\r\n        storageAddress.transfer(msg.value);\r\n        CreatedBlock(x,\r\n            y,\r\n            msg.value,\r\n            msg.sender,\r\n            name,\r\n            description,\r\n            url,\r\n            imageURL);\r\n    }\r\n\r\n    // Get details for a block\r\n    function getBlock (uint x, uint y) public view returns (\r\n        uint price,\r\n        bytes32 name,\r\n        bytes32 description,\r\n        bytes32 url,\r\n        bytes32 imageURL,\r\n        uint forSale,\r\n        uint pricePerDay,\r\n        address owner\r\n    ) {\r\n        bytes32 key = getKey(x, y);\r\n        price = s.getUInt(keccak256(key, \"price\"));\r\n        name = s.getBytes32(keccak256(key, \"name\"));\r\n        description = s.getBytes32(keccak256(key, \"description\"));\r\n        url = s.getBytes32(keccak256(key, \"url\"));\r\n        imageURL = s.getBytes32(keccak256(key, \"imageURL\"));\r\n        forSale = s.getUInt(keccak256(key, \"forSale\"));\r\n        pricePerDay = s.getUInt(keccak256(key, \"pricePerDay\"));\r\n        owner = s.getAdd(keccak256(key, \"owner\"));\r\n    }\r\n\r\n    // Sets a block up for sale\r\n    function sellBlock(uint x, uint y, uint price) public {\r\n        bytes32 key = getKey(x, y);\r\n        uint basePrice = s.getUInt(keccak256(key, \"price\"));\r\n        require(s.getAdd(keccak256(key, \"owner\")) == msg.sender);\r\n        require(price < basePrice * 2);\r\n        s.setUInt(keccak256(key, \"forSale\"), price);\r\n        SetBlockForSale(x, y, price, msg.sender);\r\n    }\r\n\r\n    // Sets a block not for sale\r\n    function cancelSellBlock(uint x, uint y) public {\r\n        bytes32 key = getKey(x, y);\r\n        require(s.getAdd(keccak256(key, \"owner\")) == msg.sender);\r\n        s.setUInt(keccak256(key, \"forSale\"), 0);\r\n        UnsetBlockForSale(x, y, msg.sender);\r\n    }\r\n\r\n    // transfers ownership of an existing block\r\n    function buyBlock(\r\n        uint x,\r\n        uint y,\r\n        bytes32 name,\r\n        bytes32 description,\r\n        bytes32 url,\r\n        bytes32 imageURL\r\n    ) public payable {\r\n        bytes32 key = getKey(x, y);\r\n        uint price = s.getUInt(keccak256(key, \"price\"));\r\n        uint forSale = s.getUInt(keccak256(key, \"forSale\"));\r\n        address owner = s.getAdd(keccak256(key, \"owner\"));\r\n        require(owner != address(0));\r\n        require((forSale > 0 && msg.value >= forSale) || msg.value >= price * 2);\r\n        uint feePercentage = s.getUInt(\"buyOutFeePercentage\");\r\n        rewardParties(x, y, feePercentage);\r\n        s.setUInt(keccak256(key, \"price\"), msg.value);\r\n        s.setBytes32(keccak256(key, \"name\"), name);\r\n        s.setBytes32(keccak256(key, \"description\"), description);\r\n        s.setBytes32(keccak256(key, \"url\"), url);\r\n        s.setBytes32(keccak256(key, \"imageURL\"), imageURL);\r\n        s.setAdd(keccak256(key, \"owner\"), msg.sender);\r\n        s.setUInt(keccak256(key, \"forSale\"), 0);\r\n        s.setUInt(keccak256(key, \"pricePerDay\"), 0);\r\n        giveBonusIfExists(x, y);\r\n        storageAddress.transfer(msg.value);\r\n        BoughtBlock(x, y, msg.value, msg.sender,\r\n            name, description, url, imageURL);\r\n        SoldBlock(x, y, price, msg.value, feePercentage, owner);\r\n    }\r\n\r\n    // update details for an existing block\r\n    function updateBlock(\r\n        uint x,\r\n        uint y,\r\n        bytes32 name,\r\n        bytes32 description,\r\n        bytes32 url,\r\n        bytes32 imageURL\r\n    )  public {\r\n        bytes32 key = getKey(x, y);\r\n        address owner = s.getAdd(keccak256(key, \"owner\"));\r\n        require(msg.sender == owner);\r\n        s.setBytes32(keccak256(key, \"name\"), name);\r\n        s.setBytes32(keccak256(key, \"description\"), description);\r\n        s.setBytes32(keccak256(key, \"url\"), url);\r\n        s.setBytes32(keccak256(key, \"imageURL\"), imageURL);\r\n        UpdatedBlock(x, y, name, description, url, imageURL, msg.sender);\r\n    }\r\n    \r\n    // Add a bonus to a block. That bonus will be awarded to the next buyer.\r\n    // Note, we are not emitting an event to avoid cheating.\r\n    function addBonusToBlock(\r\n        uint x,\r\n        uint y,\r\n        uint bonus\r\n    ) public onlyPrimary {\r\n        bytes32 key = getKey(x, y);\r\n        uint bonusBalance = s.getUInt(keccak256(bonusAddress, \"balance\"));\r\n        require(bonusBalance >= bonus);\r\n        s.setUInt(keccak256(key, \"bonus\"), bonus);\r\n    }\r\n\r\n}\r\n\r\n/*\r\n    Main Blocklord contract. It exposes some commodity functions and functions from its subcontracts.\r\n*/\r\n\r\ncontract BLMain is BLBlocks {\r\n\r\n    event ChangedInitialPrice(uint price);\r\n    event ChangedFeePercentage(uint fee);\r\n\r\n    // provides the total number of purchased blocks\r\n    function totalSupply() public view returns (uint count) {\r\n        count = s.getUInt(\"blockCount\");\r\n        return count;\r\n    }\r\n\r\n    // allows to change the price of an empty block\r\n    function setInitialPrice(uint price) public onlyPrimary {\r\n        s.setUInt(\"initialPrice\", price);\r\n        ChangedInitialPrice(price);\r\n    }\r\n\r\n    // allows to change the platform fee percentage\r\n    function setFeePercentage(uint feePercentage) public onlyPrimary {\r\n        s.setUInt(\"buyOutFeePercentage\", feePercentage);\r\n        ChangedFeePercentage(feePercentage);\r\n    }\r\n\r\n    // provides the starting price for an empty block\r\n    function getInitialPrice() public view returns (uint) {\r\n        return s.getUInt(\"initialPrice\");\r\n    }\r\n\r\n    // provides the price of an empty block\r\n    function getFeePercentage() public view returns (uint) {\r\n        return s.getUInt(\"buyOutFeePercentage\");\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setDataStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitialPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"description\",\"type\":\"bytes32\"},{\"name\":\"url\",\"type\":\"bytes32\"},{\"name\":\"imageURL\",\"type\":\"bytes32\"}],\"name\":\"buyBlock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"cancelSellBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"getBlock\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"description\",\"type\":\"bytes32\"},{\"name\":\"url\",\"type\":\"bytes32\"},{\"name\":\"imageURL\",\"type\":\"bytes32\"},{\"name\":\"forSale\",\"type\":\"uint256\"},{\"name\":\"pricePerDay\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"description\",\"type\":\"bytes32\"},{\"name\":\"url\",\"type\":\"bytes32\"},{\"name\":\"imageURL\",\"type\":\"bytes32\"}],\"name\":\"updateBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"storageAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSecondary\",\"type\":\"address\"}],\"name\":\"setSecondary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sellBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setInitialPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feePercentage\",\"type\":\"uint256\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMainAddress\",\"type\":\"address\"}],\"name\":\"setPrimaryAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"grantAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"description\",\"type\":\"bytes32\"},{\"name\":\"url\",\"type\":\"bytes32\"},{\"name\":\"imageURL\",\"type\":\"bytes32\"}],\"name\":\"createBlock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"addBonusToBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ChangedInitialPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ChangedFeePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"imageURL\",\"type\":\"bytes32\"}],\"name\":\"CreatedBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SetBlockForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"UnsetBlockForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"imageURL\",\"type\":\"bytes32\"}],\"name\":\"BoughtBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SoldBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"imageURL\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"UpdatedBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AllowanceGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SentFeeToPlatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SentAmountToOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BonusGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SentAmountToNeighbours\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newStorageAddress\",\"type\":\"address\"}],\"name\":\"StorageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newMainAddress\",\"type\":\"address\"}],\"name\":\"UpdatedMainAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newBonusAddress\",\"type\":\"address\"}],\"name\":\"UpdatedBonusAccount\",\"type\":\"event\"}]","ContractName":"BLMain","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ba042dacd49d59509265fdeb1527184a1293883c214bebecc898237ca2fbf2a6"}]}