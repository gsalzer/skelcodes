{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract STQDistribution {\r\n  address public mintableTokenAddress;\r\n  address public owner;\r\n\r\n  function STQDistribution(address _mintableTokenAddress) public {\r\n    mintableTokenAddress = _mintableTokenAddress;\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n    * Encode transfer amount and recepient address as a single uin256 value.\r\n    *\r\n    * @param _lotsNumber transfer amount as number of lots\r\n    * @param _to transfer recipient address\r\n    * @return encoded transfer\r\n    */\r\n  function encodeTransfer (uint96 _lotsNumber, address _to)\r\n  public pure returns (uint256 _encodedTransfer) \r\n  {\r\n    return (_lotsNumber << 160) | uint160 (_to);\r\n  }\r\n\r\n  /**\r\n    * Perform multiple token transfers from message sender's address.\r\n    *\r\n    * @param _token - not used, reserved for IcoBox compatibility\r\n    * @param _lotSize number of tokens in lot\r\n    * @param _transfers an array or encoded transfers to perform\r\n    */\r\n  function batchSend (Token _token, uint160 _lotSize, uint256[] _transfers) public {\r\n    require(msg.sender == owner);\r\n    MintableToken token = MintableToken(mintableTokenAddress);\r\n    uint256 count = _transfers.length;\r\n    for (uint256 i = 0; i < count; i++) {\r\n      uint256 transfer = _transfers[i];\r\n      uint256 value = (transfer >> 160) * _lotSize;\r\n      address to = address(transfer & 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      token.mint(to, value);\r\n    }\r\n  }\r\n}\r\n\r\ncontract MintableToken {\r\n  function mint(address _to, uint256 _amount) public;\r\n}\r\n\r\n/**\r\n * EIP-20 standard token interface, as defined\r\n * <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\">here</a>.\r\n */\r\ncontract Token {\r\n    /**\r\n     * Get total number of tokens in circulation.\r\n     *\r\n     * @return total number of tokens in circulation\r\n     */\r\n    function totalSupply ()\r\n    public constant returns (uint256 supply);\r\n\r\n    /**\r\n     * Get number of tokens currently belonging to given owner.\r\n     *\r\n     * @param _owner address to get number of tokens currently belonging to the\r\n     *        owner of\r\n     * @return number of tokens currently belonging to the owner of given\r\n     *         address\r\n     */\r\n    function balanceOf (address _owner)\r\n    public constant returns (uint256 balance);\r\n\r\n    /**\r\n     * Transfer given number of tokens from message sender to given recipient.\r\n     *\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _value number of tokens to transfer to the owner of given address\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transfer (address _to, uint256 _value)\r\n    public returns (bool success);\r\n\r\n    /**\r\n     * Transfer given number of tokens from given owner to given recipient.\r\n     *\r\n     * @param _from address to transfer tokens from the owner of\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _value number of tokens to transfer from given owner to given\r\n     *        recipient\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transferFrom (address _from, address _to, uint256 _value)\r\n    public returns (bool success);\r\n\r\n    /**\r\n     * Allow given spender to transfer given number of tokens from message\r\n     * sender.\r\n     *\r\n     * @param _spender address to allow the owner of to transfer tokens from\r\n     *        message sender\r\n     * @param _value number of tokens to allow to transfer\r\n     * @return true if token transfer was successfully approved, false otherwise\r\n     */\r\n    function approve (address _spender, uint256 _value)\r\n    public returns (bool success);\r\n\r\n    /**\r\n     * Tell how many tokens given spender is currently allowed to transfer from\r\n     * given owner.\r\n     *\r\n     * @param _owner address to get number of tokens allowed to be transferred\r\n     *        from the owner of\r\n     * @param _spender address to get number of tokens allowed to be transferred\r\n     *        by the owner of\r\n     * @return number of tokens given spender is currently allowed to transfer\r\n     *         from given owner\r\n     */\r\n    function allowance (address _owner, address _spender)\r\n    public constant returns (uint256 remaining);\r\n\r\n    /**\r\n     * Logged when tokens were transferred from one owner to another.\r\n     *\r\n     * @param _from address of the owner, tokens were transferred from\r\n     * @param _to address of the owner, tokens were transferred to\r\n     * @param _value number of tokens transferred\r\n     */\r\n    event Transfer (address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    /**\r\n     * Logged when owner approved his tokens to be transferred by some spender.\r\n     * @param _owner owner who approved his tokens to be transferred\r\n     * @param _spender spender who were allowed to transfer the tokens belonging\r\n     *        to the owner\r\n     * @param _value number of tokens belonging to the owner, approved to be\r\n     *        transferred by the spender\r\n     */\r\n    event Approval (\r\n        address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_lotSize\",\"type\":\"uint160\"},{\"name\":\"_transfers\",\"type\":\"uint256[]\"}],\"name\":\"batchSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lotsNumber\",\"type\":\"uint96\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"encodeTransfer\",\"outputs\":[{\"name\":\"_encodedTransfer\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintableTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mintableTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"STQDistribution","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005c3a228510d246b78a3765c20221cbf3082b44a4","Library":"","SwarmSource":"bzzr://ec9c568424dd630fca37008c439a76f0a494da9212d1c005cc4f2ca155b912a7"}]}