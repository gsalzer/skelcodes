{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Safe Math Smart Contract.  Copyright © 2016–2017 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\npragma solidity ^0.4.20;\r\n\r\n/**\r\n * Provides methods to safely add, subtract and multiply uint256 numbers.\r\n */\r\ncontract SafeMath {\r\n  uint256 constant private MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Add two uint256 values, throw in case of overflow.\r\n   *\r\n   * @param x first value to add\r\n   * @param y second value to add\r\n   * @return x + y\r\n   */\r\n  function safeAdd (uint256 x, uint256 y)\r\n  pure internal\r\n  returns (uint256 z) {\r\n    assert (x <= MAX_UINT256 - y);\r\n    return x + y;\r\n  }\r\n\r\n  /**\r\n   * Subtract one uint256 value from another, throw in case of underflow.\r\n   *\r\n   * @param x value to subtract from\r\n   * @param y value to subtract\r\n   * @return x - y\r\n   */\r\n  function safeSub (uint256 x, uint256 y)\r\n  pure internal\r\n  returns (uint256 z) {\r\n    assert (x >= y);\r\n    return x - y;\r\n  }\r\n\r\n  /**\r\n   * Multiply two uint256 values, throw in case of overflow.\r\n   *\r\n   * @param x first value to multiply\r\n   * @param y second value to multiply\r\n   * @return x * y\r\n   */\r\n  function safeMul (uint256 x, uint256 y)\r\n  pure internal\r\n  returns (uint256 z) {\r\n    if (y == 0) return 0; // Prevent division by zero at the next line\r\n    assert (x <= MAX_UINT256 / y);\r\n    return x * y;\r\n  }\r\n}\r\n/*\r\n * EIP-20 Standard Token Smart Contract Interface.\r\n * Copyright © 2016–2018 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\n\r\n/**\r\n * ERC-20 standard token interface, as defined\r\n * <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\">here</a>.\r\n */\r\ncontract Token {\r\n  /**\r\n   * Get total number of tokens in circulation.\r\n   *\r\n   * @return total number of tokens in circulation\r\n   */\r\n  function totalSupply () public view returns (uint256 supply);\r\n\r\n  /**\r\n   * Get number of tokens currently belonging to given owner.\r\n   *\r\n   * @param _owner address to get number of tokens currently belonging to the\r\n   *        owner of\r\n   * @return number of tokens currently belonging to the owner of given address\r\n   */\r\n  function balanceOf (address _owner) public view returns (uint256 balance);\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value)\r\n  public returns (bool success);\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n   *        recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  public returns (bool success);\r\n\r\n  /**\r\n   * Allow given spender to transfer given number of tokens from message sender.\r\n   *\r\n   * @param _spender address to allow the owner of to transfer tokens from\r\n   *        message sender\r\n   * @param _value number of tokens to allow to transfer\r\n   * @return true if token transfer was successfully approved, false otherwise\r\n   */\r\n  function approve (address _spender, uint256 _value)\r\n  public returns (bool success);\r\n\r\n  /**\r\n   * Tell how many tokens given spender is currently allowed to transfer from\r\n   * given owner.\r\n   *\r\n   * @param _owner address to get number of tokens allowed to be transferred\r\n   *        from the owner of\r\n   * @param _spender address to get number of tokens allowed to be transferred\r\n   *        by the owner of\r\n   * @return number of tokens given spender is currently allowed to transfer\r\n   *         from given owner\r\n   */\r\n  function allowance (address _owner, address _spender)\r\n  public view returns (uint256 remaining);\r\n\r\n  /**\r\n   * Logged when tokens were transferred from one owner to another.\r\n   *\r\n   * @param _from address of the owner, tokens were transferred from\r\n   * @param _to address of the owner, tokens were transferred to\r\n   * @param _value number of tokens transferred\r\n   */\r\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * Logged when owner approved his tokens to be transferred by some spender.\r\n   *\r\n   * @param _owner owner who approved his tokens to be transferred\r\n   * @param _spender spender who were allowed to transfer the tokens belonging\r\n   *        to the owner\r\n   * @param _value number of tokens belonging to the owner, approved to be\r\n   *        transferred by the spender\r\n   */\r\n  event Approval (\r\n    address indexed _owner, address indexed _spender, uint256 _value);\r\n}/*\r\n * Address Set Smart Contract Interface.\r\n * Copyright © 2017–2018 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\n\r\n/**\r\n * Address Set smart contract interface.\r\n */\r\ncontract AddressSet {\r\n  /**\r\n   * Check whether address set contains given address.\r\n   *\r\n   * @param _address address to check\r\n   * @return true if address set contains given address, false otherwise\r\n   */\r\n  function contains (address _address) public view returns (bool);\r\n}\r\n/*\r\n * Abstract Token Smart Contract.  Copyright © 2017 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\n\r\n/**\r\n * Abstract Token Smart Contract that could be used as a base contract for\r\n * ERC-20 token contracts.\r\n */\r\ncontract AbstractToken is Token, SafeMath {\r\n  /**\r\n   * Create new Abstract Token contract.\r\n   */\r\n  function AbstractToken () public {\r\n    // Do nothing\r\n  }\r\n\r\n  /**\r\n   * Get number of tokens currently belonging to given owner.\r\n   *\r\n   * @param _owner address to get number of tokens currently belonging to the\r\n   *        owner of\r\n   * @return number of tokens currently belonging to the owner of given address\r\n   */\r\n  function balanceOf (address _owner) public view returns (uint256 balance) {\r\n    return accounts [_owner];\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value)\r\n  public returns (bool success) {\r\n    uint256 fromBalance = accounts [msg.sender];\r\n    if (fromBalance < _value) return false;\r\n    if (_value > 0 && msg.sender != _to) {\r\n      accounts [msg.sender] = safeSub (fromBalance, _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n    }\r\n    Transfer (msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n   *        recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  public returns (bool success) {\r\n    uint256 spenderAllowance = allowances [_from][msg.sender];\r\n    if (spenderAllowance < _value) return false;\r\n    uint256 fromBalance = accounts [_from];\r\n    if (fromBalance < _value) return false;\r\n\r\n    allowances [_from][msg.sender] =\r\n      safeSub (spenderAllowance, _value);\r\n\r\n    if (_value > 0 && _from != _to) {\r\n      accounts [_from] = safeSub (fromBalance, _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n    }\r\n    Transfer (_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Allow given spender to transfer given number of tokens from message sender.\r\n   *\r\n   * @param _spender address to allow the owner of to transfer tokens from\r\n   *        message sender\r\n   * @param _value number of tokens to allow to transfer\r\n   * @return true if token transfer was successfully approved, false otherwise\r\n   */\r\n  function approve (address _spender, uint256 _value)\r\n  public returns (bool success) {\r\n    allowances [msg.sender][_spender] = _value;\r\n    Approval (msg.sender, _spender, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Tell how many tokens given spender is currently allowed to transfer from\r\n   * given owner.\r\n   *\r\n   * @param _owner address to get number of tokens allowed to be transferred\r\n   *        from the owner of\r\n   * @param _spender address to get number of tokens allowed to be transferred\r\n   *        by the owner of\r\n   * @return number of tokens given spender is currently allowed to transfer\r\n   *         from given owner\r\n   */\r\n  function allowance (address _owner, address _spender)\r\n  public view returns (uint256 remaining) {\r\n    return allowances [_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * Mapping from addresses of token holders to the numbers of tokens belonging\r\n   * to these token holders.\r\n   */\r\n  mapping (address => uint256) internal accounts;\r\n\r\n  /**\r\n   * Mapping from addresses of token holders to the mapping of addresses of\r\n   * spenders to the allowances set by these token holders to these spenders.\r\n   */\r\n  mapping (address => mapping (address => uint256)) internal allowances;\r\n}\r\n/*\r\n * Abstract Virtual Token Smart Contract.\r\n * Copyright © 2017–2018 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\n\r\n\r\n/**\r\n * Abstract Token Smart Contract that could be used as a base contract for\r\n * ERC-20 token contracts supporting virtual balance.\r\n */\r\ncontract AbstractVirtualToken is AbstractToken {\r\n  /**\r\n   * Maximum number of real (i.e. non-virtual) tokens in circulation (2^255-1).\r\n   */\r\n  uint256 constant MAXIMUM_TOKENS_COUNT =\r\n    0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Mask used to extract real balance of an account (2^255-1).\r\n   */\r\n  uint256 constant BALANCE_MASK =\r\n    0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Mask used to extract \"materialized\" flag of an account (2^255).\r\n   */\r\n  uint256 constant MATERIALIZED_FLAG_MASK =\r\n    0x8000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n  /**\r\n   * Create new Abstract Virtual Token contract.\r\n   */\r\n  function AbstractVirtualToken () public AbstractToken () {\r\n    // Do nothing\r\n  }\r\n\r\n  /**\r\n   * Get total number of tokens in circulation.\r\n   *\r\n   * @return total number of tokens in circulation\r\n   */\r\n  function totalSupply () public view returns (uint256 supply) {\r\n    return tokensCount;\r\n  }\r\n\r\n  /**\r\n   * Get number of tokens currently belonging to given owner.\r\n   *\r\n   * @param _owner address to get number of tokens currently belonging to the\r\n   *        owner of\r\n   * @return number of tokens currently belonging to the owner of given address\r\n   */\r\n  function balanceOf (address _owner) public view returns (uint256 balance) {\r\n    return safeAdd (\r\n      accounts [_owner] & BALANCE_MASK, getVirtualBalance (_owner));\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value)\r\n  public returns (bool success) {\r\n    if (_value > balanceOf (msg.sender)) return false;\r\n    else {\r\n      materializeBalanceIfNeeded (msg.sender, _value);\r\n      return AbstractToken.transfer (_to, _value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n   *        recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  public returns (bool success) {\r\n    if (_value > allowance (_from, msg.sender)) return false;\r\n    if (_value > balanceOf (_from)) return false;\r\n    else {\r\n      materializeBalanceIfNeeded (_from, _value);\r\n      return AbstractToken.transferFrom (_from, _to, _value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get virtual balance of the owner of given address.\r\n   *\r\n   * @param _owner address to get virtual balance for the owner of\r\n   * @return virtual balance of the owner of given address\r\n   */\r\n  function virtualBalanceOf (address _owner)\r\n  internal view returns (uint256 _virtualBalance);\r\n\r\n  /**\r\n   * Calculate virtual balance of the owner of given address taking into account\r\n   * materialized flag and total number of real tokens already in circulation.\r\n   */\r\n  function getVirtualBalance (address _owner)\r\n  private view returns (uint256 _virtualBalance) {\r\n    if (accounts [_owner] & MATERIALIZED_FLAG_MASK != 0) return 0;\r\n    else {\r\n      _virtualBalance = virtualBalanceOf (_owner);\r\n      uint256 maxVirtualBalance = safeSub (MAXIMUM_TOKENS_COUNT, tokensCount);\r\n      if (_virtualBalance > maxVirtualBalance)\r\n        _virtualBalance = maxVirtualBalance;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Materialize virtual balance of the owner of given address if this will help\r\n   * to transfer given number of tokens from it.\r\n   *\r\n   * @param _owner address to materialize virtual balance of\r\n   * @param _value number of tokens to be transferred\r\n   */\r\n  function materializeBalanceIfNeeded (address _owner, uint256 _value) private {\r\n    uint256 storedBalance = accounts [_owner];\r\n    if (storedBalance & MATERIALIZED_FLAG_MASK == 0) {\r\n      // Virtual balance is not materialized yet\r\n      if (_value > storedBalance) {\r\n        // Real balance is not enough\r\n        uint256 virtualBalance = getVirtualBalance (_owner);\r\n        require (safeSub (_value, storedBalance) <= virtualBalance);\r\n        accounts [_owner] = MATERIALIZED_FLAG_MASK |\r\n          safeAdd (storedBalance, virtualBalance);\r\n        tokensCount = safeAdd (tokensCount, virtualBalance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Number of real (i.e. non-virtual) tokens in circulation.\r\n   */\r\n  uint256 internal tokensCount;\r\n}\r\n/*\r\n * MediChain Promo Token Smart Contract.  Copyright © 2018 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\n\r\n/**\r\n * MediChain Promo Tokem Smart Contract.\r\n */\r\ncontract MCUXPromoToken is AbstractVirtualToken {\r\n  /**\r\n   * Number of virtual tokens to assign to the owners of addresses from given\r\n   * address set.\r\n   */\r\n  uint256 private constant VIRTUAL_COUNT = 10e8;\r\n\r\n  /**\r\n   * Create MediChainPromoToken smart contract with given address set.\r\n   *\r\n   * @param _addressSet address set to use\r\n   */\r\n  function MCUXPromoToken (AddressSet _addressSet)\r\n  public AbstractVirtualToken () {\r\n    owner = msg.sender;\r\n    addressSet = _addressSet;\r\n  }\r\n\r\n  /**\r\n   * Get name of this token.\r\n   *\r\n   * @return name of this token\r\n   */\r\n  function name () public pure returns (string) {\r\n    return \"MediChain Promo Token \";\r\n  }\r\n\r\n  /**\r\n   * Get symbol of this token.\r\n   *\r\n   * @return symbol of this token\r\n   */\r\n  function symbol () public pure returns (string) {\r\n    return \"MCUX\";\r\n  }\r\n\r\n  /**\r\n   * Get number of decimals for this token.\r\n   *\r\n   * @return number of decimals for this token\r\n   */\r\n  function decimals () public pure returns (uint8) {\r\n    return 8;\r\n  }\r\n\r\n  /**\r\n   * Notify owners about their virtual balances.\r\n   *\r\n   * @param _owners addresses of the owners to be notified\r\n   */\r\n  function massNotify (address [] _owners) public {\r\n    require (msg.sender == owner);\r\n    uint256 count = _owners.length;\r\n    for (uint256 i = 0; i < count; i++)\r\n      Transfer (address (0), _owners [i], VIRTUAL_COUNT);\r\n  }\r\n\r\n  /**\r\n   * Kill this smart contract.\r\n   */\r\n  function kill () public {\r\n    require (msg.sender == owner);\r\n    selfdestruct (owner);\r\n  }\r\n\r\n  /**\r\n   * Change owner of the smart contract.\r\n   *\r\n   * @param _owner address of a new owner of the smart contract\r\n   */\r\n  function changeOwner (address _owner) public {\r\n    require (msg.sender == owner);\r\n\r\n    owner = _owner;\r\n  }\r\n\r\n  /**\r\n   * Get virtual balance of the owner of given address.\r\n   *\r\n   * @param _owner address to get virtual balance for the owner of\r\n   * @return virtual balance of the owner of given address\r\n   */\r\n  function virtualBalanceOf (address _owner)\r\n  internal view returns (uint256 _virtualBalance) {\r\n    return addressSet.contains (_owner) ? VIRTUAL_COUNT : 0;\r\n  }\r\n\r\n  /**\r\n   * Address of the owner of this smart contract.\r\n   */\r\n  address internal owner;\r\n\r\n  /**\r\n   * Address set of addresses that are eligible for initial balance.\r\n   */\r\n  AddressSet internal addressSet;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"}],\"name\":\"massNotify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressSet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MCUXPromoToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000384dc03e1e21a046009741f5c04ab645227ed785","Library":"","SwarmSource":"bzzr://80fe050d9173ba3ae423387b75b720340325997aa3ef0a4451e73f1dbe41a3ee"}]}