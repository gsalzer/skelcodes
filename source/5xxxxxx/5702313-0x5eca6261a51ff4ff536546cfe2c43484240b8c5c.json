{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\ncontract Admin {\r\n    address public admin;\r\n\r\n    constructor() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    function transferAdminship(address newAdmin) public onlyAdmin {\r\n        if (newAdmin != address(0)) {\r\n            admin = newAdmin;\r\n        }\r\n    }\r\n}\r\ncontract Pausable is Admin {\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS paused\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS NOT paused\r\n     */\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the admin to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyAdmin whenNotPaused returns(bool) {\r\n        paused = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the admin to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyAdmin whenPaused returns(bool) {\r\n        paused = false;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Wallet is Pausable {\r\n    event DepositWallet(address _depositBy, uint256 _amount);\r\n    event Withdraw(uint256 _amount);\r\n    event Transfer(address _to,uint256 _amount);\r\n    \r\n    address public owner;\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier onlyAdminOrOwner() {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n        _;\r\n    }\r\n    constructor(address _admin,address _who) public {\r\n        require(_admin != address(0));\r\n        admin = _admin;\r\n        owner = _who;\r\n    }\r\n    \r\n    // admin can set anyone as owner, even empty\r\n    function setOwner(address _who) external onlyAdmin {\r\n        owner = _who;\r\n    }\r\n    \r\n    function deposit() public payable{\r\n        emit DepositWallet(msg.sender,msg.value);\r\n    }\r\n    \r\n    function() public payable{\r\n        emit DepositWallet(msg.sender,msg.value);\r\n    }\r\n\r\n    function getBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function transfer(address _to,uint256 _amount) external onlyOwner whenNotPaused{\r\n        require(address(this).balance>=_amount);\r\n        require(_to!=address(0));\r\n        if (_amount>0){\r\n            _to.transfer(_amount);\r\n        }\r\n        emit Transfer(_to,_amount);\r\n    }\r\n    \r\n    function withdraw() public onlyOwner whenNotPaused{\r\n        require(owner!=address(0));\r\n        uint256 _val = address(this).balance;\r\n        if (_val>0){\r\n            owner.transfer(_val);\r\n        }\r\n        emit Withdraw(_val);\r\n    }\r\n}\r\n\r\ncontract WalletFactory {\r\n    event WalletCreated(address admin,address owner, address wallet);\r\n    mapping(address => address[]) public wallets;\r\n    address public factoryOwner;\r\n    \r\n    constructor() public{\r\n        factoryOwner = msg.sender;\r\n    }\r\n    // you can donate to me\r\n    function createWallet(address _admin,address _owner) public payable{\r\n        // you can create max 10 wallets for free\r\n        if (wallets[msg.sender].length>10){\r\n            require(msg.value>=0.01 ether);\r\n        }\r\n        Wallet w = new Wallet(_admin,_owner);\r\n        wallets[msg.sender].push(address(w));\r\n        emit WalletCreated(_admin,_owner, address(w));\r\n    }\r\n    \r\n    function myWallets() public view returns(address[]){\r\n        return wallets[msg.sender];\r\n    }\r\n\r\n    function withdraw(address _to) public{\r\n        require(factoryOwner == msg.sender);\r\n        require(_to!=address(0));\r\n        _to.transfer(address(this).balance);\r\n    }\r\n    \r\n    function transferOwnership(address newAdmin) public {\r\n        require(factoryOwner == msg.sender);\r\n        if (newAdmin != address(0)) {\r\n            factoryOwner = newAdmin;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factoryOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createWallet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WalletCreated\",\"type\":\"event\"}]","ContractName":"WalletFactory","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9888c72c73155daa71dede8cc2f3eb3f929246185088f048016d62a5bba75be2"}]}