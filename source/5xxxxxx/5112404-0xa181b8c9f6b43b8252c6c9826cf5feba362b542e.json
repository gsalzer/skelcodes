{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n\r\n\r\n\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n  event Dissolved(address  owner, uint256 tokenId);\r\n  event TransferDissolved(address indexed from, address indexed to, uint256 tokenId);\r\n  \r\n}\r\n\r\n\r\ncontract CryptoStamps is ERC721 {\r\n\r\n  \r\n  /*** EVENTS ***/\r\n\r\n  \r\n  /// @dev The Birth event is fired whenever a new stamp is created.\r\n  event stampBirth(uint256 tokenId,  address owner);\r\n\r\n  /// @dev The TokenSold event is fired whenever a stamp is sold.\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner);\r\n\r\n  /// @dev Transfer event as defined in current draft of ERC721. \r\n  ///  ownership is assigned, including births.\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n\r\n\r\n  \r\n  /*** CONSTANTS ***/\r\n\r\n\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant NAME = \"CryptoStamps\"; // \r\n  string public constant SYMBOL = \"CS\"; // \r\n  \r\n  // @dev firstStepLimit for the change in rate of price increase\r\n  uint256 private firstStepLimit =  1.28 ether;\r\n  \r\n\r\n\r\n  \r\n  \r\n  /*** STORAGE ***/\r\n\r\n\r\n\r\n  /// @dev A mapping from stamp IDs to the address that owns them. All stamps have\r\n  ///  some valid owner address.\r\n  mapping (uint256 => address) public stampIndexToOwner;\r\n  \r\n\r\n  // @dev A mapping from owner address to count of stamps that address owns.\r\n  //  Used internally inside balanceOf() to resolve ownership count.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  /// @dev A mapping from stamp IDs to an address that has been approved to call\r\n  ///  transferFrom(). Each stamp can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n  mapping (uint256 => address) public stampIndexToApproved;\r\n\r\n  // @dev A mapping from stamp IDs to the price of the token.\r\n  mapping (uint256 => uint256) private stampIndexToPrice;\r\n  \r\n  \r\n  \r\n  //@dev A mapping from stamp IDs to the number of transactions that the stamp has gone through. \r\n  mapping(uint256 => uint256) public stampIndextotransactions;\r\n  \r\n  //@dev To calculate the total ethers transacted in the game.\r\n  uint256 public totaletherstransacted;\r\n\r\n  //@dev To calculate the total transactions in the game.\r\n  uint256 public totaltransactions;\r\n  \r\n  //@dev To calculate the total stamps created.\r\n  uint256 public stampCreatedCount;\r\n  \r\n  \r\n  \r\n\r\n /*** STORAGE FOR DISSOLVED ***/\r\n \r\n \r\n //@dev A mapping from stamp IDs to their dissolved status.\r\n  //Initially all values are set to false by default\r\n  mapping (uint256 => bool) public stampIndextodissolved;\r\n \r\n \r\n //@dev A mapping from dissolved stamp IDs to their approval status.\r\n  //Initially all values are set to false by default\r\n mapping (uint256 => address) public dissolvedIndexToApproved;\r\n \r\n  \r\n  \r\n  \r\n  /*** DATATYPES ***/\r\n  \r\n  struct Stamp {\r\n    uint256 birthtime;\r\n  }\r\n  \r\n  \r\n\r\n  Stamp[] private stamps;\r\n\r\n \r\n \r\n \r\n \r\n  \r\n  \r\n  \r\n  /*** ACCESS MODIFIERS ***/\r\n  \r\n  /// @dev Access modifier for CEO-only functionality\r\n  \r\n  \r\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n  bool private paused;\r\n  \r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require(\r\n      msg.sender == ceoAddress ||\r\n      msg.sender == cooAddress\r\n    );\r\n    _;\r\n  }\r\n\r\n  \r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  \r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n\r\n    ceoAddress = _newCEO;\r\n  }\r\n\r\n \r\n \r\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\r\n  /// @param _newCOO The address of the new COO\r\n  \r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n\r\n    cooAddress = _newCOO;\r\n  }\r\n  \r\n  \r\n  \r\n  /*** CONSTRUCTOR ***/\r\n  function CryptoStamps() public {\r\n    ceoAddress = msg.sender;\r\n    cooAddress = msg.sender;\r\n    paused = false;\r\n  }\r\n\r\n  \r\n  \r\n  \r\n  \r\n  /*** PUBLIC FUNCTIONS ***/\r\n  /// @notice Grant another address the right to transfer stamp via takeOwnership() and transferFrom().\r\n  \r\n  ///  clear all approvals.\r\n  \r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  //@dev to pause and unpause the contract in emergency situations\r\n  function pausecontract() public onlyCLevel\r\n  {\r\n      paused = true;\r\n  }\r\n  \r\n  \r\n  \r\n  function unpausecontract() public onlyCEO\r\n  {\r\n      paused = false;\r\n      \r\n  }\r\n  \r\n  \r\n  \r\n  function approve(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    // Caller must own token.\r\n    require(paused == false);\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    stampIndexToApproved[_tokenId] = _to;\r\n\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  \r\n  \r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  \r\n  \r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  \r\n  \r\n  //@dev To create a stamp.\r\n  function createStamp(address _owner,  uint256 _price) public onlyCOO {\r\n    \r\n    require(paused == false);\r\n    address stampOwner = _owner;\r\n    if (stampOwner == address(0)) {\r\n      stampOwner = cooAddress;\r\n    }\r\n\r\n    require(_price >= 0);\r\n\r\n    stampCreatedCount++;\r\n    _createStamp( stampOwner, _price);\r\n  }\r\n\r\n  \r\n \r\n  //@dev To get stamp information\r\n  \r\n  function getStamp(uint256 _tokenId) public view returns (\r\n    uint256 birthtimestamp,\r\n    uint256 sellingPrice,\r\n    address owner\r\n  ) {\r\n    Stamp storage stamp = stamps[_tokenId];\r\n    birthtimestamp = stamp.birthtime;\r\n    sellingPrice = stampIndexToPrice[_tokenId];\r\n    owner = stampIndexToOwner[_tokenId];\r\n  }\r\n\r\n  \r\n  \r\n  \r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  \r\n  \r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  \r\n  \r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n  \r\n  \r\n  /// For querying owner of stamp\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  \r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = stampIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  \r\n  \r\n  //@dev To payout to an address\r\n  \r\n  function payout(address _to) public onlyCLevel {\r\n    _payout(_to);\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  //@ To set the cut received by smart contract\r\n  uint256 private cut;\r\n  \r\n  \r\n  \r\n  \r\n  function setcut(uint256 cutowner) onlyCEO public returns(uint256)\r\n  { \r\n      cut = cutowner;\r\n      return(cut);\r\n      \r\n  }\r\n\r\n  \r\n  \r\n  \r\n  \r\n  // Allows someone to send ether and obtain the token\r\n  \r\n  function purchase(uint256 _tokenId) public payable {\r\n    address oldOwner = stampIndexToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n    require(stampIndextodissolved[_tokenId] == false);\r\n    require(paused == false);\r\n    uint256 sellingPrice = stampIndexToPrice[_tokenId];\r\n    totaletherstransacted = totaletherstransacted + sellingPrice;\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice);\r\n\r\n    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, cut), 100));\r\n    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n\r\n    // Update prices\r\n    if (sellingPrice < firstStepLimit) {\r\n      // first stage\r\n      stampIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 200), cut);\r\n    } \r\n    else {\r\n      \r\n      stampIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 125), cut);\r\n    }\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(payment); //(1-0.06)\r\n    }\r\n\r\n    TokenSold(_tokenId, sellingPrice, stampIndexToPrice[_tokenId], oldOwner, newOwner);\r\n\r\n    msg.sender.transfer(purchaseExcess);\r\n  }\r\n\r\n  \r\n  \r\n  \r\n  //@dev To get price of a stamp\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    return stampIndexToPrice[_tokenId];\r\n  }\r\n\r\n  \r\n  \r\n  //@dev To get the next price of a stamp\r\n  function nextpriceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    uint256 currentsellingPrice = stampIndexToPrice[_tokenId];\r\n    \r\n    if (currentsellingPrice < firstStepLimit) {\r\n      // first stage\r\n      return SafeMath.div(SafeMath.mul(currentsellingPrice, 200), cut);\r\n    } \r\n    else {\r\n      \r\n      return SafeMath.div(SafeMath.mul(currentsellingPrice, 125), cut);\r\n    }\r\n    \r\n  }\r\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  \r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = stampIndexToOwner[_tokenId];\r\n    require(paused == false);\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  \r\n  \r\n  \r\n  /// @param _owner The owner of the stamp\r\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n  ///  expensive (it walks the entire Stamps array looking for stamps belonging to owner),\r\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n  ///  not contract-to-contract calls.\r\n  \r\n  \r\n  \r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalStamps = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 stampId;\r\n      for (stampId = 0; stampId <= totalStamps; stampId++) {\r\n        if (stampIndexToOwner[stampId] == _owner) {\r\n          result[resultIndex] = stampId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  \r\n  \r\n  /// For querying totalSupply of token\r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  \r\n  function totalSupply() public view returns (uint256 total) {\r\n    return stamps.length;\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  \r\n  function transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n    require(paused == false);\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  \r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n  \r\n  \r\n  //@dev To set the number in which the stamp gets dissolved into.\r\n  uint256 private num;\r\n  \r\n  \r\n  \r\n  function setnumber(uint256 number) onlyCEO public returns(uint256)\r\n  {\r\n      num = number;\r\n      return num;\r\n  }\r\n  \r\n  \r\n  //@dev To set the price at which dissolution starts.\r\n   uint256 private priceatdissolution;\r\n  \r\n  \r\n  \r\n  function setdissolveprice(uint256 number) onlyCEO public returns(uint256)\r\n  {\r\n      priceatdissolution = number;\r\n      return priceatdissolution;\r\n  }\r\n  \r\n  \r\n  //@ To set the address to which dissolved stamp is sent.\r\n  address private addressatdissolution;\r\n  \r\n  \r\n  \r\n  function setdissolveaddress(address dissolveaddress) onlyCEO public returns(address)\r\n  {\r\n      addressatdissolution = dissolveaddress;\r\n      return addressatdissolution;\r\n  }\r\n  \r\n  \r\n  //@dev for emergency purposes\r\n  function controlstampdissolution(bool control,uint256 _tokenId) onlyCEO public\r\n  {\r\n      stampIndextodissolved[_tokenId] = control;\r\n      \r\n  }\r\n  \r\n  \r\n  //@dev Dissolve function which mines new stamps.\r\n  function dissolve(uint256 _tokenId) public\r\n  {   require(paused == false);\r\n      require(stampIndexToOwner[_tokenId] == msg.sender);\r\n      require(priceOf(_tokenId)>= priceatdissolution );\r\n      require(stampIndextodissolved[_tokenId] == false);\r\n      address reciever = stampIndexToOwner[_tokenId];\r\n      \r\n      uint256 price = priceOf(_tokenId);\r\n      uint256 newprice = SafeMath.div(price,num);\r\n      \r\n      approve(addressatdissolution, _tokenId);\r\n      transfer(addressatdissolution,_tokenId);\r\n      stampIndextodissolved[_tokenId] = true;\r\n      \r\n      uint256 i;\r\n      for(i = 0; i<num; i++)\r\n      {\r\n      _createStamp( reciever, newprice);\r\n          \r\n      }\r\n      Dissolved(msg.sender,_tokenId);\r\n    \r\n  }\r\n  \r\n //@dev The contract which is used to interact with dissolved stamps.\r\n address private dissolvedcontract; \r\n \r\n \r\n \r\n \r\n /*** PUBLIC FUNCTIONS FOR DISSOLVED STAMPS ***/\r\n \r\n \r\n function setdissolvedcontract(address dissolvedaddress) onlyCEO public returns(address)\r\n {\r\n     \r\n     dissolvedcontract = dissolvedaddress;\r\n     return dissolvedcontract;\r\n }\r\n \r\n //@dev To transfer dissolved stamp. Requires the contract assigned for dissolution management to send message.\r\n function transferdissolvedFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(_from, _tokenId));\r\n    require(_addressNotNull(_to));\r\n    require(msg.sender == dissolvedcontract);\r\n\r\n    _transferdissolved(_from, _to, _tokenId);\r\n  }\r\n  \r\n  \r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  \r\n  \r\n  /// For checking approval of transfer for address _to\r\n  \r\n  \r\n  \r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return stampIndexToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  \r\n  /// For creating Stamp\r\n  \r\n  \r\n  function _createStamp(address _owner, uint256 _price) private {\r\n    Stamp memory _stamp = Stamp({\r\n      birthtime: now\r\n    });\r\n    uint256 newStampId = stamps.push(_stamp) - 1;\r\n\r\n    // It's probably never going to happen, 4 billion tokens are A LOT, but\r\n    // let's just be 100% sure we never let this happen.\r\n    require(newStampId == uint256(uint32(newStampId)));\r\n\r\n    stampBirth(newStampId, _owner);\r\n\r\n    stampIndexToPrice[newStampId] = _price;\r\n\r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transfer(address(0), _owner, newStampId);\r\n  }\r\n\r\n  \r\n  \r\n  /// Check for token ownership\r\n  \r\n  \r\n  \r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == stampIndexToOwner[_tokenId];\r\n  }\r\n\r\n  \r\n  \r\n  /// For paying out balance on contract\r\n  \r\n  \r\n  \r\n  function _payout(address _to) private {\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(this.balance);\r\n    } else {\r\n      _to.transfer(this.balance);\r\n    }\r\n  }\r\n\r\n  \r\n  \r\n  \r\n  /// @dev Assigns ownership of a specific Stamp to an address.\r\n  \r\n  \r\n  \r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n   \r\n    require(paused == false);\r\n    ownershipTokenCount[_to]++;\r\n    stampIndextotransactions[_tokenId] = stampIndextotransactions[_tokenId] + 1;\r\n    totaltransactions++;\r\n    //transfer ownership\r\n    stampIndexToOwner[_tokenId] = _to;\r\n    \r\n\r\n    // When creating new stamps _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete stampIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n  \r\n  \r\n  \r\n/*** PRIVATE FUNCTIONS FOR DISSOLVED STAMPS***/  \r\n  \r\n  \r\n  \r\n  //@ To transfer a dissolved stamp.\r\n  function _transferdissolved(address _from, address _to, uint256 _tokenId) private {\r\n    \r\n    require(stampIndextodissolved[_tokenId] == true);\r\n    require(paused == false);\r\n    ownershipTokenCount[_to]++;\r\n    stampIndextotransactions[_tokenId] = stampIndextotransactions[_tokenId] + 1;\r\n    //transfer ownership\r\n    stampIndexToOwner[_tokenId] = _to;\r\n    totaltransactions++;\r\n    \r\n\r\n    // When creating new stamp _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      \r\n    }\r\n\r\n    // Emit the transfer event.\r\n    TransferDissolved(_from, _to, _tokenId);\r\n  }\r\n  \r\n  \r\n  \r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stampIndextodissolved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferdissolvedFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stampIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpausecontract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"nextpriceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dissolvedIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cutowner\",\"type\":\"uint256\"}],\"name\":\"setcut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stampIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"control\",\"type\":\"bool\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"controlstampdissolution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setnumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stampCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pausecontract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dissolvedaddress\",\"type\":\"address\"}],\"name\":\"setdissolvedcontract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getStamp\",\"outputs\":[{\"name\":\"birthtimestamp\",\"type\":\"uint256\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dissolveaddress\",\"type\":\"address\"}],\"name\":\"setdissolveaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stampIndextotransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totaltransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setdissolveprice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"dissolve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totaletherstransacted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createStamp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"stampBirth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Dissolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TransferDissolved\",\"type\":\"event\"}]","ContractName":"CryptoStamps","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://19899bfb17e185c389368261f2da51f8b3e2582333ecce2bf0a6e5862baa8a3c"}]}