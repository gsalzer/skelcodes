{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nThis file is part of the eHealth First Contract.\r\n\r\nwww.ehfirst.io\r\n\r\nAn IT-platform for Personalized Health and Longevity Management\r\nbased on Blockchain, Artificial Intelligence,\r\nMachine Learning and Natural Language Processing\r\n\r\nThe eHealth First Contract is free software: you can redistribute it and/or\r\nmodify it under the terms of the GNU lesser General Public License as published\r\nby the Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThe eHealth First Contract is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\nGNU lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU lesser General Public License\r\nalong with the eHealth First Contract. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n@author Ilya Svirin <i.svirin@prover.ru>\r\n\r\nIF YOU ARE ENJOYED IT DONATE TO 0x3Ad38D1060d1c350aF29685B2b8Ec3eDE527452B ! :)\r\n*/\r\n\r\n\r\npragma solidity ^0.4.19;\r\n\r\ncontract owned {\r\n\r\n    address public owner;\r\n    address public candidate;\r\n\r\n  function owned() public payable {\r\n         owner = msg.sender;\r\n     }\r\n    \r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _owner) onlyOwner public {\r\n        require(_owner != 0);\r\n        candidate = _owner;\r\n    }\r\n    \r\n    function confirmOwner() public {\r\n        require(candidate == msg.sender);\r\n        owner = candidate;\r\n        delete candidate;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public;\r\n    function allowance(address owner, address spender) public constant returns (uint);\r\n    function transferFrom(address from, address to, uint value) public;\r\n    function approve(address spender, uint value) public;\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract Token is owned, ERC20 {\r\n\r\n    string  public standard    = 'Token 0.1';\r\n    string  public name        = 'eHealth First';\r\n    string  public symbol      = \"EHF\";\r\n    uint8   public decimals    = 8;\r\n\r\n    uint    public freezedMoment;\r\n\r\n    struct TokenHolder {\r\n        uint balance;\r\n        uint balanceBeforeUpdate;\r\n        uint balanceUpdateTime;\r\n    }\r\n    mapping (address => TokenHolder) public holders;\r\n    mapping (address => uint) public vesting;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    address public vestingManager;\r\n\r\n    function setVestingManager(address _vestingManager) public onlyOwner {\r\n        vestingManager = _vestingManager;\r\n    }\r\n\r\n    function beforeBalanceChanges(address _who) internal {\r\n        if (holders[_who].balanceUpdateTime <= freezedMoment) {\r\n            holders[_who].balanceUpdateTime = now;\r\n            holders[_who].balanceBeforeUpdate = holders[_who].balance;\r\n        }\r\n    }\r\n\r\n    event Burned(address indexed owner, uint256 value);\r\n\r\n    function Token() public owned() {}\r\n\r\n    function balanceOf(address _who) constant public returns (uint) {\r\n        return holders[_who].balance;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        require(now > vesting[msg.sender] || msg.sender == vestingManager);\r\n        require(holders[_to].balance + _value >= holders[_to].balance); // overflow\r\n        beforeBalanceChanges(msg.sender);\r\n        beforeBalanceChanges(_to);\r\n        holders[msg.sender].balance -= _value;\r\n        holders[_to].balance += _value;\r\n        if (vesting[_to] < vesting[msg.sender]) {\r\n            vesting[_to] = vesting[msg.sender];\r\n        }\r\n        emit Transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public {\r\n        require(now > vesting[_from]);\r\n        require(holders[_to].balance + _value >= holders[_to].balance); // overflow\r\n        require(allowed[_from][msg.sender] >= _value);\r\n        beforeBalanceChanges(_from);\r\n        beforeBalanceChanges(_to);\r\n        holders[_from].balance -= _value;\r\n        holders[_to].balance += _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant\r\n        returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function burn(uint256 _value) public {\r\n        require(holders[msg.sender].balance >= _value);\r\n        beforeBalanceChanges(msg.sender);\r\n        holders[msg.sender].balance -= _value;\r\n        totalSupply -= _value;\r\n        emit Burned(msg.sender, _value);\r\n    }\r\n}\r\n\r\ncontract Crowdsale is Token {\r\n\r\n    address public backend;\r\n\r\n    uint public stage;\r\n    bool public started;\r\n    uint public startTokenPriceWei;\r\n    uint public tokensForSale;\r\n    uint public startTime;\r\n    uint public lastTokenPriceWei;\r\n    uint public milliPercent; // \"25\" means 0.25%\r\n    uint public paymentsCount; // restart on each stage\r\n    bool public sealed;\r\n    modifier notSealed {\r\n        require(sealed == false);\r\n        _;\r\n    }\r\n\r\n    event Mint(address indexed _who, uint _tokens, uint _coinType, bytes32 _txHash);\r\n    event Stage(uint _stage, bool startNotFinish);\r\n\r\n    function Crowdsale() public Token() {\r\n        totalSupply = 100000000*100000000;\r\n        holders[this].balance = totalSupply;\r\n    }\r\n\r\n    function startStage(uint _startTokenPriceWei, uint _tokensForSale, uint _milliPercent) public onlyOwner notSealed {\r\n        require(!started);\r\n        require(_startTokenPriceWei >= lastTokenPriceWei);\r\n        startTokenPriceWei = _startTokenPriceWei;\r\n        tokensForSale = _tokensForSale * 100000000;\r\n        if(tokensForSale > holders[this].balance) {\r\n            tokensForSale = holders[this].balance;\r\n        }\r\n        milliPercent = _milliPercent;\r\n        startTime = now;\r\n        started = true;\r\n        paymentsCount = 0;\r\n        emit Stage(stage, started);\r\n    }\r\n    \r\n    function currentTokenPrice() public constant returns(uint) {\r\n        uint price;\r\n        if(!sealed && started) {\r\n            uint d = (now - startTime) / 1 days;\r\n            price = startTokenPriceWei;\r\n            price += startTokenPriceWei * d * milliPercent / 100;\r\n        }\r\n        return price;\r\n    }\r\n    \r\n    function stopStage() public onlyOwner notSealed {\r\n        require(started);\r\n        started = false;\r\n        lastTokenPriceWei = currentTokenPrice();\r\n        emit Stage(stage, started);\r\n        ++stage;\r\n    }\r\n    \r\n    function () payable public notSealed {\r\n        require(started);\r\n        uint price = currentTokenPrice();\r\n        if(paymentsCount < 100) {\r\n            price = price * 90 / 100;\r\n        }\r\n        ++paymentsCount;\r\n        uint tokens = 100000000 * msg.value / price;\r\n        if(tokens > tokensForSale) {\r\n            tokens = tokensForSale;\r\n            uint sumWei = tokens * lastTokenPriceWei / 100000000;\r\n            require(msg.sender.call.gas(3000000).value(msg.value - sumWei)());\r\n        }\r\n        require(tokens > 0);\r\n        require(holders[msg.sender].balance + tokens > holders[msg.sender].balance); // overflow\r\n        tokensForSale -= tokens;\r\n        beforeBalanceChanges(msg.sender);\r\n        beforeBalanceChanges(this);\r\n        holders[msg.sender].balance += tokens;\r\n        holders[this].balance -= tokens;\r\n        emit Transfer(this, msg.sender, tokens);\r\n    }\r\n\r\n    function mintTokens1(address _who, uint _tokens, uint _coinType, bytes32 _txHash) public notSealed {\r\n        require(msg.sender == owner || msg.sender == backend);\r\n        require(started);\r\n        _tokens *= 100000000;\r\n        if(_tokens > tokensForSale) {\r\n            _tokens = tokensForSale;\r\n        }\r\n        require(_tokens > 0);\r\n        require(holders[_who].balance + _tokens > holders[_who].balance); // overflow\r\n        tokensForSale -= _tokens;\r\n        beforeBalanceChanges(_who);\r\n        beforeBalanceChanges(this);\r\n        holders[_who].balance += _tokens;\r\n        holders[this].balance -= _tokens;\r\n        emit Mint(_who, _tokens, _coinType, _txHash);\r\n        emit Transfer(this, _who, _tokens);\r\n    }\r\n    \r\n    // must be called by owners only out of stage\r\n    function mintTokens2(address _who, uint _tokens, uint _vesting) public notSealed {\r\n        require(msg.sender == owner || msg.sender == backend);\r\n        require(!started);\r\n        require(_tokens > 0);\r\n        _tokens *= 100000000;\r\n        require(_tokens <= holders[this].balance);\r\n        require(holders[_who].balance + _tokens > holders[_who].balance); // overflow\r\n        if(_vesting != 0) {\r\n            vesting[_who] = _vesting;\r\n        }\r\n        beforeBalanceChanges(_who);\r\n        beforeBalanceChanges(this);\r\n        holders[_who].balance += _tokens;\r\n        holders[this].balance -= _tokens;\r\n        emit Mint(_who, _tokens, 0, 0);\r\n        emit Transfer(this, _who, _tokens);\r\n    }\r\n\r\n    // need to seal Crowdsale when it is finished completely\r\n    function seal() public onlyOwner {\r\n        sealed = true;\r\n    }\r\n}\r\n\r\ncontract Ehfirst is Crowdsale {\r\n\r\n   function Ehfirst() payable public Crowdsale() {}\r\n\r\n    function setBackend(address _backend) public onlyOwner {\r\n        backend = _backend;\r\n    }\r\n    \r\n    function withdraw() public onlyOwner {\r\n        require(owner.call.gas(3000000).value(address(this).balance)());\r\n    }\r\n    \r\n    function freezeTheMoment() public onlyOwner {\r\n        freezedMoment = now;\r\n    }\r\n\r\n    /** Get balance of _who for freezed moment\r\n     *  freezeTheMoment()\r\n     */\r\n    function freezedBalanceOf(address _who) constant public returns(uint) {\r\n        if (holders[_who].balanceUpdateTime <= freezedMoment) {\r\n            return holders[_who].balance;\r\n        } else {\r\n            return holders[_who].balanceBeforeUpdate;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backend\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freezeTheMoment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vestingManager\",\"type\":\"address\"}],\"name\":\"setVestingManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"balanceBeforeUpdate\",\"type\":\"uint256\"},{\"name\":\"balanceUpdateTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"freezedBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"milliPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTokenPriceWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTokenPriceWei\",\"type\":\"uint256\"},{\"name\":\"_tokensForSale\",\"type\":\"uint256\"},{\"name\":\"_milliPercent\",\"type\":\"uint256\"}],\"name\":\"startStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTokenPriceWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_coinType\",\"type\":\"uint256\"},{\"name\":\"_txHash\",\"type\":\"bytes32\"}],\"name\":\"mintTokens1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_vesting\",\"type\":\"uint256\"}],\"name\":\"mintTokens2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezedMoment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_backend\",\"type\":\"address\"}],\"name\":\"setBackend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vesting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sealed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_txHash\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startNotFinish\",\"type\":\"bool\"}],\"name\":\"Stage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Ehfirst","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://766b7f614718398b2eb10ee708fe7defc37d5778363afb5532aa26126e91f2c0"}]}