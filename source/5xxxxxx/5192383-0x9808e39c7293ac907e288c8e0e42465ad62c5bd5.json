{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC721 interface\r\n * @dev see https://github.com/ethereum/eips/issues/721\r\n */\r\ncontract ERC721 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\ncontract EtherIslands is Ownable, ERC721 {\r\n    using SafeMath for uint256;\r\n\r\n    /*** EVENTS ***/\r\n    event NewIsland(uint256 tokenId, bytes32 name, address owner);\r\n    event IslandSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, bytes32 name);\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event DividendsPaid(address to, uint256 amount, bytes32 divType);\r\n    event ShipsBought(uint256 tokenId, address owner);\r\n    event IslandAttacked(uint256 attackerId, uint256 targetId);\r\n    event TreasuryWithdrawn(uint256 tokenId);\r\n\r\n    /*** STRUCTS ***/\r\n    struct Island {\r\n        bytes32 name;\r\n        address owner;\r\n        uint256 price;\r\n        uint256 treasury;\r\n        uint256 treasury_next_withdrawal_block;\r\n        uint256 previous_price;\r\n        uint256 attack_ships_count;\r\n        uint256 defense_ships_count;\r\n        uint256 transactions_count;\r\n        address approve_transfer_to;\r\n        address[2] previous_owners;\r\n    }\r\n\r\n    struct IslandBattleStats {\r\n        uint256 attacks_won;\r\n        uint256 attacks_lost;\r\n        uint256 defenses_won;\r\n        uint256 defenses_lost;\r\n        uint256 treasury_stolen;\r\n        uint256 treasury_lost;\r\n        uint256 attack_cooldown;\r\n        uint256 defense_cooldown;\r\n    }\r\n\r\n    /*** CONSTANTS ***/\r\n    string public constant NAME = \"EtherIslands\";\r\n    string public constant SYMBOL = \"EIS\";\r\n\r\n    bool public maintenance = true;\r\n    uint256 islands_count;\r\n\r\n    uint256 shipPrice = 0.01 ether;\r\n    uint256 withdrawalBlocksCooldown = 100;\r\n    address m_address = 0xd17e2bFE196470A9fefb567e8f5992214EB42F24;\r\n\r\n    mapping(address => uint256) private ownerCount;\r\n    mapping(uint256 => Island) private islands;\r\n    mapping(uint256 => IslandBattleStats) private islandBattleStats;\r\n\r\n    /*** DEFAULT METHODS ***/\r\n    function symbol() public pure returns (string) {return SYMBOL;}\r\n\r\n    function name() public pure returns (string) {return NAME;}\r\n\r\n    function implementsERC721() public pure returns (bool) {return true;}\r\n\r\n    function EtherIslands() public {\r\n        _create_island(\"Santorini\", msg.sender, 0.001 ether, 0, 0, 0);\r\n        _create_island(\"Seychelles\", msg.sender, 0.001 ether, 0, 0, 0);\r\n        _create_island(\"Palawan\", msg.sender, 0.001 ether, 0, 0, 0);\r\n        _create_island(\"The Cook Islands\", msg.sender, 0.001 ether, 0, 0, 0);\r\n        _create_island(\"Bora Bora\", msg.sender, 0.001 ether, 0, 0, 0);\r\n        _create_island(\"Maldives\", msg.sender, 0.001 ether, 0, 0, 0);\r\n    }\r\n\r\n    /** PUBLIC METHODS **/\r\n    function createIsland(bytes32 _name, uint256 _price, address _owner, uint256 _attack_ships_count, uint256 _defense_ships_count) public onlyOwner {\r\n        require(msg.sender != address(0));\r\n        _create_island(_name, _owner, _price, 0, _attack_ships_count, _defense_ships_count);\r\n    }\r\n\r\n    function attackIsland(uint256 _attacker_id, uint256 _target_id) public payable {\r\n        require(maintenance == false);\r\n        Island storage attackerIsland = islands[_attacker_id];\r\n        IslandBattleStats storage attackerIslandBattleStats = islandBattleStats[_attacker_id];\r\n\r\n        Island storage defenderIsland = islands[_target_id];\r\n        IslandBattleStats storage defenderIslandBattleStats = islandBattleStats[_target_id];\r\n\r\n        require(attackerIsland.owner == msg.sender);\r\n        require(attackerIsland.owner != defenderIsland.owner);\r\n        require(msg.sender != address(0));\r\n        require(msg.value == 0);\r\n        require(block.number >= attackerIslandBattleStats.attack_cooldown);\r\n        require(block.number >= defenderIslandBattleStats.defense_cooldown);\r\n        require(attackerIsland.attack_ships_count > 0); // attacker must have at least 1 attack ship\r\n        require(attackerIsland.attack_ships_count > defenderIsland.defense_ships_count);\r\n\r\n        uint256 goods_stolen = SafeMath.mul(SafeMath.div(defenderIsland.treasury, 100), 75);\r\n\r\n        defenderIsland.treasury = SafeMath.sub(defenderIsland.treasury, goods_stolen);\r\n\r\n        attackerIslandBattleStats.attacks_won++;\r\n        attackerIslandBattleStats.treasury_stolen = SafeMath.add(attackerIslandBattleStats.treasury_stolen, goods_stolen);\r\n\r\n        defenderIslandBattleStats.defenses_lost++;\r\n        defenderIslandBattleStats.treasury_lost = SafeMath.add(defenderIslandBattleStats.treasury_lost, goods_stolen);\r\n\r\n        uint256 cooldown_block = block.number + 20;\r\n        attackerIslandBattleStats.attack_cooldown = cooldown_block;\r\n        defenderIslandBattleStats.defense_cooldown = cooldown_block;\r\n\r\n        uint256 goods_to_treasury = SafeMath.mul(SafeMath.div(goods_stolen, 100), 75);\r\n\r\n        attackerIsland.treasury = SafeMath.add(attackerIsland.treasury, goods_to_treasury);\r\n\r\n        // 2% of attacker army and 10% of defender army is destroyed\r\n        attackerIsland.attack_ships_count = SafeMath.sub(attackerIsland.attack_ships_count, SafeMath.mul(SafeMath.div(attackerIsland.attack_ships_count, 100), 2));\r\n        defenderIsland.defense_ships_count = SafeMath.sub(defenderIsland.defense_ships_count, SafeMath.mul(SafeMath.div(defenderIsland.defense_ships_count, 100), 10));\r\n\r\n        // Dividends\r\n        uint256 goods_for_current_owner = SafeMath.mul(SafeMath.div(goods_stolen, 100), 15);\r\n        uint256 goods_for_previous_owner_1 = SafeMath.mul(SafeMath.div(goods_stolen, 100), 6);\r\n        uint256 goods_for_previous_owner_2 = SafeMath.mul(SafeMath.div(goods_stolen, 100), 3);\r\n        uint256 goods_for_dev = SafeMath.mul(SafeMath.div(goods_stolen, 100), 1);\r\n\r\n        attackerIsland.owner.transfer(goods_for_current_owner);\r\n        attackerIsland.previous_owners[0].transfer(goods_for_previous_owner_1);\r\n        attackerIsland.previous_owners[1].transfer(goods_for_previous_owner_2);\r\n\r\n        //Split dev fee\r\n        m_address.transfer(SafeMath.mul(SafeMath.div(goods_for_dev, 100), 20));\r\n        owner.transfer(SafeMath.mul(SafeMath.div(goods_for_dev, 100), 80));\r\n\r\n        IslandAttacked(_attacker_id, _target_id);\r\n    }\r\n\r\n    function buyShips(uint256 _island_id, uint256 _ships_to_buy, bool _is_attack_ships) public payable {\r\n        require(maintenance == false);\r\n        Island storage island = islands[_island_id];\r\n\r\n        uint256 totalPrice = SafeMath.mul(_ships_to_buy, shipPrice);\r\n        require(island.owner == msg.sender);\r\n        require(msg.sender != address(0));\r\n        require(msg.value >= totalPrice);\r\n\r\n        if (_is_attack_ships) {\r\n            island.attack_ships_count = SafeMath.add(island.attack_ships_count, _ships_to_buy);\r\n        } else {\r\n            island.defense_ships_count = SafeMath.add(island.defense_ships_count, _ships_to_buy);\r\n        }\r\n\r\n        // Dividends\r\n        uint256 treasury_div = SafeMath.mul(SafeMath.div(totalPrice, 100), 80);\r\n        uint256 dev_div = SafeMath.mul(SafeMath.div(totalPrice, 100), 17);\r\n        uint256 previous_owner_div = SafeMath.mul(SafeMath.div(totalPrice, 100), 2);\r\n        uint256 previous_owner2_div = SafeMath.mul(SafeMath.div(totalPrice, 100), 1);\r\n\r\n        island.previous_owners[0].transfer(previous_owner_div);\r\n        //divs for 1st previous owner\r\n        island.previous_owners[1].transfer(previous_owner2_div);\r\n        //divs for 2nd previous owner\r\n        island.treasury = SafeMath.add(treasury_div, island.treasury);\r\n        // divs for treasury\r\n\r\n        //Split dev fee\r\n        uint256 m_fee = SafeMath.mul(SafeMath.div(dev_div, 100), 20);\r\n        uint256 d_fee = SafeMath.mul(SafeMath.div(dev_div, 100), 80);\r\n        m_address.transfer(m_fee);\r\n        owner.transfer(d_fee);\r\n\r\n        DividendsPaid(island.previous_owners[0], previous_owner_div, \"buyShipPreviousOwner\");\r\n        DividendsPaid(island.previous_owners[1], previous_owner2_div, \"buyShipPreviousOwner2\");\r\n\r\n        ShipsBought(_island_id, island.owner);\r\n    }\r\n\r\n    function withdrawTreasury(uint256 _island_id) public payable {\r\n        require(maintenance == false);\r\n        Island storage island = islands[_island_id];\r\n\r\n        require(island.owner == msg.sender);\r\n        require(msg.sender != address(0));\r\n        require(island.treasury > 0);\r\n        require(block.number >= island.treasury_next_withdrawal_block);\r\n\r\n        uint256 treasury_to_withdraw = SafeMath.mul(SafeMath.div(island.treasury, 100), 10);\r\n        uint256 treasury_for_previous_owner_1 = SafeMath.mul(SafeMath.div(treasury_to_withdraw, 100), 2);\r\n        uint256 treasury_for_previous_owner_2 = SafeMath.mul(SafeMath.div(treasury_to_withdraw, 100), 1);\r\n        uint256 treasury_for_previous_owners = SafeMath.add(treasury_for_previous_owner_2, treasury_for_previous_owner_1);\r\n        uint256 treasury_for_current_owner = SafeMath.sub(treasury_to_withdraw, treasury_for_previous_owners);\r\n\r\n        island.owner.transfer(treasury_for_current_owner);\r\n        island.previous_owners[0].transfer(treasury_for_previous_owner_1);\r\n        island.previous_owners[1].transfer(treasury_for_previous_owner_2);\r\n\r\n        island.treasury = SafeMath.sub(island.treasury, treasury_to_withdraw);\r\n        island.treasury_next_withdrawal_block = block.number + withdrawalBlocksCooldown;\r\n        //setting cooldown for next withdrawal\r\n\r\n        DividendsPaid(island.previous_owners[0], treasury_for_previous_owner_1, \"withdrawalPreviousOwner\");\r\n        DividendsPaid(island.previous_owners[1], treasury_for_previous_owner_2, \"withdrawalPreviousOwner2\");\r\n        DividendsPaid(island.owner, treasury_for_current_owner, \"withdrawalOwner\");\r\n\r\n        TreasuryWithdrawn(_island_id);\r\n    }\r\n\r\n    function purchase(uint256 _island_id) public payable {\r\n        require(maintenance == false);\r\n        Island storage island = islands[_island_id];\r\n\r\n        require(island.owner != msg.sender);\r\n        require(msg.sender != address(0));\r\n        require(msg.value >= island.price);\r\n\r\n        uint256 excess = SafeMath.sub(msg.value, island.price);\r\n        if (island.previous_price > 0) {\r\n            uint256 owners_cut = SafeMath.mul(SafeMath.div(island.price, 160), 130);\r\n            uint256 treasury_cut = SafeMath.mul(SafeMath.div(island.price, 160), 18);\r\n            uint256 dev_fee = SafeMath.mul(SafeMath.div(island.price, 160), 7);\r\n            uint256 previous_owner_fee = SafeMath.mul(SafeMath.div(island.price, 160), 3);\r\n            uint256 previous_owner_fee2 = SafeMath.mul(SafeMath.div(island.price, 160), 2);\r\n\r\n            if (island.owner != address(this)) {\r\n                island.owner.transfer(owners_cut);\r\n                //divs for current island owner\r\n            }\r\n\r\n            island.previous_owners[0].transfer(previous_owner_fee);\r\n            //divs for 1st previous owner\r\n            island.previous_owners[1].transfer(previous_owner_fee2);\r\n            //divs for 2nd previous owner\r\n            island.treasury = SafeMath.add(treasury_cut, island.treasury);\r\n            // divs for treasury\r\n\r\n            //Split dev fee\r\n            uint256 m_fee = SafeMath.mul(SafeMath.div(dev_fee, 100), 20);\r\n            uint256 d_fee = SafeMath.mul(SafeMath.div(dev_fee, 100), 80);\r\n            m_address.transfer(m_fee);\r\n            owner.transfer(d_fee);\r\n\r\n            DividendsPaid(island.previous_owners[0], previous_owner_fee, \"previousOwner\");\r\n            DividendsPaid(island.previous_owners[1], previous_owner_fee2, \"previousOwner2\");\r\n            DividendsPaid(island.owner, owners_cut, \"owner\");\r\n            DividendsPaid(owner, dev_fee, \"dev\");\r\n        } else {\r\n            island.owner.transfer(msg.value);\r\n        }\r\n\r\n        island.previous_price = island.price;\r\n        island.treasury_next_withdrawal_block = block.number + withdrawalBlocksCooldown;\r\n        address _old_owner = island.owner;\r\n\r\n        island.price = SafeMath.mul(SafeMath.div(island.price, 100), 160);\r\n\r\n        //Change owners\r\n        island.previous_owners[1] = island.previous_owners[0];\r\n        island.previous_owners[0] = island.owner;\r\n        island.owner = msg.sender;\r\n        island.transactions_count++;\r\n\r\n        ownerCount[_old_owner] -= 1;\r\n        ownerCount[island.owner] += 1;\r\n\r\n        Transfer(_old_owner, island.owner, _island_id);\r\n        IslandSold(_island_id, island.previous_price, island.price, _old_owner, island.owner, island.name);\r\n\r\n        msg.sender.transfer(excess);\r\n        //returning excess\r\n    }\r\n\r\n    function onMaintenance() public onlyOwner {\r\n        require(msg.sender != address(0));\r\n        maintenance = true;\r\n    }\r\n\r\n    function offMaintenance() public onlyOwner {\r\n        require(msg.sender != address(0));\r\n        maintenance = false;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 total) {\r\n        return islands_count;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return ownerCount[_owner];\r\n    }\r\n\r\n    function priceOf(uint256 _island_id) public view returns (uint256 price) {\r\n        return islands[_island_id].price;\r\n    }\r\n\r\n    function getIslandBattleStats(uint256 _island_id) public view returns (\r\n        uint256 id,\r\n        uint256 attacks_won,\r\n        uint256 attacks_lost,\r\n        uint256 defenses_won,\r\n        uint256 defenses_lost,\r\n        uint256 treasury_stolen,\r\n        uint256 treasury_lost,\r\n        uint256 attack_cooldown,\r\n        uint256 defense_cooldown\r\n    ) {\r\n        id = _island_id;\r\n        attacks_won = islandBattleStats[_island_id].attacks_won;\r\n        attacks_lost = islandBattleStats[_island_id].attacks_lost;\r\n        defenses_won = islandBattleStats[_island_id].defenses_won;\r\n        defenses_lost = islandBattleStats[_island_id].defenses_lost;\r\n        treasury_stolen = islandBattleStats[_island_id].treasury_stolen;\r\n        treasury_lost = islandBattleStats[_island_id].treasury_lost;\r\n        attack_cooldown = islandBattleStats[_island_id].attack_cooldown;\r\n        defense_cooldown = islandBattleStats[_island_id].defense_cooldown;\r\n    }\r\n\r\n    function getIsland(uint256 _island_id) public view returns (\r\n        uint256 id,\r\n        bytes32 island_name,\r\n        address owner,\r\n        uint256 price,\r\n        uint256 treasury,\r\n        uint256 treasury_next_withdrawal_block,\r\n        uint256 previous_price,\r\n        uint256 attack_ships_count,\r\n        uint256 defense_ships_count,\r\n        uint256 transactions_count\r\n    ) {\r\n        id = _island_id;\r\n        island_name = islands[_island_id].name;\r\n        owner = islands[_island_id].owner;\r\n        price = islands[_island_id].price;\r\n        treasury = islands[_island_id].treasury;\r\n        treasury_next_withdrawal_block = islands[_island_id].treasury_next_withdrawal_block;\r\n        previous_price = islands[_island_id].previous_price;\r\n        attack_ships_count = islands[_island_id].attack_ships_count;\r\n        defense_ships_count = islands[_island_id].defense_ships_count;\r\n        transactions_count = islands[_island_id].transactions_count;\r\n    }\r\n\r\n    function getIslands() public view returns (uint256[], address[], uint256[], uint256[], uint256[], uint256[], uint256[]) {\r\n        uint256[] memory ids = new uint256[](islands_count);\r\n        address[] memory owners = new address[](islands_count);\r\n        uint256[] memory prices = new uint256[](islands_count);\r\n        uint256[] memory treasuries = new uint256[](islands_count);\r\n        uint256[] memory attack_ships_counts = new uint256[](islands_count);\r\n        uint256[] memory defense_ships_counts = new uint256[](islands_count);\r\n        uint256[] memory transactions_count = new uint256[](islands_count);\r\n        for (uint256 _id = 0; _id < islands_count; _id++) {\r\n            ids[_id] = _id;\r\n            owners[_id] = islands[_id].owner;\r\n            prices[_id] = islands[_id].price;\r\n            treasuries[_id] = islands[_id].treasury;\r\n            attack_ships_counts[_id] = islands[_id].attack_ships_count;\r\n            defense_ships_counts[_id] = islands[_id].defense_ships_count;\r\n            transactions_count[_id] = islands[_id].transactions_count;\r\n        }\r\n        return (ids, owners, prices, treasuries, attack_ships_counts, defense_ships_counts, transactions_count);\r\n    }\r\n\r\n    /** PRIVATE METHODS **/\r\n    function _create_island(bytes32 _name, address _owner, uint256 _price, uint256 _previous_price, uint256 _attack_ships_count, uint256 _defense_ships_count) private {\r\n        islands[islands_count] = Island({\r\n            name : _name,\r\n            owner : _owner,\r\n            price : _price,\r\n            treasury : 0,\r\n            treasury_next_withdrawal_block : 0,\r\n            previous_price : _previous_price,\r\n            attack_ships_count : _attack_ships_count,\r\n            defense_ships_count : _defense_ships_count,\r\n            transactions_count : 0,\r\n            approve_transfer_to : address(0),\r\n            previous_owners : [_owner, _owner]\r\n            });\r\n\r\n        islandBattleStats[islands_count] = IslandBattleStats({\r\n            attacks_won : 0,\r\n            attacks_lost : 0,\r\n            defenses_won : 0,\r\n            defenses_lost : 0,\r\n            treasury_stolen : 0,\r\n            treasury_lost : 0,\r\n            attack_cooldown : 0,\r\n            defense_cooldown : 0\r\n            });\r\n\r\n        NewIsland(islands_count, _name, _owner);\r\n        Transfer(address(this), _owner, islands_count);\r\n        islands_count++;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _island_id) private {\r\n        islands[_island_id].owner = _to;\r\n        islands[_island_id].approve_transfer_to = address(0);\r\n        ownerCount[_from] -= 1;\r\n        ownerCount[_to] += 1;\r\n        Transfer(_from, _to, _island_id);\r\n    }\r\n\r\n    /*** ERC-721 compliance. ***/\r\n    function approve(address _to, uint256 _island_id) public {\r\n        require(msg.sender == islands[_island_id].owner);\r\n        islands[_island_id].approve_transfer_to = _to;\r\n        Approval(msg.sender, _to, _island_id);\r\n    }\r\n\r\n    function ownerOf(uint256 _island_id) public view returns (address owner){\r\n        owner = islands[_island_id].owner;\r\n        require(owner != address(0));\r\n    }\r\n\r\n    function takeOwnership(uint256 _island_id) public {\r\n        address oldOwner = islands[_island_id].owner;\r\n        require(msg.sender != address(0));\r\n        require(islands[_island_id].approve_transfer_to == msg.sender);\r\n        _transfer(oldOwner, msg.sender, _island_id);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _island_id) public {\r\n        require(msg.sender != address(0));\r\n        require(msg.sender == islands[_island_id].owner);\r\n        _transfer(msg.sender, _to, _island_id);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _island_id) public {\r\n        require(_from == islands[_island_id].owner);\r\n        require(islands[_island_id].approve_transfer_to == _to);\r\n        require(_to != address(0));\r\n        _transfer(_from, _to, _island_id);\r\n    }\r\n\r\n    function upgradeContract(address _newContract) public onlyOwner {\r\n        _newContract.transfer(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_island_id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_island_id\",\"type\":\"uint256\"}],\"name\":\"withdrawTreasury\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_island_id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_island_id\",\"type\":\"uint256\"},{\"name\":\"_ships_to_buy\",\"type\":\"uint256\"},{\"name\":\"_is_attack_ships\",\"type\":\"bool\"}],\"name\":\"buyShips\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_island_id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maintenance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_island_id\",\"type\":\"uint256\"}],\"name\":\"getIsland\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"island_name\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"treasury\",\"type\":\"uint256\"},{\"name\":\"treasury_next_withdrawal_block\",\"type\":\"uint256\"},{\"name\":\"previous_price\",\"type\":\"uint256\"},{\"name\":\"attack_ships_count\",\"type\":\"uint256\"},{\"name\":\"defense_ships_count\",\"type\":\"uint256\"},{\"name\":\"transactions_count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_attacker_id\",\"type\":\"uint256\"},{\"name\":\"_target_id\",\"type\":\"uint256\"}],\"name\":\"attackIsland\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"onMaintenance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_island_id\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_island_id\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_attack_ships_count\",\"type\":\"uint256\"},{\"name\":\"_defense_ships_count\",\"type\":\"uint256\"}],\"name\":\"createIsland\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_island_id\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"offMaintenance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_island_id\",\"type\":\"uint256\"}],\"name\":\"getIslandBattleStats\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"attacks_won\",\"type\":\"uint256\"},{\"name\":\"attacks_lost\",\"type\":\"uint256\"},{\"name\":\"defenses_won\",\"type\":\"uint256\"},{\"name\":\"defenses_lost\",\"type\":\"uint256\"},{\"name\":\"treasury_stolen\",\"type\":\"uint256\"},{\"name\":\"treasury_lost\",\"type\":\"uint256\"},{\"name\":\"attack_cooldown\",\"type\":\"uint256\"},{\"name\":\"defense_cooldown\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIslands\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_island_id\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewIsland\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"IslandSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"divType\",\"type\":\"bytes32\"}],\"name\":\"DividendsPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ShipsBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"attackerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"targetId\",\"type\":\"uint256\"}],\"name\":\"IslandAttacked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TreasuryWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EtherIslands","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://43d2474d71b265c422cea6b7fdf8ef08730f9426bf200f400e3fbb18a9a78484"}]}