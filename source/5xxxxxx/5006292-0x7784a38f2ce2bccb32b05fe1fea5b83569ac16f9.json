{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /** \r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Token\r\n * @dev API interface for interacting with the Token contract \r\n */\r\ninterface Token {\r\n  function transferFrom(address _from, address _to) public returns (bool);\r\n  \r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n}\r\n\r\ncontract CLUB1 is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n  Token token;\r\n\r\n  address public CurrentTokenOwner = address(this);\r\n  address tokenAddress = 0x0356e14C2f8De339131C668c1747dEF594467a9A;  // Address of the TOKEN CONTRACT\r\n  uint256 public CurrentPrice = 0;\r\n\r\n  mapping (address => bool) prevowners;\r\n  \r\n  event BoughtToken(address indexed to, uint256 LastPrice);\r\n\r\n  \r\n  function CLUB1() public payable {\r\n       \r\n      token = Token(tokenAddress); \r\n            \r\n  }\r\n  \r\n  function checkprevowner(address _owner) public constant returns (bool isOwned) {\r\n\r\n    return prevowners[_owner];\r\n\r\n  }\r\n  \r\n  \r\n  function () public payable {\r\n   \r\n    buyToken();\r\n   \r\n  }\r\n\r\n  /**\r\n  * @dev function that sells available tokens\r\n  */\r\n  function buyToken() public payable {\r\n    \r\n    uint256 lastholdershare = CurrentPrice * 90 / 100;\r\n    uint256 ownershare = msg.value * 10 / 100; \r\n\r\n    require(msg.value > CurrentPrice);    \r\n\r\n    BoughtToken(msg.sender, msg.value);\r\n\r\n    token.transferFrom(CurrentTokenOwner, msg.sender);      \r\n  \r\n    CurrentPrice = msg.value;\r\n      \r\n    if (lastholdershare > 0) CurrentTokenOwner.transfer(lastholdershare);\r\n    owner.transfer(ownershare);                            \r\n    \r\n    CurrentTokenOwner = msg.sender;                        \r\n    prevowners[msg.sender] = true;\r\n  }\r\n\r\n   function resetToken() public payable {\r\n    \r\n    require(msg.sender == tokenAddress);\r\n    uint256 lastholdershare = CurrentPrice * 90 / 100;\r\n        \r\n    BoughtToken(msg.sender, 0);\r\n\r\n    CurrentPrice = 0;\r\n    \r\n    CurrentTokenOwner.transfer(lastholdershare);\r\n    CurrentTokenOwner = address(this);\r\n    \r\n  }\r\n\r\n   /**\r\n   * @notice Terminate contract and refund to owner\r\n   */\r\n  function destroy() public onlyOwner {\r\n   selfdestruct(owner);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"resetToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurrentTokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"checkprevowner\",\"outputs\":[{\"name\":\"isOwned\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"LastPrice\",\"type\":\"uint256\"}],\"name\":\"BoughtToken\",\"type\":\"event\"}]","ContractName":"CLUB1","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0b6f631844d1d07d434fc9c9017dd84c34768bedb429b9cf0447721afe9a7e2c"}]}