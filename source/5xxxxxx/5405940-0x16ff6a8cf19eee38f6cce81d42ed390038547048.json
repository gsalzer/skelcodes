{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n    \r\n// Simple contract to split stakes coming into Locus | One Puzzle. \r\n// 80% of buy in goes to the jackpot, and the remaining 20% goes \r\n// to a dev wallet to support future puzzle development. \r\n   \r\ncontract LocusOne {\r\n\r\n    \taddress devAcct;\r\n    \taddress potAcct;\r\n    \tuint fee;\r\n    \tuint pot;\r\n        address public owner;\r\n        \r\n        // PAUSE EVENTS - onlyOwner can pause contract to lock new registration\r\n        // once the bounty has reached its goal.\r\n        \r\n        event Pause();\r\n        event Unpause();\r\n\r\n        bool public paused = false;\r\n        \r\n        \r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n        \r\n    function LocusOne () public payable {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n      modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n    function() public payable {\r\n    require (!paused);    \r\n    _split(msg.value);\r\n    }\r\n\r\n    function _split(uint _stake) internal {\r\n        // protects users from staking less than the required amount to claim the bounty\r\n        require (msg.value >= 0.1 ether);\r\n        // Define the Locus dev account\r\n        devAcct = 0x1daa0BFDEDfB133ec6aEd2F66D64cA88BeC3f0B4;\r\n        // Define the Locus Pot account (what you're all playing for)      \r\n        potAcct = 0x708294833AEF21a305200b3463A832Ac97852f2e;\r\n\r\n        // 20% of the total Ether sent will be used to pay devs/support project.\r\n        fee = div(_stake, 5);\r\n        \r\n        // The remaining amount of Ether wll be sent to fund/stake the pot.\r\n        pot = sub(_stake, fee);\r\n\r\n        devAcct.transfer(fee);\r\n        potAcct.transfer(pot);\r\n\r\n    }\r\n\r\n\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n\r\n            // The below are safemath implementations of the four arithmetic operators\r\n    // designed to explicitly prevent over- and under-flows of integer values.\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    // not needed until later\r\n    //function sumproduct(uint256 sn, uint256 %cl) internal pure returns (uint256) {\r\n    //    uint256 c = a * b;\r\n    //    assert(c / a == b);\r\n    //    return c;\r\n    //}\r\n }","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"LocusOne","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://161b46a92a6bdd0576bbb1fd4696a4dfe16bca242cb9d72efc850eeb0a834947"}]}