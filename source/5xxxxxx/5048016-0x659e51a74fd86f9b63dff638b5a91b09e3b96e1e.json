{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*************************/\r\n/* Blocksquare Seed Sale */\r\n/*************************/\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function tranferOwnership(address _newOwner) public onlyOwner() {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract Token {\r\n    function mintTokens(address _atAddress, uint256 _amount) public;\r\n}\r\n\r\n/****************************************/\r\n/* BLOCKSQUARE SEED SALE IMPLEMENTATION */\r\n/****************************************/\r\n\r\ncontract BlocksquareSeedSale is owned {\r\n    using SafeMath for uint256;\r\n\r\n    /** Events **/\r\n    event Received(address indexed _from, uint256 _amount);\r\n    event FundsReturned(address indexed _to, uint256 _amount);\r\n    event TokensGiven(address indexed _to, uint256 _amount);\r\n    event ErrorReturningEth(address _to, uint256 _amount);\r\n\r\n    /** Public variables **/\r\n    uint256 public currentAmountRaised;\r\n    uint256 public valueInUSD;\r\n    uint256 public startTime;\r\n    address public recipient;\r\n\r\n    /** Private variables **/\r\n    uint256 nextParticipantIndex;\r\n    uint256 currentAmountOfTokens;\r\n    bool icoHasStarted;\r\n    bool icoHasClosed;\r\n    Token reward;\r\n\r\n    /** Constants **/\r\n    uint256[] tokensInTranch = [250000 * 10**18, 500000 * 10**18, 1000000 * 10**18, 1500000 * 10**18, 2000000 * 10**18, 3000000 * 10**18, 4000000 * 10**18, 5500000 * 10**18, 7000000 * 10**18, 10000000 * 10**18];\r\n    uint256[] priceOfTokenInUSD = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n    uint256 maxAmountOfTokens = 10000000 * 10 ** 18;\r\n    uint256 DAY = 60 * 60 * 24;\r\n    uint256 MAXIMUM = 152 ether;\r\n    uint256 MAXIMUM24H = 2 ether;\r\n\r\n    /** Mappings **/\r\n    mapping(address => uint256) contributed;\r\n    mapping(uint256 => address) participantIndex;\r\n    mapping(address => bool) canRecieveTokens;\r\n\r\n    /**\r\n    * Constructor function\r\n    *\r\n    * Initializes contract.\r\n    **/\r\n    function BlocksquareSeedSale() public {\r\n        owner = msg.sender;\r\n        recipient = msg.sender;\r\n        reward = Token(0x509A38b7a1cC0dcd83Aa9d06214663D9eC7c7F4a);\r\n    }\r\n\r\n    /**\r\n    * Basic payment\r\n    *\r\n    *\r\n    **/\r\n    function () payable public {\r\n        require(reward != address(0));\r\n        require(msg.value > 0);\r\n        require(icoHasStarted);\r\n        require(!icoHasClosed);\r\n        require(valueInUSD != 0);\r\n        require(canRecieveTokens[msg.sender]);\r\n        if(block.timestamp < startTime.add(DAY)) {\r\n            require(contributed[msg.sender].add(msg.value) <= MAXIMUM24H);\r\n        }\r\n        else {\r\n            require(contributed[msg.sender].add(msg.value) <= MAXIMUM);\r\n        }\r\n\r\n        if(contributed[msg.sender] == 0) {\r\n            participantIndex[nextParticipantIndex] = msg.sender;\r\n            nextParticipantIndex += 1;\r\n        }\r\n\r\n        contributed[msg.sender] = contributed[msg.sender].add(msg.value);\r\n        currentAmountRaised = currentAmountRaised.add(msg.value);\r\n        uint256 tokens = tokensToMint(msg.value);\r\n\r\n        if(currentAmountOfTokens.add(tokens) >= maxAmountOfTokens) {\r\n            icoHasClosed = true;\r\n        }\r\n\r\n        reward.mintTokens(msg.sender, tokens);\r\n        currentAmountOfTokens = currentAmountOfTokens.add(tokens);\r\n        Received(msg.sender, msg.value);\r\n        TokensGiven(msg.sender, tokens);\r\n\r\n        if(this.balance >= 100 ether) {\r\n            if(!recipient.send(this.balance)) {\r\n                ErrorReturningEth(recipient, this.balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Calculate tokens to mint.\r\n    *\r\n    * Calculets how much tokens sender will get based on _amountOfWei he sent.\r\n    *\r\n    * @param _amountOfWei Amount of wei sender has sent to the contract.\r\n    * @return Number of tokens sender will recieve.\r\n    **/\r\n    function tokensToMint(uint256 _amountOfWei) private returns (uint256) {\r\n        uint256 raisedTokens = currentAmountOfTokens;\r\n        uint256 left = _amountOfWei;\r\n        uint256 rewardAmount = 0;\r\n        for(uint8 i = 0; i < tokensInTranch.length; i++) {\r\n            if (tokensInTranch[i] >= raisedTokens) {\r\n                uint256 tokensPerEth = valueInUSD.div(priceOfTokenInUSD[i]);\r\n                uint256 tokensLeft = tokensPerEth.mul(left);\r\n                if((raisedTokens.add(tokensLeft)) <= tokensInTranch[i]) {\r\n                    rewardAmount = rewardAmount.add(tokensLeft);\r\n                    left = 0;\r\n                    break;\r\n                }\r\n                else {\r\n                    uint256 toNext = tokensInTranch[i].sub(raisedTokens);\r\n                    uint256 WeiCost = toNext.div(tokensPerEth);\r\n                    rewardAmount = rewardAmount.add(toNext);\r\n                    raisedTokens = raisedTokens.add(toNext);\r\n                    left = left.sub(WeiCost);\r\n                }\r\n            }\r\n        }\r\n        if(left != 0) {\r\n            if(msg.sender.send(left)) {\r\n                FundsReturned(msg.sender, left);\r\n                currentAmountRaised = currentAmountRaised.sub(left);\r\n                contributed[msg.sender] = contributed[msg.sender].sub(left);\r\n            }else {\r\n                ErrorReturningEth(msg.sender, left);\r\n            }\r\n        }\r\n        return rewardAmount;\r\n    }\r\n\r\n    /**\r\n    * Start Presale\r\n    *\r\n    * Starts presale and sets value of ETH in USD.\r\n    *\r\n    * @param _value Value of ETH in USD.\r\n    **/\r\n    function startICO(uint256 _value) public onlyOwner {\r\n        require(!icoHasStarted);\r\n        valueInUSD = _value;\r\n        startTime = block.timestamp;\r\n        icoHasStarted = true;\r\n    }\r\n\r\n    /**\r\n    * Close presale\r\n    *\r\n    * Closes presale.\r\n    **/\r\n    function closeICO() public onlyOwner {\r\n        require(icoHasStarted);\r\n        icoHasClosed = true;\r\n    }\r\n\r\n    /**\r\n    * Add to whitelist\r\n    *\r\n    * Adds address to whitelist so they can send ETH.\r\n    *\r\n    * @param _addresses Array of addresses to add to whitelist.\r\n    **/\r\n    function addAllowanceToRecieveToken(address[] _addresses) public onlyOwner {\r\n        for(uint256 i = 0; i < _addresses.length; i++) {\r\n            canRecieveTokens[_addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Withdraw Ether\r\n    *\r\n    * Withdraw Ether from contract.\r\n    **/\r\n    function withdrawEther() public onlyOwner {\r\n        if(!recipient.send(this.balance)) {\r\n            ErrorReturningEth(recipient, this.balance);\r\n        }\r\n    }\r\n\r\n    /** Getters functions for info **/\r\n    function getToken() constant public returns (address _tokenAddress) {\r\n        return address(reward);\r\n    }\r\n\r\n    function isCrowdsaleOpen() constant public returns (bool _isOpened) {\r\n        return (!icoHasClosed && icoHasStarted);\r\n    }\r\n\r\n    function hasCrowdsaleStarted() constant public returns (bool _hasStarted) {\r\n        return icoHasStarted;\r\n    }\r\n\r\n    function amountContributed(address _contributor) constant public returns(uint256 _contributedUntilNow){\r\n        return contributed[_contributor];\r\n    }\r\n\r\n    function numberOfContributors() constant public returns(uint256 _numOfContributors){\r\n        return nextParticipantIndex;\r\n    }\r\n\r\n    function numberOfTokens() constant public returns(uint256) {\r\n        return currentAmountOfTokens;\r\n    }\r\n\r\n    function hasAllowanceToRecieveTokens(address _address) constant public returns(bool) {\r\n        return canRecieveTokens[_address];\r\n    }\r\n\r\n    function endOf24H() constant public returns(uint256) {\r\n        return startTime.add(DAY);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"hasCrowdsaleStarted\",\"outputs\":[{\"name\":\"_hasStarted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasAllowanceToRecieveTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"amountContributed\",\"outputs\":[{\"name\":\"_contributedUntilNow\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfContributors\",\"outputs\":[{\"name\":\"_numOfContributors\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsaleOpen\",\"outputs\":[{\"name\":\"_isOpened\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"tranferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endOf24H\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addAllowanceToRecieveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"valueInUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentAmountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FundsReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensGiven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ErrorReturningEth\",\"type\":\"event\"}]","ContractName":"BlocksquareSeedSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e8c24ddb53128ccdb70570a3816580fb30a3b3290bb151eacae36f1b63573e50"}]}