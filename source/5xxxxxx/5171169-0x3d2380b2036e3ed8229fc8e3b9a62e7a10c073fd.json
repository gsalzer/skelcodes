{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract Token {\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract StandardToken is Token {\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n}\r\n\r\ncontract FairDinkums is StandardToken { \r\n    string public name;                   // Token Name\r\n    uint8 public decimals;                // How many decimals the token has\r\n    string public symbol;                 // Token identifier\r\n    uint256 public tokensPerEth;          // How many tokens purchased per eth in ICO\r\n    uint256 public totalEthInWei;         // Total ethereum raised in ICO (in Wei)  \r\n    address public fundsWallet;           // Wallet which manages the contract\r\n    uint public startTime;                // Start time of the ICO\r\n    bool public tokenReleased;\r\n    uint256 public totalDividends;\r\n    mapping (address => uint256) public lastDividends;\r\n    event TokensSold(address Buyer, uint256 Qty);\r\n    \r\n    function FairDinkums() public {\r\n        balances[msg.sender] = 20000 * 1e18;    // 20'000 max for ICO participants\r\n        totalSupply = 20000 * 1e18;             // 20'000 max for ICO participants\r\n        name = \"Fair Dinkums\";                  // Fair Dinkums Token\r\n        decimals = 18;                          // Same as eth, 18.\r\n        symbol = \"FDK\";                         // Fair Dinkums Token => FDK\r\n        tokensPerEth = 1000;                    // Tokens per eth during ICO\r\n        fundsWallet = msg.sender;               // The owner of the contract gets the ETH to manage\r\n        startTime = now;                        // ICO will run for two weeks from initialisation\r\n        tokenReleased = false;                  // Tokens will be released after two weeks or end of ICO as chosen by contract manager\r\n    }\r\n\r\n    function() public payable {\r\n        // The callback function serves two purposes:\r\n        //   1) to receive eth as a contribution during the ICO, and\r\n        //   2) to collect dividends after the ICO\r\n        // Using this pattern allows people to interact with the contract without any special API's\r\n        if (icoOpen()){\r\n            // If the ICO is still open, then we add the token balance to the contributor\r\n            require(msg.value > 0 && msg.value <= 20 ether);\r\n            totalEthInWei = totalEthInWei + msg.value;\r\n            uint256 amount = msg.value * tokensPerEth;\r\n            if ((balances[fundsWallet]) < amount) {\r\n                revert();\r\n            }\r\n            TokensSold(msg.sender,amount);\r\n            balances[fundsWallet] = balances[fundsWallet] - amount;\r\n            balances[msg.sender] = balances[msg.sender] + amount;\r\n    \r\n            Transfer(fundsWallet, msg.sender, amount);\r\n    \r\n            fundsWallet.transfer(msg.value);\r\n        } else {\r\n            // If the ico is over, then the value must be zero and the updateDivs function will be called.\r\n            require(msg.value==0);\r\n            updateDivs(msg.sender,dividendsOwing(msg.sender));\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public released returns (bool success) {\r\n        // Record previous dividendsOwing information before transferring tokens\r\n        uint256 init_from = dividendsOwing(msg.sender);\r\n        uint256 init_to = dividendsOwing(_to);\r\n        // Transfer Tokens\r\n        require(super.transfer(_to,_value));\r\n        // If the transfer was successful, then update dividends as per dividendsOwing from before the transfer\r\n        updateDivs(msg.sender,init_from);\r\n        updateDivs(_to,init_to);\r\n        // Return success flag\r\n        return true;\r\n    }\r\n\r\n    function icoOpen() public view returns (bool open) {\r\n        // ICO will be open for the sooner of 2 weeks or the token is declared released by the manager\r\n        return ((now < (startTime + 4 weeks)) && !tokenReleased);\r\n    }\r\n    \r\n    modifier released {\r\n        require(tokenReleased);\r\n        _;\r\n    }\r\n    \r\n    modifier isOwner {\r\n        require(msg.sender == fundsWallet);\r\n        _;\r\n    }\r\n\r\n    function dividendsOwing(address _who) public view returns(uint256 owed) {\r\n        // Concise function to determine the amount of dividends owed to a token holder.\r\n        // Susceptible to small rounding errors which will be lost until the token is destroyed\r\n        if (totalDividends > lastDividends[_who]){\r\n            uint256 newDividends = totalDividends - lastDividends[_who];\r\n            return ((balances[_who] * newDividends) / totalSupply);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function updateDivs(address _who, uint256 _owing) internal {\r\n        if (_owing > 0){\r\n            if(_owing<=this.balance){\r\n                _who.transfer(_owing);\r\n            } else {\r\n                _who.transfer(this.balance);\r\n            }\r\n        }\r\n        lastDividends[_who] = totalDividends;\r\n    }\r\n    \r\n    function remainingTokens() public view returns(uint256 remaining){\r\n        return balances[fundsWallet];\r\n    }\r\n    \r\n    function releaseToken() public isOwner {\r\n        require(!tokenReleased);\r\n        tokenReleased = true;\r\n        // Burns unsold tokens\r\n        totalSupply -= balances[fundsWallet];\r\n        balances[fundsWallet] = 0;\r\n    }\r\n    \r\n    function payDividends() public payable isOwner {\r\n        totalDividends += msg.value;\r\n    }\r\n    \r\n    function withdrawDividends() public {\r\n        updateDivs(msg.sender,dividendsOwing(msg.sender));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"dividendsOwing\",\"outputs\":[{\"name\":\"owed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoOpen\",\"outputs\":[{\"name\":\"open\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payDividends\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Qty\",\"type\":\"uint256\"}],\"name\":\"TokensSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FairDinkums","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://423dc134caa62d0eecb83f39c62d0fd2fb36f2f143bab31e024bf7996c14ba75"}]}