{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract BettingInterface {\r\n    // place a bet on a coin(horse) lockBetting\r\n    function placeBet(bytes32 horse) external payable;\r\n    // method to claim the reward amount\r\n    function claim_reward() external;\r\n\r\n    mapping (bytes32 => bool) public winner_horse;\r\n    \r\n    function checkReward() external constant returns (uint);\r\n}\r\n\r\n/**\r\n * @dev Allows to bet on a race and receive future tokens used to withdraw winnings\r\n*/\r\ncontract HorseFutures {\r\n    \r\n    event Claimed(address indexed Race, uint256 Count);\r\n    event Selling(bytes32 Id, uint256 Amount, uint256 Price, address indexed Race, bytes32 Horse, address indexed Owner);\r\n    event Buying(bytes32 Id, uint256 Amount, uint256 Price, address indexed Race, bytes32 Horse, address indexed Owner);\r\n    event Canceled(bytes32 Id, address indexed Owner,address indexed Race);\r\n    event Bought(bytes32 Id, uint256 Amount, address indexed Owner, address indexed Race);\r\n    event Sold(bytes32 Id, uint256 Amount, address indexed Owner, address indexed Race);\r\n    event BetPlaced(address indexed EthAddr, address indexed Race);\r\n    \r\n    struct Offer\r\n    {\r\n        uint256 Amount;\r\n        bytes32 Horse;\r\n        uint256 Price;\r\n        address Race;\r\n        bool BuyType;\r\n    }\r\n    \r\n    mapping(address => mapping(address => mapping(bytes32 => uint256))) ClaimTokens;\r\n    mapping(address => mapping (bytes32 => uint256)) TotalTokensCoinRace;\r\n    mapping(address => bool) ClaimedRaces;\r\n    \r\n    mapping(address => uint256) toDistributeRace;\r\n    //market\r\n    mapping(bytes32 => Offer) market;\r\n    mapping(bytes32 => address) owner;\r\n    mapping(address => uint256) public marketBalance;\r\n    \r\n    function placeBet(bytes32 horse, address race) external payable\r\n    _validRace(race) {\r\n        BettingInterface raceContract = BettingInterface(race);\r\n        raceContract.placeBet.value(msg.value)(horse);\r\n        uint256 c = uint256(msg.value / 1 finney);\r\n        ClaimTokens[msg.sender][race][horse] += c;\r\n        TotalTokensCoinRace[race][horse] += c;\r\n\r\n        emit BetPlaced(msg.sender, race);\r\n    }\r\n    \r\n    function getOwnedAndTotalTokens(bytes32 horse, address race) external view\r\n    _validRace(race) \r\n    returns(uint256,uint256) {\r\n        return (ClaimTokens[msg.sender][race][horse],TotalTokensCoinRace[race][horse]);\r\n    }\r\n\r\n    // required for the claimed ether to be transfered here\r\n    function() public payable { }\r\n    \r\n    function claim(address race) external\r\n    _validRace(race) {\r\n        BettingInterface raceContract = BettingInterface(race);\r\n        if(!ClaimedRaces[race]) {\r\n            toDistributeRace[race] = raceContract.checkReward();\r\n            raceContract.claim_reward();\r\n            ClaimedRaces[race] = true;\r\n        }\r\n\r\n        uint256 totalWinningTokens = 0;\r\n        uint256 ownedWinningTokens = 0;\r\n\r\n        bool btcWin = raceContract.winner_horse(bytes32(\"BTC\"));\r\n        bool ltcWin = raceContract.winner_horse(bytes32(\"LTC\"));\r\n        bool ethWin = raceContract.winner_horse(bytes32(\"ETH\"));\r\n\r\n        if(btcWin)\r\n        {\r\n            totalWinningTokens += TotalTokensCoinRace[race][bytes32(\"BTC\")];\r\n            ownedWinningTokens += ClaimTokens[msg.sender][race][bytes32(\"BTC\")];\r\n            ClaimTokens[msg.sender][race][bytes32(\"BTC\")] = 0;\r\n        } \r\n        if(ltcWin)\r\n        {\r\n            totalWinningTokens += TotalTokensCoinRace[race][bytes32(\"LTC\")];\r\n            ownedWinningTokens += ClaimTokens[msg.sender][race][bytes32(\"LTC\")];\r\n            ClaimTokens[msg.sender][race][bytes32(\"LTC\")] = 0;\r\n        } \r\n        if(ethWin)\r\n        {\r\n            totalWinningTokens += TotalTokensCoinRace[race][bytes32(\"ETH\")];\r\n            ownedWinningTokens += ClaimTokens[msg.sender][race][bytes32(\"ETH\")];\r\n            ClaimTokens[msg.sender][race][bytes32(\"ETH\")] = 0;\r\n        }\r\n\r\n        uint256 claimerCut = toDistributeRace[race] / totalWinningTokens * ownedWinningTokens;\r\n        \r\n        msg.sender.transfer(claimerCut);\r\n        \r\n        emit Claimed(race, claimerCut);\r\n    }\r\n    \r\n    function sellOffer(uint256 amount, uint256 price, address race, bytes32 horse) external\r\n    _validRace(race) \r\n    _validHorse(horse)\r\n    returns (bytes32) {\r\n        uint256 ownedAmount = ClaimTokens[msg.sender][race][horse];\r\n        require(ownedAmount >= amount);\r\n        require(amount > 0);\r\n        \r\n        bytes32 id = keccak256(abi.encodePacked(amount,price,race,horse,true,block.timestamp));\r\n        require(owner[id] == address(0)); //must not already exist\r\n        \r\n        Offer storage newOffer = market[id];\r\n        \r\n        newOffer.Amount = amount;\r\n        newOffer.Horse = horse;\r\n        newOffer.Price = price;\r\n        newOffer.Race = race;\r\n        newOffer.BuyType = false;\r\n        \r\n        ClaimTokens[msg.sender][race][horse] -= amount;\r\n        owner[id] = msg.sender;\r\n        \r\n        emit Selling(id,amount,price,race,horse,msg.sender);\r\n        \r\n        return id;\r\n    }\r\n\r\n    function getOffer(bytes32 id) external view returns(uint256,bytes32,uint256,address,bool) {\r\n        Offer memory off = market[id];\r\n        return (off.Amount,off.Horse,off.Price,off.Race,off.BuyType);\r\n    }\r\n    \r\n    function buyOffer(uint256 amount, uint256 price, address race, bytes32 horse) external payable\r\n    _validRace(race) \r\n    _validHorse(horse)\r\n    returns (bytes32) {\r\n        require(amount > 0);\r\n        require(price > 0);\r\n        require(msg.value == price * amount);\r\n        bytes32 id = keccak256(abi.encodePacked(amount,price,race,horse,false,block.timestamp));\r\n        require(owner[id] == address(0)); //must not already exist\r\n        \r\n        Offer storage newOffer = market[id];\r\n        \r\n        newOffer.Amount = amount;\r\n        newOffer.Horse = horse;\r\n        newOffer.Price = price;\r\n        newOffer.Race = race;\r\n        newOffer.BuyType = true;\r\n        owner[id] = msg.sender;\r\n        \r\n        emit Buying(id,amount,price,race,horse,msg.sender);\r\n        \r\n        return id;\r\n    }\r\n    \r\n    function cancelOrder(bytes32 id) external {\r\n        require(owner[id] == msg.sender);\r\n        \r\n        Offer memory off = market[id];\r\n        if(off.BuyType) {\r\n            msg.sender.transfer(off.Amount * off.Price);\r\n        }\r\n        else {\r\n            ClaimTokens[msg.sender][off.Race][off.Horse] += off.Amount;\r\n        }\r\n        \r\n\r\n        emit Canceled(id,msg.sender,off.Race);\r\n        delete market[id];\r\n        delete owner[id];\r\n    }\r\n    \r\n    function buy(bytes32 id, uint256 amount) external payable {\r\n        require(owner[id] != address(0));\r\n        require(owner[id] != msg.sender);\r\n        Offer storage off = market[id];\r\n        require(!off.BuyType);\r\n        require(amount <= off.Amount);\r\n        uint256 cost = off.Price * amount;\r\n        require(msg.value >= cost);\r\n        \r\n        ClaimTokens[msg.sender][off.Race][off.Horse] += amount;\r\n        marketBalance[owner[id]] += msg.value;\r\n\r\n        emit Bought(id,amount,msg.sender, off.Race);\r\n        \r\n        if(off.Amount == amount)\r\n        {\r\n            delete market[id];\r\n            delete owner[id];\r\n        }\r\n        else\r\n        {\r\n            off.Amount -= amount;\r\n        }\r\n    }\r\n\r\n    function sell(bytes32 id, uint256 amount) external {\r\n        require(owner[id] != address(0));\r\n        require(owner[id] != msg.sender);\r\n        Offer storage off = market[id];\r\n        require(off.BuyType);\r\n        require(amount <= off.Amount);\r\n        \r\n        uint256 cost = amount * off.Price;\r\n        ClaimTokens[msg.sender][off.Race][off.Horse] -= amount;\r\n        ClaimTokens[owner[id]][off.Race][off.Horse] += amount;\r\n        marketBalance[owner[id]] -= cost;\r\n        marketBalance[msg.sender] += cost;\r\n\r\n        emit Sold(id,amount,msg.sender,off.Race);\r\n        \r\n        if(off.Amount == amount)\r\n        {\r\n            delete market[id];\r\n            delete owner[id];\r\n        }\r\n        else\r\n        {\r\n            off.Amount -= amount;\r\n        }\r\n    }\r\n    \r\n    function withdraw() external {\r\n        msg.sender.transfer(marketBalance[msg.sender]);\r\n        marketBalance[msg.sender] = 0;\r\n    }\r\n    \r\n    modifier _validRace(address race) {\r\n        require(race != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier _validHorse(bytes32 horse) {\r\n        require(horse == bytes32(\"BTC\") || horse == bytes32(\"ETH\") || horse == bytes32(\"LTC\"));\r\n        _;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"horse\",\"type\":\"bytes32\"},{\"name\":\"race\",\"type\":\"address\"}],\"name\":\"getOwnedAndTotalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"race\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"race\",\"type\":\"address\"},{\"name\":\"horse\",\"type\":\"bytes32\"}],\"name\":\"buyOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"horse\",\"type\":\"bytes32\"},{\"name\":\"race\",\"type\":\"address\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"race\",\"type\":\"address\"},{\"name\":\"horse\",\"type\":\"bytes32\"}],\"name\":\"sellOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Race\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Count\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"Race\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Horse\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"Owner\",\"type\":\"address\"}],\"name\":\"Selling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"Race\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Horse\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"Owner\",\"type\":\"address\"}],\"name\":\"Buying\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"Race\",\"type\":\"address\"}],\"name\":\"Canceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"Race\",\"type\":\"address\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"Race\",\"type\":\"address\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"EthAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"Race\",\"type\":\"address\"}],\"name\":\"BetPlaced\",\"type\":\"event\"}]","ContractName":"HorseFutures","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://22709153c61fa29b60e90daf3be839a2f8404a1be064c4b19662a28304d6495a"}]}