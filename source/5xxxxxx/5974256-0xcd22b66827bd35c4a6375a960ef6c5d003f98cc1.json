{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n * behavior.\r\n */\r\ncontract XDMCCrowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  event Log(string _a, uint256 _b);\r\n\r\n  // The token being sold\r\n  ERC20 public token;\r\n\r\n  address wallet; //address for contribution receiving\r\n\r\n  uint256 public icoRate = 0; // will be set manually when ico starts\r\n  uint256 public icoOver1 = 0; // will be set manually when ico starts\r\n  uint256 public icoBonus1 = 0; // will be set manually when ico starts\r\n  uint256 public icoOver2 = 0; // will be set manually when ico starts\r\n  uint256 public icoBonus2 = 0; // will be set manually when ico starts\r\n  uint256 public icoOver3 = 0; // will be set manually when ico starts\r\n  uint256 public icoBonus3 = 0; // will be set manually when ico starts\r\n  uint256 public icoOver4 = 0; // will be set manually when ico starts\r\n  uint256 public icoBonus4 = 0; // will be set manually when ico starts\r\n  uint256 public icoOver5 = 0; // will be set manually when ico starts\r\n  uint256 public icoBonus5 = 0; // will be set manually when ico starts\r\n  uint256 public ico1cap = uint256(224502081).mul(1 ether);\r\n  uint256 public ico2cap = uint256(190996929).mul(1 ether);\r\n  uint256 public ico3cap = uint256(127331286).mul(1 ether);\r\n  enum Stages {Pause, Ico1, Ico1End, Ico2, Ico2End, Ico3, Ico3End}\r\n  Stages currentStage;\r\n  address public teamAddress = 0x4B58EBeEb96b7551Bb752Ea9512771615C554De3;\r\n  uint256 public vestingStartTime = 0;\r\n  uint256 public vestingPeriod = 15552000; // 180 days\r\n  uint256 public teamTokens = uint256(198639670).mul(1 ether);\r\n  uint256 public teamTokensPerPeriod = uint256(33768743).mul(1 ether);\r\n  uint256 public teamTokensReleased = 0;\r\n  uint256 public devTokensIco1 = uint256(52060948).mul(1 ether);\r\n  uint256 public devTokensIco2 = uint256(52060948).mul(1 ether);\r\n  uint256 public devTokensIco3 = uint256(53638554).mul(1 ether);\r\n  uint256 public ico1endTime = 0;\r\n  uint256 public ico2endTime = 0;\r\n  uint256 public ico3endTime = 0;\r\n  uint256 public getUnsoldPeriod = 8640000; // 100 days\r\n  uint256 public ico1total = 0;\r\n  uint256 public ico2total = 0;\r\n  uint256 public ico3total = 0;\r\n  uint256 public ico1receivedTotal = 0;\r\n  uint256 public ico2receivedTotal = 0;\r\n  uint256 public ico3receivedTotal = 0;\r\n  mapping(address => uint256) ico1amount;\r\n  mapping(address => uint256) ico2amount;\r\n  mapping(address => uint256) ico3amount;\r\n  mapping(address => uint256) ico1received;\r\n  mapping(address => uint256) ico2received;\r\n  mapping(address => uint256) ico3received;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  event TokenPriceDescription(\r\n    uint256 basePrice,\r\n    uint256 bonus,\r\n    uint256 tokens\r\n  );\r\n\r\n  /**\r\n   * \r\n   * @param _owner Address where collected funds will be forwarded to\r\n   * @param _token Address of the token being sold\r\n   */\r\n  constructor(address _owner, address _wallet, ERC20 _token) public {\r\n    require(_owner != address(0));\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n    currentStage = Stages.Pause;\r\n    vestingStartTime = now;\r\n    owner = _owner;\r\n    token = _token;\r\n    wallet = _wallet;\r\n    teamTokensReleased = teamTokensReleased.add(teamTokensPerPeriod);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  function startIco1(\r\n    uint256 _rate, \r\n    uint256 _over1, \r\n    uint256 _bonus1, \r\n    uint256 _over2, \r\n    uint256 _bonus2, \r\n    uint256 _over3, \r\n    uint256 _bonus3, \r\n    uint256 _over4, \r\n    uint256 _bonus4, \r\n    uint256 _over5, \r\n    uint256 _bonus5\r\n  ) public onlyOwner returns (bool) {\r\n    require(currentStage == Stages.Pause);\r\n    require(token.balanceOf(address(this)) >= uint256(865461673).mul(1 ether));\r\n    require(_rate > 0);\r\n    currentStage = Stages.Ico1;\r\n    icoRate = _rate;\r\n    icoOver1 = _over1.mul(1 ether);\r\n    icoBonus1 = _bonus1;\r\n    icoOver2 = _over2.mul(1 ether);\r\n    icoBonus2 = _bonus2;\r\n    icoOver3 = _over3.mul(1 ether);\r\n    icoBonus3 = _bonus3;\r\n    icoOver4 = _over4.mul(1 ether);\r\n    icoBonus4 = _bonus4;\r\n    icoOver5 = _over5.mul(1 ether);\r\n    icoBonus5 = _bonus5;\r\n    require(token.transfer(owner, devTokensIco1));\r\n    return true;\r\n  }\r\n\r\n  function endIco1() public onlyOwner returns (bool) {\r\n    require(currentStage == Stages.Ico1);\r\n    currentStage = Stages.Ico1End;\r\n    ico1endTime = now;\r\n    return true;\r\n  }\r\n\r\n  function startIco2(\r\n    uint256 _rate, \r\n    uint256 _over1, \r\n    uint256 _bonus1, \r\n    uint256 _over2, \r\n    uint256 _bonus2, \r\n    uint256 _over3, \r\n    uint256 _bonus3, \r\n    uint256 _over4, \r\n    uint256 _bonus4, \r\n    uint256 _over5, \r\n    uint256 _bonus5\r\n  ) public onlyOwner returns (bool) {\r\n    require(currentStage == Stages.Ico1End);\r\n    currentStage = Stages.Ico2;\r\n    if (_rate > 0) icoRate = _rate;\r\n    icoOver1 = _over1.mul(1 ether);\r\n    icoBonus1 = _bonus1;\r\n    icoOver2 = _over2.mul(1 ether);\r\n    icoBonus2 = _bonus2;\r\n    icoOver3 = _over3.mul(1 ether);\r\n    icoBonus3 = _bonus3;\r\n    icoOver4 = _over4.mul(1 ether);\r\n    icoBonus4 = _bonus4;\r\n    icoOver5 = _over5.mul(1 ether);\r\n    icoBonus5 = _bonus5;\r\n    require(token.transfer(owner, devTokensIco2));\r\n    return true;\r\n  }\r\n\r\n  function endIco2() public onlyOwner returns (bool) {\r\n    require(currentStage == Stages.Ico2);\r\n    currentStage = Stages.Ico2End;\r\n    ico2endTime = now;\r\n    return true;\r\n  }\r\n\r\n  function startIco3(\r\n    uint256 _rate, \r\n    uint256 _over1, \r\n    uint256 _bonus1, \r\n    uint256 _over2, \r\n    uint256 _bonus2, \r\n    uint256 _over3, \r\n    uint256 _bonus3, \r\n    uint256 _over4, \r\n    uint256 _bonus4, \r\n    uint256 _over5, \r\n    uint256 _bonus5\r\n  ) public onlyOwner returns (bool) {\r\n    require(currentStage == Stages.Ico2End);\r\n    currentStage = Stages.Ico3;\r\n    if (_rate > 0) icoRate = _rate;\r\n    icoOver1 = _over1.mul(1 ether);\r\n    icoBonus1 = _bonus1;\r\n    icoOver2 = _over2.mul(1 ether);\r\n    icoBonus2 = _bonus2;\r\n    icoOver3 = _over3.mul(1 ether);\r\n    icoBonus3 = _bonus3;\r\n    icoOver4 = _over4.mul(1 ether);\r\n    icoBonus4 = _bonus4;\r\n    icoOver5 = _over5.mul(1 ether);\r\n    icoBonus5 = _bonus5;\r\n    require(token.transfer(owner, devTokensIco3));\r\n    return true;\r\n  }\r\n\r\n  function endIco3() public onlyOwner returns (bool) {\r\n    require(currentStage == Stages.Ico3);\r\n    currentStage = Stages.Ico3End;\r\n    ico3endTime = now;\r\n    return true;\r\n  }\r\n\r\n  function getUnsoldReceived(uint256 _stage, address _address) public view returns (uint256) {\r\n    if (_stage == 1) return ico1received[_address];\r\n    else if (_stage == 2) return ico2received[_address];\r\n    else if (_stage == 3) return ico3received[_address];\r\n    else return 0;\r\n  }\r\n\r\n  function getStageAmount(uint256 _stage, address _address) public view returns (uint256) {\r\n    if (_stage == 1) return ico1amount[_address];\r\n    else if (_stage == 2) return ico2amount[_address];\r\n    else if (_stage == 3) return ico3amount[_address];\r\n    else return 0;\r\n  }\r\n\r\n  function getStageName() public view returns (string) {\r\n    if (currentStage == Stages.Pause) return 'ICO is not started yet';\r\n    else if (currentStage == Stages.Ico1) return 'ICO 1';\r\n    else if (currentStage == Stages.Ico1End) return 'ICO 1 end';\r\n    else if (currentStage == Stages.Ico2) return 'ICO 2';\r\n    else if (currentStage == Stages.Ico2End) return 'ICO 2 end';\r\n    else if (currentStage == Stages.Ico3) return 'ICO 3';\r\n    else if (currentStage == Stages.Ico3End) return 'ICO 3 end';\r\n    return 'Undefined';\r\n  }\r\n\r\n  function getPrice() public view returns (uint256) {\r\n    if (currentStage == Stages.Ico1) return icoRate;\r\n    else if (currentStage == Stages.Ico2) return icoRate;\r\n    else if (currentStage == Stages.Ico3) return icoRate;\r\n    return 0;\r\n  }\r\n\r\n  function getBonus(uint256 _ether) public view returns (uint256) {\r\n    return _getBonus(_ether.mul(1 ether));\r\n  }\r\n\r\n  function _getBonus(uint256 _wei) internal view returns (uint256) {\r\n    if (\r\n        currentStage == Stages.Ico1 || \r\n        currentStage == Stages.Ico2 || \r\n        currentStage == Stages.Ico3\r\n      ) {\r\n      if (_wei >= icoOver1) return icoBonus1;\r\n      else if (_wei >= icoOver2) return icoBonus2;\r\n      else if (_wei >= icoOver3) return icoBonus3;\r\n      else if (_wei >= icoOver4) return icoBonus4;\r\n      else if (_wei >= icoOver5) return icoBonus5;\r\n      return 0;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function getVestingPeriodNumber() public view returns (uint256) {\r\n    if (vestingStartTime == 0) return 0;\r\n    return now.sub(vestingStartTime).div(vestingPeriod).add(1);\r\n  }\r\n\r\n  function getTeamToken() public {\r\n    uint256 vestingPeriodNumber = getVestingPeriodNumber();\r\n    require(vestingPeriodNumber > 1);\r\n    require(teamTokensReleased < teamTokens);\r\n    uint256 toRelease;\r\n    if (vestingPeriodNumber >= 6) toRelease = teamTokens;\r\n    else toRelease = vestingPeriodNumber.mul(teamTokensPerPeriod);\r\n    if (toRelease > teamTokens) toRelease = teamTokens;\r\n    toRelease = toRelease.sub(teamTokensReleased);\r\n    require(toRelease > 0);\r\n    teamTokensReleased = teamTokensReleased.add(toRelease);\r\n    require(token.transfer(teamAddress, toRelease));\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    _validateTokensAmount(tokens);\r\n\r\n    if (currentStage == Stages.Ico1) {\r\n      ico1amount[msg.sender] = ico1amount[msg.sender].add(tokens);\r\n      ico1total = ico1total.add(tokens);\r\n    } else if (currentStage == Stages.Ico2) {\r\n      ico2amount[msg.sender] = ico2amount[msg.sender].add(tokens);\r\n      ico2total = ico2total.add(tokens);\r\n    } else if (currentStage == Stages.Ico3) {\r\n      ico3amount[msg.sender] = ico3amount[msg.sender].add(tokens);\r\n      ico3total = ico3total.add(tokens);\r\n    }\r\n\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(_beneficiary, tokens);\r\n\r\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n\r\n    _forwardFunds(weiAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount >= 100 finney);\r\n    if (currentStage == Stages.Ico1) require(_weiAmount <= 1000 ether);\r\n    else if (currentStage == Stages.Ico2) require(_weiAmount <= 500 ether);\r\n    else if (currentStage == Stages.Ico3) require(_weiAmount <= 500 ether);\r\n    else revert();\r\n  }\r\n\r\n  function _validateTokensAmount(uint256 _tokens) internal view {\r\n    require(_tokens > 0);\r\n    if (currentStage == Stages.Ico1) require(_tokens <= ico1cap);\r\n    else if (currentStage == Stages.Ico2) require(_tokens <= ico2cap);\r\n    else if (currentStage == Stages.Ico3) require(_tokens <= ico3cap);\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n    require(token.transfer(_beneficiary, _tokenAmount));\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount) internal returns (uint256) {\r\n    uint256 basePrice = icoRate;\r\n    uint256 tokens = _weiAmount.mul(basePrice);\r\n    uint256 bonuses = _getBonus(_weiAmount);\r\n    if (bonuses > 0) {\r\n      uint256 bonusTokens = tokens.mul(bonuses).div(100);\r\n      tokens = tokens.add(bonusTokens);\r\n    }\r\n\r\n    emit TokenPriceDescription(basePrice, bonuses, tokens);\r\n    return tokens;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds(uint256 _weiAmount) internal {\r\n    require(wallet != address(0));\r\n    wallet.transfer(_weiAmount);\r\n  }\r\n\r\n  function getUnsoldOwner() public onlyOwner returns (bool) {\r\n    uint256 unsoldTokensRemains = 0;\r\n    uint256 stageRemains;\r\n    if (\r\n      ico1endTime > 0 && \r\n      now.sub(ico1endTime) > getUnsoldPeriod && \r\n      ico1receivedTotal < ico1cap.sub(ico1total)\r\n    ) {\r\n      stageRemains = ico1cap.sub(ico1total).sub(ico1receivedTotal);\r\n      unsoldTokensRemains = unsoldTokensRemains.add(stageRemains);\r\n      ico1receivedTotal = ico1cap.sub(ico1total);\r\n    }\r\n    if (\r\n      ico2endTime > 0 && \r\n      now.sub(ico2endTime) > getUnsoldPeriod && \r\n      ico2receivedTotal < ico2cap.sub(ico1total)\r\n    ) {\r\n      stageRemains = ico2cap.sub(ico2total).sub(ico2receivedTotal);\r\n      unsoldTokensRemains = unsoldTokensRemains.add(stageRemains);\r\n      ico2receivedTotal = ico2cap.sub(ico2total);\r\n    }\r\n    if (\r\n      ico3endTime > 0 && \r\n      now.sub(ico3endTime) > getUnsoldPeriod && \r\n      ico3receivedTotal < ico3cap.sub(ico3total)\r\n    ) {\r\n      stageRemains = ico3cap.sub(ico3total).sub(ico3receivedTotal);\r\n      unsoldTokensRemains = unsoldTokensRemains.add(stageRemains);\r\n      ico3receivedTotal = ico3cap.sub(ico3total);\r\n    }\r\n\r\n    require(unsoldTokensRemains > 0);\r\n    require(token.transfer(owner, unsoldTokensRemains));\r\n\r\n    return true;\r\n  }\r\n\r\n  function getUnsold() public returns (bool) {\r\n    uint256 unsoldTokensShare = 0;\r\n    uint256 tokenBalance = token.balanceOf(msg.sender);\r\n    uint256 stageShare;\r\n    uint256 stageRemains;\r\n\r\n    if (\r\n      ico1endTime > 0 && \r\n      now.sub(ico1endTime) < getUnsoldPeriod && \r\n      ico1received[msg.sender] == 0 &&\r\n      tokenBalance >= ico1amount[msg.sender]\r\n    ) {\r\n      tokenBalance = tokenBalance.sub(ico1amount[msg.sender]);\r\n      stageRemains = ico1cap.sub(ico1total);\r\n      stageShare = stageRemains.mul(ico1amount[msg.sender]).div(ico1total);\r\n      unsoldTokensShare = unsoldTokensShare.add(stageShare);\r\n      ico1received[msg.sender] = stageShare;\r\n      ico1receivedTotal = ico1receivedTotal.add(stageShare);\r\n      require(ico1receivedTotal <= ico1cap.sub(ico1total));\r\n    }\r\n\r\n    if (\r\n      ico2endTime > 0 && \r\n      now.sub(ico2endTime) < getUnsoldPeriod && \r\n      ico2received[msg.sender] == 0 &&\r\n      tokenBalance >= ico2amount[msg.sender]\r\n    ) {\r\n      tokenBalance = tokenBalance.sub(ico2amount[msg.sender]);\r\n      stageRemains = ico2cap.sub(ico2total);\r\n      stageShare = stageRemains.mul(ico2amount[msg.sender]).div(ico2total);\r\n      unsoldTokensShare = unsoldTokensShare.add(stageShare);\r\n      ico2received[msg.sender] = stageShare;\r\n      ico2receivedTotal = ico2receivedTotal.add(stageShare);\r\n      require(ico2receivedTotal <= ico2cap.sub(ico2total));\r\n    }\r\n\r\n    if (\r\n      ico3endTime > 0 && \r\n      now.sub(ico3endTime) < getUnsoldPeriod && \r\n      ico3received[msg.sender] == 0 &&\r\n      tokenBalance >= ico3amount[msg.sender]\r\n    ) {\r\n      stageRemains = ico3cap.sub(ico3total);\r\n      stageShare = stageRemains.mul(ico3amount[msg.sender]).div(ico3total);\r\n      unsoldTokensShare = unsoldTokensShare.add(stageShare);\r\n      ico3received[msg.sender] = stageShare;\r\n      ico3receivedTotal = ico3receivedTotal.add(stageShare);\r\n      require(ico3receivedTotal <= ico3cap.sub(ico3total));\r\n    }\r\n\r\n    require(unsoldTokensShare > 0);\r\n    require(token.transfer(msg.sender, unsoldTokensShare));\r\n\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ico1total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoOver4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devTokensIco1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoOver1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico1receivedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endIco1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_over1\",\"type\":\"uint256\"},{\"name\":\"_bonus1\",\"type\":\"uint256\"},{\"name\":\"_over2\",\"type\":\"uint256\"},{\"name\":\"_bonus2\",\"type\":\"uint256\"},{\"name\":\"_over3\",\"type\":\"uint256\"},{\"name\":\"_bonus3\",\"type\":\"uint256\"},{\"name\":\"_over4\",\"type\":\"uint256\"},{\"name\":\"_bonus4\",\"type\":\"uint256\"},{\"name\":\"_over5\",\"type\":\"uint256\"},{\"name\":\"_bonus5\",\"type\":\"uint256\"}],\"name\":\"startIco1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoOver3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endIco3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endIco2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTokensPerPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVestingPeriodNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico3cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoBonus2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTeamToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devTokensIco3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getUnsold\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_over1\",\"type\":\"uint256\"},{\"name\":\"_bonus1\",\"type\":\"uint256\"},{\"name\":\"_over2\",\"type\":\"uint256\"},{\"name\":\"_bonus2\",\"type\":\"uint256\"},{\"name\":\"_over3\",\"type\":\"uint256\"},{\"name\":\"_bonus3\",\"type\":\"uint256\"},{\"name\":\"_over4\",\"type\":\"uint256\"},{\"name\":\"_bonus4\",\"type\":\"uint256\"},{\"name\":\"_over5\",\"type\":\"uint256\"},{\"name\":\"_bonus5\",\"type\":\"uint256\"}],\"name\":\"startIco2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoOver5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoBonus5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico2endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico1endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStageName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoBonus4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getStageAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico3endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico2cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUnsoldReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_over1\",\"type\":\"uint256\"},{\"name\":\"_bonus1\",\"type\":\"uint256\"},{\"name\":\"_over2\",\"type\":\"uint256\"},{\"name\":\"_bonus2\",\"type\":\"uint256\"},{\"name\":\"_over3\",\"type\":\"uint256\"},{\"name\":\"_bonus3\",\"type\":\"uint256\"},{\"name\":\"_over4\",\"type\":\"uint256\"},{\"name\":\"_bonus4\",\"type\":\"uint256\"},{\"name\":\"_over5\",\"type\":\"uint256\"},{\"name\":\"_bonus5\",\"type\":\"uint256\"}],\"name\":\"startIco3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico2receivedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devTokensIco2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico1cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoBonus3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTokensReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUnsoldPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoBonus1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoOver2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getUnsoldOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico3receivedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico3total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico2total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_a\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_b\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"basePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokenPriceDescription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"XDMCCrowdsale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008b906a2dcf3cbc4d3614bcfe9b921ad129c418b6000000000000000000000000f5728d9aba555e4b16e023db42bb8553794720e400000000000000000000000087f0e615ab8e7d5da906036b7efdd5af5ff6a9b7","Library":"","SwarmSource":"bzzr://2ae42fbe46c2dd86c3b0483244e1fde335e86888c6773b1532d71d028451e4ec"}]}