{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\n//////////////////////////////////////////////////////////\r\n//\r\n// Developer: ABCoin\r\n// Date: 2018-06-01\r\n// author: EricShu; Panyox\r\n//\r\n/////////////////////////////////////////////////////////\r\n\r\ncontract MainBet{\r\n\r\n    bytes30 constant public name = 'CrytoWorldCup';\r\n    uint constant public vision = 1.0;\r\n\r\n    uint constant internal NOWINNER = 0;\r\n    uint constant internal WIN = 1;\r\n    uint constant internal LOSE = 2;\r\n    uint constant internal TIE = 3;\r\n\r\n    uint private CLAIM_TAX = 20;\r\n\r\n    address public creatorAddress;\r\n\r\n    //player\r\n    struct Player {\r\n        address addr;\r\n        uint balance;\r\n        uint invested;\r\n        uint num;\r\n        uint prize;\r\n        uint claimed;\r\n    }\r\n\r\n    mapping(address => Player) public players;\r\n    address[] public ch_players;\r\n    address[][10] public st_players;\r\n    address[][100] public nm_players;\r\n\r\n    function getBalance() public constant returns(uint[]){\r\n        Player storage player = players[msg.sender];\r\n\r\n        uint[] memory data = new uint[](6);\r\n        data[0] = player.balance;\r\n        data[1] = player.invested;\r\n        data[2] = player.num;\r\n        data[3] = player.prize;\r\n        data[4] = player.claimed;\r\n\r\n        return data;\r\n    }\r\n\r\n    function claim() public returns(bool){\r\n\r\n        Player storage player = players[msg.sender];\r\n        require(player.balance>0);\r\n\r\n        uint fee = SafeMath.div(player.balance, CLAIM_TAX);\r\n        uint finalValue = SafeMath.sub(player.balance, fee);\r\n\r\n        msg.sender.transfer(finalValue);\r\n        creatorAddress.transfer(fee);\r\n\r\n        player.claimed = SafeMath.add(player.claimed, player.balance);\r\n        player.balance = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    function setClamTax(uint _tax) public onlyOwner returns(bool){\r\n        require(_tax>0);\r\n\r\n        CLAIM_TAX = _tax;\r\n        return true;\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        assert(msg.sender == creatorAddress);\r\n        _;\r\n    }\r\n    modifier beforeTime(uint time){\r\n        assert(now < time);\r\n        _;\r\n    }\r\n    modifier afterTime(uint time){\r\n        assert(now > time);\r\n        _;\r\n    }\r\n}\r\n\r\n//冠军赛\r\n//32\t沙特阿拉伯\r\n//31\t俄罗斯\r\n//30\t韩国\r\n//29\t日本\r\n//28\t巴拿马\r\n//27\t尼日利亚\r\n//26\t埃及\r\n//25\t摩洛哥\r\n//24\t澳大利亚\r\n//23\t塞尔维亚\r\n//22\t伊朗\r\n//21\t塞内加尔\r\n//20\t哥斯达黎加\r\n//19\t突尼斯\r\n//18\t瑞典\r\n//17\t冰岛\r\n//16\t墨西哥\r\n//15\t克罗地亚\r\n//14\t哥伦比亚\r\n//13\t丹麦\r\n//12\t秘鲁\r\n//11\t瑞士\r\n//10\t波兰\r\n//9\t比利时\r\n//8\t葡萄牙\r\n//7\t英格兰\r\n//6\t法国\r\n//5\t西班牙\r\n//4\t乌拉圭\r\n//3\t阿根廷\r\n//2\t德国\r\n//1\t巴西\r\ncontract Champion is MainBet{\r\n    uint public startTime = 0;\r\n    uint public endTime = 0;\r\n\r\n    uint private totalPrize;\r\n    uint private numberBets;\r\n    uint private winner;\r\n\r\n    bool private isInit = false;\r\n\r\n    struct Country{\r\n        uint totalNum;\r\n        uint totalInvest;\r\n    }\r\n\r\n    mapping (address => mapping (uint => uint)) private bets;\r\n    mapping (uint => Country) countrys;\r\n\r\n    uint private lucky = 0;\r\n\r\n    modifier beforeWinner {\r\n        assert(winner == NOWINNER);\r\n        _;\r\n    }\r\n    modifier beforeInit{\r\n        assert(isInit);\r\n        _;\r\n    }\r\n    function InitCountry(uint _startTime, uint _endTime) internal returns(bool res) {\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n\r\n        winner = 0;\r\n\r\n        totalPrize = 0;\r\n        numberBets = 0;\r\n        isInit = true;\r\n        return true;\r\n    }\r\n\r\n    function setChampion(uint _winner) public onlyOwner beforeWinner returns (bool){\r\n        require(_winner>0);\r\n\r\n        winner = _winner;\r\n\r\n        Country storage country = countrys[_winner];\r\n\r\n        for(uint i=0; i<ch_players.length; i++){\r\n            uint myInvest = bets[ch_players[i]][winner];\r\n            if(myInvest>0){\r\n                Player storage player = players[ch_players[i]];\r\n                uint winInest = SafeMath.mul(totalPrize, myInvest);\r\n                uint prize = SafeMath.div(winInest, country.totalInvest);\r\n                player.balance = SafeMath.add(player.balance, prize);\r\n                player.prize = SafeMath.add(player.prize, prize);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function getChampion() public constant returns (uint winnerTeam){\r\n        return winner;\r\n    }\r\n\r\n    function BetChampion(uint countryId) public beforeWinner afterTime(startTime) beforeTime(endTime) payable returns (bool)  {\r\n        require(msg.value>0);\r\n        require(countryId>0);\r\n\r\n        countrys[countryId].totalInvest = SafeMath.add(countrys[countryId].totalInvest, msg.value);\r\n        countrys[countryId].totalNum = SafeMath.add(countrys[countryId].totalNum, 1);\r\n\r\n        bets[msg.sender][countryId] = SafeMath.add(bets[msg.sender][countryId], msg.value);\r\n\r\n        totalPrize = SafeMath.add(totalPrize, msg.value);\r\n\r\n        numberBets++;\r\n\r\n        Player storage player = players[msg.sender];\r\n        if(player.invested>0){\r\n            player.invested = SafeMath.add(player.invested, msg.value);\r\n            player.num = SafeMath.add(player.num, 1);\r\n        }else{\r\n            players[msg.sender] = Player({\r\n                addr: msg.sender,\r\n                balance: 0,\r\n                invested: msg.value,\r\n                num: 1,\r\n                prize: 0,\r\n                claimed: 0\r\n            });\r\n        }\r\n\r\n        bool ext = false;\r\n        for(uint i=0; i<ch_players.length; i++){\r\n            if(ch_players[i] == msg.sender) {\r\n                ext = true;\r\n                break;\r\n            }\r\n        }\r\n        if(ext == false){\r\n            ch_players.push(msg.sender);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getCountryBet(uint countryId) public constant returns(uint[]){\r\n        require(countryId>0);\r\n\r\n        Country storage country = countrys[countryId];\r\n        uint[] memory data = new uint[](4);\r\n        data[0] = country.totalNum;\r\n        data[1] = country.totalInvest;\r\n        data[2] = winner;\r\n        if(isInit){\r\n            data[3] = 1;\r\n        }\r\n        return data;\r\n    }\r\n\r\n    function getDeepInfo(uint countryId) public constant returns(uint[]){\r\n        require(countryId>0);\r\n\r\n        Country storage country = countrys[countryId];\r\n        uint[] memory data = new uint[](10);\r\n        data[0] = country.totalNum;\r\n        data[1] = country.totalInvest;\r\n        data[2] = lucky;\r\n        data[3] = 0;\r\n        data[4] = 0;\r\n\r\n        if(winner>0){\r\n            data[4] = 1;\r\n        }\r\n        if(winner == countryId){\r\n\r\n            uint myInvest = bets[msg.sender][winner];\r\n            if(myInvest>0){\r\n                uint winInest = SafeMath.mul(totalPrize, myInvest);\r\n                uint prize = SafeMath.div(winInest, country.totalInvest);\r\n                data[2] = 1;\r\n                data[3] = prize;\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    function getMyBet(uint countryId) public constant returns (uint teamBet) {\r\n       return (bets[msg.sender][countryId]);\r\n    }\r\n\r\n    function getChStatus() public constant returns (uint []){\r\n        uint[] memory data = new uint[](3);\r\n        data[0] = totalPrize;\r\n        data[1] = numberBets;\r\n        data[2] = 0;\r\n        if(isInit){\r\n            data[2] = 1;\r\n            if(now > endTime){\r\n                data[2] = 2;\r\n            }\r\n            if(winner > 0){\r\n                data[2] = 3;\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    function getNumberOfBets() public constant returns (uint num){\r\n        return numberBets;\r\n    }\r\n\r\n    function () public payable {\r\n        throw;\r\n    }\r\n\r\n}\r\n\r\n//普通赛 胜-平-负\r\ncontract Normal is MainBet{\r\n\r\n    struct Better {\r\n        address addr;\r\n        uint invested;\r\n        uint teamBet; //bet win: 1,player1; 2,player2; 3,tie\r\n        uint claimPrize; // 0:false; 1:true\r\n    }\r\n\r\n    struct Match{\r\n        uint matchId;\r\n        uint startTime;\r\n        uint winner;\r\n        uint totalInvest;\r\n        uint totalNum;\r\n        mapping(address => mapping(uint => Better)) betters;\r\n    }\r\n\r\n    mapping(uint => Match) public matchs;\r\n    uint[] public match_pools;\r\n    uint public totalNum;\r\n    uint public totalInvest;\r\n\r\n    function initNormal() public returns(bool){\r\n        for(uint i=0;i<match_pools.length;i++){\r\n            match_pools[i] = 0;\r\n        }\r\n        totalNum = 0;\r\n        totalInvest = 0;\r\n        return true;\r\n    }\r\n\r\n    function addMatch(uint matchId, uint startTime) public onlyOwner returns(bool res){\r\n        require(matchId > 0);\r\n        require(now<startTime);\r\n\r\n        for(uint i=0;i<match_pools.length;i++){\r\n            require(matchId!=match_pools[i]);\r\n        }\r\n\r\n        Match memory _match = Match(matchId, startTime, 0, 0, 0);\r\n        matchs[matchId] = _match;\r\n        match_pools.push(matchId);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getMatchIndex(uint matchId) public constant returns(uint){\r\n        require(matchId>0);\r\n\r\n        uint index = 100;\r\n        for(uint i=0;i<match_pools.length;i++){\r\n            if(match_pools[i] == matchId){\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        // require(index < 100);\r\n        return index;\r\n    }\r\n\r\n    function betMatch(uint matchId, uint team) public payable returns(bool res){\r\n        require(matchId>0 && team>0);\r\n        require(team == WIN || team == LOSE || team == TIE);\r\n        require(msg.value>0);\r\n\r\n        Match storage _match = matchs[matchId];\r\n        require(_match.winner == NOWINNER);\r\n        require(now < _match.startTime);\r\n\r\n        Better storage better = _match.betters[msg.sender][team];\r\n        if(better.invested>0){\r\n            better.invested = SafeMath.add(better.invested, msg.value);\r\n        }else{\r\n            _match.betters[msg.sender][team] = Better(msg.sender, msg.value, team,0);\r\n        }\r\n\r\n        _match.totalNum = SafeMath.add(_match.totalNum, 1);\r\n        _match.totalInvest = SafeMath.add(_match.totalInvest, msg.value);\r\n        totalNum = SafeMath.add(totalNum, 1);\r\n        totalInvest = SafeMath.add(totalInvest, msg.value);\r\n\r\n        Player storage player = players[msg.sender];\r\n        if(player.invested>0){\r\n            player.invested = SafeMath.add(player.invested, msg.value);\r\n            player.num = SafeMath.add(player.num, 1);\r\n        }else{\r\n            players[msg.sender] = Player({\r\n                addr: msg.sender,\r\n                balance: 0,\r\n                invested: msg.value,\r\n                num: 1,\r\n                prize: 0,\r\n                claimed: 0\r\n            });\r\n        }\r\n        uint index = getMatchIndex(matchId);\r\n        address[] memory match_betters = nm_players[index];\r\n        bool ext = false;\r\n        for(uint i=0;i<match_betters.length;i++){\r\n            if(match_betters[i]==msg.sender){\r\n                ext = true;\r\n                break;\r\n            }\r\n        }\r\n        if(ext == false){\r\n            nm_players[index].push(msg.sender);\r\n        }\r\n        return true;\r\n    }\r\n    function getMatch(uint matchId) public constant returns(uint[]){\r\n        require(matchId>0);\r\n        Match storage _match = matchs[matchId];\r\n        uint[] memory data = new uint[](2);\r\n        data[0] = _match.totalNum;\r\n        data[1] = _match.totalInvest;\r\n        return data;\r\n    }\r\n    function getPool() public constant returns(uint[]){\r\n        uint[] memory data = new uint[](2);\r\n        data[0] = totalNum;\r\n        data[1] = totalInvest;\r\n    }\r\n    function setWinner(uint _matchId, uint team) public onlyOwner returns(bool){\r\n        require(_matchId>0);\r\n        require(team == WIN || team == LOSE || team == TIE);\r\n        Match storage _match = matchs[_matchId];\r\n        require(_match.winner == NOWINNER);\r\n\r\n        _match.winner = team;\r\n\r\n        uint index = getMatchIndex(_matchId);\r\n        address[] memory match_betters = nm_players[index];\r\n        uint teamInvest = getTeamInvest(_matchId, team);\r\n        for(uint i=0;i<match_betters.length;i++){\r\n            Better storage better = _match.betters[match_betters[i]][team];\r\n            if(better.invested>0){\r\n                uint winVal = SafeMath.mul(_match.totalInvest, better.invested);\r\n                uint prize = SafeMath.div(winVal, teamInvest);\r\n                Player storage player = players[match_betters[i]];\r\n                player.balance = SafeMath.add(player.balance, prize);\r\n                player.prize = SafeMath.add(player.prize, prize);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getTeamInvest(uint matchId, uint team) public constant returns(uint){\r\n        require(matchId>0);\r\n        require(team == WIN || team == LOSE || team == TIE);\r\n\r\n        Match storage _match = matchs[matchId];\r\n        uint index = getMatchIndex(matchId);\r\n        address[] storage match_betters = nm_players[index];\r\n        uint invest = 0;\r\n        for(uint i=0;i<match_betters.length;i++){\r\n            Better storage better = _match.betters[match_betters[i]][team];\r\n            invest = SafeMath.add(invest, better.invested);\r\n        }\r\n\r\n        return invest;\r\n    }\r\n\r\n    function getMyNmBet(uint matchId, uint team) public constant returns(uint[]){\r\n        require(matchId>0);\r\n        require(team>0);\r\n        Match storage _match = matchs[matchId];\r\n\r\n        uint[] memory data = new uint[](6);\r\n\r\n        data[0] = _match.totalInvest;\r\n        data[1] = _match.totalNum;\r\n        data[2] = 0;\r\n        data[3] = 0;\r\n        data[4] = 0;\r\n        if(_match.winner>0){\r\n            data[2] = 1;\r\n            if(_match.winner == team){\r\n                Better storage better = _match.betters[msg.sender][team];\r\n                uint teamInvest = getTeamInvest(matchId, team);\r\n                uint winVal = SafeMath.mul(_match.totalInvest, better.invested);\r\n                uint prize = SafeMath.div(winVal, teamInvest);\r\n                data[3] = 1;\r\n                data[4] = prize;\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    function () public payable {\r\n        throw;\r\n    }\r\n}\r\n\r\n//小组出线 4选2\r\ncontract Stage is MainBet{\r\n    event InitiateBet(address indexed _from, uint group_num);\r\n    event Bet(address indexed _from, uint[] teams, uint value, uint group_num, uint[] groupData, uint[] totalData);\r\n    event Winner(address indexed _from, uint group_num, uint[] _winner, uint _prize, uint winnerNum);\r\n    event Claim(address indexed _from, uint group_num, uint _value, uint taxValue);\r\n\r\n    struct StageBetter {\r\n        address addr;\r\n        uint money_invested;\r\n        uint bet_team1;\r\n        uint bet_team2;\r\n    }\r\n\r\n    struct Group {\r\n       uint group_num;\r\n       uint start_time;\r\n       uint end_time;\r\n       uint winner_team1;\r\n       uint winner_team2;\r\n       uint num_betters;\r\n       uint total_prize;\r\n       mapping (address => mapping (uint => StageBetter)) betters;\r\n       mapping (uint => uint) num_team_bets;\r\n    }\r\n\r\n    mapping (uint => Group) groups;\r\n    uint[] public group_pools;\r\n\r\n    function initStage() public onlyOwner returns(bool){\r\n\r\n        for(uint i = 0;i<group_pools.length; i++){\r\n            group_pools[i] = 0;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function addGroup(uint _group_num, uint _start_time, uint _end_time) public returns(bool) {\r\n        require(_group_num > 0);\r\n        require(now <= _start_time);\r\n        require(_start_time <= _end_time);\r\n\r\n        for(uint i = 0; i < group_pools.length; i++) {\r\n            require(_group_num != group_pools[i]);\r\n        }\r\n\r\n        Group memory group = Group(_group_num, _start_time, _end_time, 0, 0, 0, 0);\r\n        groups[_group_num] = group;\r\n        group_pools.push(_group_num);\r\n\r\n        InitiateBet(msg.sender, _group_num);\r\n        return true;\r\n    }\r\n\r\n    function betStage(uint _group_num, uint[] _bet_teams) public payable returns (bool) {\r\n\r\n        require(_group_num > 0);\r\n        require(msg.value > 0);\r\n        require(_bet_teams.length == 2);\r\n\r\n        Group storage group = groups[_group_num];\r\n        require(group.winner_team1 == 0 && group.winner_team2 == 0);\r\n\r\n        require(now <= group.start_time);\r\n\r\n        uint sumofsquares = SafeMath.sumofsquares(_bet_teams[0], _bet_teams[1]);\r\n\r\n        StageBetter storage better = group.betters[msg.sender][sumofsquares];\r\n        if(better.money_invested > 0) {\r\n            better.money_invested = SafeMath.add(better.money_invested, msg.value);\r\n        } else {\r\n            group.betters[msg.sender][_group_num] = StageBetter({\r\n                addr: msg.sender,\r\n                money_invested: msg.value,\r\n                bet_team1: _bet_teams[0],\r\n                bet_team2: _bet_teams[1]\r\n            });\r\n        }\r\n\r\n        group.total_prize = SafeMath.add(group.total_prize, msg.value);\r\n        group.num_betters = SafeMath.add(group.num_betters, 1);\r\n        group.num_team_bets[sumofsquares] = SafeMath.add(group.num_team_bets[sumofsquares], 1);\r\n\r\n        Player storage player = players[msg.sender];\r\n        if(player.invested>0){\r\n            player.invested = SafeMath.add(player.invested, msg.value);\r\n            player.num = SafeMath.add(player.num, 1);\r\n        }else{\r\n            players[msg.sender] = Player({\r\n                addr: msg.sender,\r\n                balance: 0,\r\n                invested: msg.value,\r\n                num: 1,\r\n                prize: 0,\r\n                claimed: 0\r\n            });\r\n        }\r\n        uint index = getGroupIndex(_group_num);\r\n        address[] memory group_betters = st_players[index];\r\n        bool ext = false;\r\n        for(uint i=0;i<group_betters.length;i++){\r\n            if(group_betters[i]==msg.sender){\r\n                ext = true;\r\n                break;\r\n            }\r\n        }\r\n        if(ext==false){\r\n            st_players[index].push(msg.sender);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setGroupWinner(uint _group_num, uint[] _winner_teams) public onlyOwner returns(bool) {\r\n\r\n        require(_group_num > 0);\r\n        require(_winner_teams.length == 2);\r\n\r\n        Group storage group = groups[_group_num];\r\n        require(group.winner_team1 == 0 && group.winner_team2 == 0);\r\n\r\n        group.winner_team1 = _winner_teams[0];\r\n        group.winner_team2 = _winner_teams[1];\r\n\r\n        uint sumofsquares = SafeMath.sumofsquares(group.winner_team1, group.winner_team2);\r\n\r\n        uint index = getGroupIndex(_group_num);\r\n        address[] memory group_betters = st_players[index];\r\n        uint teamInvest = getGroupTeamInvest(_group_num, sumofsquares);\r\n        for(uint i=0;i<group_betters.length;i++){\r\n            StageBetter storage better = group.betters[group_betters[i]][_group_num];\r\n            if(better.money_invested > 0){\r\n                uint aux = SafeMath.mul(group.total_prize, better.money_invested);\r\n                uint prize = SafeMath.div(aux, teamInvest);\r\n\r\n                Player storage player = players[group_betters[i]];\r\n                player.balance = SafeMath.add(player.balance, prize);\r\n                player.prize = SafeMath.add(player.prize, prize);\r\n            }\r\n        }\r\n\r\n        // Winner(msg.sender, _group_num, _winner_teams, prize, winnerNum);\r\n        return true;\r\n    }\r\n\r\n    function updateEndTimeManually(uint _group_num, uint _end_time) public onlyOwner returns (bool){\r\n        Group storage group = groups[_group_num];\r\n        require(group.winner_team1 == 0 && group.winner_team2 == 0);\r\n\r\n        group.end_time = _end_time;\r\n        return true;\r\n    }\r\n\r\n    function updateStartTimeManually(uint _group_num, uint _start_time) public onlyOwner returns (bool){\r\n        Group storage group = groups[_group_num];\r\n        require(group.winner_team1 == 0 && group.winner_team2 == 0);\r\n\r\n        group.start_time = _start_time;\r\n        return true;\r\n    }\r\n\r\n    function getWinnerTeam(uint _group_num) public constant returns (uint[]){\r\n        require(_group_num > 0);\r\n\r\n        uint[] memory data = new uint[](2);\r\n        Group storage group = groups[_group_num];\r\n        require(group.winner_team1 > 0 && group.winner_team2 > 0);\r\n\r\n        data[0] = group.winner_team1;\r\n        data[1] = group.winner_team2;\r\n\r\n        return data;\r\n    }\r\n\r\n    function getGroupTeamInvest(uint _group_num, uint squares) public constant returns(uint){\r\n        require(_group_num>0);\r\n\r\n        uint index = getGroupIndex(_group_num);\r\n        address[] storage group_betters = st_players[index];\r\n        Group storage group = groups[_group_num];\r\n        uint sumofsquares = SafeMath.sumofsquares(group.winner_team1, group.winner_team2);\r\n\r\n        uint invest = 0;\r\n        for(uint i=0;i<group_betters.length;i++){\r\n            StageBetter storage better = group.betters[group_betters[i]][_group_num];\r\n            if(sumofsquares == squares){\r\n                invest = SafeMath.add(invest, better.money_invested);\r\n            }\r\n\r\n        }\r\n        return invest;\r\n    }\r\n\r\n    function getGroupStatistic(uint _group_num) public constant returns (uint[]){\r\n        require(_group_num > 0);\r\n\r\n        uint[] memory data = new uint[](5);\r\n        Group storage group = groups[_group_num];\r\n\r\n        data[0] = group.total_prize;\r\n        data[1] = group.num_betters;\r\n        return data;\r\n    }\r\n\r\n    function getMyStageBet(uint _group_num, uint team1, uint team2) public constant returns(uint[]){\r\n        require(_group_num>0);\r\n        require(team1>0);\r\n        require(team2>0);\r\n\r\n        Group storage group = groups[_group_num];\r\n        uint sumofsquares = SafeMath.sumofsquares(team1, team2);\r\n        uint sumofsquares1 = SafeMath.sumofsquares(group.winner_team1, group.winner_team2);\r\n\r\n        uint[] memory data = new uint[](6);\r\n        data[0] = group.total_prize;\r\n        data[1] = group.num_betters;\r\n        data[2] = 0;\r\n        data[3] = 0;\r\n        data[4] = 0;\r\n        if(sumofsquares1>0){\r\n            data[2] = 1;\r\n        }\r\n        if(sumofsquares == sumofsquares1){\r\n            data[3] = 1;\r\n            StageBetter storage better = group.betters[msg.sender][_group_num];\r\n            uint teamInvest = getGroupTeamInvest(_group_num, sumofsquares);\r\n            uint aux = SafeMath.mul(group.total_prize, better.money_invested);\r\n            uint prize = SafeMath.div(aux, teamInvest);\r\n            data[4] = prize;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    function getGroupIndex(uint group_id) public constant returns(uint){\r\n        require(group_id>0);\r\n\r\n        uint index = 10;\r\n        for(uint i=0;i<group_pools.length;i++){\r\n            if(group_pools[i] == group_id){\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        // require(index<10);\r\n        return index;\r\n    }\r\n\r\n    function getNumberOfBets(uint _group_num) public constant returns (uint num_betters){\r\n        require(_group_num > 0);\r\n\r\n        Group storage group = groups[_group_num];\r\n        return group.num_betters;\r\n    }\r\n\r\n    function getAllGameStatistic() public constant returns (uint[]){\r\n        uint[] memory data = new uint[](2);\r\n        uint allTotalPrize = 0;\r\n        uint allNumberOfBets = 0;\r\n\r\n        for(uint i = 0; i < group_pools.length; i++) {\r\n            uint group_num = group_pools[i];\r\n            Group storage group = groups[group_num];\r\n            allTotalPrize = SafeMath.add(group.total_prize, allTotalPrize);\r\n            allNumberOfBets = SafeMath.add(group.num_betters, allNumberOfBets);\r\n        }\r\n\r\n        data[0] = allTotalPrize;\r\n        data[1] = allNumberOfBets;\r\n        return data;\r\n    }\r\n\r\n    function getAllTotalPrize() public constant returns (uint){\r\n        uint allTotalPrize = 0;\r\n        for(uint i = 0; i < group_pools.length; i++) {\r\n            uint group_num = group_pools[i];\r\n            Group storage group = groups[group_num];\r\n            allTotalPrize = SafeMath.add(group.total_prize, allTotalPrize);\r\n        }\r\n        return allTotalPrize;\r\n    }\r\n\r\n    function getAllNumberOfBets() public constant returns (uint){\r\n        uint allNumberOfBets = 0;\r\n        for(uint i = 0; i < group_pools.length; i++) {\r\n            uint group_num = group_pools[i];\r\n            Group storage group = groups[group_num];\r\n            allNumberOfBets = SafeMath.add(group.num_betters, allNumberOfBets);\r\n        }\r\n\r\n        return allNumberOfBets;\r\n    }\r\n\r\n\r\n    function () public payable {\r\n        throw;\r\n    }\r\n}\r\n\r\ncontract CrytoWorldCup is Champion, Normal, Stage{\r\n\r\n    function CrytoWorldCup() public {\r\n        creatorAddress = msg.sender;\r\n    }\r\n\r\n    //初始化冠军赛\r\n    function initCountry(uint startTime, uint endTime) public onlyOwner returns(bool){\r\n        //\r\n        InitCountry(startTime, endTime);\r\n        return true;\r\n    }\r\n\r\n    // gets called when no other function matches\r\n    function() public payable{\r\n        // just being sent some cash?\r\n        throw;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    function sumofsquares(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * a + b * b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getAllNumberOfBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_winner\",\"type\":\"uint256\"}],\"name\":\"setChampion\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes30\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"countryId\",\"type\":\"uint256\"}],\"name\":\"BetChampion\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChampion\",\"outputs\":[{\"name\":\"winnerTeam\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matchs\",\"outputs\":[{\"name\":\"matchId\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"uint256\"},{\"name\":\"totalInvest\",\"type\":\"uint256\"},{\"name\":\"totalNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"group_pools\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"matchId\",\"type\":\"uint256\"},{\"name\":\"team\",\"type\":\"uint256\"}],\"name\":\"betMatch\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"matchId\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"addMatch\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"matchId\",\"type\":\"uint256\"}],\"name\":\"getMatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nm_players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group_id\",\"type\":\"uint256\"}],\"name\":\"getGroupIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"countryId\",\"type\":\"uint256\"}],\"name\":\"getMyBet\",\"outputs\":[{\"name\":\"teamBet\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_group_num\",\"type\":\"uint256\"},{\"name\":\"_start_time\",\"type\":\"uint256\"}],\"name\":\"updateStartTimeManually\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initNormal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"countryId\",\"type\":\"uint256\"}],\"name\":\"getCountryBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"st_players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"matchId\",\"type\":\"uint256\"},{\"name\":\"team\",\"type\":\"uint256\"}],\"name\":\"getMyNmBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"matchId\",\"type\":\"uint256\"},{\"name\":\"team\",\"type\":\"uint256\"}],\"name\":\"getTeamInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matchId\",\"type\":\"uint256\"},{\"name\":\"team\",\"type\":\"uint256\"}],\"name\":\"setWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_group_num\",\"type\":\"uint256\"},{\"name\":\"squares\",\"type\":\"uint256\"}],\"name\":\"getGroupTeamInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_group_num\",\"type\":\"uint256\"},{\"name\":\"team1\",\"type\":\"uint256\"},{\"name\":\"team2\",\"type\":\"uint256\"}],\"name\":\"getMyStageBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"setClamTax\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_group_num\",\"type\":\"uint256\"},{\"name\":\"_end_time\",\"type\":\"uint256\"}],\"name\":\"updateEndTimeManually\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_group_num\",\"type\":\"uint256\"},{\"name\":\"_winner_teams\",\"type\":\"uint256[]\"}],\"name\":\"setGroupWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_group_num\",\"type\":\"uint256\"}],\"name\":\"getNumberOfBets\",\"outputs\":[{\"name\":\"num_betters\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_group_num\",\"type\":\"uint256\"}],\"name\":\"getGroupStatistic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"initCountry\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_group_num\",\"type\":\"uint256\"},{\"name\":\"_start_time\",\"type\":\"uint256\"},{\"name\":\"_end_time\",\"type\":\"uint256\"}],\"name\":\"addGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllGameStatistic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllTotalPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"countryId\",\"type\":\"uint256\"}],\"name\":\"getDeepInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"match_pools\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"prize\",\"type\":\"uint256\"},{\"name\":\"claimed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_group_num\",\"type\":\"uint256\"},{\"name\":\"_bet_teams\",\"type\":\"uint256[]\"}],\"name\":\"betStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ch_players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfBets\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"matchId\",\"type\":\"uint256\"}],\"name\":\"getMatchIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_group_num\",\"type\":\"uint256\"}],\"name\":\"getWinnerTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group_num\",\"type\":\"uint256\"}],\"name\":\"InitiateBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"teams\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"group_num\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"groupData\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"totalData\",\"type\":\"uint256[]\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group_num\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winner\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"_prize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerNum\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group_num\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"taxValue\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"}]","ContractName":"CrytoWorldCup","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7805739a0b0750cc85d7abd80a156d2c291d0cead3e8ad69211230c1049703ac"}]}