{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract SafeBoxCoin is ERC20 {\r\n    using SafeMath for uint;\r\n       \r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n    uint256 internal _totalSupply;\r\n\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function SafeBoxCoin() public {\r\n        _symbol = \"SBC\";\r\n        _name = \"SafeBoxCoin\";\r\n        _decimals = 18;\r\n        _totalSupply = 252000000;\r\n        balances[msg.sender] = _totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool) {\r\n      require(_to != address(0));\r\n      require(_value <= balances[msg.sender]);\r\n      balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\r\n      balances[_to] = SafeMath.add(balances[_to], _value);\r\n      emit Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = SafeMath.sub(balances[_from], _value);\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n        allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n        allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract SafeBox is SafeBoxCoin {\r\n    \r\n    mapping (address => user) private users;\r\n    user private user_object;\r\n    address private owner;\r\n    address private account_1;\r\n    address private account_2;\r\n    uint256 private divided_value;\r\n    Safe safe_object;\r\n    mapping (address =>  mapping (string => Safe)) private map_data_safe_benefited;\r\n    Prices public prices;\r\n    \r\n    struct Prices {\r\n        uint256 create;\r\n        uint256 edit;\r\n        uint256 active_contract;\r\n    }\r\n\r\n\r\n    function SafeBox() public {\r\n        owner = msg.sender;\r\n        account_1 = 0x8Fc18dc65E432CaA9583F7024CC7B40ed99fd8e4;\r\n        account_2 = 0x51cbdb8CE8dE444D0cBC0a2a64066A852e14ff51;\r\n        prices.create = 1000;\r\n        prices.edit = 1000;\r\n        prices.active_contract = 7500;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function set_prices(uint256 _create, uint256 _edit, uint256 _active_contract) public onlyOwner returns (bool success){\r\n        prices.create = _create;\r\n        prices.edit = _edit;\r\n        prices.active_contract = _active_contract;\r\n        return true;\r\n    }\r\n\r\n\r\n    function _transfer(uint256 _value) private returns (bool) {\r\n      require(owner != address(0));\r\n      require(_value <= SafeBoxCoin.balances[msg.sender]);\r\n      SafeBoxCoin.balances[msg.sender] = SafeMath.sub(SafeBoxCoin.balances[msg.sender], _value);\r\n      divided_value = _value / 2;\r\n      SafeBoxCoin.balances[owner] = SafeMath.add(SafeBoxCoin.balances[owner], divided_value);\r\n      SafeBoxCoin.balances[account_1] = SafeMath.add(SafeBoxCoin.balances[account_1], divided_value / 2);\r\n      SafeBoxCoin.balances[account_2] = SafeMath.add(SafeBoxCoin.balances[account_2], divided_value / 2);\r\n      emit Transfer(msg.sender, owner, _value);\r\n      return true;\r\n    }\r\n\r\n    function set_status_user(address _address, bool _active_contract) public onlyOwner returns (bool success) {\r\n        users[_address].active_contract = _active_contract;\r\n        return true;\r\n    }\r\n\r\n    function set_active_contract() public returns (bool success) {\r\n        require(_transfer(prices.active_contract));\r\n        users[msg.sender].active_contract = true;\r\n        return true;\r\n    }\r\n\r\n    function get_status_user(address _address) public view returns (\r\n            bool _user_exists, bool _active_contract){\r\n        _active_contract = users[_address].active_contract;\r\n        _user_exists = users[_address].exists;\r\n        return (_active_contract, _user_exists);\r\n    }\r\n\r\n    struct user {\r\n        bool exists;\r\n        address endereco;\r\n        bool active_contract;\r\n    }\r\n\r\n    function _create_user(address _address) private {\r\n        user_object = user(true, _address, true);\r\n        users[_address] = user_object;\r\n    }\r\n    \r\n    struct Safe {\r\n        address safe_owner_address;\r\n        bool exists;\r\n        string safe_name;\r\n        address benefited_address;\r\n        string data;\r\n    }\r\n\r\n\r\n    function create_safe(address _benef, string _data, string _safe_name) public returns (bool success) {\r\n        require(map_data_safe_benefited[_benef][_safe_name].exists == false);\r\n        require(_transfer(prices.create));\r\n        if(users[msg.sender].exists == false){\r\n            _create_user(msg.sender);\r\n        }\r\n        safe_object = Safe(msg.sender, true, _safe_name, _benef, _data);\r\n        map_data_safe_benefited[_benef][_safe_name] = safe_object;\r\n        return true;\r\n    }\r\n\r\n    function edit_safe(address _benef, string _new_data,\r\n            string _safe_name) public returns (bool success) {\r\n        require(map_data_safe_benefited[_benef][_safe_name].exists == true);\r\n        require(users[msg.sender].exists == true);\r\n        require(_transfer(prices.edit));\r\n        map_data_safe_benefited[_benef][_safe_name].data = _new_data;\r\n        return true;\r\n    }\r\n\r\n    function get_data_benefited(address _benef,\r\n            string _safe_name) public view returns (string) {\r\n        require(map_data_safe_benefited[_benef][_safe_name].exists == true);\r\n        address _safe_owner_address = map_data_safe_benefited[_benef][_safe_name].safe_owner_address;\r\n        require(users[_safe_owner_address].active_contract == true);\r\n        return map_data_safe_benefited[_benef][_safe_name].data;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"set_active_contract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_benef\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"string\"},{\"name\":\"_safe_name\",\"type\":\"string\"}],\"name\":\"create_safe\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_create\",\"type\":\"uint256\"},{\"name\":\"_edit\",\"type\":\"uint256\"},{\"name\":\"_active_contract\",\"type\":\"uint256\"}],\"name\":\"set_prices\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_benef\",\"type\":\"address\"},{\"name\":\"_new_data\",\"type\":\"string\"},{\"name\":\"_safe_name\",\"type\":\"string\"}],\"name\":\"edit_safe\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"get_status_user\",\"outputs\":[{\"name\":\"_user_exists\",\"type\":\"bool\"},{\"name\":\"_active_contract\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prices\",\"outputs\":[{\"name\":\"create\",\"type\":\"uint256\"},{\"name\":\"edit\",\"type\":\"uint256\"},{\"name\":\"active_contract\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_active_contract\",\"type\":\"bool\"}],\"name\":\"set_status_user\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_benef\",\"type\":\"address\"},{\"name\":\"_safe_name\",\"type\":\"string\"}],\"name\":\"get_data_benefited\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SafeBox","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a00f972045e43781fbc611acc3e3e9b49cfee02cfe879adcf2e41499241825d0"}]}