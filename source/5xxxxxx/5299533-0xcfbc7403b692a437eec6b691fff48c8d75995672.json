{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\nlibrary SafeMath {\r\n\r\n/**\r\n* @dev Multiplies two numbers, throws on overflow.\r\n*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nassert(c / a == b);\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Integer division of two numbers, truncating the quotient.\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\nuint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\n/**\r\n* @dev Adds two numbers, throws on overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nassert(c >= a);\r\nreturn c;\r\n}\r\n}\r\ncontract GGG {\r\n// Public variables of the token\r\n\r\nusing SafeMath for uint256;\r\n\r\nmapping (address => bool) private admins;\r\nstring public name;\r\nstring public symbol;\r\nuint8 public decimals = 18;\r\nuint256 public remainRewards;\r\naddress public distributeA;\r\n// 18 decimals is the strongly suggested default, avoid changing it\r\nuint256 public totalSupply;\r\n\r\naddress contractCreator;\r\n// This creates an array with all balances\r\nmapping (address => uint256) public balanceOf;\r\nmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n// This generates a public event on the blockchain that will notify clients\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n// This notifies clients about the amount burnt\r\nevent Burn(address indexed from, uint256 value);\r\n\r\n/**\r\n* Constructor function\r\n*\r\n* Initializes contract with initial supply tokens to the creator of the contract\r\n*/\r\nfunction GGG() public {\r\ntotalSupply = 100000000000 * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\nbalanceOf[msg.sender] = totalSupply.div(4);                // Give the creator all initial tokens\r\nremainRewards = totalSupply - balanceOf[msg.sender];\r\nname = \"Goyougame\";                                   // Set the name for display purposes\r\nsymbol = \"GGG\";                               // Set the symbol for display purposes\r\n\r\ncontractCreator = msg.sender;\r\nadmins[contractCreator] = true;\r\n}\r\n\r\n//modifiers\r\nmodifier onlyContractCreator() {\r\nrequire (msg.sender == contractCreator);\r\n_;\r\n}\r\nmodifier onlyAdmins() {\r\nrequire(admins[msg.sender]);\r\n_;\r\n}\r\n\r\n//Owners and admins\r\n\r\n/* Owner */\r\nfunction setOwner (address _owner) onlyContractCreator() public {\r\ncontractCreator = _owner;\r\n}\r\n\r\nfunction addAdmin (address _admin) onlyContractCreator() public {\r\nadmins[_admin] = true;\r\n}\r\n\r\nfunction removeAdmin (address _admin) onlyContractCreator() public {\r\ndelete admins[_admin];\r\n}\r\n\r\nfunction getDsitribute(address _who, uint _amount) public onlyAdmins{\r\n\r\nremainRewards = remainRewards - _amount;\r\nbalanceOf[_who] =  balanceOf[_who] + _amount;\r\nTransfer(distributeA, _who, _amount * 10 ** uint256(decimals));\r\n\r\n\r\n}\r\n\r\nfunction getDsitributeMulti(address[] _who, uint[] _amount) public onlyAdmins{\r\nrequire(_who.length == _amount.length);\r\nfor(uint i=0; i <= _who.length; i++){\r\nremainRewards = remainRewards - _amount[i];\r\nbalanceOf[_who[i]] =  balanceOf[_who[i]] + _amount[i];\r\nTransfer(distributeA, _who[i], _amount[i] * 10 ** uint256(decimals));\r\n\r\n}\r\n}\r\n/**\r\n* Internal transfer, only can be called by this contract\r\n*/\r\nfunction _transfer(address _from, address _to, uint _value) internal {\r\n// Prevent transfer to 0x0 address. Use burn() instead\r\nrequire(_to != 0x0);\r\n// Check if the sender has enough\r\nrequire(balanceOf[_from] >= _value);\r\n// Check for overflows\r\nrequire(balanceOf[_to] + _value > balanceOf[_to]);\r\n// Save this for an assertion in the future\r\nuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n// Subtract from the sender\r\nbalanceOf[_from] -= _value;\r\n// Add the same to the recipient\r\nbalanceOf[_to] += _value;\r\nTransfer(_from, _to, _value);\r\n// Asserts are used to use static analysis to find bugs in your code. They should never fail\r\nassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n}\r\n\r\n/**\r\n* Transfer tokens\r\n*\r\n* Send `_value` tokens to `_to` from your account\r\n*\r\n* @param _to The address of the recipient\r\n* @param _value the amount to send\r\n*/\r\nfunction transfer(address _to, uint256 _value) public {\r\n_transfer(msg.sender, _to, _value);\r\n}\r\n\r\nfunction setaddress(address _dis) public onlyAdmins{\r\ndistributeA = _dis;\r\n\r\n}\r\n/**\r\n* Transfer tokens from other address\r\n*\r\n* Send `_value` tokens to `_to` on behalf of `_from`\r\n*\r\n* @param _from The address of the sender\r\n* @param _to The address of the recipient\r\n* @param _value the amount to send\r\n*/\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\nrequire(_value <= allowance[_from][msg.sender]);     // Check allowance\r\nallowance[_from][msg.sender] -= _value;\r\n_transfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* Set allowance for other address\r\n*\r\n* Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n*\r\n* @param _spender The address authorized to spend\r\n* @param _value the max amount they can spend\r\n*/\r\nfunction approve(address _spender, uint256 _value) public\r\nreturns (bool success) {\r\nallowance[msg.sender][_spender] = _value;\r\nreturn true;\r\n}\r\n\r\n/**\r\n* Set allowance for other address and notify\r\n*\r\n* Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n*\r\n* @param _spender The address authorized to spend\r\n* @param _value the max amount they can spend\r\n* @param _extraData some extra information to send to the approved contract\r\n*/\r\nfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\npublic\r\nreturns (bool success) {\r\ntokenRecipient spender = tokenRecipient(_spender);\r\nif (approve(_spender, _value)) {\r\nspender.receiveApproval(msg.sender, _value, this, _extraData);\r\nreturn true;\r\n}\r\n}\r\n\r\n/**\r\n* Destroy tokens\r\n*\r\n* Remove `_value` tokens from the system irreversibly\r\n*\r\n* @param _value the amount of money to burn\r\n*/\r\nfunction burn(uint256 _value) public returns (bool success) {\r\nrequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\nbalanceOf[msg.sender] -= _value;            // Subtract from the sender\r\ntotalSupply -= _value;                      // Updates totalSupply\r\nBurn(msg.sender, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* Destroy tokens from other account\r\n*\r\n* Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n*\r\n* @param _from the address of the sender\r\n* @param _value the amount of money to burn\r\n*/\r\nfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\r\nrequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\nrequire(_value <= allowance[_from][msg.sender]);    // Check allowance\r\nbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\nallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\ntotalSupply -= _value;                              // Update totalSupply\r\nBurn(_from, _value);\r\nreturn true;\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dis\",\"type\":\"address\"}],\"name\":\"setaddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributeA\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getDsitribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"getDsitributeMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"GGG","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2e8b667dc9653dfbc427ded4bfa7aad6307aa8d9f83eb06f5512e5c6e5d853db"}]}