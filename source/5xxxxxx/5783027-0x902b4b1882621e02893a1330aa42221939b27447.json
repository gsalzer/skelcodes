{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// File: contracts/Oracle/DSAuth.sol\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    function DSAuth() public {\r\n        owner = msg.sender;\r\n        LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Oracle/DSMath.sol\r\n\r\ncontract DSMath {\r\n    \r\n    /*\r\n    standard uint256 functions\r\n     */\r\n\r\n    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x * y) >= x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    /*\r\n    uint128 functions (h is for half)\r\n     */\r\n\r\n\r\n    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        assert((z = x * y) >= x);\r\n    }\r\n\r\n    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n\r\n    /*\r\n    int256 functions\r\n     */\r\n\r\n    function imin(int256 x, int256 y) constant internal returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int256 x, int256 y) constant internal returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    /*\r\n    WAD math\r\n     */\r\n\r\n    uint128 constant WAD = 10 ** 18;\r\n\r\n    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hadd(x, y);\r\n    }\r\n\r\n    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hsub(x, y);\r\n    }\r\n\r\n    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * y + WAD / 2) / WAD);\r\n    }\r\n\r\n    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * WAD + y / 2) / y);\r\n    }\r\n\r\n    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmin(x, y);\r\n    }\r\n    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmax(x, y);\r\n    }\r\n\r\n    /*\r\n    RAY math\r\n     */\r\n\r\n    uint128 constant RAY = 10 ** 27;\r\n\r\n    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hadd(x, y);\r\n    }\r\n\r\n    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hsub(x, y);\r\n    }\r\n\r\n    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * y + RAY / 2) / RAY);\r\n    }\r\n\r\n    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * RAY + y / 2) / y);\r\n    }\r\n\r\n    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\r\n        // This famous algorithm is called \"exponentiation by squaring\"\r\n        // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n        //\r\n        // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n        //\r\n        // These facts are why it works:\r\n        //\r\n        //  If n is even, then x^n = (x^2)^(n/2).\r\n        //  If n is odd,  then x^n = x * x^(n-1),\r\n        //   and applying the equation for even x gives\r\n        //    x^n = x * (x^2)^((n-1) / 2).\r\n        //\r\n        //  Also, EVM division is flooring and\r\n        //    floor[(n-1) / 2] = floor[n / 2].\r\n\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n\r\n    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmin(x, y);\r\n    }\r\n    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmax(x, y);\r\n    }\r\n\r\n    function cast(uint256 x) constant internal returns (uint128 z) {\r\n        assert((z = uint128(x)) == x);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Oracle/DSNote.sol\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n        uint              wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/Oracle/DSThing.sol\r\n\r\ncontract DSThing is DSAuth, DSNote, DSMath {\r\n}\r\n\r\n// File: contracts/Oracle/DSValue.sol\r\n\r\ncontract DSValue is DSThing {\r\n    bool    has;\r\n    bytes32 val;\r\n    function peek() constant returns (bytes32, bool) {\r\n        return (val,has);\r\n    }\r\n    function read() constant returns (bytes32) {\r\n        var (wut, has) = peek();\r\n        assert(has);\r\n        return wut;\r\n    }\r\n    function poke(bytes32 wut) note auth {\r\n        val = wut;\r\n        has = true;\r\n    }\r\n    function void() note auth { // unset the value\r\n        has = false;\r\n    }\r\n}\r\n\r\n// File: contracts/Oracle/Medianizer.sol\r\n\r\ncontract Medianizer is DSValue {\r\n    mapping (bytes12 => address) public values;\r\n    mapping (address => bytes12) public indexes;\r\n    bytes12 public next = 0x1;\r\n\r\n    uint96 public min = 0x1;\r\n\r\n    function set(address wat) auth {\r\n        bytes12 nextId = bytes12(uint96(next) + 1);\r\n        assert(nextId != 0x0);\r\n        set(next, wat);\r\n        next = nextId;\r\n    }\r\n\r\n    function set(bytes12 pos, address wat) note auth {\r\n        if (pos == 0x0) throw;\r\n\r\n        if (wat != 0 && indexes[wat] != 0) throw;\r\n\r\n        indexes[values[pos]] = 0; // Making sure to remove a possible existing address in that position\r\n\r\n        if (wat != 0) {\r\n            indexes[wat] = pos;\r\n        }\r\n\r\n        values[pos] = wat;\r\n    }\r\n\r\n    function setMin(uint96 min_) note auth {\r\n        if (min_ == 0x0) throw;\r\n        min = min_;\r\n    }\r\n\r\n    function setNext(bytes12 next_) note auth {\r\n        if (next_ == 0x0) throw;\r\n        next = next_;\r\n    }\r\n\r\n    function unset(bytes12 pos) {\r\n        set(pos, 0);\r\n    }\r\n\r\n    function unset(address wat) {\r\n        set(indexes[wat], 0);\r\n    }\r\n\r\n    function poke() {\r\n        poke(0);\r\n    }\r\n\r\n    function poke(bytes32) note {\r\n        (val, has) = compute();\r\n    }\r\n\r\n    function compute() constant returns (bytes32, bool) {\r\n        bytes32[] memory wuts = new bytes32[](uint96(next) - 1);\r\n        uint96 ctr = 0;\r\n        for (uint96 i = 1; i < uint96(next); i++) {\r\n            if (values[bytes12(i)] != 0) {\r\n                var (wut, wuz) = DSValue(values[bytes12(i)]).peek();\r\n                if (wuz) {\r\n                    if (ctr == 0 || wut >= wuts[ctr - 1]) {\r\n                        wuts[ctr] = wut;\r\n                    } else {\r\n                        uint96 j = 0;\r\n                        while (wut >= wuts[j]) {\r\n                            j++;\r\n                        }\r\n                        for (uint96 k = ctr; k > j; k--) {\r\n                            wuts[k] = wuts[k - 1];\r\n                        }\r\n                        wuts[j] = wut;\r\n                    }\r\n                    ctr++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (ctr < min) return (val, false);\r\n\r\n        bytes32 value;\r\n        if (ctr % 2 == 0) {\r\n            uint128 val1 = uint128(wuts[(ctr / 2) - 1]);\r\n            uint128 val2 = uint128(wuts[ctr / 2]);\r\n            value = bytes32(wdiv(hadd(val1, val2), 2 ether));\r\n        } else {\r\n            value = wuts[(ctr - 1) / 2];\r\n        }\r\n\r\n        return (value, true);\r\n    }\r\n}\r\n\r\n// File: contracts/Oracle/PriceFeed.sol\r\n\r\n/// price-feed.sol\r\n\r\n// Copyright (C) 2017  DappHub, LLC\r\n\r\n// Licensed under the Apache License, Version 2.0 (the \"License\").\r\n// You may not use this file except in compliance with the License.\r\n\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\r\n\r\n\r\n\r\ncontract PriceFeed is DSThing {\r\n\r\n    uint128 val;\r\n    uint32 public zzz;\r\n\r\n    function peek() public view\r\n        returns (bytes32, bool)\r\n    {\r\n        return (bytes32(val), now < zzz);\r\n    }\r\n\r\n    function read() public view\r\n        returns (bytes32)\r\n    {\r\n        assert(now < zzz);\r\n        return bytes32(val);\r\n    }\r\n\r\n    function post(uint128 val_, uint32 zzz_, address med_) public note auth\r\n    {\r\n        val = val_;\r\n        zzz = zzz_;\r\n        bool ret = med_.call(bytes4(keccak256(\"poke()\")));\r\n        ret;\r\n    }\r\n\r\n    function void() public note auth\r\n    {\r\n        zzz = 0;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Oracle/PriceOracleInterface.sol\r\n\r\n/*\r\nThis contract is the interface between the MakerDAO priceFeed and our DX platform.\r\n*/\r\n\r\n\r\n\r\ncontract PriceOracleInterface {\r\n\r\n    address public priceFeedSource;\r\n    address public owner;\r\n    bool public emergencyMode;\r\n\r\n    event NonValidPriceFeed(address priceFeedSource);\r\n\r\n    // Modifiers\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev constructor of the contract\r\n    /// @param _priceFeedSource address of price Feed Source -> should be maker feeds Medianizer contract\r\n    function PriceOracleInterface(\r\n        address _owner,\r\n        address _priceFeedSource\r\n    )\r\n        public\r\n    {\r\n        owner = _owner;\r\n        priceFeedSource = _priceFeedSource;\r\n    }\r\n    /// @dev gives the owner the possibility to put the Interface into an emergencyMode, which will \r\n    /// output always a price of 600 USD. This gives everyone time to set up a new pricefeed.\r\n    function raiseEmergency(bool _emergencyMode)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        emergencyMode = _emergencyMode;\r\n    }\r\n\r\n    /// @dev updates the priceFeedSource\r\n    /// @param _owner address of owner\r\n    function updateCurator(\r\n        address _owner\r\n    )\r\n        public\r\n        onlyOwner()\r\n    {\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @dev returns the USDETH price, ie gets the USD price from Maker feed with 18 digits, but last 18 digits are cut off\r\n    function getUSDETHPrice() \r\n        public\r\n        returns (uint256)\r\n    {\r\n        // if the contract is in the emergencyMode, because there is an issue with the oracle, we will simply return a price of 600 USD\r\n        if(emergencyMode){\r\n            return 600;\r\n        }\r\n\r\n        bytes32 price;\r\n        bool valid=true;\r\n        (price, valid) = Medianizer(priceFeedSource).peek();\r\n        if (!valid) {\r\n            NonValidPriceFeed(priceFeedSource);\r\n        }\r\n        // ensuring that there is no underflow or overflow possible,\r\n        // even if the price is compromised\r\n        uint priceUint = uint256(price)/(1 ether);\r\n        if (priceUint == 0) return 1;\r\n        if (priceUint > 1000000) return 1000000; \r\n        return priceUint;\r\n    }  \r\n}\r\n\r\n// File: @gnosis.pm/util-contracts/contracts/Math.sol\r\n\r\n/// @title Math library - Allows calculation of logarithmic and exponential functions\r\n/// @author Alan Lu - <alan.lu@gnosis.pm>\r\n/// @author Stefan George - <stefan@gnosis.pm>\r\nlibrary Math {\r\n\r\n    /*\r\n     *  Constants\r\n     */\r\n    // This is equal to 1 in our calculations\r\n    uint public constant ONE =  0x10000000000000000;\r\n    uint public constant LN2 = 0xb17217f7d1cf79ac;\r\n    uint public constant LOG2_E = 0x171547652b82fe177;\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Returns natural exponential function value of given x\r\n    /// @param x x\r\n    /// @return e**x\r\n    function exp(int x)\r\n        public\r\n        pure\r\n        returns (uint)\r\n    {\r\n        // revert if x is > MAX_POWER, where\r\n        // MAX_POWER = int(mp.floor(mp.log(mpf(2**256 - 1) / ONE) * ONE))\r\n        require(x <= 2454971259878909886679);\r\n        // return 0 if exp(x) is tiny, using\r\n        // MIN_POWER = int(mp.floor(mp.log(mpf(1) / ONE) * ONE))\r\n        if (x < -818323753292969962227)\r\n            return 0;\r\n        // Transform so that e^x -> 2^x\r\n        x = x * int(ONE) / int(LN2);\r\n        // 2^x = 2^whole(x) * 2^frac(x)\r\n        //       ^^^^^^^^^^ is a bit shift\r\n        // so Taylor expand on z = frac(x)\r\n        int shift;\r\n        uint z;\r\n        if (x >= 0) {\r\n            shift = x / int(ONE);\r\n            z = uint(x % int(ONE));\r\n        }\r\n        else {\r\n            shift = x / int(ONE) - 1;\r\n            z = ONE - uint(-x % int(ONE));\r\n        }\r\n        // 2^x = 1 + (ln 2) x + (ln 2)^2/2! x^2 + ...\r\n        //\r\n        // Can generate the z coefficients using mpmath and the following lines\r\n        // >>> from mpmath import mp\r\n        // >>> mp.dps = 100\r\n        // >>> ONE =  0x10000000000000000\r\n        // >>> print('\\n'.join(hex(int(mp.log(2)**i / mp.factorial(i) * ONE)) for i in range(1, 7)))\r\n        // 0xb17217f7d1cf79ab\r\n        // 0x3d7f7bff058b1d50\r\n        // 0xe35846b82505fc5\r\n        // 0x276556df749cee5\r\n        // 0x5761ff9e299cc4\r\n        // 0xa184897c363c3\r\n        uint zpow = z;\r\n        uint result = ONE;\r\n        result += 0xb17217f7d1cf79ab * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x3d7f7bff058b1d50 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0xe35846b82505fc5 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x276556df749cee5 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x5761ff9e299cc4 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0xa184897c363c3 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0xffe5fe2c4586 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x162c0223a5c8 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x1b5253d395e * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x1e4cf5158b * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x1e8cac735 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x1c3bd650 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x1816193 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x131496 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0xe1b7 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x9c7 * zpow / ONE;\r\n        if (shift >= 0) {\r\n            if (result >> (256-shift) > 0)\r\n                return (2**256-1);\r\n            return result << shift;\r\n        }\r\n        else\r\n            return result >> (-shift);\r\n    }\r\n\r\n    /// @dev Returns natural logarithm value of given x\r\n    /// @param x x\r\n    /// @return ln(x)\r\n    function ln(uint x)\r\n        public\r\n        pure\r\n        returns (int)\r\n    {\r\n        require(x > 0);\r\n        // binary search for floor(log2(x))\r\n        int ilog2 = floorLog2(x);\r\n        int z;\r\n        if (ilog2 < 0)\r\n            z = int(x << uint(-ilog2));\r\n        else\r\n            z = int(x >> uint(ilog2));\r\n        // z = x * 2^-⌊log₂x⌋\r\n        // so 1 <= z < 2\r\n        // and ln z = ln x - ⌊log₂x⌋/log₂e\r\n        // so just compute ln z using artanh series\r\n        // and calculate ln x from that\r\n        int term = (z - int(ONE)) * int(ONE) / (z + int(ONE));\r\n        int halflnz = term;\r\n        int termpow = term * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 3;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 5;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 7;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 9;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 11;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 13;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 15;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 17;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 19;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 21;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 23;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 25;\r\n        return (ilog2 * int(ONE)) * int(ONE) / int(LOG2_E) + 2 * halflnz;\r\n    }\r\n\r\n    /// @dev Returns base 2 logarithm value of given x\r\n    /// @param x x\r\n    /// @return logarithmic value\r\n    function floorLog2(uint x)\r\n        public\r\n        pure\r\n        returns (int lo)\r\n    {\r\n        lo = -64;\r\n        int hi = 193;\r\n        // I use a shift here instead of / 2 because it floors instead of rounding towards 0\r\n        int mid = (hi + lo) >> 1;\r\n        while((lo + 1) < hi) {\r\n            if (mid < 0 && x << uint(-mid) < ONE || mid >= 0 && x >> uint(mid) < ONE)\r\n                hi = mid;\r\n            else\r\n                lo = mid;\r\n            mid = (hi + lo) >> 1;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns maximum of an array\r\n    /// @param nums Numbers to look through\r\n    /// @return Maximum number\r\n    function max(int[] nums)\r\n        public\r\n        pure\r\n        returns (int maxNum)\r\n    {\r\n        require(nums.length > 0);\r\n        maxNum = -2**255;\r\n        for (uint i = 0; i < nums.length; i++)\r\n            if (nums[i] > maxNum)\r\n                maxNum = nums[i];\r\n    }\r\n\r\n    /// @dev Returns whether an add operation causes an overflow\r\n    /// @param a First addend\r\n    /// @param b Second addend\r\n    /// @return Did no overflow occur?\r\n    function safeToAdd(uint a, uint b)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return a + b >= a;\r\n    }\r\n\r\n    /// @dev Returns whether a subtraction operation causes an underflow\r\n    /// @param a Minuend\r\n    /// @param b Subtrahend\r\n    /// @return Did no underflow occur?\r\n    function safeToSub(uint a, uint b)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return a >= b;\r\n    }\r\n\r\n    /// @dev Returns whether a multiply operation causes an overflow\r\n    /// @param a First factor\r\n    /// @param b Second factor\r\n    /// @return Did no overflow occur?\r\n    function safeToMul(uint a, uint b)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return b == 0 || a * b / b == a;\r\n    }\r\n\r\n    /// @dev Returns sum if no overflow occurred\r\n    /// @param a First addend\r\n    /// @param b Second addend\r\n    /// @return Sum\r\n    function add(uint a, uint b)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(safeToAdd(a, b));\r\n        return a + b;\r\n    }\r\n\r\n    /// @dev Returns difference if no overflow occurred\r\n    /// @param a Minuend\r\n    /// @param b Subtrahend\r\n    /// @return Difference\r\n    function sub(uint a, uint b)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(safeToSub(a, b));\r\n        return a - b;\r\n    }\r\n\r\n    /// @dev Returns product if no overflow occurred\r\n    /// @param a First factor\r\n    /// @param b Second factor\r\n    /// @return Product\r\n    function mul(uint a, uint b)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(safeToMul(a, b));\r\n        return a * b;\r\n    }\r\n\r\n    /// @dev Returns whether an add operation causes an overflow\r\n    /// @param a First addend\r\n    /// @param b Second addend\r\n    /// @return Did no overflow occur?\r\n    function safeToAdd(int a, int b)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return (b >= 0 && a + b >= a) || (b < 0 && a + b < a);\r\n    }\r\n\r\n    /// @dev Returns whether a subtraction operation causes an underflow\r\n    /// @param a Minuend\r\n    /// @param b Subtrahend\r\n    /// @return Did no underflow occur?\r\n    function safeToSub(int a, int b)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return (b >= 0 && a - b <= a) || (b < 0 && a - b > a);\r\n    }\r\n\r\n    /// @dev Returns whether a multiply operation causes an overflow\r\n    /// @param a First factor\r\n    /// @param b Second factor\r\n    /// @return Did no overflow occur?\r\n    function safeToMul(int a, int b)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return (b == 0) || (a * b / b == a);\r\n    }\r\n\r\n    /// @dev Returns sum if no overflow occurred\r\n    /// @param a First addend\r\n    /// @param b Second addend\r\n    /// @return Sum\r\n    function add(int a, int b)\r\n        internal\r\n        pure\r\n        returns (int)\r\n    {\r\n        require(safeToAdd(a, b));\r\n        return a + b;\r\n    }\r\n\r\n    /// @dev Returns difference if no overflow occurred\r\n    /// @param a Minuend\r\n    /// @param b Subtrahend\r\n    /// @return Difference\r\n    function sub(int a, int b)\r\n        internal\r\n        pure\r\n        returns (int)\r\n    {\r\n        require(safeToSub(a, b));\r\n        return a - b;\r\n    }\r\n\r\n    /// @dev Returns product if no overflow occurred\r\n    /// @param a First factor\r\n    /// @param b Second factor\r\n    /// @return Product\r\n    function mul(int a, int b)\r\n        internal\r\n        pure\r\n        returns (int)\r\n    {\r\n        require(safeToMul(a, b));\r\n        return a * b;\r\n    }\r\n}\r\n\r\n// File: @gnosis.pm/util-contracts/contracts/Proxy.sol\r\n\r\n/// @title Proxied - indicates that a contract will be proxied. Also defines storage requirements for Proxy.\r\n/// @author Alan Lu - <alan@gnosis.pm>\r\ncontract Proxied {\r\n    address public masterCopy;\r\n}\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.pm>\r\ncontract Proxy is Proxied {\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    function Proxy(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != 0);\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        address _masterCopy = masterCopy;\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(not(0), _masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            switch success\r\n            case 0 { revert(0, returndatasize()) }\r\n            default { return(0, returndatasize()) }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @gnosis.pm/util-contracts/contracts/Token.sol\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\npragma solidity ^0.4.21;\r\n\r\n\r\n/// @title Abstract token contract - Functions to be implemented by token contracts\r\ncontract Token {\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    function transfer(address to, uint value) public returns (bool);\r\n    function transferFrom(address from, address to, uint value) public returns (bool);\r\n    function approve(address spender, uint value) public returns (bool);\r\n    function balanceOf(address owner) public view returns (uint);\r\n    function allowance(address owner, address spender) public view returns (uint);\r\n    function totalSupply() public view returns (uint);\r\n}\r\n\r\n// File: @gnosis.pm/util-contracts/contracts/StandardToken.sol\r\n\r\ncontract StandardTokenData {\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowances;\r\n    uint totalTokens;\r\n}\r\n\r\n/// @title Standard token contract with overflow protection\r\ncontract StandardToken is Token, StandardTokenData {\r\n    using Math for *;\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success\r\n    /// @param to Address of token receiver\r\n    /// @param value Number of tokens to transfer\r\n    /// @return Was transfer successful?\r\n    function transfer(address to, uint value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (   !balances[msg.sender].safeToSub(value)\r\n            || !balances[to].safeToAdd(value))\r\n            return false;\r\n        balances[msg.sender] -= value;\r\n        balances[to] += value;\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\r\n    /// @param from Address from where tokens are withdrawn\r\n    /// @param to Address to where tokens are sent\r\n    /// @param value Number of tokens to transfer\r\n    /// @return Was transfer successful?\r\n    function transferFrom(address from, address to, uint value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (   !balances[from].safeToSub(value)\r\n            || !allowances[from][msg.sender].safeToSub(value)\r\n            || !balances[to].safeToAdd(value))\r\n            return false;\r\n        balances[from] -= value;\r\n        allowances[from][msg.sender] -= value;\r\n        balances[to] += value;\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success\r\n    /// @param spender Address of allowed account\r\n    /// @param value Number of approved tokens\r\n    /// @return Was approval successful?\r\n    function approve(address spender, uint value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowances[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Returns number of allowed tokens for given address\r\n    /// @param owner Address of token owner\r\n    /// @param spender Address of token spender\r\n    /// @return Remaining allowance for spender\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return allowances[owner][spender];\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address\r\n    /// @param owner Address of token owner\r\n    /// @return Balance of owner\r\n    function balanceOf(address owner)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return balances[owner];\r\n    }\r\n\r\n    /// @dev Returns total supply of tokens\r\n    /// @return Total supply\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return totalTokens;\r\n    }\r\n}\r\n\r\n// File: contracts/TokenFRT.sol\r\n\r\n/// @title Standard token contract with overflow protection\r\ncontract TokenFRT is StandardToken {\r\n    string public constant symbol = \"MGN\";\r\n    string public constant name = \"Magnolia Token\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    struct unlockedToken {\r\n        uint amountUnlocked;\r\n        uint withdrawalTime;\r\n    }\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n\r\n    address public owner;\r\n    address public minter;\r\n\r\n    // user => unlockedToken\r\n    mapping (address => unlockedToken) public unlockedTokens;\r\n\r\n    // user => amount\r\n    mapping (address => uint) public lockedTokenBalances;\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n\r\n    function TokenFRT(\r\n        address _owner\r\n    )\r\n        public\r\n    {\r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n    }\r\n\r\n    // @dev allows to set the minter of Magnolia tokens once.\r\n    // @param   _minter the minter of the Magnolia tokens, should be the DX-proxy\r\n    function updateMinter(\r\n        address _minter\r\n    )\r\n        public\r\n    {\r\n        require(msg.sender == owner);\r\n        require(_minter != address(0));\r\n\r\n        minter = _minter;\r\n    }\r\n\r\n    // @dev the intention is to set the owner as the DX-proxy, once it is deployed\r\n    // Then only an update of the DX-proxy contract after a 30 days delay could change the minter again.\r\n    function updateOwner(   \r\n        address _owner\r\n    )\r\n        public\r\n    {\r\n        require(msg.sender == owner);\r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n    }\r\n\r\n    function mintTokens(\r\n        address user,\r\n        uint amount\r\n    )\r\n        public\r\n    {\r\n        require(msg.sender == minter);\r\n\r\n        lockedTokenBalances[user] = add(lockedTokenBalances[user], amount);\r\n        totalTokens = add(totalTokens, amount);\r\n    }\r\n\r\n    /// @dev Lock Token\r\n    function lockTokens(\r\n        uint amount\r\n    )\r\n        public\r\n        returns (uint totalAmountLocked)\r\n    {\r\n        // Adjust amount by balance\r\n        amount = min(amount, balances[msg.sender]);\r\n        \r\n        // Update state variables\r\n        balances[msg.sender] = sub(balances[msg.sender], amount);\r\n        lockedTokenBalances[msg.sender] = add(lockedTokenBalances[msg.sender], amount);\r\n\r\n        // Get return variable\r\n        totalAmountLocked = lockedTokenBalances[msg.sender];\r\n    }\r\n\r\n    function unlockTokens(\r\n        uint amount\r\n    )\r\n        public\r\n        returns (uint totalAmountUnlocked, uint withdrawalTime)\r\n    {\r\n        // Adjust amount by locked balances\r\n        amount = min(amount, lockedTokenBalances[msg.sender]);\r\n\r\n        if (amount > 0) {\r\n            // Update state variables\r\n            lockedTokenBalances[msg.sender] = sub(lockedTokenBalances[msg.sender], amount);\r\n            unlockedTokens[msg.sender].amountUnlocked =  add(unlockedTokens[msg.sender].amountUnlocked, amount);\r\n            unlockedTokens[msg.sender].withdrawalTime = now + 24 hours;\r\n        }\r\n\r\n        // Get return variables\r\n        totalAmountUnlocked = unlockedTokens[msg.sender].amountUnlocked;\r\n        withdrawalTime = unlockedTokens[msg.sender].withdrawalTime;\r\n    }\r\n\r\n    function withdrawUnlockedTokens()\r\n        public\r\n    {\r\n        require(unlockedTokens[msg.sender].withdrawalTime < now);\r\n        balances[msg.sender] = add(balances[msg.sender], unlockedTokens[msg.sender].amountUnlocked);\r\n        unlockedTokens[msg.sender].amountUnlocked = 0;\r\n    }\r\n\r\n    function min(uint a, uint b) \r\n        public\r\n        pure\r\n        returns (uint)\r\n    {\r\n        if (a < b) {\r\n            return a;\r\n        } else {\r\n            return b;\r\n        }\r\n    }\r\n        /// @dev Returns whether an add operation causes an overflow\r\n    /// @param a First addend\r\n    /// @param b Second addend\r\n    /// @return Did no overflow occur?\r\n    function safeToAdd(uint a, uint b)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        return a + b >= a;\r\n    }\r\n\r\n    /// @dev Returns whether a subtraction operation causes an underflow\r\n    /// @param a Minuend\r\n    /// @param b Subtrahend\r\n    /// @return Did no underflow occur?\r\n    function safeToSub(uint a, uint b)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        return a >= b;\r\n    }\r\n\r\n\r\n    /// @dev Returns sum if no overflow occurred\r\n    /// @param a First addend\r\n    /// @param b Second addend\r\n    /// @return Sum\r\n    function add(uint a, uint b)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        require(safeToAdd(a, b));\r\n        return a + b;\r\n    }\r\n\r\n    /// @dev Returns difference if no overflow occurred\r\n    /// @param a Minuend\r\n    /// @param b Subtrahend\r\n    /// @return Difference\r\n    function sub(uint a, uint b)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        require(safeToSub(a, b));\r\n        return a - b;\r\n    }\r\n}\r\n\r\n// File: @gnosis.pm/owl-token/contracts/TokenOWL.sol\r\n\r\ncontract TokenOWL is Proxied, StandardToken {\r\n    using Math for *;\r\n\r\n    string public constant name = \"OWL Token\";\r\n    string public constant symbol = \"OWL\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    struct masterCopyCountdownType {\r\n        address masterCopy;\r\n        uint timeWhenAvailable;\r\n    }\r\n\r\n    masterCopyCountdownType masterCopyCountdown;\r\n\r\n    address public creator;\r\n    address public minter;\r\n\r\n    event Minted(address indexed to, uint256 amount);\r\n    event Burnt(address indexed from, address indexed user, uint256 amount);\r\n\r\n    modifier onlyCreator() {\r\n        // R1\r\n        require(msg.sender == creator);\r\n        _;\r\n    }\r\n    /// @dev trickers the update process via the proxyMaster for a new address _masterCopy \r\n    /// updating is only possible after 30 days\r\n    function startMasterCopyCountdown (\r\n        address _masterCopy\r\n     )\r\n        public\r\n        onlyCreator()\r\n    {\r\n        require(address(_masterCopy) != 0);\r\n\r\n        // Update masterCopyCountdown\r\n        masterCopyCountdown.masterCopy = _masterCopy;\r\n        masterCopyCountdown.timeWhenAvailable = now + 30 days;\r\n    }\r\n\r\n     /// @dev executes the update process via the proxyMaster for a new address _masterCopy\r\n    function updateMasterCopy()\r\n        public\r\n        onlyCreator()\r\n    {   \r\n        require(address(masterCopyCountdown.masterCopy) != 0);\r\n        require(now >= masterCopyCountdown.timeWhenAvailable);\r\n\r\n        // Update masterCopy\r\n        masterCopy = masterCopyCountdown.masterCopy;\r\n    }\r\n\r\n    function getMasterCopy()\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return masterCopy;\r\n    }\r\n\r\n    /// @dev Set minter. Only the creator of this contract can call this.\r\n    /// @param newMinter The new address authorized to mint this token\r\n    function setMinter(address newMinter)\r\n        public\r\n        onlyCreator()\r\n    {\r\n        minter = newMinter;\r\n    }\r\n\r\n\r\n    /// @dev change owner/creator of the contract. Only the creator/owner of this contract can call this.\r\n    /// @param newOwner The new address, which should become the owner\r\n    function setNewOwner(address newOwner)\r\n        public\r\n        onlyCreator()\r\n    {\r\n        creator = newOwner;\r\n    }\r\n\r\n    /// @dev Mints OWL.\r\n    /// @param to Address to which the minted token will be given\r\n    /// @param amount Amount of OWL to be minted\r\n    function mintOWL(address to, uint amount)\r\n        public\r\n    {\r\n        require(minter != 0 && msg.sender == minter);\r\n        balances[to] = balances[to].add(amount);\r\n        totalTokens = totalTokens.add(amount);\r\n        emit Minted(to, amount);\r\n    }\r\n\r\n    /// @dev Burns OWL.\r\n    /// @param user Address of OWL owner\r\n    /// @param amount Amount of OWL to be burnt\r\n    function burnOWL(address user, uint amount)\r\n        public\r\n    {\r\n        allowances[user][msg.sender] = allowances[user][msg.sender].sub(amount);\r\n        balances[user] = balances[user].sub(amount);\r\n        totalTokens = totalTokens.sub(amount);\r\n        emit Burnt(msg.sender, user, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/DutchExchange.sol\r\n\r\n/// @title Dutch Exchange - exchange token pairs with the clever mechanism of the dutch auction\r\n/// @author Alex Herrmann - <alex@gnosis.pm>\r\n/// @author Dominik Teiml - <dominik@gnosis.pm>\r\n\r\ncontract DutchExchange is Proxied {\r\n    address masterCopy;\r\n    // The price is a rational number, so we need a concept of a fraction\r\n    struct fraction {\r\n        uint num;\r\n        uint den;\r\n    }\r\n\r\n    uint constant WAITING_PERIOD_NEW_TOKEN_PAIR = 6 hours;\r\n    uint constant WAITING_PERIOD_NEW_AUCTION = 10 minutes;\r\n    uint constant WAITING_PERIOD_CHANGE_MASTERCOPY_OR_ORACLE = 30 days;\r\n    uint constant AUCTION_START_WAITING_FOR_FUNDING = 1;\r\n\r\n    address public newMasterCopy;\r\n    // Time when new masterCopy is updatabale\r\n    uint public masterCopyCountdown;\r\n\r\n    // > Storage\r\n    // auctioneer has the power to manage some variables\r\n    address public auctioneer;\r\n    // Ether ERC-20 token\r\n    address public ethToken;\r\n    // Price Oracle interface \r\n    PriceOracleInterface public ethUSDOracle;\r\n    // Price Oracle interface proposals during update process\r\n    PriceOracleInterface public newProposalEthUSDOracle;\r\n    uint public oracleInterfaceCountdown;\r\n    // Minimum required sell funding for adding a new token pair, in USD\r\n    uint public thresholdNewTokenPair;\r\n    // Minimum required sell funding for starting antoher auction, in USD\r\n    uint public thresholdNewAuction;\r\n    // Fee reduction token (magnolia, ERC-20 token)\r\n    TokenFRT public frtToken;\r\n    // Token for paying fees\r\n    TokenOWL public owlToken;\r\n\r\n    // mapping that stores the tokens, which are approved\r\n    // Token => approved\r\n    // Only tokens approved by auctioneer generate frtToken tokens\r\n    mapping (address => bool) public approvedTokens;\r\n\r\n    // For the following two mappings, there is one mapping for each token pair\r\n    // The order which the tokens should be called is smaller, larger\r\n    // These variables should never be called directly! They have getters below\r\n    // Token => Token => index\r\n    mapping (address => mapping (address => uint)) public latestAuctionIndices;\r\n    // Token => Token => time\r\n    mapping (address => mapping (address => uint)) public auctionStarts;\r\n\r\n    // Token => Token => auctionIndex => price\r\n    mapping (address => mapping (address => mapping (uint => fraction))) public closingPrices;\r\n\r\n    // Token => Token => amount\r\n    mapping (address => mapping (address => uint)) public sellVolumesCurrent;\r\n    // Token => Token => amount\r\n    mapping (address => mapping (address => uint)) public sellVolumesNext;\r\n    // Token => Token => amount\r\n    mapping (address => mapping (address => uint)) public buyVolumes;\r\n\r\n    // Token => user => amount\r\n    // balances stores a user's balance in the DutchX\r\n    mapping (address => mapping (address => uint)) public balances;\r\n\r\n    // Token => Token => auctionIndex => amount\r\n    mapping (address => mapping (address => mapping (uint => uint))) public extraTokens;\r\n\r\n    // Token => Token =>  auctionIndex => user => amount\r\n    mapping (address => mapping (address => mapping (uint => mapping (address => uint)))) public sellerBalances;\r\n    mapping (address => mapping (address => mapping (uint => mapping (address => uint)))) public buyerBalances;\r\n    mapping (address => mapping (address => mapping (uint => mapping (address => uint)))) public claimedAmounts;\r\n\r\n    // > Modifiers\r\n    modifier onlyAuctioneer() {\r\n        // Only allows auctioneer to proceed\r\n        // R1\r\n        require(msg.sender == auctioneer);\r\n        _;\r\n    }\r\n\r\n    /// @dev Constructor-Function creates exchange\r\n    /// @param _frtToken - address of frtToken ERC-20 token\r\n    /// @param _owlToken - address of owlToken ERC-20 token\r\n    /// @param _auctioneer - auctioneer for managing interfaces\r\n    /// @param _ethToken - address of ETH ERC-20 token\r\n    /// @param _ethUSDOracle - address of the oracle contract for fetching feeds\r\n    /// @param _thresholdNewTokenPair - Minimum required sell funding for adding a new token pair, in USD\r\n    function setupDutchExchange(\r\n        TokenFRT _frtToken,\r\n        TokenOWL _owlToken,\r\n        address _auctioneer, \r\n        address _ethToken,\r\n        PriceOracleInterface _ethUSDOracle,\r\n        uint _thresholdNewTokenPair,\r\n        uint _thresholdNewAuction\r\n    )\r\n        public\r\n    {\r\n        // Make sure contract hasn't been initialised\r\n        require(ethToken == 0);\r\n\r\n        // Validates inputs\r\n        require(address(_owlToken) != address(0));\r\n        require(address(_frtToken) != address(0));\r\n        require(_auctioneer != 0);\r\n        require(_ethToken != 0);\r\n        require(address(_ethUSDOracle) != address(0));\r\n\r\n        frtToken = _frtToken;\r\n        owlToken = _owlToken;\r\n        auctioneer = _auctioneer;\r\n        ethToken = _ethToken;\r\n        ethUSDOracle = _ethUSDOracle;\r\n        thresholdNewTokenPair = _thresholdNewTokenPair;\r\n        thresholdNewAuction = _thresholdNewAuction;\r\n    }\r\n\r\n    function updateAuctioneer(\r\n        address _auctioneer\r\n    )\r\n        public\r\n        onlyAuctioneer\r\n    {\r\n        require(_auctioneer != address(0));\r\n        auctioneer = _auctioneer;\r\n    }\r\n\r\n    function initiateEthUsdOracleUpdate(\r\n        PriceOracleInterface _ethUSDOracle\r\n    )\r\n        public\r\n        onlyAuctioneer\r\n    {         \r\n        require(address(_ethUSDOracle) != address(0));\r\n        newProposalEthUSDOracle = _ethUSDOracle;\r\n        oracleInterfaceCountdown = add(now, WAITING_PERIOD_CHANGE_MASTERCOPY_OR_ORACLE);\r\n        NewOracleProposal(_ethUSDOracle);\r\n    }\r\n\r\n    function updateEthUSDOracle()\r\n        public\r\n        onlyAuctioneer\r\n    {\r\n        require(address(newProposalEthUSDOracle) != address(0));\r\n        require(oracleInterfaceCountdown < now);\r\n        ethUSDOracle = newProposalEthUSDOracle;\r\n        newProposalEthUSDOracle = PriceOracleInterface(0);\r\n    }\r\n\r\n    function updateThresholdNewTokenPair(\r\n        uint _thresholdNewTokenPair\r\n    )\r\n        public\r\n        onlyAuctioneer\r\n    {\r\n        thresholdNewTokenPair = _thresholdNewTokenPair;\r\n    }\r\n\r\n    function updateThresholdNewAuction(\r\n        uint _thresholdNewAuction\r\n    )\r\n        public\r\n        onlyAuctioneer\r\n    {\r\n        thresholdNewAuction = _thresholdNewAuction;\r\n    }\r\n\r\n    function updateApprovalOfToken(\r\n        address[] token,\r\n        bool approved\r\n    )\r\n        public\r\n        onlyAuctioneer\r\n     {  \r\n        for(uint i = 0; i < token.length; i++) {\r\n            approvedTokens[token[i]] = approved;\r\n            Approval(token[i], approved);\r\n        }\r\n     }\r\n\r\n     function startMasterCopyCountdown (\r\n        address _masterCopy\r\n     )\r\n        public\r\n        onlyAuctioneer\r\n    {\r\n        require(_masterCopy != address(0));\r\n\r\n        // Update masterCopyCountdown\r\n        newMasterCopy = _masterCopy;\r\n        masterCopyCountdown = add(now, WAITING_PERIOD_CHANGE_MASTERCOPY_OR_ORACLE);\r\n        NewMasterCopyProposal(_masterCopy);\r\n    }\r\n\r\n    function updateMasterCopy()\r\n        public\r\n        onlyAuctioneer\r\n    {\r\n        require(newMasterCopy != address(0));\r\n        require(now >= masterCopyCountdown);\r\n\r\n        // Update masterCopy\r\n        masterCopy = newMasterCopy;\r\n        newMasterCopy = address(0);\r\n    }\r\n\r\n    /// @param initialClosingPriceNum initial price will be 2 * initialClosingPrice. This is its numerator\r\n    /// @param initialClosingPriceDen initial price will be 2 * initialClosingPrice. This is its denominator\r\n    function addTokenPair(\r\n        address token1,\r\n        address token2,\r\n        uint token1Funding,\r\n        uint token2Funding,\r\n        uint initialClosingPriceNum,\r\n        uint initialClosingPriceDen \r\n    )\r\n        public\r\n    {\r\n        // R1\r\n        require(token1 != token2);\r\n\r\n        // R2\r\n        require(initialClosingPriceNum != 0);\r\n\r\n        // R3\r\n        require(initialClosingPriceDen != 0);\r\n\r\n        // R4\r\n        require(getAuctionIndex(token1, token2) == 0);\r\n\r\n        // R5: to prevent overflow\r\n        require(initialClosingPriceNum < 10 ** 18);\r\n\r\n        // R6\r\n        require(initialClosingPriceDen < 10 ** 18);\r\n\r\n        setAuctionIndex(token1, token2);\r\n\r\n        token1Funding = min(token1Funding, balances[token1][msg.sender]);\r\n        token2Funding = min(token2Funding, balances[token2][msg.sender]);\r\n\r\n        // R7\r\n        require(token1Funding < 10 ** 30);\r\n\r\n        // R8\r\n        require(token2Funding < 10 ** 30);\r\n\r\n        uint fundedValueUSD;\r\n        uint ethUSDPrice = ethUSDOracle.getUSDETHPrice();\r\n\r\n        // Compute fundedValueUSD\r\n        address ethTokenMem = ethToken;\r\n        if (token1 == ethTokenMem) {\r\n            // C1\r\n            // MUL: 10^30 * 10^6 = 10^36\r\n            fundedValueUSD = mul(token1Funding, ethUSDPrice);\r\n        } else if (token2 == ethTokenMem) {\r\n            // C2\r\n            // MUL: 10^30 * 10^6 = 10^36\r\n            fundedValueUSD = mul(token2Funding, ethUSDPrice);\r\n        } else {\r\n            // C3: Neither token is ethToken\r\n            fundedValueUSD = calculateFundedValueTokenToken(token1, token2, \r\n                token1Funding, token2Funding, ethTokenMem, ethUSDPrice);\r\n        }\r\n\r\n        // R5\r\n        require(fundedValueUSD >= thresholdNewTokenPair);\r\n\r\n        // Save prices of opposite auctions\r\n        closingPrices[token1][token2][0] = fraction(initialClosingPriceNum, initialClosingPriceDen);\r\n        closingPrices[token2][token1][0] = fraction(initialClosingPriceDen, initialClosingPriceNum);\r\n\r\n        // Split into two fns because of 16 local-var cap\r\n        addTokenPairSecondPart(token1, token2, token1Funding, token2Funding);\r\n    }\r\n\r\n    function calculateFundedValueTokenToken(\r\n        address token1,\r\n        address token2,\r\n        uint token1Funding,\r\n        uint token2Funding,\r\n        address ethTokenMem,\r\n        uint ethUSDPrice\r\n    )\r\n        internal\r\n        view\r\n        returns (uint fundedValueUSD)\r\n    {\r\n        // We require there to exist ethToken-Token auctions\r\n        // R3.1\r\n        require(getAuctionIndex(token1, ethTokenMem) > 0);\r\n\r\n        // R3.2\r\n        require(getAuctionIndex(token2, ethTokenMem) > 0);\r\n\r\n        // Price of Token 1\r\n        uint priceToken1Num;\r\n        uint priceToken1Den;\r\n        (priceToken1Num, priceToken1Den) = getPriceOfTokenInLastAuction(token1);\r\n\r\n        // Price of Token 2\r\n        uint priceToken2Num;\r\n        uint priceToken2Den;\r\n        (priceToken2Num, priceToken2Den) = getPriceOfTokenInLastAuction(token2);\r\n\r\n        // Compute funded value in ethToken and USD\r\n        // 10^30 * 10^30 = 10^60\r\n        uint fundedValueETH = add(mul(token1Funding, priceToken1Num) / priceToken1Den,\r\n            token2Funding * priceToken2Num / priceToken2Den);\r\n\r\n        fundedValueUSD = mul(fundedValueETH, ethUSDPrice);\r\n    }\r\n\r\n    function addTokenPairSecondPart(\r\n        address token1,\r\n        address token2,\r\n        uint token1Funding,\r\n        uint token2Funding\r\n    )\r\n        internal\r\n    {\r\n        balances[token1][msg.sender] = sub(balances[token1][msg.sender], token1Funding);\r\n        balances[token2][msg.sender] = sub(balances[token2][msg.sender], token2Funding);\r\n\r\n        // Fee mechanism, fees are added to extraTokens\r\n        uint token1FundingAfterFee = settleFee(token1, token2, 1, token1Funding);\r\n        uint token2FundingAfterFee = settleFee(token2, token1, 1, token2Funding);\r\n\r\n        // Update other variables\r\n        sellVolumesCurrent[token1][token2] = token1FundingAfterFee;\r\n        sellVolumesCurrent[token2][token1] = token2FundingAfterFee;\r\n        sellerBalances[token1][token2][1][msg.sender] = token1FundingAfterFee;\r\n        sellerBalances[token2][token1][1][msg.sender] = token2FundingAfterFee;\r\n        \r\n        setAuctionStart(token1, token2, WAITING_PERIOD_NEW_TOKEN_PAIR);\r\n        NewTokenPair(token1, token2);\r\n    }\r\n\r\n    function deposit(\r\n        address tokenAddress,\r\n        uint amount\r\n    )\r\n        public\r\n        returns (uint)\r\n    {\r\n        // R1\r\n        require(Token(tokenAddress).transferFrom(msg.sender, this, amount));\r\n\r\n        uint newBal = add(balances[tokenAddress][msg.sender], amount);\r\n\r\n        balances[tokenAddress][msg.sender] = newBal;\r\n\r\n        NewDeposit(tokenAddress, amount);\r\n\r\n        return newBal;\r\n    }\r\n\r\n    function withdraw(\r\n        address tokenAddress,\r\n        uint amount\r\n    )\r\n        public\r\n        returns (uint)\r\n    {\r\n        uint usersBalance = balances[tokenAddress][msg.sender];\r\n        amount = min(amount, usersBalance);\r\n\r\n        // R1\r\n        require(amount > 0);\r\n\r\n        // R2\r\n        require(Token(tokenAddress).transfer(msg.sender, amount));\r\n\r\n        uint newBal = sub(usersBalance, amount);\r\n        balances[tokenAddress][msg.sender] = newBal;\r\n\r\n        NewWithdrawal(tokenAddress, amount);\r\n\r\n        return newBal;\r\n    }\r\n\r\n    function postSellOrder(\r\n        address sellToken,\r\n        address buyToken,\r\n        uint auctionIndex,\r\n        uint amount\r\n    )\r\n        public\r\n        returns (uint, uint)\r\n    {\r\n        // Note: if a user specifies auctionIndex of 0, it\r\n        // means he is agnostic which auction his sell order goes into\r\n\r\n        amount = min(amount, balances[sellToken][msg.sender]);\r\n\r\n        // R1\r\n        require(amount > 0);\r\n        \r\n        // R2\r\n        uint latestAuctionIndex = getAuctionIndex(sellToken, buyToken);\r\n        require(latestAuctionIndex > 0);\r\n      \r\n        // R3\r\n        uint auctionStart = getAuctionStart(sellToken, buyToken);\r\n        if (auctionStart == AUCTION_START_WAITING_FOR_FUNDING || auctionStart > now) {\r\n            // C1: We are in the 10 minute buffer period\r\n            // OR waiting for an auction to receive sufficient sellVolume\r\n            // Auction has already cleared, and index has been incremented\r\n            // sell order must use that auction index\r\n            // R1.1\r\n            if (auctionIndex == 0) {\r\n                auctionIndex = latestAuctionIndex;\r\n            } else {\r\n                require(auctionIndex == latestAuctionIndex);\r\n            }\r\n\r\n            // R1.2\r\n            require(add(sellVolumesCurrent[sellToken][buyToken], amount) < 10 ** 30);\r\n        } else {\r\n            // C2\r\n            // R2.1: Sell orders must go to next auction\r\n            if (auctionIndex == 0) {\r\n                auctionIndex = latestAuctionIndex + 1;\r\n            } else {\r\n                require(auctionIndex == latestAuctionIndex + 1);\r\n            }\r\n\r\n            // R2.2\r\n            require(add(sellVolumesNext[sellToken][buyToken], amount) < 10 ** 30);\r\n        }\r\n\r\n        // Fee mechanism, fees are added to extraTokens\r\n        uint amountAfterFee = settleFee(sellToken, buyToken, auctionIndex, amount);\r\n\r\n        // Update variables\r\n        balances[sellToken][msg.sender] = sub(balances[sellToken][msg.sender], amount);\r\n        uint newSellerBal = add(sellerBalances[sellToken][buyToken][auctionIndex][msg.sender], amountAfterFee);\r\n        sellerBalances[sellToken][buyToken][auctionIndex][msg.sender] = newSellerBal;\r\n\r\n        if (auctionStart == AUCTION_START_WAITING_FOR_FUNDING || auctionStart > now) {\r\n            // C1\r\n            uint sellVolumeCurrent = sellVolumesCurrent[sellToken][buyToken];\r\n            sellVolumesCurrent[sellToken][buyToken] = add(sellVolumeCurrent, amountAfterFee);\r\n        } else {\r\n            // C2\r\n            uint sellVolumeNext = sellVolumesNext[sellToken][buyToken];\r\n            sellVolumesNext[sellToken][buyToken] = add(sellVolumeNext, amountAfterFee);\r\n        }\r\n\r\n        if (auctionStart == AUCTION_START_WAITING_FOR_FUNDING) {\r\n            scheduleNextAuction(sellToken, buyToken);\r\n        }\r\n\r\n        NewSellOrder(sellToken, buyToken, msg.sender, auctionIndex, amountAfterFee);\r\n\r\n        return (auctionIndex, newSellerBal);\r\n    }\r\n\r\n    function postBuyOrder(\r\n        address sellToken,\r\n        address buyToken,\r\n        uint auctionIndex,\r\n        uint amount\r\n    )\r\n        public\r\n        returns (uint)\r\n    {\r\n        // R1: auction must not have cleared\r\n        require(closingPrices[sellToken][buyToken][auctionIndex].den == 0);\r\n\r\n        uint auctionStart = getAuctionStart(sellToken, buyToken);\r\n\r\n        // R2\r\n        require(auctionStart <= now);\r\n\r\n        // R4\r\n        require(auctionIndex == getAuctionIndex(sellToken, buyToken));\r\n        \r\n        // R5: auction must not be in waiting period\r\n        require(auctionStart > AUCTION_START_WAITING_FOR_FUNDING);\r\n        \r\n        // R6: auction must be funded\r\n        require(sellVolumesCurrent[sellToken][buyToken] > 0);\r\n        \r\n        uint buyVolume = buyVolumes[sellToken][buyToken];\r\n        amount = min(amount, balances[buyToken][msg.sender]);\r\n\r\n        // R7\r\n        require(add(buyVolume, amount) < 10 ** 30);\r\n        \r\n        // Overbuy is when a part of a buy order clears an auction\r\n        // In that case we only process the part before the overbuy\r\n        // To calculate overbuy, we first get current price\r\n        uint sellVolume = sellVolumesCurrent[sellToken][buyToken];\r\n\r\n        uint num;\r\n        uint den;\r\n        (num, den) = getCurrentAuctionPrice(sellToken, buyToken, auctionIndex);\r\n        // 10^30 * 10^37 = 10^67\r\n        uint outstandingVolume = atleastZero(int(mul(sellVolume, num) / den - buyVolume));\r\n\r\n        uint amountAfterFee;\r\n        if (amount < outstandingVolume) {\r\n            if (amount > 0) {\r\n                amountAfterFee = settleFee(buyToken, sellToken, auctionIndex, amount);\r\n            }\r\n        } else {\r\n            amount = outstandingVolume;\r\n            amountAfterFee = outstandingVolume;\r\n        }\r\n\r\n        // Here we could also use outstandingVolume or amountAfterFee, it doesn't matter\r\n        if (amount > 0) {\r\n            // Update variables\r\n            balances[buyToken][msg.sender] = sub(balances[buyToken][msg.sender], amount);\r\n            uint newBuyerBal = add(buyerBalances[sellToken][buyToken][auctionIndex][msg.sender], amountAfterFee);\r\n            buyerBalances[sellToken][buyToken][auctionIndex][msg.sender] = newBuyerBal;\r\n            buyVolumes[sellToken][buyToken] = add(buyVolumes[sellToken][buyToken], amountAfterFee);\r\n            NewBuyOrder(sellToken, buyToken, msg.sender, auctionIndex, amountAfterFee);\r\n        }\r\n\r\n        // Checking for equality would suffice here. nevertheless:\r\n        if (amount >= outstandingVolume) {\r\n            // Clear auction\r\n            clearAuction(sellToken, buyToken, auctionIndex, sellVolume);\r\n        }\r\n\r\n        return (newBuyerBal);\r\n    }\r\n    \r\n    function claimSellerFunds(\r\n        address sellToken,\r\n        address buyToken,\r\n        address user,\r\n        uint auctionIndex\r\n    )\r\n        public\r\n        // < (10^60, 10^61)\r\n        returns (uint returned, uint frtsIssued)\r\n    {\r\n        closeTheoreticalClosedAuction(sellToken, buyToken, auctionIndex);\r\n        uint sellerBalance = sellerBalances[sellToken][buyToken][auctionIndex][user];\r\n\r\n        // R1\r\n        require(sellerBalance > 0);\r\n\r\n        // Get closing price for said auction\r\n        fraction memory closingPrice = closingPrices[sellToken][buyToken][auctionIndex];\r\n        uint num = closingPrice.num;\r\n        uint den = closingPrice.den;\r\n\r\n        // R2: require auction to have cleared\r\n        require(den > 0);\r\n\r\n        // Calculate return\r\n        // < 10^30 * 10^30 = 10^60\r\n        returned = mul(sellerBalance, num) / den;\r\n\r\n        frtsIssued = issueFrts(sellToken, buyToken, returned, auctionIndex, sellerBalance, user);\r\n\r\n        // Claim tokens\r\n        sellerBalances[sellToken][buyToken][auctionIndex][user] = 0;\r\n        if (returned > 0) {\r\n            balances[buyToken][user] = add(balances[buyToken][user], returned);\r\n        }\r\n        NewSellerFundsClaim(sellToken, buyToken, user, auctionIndex, returned, frtsIssued);\r\n    }\r\n\r\n    function claimBuyerFunds(\r\n        address sellToken,\r\n        address buyToken,\r\n        address user,\r\n        uint auctionIndex\r\n    )\r\n        public\r\n        returns (uint returned, uint frtsIssued)\r\n    {\r\n        closeTheoreticalClosedAuction(sellToken, buyToken, auctionIndex);\r\n        \r\n        uint num;\r\n        uint den;\r\n        (returned, num, den) = getUnclaimedBuyerFunds(sellToken, buyToken, user, auctionIndex);\r\n\r\n        if (closingPrices[sellToken][buyToken][auctionIndex].den == 0) {\r\n            // Auction is running\r\n            claimedAmounts[sellToken][buyToken][auctionIndex][user] = add(claimedAmounts[sellToken][buyToken][auctionIndex][user], returned);\r\n        } else {\r\n            // Auction has closed\r\n            // We DON'T want to check for returned > 0, because that would fail if a user claims\r\n            // intermediate funds & auction clears in same block (he/she would not be able to claim extraTokens)\r\n\r\n            // Assign extra sell tokens (this is possible only after auction has cleared,\r\n            // because buyVolume could still increase before that)\r\n            uint extraTokensTotal = extraTokens[sellToken][buyToken][auctionIndex];\r\n            uint buyerBalance = buyerBalances[sellToken][buyToken][auctionIndex][user];\r\n\r\n            // closingPrices.num represents buyVolume\r\n            // < 10^30 * 10^30 = 10^60\r\n            uint tokensExtra = mul(buyerBalance, extraTokensTotal) / closingPrices[sellToken][buyToken][auctionIndex].num;\r\n            returned = add(returned, tokensExtra);\r\n\r\n            frtsIssued = issueFrts(buyToken, sellToken, mul(buyerBalance, den) / num, auctionIndex, buyerBalance, user);\r\n\r\n            // Auction has closed\r\n            // Reset buyerBalances and claimedAmounts\r\n            buyerBalances[sellToken][buyToken][auctionIndex][user] = 0;\r\n            claimedAmounts[sellToken][buyToken][auctionIndex][user] = 0; \r\n        }\r\n\r\n        // Claim tokens\r\n        if (returned > 0) {\r\n            balances[sellToken][user] = add(balances[sellToken][user], returned);\r\n        }\r\n        \r\n        NewBuyerFundsClaim(sellToken, buyToken, user, auctionIndex, returned, frtsIssued);\r\n    }\r\n\r\n    function issueFrts(\r\n        address primaryToken,\r\n        address secondaryToken,\r\n        uint x,\r\n        uint auctionIndex,\r\n        uint bal,\r\n        address user\r\n    )\r\n        internal\r\n        returns (uint frtsIssued)\r\n    {\r\n        if (approvedTokens[primaryToken] && approvedTokens[secondaryToken]) {\r\n            address ethTokenMem = ethToken;\r\n            // Get frts issued based on ETH price of returned tokens\r\n            if (primaryToken == ethTokenMem) {\r\n                frtsIssued = bal;\r\n            } else if (secondaryToken == ethTokenMem) {\r\n                // 10^30 * 10^39 = 10^66\r\n                frtsIssued = x;\r\n            } else {\r\n                // Neither token is ethToken, so we use getHhistoricalPriceOracle()\r\n                uint pastNum;\r\n                uint pastDen;\r\n                (pastNum, pastDen) = getPriceInPastAuction(primaryToken, ethTokenMem, auctionIndex - 1);\r\n                // 10^30 * 10^35 = 10^65\r\n                frtsIssued = mul(bal, pastNum) / pastDen;\r\n            }\r\n\r\n            if (frtsIssued > 0) {\r\n                // Issue frtToken\r\n                frtToken.mintTokens(user, frtsIssued);\r\n            }\r\n        }\r\n    }\r\n\r\n    //@dev allows to close possible theoretical closed markets\r\n    //@param sellToken sellToken of an auction\r\n    //@param buyToken buyToken of an auction \r\n    //@param index is the auctionIndex of the auction\r\n    function closeTheoreticalClosedAuction(\r\n        address sellToken,\r\n        address buyToken,\r\n        uint auctionIndex\r\n    )\r\n        public\r\n    {\r\n        if(auctionIndex == getAuctionIndex(buyToken, sellToken) && closingPrices[sellToken][buyToken][auctionIndex].num == 0) {\r\n            uint buyVolume = buyVolumes[sellToken][buyToken];\r\n            uint sellVolume = sellVolumesCurrent[sellToken][buyToken];\r\n            uint num;\r\n            uint den;\r\n            (num, den) = getCurrentAuctionPrice(sellToken, buyToken, auctionIndex);\r\n            // 10^30 * 10^37 = 10^67\r\n            uint outstandingVolume = atleastZero(int(mul(sellVolume, num) / den - buyVolume));\r\n            \r\n            if(outstandingVolume == 0) {\r\n                postBuyOrder(sellToken, buyToken, auctionIndex, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Claim buyer funds for one auction\r\n    function getUnclaimedBuyerFunds(\r\n        address sellToken,\r\n        address buyToken,\r\n        address user,\r\n        uint auctionIndex\r\n    )\r\n        public\r\n        view\r\n        // < (10^67, 10^37)\r\n        returns (uint unclaimedBuyerFunds, uint num, uint den)\r\n    {\r\n        // R1: checks if particular auction has ever run\r\n        require(auctionIndex <= getAuctionIndex(sellToken, buyToken));\r\n\r\n        (num, den) = getCurrentAuctionPrice(sellToken, buyToken, auctionIndex);\r\n\r\n        if (num == 0) {\r\n            // This should rarely happen - as long as there is >= 1 buy order,\r\n            // auction will clear before price = 0. So this is just fail-safe\r\n            unclaimedBuyerFunds = 0;\r\n        } else {\r\n            uint buyerBalance = buyerBalances[sellToken][buyToken][auctionIndex][user];\r\n            // < 10^30 * 10^37 = 10^67\r\n            unclaimedBuyerFunds = atleastZero(int(\r\n                mul(buyerBalance, den) / num - \r\n                claimedAmounts[sellToken][buyToken][auctionIndex][user]\r\n            ));\r\n        }\r\n    }\r\n\r\n    function settleFee(\r\n        address primaryToken,\r\n        address secondaryToken,\r\n        uint auctionIndex,\r\n        uint amount\r\n    )\r\n        internal\r\n        // < 10^30\r\n        returns (uint amountAfterFee)\r\n    {\r\n        uint feeNum;\r\n        uint feeDen;\r\n        (feeNum, feeDen) = getFeeRatio(msg.sender);\r\n        // 10^30 * 10^3 / 10^4 = 10^29\r\n        uint fee = mul(amount, feeNum) / feeDen;\r\n\r\n        if (fee > 0) {\r\n            fee = settleFeeSecondPart(primaryToken, fee);\r\n            \r\n            uint usersExtraTokens = extraTokens[primaryToken][secondaryToken][auctionIndex + 1];\r\n            extraTokens[primaryToken][secondaryToken][auctionIndex + 1] = add(usersExtraTokens, fee);\r\n\r\n            Fee(primaryToken, secondaryToken, msg.sender, auctionIndex, fee);\r\n        }\r\n        \r\n        amountAfterFee = sub(amount, fee);\r\n    }\r\n\r\n    function settleFeeSecondPart(\r\n        address primaryToken,\r\n        uint fee\r\n    )\r\n        internal\r\n        returns (uint newFee)\r\n    {\r\n        // Allow user to reduce up to half of the fee with owlToken\r\n        uint num;\r\n        uint den;\r\n        (num, den) = getPriceOfTokenInLastAuction(primaryToken);\r\n\r\n        // Convert fee to ETH, then USD\r\n        // 10^29 * 10^30 / 10^30 = 10^29\r\n        uint feeInETH = mul(fee, num) / den;\r\n\r\n        uint ethUSDPrice = ethUSDOracle.getUSDETHPrice();\r\n        // 10^29 * 10^6 = 10^35\r\n        // Uses 18 decimal places <> exactly as owlToken tokens: 10**18 owlToken == 1 USD \r\n        uint feeInUSD = mul(feeInETH, ethUSDPrice);\r\n        uint amountOfowlTokenBurned = min(owlToken.allowance(msg.sender, this), feeInUSD / 2);\r\n        amountOfowlTokenBurned = min(owlToken.balanceOf(msg.sender), amountOfowlTokenBurned);\r\n\r\n\r\n        if (amountOfowlTokenBurned > 0) {\r\n            owlToken.burnOWL(msg.sender, amountOfowlTokenBurned);\r\n            // Adjust fee\r\n            // 10^35 * 10^29 = 10^64\r\n            uint adjustment = mul(amountOfowlTokenBurned, fee) / feeInUSD;\r\n            newFee = sub(fee, adjustment);\r\n        } else {\r\n            newFee = fee;\r\n        }\r\n    }\r\n    \r\n    function getFeeRatio(\r\n        address user\r\n    )\r\n        public\r\n        view\r\n        // feeRatio < 10^4\r\n        returns (uint num, uint den)\r\n    {\r\n        uint t = frtToken.totalSupply();\r\n        uint b = frtToken.lockedTokenBalances(user);\r\n\r\n        if (b * 100000 < t || t == 0) {\r\n            // 0.5%\r\n            num = 1;\r\n            den = 200;\r\n        } else if (b * 10000 < t) {\r\n            // 0.4%\r\n            num = 1;\r\n            den = 250;\r\n        } else if (b * 1000 < t) {\r\n            // 0.3%\r\n            num = 3;\r\n            den = 1000;\r\n        } else if (b * 100 < t) {\r\n            // 0.2%\r\n            num = 1;\r\n            den = 500;\r\n        } else if (b * 10 < t) {\r\n            // 0.1%\r\n            num = 1;\r\n            den = 1000;\r\n        } else {\r\n            // 0% \r\n            num = 0; \r\n            den = 1;\r\n        }\r\n    }\r\n\r\n    /// @dev clears an Auction\r\n    /// @param sellToken sellToken of the auction\r\n    /// @param buyToken  buyToken of the auction\r\n    /// @param auctionIndex of the auction to be cleared.\r\n    function clearAuction(\r\n        address sellToken,\r\n        address buyToken,\r\n        uint auctionIndex,\r\n        uint sellVolume\r\n    )\r\n        internal\r\n    {\r\n        // Get variables\r\n        uint buyVolume = buyVolumes[sellToken][buyToken];\r\n        uint sellVolumeOpp = sellVolumesCurrent[buyToken][sellToken];\r\n        uint closingPriceOppDen = closingPrices[buyToken][sellToken][auctionIndex].den;\r\n        uint auctionStart = getAuctionStart(sellToken, buyToken);\r\n\r\n        // Update closing price\r\n        if (sellVolume > 0) {\r\n            closingPrices[sellToken][buyToken][auctionIndex] = fraction(buyVolume, sellVolume);\r\n        }\r\n\r\n        // if (opposite is 0 auction OR price = 0 OR opposite auction cleared)\r\n        // price = 0 happens if auction pair has been running for >= 24 hrs = 86400\r\n        if (sellVolumeOpp == 0 || now >= auctionStart + 86400 || closingPriceOppDen > 0) {\r\n            // Close auction pair\r\n            uint buyVolumeOpp = buyVolumes[buyToken][sellToken];\r\n            if (closingPriceOppDen == 0 && sellVolumeOpp > 0) {\r\n                // Save opposite price\r\n                closingPrices[buyToken][sellToken][auctionIndex] = fraction(buyVolumeOpp, sellVolumeOpp);\r\n            }\r\n\r\n            uint sellVolumeNext = sellVolumesNext[sellToken][buyToken];\r\n            uint sellVolumeNextOpp = sellVolumesNext[buyToken][sellToken];\r\n\r\n            // Update state variables for both auctions\r\n            sellVolumesCurrent[sellToken][buyToken] = sellVolumeNext;\r\n            if (sellVolumeNext > 0) {\r\n                sellVolumesNext[sellToken][buyToken] = 0;\r\n            }\r\n            if (buyVolume > 0) {\r\n                buyVolumes[sellToken][buyToken] = 0;\r\n            }\r\n\r\n            sellVolumesCurrent[buyToken][sellToken] = sellVolumeNextOpp;\r\n            if (sellVolumeNextOpp > 0) {\r\n                sellVolumesNext[buyToken][sellToken] = 0;\r\n            }\r\n            if (buyVolumeOpp > 0) {\r\n                buyVolumes[buyToken][sellToken] = 0;\r\n            }\r\n\r\n            // Increment auction index\r\n            setAuctionIndex(sellToken, buyToken);\r\n            // Check if next auction can be scheduled\r\n            scheduleNextAuction(sellToken, buyToken);\r\n        }\r\n\r\n        AuctionCleared(sellToken, buyToken, sellVolume, buyVolume, auctionIndex);\r\n    }\r\n\r\n    function scheduleNextAuction(\r\n        address sellToken,\r\n        address buyToken\r\n    )\r\n        internal\r\n    {\r\n        // Check if auctions received enough sell orders\r\n        uint ethUSDPrice = ethUSDOracle.getUSDETHPrice();\r\n\r\n        uint sellNum;\r\n        uint sellDen;\r\n        (sellNum, sellDen) = getPriceOfTokenInLastAuction(sellToken);\r\n\r\n        uint buyNum;\r\n        uint buyDen;\r\n        (buyNum, buyDen) = getPriceOfTokenInLastAuction(buyToken);\r\n\r\n        // We use current sell volume, because in clearAuction() we set\r\n        // sellVolumesCurrent = sellVolumesNext before calling this function\r\n        // (this is so that we don't need case work,\r\n        // since it might also be called from postSellOrder())\r\n\r\n        // < 10^30 * 10^31 * 10^6 = 10^67\r\n        uint sellVolume = mul(mul(sellVolumesCurrent[sellToken][buyToken], sellNum), ethUSDPrice) / sellDen;\r\n        uint sellVolumeOpp = mul(mul(sellVolumesCurrent[buyToken][sellToken], buyNum), ethUSDPrice) / buyDen;\r\n        if (sellVolume >= thresholdNewAuction || sellVolumeOpp >= thresholdNewAuction) {\r\n            // Schedule next auction\r\n            setAuctionStart(sellToken, buyToken, WAITING_PERIOD_NEW_AUCTION);\r\n        } else {\r\n            resetAuctionStart(sellToken, buyToken);\r\n        }\r\n    }\r\n\r\n    //@ dev returns price in units [token2]/[token1]\r\n    //@ param token1 first token for price calculation\r\n    //@ param token2 second token for price calculation\r\n    //@ param auctionIndex index for the auction to get the averaged price from\r\n    function getPriceInPastAuction(\r\n        address token1,\r\n        address token2,\r\n        uint auctionIndex\r\n    )\r\n        public\r\n        view\r\n        // price < 10^31\r\n        returns (uint num, uint den)\r\n    {\r\n        if (token1 == token2) {\r\n            // C1\r\n            num = 1;\r\n            den = 1;\r\n        } else {\r\n            // C2\r\n            // R2.1\r\n            require(auctionIndex >= 0);\r\n\r\n\r\n            // C3\r\n            // R3.1\r\n            require(auctionIndex <= getAuctionIndex(token1, token2));\r\n            // auction still running\r\n\r\n            uint i = 0;\r\n            bool correctPair = false;\r\n            fraction memory closingPriceToken1;\r\n            fraction memory closingPriceToken2;\r\n\r\n            while (!correctPair) {\r\n                closingPriceToken2 = closingPrices[token2][token1][auctionIndex - i];\r\n                closingPriceToken1 = closingPrices[token1][token2][auctionIndex - i];\r\n                \r\n                if (closingPriceToken1.num > 0 && closingPriceToken1.den > 0 || \r\n                    closingPriceToken2.num > 0 && closingPriceToken2.den > 0)\r\n                {\r\n                    correctPair = true;\r\n                }\r\n                i++;\r\n            }\r\n\r\n            // At this point at least one closing price is strictly positive\r\n            // If only one is positive, we want to output that\r\n            if (closingPriceToken1.num == 0 || closingPriceToken1.den == 0) {\r\n                num = closingPriceToken2.den;\r\n                den = closingPriceToken2.num;\r\n            } else if (closingPriceToken2.num == 0 || closingPriceToken2.den == 0) {\r\n                num = closingPriceToken1.num;\r\n                den = closingPriceToken1.den;\r\n            } else {\r\n                // If both prices are positive, output weighted average\r\n                num = closingPriceToken2.den + closingPriceToken1.num;\r\n                den = closingPriceToken2.num + closingPriceToken1.den;\r\n            }\r\n        } \r\n    }\r\n\r\n    /// @dev Gives best estimate for market price of a token in ETH of any price oracle on the Ethereum network\r\n    /// @param token address of ERC-20 token\r\n    /// @return Weighted average of closing prices of opposite Token-ethToken auctions, based on their sellVolume  \r\n    function getPriceOfTokenInLastAuction(\r\n        address token\r\n    )\r\n        public\r\n        view\r\n        // price < 10^31\r\n        returns (uint num, uint den)\r\n    {\r\n        uint latestAuctionIndex = getAuctionIndex(token, ethToken);\r\n        // getPriceInPastAuction < 10^30\r\n        (num, den) = getPriceInPastAuction(token, ethToken, latestAuctionIndex - 1);\r\n    }\r\n\r\n    function getCurrentAuctionPrice(\r\n        address sellToken,\r\n        address buyToken,\r\n        uint auctionIndex\r\n    )\r\n        public\r\n        view\r\n        // price < 10^37\r\n        returns (uint num, uint den)\r\n    {\r\n        fraction memory closingPrice = closingPrices[sellToken][buyToken][auctionIndex];\r\n\r\n        if (closingPrice.den != 0) {\r\n            // Auction has closed\r\n            (num, den) = (closingPrice.num, closingPrice.den);\r\n        } else if (auctionIndex > getAuctionIndex(sellToken, buyToken)) {\r\n            (num, den) = (0, 0);\r\n        } else {\r\n            // Auction is running\r\n            uint pastNum;\r\n            uint pastDen;\r\n            (pastNum, pastDen) = getPriceInPastAuction(sellToken, buyToken, auctionIndex - 1);\r\n\r\n            // If we're calling the function into an unstarted auction,\r\n            // it will return the starting price of that auction\r\n            uint timeElapsed = atleastZero(int(now - getAuctionStart(sellToken, buyToken)));\r\n\r\n            // The numbers below are chosen such that\r\n            // P(0 hrs) = 2 * lastClosingPrice, P(6 hrs) = lastClosingPrice, P(>=24 hrs) = 0\r\n\r\n            // 10^5 * 10^31 = 10^36\r\n            num = atleastZero(int((86400 - timeElapsed) * pastNum));\r\n            // 10^6 * 10^31 = 10^37\r\n            den = mul((timeElapsed + 43200), pastDen);\r\n\r\n            if (mul(num, sellVolumesCurrent[sellToken][buyToken]) <= mul(den, buyVolumes[sellToken][buyToken])) {\r\n                num = buyVolumes[sellToken][buyToken];\r\n                den = sellVolumesCurrent[sellToken][buyToken];\r\n            }\r\n        }\r\n    }\r\n\r\n    function depositAndSell(\r\n        address sellToken,\r\n        address buyToken,\r\n        uint amount\r\n    )\r\n        external\r\n        returns (uint newBal, uint auctionIndex, uint newSellerBal)\r\n    {\r\n        newBal = deposit(sellToken, amount);\r\n        (auctionIndex, newSellerBal) = postSellOrder(sellToken, buyToken, 0, amount);\r\n    }\r\n\r\n    function claimAndWithdraw(\r\n        address sellToken,\r\n        address buyToken,\r\n        address user,\r\n        uint auctionIndex,\r\n        uint amount\r\n    )\r\n        external\r\n        returns (uint returned, uint frtsIssued, uint newBal)\r\n    {\r\n        (returned, frtsIssued) = claimSellerFunds(sellToken, buyToken, user, auctionIndex);\r\n        newBal = withdraw(buyToken, amount);\r\n    }\r\n\r\n    // > Helper fns\r\n    function getTokenOrder(\r\n        address token1,\r\n        address token2\r\n    )\r\n        public\r\n        pure\r\n        returns (address, address)\r\n    {\r\n        if (token2 < token1) {\r\n            (token1, token2) = (token2, token1);\r\n        }\r\n\r\n        return (token1, token2);\r\n    }\r\n\r\n    function setAuctionStart(\r\n        address token1,\r\n        address token2,\r\n        uint value\r\n    )\r\n        internal\r\n    {\r\n        (token1, token2) = getTokenOrder(token1, token2);        \r\n        uint auctionStart = now + value;\r\n        uint auctionIndex = latestAuctionIndices[token1][token2];\r\n        auctionStarts[token1][token2] = auctionStart;\r\n        AuctionStartScheduled(token1, token2, auctionIndex, auctionStart);\r\n    }\r\n\r\n    function resetAuctionStart(\r\n        address token1,\r\n        address token2\r\n    )\r\n        internal\r\n    {\r\n        (token1, token2) = getTokenOrder(token1, token2);\r\n        if (auctionStarts[token1][token2] != AUCTION_START_WAITING_FOR_FUNDING) {\r\n            auctionStarts[token1][token2] = AUCTION_START_WAITING_FOR_FUNDING;\r\n        }\r\n    }\r\n\r\n    function getAuctionStart(\r\n        address token1,\r\n        address token2\r\n    )\r\n        public\r\n        view\r\n        returns (uint auctionStart)\r\n    {\r\n        (token1, token2) = getTokenOrder(token1, token2);\r\n        auctionStart = auctionStarts[token1][token2];\r\n    }\r\n\r\n    function setAuctionIndex(\r\n        address token1,\r\n        address token2\r\n    )\r\n        internal\r\n    {\r\n        (token1, token2) = getTokenOrder(token1, token2);\r\n        latestAuctionIndices[token1][token2] += 1;\r\n    }\r\n\r\n\r\n    function getAuctionIndex(\r\n        address token1,\r\n        address token2\r\n    )\r\n        public\r\n        view\r\n        returns (uint auctionIndex) \r\n    {\r\n        (token1, token2) = getTokenOrder(token1, token2);\r\n        auctionIndex = latestAuctionIndices[token1][token2];\r\n    }\r\n\r\n    // > Math fns\r\n    function min(uint a, uint b) \r\n        public\r\n        pure\r\n        returns (uint)\r\n    {\r\n        if (a < b) {\r\n            return a;\r\n        } else {\r\n            return b;\r\n        }\r\n    }\r\n\r\n    function atleastZero(int a)\r\n        public\r\n        pure\r\n        returns (uint)\r\n    {\r\n        if (a < 0) {\r\n            return 0;\r\n        } else {\r\n            return uint(a);\r\n        }\r\n    }\r\n    /// @dev Returns whether an add operation causes an overflow\r\n    /// @param a First addend\r\n    /// @param b Second addend\r\n    /// @return Did no overflow occur?\r\n    function safeToAdd(uint a, uint b)\r\n        public\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return a + b >= a;\r\n    }\r\n\r\n    /// @dev Returns whether a subtraction operation causes an underflow\r\n    /// @param a Minuend\r\n    /// @param b Subtrahend\r\n    /// @return Did no underflow occur?\r\n    function safeToSub(uint a, uint b)\r\n        public\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return a >= b;\r\n    }\r\n\r\n    /// @dev Returns whether a multiply operation causes an overflow\r\n    /// @param a First factor\r\n    /// @param b Second factor\r\n    /// @return Did no overflow occur?\r\n    function safeToMul(uint a, uint b)\r\n        public\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return b == 0 || a * b / b == a;\r\n    }\r\n\r\n    /// @dev Returns sum if no overflow occurred\r\n    /// @param a First addend\r\n    /// @param b Second addend\r\n    /// @return Sum\r\n    function add(uint a, uint b)\r\n        public\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(safeToAdd(a, b));\r\n        return a + b;\r\n    }\r\n\r\n    /// @dev Returns difference if no overflow occurred\r\n    /// @param a Minuend\r\n    /// @param b Subtrahend\r\n    /// @return Difference\r\n    function sub(uint a, uint b)\r\n        public\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(safeToSub(a, b));\r\n        return a - b;\r\n    }\r\n\r\n    /// @dev Returns product if no overflow occurred\r\n    /// @param a First factor\r\n    /// @param b Second factor\r\n    /// @return Product\r\n    function mul(uint a, uint b)\r\n        public\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(safeToMul(a, b));\r\n        return a * b;\r\n    }\r\n\r\n    function getRunningTokenPairs(\r\n        address[] tokens\r\n    )\r\n        external\r\n        view\r\n        returns (address[] tokens1, address[] tokens2)\r\n    {\r\n        uint arrayLength;\r\n\r\n        for (uint k = 0; k < tokens.length - 1; k++) {\r\n            for (uint l = k + 1; l < tokens.length; l++) {\r\n                if (getAuctionIndex(tokens[k], tokens[l]) > 0) {\r\n                    arrayLength++;\r\n                }\r\n            }\r\n        }\r\n\r\n        tokens1 = new address[](arrayLength);\r\n        tokens2 = new address[](arrayLength);\r\n\r\n        uint h;\r\n\r\n        for (uint i = 0; i < tokens.length - 1; i++) {\r\n            for (uint j = i + 1; j < tokens.length; j++) {\r\n                if (getAuctionIndex(tokens[i], tokens[j]) > 0) {\r\n                    tokens1[h] = tokens[i];\r\n                    tokens2[h] = tokens[j];\r\n                    h++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    //@dev for quick overview of possible sellerBalances to calculate the possible withdraw tokens\r\n    //@param auctionSellToken is the sellToken defining an auctionPair\r\n    //@param auctionBuyToken is the buyToken defining an auctionPair\r\n    //@param user is the user who wants to his tokens\r\n    //@param lastNAuctions how many auctions will be checked. 0 means all\r\n    //@returns returns sellbal for all indices for all tokenpairs \r\n    function getIndicesWithClaimableTokensForSellers(\r\n        address auctionSellToken,\r\n        address auctionBuyToken,\r\n        address user,\r\n        uint lastNAuctions\r\n    )\r\n        external\r\n        view\r\n        returns(uint[] indices, uint[] usersBalances)\r\n    {\r\n        uint runningAuctionIndex = getAuctionIndex(auctionSellToken, auctionBuyToken);\r\n\r\n        uint arrayLength;\r\n        \r\n        uint startingIndex = lastNAuctions == 0 ? 1 : runningAuctionIndex - lastNAuctions + 1;\r\n\r\n        for (uint j = startingIndex; j <= runningAuctionIndex; j++) {\r\n            if (sellerBalances[auctionSellToken][auctionBuyToken][j][user] > 0) {\r\n                arrayLength++;\r\n            }\r\n        }\r\n\r\n        indices = new uint[](arrayLength);\r\n        usersBalances = new uint[](arrayLength);\r\n\r\n        uint k;\r\n\r\n        for (uint i = startingIndex; i <= runningAuctionIndex; i++) {\r\n            if (sellerBalances[auctionSellToken][auctionBuyToken][i][user] > 0) {\r\n                indices[k] = i;\r\n                usersBalances[k] = sellerBalances[auctionSellToken][auctionBuyToken][i][user];\r\n                k++;\r\n            }\r\n        }\r\n    }    \r\n\r\n    //@dev for quick overview of current sellerBalances for a user\r\n    //@param auctionSellTokens are the sellTokens defining an auctionPair\r\n    //@param auctionBuyTokens are the buyTokens defining an auctionPair\r\n    //@param user is the user who wants to his tokens\r\n    function getSellerBalancesOfCurrentAuctions(\r\n        address[] auctionSellTokens,\r\n        address[] auctionBuyTokens,\r\n        address user\r\n    )\r\n        external\r\n        view\r\n        returns (uint[])\r\n    {\r\n        uint length = auctionSellTokens.length;\r\n        uint length2 = auctionBuyTokens.length;\r\n        require(length == length2);\r\n\r\n        uint[] memory sellersBalances = new uint[](length);\r\n\r\n        for (uint i = 0; i < length; i++) {\r\n            uint runningAuctionIndex = getAuctionIndex(auctionSellTokens[i], auctionBuyTokens[i]);\r\n            sellersBalances[i] = sellerBalances[auctionSellTokens[i]][auctionBuyTokens[i]][runningAuctionIndex][user];\r\n        }\r\n\r\n        return sellersBalances;\r\n    }\r\n\r\n    //@dev for quick overview of possible buyerBalances to calculate the possible withdraw tokens\r\n    //@param auctionSellToken is the sellToken defining an auctionPair\r\n    //@param auctionBuyToken is the buyToken defining an auctionPair\r\n    //@param user is the user who wants to his tokens\r\n    //@param lastNAuctions how many auctions will be checked. 0 means all\r\n    //@returns returns sellbal for all indices for all tokenpairs \r\n    function getIndicesWithClaimableTokensForBuyers(\r\n        address auctionSellToken,\r\n        address auctionBuyToken,\r\n        address user,\r\n        uint lastNAuctions\r\n    )\r\n        external\r\n        view\r\n        returns(uint[] indices, uint[] usersBalances)\r\n    {\r\n        uint runningAuctionIndex = getAuctionIndex(auctionSellToken, auctionBuyToken);\r\n\r\n        uint arrayLength;\r\n        \r\n        uint startingIndex = lastNAuctions == 0 ? 1 : runningAuctionIndex - lastNAuctions + 1;\r\n\r\n        for (uint j = startingIndex; j <= runningAuctionIndex; j++) {\r\n            if (buyerBalances[auctionSellToken][auctionBuyToken][j][user] > 0) {\r\n                arrayLength++;\r\n            }\r\n        }\r\n\r\n        indices = new uint[](arrayLength);\r\n        usersBalances = new uint[](arrayLength);\r\n\r\n        uint k;\r\n\r\n        for (uint i = startingIndex; i <= runningAuctionIndex; i++) {\r\n            if (buyerBalances[auctionSellToken][auctionBuyToken][i][user] > 0) {\r\n                indices[k] = i;\r\n                usersBalances[k] = buyerBalances[auctionSellToken][auctionBuyToken][i][user];\r\n                k++;\r\n            }\r\n        }\r\n    }    \r\n\r\n    //@dev for quick overview of current sellerBalances for a user\r\n    //@param auctionSellTokens are the sellTokens defining an auctionPair\r\n    //@param auctionBuyTokens are the buyTokens defining an auctionPair\r\n    //@param user is the user who wants to his tokens\r\n    function getBuyerBalancesOfCurrentAuctions(\r\n        address[] auctionSellTokens,\r\n        address[] auctionBuyTokens,\r\n        address user\r\n    )\r\n        external\r\n        view\r\n        returns (uint[])\r\n    {\r\n        uint length = auctionSellTokens.length;\r\n        uint length2 = auctionBuyTokens.length;\r\n        require(length == length2);\r\n\r\n        uint[] memory buyersBalances = new uint[](length);\r\n\r\n        for (uint i = 0; i < length; i++) {\r\n            uint runningAuctionIndex = getAuctionIndex(auctionSellTokens[i], auctionBuyTokens[i]);\r\n            buyersBalances[i] = buyerBalances[auctionSellTokens[i]][auctionBuyTokens[i]][runningAuctionIndex][user];\r\n        }\r\n\r\n        return buyersBalances;\r\n    }\r\n\r\n    //@dev for quick overview of approved Tokens\r\n    //@param addressesToCheck are the ERC-20 token addresses to be checked whether they are approved\r\n    function getApprovedAddressesOfList(\r\n        address[] addressToCheck\r\n    )\r\n        external\r\n        view\r\n        returns (bool[])\r\n    {\r\n        uint length = addressToCheck.length;\r\n\r\n        bool[] memory isApproved = new bool[](length);\r\n\r\n        for (uint i = 0; i < length; i++) {\r\n            isApproved[i] = approvedTokens[addressToCheck[i]];\r\n        }\r\n\r\n        return isApproved;\r\n    }\r\n\r\n    //@dev for multiple withdraws\r\n    //@param auctionSellTokens are the sellTokens defining an auctionPair\r\n    //@param auctionBuyTokens are the buyTokens defining an auctionPair\r\n    //@param auctionIndices are the auction indices on which an token should be claimedAmounts\r\n    //@param user is the user who wants to his tokens\r\n    function claimTokensFromSeveralAuctionsAsSeller(\r\n        address[] auctionSellTokens,\r\n        address[] auctionBuyTokens,\r\n        uint[] auctionIndices,\r\n        address user\r\n    )\r\n        external\r\n    {\r\n        uint length = auctionSellTokens.length;\r\n        uint length2 = auctionBuyTokens.length;\r\n        require(length == length2);\r\n\r\n        uint length3 = auctionIndices.length;\r\n        require(length2 == length3);\r\n\r\n        for (uint i = 0; i < length; i++)\r\n            claimSellerFunds(auctionSellTokens[i], auctionBuyTokens[i], user, auctionIndices[i]);\r\n    }\r\n    //@dev for multiple withdraws\r\n    //@param auctionSellTokens are the sellTokens defining an auctionPair\r\n    //@param auctionBuyTokens are the buyTokens defining an auctionPair\r\n    //@param auctionIndices are the auction indices on which an token should be claimedAmounts\r\n    //@param user is the user who wants to his tokens\r\n    function claimTokensFromSeveralAuctionsAsBuyer(\r\n        address[] auctionSellTokens,\r\n        address[] auctionBuyTokens,\r\n        uint[] auctionIndices,\r\n        address user\r\n    )\r\n        external\r\n    {\r\n        uint length = auctionSellTokens.length;\r\n        uint length2 = auctionBuyTokens.length;\r\n        require(length == length2);\r\n\r\n        uint length3 = auctionIndices.length;\r\n        require(length2 == length3);\r\n\r\n        for (uint i = 0; i < length; i++)\r\n            claimBuyerFunds(auctionSellTokens[i], auctionBuyTokens[i], user, auctionIndices[i]);\r\n    }\r\n\r\n    function getMasterCopy()\r\n        external\r\n        view \r\n        returns (address)\r\n    {\r\n        return masterCopy;\r\n    }\r\n\r\n    // > Events\r\n    event NewDeposit(\r\n         address indexed token,\r\n         uint amount\r\n    );\r\n\r\n    event NewOracleProposal(\r\n         PriceOracleInterface priceOracleInterface\r\n    );\r\n\r\n\r\n    event NewMasterCopyProposal(\r\n         address newMasterCopy\r\n    );\r\n\r\n    event NewWithdrawal(\r\n        address indexed token,\r\n        uint amount\r\n    );\r\n    \r\n    event NewSellOrder(\r\n        address indexed sellToken,\r\n        address indexed buyToken,\r\n        address indexed user,\r\n        uint auctionIndex,\r\n        uint amount\r\n    );\r\n\r\n    event NewBuyOrder(\r\n        address indexed sellToken,\r\n        address indexed buyToken,\r\n        address indexed user,\r\n        uint auctionIndex,\r\n        uint amount\r\n    );\r\n\r\n    event NewSellerFundsClaim(\r\n        address indexed sellToken,\r\n        address indexed buyToken,\r\n        address indexed user,\r\n        uint auctionIndex,\r\n        uint amount,\r\n        uint frtsIssued\r\n    );\r\n\r\n    event NewBuyerFundsClaim(\r\n        address indexed sellToken,\r\n        address indexed buyToken,\r\n        address indexed user,\r\n        uint auctionIndex,\r\n        uint amount,\r\n        uint frtsIssued\r\n    );\r\n\r\n    event NewTokenPair(\r\n        address indexed sellToken,\r\n        address indexed buyToken\r\n    );\r\n\r\n    event AuctionCleared(\r\n        address indexed sellToken,\r\n        address indexed buyToken,\r\n        uint sellVolume,\r\n        uint buyVolume,\r\n        uint indexed auctionIndex\r\n    );\r\n\r\n    event Approval(\r\n        address indexed token,\r\n        bool approved\r\n    );\r\n\r\n    event AuctionStartScheduled(\r\n        address indexed sellToken,\r\n        address indexed buyToken,\r\n        uint indexed auctionIndex,\r\n        uint auctionStart\r\n    );\r\n\r\n    event Fee(\r\n        address indexed primaryToken,\r\n        address indexed secondarToken,\r\n        address indexed user,\r\n        uint auctionIndex,\r\n        uint fee\r\n    );\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"token1\",\"type\":\"address\"},{\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"getTokenOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"auctionSellTokens\",\"type\":\"address[]\"},{\"name\":\"auctionBuyTokens\",\"type\":\"address[]\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSellerBalancesOfCurrentAuctions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addressToCheck\",\"type\":\"address[]\"}],\"name\":\"getApprovedAddressesOfList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMasterCopy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellToken\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"auctionIndex\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimAndWithdraw\",\"outputs\":[{\"name\":\"returned\",\"type\":\"uint256\"},{\"name\":\"frtsIssued\",\"type\":\"uint256\"},{\"name\":\"newBal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterCopyCountdown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"auctionStarts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token1\",\"type\":\"address\"},{\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"getAuctionIndex\",\"outputs\":[{\"name\":\"auctionIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateMasterCopy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"int256\"}],\"name\":\"atleastZero\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyerBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethUSDOracle\",\"type\":\"address\"}],\"name\":\"initiateEthUsdOracleUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token1\",\"type\":\"address\"},{\"name\":\"token2\",\"type\":\"address\"},{\"name\":\"auctionIndex\",\"type\":\"uint256\"}],\"name\":\"getPriceInPastAuction\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"den\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeToAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellToken\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"auctionIndex\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"postSellOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellToken\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"auctionIndex\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"postBuyOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctioneer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellToken\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"auctionIndex\",\"type\":\"uint256\"}],\"name\":\"claimSellerFunds\",\"outputs\":[{\"name\":\"returned\",\"type\":\"uint256\"},{\"name\":\"frtsIssued\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellToken\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositAndSell\",\"outputs\":[{\"name\":\"newBal\",\"type\":\"uint256\"},{\"name\":\"auctionIndex\",\"type\":\"uint256\"},{\"name\":\"newSellerBal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address[]\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"updateApprovalOfToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thresholdNewTokenPair\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newMasterCopy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethUSDOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"auctionSellTokens\",\"type\":\"address[]\"},{\"name\":\"auctionBuyTokens\",\"type\":\"address[]\"},{\"name\":\"auctionIndices\",\"type\":\"uint256[]\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimTokensFromSeveralAuctionsAsSeller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctioneer\",\"type\":\"address\"}],\"name\":\"updateAuctioneer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellToken\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"auctionIndex\",\"type\":\"uint256\"}],\"name\":\"closeTheoreticalClosedAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frtToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getRunningTokenPairs\",\"outputs\":[{\"name\":\"tokens1\",\"type\":\"address[]\"},{\"name\":\"tokens2\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracleInterfaceCountdown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterCopy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_frtToken\",\"type\":\"address\"},{\"name\":\"_owlToken\",\"type\":\"address\"},{\"name\":\"_auctioneer\",\"type\":\"address\"},{\"name\":\"_ethToken\",\"type\":\"address\"},{\"name\":\"_ethUSDOracle\",\"type\":\"address\"},{\"name\":\"_thresholdNewTokenPair\",\"type\":\"uint256\"},{\"name\":\"_thresholdNewAuction\",\"type\":\"uint256\"}],\"name\":\"setupDutchExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellToken\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"auctionIndex\",\"type\":\"uint256\"}],\"name\":\"claimBuyerFunds\",\"outputs\":[{\"name\":\"returned\",\"type\":\"uint256\"},{\"name\":\"frtsIssued\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellVolumesNext\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellVolumesCurrent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"sub\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyVolumes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"auctionSellTokens\",\"type\":\"address[]\"},{\"name\":\"auctionBuyTokens\",\"type\":\"address[]\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBuyerBalancesOfCurrentAuctions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellerBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_thresholdNewAuction\",\"type\":\"uint256\"}],\"name\":\"updateThresholdNewAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mul\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeToMul\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newProposalEthUSDOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owlToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"auctionSellToken\",\"type\":\"address\"},{\"name\":\"auctionBuyToken\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"lastNAuctions\",\"type\":\"uint256\"}],\"name\":\"getIndicesWithClaimableTokensForBuyers\",\"outputs\":[{\"name\":\"indices\",\"type\":\"uint256[]\"},{\"name\":\"usersBalances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"auctionSellTokens\",\"type\":\"address[]\"},{\"name\":\"auctionBuyTokens\",\"type\":\"address[]\"},{\"name\":\"auctionIndices\",\"type\":\"uint256[]\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimTokensFromSeveralAuctionsAsBuyer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token1\",\"type\":\"address\"},{\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"getAuctionStart\",\"outputs\":[{\"name\":\"auctionStart\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sellToken\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"auctionIndex\",\"type\":\"uint256\"}],\"name\":\"getUnclaimedBuyerFunds\",\"outputs\":[{\"name\":\"unclaimedBuyerFunds\",\"type\":\"uint256\"},{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"den\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_thresholdNewTokenPair\",\"type\":\"uint256\"}],\"name\":\"updateThresholdNewTokenPair\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeToSub\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token1\",\"type\":\"address\"},{\"name\":\"token2\",\"type\":\"address\"},{\"name\":\"token1Funding\",\"type\":\"uint256\"},{\"name\":\"token2Funding\",\"type\":\"uint256\"},{\"name\":\"initialClosingPriceNum\",\"type\":\"uint256\"},{\"name\":\"initialClosingPriceDen\",\"type\":\"uint256\"}],\"name\":\"addTokenPair\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"closingPrices\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"den\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFeeRatio\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"den\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thresholdNewAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPriceOfTokenInLastAuction\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"den\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateEthUSDOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_masterCopy\",\"type\":\"address\"}],\"name\":\"startMasterCopyCountdown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extraTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"auctionSellToken\",\"type\":\"address\"},{\"name\":\"auctionBuyToken\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"lastNAuctions\",\"type\":\"uint256\"}],\"name\":\"getIndicesWithClaimableTokensForSellers\",\"outputs\":[{\"name\":\"indices\",\"type\":\"uint256[]\"},{\"name\":\"usersBalances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestAuctionIndices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sellToken\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"auctionIndex\",\"type\":\"uint256\"}],\"name\":\"getCurrentAuctionPrice\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"den\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"priceOracleInterface\",\"type\":\"address\"}],\"name\":\"NewOracleProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newMasterCopy\",\"type\":\"address\"}],\"name\":\"NewMasterCopyProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"auctionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"auctionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"auctionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"frtsIssued\",\"type\":\"uint256\"}],\"name\":\"NewSellerFundsClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"auctionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"frtsIssued\",\"type\":\"uint256\"}],\"name\":\"NewBuyerFundsClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyToken\",\"type\":\"address\"}],\"name\":\"NewTokenPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sellVolume\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyVolume\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"auctionIndex\",\"type\":\"uint256\"}],\"name\":\"AuctionCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"auctionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auctionStart\",\"type\":\"uint256\"}],\"name\":\"AuctionStartScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"primaryToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"secondarToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"auctionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Fee\",\"type\":\"event\"}]","ContractName":"DutchExchange","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e268e242c6dde65622ebdacc17c9845a0f15ec6dc9041928686a3330851cfb4c"}]}