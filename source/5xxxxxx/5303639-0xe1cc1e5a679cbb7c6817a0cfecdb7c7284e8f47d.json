{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// ethvegas copy\r\n\r\n\r\n\r\ncontract Memes{\r\n    address owner;\r\n    address helper=0x690F34053ddC11bdFF95D44bdfEb6B0b83CBAb58;\r\n\r\n    uint256 public TimeFinish = 0;\r\n    uint256 TimerResetTime = 7200; // 2 hours cooldown @ new game \r\n    uint256 TimerStartTime = 360000; \r\n    uint256 public Pot = 0;\r\n    // Price increase in percent divided (10k = 100% = 2x increase.)\r\n    uint16 PIncr = 10000; // % 100%\r\n    // part of left amount going to previous\r\n    uint16 DIVP = 10000; // \r\n    // part of left amount going to pot \r\n    uint16 POTP = 0; // DIVP and POTP are both 100; scaled to dev factor.\r\n    // part of pot going to winner \r\n    uint16 WPOTPART = 9000; // % in pot part going to owner.\r\n    \r\n    // Dev fee \r\n    uint16 public DEVP = 500;\r\n    // Helper factor fee \r\n    uint16 public HVAL = 5000;\r\n    uint256 BasicPrice = .00666 ether;\r\n    struct Item{\r\n        address owner;\r\n        uint256 CPrice;\r\n        bool reset;\r\n    }\r\n    uint8 constant SIZE = 17;\r\n    Item[SIZE] public ItemList;\r\n    \r\n    address public PotOwner;\r\n    \r\n    \r\n    event ItemBought(address owner, uint256 newPrice, string says, uint8 id);\r\n    // owner wins paid , new pot is npot\r\n    event GameWon(address owner, uint256 paid, uint256 npot);\r\n    \r\n    modifier OnlyOwner(){\r\n        if (msg.sender == owner){\r\n            _;\r\n        }\r\n        else{\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function SetDevFee(uint16 tfee) public OnlyOwner{\r\n        require(tfee <= 500);\r\n        DEVP = tfee;\r\n    }\r\n    \r\n    // allows to change helper fee. minimum is 10%, max 100%. \r\n    function SetHFee(uint16 hfee) public OnlyOwner {\r\n        require(hfee <= 10000);\r\n        require(hfee >= 1000);\r\n        HVAL = hfee;\r\n    \r\n    }\r\n    \r\n    \r\n    // constructor \r\n    function Memes() public {\r\n        // create items ;\r\n        \r\n        // clone ??? \r\n        var ITM = Item(msg.sender, BasicPrice, true );\r\n        ItemList[0] = ITM; // blackjack \r\n        ItemList[1] = ITM; // roulette \r\n        ItemList[2] = ITM; // poker \r\n        ItemList[3] = ITM; // slots \r\n        ItemList[4] = ITM; // \r\n        ItemList[5] = ITM; // other weird items \r\n        ItemList[6] = ITM;\r\n        ItemList[7] = ITM;\r\n        ItemList[8] = ITM;\r\n        ItemList[9] = ITM;\r\n        ItemList[10] = ITM;\r\n        ItemList[11] = ITM;\r\n        ItemList[12] = ITM;\r\n        ItemList[13] = ITM;\r\n        ItemList[14] = ITM;\r\n        ItemList[15] = ITM;\r\n        ItemList[16] = ITM;\r\n        owner=msg.sender;\r\n    }\r\n    \r\n    \r\n    \r\n    function Buy(uint8 ID, string says) public payable {\r\n        require(ID < SIZE);\r\n        var ITM = ItemList[ID];\r\n        if (TimeFinish == 0){\r\n            // start game condition.\r\n            TimeFinish = block.timestamp; \r\n        }\r\n        else if (TimeFinish == 1){\r\n            TimeFinish =block.timestamp + TimerResetTime;\r\n        }\r\n            \r\n        uint256 price = ITM.CPrice;\r\n        \r\n        if (ITM.reset){\r\n            price = BasicPrice;\r\n            \r\n        }\r\n        \r\n        if (msg.value >= price){\r\n            if (!ITM.reset){\r\n                require(msg.sender != ITM.owner); // do not buy own item\r\n            }\r\n            if ((msg.value - price) > 0){\r\n                // pay excess back. \r\n                msg.sender.transfer(msg.value - price);\r\n            }\r\n            uint256 LEFT = DoDev(price);\r\n            uint256 prev_val = 0;\r\n            // first item all LEFT goes to POT \r\n            // not previous owner small fee .\r\n            uint256 pot_val = LEFT;\r\n            \r\n            address sender_target = owner;\r\n            \r\n            if (!ITM.reset){\r\n                prev_val = (DIVP * LEFT)  / 10000;\r\n                pot_val = (POTP * LEFT) / 10000;\r\n                sender_target = ITM.owner; // we set sender_target to item owner\r\n            }\r\n            else{\r\n                // Item is reset, send stuff to dev\r\n                // Actually we can just send everything here aka LEFT\r\n                prev_val = LEFT;\r\n                pot_val = 0; // nothing in pot\r\n                // no need to set sender value\r\n            }\r\n            \r\n            Pot = Pot + pot_val;\r\n            sender_target.transfer(prev_val); // send stuff to sender_target\r\n            ITM.owner = msg.sender;\r\n            uint256 incr = PIncr; // weird way of passing other types to new types.\r\n            ITM.CPrice = (price * (10000 + incr)) / 10000;\r\n\r\n            // check if TimeFinish > block.timestamp; and not 0 otherwise not started\r\n            uint256 TimeLeft = TimeFinish - block.timestamp;\r\n            \r\n            if (TimeLeft< TimerStartTime){\r\n                \r\n                TimeFinish = block.timestamp + TimerStartTime;\r\n            }\r\n            if (ITM.reset){\r\n                ITM.reset=false;\r\n            }\r\n            PotOwner = msg.sender;\r\n            // says is for later, for quotes in log. no gas used to save\r\n            emit ItemBought(msg.sender, ITM.CPrice, says, ID);\r\n        }  \r\n        else{\r\n            revert(); // user knows fail.\r\n        }\r\n    }\r\n    \r\n    \r\n    function DoDev(uint256 val) internal returns (uint256){\r\n        uint256 tval = (val * DEVP / 10000);\r\n        uint256 hval = (tval * HVAL) / 10000;\r\n        uint256 dval = tval - hval; \r\n        \r\n        owner.transfer(dval);\r\n        helper.transfer(hval);\r\n        return (val-tval);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"hfee\",\"type\":\"uint16\"}],\"name\":\"SetHFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HVAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TimeFinish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PotOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ItemList\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"CPrice\",\"type\":\"uint256\"},{\"name\":\"reset\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tfee\",\"type\":\"uint16\"}],\"name\":\"SetDevFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ID\",\"type\":\"uint8\"},{\"name\":\"says\",\"type\":\"string\"}],\"name\":\"Buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"says\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"ItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"npot\",\"type\":\"uint256\"}],\"name\":\"GameWon\",\"type\":\"event\"}]","ContractName":"Memes","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8c9ce7e2d98d2a64b18e45107276a2ffdc9c1af22e685781111d1ce99a3a6eaf"}]}