{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface TokenInterface {\r\n     function totalSupply() external constant returns (uint);\r\n     function balanceOf(address tokenOwner) external constant returns (uint balance);\r\n     function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\r\n     function transfer(address to, uint tokens) external returns (bool success);\r\n     function approve(address spender, uint tokens) external returns (bool success);\r\n     function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n     function burn(uint256 _value) external; \r\n     event Transfer(address indexed from, address indexed to, uint tokens);\r\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n     event Burn(address indexed burner, uint256 value);\r\n}\r\n\r\n contract URUNCrowdsale is Ownable{\r\n  using SafeMath for uint256;\r\n \r\n  // The token being sold\r\n  TokenInterface public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public ratePerWei = 800;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  uint256 public TOKENS_SOLD;\r\n  \r\n  uint256 public minimumContributionPresalePhase1 = uint(2).mul(10 ** 18); //2 eth is the minimum contribution in presale phase 1\r\n  uint256 public minimumContributionPresalePhase2 = uint(1).mul(10 ** 18); //1 eth is the minimum contribution in presale phase 2\r\n  \r\n  uint256 public maxTokensToSaleInClosedPreSale;\r\n  \r\n  uint256 public bonusInPreSalePhase1;\r\n  uint256 public bonusInPreSalePhase2;\r\n  \r\n  bool public isCrowdsalePaused = false;\r\n  \r\n  uint256 public totalDurationInDays = 31 days;\r\n  \r\n  mapping(address=>bool) isAddressWhiteListed;\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  constructor(uint256 _startTime, address _wallet, address _tokenAddress) public \r\n  {\r\n    \r\n    require(_wallet != 0x0);\r\n    require(_startTime >=now);\r\n    startTime = _startTime;  \r\n    \r\n    endTime = startTime + totalDurationInDays;\r\n    require(endTime >= startTime);\r\n   \r\n    owner = _wallet;\r\n    \r\n    maxTokensToSaleInClosedPreSale = 60000000 * 10 ** 18;\r\n    bonusInPreSalePhase1 = 50;\r\n    bonusInPreSalePhase2 = 40;\r\n    token = TokenInterface(_tokenAddress);\r\n  }\r\n  \r\n  \r\n   // fallback function can be used to buy tokens\r\n   function () public  payable {\r\n     buyTokens(msg.sender);\r\n    }\r\n    \r\n    function determineBonus(uint tokens) internal view returns (uint256 bonus) \r\n    {\r\n        uint256 timeElapsed = now - startTime;\r\n        uint256 timeElapsedInDays = timeElapsed.div(1 days);\r\n        \r\n        //Closed pre-sale phase 1 (15 days)\r\n        if (timeElapsedInDays <15)\r\n        {\r\n            bonus = tokens.mul(bonusInPreSalePhase1); \r\n            bonus = bonus.div(100);\r\n            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInClosedPreSale);\r\n        }\r\n        //Closed pre-sale phase 2 (16 days)\r\n        else if (timeElapsedInDays >=15 && timeElapsedInDays <31)\r\n        {\r\n            bonus = tokens.mul(bonusInPreSalePhase2); \r\n            bonus = bonus.div(100);\r\n            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInClosedPreSale);\r\n        }\r\n        else \r\n        {\r\n            bonus = 0;\r\n        }\r\n    }\r\n\r\n  // low level token purchase function\r\n  \r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(isCrowdsalePaused == false);\r\n    require(isAddressWhiteListed[beneficiary]);\r\n    require(validPurchase());\r\n    \r\n    require(isWithinContributionRange());\r\n    \r\n    require(TOKENS_SOLD<maxTokensToSaleInClosedPreSale);\r\n   \r\n    uint256 weiAmount = msg.value;\r\n    \r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(ratePerWei);\r\n    uint256 bonus = determineBonus(tokens);\r\n    tokens = tokens.add(bonus);\r\n    \r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    \r\n    token.transfer(beneficiary,tokens);\r\n    emit TokenPurchase(owner, beneficiary, weiAmount, tokens);\r\n    TOKENS_SOLD = TOKENS_SOLD.add(tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  function forwardFunds() internal {\r\n    owner.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n  \r\n    /**\r\n    * function to change the end time and start time of the ICO\r\n    * can only be called by owner wallet\r\n    **/\r\n    function changeStartAndEndDate (uint256 startTimeUnixTimestamp, uint256 endTimeUnixTimestamp) public onlyOwner\r\n    {\r\n        require (startTimeUnixTimestamp!=0 && endTimeUnixTimestamp!=0);\r\n        require(endTimeUnixTimestamp>startTimeUnixTimestamp);\r\n        require(endTimeUnixTimestamp.sub(startTimeUnixTimestamp) >=totalDurationInDays);\r\n        startTime = startTimeUnixTimestamp;\r\n        endTime = endTimeUnixTimestamp;\r\n    }\r\n    \r\n    /**\r\n    * function to change the rate of tokens\r\n    * can only be called by owner wallet\r\n    **/\r\n    function setPriceRate(uint256 newPrice) public onlyOwner {\r\n        ratePerWei = newPrice;\r\n    }\r\n    \r\n     /**\r\n     * function to pause the crowdsale \r\n     * can only be called from owner wallet\r\n     **/\r\n     \r\n    function pauseCrowdsale() public onlyOwner {\r\n        isCrowdsalePaused = true;\r\n    }\r\n\r\n    /**\r\n     * function to resume the crowdsale if it is paused\r\n     * can only be called from owner wallet\r\n     **/ \r\n    function resumeCrowdsale() public onlyOwner {\r\n        isCrowdsalePaused = false;\r\n    }\r\n    \r\n    /**\r\n     * function to check whether the sent amount is within contribution range or not\r\n     **/ \r\n    function isWithinContributionRange() internal constant returns (bool)\r\n    {\r\n        uint timePassed = now.sub(startTime);\r\n        timePassed = timePassed.div(1 days);\r\n\r\n        if (timePassed<15)\r\n            require(msg.value>=minimumContributionPresalePhase1);\r\n        else if (timePassed>=15 && timePassed<31)\r\n            require(msg.value>=minimumContributionPresalePhase2);\r\n        else\r\n            revert();   // off time - no sales during other time periods\r\n            \r\n        return true;\r\n     }\r\n     \r\n     /**\r\n      * function through which owner can take back the tokens from the contract\r\n      **/ \r\n     function takeTokensBack() public onlyOwner\r\n     {\r\n         uint remainingTokensInTheContract = token.balanceOf(address(this));\r\n         token.transfer(owner,remainingTokensInTheContract);\r\n     }\r\n     \r\n     /**\r\n      * function through which owner can transfer the tokens to any address\r\n      * use this which to properly display the tokens that have been sold via ether or other payments\r\n      **/ \r\n     function manualTokenTransfer(address receiver, uint value) public onlyOwner\r\n     {\r\n         token.transfer(receiver,value);\r\n         TOKENS_SOLD = TOKENS_SOLD.add(value);\r\n     }\r\n     \r\n     /**\r\n      * Function to add a single address to whitelist\r\n      * Can only be called by owner wallet address\r\n      **/ \r\n     function addSingleAddressToWhitelist(address whitelistedAddr) public onlyOwner\r\n     {\r\n         isAddressWhiteListed[whitelistedAddr] = true;\r\n     }\r\n     \r\n     /**\r\n      * Function to add multiple addresses to whitelist\r\n      * Can only be called by owner wallet address\r\n      **/ \r\n     function addMultipleAddressesToWhitelist(address[] whitelistedAddr) public onlyOwner\r\n     {\r\n         for (uint i=0;i<whitelistedAddr.length;i++)\r\n         {\r\n            isAddressWhiteListed[whitelistedAddr[i]] = true;\r\n         }\r\n     }\r\n     \r\n     /**\r\n      * Function to remove an address from whitelist \r\n      * Can only be called by owner wallet address \r\n      **/ \r\n     function removeSingleAddressFromWhitelist(address whitelistedAddr) public onlyOwner\r\n     {\r\n         isAddressWhiteListed[whitelistedAddr] = false;\r\n     }\r\n     \r\n     /**\r\n     * Function to remove multiple addresses from whitelist \r\n     * Can only be called by owner wallet address \r\n     **/ \r\n     function removeMultipleAddressesFromWhitelist(address[] whitelistedAddr) public onlyOwner\r\n     {\r\n        for (uint i=0;i<whitelistedAddr.length;i++)\r\n         {\r\n            isAddressWhiteListed[whitelistedAddr[i]] = false;\r\n         }\r\n     }\r\n     \r\n     /**\r\n      * Function to check if an address is whitelisted \r\n      **/ \r\n     function checkIfAddressIsWhiteListed(address whitelistedAddr) public view returns (bool)\r\n     {\r\n         return isAddressWhiteListed[whitelistedAddr];\r\n     }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"startTimeUnixTimestamp\",\"type\":\"uint256\"},{\"name\":\"endTimeUnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"changeStartAndEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whitelistedAddr\",\"type\":\"address[]\"}],\"name\":\"removeMultipleAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_SOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDurationInDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusInPreSalePhase2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeTokensBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whitelistedAddr\",\"type\":\"address\"}],\"name\":\"removeSingleAddressFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumContributionPresalePhase2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whitelistedAddr\",\"type\":\"address\"}],\"name\":\"addSingleAddressToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"manualTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsalePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusInPreSalePhase1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePerWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"whitelistedAddr\",\"type\":\"address\"}],\"name\":\"checkIfAddressIsWhiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumContributionPresalePhase1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokensToSaleInClosedPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whitelistedAddr\",\"type\":\"address[]\"}],\"name\":\"addMultipleAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"URUNCrowdsale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005afa230000000000000000000000000009162bd9c5bfb9e39e87ce3e39b558a5546710b800000000000000000000000001a9a2b8638451d447f0027179b19e8843963a88","Library":"","SwarmSource":"bzzr://5a532d29448e98b1d3cf6bdefd3eefd25ab07bcb70a80287448d6ea744c55bd9"}]}