{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The isOwner constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function isOwner() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/*** Dennis & Bani welcome you ***/\r\ncontract EtherCup is Ownable {\r\n\r\n  // NOTE: Player is our global term used to describe unique tokens\r\n\r\n  using SafeMath for uint256;\r\n\r\n  /*** EVENTS ***/\r\n  event NewPlayer(uint tokenId, string name);\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, address prevOwner, address winner, string name);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n\r\n  /*** CONSTANTS ***/\r\n  uint256 private price = 0.01 ether;\r\n  uint256 private priceLimitOne = 0.05 ether;\r\n  uint256 private priceLimitTwo = 0.5 ether;\r\n  uint256 private priceLimitThree = 2 ether;\r\n  uint256 private priceLimitFour = 5 ether;\r\n\r\n\r\n  /*** STORAGE ***/\r\n  mapping (uint => address) public playerToOwner;\r\n  mapping (address => uint) ownerPlayerCount;\r\n  mapping (uint256 => uint256) public playerToPrice;\r\n  mapping (uint => address) playerApprovals;\r\n\r\n  // The address of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n\r\n  /*** DATATYPES ***/\r\n  struct Player {\r\n    string name;\r\n  }\r\n\r\n  Player[] public players;\r\n\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwnerOf(uint _tokenId) {\r\n    require(msg.sender == playerToOwner[_tokenId]);\r\n    _;\r\n  }\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  // In newer versions use \"constructor() public {  };\" instead of \"function PlayerLab() public {  };\"\r\n  constructor() public {\r\n    ceoAddress = msg.sender;\r\n\r\n  }\r\n\r\n  /*** CEO ***/\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n    ceoAddress = _newCEO;\r\n  }\r\n\r\n\r\n  /*** CREATE PLAYERS ***/\r\n  function createNewPlayer(string _name) public onlyCEO {\r\n    _createPlayer(_name, price);\r\n  }\r\n\r\n  function _createPlayer(string _name, uint256 _price) internal {\r\n    uint id = players.push(Player(_name)) - 1;\r\n    playerToOwner[id] = msg.sender;\r\n    ownerPlayerCount[msg.sender] = ownerPlayerCount[msg.sender].add(1);\r\n    emit NewPlayer(id, _name);\r\n\r\n    playerToPrice[id] = _price;\r\n  }\r\n\r\n\r\n  /*** Buy ***/\r\n  function calculateNextPrice (uint256 _price) public view returns (uint256 _nextPrice) {\r\n    if (_price < priceLimitOne) {\r\n      return _price.mul(200).div(95); // < 0.05\r\n    } else if (_price < priceLimitTwo) {\r\n      return _price.mul(175).div(95); // < 0.5\r\n    } else if (_price < priceLimitThree) {\r\n      return _price.mul(150).div(95); // < 2\r\n    } else if (_price < priceLimitFour) {\r\n      return _price.mul(125).div(95); // < 5\r\n    } else {\r\n      return _price.mul(115).div(95); // >= 5\r\n    }\r\n  }\r\n\r\n  function calculateDevCut (uint256 _price) public pure returns (uint256 _devCut) {\r\n    return _price.mul(5).div(100);\r\n\r\n  }\r\n\r\n  function purchase(uint256 _tokenId) public payable {\r\n\r\n    address oldOwner = playerToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n\r\n    uint256 sellingPrice = playerToPrice[_tokenId];\r\n    uint256 purchaseExcess = msg.value.sub(sellingPrice);\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice);\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n    playerToPrice[_tokenId] = nextPriceOf(_tokenId);\r\n\r\n    // Devevloper's cut which is left in contract and accesed by\r\n    // `withdrawAll` and `withdrawAmountTo` methods.\r\n    uint256 devCut = calculateDevCut(sellingPrice);\r\n\r\n    uint256 payment = sellingPrice.sub(devCut);\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(payment);\r\n    }\r\n\r\n    if (purchaseExcess > 0){\r\n        newOwner.transfer(purchaseExcess);\r\n    }\r\n\r\n\r\n    emit TokenSold(_tokenId, sellingPrice, oldOwner, newOwner, players[_tokenId].name);\r\n  }\r\n\r\n  /*** Withdraw Dev Cut ***/\r\n  /*\r\n    NOTICE: These functions withdraw the developer's cut which is left\r\n    in the contract by `buy`. User funds are immediately sent to the old\r\n    owner in `buy`, no user funds are left in the contract.\r\n  */\r\n  function withdrawAll () onlyCEO() public {\r\n    ceoAddress.transfer(address(this).balance);\r\n  }\r\n\r\n  function withdrawAmount (uint256 _amount) onlyCEO() public {\r\n    ceoAddress.transfer(_amount);\r\n  }\r\n\r\n  function showDevCut () onlyCEO() public view returns (uint256) {\r\n    return address(this).balance;\r\n  }\r\n\r\n\r\n  /*** ***/\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 _price) {\r\n    return playerToPrice[_tokenId];\r\n  }\r\n\r\n  function priceOfMultiple(uint256[] _tokenIds) public view returns (uint256[]) {\r\n    uint[] memory values = new uint[](_tokenIds.length);\r\n\r\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n      values[i] = priceOf(_tokenIds[i]);\r\n    }\r\n    return values;\r\n  }\r\n\r\n  function nextPriceOf(uint256 _tokenId) public view returns (uint256 _nextPrice) {\r\n    return calculateNextPrice(priceOf(_tokenId));\r\n  }\r\n\r\n  /*** ERC721 ***/\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return players.length;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance) {\r\n    return ownerPlayerCount[_owner];\r\n  }\r\n\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner) {\r\n    return playerToOwner[_tokenId];\r\n  }\r\n\r\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    playerApprovals[_tokenId] = _to;\r\n    emit Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n\r\n    ownerPlayerCount[_to] = ownerPlayerCount[_to].add(1);\r\n    ownerPlayerCount[_from] = ownerPlayerCount[_from].sub(1);\r\n    playerToOwner[_tokenId] = _to;\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n  ///  expensive (it walks the entire Persons array looking for persons belonging to owner),\r\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n  ///  not contract-to-contract calls.\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalPlayers = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 playerId;\r\n      for (playerId = 0; playerId <= totalPlayers; playerId++) {\r\n        if (playerToOwner[playerId] == _owner) {\r\n          result[resultIndex] = playerId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n/**\r\n* @dev Multiplies two numbers, throws on overflow.\r\n*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n if (a == 0) {\r\n   return 0;\r\n }\r\n uint256 c = a * b;\r\n assert(c / a == b);\r\n return c;\r\n}\r\n\r\n/**\r\n* @dev Integer division of two numbers, truncating the quotient.\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n uint256 c = a / b;\r\n // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n return c;\r\n}\r\n\r\n/**\r\n* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n assert(b <= a);\r\n return a - b;\r\n}\r\n\r\n/**\r\n* @dev Adds two numbers, throws on overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n uint256 c = a + b;\r\n assert(c >= a);\r\n return c;\r\n}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showDevCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"nextPriceOf\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createNewPlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateDevCut\",\"outputs\":[{\"name\":\"_devCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerToPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateNextPrice\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"priceOfMultiple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NewPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EtherCup","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6d3a320d9b708d6bbec26e6aea419ed1e7378acaeedd5aff815d1786bcffa330"}]}