{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\ncontract Bitscreen {\r\n\r\n    struct IPFSHash {\r\n    bytes32 hash;\r\n    uint8 hashFunction;\r\n    uint8 size;\r\n    }\r\n    event ImageChange(bytes32 _hash,uint8 _hashFunction,uint8 _size, uint _cost);\r\n    event PriceChange(uint price);\r\n    \r\n    struct ScreenData {\r\n    uint currTopBid;\r\n    uint currTopBidTimeStamp;\r\n    uint lifetimeValue; //total eth that has gone into contract (historical)\r\n    uint periodPercentagePriceDecrease;\r\n    uint PriceDecreasePeriodLengthSecs;\r\n    address currHolder;\r\n    uint8 heightRatio;\r\n    uint8 widthRatio;\r\n    string country;\r\n    }\r\n    \r\n\r\n    struct ContentRules {\r\n        bool sexual;\r\n        bool violent;\r\n        bool political;\r\n        bool controversial;\r\n        bool illegal; //content that goes agaisnt the law of the country it is operating in\r\n    }\r\n    \r\n    event RuleChange(bool _sexual,bool _violent,bool _political,bool _controversial,bool _illegal);\r\n\r\n    struct AdBuyerInfo{\r\n        uint numberAdBuys;\r\n        bool cashedOut;\r\n    }\r\n    \r\n    struct DividendInfo{\r\n        uint  activeAdBuysForDividend; //gets lowered (according to their numberAdBuys) when someone cashes out\r\n        uint  ownerpool;\r\n        uint  dividendPool;\r\n        mapping(address => AdBuyerInfo) adbuyerMap;\r\n    }\r\n    \r\n\r\n    //contract variables\r\n\r\n    //creator of the contract\r\n    address public owner;\r\n    \r\n    //total eth currently in contract\r\n    uint public contractValue;\r\n\r\n    //current ipfs hash \r\n    IPFSHash public currPicHash;\r\n    \r\n    //current state of the screen\r\n    ScreenData public screenstate;\r\n    ContentRules public rules;\r\n    address[] private badAddresses;\r\n    \r\n    //current dividend info\r\n    DividendInfo public dividendinfo;\r\n\r\n    function Bitscreen(bytes32 _ipfsHash, uint8 _ipfsHashFunc, uint8 _ipfsHashSize, uint8 _heightRatio, uint8 _widthRatio, string _country, uint _periodPercentagePriceDecrease,uint _priceDecreasePeriodLengthSecs) public {\r\n        owner = msg.sender;\r\n        currPicHash = IPFSHash(_ipfsHash,_ipfsHashFunc,_ipfsHashSize);\r\n        screenstate = ScreenData(0,now,0,_periodPercentagePriceDecrease,_priceDecreasePeriodLengthSecs,msg.sender,_heightRatio,_widthRatio,_country);\r\n        rules = ContentRules(false,false,false,false,false);\r\n        dividendinfo=DividendInfo(0,0,0);\r\n    }\r\n    \r\n\r\n    function withdrawOwnerAmount() external{\r\n        if(msg.sender == owner) { // Only let the contract creator do this\r\n            uint withdrawAmount = dividendinfo.ownerpool;\r\n            dividendinfo.ownerpool=0;\r\n            contractValue-=withdrawAmount;\r\n            msg.sender.transfer(withdrawAmount);\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    \r\n    //request to know how much dividend you can get\r\n    function inquireDividentAmount()  view external returns(uint){\r\n        uint dividendToSend=calcuCurrTxDividend(msg.sender);\r\n        return dividendToSend;\r\n    }\r\n    \r\n    function withdrawDividend() external{\r\n        uint dividendToSend=calcuCurrTxDividend(msg.sender);\r\n        if(dividendToSend==0){\r\n            revert();\r\n        }else{\r\n        uint senderNumAdbuys=dividendinfo.adbuyerMap[msg.sender].numberAdBuys;\r\n        dividendinfo.activeAdBuysForDividend-=senderNumAdbuys;\r\n        dividendinfo.dividendPool-=dividendToSend;\r\n        contractValue-=dividendToSend;\r\n        dividendinfo.adbuyerMap[msg.sender].cashedOut=true;\r\n        dividendinfo.adbuyerMap[msg.sender].numberAdBuys=0;\r\n        \r\n        //send\r\n        msg.sender.transfer(dividendToSend);\r\n        }\r\n    }\r\n    \r\n    function calcuCurrTxDividend(address dividentRecepient) view private returns(uint) {\r\n        uint totaldividend;\r\n        if(dividendinfo.activeAdBuysForDividend==0 || dividendinfo.adbuyerMap[dividentRecepient].cashedOut){ \r\n            totaldividend=0;\r\n        }else{\r\n            totaldividend=(dividendinfo.dividendPool*dividendinfo.adbuyerMap[dividentRecepient].numberAdBuys)/(dividendinfo.activeAdBuysForDividend);\r\n        }\r\n        return totaldividend;\r\n    }\r\n    \r\n    function getBadAddresses() external constant returns (address[]) {\r\n        if(msg.sender == owner) {\r\n            return badAddresses;\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function changeRules(bool _sexual,bool _violent, bool _political, bool _controversial, bool _illegal) public {\r\n                if(msg.sender == owner) {\r\n                rules.sexual=_sexual;\r\n                rules.violent=_violent;\r\n                rules.political=_political;\r\n                rules.controversial=_controversial;\r\n                rules.illegal=_illegal;\r\n                \r\n                RuleChange(_sexual,_violent,_political,_controversial,_illegal);\r\n                \r\n                }else{\r\n                revert();\r\n                }\r\n    }\r\n\r\n\r\n    function calculateCurrDynamicPrice() public view returns (uint){\r\n        uint currDynamicPrice;\r\n        uint periodLengthSecs=screenstate.PriceDecreasePeriodLengthSecs;\r\n        \r\n        uint ellapsedPeriodsSinceLastBid= (now - screenstate.currTopBidTimeStamp)/periodLengthSecs;\r\n        \r\n        uint totalDecrease=((screenstate.currTopBid*screenstate.periodPercentagePriceDecrease*ellapsedPeriodsSinceLastBid)/100);\r\n        \r\n        if(totalDecrease>screenstate.currTopBid){\r\n            currDynamicPrice=0;\r\n        }else{\r\n            currDynamicPrice= screenstate.currTopBid-totalDecrease;\r\n        }\r\n        \r\n        return currDynamicPrice;\r\n        \r\n    }\r\n\r\n    function truncToThreeDecimals(uint amount) private pure returns (uint){\r\n        return ((amount/1000000000000000)*1000000000000000);\r\n    }\r\n\r\n\r\n    function changeBid(bytes32 _ipfsHash, uint8 _ipfsHashFunc, uint8 _ipfsHashSize) payable external {\r\n        \r\n            uint dynamicPrice=calculateCurrDynamicPrice();\r\n        \r\n            if(msg.value>dynamicPrice) { //prev: msg.value>screenstate.currTopBid\r\n            \r\n                if(truncToThreeDecimals(msg.value)-truncToThreeDecimals(dynamicPrice)<1000000000000000){\r\n                    revert();\r\n                }else{\r\n                    \r\n                screenstate.currTopBid=msg.value;\r\n                screenstate.currTopBidTimeStamp=now;\r\n                screenstate.currHolder=msg.sender;\r\n                \r\n                screenstate.lifetimeValue+=msg.value;\r\n                contractValue+=msg.value;//total eth CURRENTLY IN contract\r\n                //store 33% to dividend pool, send 66% to ownerpool\r\n                dividendinfo.dividendPool+=msg.value/3;\r\n                dividendinfo.ownerpool+=((msg.value*2)/3);\r\n                \r\n                currPicHash.hash=_ipfsHash;\r\n                currPicHash.hashFunction=_ipfsHashFunc;\r\n                currPicHash.size=_ipfsHashSize;\r\n                \r\n                dividendinfo.activeAdBuysForDividend++;\r\n                if(dividendinfo.adbuyerMap[msg.sender].numberAdBuys==0){\r\n                    dividendinfo.adbuyerMap[msg.sender]=AdBuyerInfo(1,false);\r\n                }else{\r\n                    dividendinfo.adbuyerMap[msg.sender].numberAdBuys++;\r\n                }\r\n                \r\n                ImageChange(_ipfsHash,_ipfsHashFunc,_ipfsHashSize,screenstate.currTopBid);\r\n                \r\n                }\r\n                \r\n            }else {\r\n                revert();\r\n            }\r\n    }\r\n    \r\n    function emergencyOverwrite(bytes32 _ipfsHash, uint8 _ipfsHashFunc, uint8 _ipfsHashSize) external {\r\n        if(msg.sender == owner) { // Only let the contract creator do this\r\n            badAddresses.push(screenstate.currHolder);\r\n            currPicHash.hash=_ipfsHash;\r\n            currPicHash.hashFunction=_ipfsHashFunc;\r\n            currPicHash.size=_ipfsHashSize;\r\n            screenstate.currHolder=msg.sender;\r\n            ImageChange(_ipfsHash,_ipfsHashFunc,_ipfsHashSize,0);\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function changePriceDecreasePeriod(uint newPeriod) public{\r\n        require(msg.sender==owner);\r\n        screenstate.PriceDecreasePeriodLengthSecs=newPeriod;\r\n    }\r\n    \r\n    function changePriceDecreasePercent(uint newPercent) public{\r\n        require(msg.sender==owner);\r\n        screenstate.periodPercentagePriceDecrease=newPercent;\r\n    }\r\n    \r\n    \r\n    function () payable public {}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"changePriceDecreasePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currPicHash\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"name\":\"size\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sexual\",\"type\":\"bool\"},{\"name\":\"_violent\",\"type\":\"bool\"},{\"name\":\"_political\",\"type\":\"bool\"},{\"name\":\"_controversial\",\"type\":\"bool\"},{\"name\":\"_illegal\",\"type\":\"bool\"}],\"name\":\"changeRules\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ipfsHash\",\"type\":\"bytes32\"},{\"name\":\"_ipfsHashFunc\",\"type\":\"uint8\"},{\"name\":\"_ipfsHashSize\",\"type\":\"uint8\"}],\"name\":\"emergencyOverwrite\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ipfsHash\",\"type\":\"bytes32\"},{\"name\":\"_ipfsHashFunc\",\"type\":\"uint8\"},{\"name\":\"_ipfsHashSize\",\"type\":\"uint8\"}],\"name\":\"changeBid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBadAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rules\",\"outputs\":[{\"name\":\"sexual\",\"type\":\"bool\"},{\"name\":\"violent\",\"type\":\"bool\"},{\"name\":\"political\",\"type\":\"bool\"},{\"name\":\"controversial\",\"type\":\"bool\"},{\"name\":\"illegal\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendinfo\",\"outputs\":[{\"name\":\"activeAdBuysForDividend\",\"type\":\"uint256\"},{\"name\":\"ownerpool\",\"type\":\"uint256\"},{\"name\":\"dividendPool\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateCurrDynamicPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawOwnerAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inquireDividentAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"changePriceDecreasePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"screenstate\",\"outputs\":[{\"name\":\"currTopBid\",\"type\":\"uint256\"},{\"name\":\"currTopBidTimeStamp\",\"type\":\"uint256\"},{\"name\":\"lifetimeValue\",\"type\":\"uint256\"},{\"name\":\"periodPercentagePriceDecrease\",\"type\":\"uint256\"},{\"name\":\"PriceDecreasePeriodLengthSecs\",\"type\":\"uint256\"},{\"name\":\"currHolder\",\"type\":\"address\"},{\"name\":\"heightRatio\",\"type\":\"uint8\"},{\"name\":\"widthRatio\",\"type\":\"uint8\"},{\"name\":\"country\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ipfsHash\",\"type\":\"bytes32\"},{\"name\":\"_ipfsHashFunc\",\"type\":\"uint8\"},{\"name\":\"_ipfsHashSize\",\"type\":\"uint8\"},{\"name\":\"_heightRatio\",\"type\":\"uint8\"},{\"name\":\"_widthRatio\",\"type\":\"uint8\"},{\"name\":\"_country\",\"type\":\"string\"},{\"name\":\"_periodPercentagePriceDecrease\",\"type\":\"uint256\"},{\"name\":\"_priceDecreasePeriodLengthSecs\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_hashFunction\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_size\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"ImageChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sexual\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_violent\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_political\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_controversial\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_illegal\",\"type\":\"bool\"}],\"name\":\"RuleChange\",\"type\":\"event\"}]","ContractName":"Bitscreen","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"bd833c7bae634f9e2e89ac798e07ac19c87bfe622fe6fba995c12a2b36de0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://98bbecfe9f3bd8152c06fac222b570fa178ccd7131e04513eb689a65ac365bae"}]}