{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n        assert(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        assert(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        assert(token.approve(spender, value));\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    // ERC20 basic token contract being held\r\n    ERC20Basic public token;\r\n\r\n    // beneficiary of tokens after they are released\r\n    address public beneficiary;\r\n\r\n    // timestamp when token release is enabled\r\n    uint256 public releaseTime;\r\n\r\n    function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\r\n        require(_releaseTime > now);\r\n        token = _token;\r\n        beneficiary = _beneficiary;\r\n        releaseTime = _releaseTime;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens held by timelock to beneficiary.\r\n     */\r\n    function release() public {\r\n        require(now >= releaseTime);\r\n\r\n        uint256 amount = token.balanceOf(this);\r\n        require(amount > 0);\r\n\r\n        token.safeTransfer(beneficiary, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  event Released(uint256 amount);\r\n  event Revoked();\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  uint256 public cliff;\r\n  uint256 public start;\r\n  uint256 public duration;\r\n\r\n  bool public revocable;\r\n\r\n  mapping (address => uint256) public released;\r\n  mapping (address => bool) public revoked;\r\n\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n   * of the balance will have vested.\r\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param _duration duration in seconds of the period in which the tokens will vest\r\n   * @param _revocable whether the vesting is revocable or not\r\n   */\r\n  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\r\n    require(_beneficiary != address(0));\r\n    require(_cliff <= _duration);\r\n\r\n    beneficiary = _beneficiary;\r\n    revocable = _revocable;\r\n    duration = _duration;\r\n    cliff = _start.add(_cliff);\r\n    start = _start;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function release(ERC20Basic token) public {\r\n    uint256 unreleased = releasableAmount(token);\r\n\r\n    require(unreleased > 0);\r\n\r\n    released[token] = released[token].add(unreleased);\r\n\r\n    token.safeTransfer(beneficiary, unreleased);\r\n\r\n    Released(unreleased);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n   * remain in the contract, the rest are returned to the owner.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function revoke(ERC20Basic token) public onlyOwner {\r\n    require(revocable);\r\n    require(!revoked[token]);\r\n\r\n    uint256 balance = token.balanceOf(this);\r\n\r\n    uint256 unreleased = releasableAmount(token);\r\n    uint256 refund = balance.sub(unreleased);\r\n\r\n    revoked[token] = true;\r\n\r\n    token.safeTransfer(owner, refund);\r\n\r\n    Revoked();\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\r\n    return vestedAmount(token).sub(released[token]);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(this);\r\n    uint256 totalBalance = currentBalance.add(released[token]);\r\n\r\n    if (now < cliff) {\r\n      return 0;\r\n    } else if (now >= start.add(duration) || revoked[token]) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(now.sub(start)).div(duration);\r\n    }\r\n  }\r\n}\r\n\r\ncontract ILivepeerToken is ERC20, Ownable {\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n    function burn(uint256 _amount) public;\r\n}\r\n\r\ncontract GenesisManager is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // LivepeerToken contract\r\n    ILivepeerToken public token;\r\n\r\n    // Address of the token distribution contract\r\n    address public tokenDistribution;\r\n    // Address of the Livepeer bank multisig\r\n    address public bankMultisig;\r\n    // Address of the Minter contract in the Livepeer protocol\r\n    address public minter;\r\n\r\n    // Initial token supply issued\r\n    uint256 public initialSupply;\r\n    // Crowd's portion of the initial token supply\r\n    uint256 public crowdSupply;\r\n    // Company's portion of the initial token supply\r\n    uint256 public companySupply;\r\n    // Team's portion of the initial token supply\r\n    uint256 public teamSupply;\r\n    // Investors' portion of the initial token supply\r\n    uint256 public investorsSupply;\r\n    // Community's portion of the initial token supply\r\n    uint256 public communitySupply;\r\n\r\n    // Token amount in grants for the team\r\n    uint256 public teamGrantsAmount;\r\n    // Token amount in grants for investors\r\n    uint256 public investorsGrantsAmount;\r\n    // Token amount in grants for the community\r\n    uint256 public communityGrantsAmount;\r\n\r\n    // Timestamp at which vesting grants begin their vesting period\r\n    // and timelock grants release locked tokens\r\n    uint256 public grantsStartTimestamp;\r\n\r\n    // Map receiver addresses => contracts holding receivers' vesting tokens\r\n    mapping (address => address) public vestingHolders;\r\n    // Map receiver addresses => contracts holding receivers' time locked tokens\r\n    mapping (address => address) public timeLockedHolders;\r\n\r\n    enum Stages {\r\n        // Stage for setting the allocations of the initial token supply\r\n        GenesisAllocation,\r\n        // Stage for the creating token grants and the token distribution\r\n        GenesisStart,\r\n        // Stage for the end of genesis when ownership of the LivepeerToken contract\r\n        // is transferred to the protocol Minter\r\n        GenesisEnd\r\n    }\r\n\r\n    // Current stage of genesis\r\n    Stages public stage;\r\n\r\n    // Check if genesis is at a particular stage\r\n    modifier atStage(Stages _stage) {\r\n        require(stage == _stage);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev GenesisManager constructor\r\n     * @param _token Address of the Livepeer token contract\r\n     * @param _tokenDistribution Address of the token distribution contract\r\n     * @param _bankMultisig Address of the company bank multisig\r\n     * @param _minter Address of the protocol Minter\r\n     */\r\n    function GenesisManager(\r\n        address _token,\r\n        address _tokenDistribution,\r\n        address _bankMultisig,\r\n        address _minter,\r\n        uint256 _grantsStartTimestamp\r\n    )\r\n        public\r\n    {\r\n        token = ILivepeerToken(_token);\r\n        tokenDistribution = _tokenDistribution;\r\n        bankMultisig = _bankMultisig;\r\n        minter = _minter;\r\n        grantsStartTimestamp = _grantsStartTimestamp;\r\n\r\n        stage = Stages.GenesisAllocation;\r\n    }\r\n\r\n    /**\r\n     * @dev Set allocations for the initial token supply at genesis\r\n     * @param _initialSupply Initial token supply at genesis\r\n     * @param _crowdSupply Tokens allocated for the crowd at genesis\r\n     * @param _companySupply Tokens allocated for the company (for future distribution) at genesis\r\n     * @param _teamSupply Tokens allocated for the team at genesis\r\n     * @param _investorsSupply Tokens allocated for investors at genesis\r\n     * @param _communitySupply Tokens allocated for the community at genesis\r\n     */\r\n    function setAllocations(\r\n        uint256 _initialSupply,\r\n        uint256 _crowdSupply,\r\n        uint256 _companySupply,\r\n        uint256 _teamSupply,\r\n        uint256 _investorsSupply,\r\n        uint256 _communitySupply\r\n    )\r\n        external\r\n        onlyOwner\r\n        atStage(Stages.GenesisAllocation)\r\n    {\r\n        require(_crowdSupply.add(_companySupply).add(_teamSupply).add(_investorsSupply).add(_communitySupply) == _initialSupply);\r\n\r\n        initialSupply = _initialSupply;\r\n        crowdSupply = _crowdSupply;\r\n        companySupply = _companySupply;\r\n        teamSupply = _teamSupply;\r\n        investorsSupply = _investorsSupply;\r\n        communitySupply = _communitySupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Start genesis\r\n     */\r\n    function start() external onlyOwner atStage(Stages.GenesisAllocation) {\r\n        // Mint the initial supply\r\n        token.mint(this, initialSupply);\r\n\r\n        stage = Stages.GenesisStart;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a team grant for tokens with a vesting schedule\r\n     * @param _receiver Grant receiver\r\n     * @param _amount Amount of tokens included in the grant\r\n     * @param _timeToCliff Seconds until the vesting cliff\r\n     * @param _vestingDuration Seconds starting from the vesting cliff until the end of the vesting schedule\r\n     */\r\n    function addTeamGrant(\r\n        address _receiver,\r\n        uint256 _amount,\r\n        uint256 _timeToCliff,\r\n        uint256 _vestingDuration\r\n    )\r\n        external\r\n        onlyOwner\r\n        atStage(Stages.GenesisStart)\r\n    {\r\n        uint256 updatedGrantsAmount = teamGrantsAmount.add(_amount);\r\n        // Amount of tokens included in team grants cannot exceed the team supply during genesis\r\n        require(updatedGrantsAmount <= teamSupply);\r\n\r\n        teamGrantsAmount = updatedGrantsAmount;\r\n\r\n        addVestingGrant(_receiver, _amount, _timeToCliff, _vestingDuration);\r\n    }\r\n\r\n    /**\r\n     * @dev Add an investor grant for tokens with a vesting schedule\r\n     * @param _receiver Grant receiver\r\n     * @param _amount Amount of tokens included in the grant\r\n     * @param _timeToCliff Seconds until the vesting cliff\r\n     * @param _vestingDuration Seconds starting from the vesting cliff until the end of the vesting schedule\r\n     */\r\n    function addInvestorGrant(\r\n        address _receiver,\r\n        uint256 _amount,\r\n        uint256 _timeToCliff,\r\n        uint256 _vestingDuration\r\n    )\r\n        external\r\n        onlyOwner\r\n        atStage(Stages.GenesisStart)\r\n    {\r\n        uint256 updatedGrantsAmount = investorsGrantsAmount.add(_amount);\r\n        // Amount of tokens included in investor grants cannot exceed the investor supply during genesis\r\n        require(updatedGrantsAmount <= investorsSupply);\r\n\r\n        investorsGrantsAmount = updatedGrantsAmount;\r\n\r\n        addVestingGrant(_receiver, _amount, _timeToCliff, _vestingDuration);\r\n    }\r\n\r\n    /**\r\n     * @dev Add a grant for tokens with a vesting schedule. An internal helper function used by addTeamGrant and addInvestorGrant\r\n     * @param _receiver Grant receiver\r\n     * @param _amount Amount of tokens included in the grant\r\n     * @param _timeToCliff Seconds until the vesting cliff\r\n     * @param _vestingDuration Seconds starting from the vesting cliff until the end of the vesting schedule\r\n     */\r\n    function addVestingGrant(\r\n        address _receiver,\r\n        uint256 _amount,\r\n        uint256 _timeToCliff,\r\n        uint256 _vestingDuration\r\n    )\r\n        internal\r\n    {\r\n        // Receiver must not have already received a grant with a vesting schedule\r\n        require(vestingHolders[_receiver] == address(0));\r\n\r\n        // Create a vesting holder contract to act as the holder of the grant's tokens\r\n        // Note: the vesting grant is revokable\r\n        TokenVesting holder = new TokenVesting(_receiver, grantsStartTimestamp, _timeToCliff, _vestingDuration, true);\r\n        vestingHolders[_receiver] = holder;\r\n\r\n        // Transfer ownership of the vesting holder to the bank multisig\r\n        // giving the bank multisig the ability to revoke the grant\r\n        holder.transferOwnership(bankMultisig);\r\n\r\n        token.transfer(holder, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Add a community grant for tokens that are locked until a predetermined time in the future\r\n     * @param _receiver Grant receiver address\r\n     * @param _amount Amount of tokens included in the grant\r\n     */\r\n    function addCommunityGrant(\r\n        address _receiver,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        onlyOwner\r\n        atStage(Stages.GenesisStart)\r\n    {\r\n        uint256 updatedGrantsAmount = communityGrantsAmount.add(_amount);\r\n        // Amount of tokens included in investor grants cannot exceed the community supply during genesis\r\n        require(updatedGrantsAmount <= communitySupply);\r\n\r\n        communityGrantsAmount = updatedGrantsAmount;\r\n\r\n        // Receiver must not have already received a grant with timelocked tokens\r\n        require(timeLockedHolders[_receiver] == address(0));\r\n\r\n        // Create a timelocked holder contract to act as the holder of the grant's tokens\r\n        TokenTimelock holder = new TokenTimelock(token, _receiver, grantsStartTimestamp);\r\n        timeLockedHolders[_receiver] = holder;\r\n\r\n        token.transfer(holder, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev End genesis\r\n     */\r\n    function end() external onlyOwner atStage(Stages.GenesisStart) {\r\n        // Transfer the crowd supply to the token distribution contract\r\n        token.transfer(tokenDistribution, crowdSupply);\r\n        // Transfer company supply to the bank multisig\r\n        token.transfer(bankMultisig, companySupply);\r\n        // Transfer ownership of the LivepeerToken contract to the protocol Minter\r\n        token.transferOwnership(minter);\r\n\r\n        stage = Stages.GenesisEnd;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"investorsSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grantsStartTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityGrantsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsGrantsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamGrantsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addCommunityGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_crowdSupply\",\"type\":\"uint256\"},{\"name\":\"_companySupply\",\"type\":\"uint256\"},{\"name\":\"_teamSupply\",\"type\":\"uint256\"},{\"name\":\"_investorsSupply\",\"type\":\"uint256\"},{\"name\":\"_communitySupply\",\"type\":\"uint256\"}],\"name\":\"setAllocations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_timeToCliff\",\"type\":\"uint256\"},{\"name\":\"_vestingDuration\",\"type\":\"uint256\"}],\"name\":\"addTeamGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_timeToCliff\",\"type\":\"uint256\"},{\"name\":\"_vestingDuration\",\"type\":\"uint256\"}],\"name\":\"addInvestorGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeLockedHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communitySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenDistribution\",\"type\":\"address\"},{\"name\":\"_bankMultisig\",\"type\":\"address\"},{\"name\":\"_minter\",\"type\":\"address\"},{\"name\":\"_grantsStartTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GenesisManager","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ecb81b96e169882b8d6276b87a19cb47efbd1c4a000000000000000000000000e999ac1e8065d112ff3af3d8440bde70f1cb42f10000000000000000000000006941627cba3518385e75de75d25a189185672bfe00000000000000000000000042b486cd262a3b52c69dd8df3e040419531af01400000000000000000000000000000000000000000000000000008ab52ff9cf80","Library":"","SwarmSource":"bzzr://adb706cf50272fd73ab726a2872a727700b25740c5394cdd20e6d18436ad2979"}]}