{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n// DELEGATION SC\r\n\r\n// (c) SecureVote 2018\r\n\r\n// Released under MIT licence\r\n\r\ncontract SVDelegation {\r\n\r\n    address public owner;\r\n\r\n    struct Delegation {\r\n        uint256 thisDelegationId;\r\n        address dlgt;\r\n        uint256 setAtBlock;\r\n        uint256 prevDelegation;\r\n    }\r\n\r\n    mapping (address => mapping (address => Delegation)) tokenDlgts;\r\n    mapping (address => Delegation) globalDlgts;\r\n\r\n    mapping (uint256 => Delegation) public historicalDelegations;\r\n    uint256 public totalDelegations = 0;\r\n\r\n    event SetGlobalDelegation(address voter, address delegate);\r\n    event SetTokenDelegation(address voter, address tokenContract, address delegate);\r\n\r\n    function SVDelegation() public {\r\n        owner = msg.sender;\r\n\r\n        // commit the genesis historical delegation to history (like genesis block)\r\n        createDelegation(address(0), 0);\r\n    }\r\n\r\n    function createDelegation(address dlgtAddress, uint256 prevDelegationId) internal returns(Delegation) {\r\n        uint256 myDelegationId = totalDelegations;\r\n        historicalDelegations[myDelegationId] = Delegation(myDelegationId, dlgtAddress, block.number, prevDelegationId);\r\n        totalDelegations += 1;\r\n\r\n        return historicalDelegations[myDelegationId];\r\n    }\r\n\r\n    // get previous delegation, create new delegation via function and then commit to globalDlgts\r\n    function setGlobalDelegation(address dlgtAddress) public {\r\n        uint256 prevDelegationId = globalDlgts[msg.sender].thisDelegationId;\r\n        globalDlgts[msg.sender] = createDelegation(dlgtAddress, prevDelegationId);\r\n        SetGlobalDelegation(msg.sender, dlgtAddress);\r\n    }\r\n\r\n    // get previous delegation, create new delegation via function and then commit to tokenDlgts\r\n    function setTokenDelegation(address tokenContract, address dlgtAddress) public {\r\n        uint256 prevDelegationId = tokenDlgts[tokenContract][msg.sender].thisDelegationId;\r\n        tokenDlgts[tokenContract][msg.sender] = createDelegation(dlgtAddress, prevDelegationId);\r\n        SetTokenDelegation(msg.sender, tokenContract, dlgtAddress);\r\n    }\r\n\r\n    function resolveDelegation(address voter, address tokenContract) public constant returns(uint256, address, uint256, uint256) {\r\n        Delegation memory _tokenDlgt = tokenDlgts[tokenContract][voter];\r\n\r\n        // probs simplest test to check if we have a valid delegation\r\n        if (_tokenDlgt.setAtBlock > 0) {\r\n            return _dlgtRet(_tokenDlgt);\r\n        } else {\r\n            return _dlgtRet(globalDlgts[voter]);\r\n        }\r\n    }\r\n\r\n    function _rawGetGlobalDelegation(address _voter) public constant returns(uint256, address, uint256, uint256) {\r\n        return _dlgtRet(globalDlgts[_voter]);\r\n    }\r\n\r\n    function _rawGetTokenDelegation(address _voter, address _tokenContract) public constant returns(uint256, address, uint256, uint256) {\r\n        return _dlgtRet(tokenDlgts[_tokenContract][_voter]);\r\n    }\r\n\r\n    function _dlgtRet(Delegation d) internal pure returns(uint256, address, uint256, uint256) {\r\n        return (d.thisDelegationId, d.dlgt, d.setAtBlock, d.prevDelegation);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalDelegations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historicalDelegations\",\"outputs\":[{\"name\":\"thisDelegationId\",\"type\":\"uint256\"},{\"name\":\"dlgt\",\"type\":\"address\"},{\"name\":\"setAtBlock\",\"type\":\"uint256\"},{\"name\":\"prevDelegation\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"},{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"_rawGetTokenDelegation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"},{\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"resolveDelegation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dlgtAddress\",\"type\":\"address\"}],\"name\":\"setGlobalDelegation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContract\",\"type\":\"address\"},{\"name\":\"dlgtAddress\",\"type\":\"address\"}],\"name\":\"setTokenDelegation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"_rawGetGlobalDelegation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"SetGlobalDelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"SetTokenDelegation\",\"type\":\"event\"}]","ContractName":"SVDelegation","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://42931361f348110e80191acdbca2ca81a77aca990fbacc38e7df08b44841e2f1"}]}