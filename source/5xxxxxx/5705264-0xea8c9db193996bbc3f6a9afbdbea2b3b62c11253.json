{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    // The Ownable constructor sets the original `owner` \r\n    // of the contract to the sender account.\r\n    constructor()  public {\r\n        owner = msg.sender;\r\n    } \r\n\r\n    // Throw if called by any account other than the current owner\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // Allow the current owner to transfer control of the contract to a newOwner\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract RAcoinToken is Ownable, ERC20Interface {\r\n    string public constant symbol = \"RAC\";\r\n    string public constant name = \"RAcoinToken\";\r\n    uint private _totalSupply;\r\n    uint public constant decimals = 18;\r\n    uint private unmintedTokens = 20000000000*uint(10)**decimals; \r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    \r\n    //Struct to hold lockup records\r\n    struct LockupRecord {\r\n        uint amount;\r\n        uint unlockTime;\r\n    }\r\n    \r\n    // Balances for each account\r\n    mapping(address => uint) balances;\r\n    \r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint)) allowed; \r\n    \r\n    // Balances for lockup accounts\r\n    mapping(address => LockupRecord)balancesLockup;\r\n\r\n\r\n\r\n    /**\r\n     ====== JACKPOT IMPLEMENTATION ====== \r\n     */\r\n\r\n    // Percentage for jackpot reserving during tokens transfer, 1% is default\r\n    uint public reservingPercentage = 100;\r\n    \r\n    // Minimum allowed variable percentage for jackpot reserving during tokens transfer, 0.01% is default\r\n    uint public minAllowedReservingPercentage = 1;\r\n    \r\n    // Maximu, allowed variable percentage for jackpot reserving during tokens transfer, 10% is default\r\n    uint public maxAllowedReservingPercentage = 1000;\r\n    \r\n    // Minimum amount of jackpot, before reaching it jackpot cannot be distributed. \r\n    // Default value is 100,000 RAC\r\n    uint public jackpotMinimumAmount = 100000 * uint(10)**decimals; \r\n    \r\n    // reservingStep is used for calculating how many times a user will be added to jackpot participants list:\r\n    // times user will be added to jackpotParticipants list = transfer amount / reservingStep\r\n    // the more user transfer tokens using transferWithReserving function the more times he will be added and, \r\n    // as a result, more chances to win the jackpot. Default value is 10,000 RAC\r\n    uint public reservingStep = 10000 * uint(10)**decimals; \r\n    \r\n    // The seed is used each time Jackpot is distributing for generating a random number.\r\n    // First seed has some value, after the every turn of the jackpot distribution will be changed \r\n    uint private seed = 1; // Default seed \r\n    \r\n    // The maximum allowed times when jackpot amount and distribution time will be set by owner,\r\n    // Used only for token sale jackpot distribution \r\n    int public maxAllowedManualDistribution = 111; \r\n\r\n    // Either or not clear the jackpot participants list after the Jackpot distribution\r\n    bool public clearJackpotParticipantsAfterDistribution = false;\r\n\r\n    // Variable that holds last actual index of jackpotParticipants collection\r\n    uint private index = 0; \r\n\r\n    // The list with Jackpot participants. The more times address is in the list, the more chances to win the Jackpot\r\n    address[] private jackpotParticipants; \r\n\r\n    event SetReservingPercentage(uint _value);\r\n    event SetMinAllowedReservingPercentage(uint _value);\r\n    event SetMaxAllowedReservingPercentage(uint _value);\r\n    event SetReservingStep(uint _value);\r\n    event SetJackpotMinimumAmount(uint _value);\r\n    event AddAddressToJackpotParticipants(address indexed _sender, uint _times);\r\n    \r\n    //Setting the reservingPercentage value, allowed only for owner\r\n    function setReservingPercentage(uint _value) public onlyOwner returns (bool success) {\r\n        assert(_value > 0 && _value < 10000);\r\n        \r\n        reservingPercentage = _value;\r\n        emit SetReservingPercentage(_value);\r\n        return true;\r\n    }\r\n    \r\n    //Setting the minAllowedReservingPercentage value, allowed only for owner\r\n    function setMinAllowedReservingPercentage(uint _value) public onlyOwner returns (bool success) {\r\n        assert(_value > 0 && _value < 10000);\r\n        \r\n        minAllowedReservingPercentage = _value;\r\n        emit SetMinAllowedReservingPercentage(_value);\r\n        return true;\r\n    }\r\n    \r\n    //Setting the maxAllowedReservingPercentage value, allowed only for owner\r\n    function setMaxAllowedReservingPercentage(uint _value) public onlyOwner returns (bool success) {\r\n        assert(_value > 0 && _value < 10000);\r\n        \r\n        minAllowedReservingPercentage = _value;\r\n        emit SetMaxAllowedReservingPercentage(_value);\r\n        return true;\r\n    }\r\n    \r\n    //Setting the reservingStep value, allowed only for owner\r\n    function setReservingStep(uint _value) public onlyOwner returns (bool success) {\r\n        assert(_value > 0);\r\n        reservingStep = _value;\r\n        emit SetReservingStep(_value);\r\n        return true;\r\n    }\r\n    \r\n    //Setting the setJackpotMinimumAmount value, allowed only for owner\r\n    function setJackpotMinimumAmount(uint _value) public onlyOwner returns (bool success) {\r\n        jackpotMinimumAmount = _value;\r\n        emit SetJackpotMinimumAmount(_value);\r\n        return true;\r\n    }\r\n\r\n    //Setting the clearJackpotParticipantsAfterDistribution value, allowed only for owner\r\n    function setPoliticsForJackpotParticipantsList(bool _clearAfterDistribution) public onlyOwner returns (bool success) {\r\n        clearJackpotParticipantsAfterDistribution = _clearAfterDistribution;\r\n        return true;\r\n    }\r\n    \r\n    // Empty the jackpot participants list\r\n    function clearJackpotParticipants() public onlyOwner returns (bool success) {\r\n        index = 0;\r\n        return true;\r\n    }\r\n    \r\n    // Using this function a user transfers tokens and participates in operating jackpot \r\n    // User sets the total transfer amount that includes the Jackpot reserving deposit\r\n    function transferWithReserving(address _to, uint _totalTransfer) public returns (bool success) {\r\n        uint netTransfer = _totalTransfer * (10000 - reservingPercentage) / 10000; \r\n        require(balances[msg.sender] >= _totalTransfer && (_totalTransfer > netTransfer));\r\n        \r\n        if (transferMain(msg.sender, _to, netTransfer) && (_totalTransfer >= reservingStep)) {\r\n            processJackpotDeposit(_totalTransfer, netTransfer, msg.sender);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Using this function a user transfers tokens and participates in operating jackpot \r\n    // User sets the net value of transfer without the Jackpot reserving deposit amount \r\n    function transferWithReservingNet(address _to, uint _netTransfer) public returns (bool success) {\r\n        uint totalTransfer = _netTransfer * (10000 + reservingPercentage) / 10000; \r\n        require(balances[msg.sender] >= totalTransfer && (totalTransfer > _netTransfer));\r\n        \r\n        if (transferMain(msg.sender, _to, _netTransfer) && (totalTransfer >= reservingStep)) {\r\n            processJackpotDeposit(totalTransfer, _netTransfer, msg.sender);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    // Using this function a user transfers tokens and participates in operating jackpot \r\n    // User sets the total transfer amount that includes the Jackpot reserving deposit and custom reserving percentage\r\n    function transferWithCustomReserving(address _to, uint _totalTransfer, uint _customReservingPercentage) public returns (bool success) {\r\n        require(_customReservingPercentage > minAllowedReservingPercentage && _customReservingPercentage < maxAllowedReservingPercentage);\r\n        uint netTransfer = _totalTransfer * (10000 - _customReservingPercentage) / 10000; \r\n        require(balances[msg.sender] >= _totalTransfer && (_totalTransfer > netTransfer));\r\n        \r\n        if (transferMain(msg.sender, _to, netTransfer) && (_totalTransfer >= reservingStep)) {\r\n            processJackpotDeposit(_totalTransfer, netTransfer, msg.sender);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    // Using this function a user transfers tokens and participates in operating jackpot \r\n    // User sets the net value of transfer without the Jackpot reserving deposit amount and custom reserving percentage\r\n    function transferWithCustomReservingNet(address _to, uint _netTransfer, uint _customReservingPercentage) public returns (bool success) {\r\n        require(_customReservingPercentage > minAllowedReservingPercentage && _customReservingPercentage < maxAllowedReservingPercentage);\r\n        uint totalTransfer = _netTransfer * (10000 + _customReservingPercentage) / 10000; \r\n        require(balances[msg.sender] >= totalTransfer && (totalTransfer > _netTransfer));\r\n        \r\n        if (transferMain(msg.sender, _to, _netTransfer) && (totalTransfer >= reservingStep)) {\r\n            processJackpotDeposit(totalTransfer, _netTransfer, msg.sender);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Using this function a spender transfers tokens and make an owner of funds a participant of the operating Jackpot \r\n    // User sets the total transfer amount that includes the Jackpot reserving deposit\r\n    function transferFromWithReserving(address _from, address _to, uint _totalTransfer) public returns (bool success) {\r\n        uint netTransfer = _totalTransfer * (10000 - reservingPercentage) / 10000; \r\n        require(balances[_from] >= _totalTransfer && (_totalTransfer > netTransfer));\r\n        \r\n        if (transferFrom(_from, _to, netTransfer) && (_totalTransfer >= reservingStep)) {\r\n            processJackpotDeposit(_totalTransfer, netTransfer, _from);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Using this function a spender transfers tokens and make an owner of funds a participatants of the operating Jackpot \r\n    // User set the net value of transfer without the Jackpot reserving deposit amount \r\n    function transferFromWithReservingNet(address _from, address _to, uint _netTransfer) public returns (bool success) {\r\n        uint totalTransfer = _netTransfer * (10000 + reservingPercentage) / 10000; \r\n        require(balances[_from] >= totalTransfer && (totalTransfer > _netTransfer));\r\n\r\n        if (transferFrom(_from, _to, _netTransfer) && (totalTransfer >= reservingStep)) {\r\n            processJackpotDeposit(totalTransfer, _netTransfer, _from);\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    // Using this function a spender transfers tokens and make an owner of funds a participant of the operating Jackpot \r\n    // User sets the total transfer amount that includes the Jackpot reserving deposit\r\n    function transferFromWithCustomReserving(address _from, address _to, uint _totalTransfer, uint _customReservingPercentage) public returns (bool success) {\r\n        require(_customReservingPercentage > minAllowedReservingPercentage && _customReservingPercentage < maxAllowedReservingPercentage);\r\n        uint netTransfer = _totalTransfer * (10000 - _customReservingPercentage) / 10000; \r\n        require(balances[_from] >= _totalTransfer && (_totalTransfer > netTransfer));\r\n        \r\n        if (transferFrom(_from, _to, netTransfer) && (_totalTransfer >= reservingStep)) {\r\n            processJackpotDeposit(_totalTransfer, netTransfer, _from);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Using this function a spender transfers tokens and make an owner of funds a participatants of the operating Jackpot \r\n    // User set the net value of transfer without the Jackpot reserving deposit amount and custom reserving percentage\r\n    function transferFromWithCustomReservingNet(address _from, address _to, uint _netTransfer, uint _customReservingPercentage) public returns (bool success) {\r\n        require(_customReservingPercentage > minAllowedReservingPercentage && _customReservingPercentage < maxAllowedReservingPercentage);\r\n        uint totalTransfer = _netTransfer * (10000 + _customReservingPercentage) / 10000; \r\n        require(balances[_from] >= totalTransfer && (totalTransfer > _netTransfer));\r\n\r\n        if (transferFrom(_from, _to, _netTransfer) && (totalTransfer >= reservingStep)) {\r\n            processJackpotDeposit(totalTransfer, _netTransfer, _from);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    // Withdraw deposit of Jackpot amount and add address to Jackpot Participants List according to transaction amount\r\n    function processJackpotDeposit(uint _totalTransfer, uint _netTransfer, address _participant) private returns (bool success) {\r\n        addAddressToJackpotParticipants(_participant, _totalTransfer);\r\n\r\n        uint jackpotDeposit = _totalTransfer - _netTransfer;\r\n        balances[_participant] -= jackpotDeposit;\r\n        balances[0] += jackpotDeposit;\r\n\r\n        emit Transfer(_participant, 0, jackpotDeposit);\r\n        return true;\r\n    }\r\n\r\n    // Add address to Jackpot Participants List\r\n    function addAddressToJackpotParticipants(address _participant, uint _transactionAmount) private returns (bool success) {\r\n        uint timesToAdd = _transactionAmount / reservingStep;\r\n        \r\n        for (uint i = 0; i < timesToAdd; i++){\r\n            if(index == jackpotParticipants.length) {\r\n                jackpotParticipants.length += 1;\r\n            }\r\n            jackpotParticipants[index++] = _participant;\r\n        }\r\n\r\n        emit AddAddressToJackpotParticipants(_participant, timesToAdd);\r\n        return true;        \r\n    }\r\n    \r\n    // Distribute jackpot. For finding a winner we use random number that is produced by multiplying a previous seed  \r\n    // received from previous jackpot distribution and casted to uint last available block hash. \r\n    // Remainder from the received random number and total number of participants will give an index of a winner in the Jackpot participants list\r\n    function distributeJackpot(uint _nextSeed) public onlyOwner returns (bool success) {\r\n        assert(balances[0] >= jackpotMinimumAmount);\r\n        assert(_nextSeed > 0);\r\n\r\n        uint additionalSeed = uint(blockhash(block.number - 1));\r\n        uint rnd = 0;\r\n        \r\n        while(rnd < index) {\r\n            rnd += additionalSeed * seed;\r\n        }\r\n        \r\n        uint winner = rnd % index;\r\n        balances[jackpotParticipants[winner]] += balances[0];\r\n        emit Transfer(0, jackpotParticipants[winner], balances[0]);\r\n        balances[0] = 0;\r\n        seed = _nextSeed;\r\n\r\n        if (clearJackpotParticipantsAfterDistribution) {\r\n            clearJackpotParticipants();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Distribute Token Sale Jackpot by minting token sale jackpot directly to 0x0 address and calling distributeJackpot function \r\n    function distributeTokenSaleJackpot(uint _nextSeed, uint _amount) public onlyOwner returns (bool success) {\r\n        require (maxAllowedManualDistribution > 0);\r\n        if (mintTokens(0, _amount) && distributeJackpot(_nextSeed)) {\r\n            maxAllowedManualDistribution--;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    /** \r\n     ====== ERC20 IMPLEMENTATION ====== \r\n     */\r\n    \r\n    // Return total supply of tokens including locked-up funds and current Jackpot deposit\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // Get the balance of the specified address\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Transfer token to a specified address   \r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        return transferMain(msg.sender, _to, _value);\r\n    }\r\n\r\n    // Transfer tokens from one address to another \r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        require(balances[_from] >= _value);\r\n        require(allowed[_from][msg.sender] >= _value);\r\n\r\n        if (transferMain(_from, _to, _value)){\r\n            allowed[_from][msg.sender] -= _value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Main transfer function. Checking of balances is made in calling function\r\n    function transferMain(address _from, address _to, uint _value) private returns (bool success) {\r\n        require(_to != address(0));\r\n        assert(balances[_to] + _value >= balances[_to]);\r\n        \r\n        balances[_from] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // Function to check the amount of tokens than an owner allowed to a spender\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n\r\n\r\n    /**\r\n     ====== LOCK-UP IMPLEMENTATION ====== \r\n     */\r\n\r\n    function unlockOwnFunds() public returns (bool success) {\r\n        return unlockFunds(msg.sender);\r\n    }\r\n\r\n    function unlockSupervisedFunds(address _from) public onlyOwner returns (bool success) {\r\n        return unlockFunds(_from);\r\n    }\r\n    \r\n    function unlockFunds(address _owner) private returns (bool success) {\r\n        require(balancesLockup[_owner].unlockTime < now && balancesLockup[_owner].amount > 0);\r\n\r\n        balances[_owner] += balancesLockup[_owner].amount;\r\n        emit Transfer(_owner, _owner, balancesLockup[_owner].amount);\r\n        balancesLockup[_owner].amount = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOfLockup(address _owner) public view returns (uint balance, uint unlockTime) {\r\n        return (balancesLockup[_owner].amount, balancesLockup[_owner].unlockTime);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     ====== TOKENS MINTING IMPLEMENTATION ====== \r\n     */\r\n\r\n    // Mint RAcoin tokens. No more than 20,000,000,000 RAC can be minted\r\n    function mintTokens(address _target, uint _mintedAmount) public onlyOwner returns (bool success) {\r\n        require(_mintedAmount <= unmintedTokens);\r\n        balances[_target] += _mintedAmount;\r\n        unmintedTokens -= _mintedAmount;\r\n        _totalSupply += _mintedAmount;\r\n        \r\n        emit Transfer(1, _target, _mintedAmount); \r\n        return true;\r\n    }\r\n\r\n    // Mint RAcoin locked-up tokens\r\n    // Using different types of minting functions has no effect on total limit of 20,000,000,000 RAC that can be created\r\n    function mintLockupTokens(address _target, uint _mintedAmount, uint _unlockTime) public onlyOwner returns (bool success) {\r\n        require(_mintedAmount <= unmintedTokens);\r\n\r\n        balancesLockup[_target].amount += _mintedAmount;\r\n        balancesLockup[_target].unlockTime = _unlockTime;\r\n        unmintedTokens -= _mintedAmount;\r\n        _totalSupply += _mintedAmount;\r\n        \r\n        emit Transfer(1, _target, _mintedAmount); //TODO\r\n        return true;\r\n    }\r\n\r\n    // Mint RAcoin tokens for token sale participants and add them to Jackpot list\r\n    // Using different types of minting functions has no effect on total limit of 20,000,000,000 RAC that can be created\r\n    function mintTokensWithIncludingInJackpot(address _target, uint _mintedAmount) public onlyOwner returns (bool success) {\r\n        require(maxAllowedManualDistribution > 0);\r\n        if (mintTokens(_target, _mintedAmount)) {\r\n            addAddressToJackpotParticipants(_target, _mintedAmount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Mint RAcoin tokens and approve the passed address to spend the minted amount of tokens\r\n    // Using different types of minting functions has no effect on total limit of 20,000,000,000 RAC that can be created\r\n    function mintTokensWithApproval(address _target, uint _mintedAmount, address _spender) public onlyOwner returns (bool success) {\r\n        require(_mintedAmount <= unmintedTokens);\r\n        balances[_target] += _mintedAmount;\r\n        unmintedTokens -= _mintedAmount;\r\n        _totalSupply += _mintedAmount;\r\n        allowed[_target][_spender] += _mintedAmount;\r\n        \r\n        emit Transfer(1, _target, _mintedAmount);\r\n        return true;\r\n    }\r\n\r\n    // After firing this function no more tokens can be created  \r\n    function stopTokenMinting() public onlyOwner returns (bool success) {\r\n        unmintedTokens = 0;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setReservingPercentage\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clearJackpotParticipantsAfterDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_totalTransfer\",\"type\":\"uint256\"}],\"name\":\"transferFromWithReserving\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_netTransfer\",\"type\":\"uint256\"},{\"name\":\"_customReservingPercentage\",\"type\":\"uint256\"}],\"name\":\"transferFromWithCustomReservingNet\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintTokensWithIncludingInJackpot\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservingPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopTokenMinting\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_netTransfer\",\"type\":\"uint256\"}],\"name\":\"transferFromWithReservingNet\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockOwnFunds\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfLockup\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotMinimumAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_netTransfer\",\"type\":\"uint256\"}],\"name\":\"transferWithReservingNet\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextSeed\",\"type\":\"uint256\"}],\"name\":\"distributeJackpot\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxAllowedReservingPercentage\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"},{\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"mintLockupTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextSeed\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeTokenSaleJackpot\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_totalTransfer\",\"type\":\"uint256\"},{\"name\":\"_customReservingPercentage\",\"type\":\"uint256\"}],\"name\":\"transferWithCustomReserving\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"mintTokensWithApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAllowedManualDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservingStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setJackpotMinimumAmount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_totalTransfer\",\"type\":\"uint256\"},{\"name\":\"_customReservingPercentage\",\"type\":\"uint256\"}],\"name\":\"transferFromWithCustomReserving\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAllowedReservingPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearAfterDistribution\",\"type\":\"bool\"}],\"name\":\"setPoliticsForJackpotParticipantsList\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAllowedReservingPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"unlockSupervisedFunds\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_netTransfer\",\"type\":\"uint256\"},{\"name\":\"_customReservingPercentage\",\"type\":\"uint256\"}],\"name\":\"transferWithCustomReservingNet\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearJackpotParticipants\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setReservingStep\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_totalTransfer\",\"type\":\"uint256\"}],\"name\":\"transferWithReserving\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinAllowedReservingPercentage\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SetReservingPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SetMinAllowedReservingPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SetMaxAllowedReservingPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SetReservingStep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SetJackpotMinimumAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_times\",\"type\":\"uint256\"}],\"name\":\"AddAddressToJackpotParticipants\",\"type\":\"event\"}]","ContractName":"RAcoinToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4df8d3967609d30d5878adb2386b4d4446b7bfb84bc252be0a8f265eae4dde73"}]}