{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Reference Code\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/examples/SimpleToken.sol\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n   * @dev Multiplies two numbers, throws on overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two numbers, truncating the quotient.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two numbers, throws on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20\r\n * @dev Standard ERC20 token interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title mameCoin\r\n * @dev see https://mamecoin.jp/\r\n */\r\ncontract mameCoin is ERC20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping(address => mapping (address => uint256)) internal allowed;\r\n  mapping(address => uint256) internal lockups;\r\n\r\n  string public constant name = \"mameCoin\";\r\n  string public constant symbol = \"MAME\";\r\n  uint8 public constant decimals = 8;\r\n  uint256 totalSupply_ = 25000000000 * (10 ** uint256(decimals));\r\n\r\n  event Burn(address indexed to, uint256 amount);\r\n  event Refund(address indexed to, uint256 amount);\r\n  event Lockup(address indexed to, uint256 lockuptime);\r\n\r\n  /**\r\n   * @dev Constructor that gives msg.sender all of existing tokens.\r\n   */\r\n  constructor() public {\r\n    balances[msg.sender] = totalSupply_;\r\n    emit Transfer(address(0), msg.sender, totalSupply_);\r\n  }\r\n\r\n  /**\r\n   * @dev total number of tokens in existence\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address.\r\n   * @param _owner The address to query the the balance of.\r\n   * @return An uint256 representing the amount owned by the passed address.\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev transfer token for a specified address\r\n   * @param _to The address to transfer to.\r\n   * @param _amount The amount to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _amount) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_amount <= balances[msg.sender]);\r\n    require(block.timestamp > lockups[msg.sender]);\r\n    require(block.timestamp > lockups[_to]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Transfer(msg.sender, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _amount uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_amount <= balances[_from]);\r\n    require(_amount <= allowed[_from][msg.sender]);\r\n    require(block.timestamp > lockups[_from]);\r\n    require(block.timestamp > lockups[_to]);\r\n\r\n    balances[_from] = balances[_from].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n    emit Transfer(_from, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _amount The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _amount) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _amount;\r\n    emit Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _to address The address which is burned.\r\n   * @param _amount The amount of token to be burned.\r\n   */\r\n  function burn(address _to, uint256 _amount) public onlyOwner {\r\n    require(_amount <= balances[_to]);\r\n    require(block.timestamp > lockups[_to]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_to] = balances[_to].sub(_amount);\r\n    totalSupply_ = totalSupply_.sub(_amount);\r\n    emit Burn(_to, _amount);\r\n    emit Transfer(_to, address(0), _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Refund a specific amount of tokens.\r\n   * @param _to The address that will receive the refunded tokens.\r\n   * @param _amount The amount of tokens to refund.\r\n   */\r\n  function refund(address _to, uint256 _amount) public onlyOwner {\r\n    require(block.timestamp > lockups[_to]);\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Refund(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the lockuptime of the specified address.\r\n   * @param _owner The address to query the the lockup of.\r\n   * @return An uint256 unixstime the lockuptime which is locked until that time.\r\n   */\r\n  function lockupOf(address _owner) public view returns (uint256) {\r\n    return lockups[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Lockup a specific address until given time.\r\n   * @param _to address The address which is locked.\r\n   * @param _lockupTimeUntil The lockuptime which is locked until that time.\r\n   */\r\n  function lockup(address _to, uint256 _lockupTimeUntil) public onlyOwner {\r\n    require(lockups[_to] < _lockupTimeUntil);\r\n    lockups[_to] = _lockupTimeUntil;\r\n    emit Lockup(_to, _lockupTimeUntil);\r\n  }\r\n\r\n  /**\r\n   * @dev airdrop tokens for a specified addresses\r\n   * @param _receivers The addresses to transfer to.\r\n   * @param _amount The amount to be transferred.\r\n   */\r\n  function airdrop(address[] _receivers, uint256 _amount) public returns (bool) {\r\n    require(block.timestamp > lockups[msg.sender]);\r\n    require(_receivers.length > 0);\r\n    require(_amount > 0);\r\n\r\n    uint256 _total = 0;\r\n\r\n    for (uint256 i = 0; i < _receivers.length; i++) {\r\n      require(_receivers[i] != address(0));\r\n      require(block.timestamp > lockups[_receivers[i]]);\r\n      _total = _total.add(_amount);\r\n    }\r\n\r\n    require(_total <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_total);\r\n\r\n    for (i = 0; i < _receivers.length; i++) {\r\n      balances[_receivers[i]] = balances[_receivers[i]].add(_amount);\r\n      emit Transfer(msg.sender, _receivers[i], _amount);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev distribute tokens for a specified addresses\r\n   * @param _receivers The addresses to transfer to.\r\n   * @param _amounts The amounts to be transferred.\r\n   */\r\n  function distribute(address[] _receivers, uint256[] _amounts) public returns (bool) {\r\n    require(block.timestamp > lockups[msg.sender]);\r\n    require(_receivers.length > 0);\r\n    require(_amounts.length > 0);\r\n    require(_receivers.length == _amounts.length);\r\n\r\n    uint256 _total = 0;\r\n\r\n    for (uint256 i = 0; i < _receivers.length; i++) {\r\n      require(_receivers[i] != address(0));\r\n      require(block.timestamp > lockups[_receivers[i]]);\r\n      require(_amounts[i] > 0);\r\n      _total = _total.add(_amounts[i]);\r\n    }\r\n\r\n    require(_total <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_total);\r\n\r\n    for (i = 0; i < _receivers.length; i++) {\r\n      balances[_receivers[i]] = balances[_receivers[i]].add(_amounts[i]);\r\n      emit Transfer(msg.sender, _receivers[i], _amounts[i]);\r\n    }\r\n\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receivers\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_lockupTimeUntil\",\"type\":\"uint256\"}],\"name\":\"lockup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockupOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receivers\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lockuptime\",\"type\":\"uint256\"}],\"name\":\"Lockup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"mameCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e20f6efef0003d63e33a0fce9d0cbdb7ad6bf5c04d2f0096a067a0a74823873b"}]}