{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Nines {\r\n  event NewOne(address owner, uint256 cost, uint256 new_price);\r\n\r\n  struct Nine {\r\n    address owner;\r\n    uint256 cost;\r\n  }    \r\n\r\n  mapping (uint256 => Nine) public nines;\r\n  mapping (address => string) public msgs;\r\n\r\n  address public ceoAddress;\r\n  uint256 public seatPrice = 1000000000000000;\r\n\r\n  modifier onlyCEO() { require(msg.sender == ceoAddress); _; }\r\n\r\n  function Nines() public {\r\n    ceoAddress = msg.sender;\r\n    nines[1] = Nine(msg.sender, 0);\r\n    nines[2] = Nine(msg.sender, 0);\r\n    nines[3] = Nine(msg.sender, 0);\r\n    nines[4] = Nine(msg.sender, 0);\r\n    nines[5] = Nine(msg.sender, 0);\r\n    nines[6] = Nine(msg.sender, 0);\r\n    nines[7] = Nine(msg.sender, 0);\r\n    nines[8] = Nine(msg.sender, 0);\r\n    nines[9] = Nine(msg.sender, 0);\r\n    msgs[msg.sender] = \"Claim this spot!\";\r\n  }\r\n\r\n  function getNine(uint256 _slot) public view returns (\r\n    uint256 slot,\r\n    address owner,\r\n    uint256 cost,\r\n    string message\r\n  ) {\r\n    slot = _slot;\r\n    owner = nines[_slot].owner;\r\n    cost = nines[_slot].cost;\r\n    message = msgs[nines[_slot].owner];\r\n  }\r\n\r\n  function purchase() public payable {\r\n    require(msg.sender != address(0));\r\n    require(msg.value >= seatPrice);\r\n    uint256 excess = SafeMath.sub(msg.value, seatPrice);\r\n    nines[1].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    nines[2].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    nines[3].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    nines[4].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    nines[5].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    nines[6].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    nines[7].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    nines[8].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    nines[9].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    nines[9] = nines[8]; nines[8] = nines[7]; nines[7] = nines[6];\r\n    nines[6] = nines[5]; nines[5] = nines[4]; nines[4] = nines[3];\r\n    nines[3] = nines[2]; nines[2] = nines[1];\r\n    nines[1] = Nine(msg.sender, seatPrice);\r\n    ceoAddress.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 19)));\r\n    NewOne(msg.sender, seatPrice, SafeMath.mul(SafeMath.div(seatPrice, 100), 109));\r\n    seatPrice = SafeMath.mul(SafeMath.div(seatPrice, 100), 109);\r\n    msg.sender.transfer(excess);\r\n  }\r\n  \r\n  function setMessage(string message) public payable {\r\n    msgs[msg.sender] = message;\r\n  }\r\n\r\n  function payout() public onlyCEO {\r\n    ceoAddress.transfer(this.balance);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seatPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"msgs\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"setMessage\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nines\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"getNine\",\"outputs\":[{\"name\":\"slot\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cost\",\"type\":\"uint256\"},{\"name\":\"message\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_price\",\"type\":\"uint256\"}],\"name\":\"NewOne\",\"type\":\"event\"}]","ContractName":"Nines","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://813a3d597b3d9fd78cec92396b924acf31f612a292447553ac19733c75901d30"}]}