{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract theCyberGatekeeperInterface {\r\n    function enter(bytes32 _passcode, bytes8 _gateKey) public returns (bool);\r\n}\r\n\r\ncontract theCyberKey {\r\n    address private gatekeeperAddress = 0x44919b8026f38D70437A8eB3BE47B06aB1c3E4Bf;\r\n\r\n    function setGatekeeperAddress(address gatekeeper) public {\r\n        gatekeeperAddress = gatekeeper;\r\n    }\r\n\r\n    function enter(bytes32 passcode) public returns (bool) {\r\n        bytes8 key = generateKey();\r\n        return theCyberGatekeeperInterface(gatekeeperAddress).enter(passcode, key);\r\n    }\r\n\r\n    function generateKey() private returns (bytes8 key) {\r\n        // Below are the checks:\r\n        // require(uint32(_gateKey) == uint16(_gateKey));\r\n        // require(uint32(_gateKey) != uint64(_gateKey));\r\n        // require(uint32(_gateKey) == uint16(tx.origin));\r\n\r\n        // Check 1:\r\n        //   the lower 4 bytes equal the lower 2 bytes; this can be implemented by padding the lower 2 bytes\r\n        //   with 0's for the upper 2 bytes: 00 00 XX XX\r\n        //   we'll start with initializing lower 4 to 0 to accomplish this;\r\n        uint32 lower4Bytes = 0;\r\n\r\n        // Check 2:\r\n        //   Lower 4 bytes can't equal all bytes (which means upper 4 cannot equal 0)\r\n        //   Set upper 4 to 1\r\n        uint32 upper4Bytes = 1;\r\n\r\n        // Check 3:\r\n        //  The lower 2 bytes of the original transmitter should equal to the lower 4 bytes of the key\r\n        //  This checks out with check 1 which says lower 4 bytes should have 2 upper zero bytes\r\n        uint16 lower2Bytes = uint16(tx.origin);\r\n\r\n        // Assemble key\r\n        lower4Bytes |= lower2Bytes;\r\n        uint64 allBytes = lower4Bytes;\r\n        allBytes |= uint64(upper4Bytes) << 32;\r\n        key = bytes8(allBytes);\r\n\r\n        return key;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"passcode\",\"type\":\"bytes32\"}],\"name\":\"enter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gatekeeper\",\"type\":\"address\"}],\"name\":\"setGatekeeperAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"theCyberKey","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a2ade0bf52cb1773725dc27ed4c989d7100e47013919fdb195da8060b99b6d3a"}]}