{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ERC721 {\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n\r\n    function approve(address _to, uint256 _tokenId) public;\r\n\r\n    function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\ncontract CryptoMemes is ERC721 {\r\n\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Created(address owner, uint256 tokenId, string url, uint256 hash, uint256 createdAt);\r\n    event UrlUpdated(address owner, uint256 tokenId, string url);\r\n\r\n    modifier onlyOwnerOf(uint256 tokenId) {\r\n        require(memeIndexToOwner[tokenId] == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOfContract() {\r\n        require(msg.sender == contractOwner);\r\n        _;\r\n    }\r\n\r\n    struct Meme {\r\n        string url;\r\n        uint256 hash;\r\n        uint256 createdAt;\r\n    }\r\n\r\n    Meme[] memes;\r\n\r\n    //the owner can adjust the meme price\r\n    address contractOwner;\r\n\r\n    //the price user must pay to create a meme\r\n    uint price;\r\n\r\n    mapping(uint256 => address) memeIndexToOwner;\r\n    mapping(address => uint256) ownershipTokenCount;\r\n    mapping(uint => address) memeApprovals;\r\n\r\n    function CryptoMemes() public {\r\n        contractOwner = msg.sender;\r\n        price = 0.005 ether;\r\n    }\r\n\r\n    function getPrice() external view returns (uint) {\r\n        return price;\r\n    }\r\n\r\n    function getContractOwner() external view returns (address) {\r\n        return contractOwner;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        ownershipTokenCount[_to]++;\r\n        ownershipTokenCount[_from]--;\r\n        memeIndexToOwner[_tokenId] = _to;\r\n        delete memeApprovals[_tokenId];\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _createMeme(string _url, uint256 _hash, address _owner) internal returns (uint256) {\r\n        uint256 newMemeId = memes.push(Meme({url : _url, hash : _hash, createdAt : now})) - 1;\r\n        Created(_owner, newMemeId, _url, _hash, now);\r\n        _transfer(0, _owner, newMemeId);\r\n        return newMemeId;\r\n    }\r\n\r\n    function createMeme(string _url, uint256 _hash) payable external {\r\n        _validateUrl(_url);\r\n        require(msg.value == price);\r\n        _createMeme(_url, _hash, msg.sender);\r\n    }\r\n\r\n    //validates the url cannot be of ambiguous length\r\n    function _validateUrl(string _url) pure internal {\r\n        require(bytes(_url).length < 1024);\r\n    }\r\n\r\n    function getMeme(uint256 _tokenId) public view returns (\r\n        string url,\r\n        uint256 hash,\r\n        uint256 createdAt\r\n    ) {\r\n        Meme storage meme = memes[_tokenId];\r\n        url = meme.url;\r\n        hash = meme.hash;\r\n        createdAt = meme.createdAt;\r\n    }\r\n\r\n    function updateMemeUrl(uint256 _tokenId, string _url) external onlyOwnerOf(_tokenId) {\r\n        _validateUrl(_url);\r\n        memes[_tokenId].url = _url;\r\n        UrlUpdated(msg.sender, _tokenId, _url);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 total) {\r\n        return memes.length;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\r\n        return memeIndexToOwner[_tokenId];\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) onlyOwnerOf(_tokenId) public {\r\n        memeApprovals[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        require(memeApprovals[_tokenId] == msg.sender);\r\n        address owner = ownerOf(_tokenId);\r\n        _transfer(owner, msg.sender, _tokenId);\r\n    }\r\n\r\n    function updatePrice(uint _price) external onlyOwnerOfContract() {\r\n        price = _price;\r\n    }\r\n\r\n    function transferContractOwnership(address _newOwner) external onlyOwnerOfContract() {\r\n        contractOwner = _newOwner;\r\n    }\r\n\r\n    function withdraw() external onlyOwnerOfContract() {\r\n        contractOwner.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"updateMemeUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMeme\",\"outputs\":[{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"hash\",\"type\":\"uint256\"},{\"name\":\"createdAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_url\",\"type\":\"string\"},{\"name\":\"_hash\",\"type\":\"uint256\"}],\"name\":\"createMeme\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferContractOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"createdAt\",\"type\":\"uint256\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"UrlUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CryptoMemes","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b78c1b631a4f163c294ed4e60d7f8a6f07274d251af78bc5d01a10d07bf4343d"}]}