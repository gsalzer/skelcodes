{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\npragma solidity ^0.4.15;\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/*  ERC 20 token */\r\ncontract StandardToken is Token {\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n  }\r\n\r\n\r\n}\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\npragma solidity ^0.4.15;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender == owner)\r\n      _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/*\r\n * Pausable\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism.\r\n */\r\n\r\ncontract Pausable is Ownable {\r\n  bool public stopped;\r\n\r\n  modifier stopInEmergency {\r\n    if (stopped) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    if (!stopped) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function emergencyStop() external onlyOwner {\r\n    stopped = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function release() external onlyOwner onlyInEmergency {\r\n    stopped = false;\r\n  }\r\n\r\n}\r\n\r\npragma solidity ^0.4.15;\r\n\r\ncontract Utils{\r\n\r\n  //verifies the amount greater than zero\r\n\r\n  modifier greaterThanZero(uint256 _value){\r\n    require(_value>0);\r\n    _;\r\n  }\r\n\r\n  ///verifies an address\r\n\r\n  modifier validAddress(address _add){\r\n    require(_add!=0x0);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract Crowdsale is StandardToken, Pausable, SafeMath, Utils{\r\n\tstring public constant name = \"BlockAim Token\";\r\n\tstring public constant symbol = \"BA\";\r\n\tuint256 public constant decimals = 18;\r\n\tstring public version = \"1.0\";\r\n\tbool public tradingStarted = false;\r\n\r\n    /**\r\n   * @dev modifier that throws if trading has not started yet\r\n   */\r\n   modifier hasStartedTrading() {\r\n   \trequire(tradingStarted);\r\n   \t_;\r\n   }\r\n  /**\r\n   * @dev Allows the owner to enable the trading. This can not be undone\r\n   */\r\n   function startTrading() onlyOwner() {\r\n   \ttradingStarted = true;\r\n   }\r\n\r\n   function transfer(address _to, uint _value) hasStartedTrading returns (bool success) {super.transfer(_to, _value);}\r\n\r\n   function transferFrom(address _from, address _to, uint _value) hasStartedTrading returns (bool success) {super.transferFrom(_from, _to, _value);}\r\n\r\n   enum State{\r\n   \tInactive,\r\n   \tFunding,\r\n   \tSuccess,\r\n   \tFailure\r\n   }\r\n\r\n   uint256 public investmentETH;\r\n   mapping(uint256 => bool) transactionsClaimed;\r\n   uint256 public initialSupply;\r\n   address wallet;\r\n   uint256 public constant _totalSupply = 100 * (10**6) * 10 ** decimals; // 100M ~ 10 Crores\r\n   uint256 public fundingStartBlock; // crowdsale start block\r\n   uint256 public tokensPerEther = 300; // 1 ETH = 300 tokens\r\n   uint256 public constant tokenCreationMax = 10 * (10**6) * 10 ** decimals; // 10M ~ 1 Crores\r\n   address[] public investors;\r\n\r\n   //displays number of uniq investors\r\n   function investorsCount() constant external returns(uint) { return investors.length; }\r\n\r\n   function Crowdsale(uint256 _fundingStartBlock, address _owner, address _wallet){\r\n      owner = _owner;\r\n      fundingStartBlock =_fundingStartBlock;\r\n      totalSupply = _totalSupply;\r\n      initialSupply = 0;\r\n      wallet = _wallet;\r\n\r\n      //check configuration if something in setup is looking weird\r\n      if (\r\n        tokensPerEther == 0\r\n        || owner == 0x0\r\n        || wallet == 0x0\r\n        || fundingStartBlock == 0\r\n        || totalSupply == 0\r\n        || tokenCreationMax == 0\r\n        || fundingStartBlock <= block.number)\r\n      throw;\r\n\r\n   }\r\n\r\n   // don't just send ether to the contract expecting to get tokens\r\n   //function() { throw; }\r\n   ////@dev This function manages the Crowdsale State machine\r\n   ///We make it a function and do not assign to a variable//\r\n   ///so that no chance of stale variable\r\n   function getState() constant public returns(State){\r\n   \t///once we reach success lock the State\r\n   \tif(block.number<fundingStartBlock) return State.Inactive;\r\n   \telse if(block.number>fundingStartBlock && initialSupply<tokenCreationMax) return State.Funding;\r\n   \telse if (initialSupply >= tokenCreationMax) return State.Success;\r\n   \telse return State.Failure;\r\n   }\r\n\r\n   ///get total tokens in that address mapping\r\n   function getTokens(address addr) public returns(uint256){\r\n   \treturn balances[addr];\r\n   }\r\n\r\n \r\n   function() external payable stopInEmergency{\r\n   \t// Abort if not in Funding Active state.\r\n   \tif(getState() == State.Success) throw;\r\n   \tif (msg.value == 0) throw;\r\n   \tuint256 newCreatedTokens = safeMul(msg.value,tokensPerEther);\r\n   \t///since we are creating tokens we need to increase the total supply\r\n   \tinitialSupply = safeAdd(initialSupply,newCreatedTokens);\r\n   \tif(initialSupply>tokenCreationMax) throw;\r\n      if (balances[msg.sender] == 0) investors.push(msg.sender);\r\n      investmentETH += msg.value;\r\n      balances[msg.sender] = safeAdd(balances[msg.sender],newCreatedTokens);\r\n      Transfer(this, msg.sender, newCreatedTokens);\r\n      // Pocket the money\r\n      if(!wallet.send(msg.value)) throw;\r\n   }\r\n\r\n\r\n   ///to be done only the owner can run this function\r\n   function tokenMint(address addr,uint256 tokens)\r\n   external\r\n   stopInEmergency\r\n   onlyOwner()\r\n   {\r\n   \tif(getState() == State.Success) throw;\r\n    if(addr == 0x0) throw;\r\n   \tif (tokens == 0) throw;\r\n   \tuint256 newCreatedTokens = tokens * 1 ether;\r\n   \tinitialSupply = safeAdd(initialSupply,newCreatedTokens);\r\n   \tif(initialSupply>tokenCreationMax) throw;\r\n      if (balances[addr] == 0) investors.push(addr);\r\n      balances[addr] = safeAdd(balances[addr],newCreatedTokens);\r\n      Transfer(this, addr, newCreatedTokens);\r\n   }\r\n\r\n   \r\n   ///change exchange rate ~ update price everyday\r\n   function changeExchangeRate(uint256 eth)\r\n   external\r\n   onlyOwner()\r\n   {\r\n     if(eth == 0) throw;\r\n     tokensPerEther = eth;\r\n  }\r\n\r\n  ///blacklist the users which are fraudulent\r\n  ///from getting any tokens\r\n  ///to do also refund just in cases\r\n  function blacklist(address addr)\r\n  external\r\n  onlyOwner()\r\n  {\r\n     balances[addr] = 0;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"changeExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"tokenMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000005241e40000000000000000000000003be68373047fd427b05301fc5d2ad12ae48e790f000000000000000000000000f86c259c7c5f38b1958d6e2e94bfb1d1f337da2e","Library":"","SwarmSource":"bzzr://8346c80a1664b96b3e1a2c659d48be5d864a8627d093fc36b4d0baa53e53fcbf"}]}