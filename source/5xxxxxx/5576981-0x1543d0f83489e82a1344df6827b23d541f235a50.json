{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title tokenRecipient\r\n * @dev An interface capable of calling `receiveApproval`, which is used by `approveAndCall` to notify the contract from this interface\r\n */\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\n\r\n/**\r\n * @title TokenERC20\r\n * @author Jun-You Liu, Ping Chen\r\n * @dev A simple ERC20 standard token with burnable function\r\n */\r\ncontract TokenERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public totalSupply;\r\n  bool public transferable;\r\n\r\n  // This creates an array with all balances\r\n  mapping(address => uint256) public balances;\r\n  mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n  // This notifies clients about the amount burnt\r\n  event Burn(address indexed from, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  function balanceOf(address _owner) view public returns(uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) view public returns(uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Basic transfer of all transfer-related functions\r\n   * @param _from The address of sender\r\n   * @param _to The address of recipient\r\n   * @param _value The amount sender want to transfer to recipient\r\n   */\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n  \trequire(transferable);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer( _from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer tokens\r\n   * @dev Send `_value` tokens to `_to` from your account\r\n   * @param _to The address of the recipient\r\n   * @param _value The amount to send\r\n   * @return True if the transfer is done without error\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns(bool) {\r\n    _transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer tokens from other address\r\n   * @dev Send `_value` tokens to `_to` on behalf of `_from`\r\n   * @param _from The address of the sender\r\n   * @param _to The address of the recipient\r\n   * @param _value The amount to send\r\n   * @return True if the transfer is done without error\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    _transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Set allowance for other address\r\n   * @dev Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n   * @param _spender The address authorized to spend\r\n   * @param _value the max amount they can spend\r\n   * @return True if the approval is done without error\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns(bool) {\r\n    // Avoid the front-running attack\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Set allowance for other address and notify\r\n   * @dev Allows contract `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n   * @param _spender The contract address authorized to spend\r\n   * @param _value the max amount they can spend\r\n   * @param _extraData some extra information to send to the approved contract\r\n   * @return True if it is done without error\r\n   */\r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool) {\r\n    tokenRecipient spender = tokenRecipient(_spender);\r\n    if (approve(_spender, _value)) {\r\n      spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @notice Destroy tokens\r\n   * @dev Remove `_value` tokens from the system irreversibly\r\n   * @param _value The amount of money will be burned\r\n   * @return True if `_value` is burned successfully\r\n   */\r\n  function burn(uint256 _value) public returns(bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    emit Burn(msg.sender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Destroy tokens from other account\r\n   * @dev Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n   * @param _from The address of the sender\r\n   * @param _value The amount of money will be burned\r\n   * @return True if `_value` is burned successfully\r\n   */\r\n  function burnFrom(address _from, uint256 _value) public returns(bool) {\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    emit Burn(_from, _value);\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title AIgathaToken\r\n * @author Jun-You Liu, Ping Chen, (auditors Hans Lin, Luka Chen)\r\n * @dev The AIgatha Token which is comply with burnable erc20 standard, referred to Cobinhood token contract: https://etherscan.io/address/0xb2f7eb1f2c37645be61d73953035360e768d81e6#code\r\n */\r\ncontract AIgathaToken is TokenERC20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // Token Info.\r\n  string public constant name = \"AIgatha Token\";\r\n  string public constant symbol = \"ATH\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  // Sales period.\r\n  uint256 public startDate;\r\n  uint256 public endDate;\r\n\r\n  // Token Cap for each rounds\r\n  uint256 public saleCap;\r\n\r\n  // Address where funds are collected.\r\n  address public wallet;\r\n\r\n  // Amount of raised money in wei.\r\n  uint256 public weiRaised;\r\n\r\n  // Threshold of sold amount\r\n  uint256 public threshold;\r\n\r\n  // Whether in the extended period\r\n  bool public extended;\r\n\r\n  // Event\r\n  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n  event PreICOTokenPushed(address indexed buyer, uint256 amount);\r\n  event UserIDChanged(address owner, bytes32 user_id);\r\n\r\n  /**\r\n   * @dev Constructor of Aigatha Token\r\n   * @param _wallet The address where funds are collected\r\n   * @param _saleCap The token cap in public round\r\n   * @param _totalSupply The total amount of token\r\n   * @param _threshold The percentage of selling amount need to achieve at least e.g. 40% -> _threshold = 40\r\n   * @param _start The start date in seconds\r\n   * @param _end The end date in seconds\r\n   */\r\n  function AIgathaToken(address _wallet, uint256 _saleCap, uint256 _totalSupply, uint256 _threshold, uint256 _start, uint256 _end) public {\r\n    wallet = _wallet;\r\n    saleCap = _saleCap * (10 ** uint256(decimals));\r\n    totalSupply = _totalSupply * (10 ** uint256(decimals));\r\n    startDate = _start;\r\n    endDate = _end;\r\n\r\n    threshold = _threshold * totalSupply / 2 / 100;\r\n    balances[0xbeef] = saleCap;\r\n    balances[wallet] = totalSupply.sub(saleCap);\r\n  }\r\n\r\n  function supply() internal view returns (uint256) {\r\n    return balances[0xbeef];\r\n  }\r\n\r\n  function saleActive() public view returns (bool) {\r\n    return (now >= startDate &&\r\n            now <= endDate && supply() > 0);\r\n  }\r\n\r\n  function extendSaleTime() onlyOwner public {\r\n    require(!saleActive());\r\n    require(!extended);\r\n    require((saleCap-supply()) < threshold); //check\r\n    extended = true;\r\n    endDate += 60 days;\r\n  }\r\n\r\n  /**\r\n   * @dev Get the rate of exchange according to the purchase date\r\n   * @param at The date converted into seconds\r\n   * @return The corresponding rate\r\n   */\r\n  function getRateAt(uint256 at) public view returns (uint256) {\r\n    if (at < startDate) {\r\n      return 0;\r\n    }\r\n    else if (at < (startDate + 15 days)) { //check\r\n      return 10500;\r\n    }\r\n    else {\r\n      return 10000;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function can be used to buy tokens\r\n   */\r\n  function () payable public{\r\n    buyTokens(msg.sender, msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev For pushing pre-ICO records\r\n   * @param buyer The address of buyer in pre-ICO\r\n   * @param amount The amount of token bought\r\n   */\r\n  function push(address buyer, uint256 amount) onlyOwner public {\r\n    require(balances[wallet] >= amount);\r\n    balances[wallet] = balances[wallet].sub(amount);\r\n    balances[buyer] = balances[buyer].add(amount);\r\n    emit PreICOTokenPushed(buyer, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Buy tokens\r\n   * @param sender The address of buyer\r\n   * @param value The amount of token bought\r\n   */\r\n  function buyTokens(address sender, uint256 value) internal {\r\n    require(saleActive());\r\n\r\n    uint256 weiAmount = value;\r\n    uint256 updatedWeiRaised = weiRaised.add(weiAmount);\r\n\r\n    // Calculate token amount to be purchased\r\n    uint256 actualRate = getRateAt(now);\r\n    uint256 amount = weiAmount.mul(actualRate);\r\n\r\n    // We have enough token to sale\r\n    require(supply() >= amount);\r\n\r\n    // Transfer\r\n    balances[0xbeef] = balances[0xbeef].sub(amount);\r\n    balances[sender] = balances[sender].add(amount);\r\n    emit TokenPurchase(sender, weiAmount, amount);\r\n\r\n    // Update state.\r\n    weiRaised = updatedWeiRaised;\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw all ether in this contract back to the wallet\r\n   */\r\n  function withdraw() onlyOwner public {\r\n    wallet.transfer(address(this).balance);\r\n  }\r\n\r\n  /**\r\n   * @dev Collect all the remain token which is unsold after the selling period and make this token can be tranferred\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!saleActive());\r\n    balances[wallet] = balances[wallet].add(balances[0xbeef]);\r\n    balances[0xbeef] = 0;\r\n    transferable = true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"getRateAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"extendSaleTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_saleCap\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_threshold\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PreICOTokenPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user_id\",\"type\":\"bytes32\"}],\"name\":\"UserIDChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AIgathaToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ca7aeb423e79e85a734931af9503b84e81a4b2740000000000000000000000000000000000000000000000000000000029b927000000000000000000000000000000000000000000000000000000000077359400000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000005b37a900000000000000000000000000000000000000000000000000000000005b60877f","Library":"","SwarmSource":"bzzr://0e91f6d97a0579e59b49ea6cf1b870a1d96ca8aa4994ff646daa7ff41549bc56"}]}