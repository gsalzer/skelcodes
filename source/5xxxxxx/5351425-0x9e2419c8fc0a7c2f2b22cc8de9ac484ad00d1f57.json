{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract SafeMath {\r\n    uint256 constant public MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (x > MAX_UINT256 - y) throw;\r\n        return x + y;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (x < y) throw;\r\n        return x - y;\r\n    }\r\n\r\n    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (y == 0) return 0;\r\n        if (x > MAX_UINT256 / y) throw;\r\n        return x * y;\r\n    }\r\n\r\n    function safeDiv(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        uint256 f = x / y;\r\n        return f;\r\n      }\r\n    }\r\n\r\ncontract ERC223ReceivingContract {\r\n\r\n    struct inr {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n\r\n      function tokenFallback(address _from, uint _value, bytes _data){\r\n      inr memory igniter;\r\n      igniter.sender = _from;\r\n      igniter.value = _value;\r\n      igniter.data = _data;\r\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n      igniter.sig = bytes4(u);\r\n\r\n    }\r\n  }\r\n\r\ncontract iGniter is SafeMath {\r\n\r\n  struct serPayment {\r\n    uint256 unlockedBlockNumber;\r\n    uint256 unlockedTime;\r\n  }\r\n\r\n  struct dividends {\r\n    uint256 diviReg;\r\n    uint256 diviBlocks;\r\n    uint256 diviPayout;\r\n    uint256 diviBalance;\r\n    uint256 _tier1Reg;\r\n    uint256 _tier2Reg;\r\n    uint256 _tier3Reg;\r\n    uint256 _tier4Reg;\r\n    uint256 _tier5Reg;\r\n    uint256 _tier1Payout;\r\n    uint256 _tier2Payout;\r\n    uint256 _tier3Payout;\r\n    uint256 _tier4Payout;\r\n    uint256 _tier5Payout;\r\n    uint256 _tier1Blocks;\r\n    uint256 _tier2Blocks;\r\n    uint256 _tier3Blocks;\r\n    uint256 _tier4Blocks;\r\n    uint256 _tier5Blocks;\r\n    uint256 _tierPayouts;\r\n    uint256 hodlPayout;\r\n    uint256 _hodlReg;\r\n    uint256 _hodlBlocks;\r\n    uint256 INRpayout;\r\n    uint256 INR_lastbal;\r\n    uint256 INRpaid;\r\n    uint256 INRtransfers;\r\n    uint256 INRbalance;\r\n    uint256 transDiff;\r\n    uint256 individualRewards;\r\n  }\r\n\r\n    string public name;\r\n    bytes32 public symbol;\r\n    uint8 public decimals;\r\n    uint256 private dividendsPerBlockPerAddress;\r\n    uint256 private T1DividendsPerBlockPerAddress;\r\n    uint256 private T2DividendsPerBlockPerAddress;\r\n    uint256 private T3DividendsPerBlockPerAddress;\r\n    uint256 private T4DividendsPerBlockPerAddress;\r\n    uint256 private T5DividendsPerBlockPerAddress;\r\n    uint256 private hodlersDividendsPerBlockPerAddress;\r\n    uint256 private totalInitialAddresses;\r\n    uint256 private initialBlockCount;\r\n    uint256 private minedBlocks;\r\n    uint256 private iGniting;\r\n    uint256 private totalRewards;\r\n    uint256 private initialSupplyPerAddress;\r\n    uint256 private availableAmount;\r\n    uint256 private burnt;\r\n    uint256 private inrSessions;\r\n    uint256 private initialSupply;\r\n    uint256 public currentCost;\r\n    uint256 private blockStats;\r\n    uint256 private blockAverage;\r\n    uint256 private blockAvgDiff;\r\n    uint256 private divRewards;\r\n    uint256 private diviClaims;\r\n    uint256 private Tier1Amt;\r\n    uint256 private Tier2Amt;\r\n    uint256 private Tier3Amt;\r\n    uint256 private Tier4Amt;\r\n    uint256 private Tier5Amt;\r\n    uint256 private Tier1blocks;\r\n    uint256 private Tier2blocks;\r\n    uint256 private Tier3blocks;\r\n    uint256 private Tier4blocks;\r\n    uint256 private Tier5blocks;\r\n    uint256 private hodlBlocks;\r\n    uint256 private hodlersReward;\r\n    uint256 private hodlAmt;\r\n\r\n    uint256 private _tier1Avg;\r\n    uint256 private _tier1AvgDiff;\r\n    uint256 private _tier1Rewards;\r\n    uint256 private _tier2Avg;\r\n    uint256 private _tier2AvgDiff;\r\n    uint256 private _tier2Rewards;\r\n    uint256 private _tier3Avg;\r\n    uint256 private _tier3AvgDiff;\r\n    uint256 private _tier3Rewards;\r\n    uint256 private _tier4Avg;\r\n    uint256 private _tier4AvgDiff;\r\n    uint256 private _tier4Rewards;\r\n    uint256 private _tier5Avg;\r\n    uint256 private _tier5AvgDiff;\r\n    uint256 private _tier5Rewards;\r\n    uint256 private _hodlAvg;\r\n\r\n    uint256 private _hodlAvgDiff;\r\n    uint256 private _hodlRewards;\r\n\r\n    bool private t1active;\r\n    bool private t2active;\r\n    bool private t3active;\r\n    bool private t4active;\r\n    bool private t5active;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => bool) public initialAddress;\r\n    mapping(address => bool) public dividendAddress;\r\n    mapping(address => bool) public qualifiedAddress;\r\n    mapping(address => bool) public TierStarterDividendAddress;\r\n    mapping(address => bool) public TierBasicDividendAddress;\r\n    mapping(address => bool) public TierClassicDividendAddress;\r\n    mapping(address => bool) public TierWildcatDividendAddress;\r\n    mapping(address => bool) public TierRainmakerDividendAddress;\r\n    mapping(address => bool) public HODLERAddress;\r\n    mapping(address => mapping (address => uint)) internal _allowances;\r\n    mapping(address => serPayment) inrPayments;\r\n    mapping(address => dividends) INRdividends;\r\n\r\n    address private _Owner1;\r\n    address private _Owner2;\r\n    address private _Owner3;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    modifier isOwner() {\r\n\r\n      require(msg.sender == _Owner1 || msg.sender == _Owner2 || msg.sender == _Owner3);\r\n      _;\r\n    }\r\n\r\n    function iGniter() {\r\n\r\n        initialSupplyPerAddress = 10000000000; //10000 INR\r\n        initialBlockCount = 5150000;\r\n        dividendsPerBlockPerAddress = 7;\r\n        hodlersDividendsPerBlockPerAddress = 9000;\r\n        T1DividendsPerBlockPerAddress = 30;\r\n        T2DividendsPerBlockPerAddress = 360;\r\n        T3DividendsPerBlockPerAddress = 4200;\r\n        T4DividendsPerBlockPerAddress = 60000;\r\n        T5DividendsPerBlockPerAddress = 1200000;\r\n        totalInitialAddresses = 5000;\r\n        initialSupply = initialSupplyPerAddress * totalInitialAddresses;\r\n        minedBlocks = block.number - initialBlockCount;\r\n        availableAmount = dividendsPerBlockPerAddress * minedBlocks;\r\n        iGniting = availableAmount * totalInitialAddresses;\r\n        _Owner1 = 0x4804D96B17B03B2f5F65a4AaA4b5DB360e22909A;\r\n        _Owner2 = 0x16C890b06FE52e27ed514e7086378a355F1aB28a;\r\n        _Owner3 = 0xa4F78852c7F854b4585491a55FE1594913C2C05D;\r\n    }\r\n\r\n    function currentBlock() constant returns (uint256 blockNumber)\r\n    {\r\n        return block.number;\r\n    }\r\n\r\n    function blockDiff() constant returns (uint256 blockNumber)\r\n    {\r\n        return block.number - initialBlockCount;\r\n    }\r\n\r\n    function assignInitialAddresses(address[] _address) isOwner public returns (bool success)\r\n    {\r\n        if (block.number < 10000000)\r\n        {\r\n          for (uint i = 0; i < _address.length; i++)\r\n          {\r\n            balanceOf[_address[i]] = balanceOf[_address[i]] + initialSupplyPerAddress;\r\n            initialAddress[_address[i]] = true;\r\n          }\r\n\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function balanceOf(address _address) constant returns (uint256 Balance)\r\n    {\r\n        if((qualifiedAddress[_address]) == true || (initialAddress[_address]) == true)\r\n        {\r\n            if (minedBlocks > 105120000) return balanceOf[_address]; //app. 2058\r\n\r\n            INRdividends[_address].INRpayout = dividendRewards(_address);\r\n\r\n            if (INRdividends[_address].INRpayout < INRdividends[_address].INRtransfers)\r\n            {\r\n                INRdividends[_address].INRpaid = 0;\r\n            }\r\n\r\n            if (INRdividends[_address].INRpayout >= INRdividends[_address].INRtransfers)\r\n            {\r\n                INRdividends[_address].transDiff = INRdividends[_address].INRpayout - INRdividends[_address].INRtransfers;\r\n                INRdividends[_address].INRpaid = INRdividends[_address].transDiff;\r\n            }\r\n\r\n            INRdividends[_address].INRbalance = balanceOf[_address] + INRdividends[_address].INRpaid;\r\n\r\n            return INRdividends[_address].INRbalance;\r\n        }\r\n\r\n        else {\r\n            return balanceOf[_address] + INRdividends[_address].INRpaid;\r\n        }\r\n    }\r\n\r\n    function name() constant returns (string _name)\r\n    {\r\n        name = \"iGniter\";\r\n        return name;\r\n    }\r\n\r\n    function symbol() constant returns (bytes32 _symbol)\r\n    {\r\n        symbol = \"INR\";\r\n        return symbol;\r\n    }\r\n\r\n    function decimals() constant returns (uint8 _decimals)\r\n    {\r\n        decimals = 6;\r\n        return decimals;\r\n    }\r\n\r\n    function totalSupply() constant returns (uint256 totalSupply)\r\n    {\r\n        if(t1active == true)\r\n        {\r\n          _tier1Avg = Tier1blocks/Tier1Amt;\r\n          _tier1AvgDiff = block.number - _tier1Avg;\r\n          _tier1Rewards = _tier1AvgDiff * T1DividendsPerBlockPerAddress * Tier1Amt;\r\n        }\r\n\r\n        if(t2active == true)\r\n        {\r\n          _tier2Avg = Tier2blocks/Tier2Amt;\r\n          _tier2AvgDiff = block.number - _tier2Avg;\r\n          _tier2Rewards = _tier2AvgDiff * T2DividendsPerBlockPerAddress * Tier2Amt;\r\n        }\r\n\r\n        if(t3active == true)\r\n        {\r\n          _tier3Avg = Tier3blocks/Tier3Amt;\r\n          _tier3AvgDiff = block.number - _tier3Avg;\r\n          _tier3Rewards = _tier3AvgDiff * T3DividendsPerBlockPerAddress * Tier3Amt;\r\n        }\r\n\r\n        if(t4active == true)\r\n        {\r\n          _tier4Avg = Tier4blocks/Tier4Amt;\r\n          _tier4AvgDiff = block.number - _tier4Avg;\r\n          _tier4Rewards = _tier4AvgDiff * T4DividendsPerBlockPerAddress * Tier4Amt;\r\n        }\r\n\r\n        if(t5active == true)\r\n        {\r\n          _tier5Avg = Tier5blocks/Tier5Amt;\r\n          _tier5AvgDiff = block.number - _tier5Avg;\r\n          _tier5Rewards = _tier5AvgDiff * T5DividendsPerBlockPerAddress * Tier5Amt;\r\n        }\r\n\r\n        _hodlAvg = hodlBlocks/hodlAmt;\r\n        _hodlAvgDiff = block.number - _hodlAvg;\r\n        _hodlRewards = _hodlAvgDiff * hodlersDividendsPerBlockPerAddress * hodlAmt;\r\n\r\n        blockAverage = blockStats/diviClaims;\r\n        blockAvgDiff = block.number - blockAverage;\r\n        divRewards = blockAvgDiff * dividendsPerBlockPerAddress * diviClaims;\r\n\r\n        totalRewards = _tier1Rewards + _tier2Rewards + _tier3Rewards + _tier4Rewards + _tier5Rewards\r\n                       + _hodlRewards + divRewards;\r\n\r\n        return initialSupply + iGniting + totalRewards - burnt;\r\n    }\r\n\r\n    function burn(uint256 _value) public returns(bool success) {\r\n\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        burnt += _value;\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        if (_value > 0 && _value <= balanceOf[msg.sender] && !isContract(_to)) {\r\n            balanceOf[msg.sender] -= _value;\r\n            balanceOf[_to] += _value;\r\n            INRdividends[msg.sender].INRtransfers += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\r\n        if (_value > 0 && _value <= balanceOf[msg.sender] && isContract(_to)) {\r\n            balanceOf[msg.sender] -= _value;\r\n            balanceOf[_to] += _value;\r\n            INRdividends[msg.sender].INRtransfers += _value;\r\n            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\r\n                _contract.tokenFallback(msg.sender, _value, _data);\r\n            Transfer(msg.sender, _to, _value, _data);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function isContract(address _addr) returns (bool) {\r\n        uint codeSize;\r\n        assembly {\r\n            codeSize := extcodesize(_addr)\r\n        }\r\n        return codeSize > 0;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        if (_allowances[_from][msg.sender] > 0 && _value > 0 && _allowances[_from][msg.sender] >= _value &&\r\n            balanceOf[_from] >= _value) {\r\n            balanceOf[_from] -= _value;\r\n            balanceOf[_to] += _value;\r\n            INRdividends[msg.sender].INRtransfers += _value;\r\n            _allowances[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        _allowances[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint) {\r\n        return _allowances[_owner][_spender];\r\n    }\r\n\r\n    function PaymentStatusBlockNum(address _address) constant returns (uint256 blockno) {\r\n\r\n      return inrPayments[_address].unlockedBlockNumber;\r\n    }\r\n\r\n    function PaymentStatusTimeStamp(address _address) constant returns (uint256 ut) {\r\n\r\n      return inrPayments[_address].unlockedTime;\r\n    }\r\n\r\n    function updateCost(uint256 _currCost) isOwner public {\r\n\r\n      currentCost = _currCost;\r\n    }\r\n\r\n    function servicePayment(uint _value) public {\r\n\r\n      require(_value >= currentCost);\r\n      require(balanceOf[msg.sender] >= currentCost);\r\n\r\n      inrPayments[msg.sender].unlockedBlockNumber = block.number;\r\n      inrSessions++;\r\n\r\n      balanceOf[msg.sender] -= _value;\r\n      burnt += _value;\r\n      Burn(msg.sender, _value);\r\n    }\r\n\r\n    function withdrawal(uint quantity) isOwner returns(bool) {\r\n\r\n           require(quantity <= this.balance);\r\n\r\n           if(msg.sender == _Owner1)\r\n           {\r\n             _Owner1.transfer(quantity);\r\n           }\r\n\r\n           if(msg.sender == _Owner2)\r\n           {\r\n             _Owner2.transfer(quantity);\r\n           }\r\n\r\n           if(msg.sender == _Owner3)\r\n           {\r\n             _Owner3.transfer(quantity);\r\n           }\r\n\r\n           return true;\r\n   }\r\n\r\n    function dividendRegistration() public {\r\n\r\n      require (dividendAddress[msg.sender] == false);\r\n\r\n      INRdividends[msg.sender].diviReg = block.number;\r\n      dividendAddress[msg.sender] = true;\r\n      qualifiedAddress[msg.sender] = true;\r\n      blockStats += block.number;\r\n      diviClaims++;\r\n    }\r\n\r\n    function HODLRegistration() public {\r\n\r\n      require (HODLERAddress[msg.sender] == false);\r\n\r\n          INRdividends[msg.sender]._hodlReg = block.number;\r\n          HODLERAddress[msg.sender] = true;\r\n          qualifiedAddress[msg.sender] = true;\r\n          hodlBlocks += block.number;\r\n          hodlAmt++;\r\n    }\r\n\r\n    function Tier_Starter_Registration() public payable {\r\n\r\n      require(msg.value == 0.01 ether);\r\n\r\n      INRdividends[msg.sender]._tier1Reg = block.number;\r\n      TierStarterDividendAddress[msg.sender] = true;\r\n      qualifiedAddress[msg.sender] = true;\r\n      Tier1blocks += block.number;\r\n      Tier1Amt++;\r\n      t1active = true;\r\n    }\r\n\r\n    function Tier_Basic_Registration() public payable {\r\n\r\n      require(msg.value >= 0.1 ether);\r\n\r\n      INRdividends[msg.sender]._tier2Reg = block.number;\r\n      TierBasicDividendAddress[msg.sender] = true;\r\n      qualifiedAddress[msg.sender] = true;\r\n      Tier2blocks += block.number;\r\n      Tier2Amt++;\r\n      t2active = true;\r\n    }\r\n\r\n    function Tier_Classic_Registration() public payable {\r\n\r\n      require(msg.value >= 1 ether);\r\n\r\n      INRdividends[msg.sender]._tier3Reg = block.number;\r\n      TierClassicDividendAddress[msg.sender] = true;\r\n      qualifiedAddress[msg.sender] = true;\r\n      Tier3blocks += block.number;\r\n      Tier3Amt++;\r\n      t3active = true;\r\n    }\r\n\r\n    function Tier_Wildcat_Registration() public payable {\r\n\r\n      require(msg.value >= 10 ether);\r\n\r\n      INRdividends[msg.sender]._tier4Reg = block.number;\r\n      TierWildcatDividendAddress[msg.sender] = true;\r\n      qualifiedAddress[msg.sender] = true;\r\n      Tier4blocks += block.number;\r\n      Tier4Amt++;\r\n      t4active = true;\r\n    }\r\n\r\n    function Tier_Rainmaker_Registration() public payable {\r\n\r\n      require(msg.value >= 100 ether);\r\n\r\n      INRdividends[msg.sender]._tier5Reg = block.number;\r\n      TierRainmakerDividendAddress[msg.sender] = true;\r\n      qualifiedAddress[msg.sender] = true;\r\n      Tier5blocks += block.number;\r\n      Tier5Amt++;\r\n      t5active = true;\r\n    }\r\n\r\n    function claimINRDividends() public\r\n    {\r\n        INRdividends[msg.sender].INRpayout = dividendRewards(msg.sender);\r\n\r\n        if (INRdividends[msg.sender].INRpayout < INRdividends[msg.sender].INRtransfers)\r\n        {\r\n            INRdividends[msg.sender].INRpaid = 0;\r\n        }\r\n\r\n        if (INRdividends[msg.sender].INRpayout >= INRdividends[msg.sender].INRtransfers)\r\n        {\r\n            INRdividends[msg.sender].transDiff = INRdividends[msg.sender].INRpayout - INRdividends[msg.sender].INRtransfers;\r\n            INRdividends[msg.sender].INRpaid = INRdividends[msg.sender].transDiff;\r\n        }\r\n\r\n        balanceOf[msg.sender] += INRdividends[msg.sender].INRpaid;\r\n    }\r\n\r\n    function dividendRewards(address _address) constant returns (uint)\r\n    {\r\n        if(dividendAddress[_address] == true)\r\n        {\r\n          INRdividends[_address].diviBlocks = block.number - INRdividends[_address].diviReg;\r\n          INRdividends[_address].diviPayout = dividendsPerBlockPerAddress * INRdividends[_address].diviBlocks;\r\n        }\r\n\r\n        if(TierStarterDividendAddress[_address] == true)\r\n        {\r\n          INRdividends[_address]._tier1Blocks = block.number - INRdividends[_address]._tier1Reg;\r\n          INRdividends[_address]._tier1Payout = T1DividendsPerBlockPerAddress * INRdividends[_address]._tier1Blocks;\r\n        }\r\n\r\n        if(TierBasicDividendAddress[_address] == true)\r\n        {\r\n          INRdividends[_address]._tier2Blocks = block.number - INRdividends[_address]._tier2Reg;\r\n          INRdividends[_address]._tier2Payout = T2DividendsPerBlockPerAddress * INRdividends[_address]._tier2Blocks;\r\n        }\r\n\r\n        if(TierClassicDividendAddress[_address] == true)\r\n        {\r\n          INRdividends[_address]._tier3Blocks = block.number - INRdividends[_address]._tier3Reg;\r\n          INRdividends[_address]._tier3Payout = T3DividendsPerBlockPerAddress * INRdividends[_address]._tier3Blocks;\r\n        }\r\n\r\n        if(TierWildcatDividendAddress[_address] == true)\r\n        {\r\n          INRdividends[_address]._tier4Blocks = block.number - INRdividends[_address]._tier4Reg;\r\n          INRdividends[_address]._tier4Payout = T4DividendsPerBlockPerAddress * INRdividends[_address]._tier4Blocks;\r\n        }\r\n\r\n        if(TierRainmakerDividendAddress[_address] == true)\r\n        {\r\n          INRdividends[_address]._tier5Blocks = block.number - INRdividends[_address]._tier5Reg;\r\n          INRdividends[_address]._tier5Payout = T5DividendsPerBlockPerAddress * INRdividends[_address]._tier5Blocks;\r\n        }\r\n\r\n        if ((balanceOf[_address]) >= 100000000000 && (HODLERAddress[_address] == true)) { //100000INR\r\n          INRdividends[_address]._hodlBlocks = block.number - INRdividends[_address]._hodlReg;\r\n          INRdividends[_address].hodlPayout = hodlersDividendsPerBlockPerAddress * INRdividends[_address]._hodlBlocks;\r\n        }\r\n\r\n        INRdividends[_address]._tierPayouts = INRdividends[_address]._tier1Payout + INRdividends[_address]._tier2Payout +\r\n                                              INRdividends[_address]._tier3Payout + INRdividends[_address]._tier4Payout +\r\n                                              INRdividends[_address]._tier5Payout + INRdividends[_address].hodlPayout +\r\n                                              INRdividends[_address].diviPayout;\r\n\r\n        if ((initialAddress[_address]) == true)\r\n        {\r\n            INRdividends[_address].individualRewards = availableAmount + INRdividends[_address]._tierPayouts;\r\n\r\n            return INRdividends[_address].individualRewards;\r\n        }\r\n\r\n        if ((qualifiedAddress[_address]) == true)\r\n        {\r\n            INRdividends[_address].individualRewards = INRdividends[_address]._tierPayouts;\r\n\r\n            return INRdividends[_address].individualRewards;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currCost\",\"type\":\"uint256\"}],\"name\":\"updateCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dividendRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"qualifiedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dividendAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockDiff\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"servicePayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Tier_Wildcat_Registration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Tier_Rainmaker_Registration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"TierStarterDividendAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"Balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Tier_Classic_Registration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Tier_Starter_Registration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"TierRainmakerDividendAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"TierWildcatDividendAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Tier_Basic_Registration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"PaymentStatusBlockNum\",\"outputs\":[{\"name\":\"blockno\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address[]\"}],\"name\":\"assignInitialAddresses\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"PaymentStatusTimeStamp\",\"outputs\":[{\"name\":\"ut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"TierBasicDividendAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"TierClassicDividendAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"HODLRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBlock\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"dividendRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimINRDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"HODLERAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"iGniter","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2513de17c41f53ba6b855b12d1af939e45c228f1fafe9e1130f790dcbd4c1146"}]}