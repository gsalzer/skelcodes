{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    function Ownable() public {\r\n        owner = 0x3c5568c646068212805550Cd1433bD9728667DfD;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract RefundVault is Ownable {\r\n    using SafeMath for uint256;\r\n    enum State { Active, Refunding, Closed }\r\n    mapping (address => uint256) public deposited;\r\n    address public wallet;\r\n    State public state;\r\n    event Closed();\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n    function RefundVault(address _wallet) public {\r\n        wallet = _wallet;\r\n        state = State.Active;\r\n    }\r\n    function deposit(address investor) onlyOwner public payable {\r\n        require(state == State.Active);\r\n        deposited[investor] = deposited[investor].add(msg.value);\r\n    }\r\n    function close() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Closed;\r\n        wallet.transfer(this.balance);\r\n        Closed();\r\n    }\r\n    function enableRefunds() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        RefundsEnabled();\r\n    }\r\n    function refund(address investor) public {\r\n        require(state == State.Refunding);\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        Refunded(investor, depositedValue);\r\n    }\r\n}\r\n\r\ncontract HurtleCoin is ERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    RefundVault public vault;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 totalSupply_; // of hurtle token\r\n\r\n    string public name = 'HurtleCoin'; // Defines the name of the token.\r\n    string public symbol = 'HRTL'; // Defines the symbol of the token.\r\n    uint256 public decimals = 4; // Number of decimal places for the token.\r\n    uint256 public initialSupply = 200000000; //200m\r\n\r\n    uint256 public ratePreICO = 200000000000000; //1 ether = 5000 hurtle coins\r\n    uint256 public rateICO    = 280000000000000; //1 ether = 3500\r\n\r\n    uint256 public preSaleMaxCapInWei = 500 ether;\r\n    uint256 public preSaleRaised = 0;\r\n\r\n    uint256 public icoSoftCapInWei = 3300 ether; //1 million usd\r\n    uint256 public icoHardCapInWei = 35000 ether; //12 million usd\r\n    uint256 public icoRaised = 0;\r\n\r\n    uint256 public presaleStartTimestamp;\r\n    uint256 public presaleEndTimestamp;\r\n    uint256 public icoStartTimestamp;\r\n    uint256 public icoEndTimestamp;\r\n\r\n    uint256 public presaleTokenLimit;\r\n    uint256 public icoTokenLimit;\r\n\r\n    uint256 public investorCount;\r\n\r\n    enum State {Unknown, Preparing, PreSale, ICO, Success, Failure, PresaleFinalized, ICOFinalized}\r\n\r\n    State public crowdSaleState;\r\n\r\n    modifier nonZero() {\r\n        require(msg.value > 0);\r\n        _;\r\n    }\r\n\r\n    function HurtleCoin() public {\r\n\r\n        owner = 0x3c5568c646068212805550Cd1433bD9728667DfD;\r\n        vault = new RefundVault(0x3c5568c646068212805550Cd1433bD9728667DfD); //address of wallet in which process will go in case of success\r\n\r\n        totalSupply_ = initialSupply*(10**decimals); //The total supply defined in base token\r\n\r\n        balances[owner] = totalSupply_;\r\n\r\n        presaleStartTimestamp = 1525046400;\r\n        presaleEndTimestamp = presaleStartTimestamp + 30 * 1 days;\r\n\r\n        icoStartTimestamp = presaleEndTimestamp + 1 days;\r\n        icoEndTimestamp = icoStartTimestamp + 90 * 1 days;\r\n\r\n        crowdSaleState = State.Preparing;\r\n    }\r\n\r\n    function () nonZero payable {\r\n        enter();\r\n    }\r\n\r\n    function enter() public nonZero payable {\r\n        //test = msg.value;\r\n        if(isPreSalePeriod()) {\r\n\r\n            if(crowdSaleState == State.Preparing) {\r\n                crowdSaleState = State.PreSale;\r\n            }\r\n\r\n            buyTokens(msg.sender, msg.value);\r\n        }\r\n        else if (isICOPeriod()) {\r\n            if(crowdSaleState == State.PresaleFinalized) {\r\n                crowdSaleState = State.ICO;\r\n            }\r\n\r\n            buyTokens(msg.sender, msg.value);\r\n        } else {\r\n\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function buyTokens(address _recipient, uint256 _value) internal nonZero returns (bool success) {\r\n        uint256 boughtTokens = calculateTokens(_value);\r\n        require(boughtTokens != 0);\r\n        boughtTokens = boughtTokens*(10**decimals);\r\n\r\n        if(balanceOf(_recipient) == 0) {\r\n            investorCount++;\r\n        }\r\n\r\n        if(isCrowdSaleStatePreSale()) {\r\n            transferTokens(_recipient, boughtTokens);\r\n            vault.deposit.value(_value)(_recipient);\r\n            preSaleRaised = preSaleRaised.add(_value);\r\n            return true;\r\n        } else if (isCrowdSaleStateICO()) {\r\n            transferTokens(_recipient, boughtTokens);\r\n            vault.deposit.value(_value)(_recipient);\r\n            icoRaised = icoRaised.add(_value);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function transferTokens(address _recipient, uint256 tokens_in_cents) internal returns (bool) {\r\n        require(\r\n            tokens_in_cents > 0\r\n            && _recipient != owner\r\n            && tokens_in_cents < balances[owner]\r\n        );\r\n\r\n        balances[owner] = balances[owner].sub(tokens_in_cents);\r\n        balances[_recipient] = balances[_recipient].add(tokens_in_cents);\r\n\r\n        Transfer(owner, _recipient, tokens_in_cents); //actual function that does the transfer\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokens_in_cents) public returns (bool) {\r\n        require(_tokens_in_cents > 0);\r\n        require(_to != msg.sender);\r\n        require(balances[msg.sender] >= _tokens_in_cents);\r\n\r\n        if(balanceOf(_to) == 0) {  //increase invester count if new invester\r\n            investorCount++;\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_tokens_in_cents);\r\n        balances[_to] = balances[_to].add(_tokens_in_cents);\r\n\r\n        if(balanceOf(msg.sender) == 0) { //update invester count\r\n            investorCount=investorCount-1;\r\n        }\r\n\r\n        Transfer(msg.sender, _to, _tokens_in_cents);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokens_in_cents) public returns (bool success) {\r\n        require(_tokens_in_cents > 0);\r\n        require(_from != _to);\r\n        require(balances[_from] >= _tokens_in_cents);\r\n        require(allowed[_from][msg.sender] >= _tokens_in_cents);\r\n\r\n        if(balanceOf(_to) == 0) {  //increase invester count if new invester\r\n            investorCount++;\r\n        }\r\n\r\n        balances[_from] = balances[_from].sub(_tokens_in_cents);\r\n        balances[_to] = balances[_to].add(_tokens_in_cents);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_tokens_in_cents);\r\n\r\n        if(balanceOf(_from) == 0) { //update invester count\r\n            investorCount=investorCount-1;\r\n        }\r\n\r\n        Transfer(_from, _to, _tokens_in_cents);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _tokens_in_cents) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _tokens_in_cents;\r\n        Approval(msg.sender, _spender, _tokens_in_cents);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function calculateTokens(uint256 _amount) internal returns (uint256 tokens){\r\n        if(crowdSaleState == State.Preparing && isPreSalePeriod()) {\r\n            crowdSaleState = State.PreSale;\r\n        }\r\n        if(isCrowdSaleStatePreSale()) {\r\n            tokens = _amount.div(ratePreICO);\r\n        } else if (isCrowdSaleStateICO()) {\r\n            tokens = _amount.div(rateICO);\r\n        } else {\r\n            tokens = 0;\r\n        }\r\n    }\r\n\r\n    function getRefund(address _recipient) public returns (bool){\r\n        require(crowdSaleState == State.Failure);\r\n        require(refundedAmount(_recipient));\r\n        vault.refund(_recipient);\r\n        return true;\r\n    }\r\n\r\n    function refundedAmount(address _recipient) internal returns (bool) {\r\n        require(balances[_recipient] != 0);\r\n        balances[_recipient] = 0;\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function balanceOf(address a) public view returns (uint256 balance) {\r\n        return balances[a];\r\n    }\r\n\r\n\r\n    /////////////////////\r\n    // State Functions //\r\n    /////////////////////\r\n\r\n    /** Check the state of the Contract, if in Pre Sale\r\n      * @return bool  Return true if the contract is in Pre Sale\r\n      */\r\n\r\n    function isCrowdSaleStatePreSale() public constant returns (bool) {\r\n        return crowdSaleState == State.PreSale;\r\n    }\r\n\r\n    /** Check the state of the Contract, if in ICO\r\n      * @return bool  Return true if the contract is in ICO\r\n      */\r\n\r\n    function isCrowdSaleStateICO() public constant returns (bool) {\r\n        return crowdSaleState == State.ICO;\r\n    }\r\n\r\n    /** Check if the Pre Sale Period is still ON\r\n      * @return bool  Return true if the contract is in Pre Sale Period\r\n      */\r\n\r\n    function isPreSalePeriod() public constant returns (bool) {\r\n        if(preSaleRaised > preSaleMaxCapInWei || now >= presaleEndTimestamp) {\r\n            crowdSaleState = State.PresaleFinalized;\r\n            //icoStartTimestamp = now.sub(10); //CONFIRM\r\n            return false;\r\n        } else {\r\n            return now > presaleStartTimestamp;\r\n        }\r\n    }\r\n\r\n    /** Check if the ICO is in the Sale period or not\r\n      * @return bool  Return true if the contract is in ICO Period\r\n      */\r\n\r\n    function isICOPeriod() public constant returns (bool) {\r\n        if (icoRaised > icoHardCapInWei || now >= icoEndTimestamp){\r\n            crowdSaleState = State.ICOFinalized;\r\n            return false;\r\n        } else {\r\n            return now > icoStartTimestamp;\r\n        }\r\n    }\r\n\r\n    // Called by the owner of the contract to close the Sale\r\n    function endCrowdSale() public onlyOwner {\r\n        require(now >= icoEndTimestamp || icoRaised >= icoSoftCapInWei);\r\n        if(icoRaised >= icoSoftCapInWei){\r\n            crowdSaleState = State.Success;\r\n            vault.close(); //send funds to owner\r\n        } else {\r\n            crowdSaleState = State.Failure;\r\n            vault.enableRefunds(); //allow people to get refund\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////\r\n    // Fetch some statistics about the ICO //\r\n    /////////////////////////////////////////\r\n\r\n    function getInvestorCount() public constant returns (uint256) {\r\n        return investorCount;\r\n    }\r\n\r\n    function getPresaleRaisedAmount() public constant returns (uint256) {\r\n        return preSaleRaised;\r\n    }\r\n\r\n    function getICORaisedAmount() public constant returns (uint256) {\r\n        return icoRaised;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"icoSoftCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokens_in_cents\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICOPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens_in_cents\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleTokenLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdSaleStateICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreSalePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getICORaisedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleMaxCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEndTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTokenLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPresaleRaisedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens_in_cents\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdSaleStatePreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoHardCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"HurtleCoin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a8623493f1ec43b0e5678d9a56db1099f54939e84769e5902da2885dc1e9aff0"}]}