{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n* @title ICO CONTRACT\r\n* @dev ERC-20 Token Standard Compliant\r\n* @author Fares A. Akel C. f.antonio.akel@gmail.com\r\n*/\r\n\r\n/**\r\n* @title SafeMath by OpenZeppelin\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract token {\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    }\r\n\r\ncontract ICO {\r\n    using SafeMath for uint256;\r\n    //This ico have 4 stages\r\n    enum State {\r\n        EarlyPreSale,\r\n        PreSale,\r\n        Crowdsale,\r\n        Successful\r\n    }\r\n    //public variables\r\n    State public state = State.EarlyPreSale; //Set initial stage\r\n    uint256 public startTime = now; //block-time when it was deployed\r\n    uint256[2] public price = [6667,5000]; //Price rates for base calculation\r\n    uint256 public totalRaised; //eth in wei\r\n    uint256 public totalDistributed; //tokens distributed\r\n    uint256 public stageDistributed; //tokens distributed on the actual stage\r\n    uint256 public completedAt; //Time stamp when the ico finish\r\n    token public tokenReward; //Address of the valit token used as reward\r\n    address public creator; //Address of the contract deployer\r\n    string public campaignUrl; //Web site of the campaing\r\n    string public version = '1';\r\n\r\n    //events for log\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(\r\n        address _creator,\r\n        string _url);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n    event StageDistributed(State _stage, uint256 _stageDistributed);\r\n\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n    /**\r\n    * @notice ICO constructor\r\n    * @param _campaignUrl is the ICO _url\r\n    * @param _addressOfTokenUsedAsReward is the token totalDistributed\r\n    */\r\n    function ICO (string _campaignUrl, token _addressOfTokenUsedAsReward) public {\r\n        creator = msg.sender;\r\n        campaignUrl = _campaignUrl;\r\n        tokenReward = token(_addressOfTokenUsedAsReward);\r\n\r\n        LogFunderInitialized(\r\n            creator,\r\n            campaignUrl\r\n            );\r\n    }\r\n\r\n    /**\r\n    * @notice contribution handler\r\n    */\r\n    function contribute() public notFinished payable {\r\n\r\n        require(msg.value >= 100 finney);\r\n\r\n        uint256 tokenBought; //Variable to store amount of tokens bought\r\n        totalRaised = totalRaised.add(msg.value); //Save the total eth totalRaised (in wei)\r\n\r\n        if (state == State.EarlyPreSale){\r\n\r\n            tokenBought = msg.value.mul(price[0]); //Base price rate\r\n            tokenBought = tokenBought.mul(12); // 12/10 = 1.2\r\n            tokenBought = tokenBought.div(10); // 1.2 => 100% + 20% Bonus               \r\n            \r\n            require(stageDistributed.add(tokenBought) <= 60000000 * (10 ** 18)); //Cannot exceed 60.000.000 distributed\r\n\r\n        } else if (state == State.PreSale){\r\n\r\n            tokenBought = msg.value.mul(price[0]); //Base price rate\r\n            tokenBought = tokenBought.mul(11); // 11/10 = 1.1\r\n            tokenBought = tokenBought.div(10); // 1.1 => 100% + 10% Bonus               \r\n            \r\n            require(stageDistributed.add(tokenBought) <= 60000000 * (10 ** 18)); //Cannot exceed 60.000.000 distributed\r\n\r\n        } else if (state == State.Crowdsale){\r\n\r\n            tokenBought = msg.value.mul(price[1]); //Base price rate\r\n\r\n            require(stageDistributed.add(tokenBought) <= 80000000 * (10 ** 18)); //Cannot exceed 80.000.000 distributed\r\n\r\n        }\r\n\r\n        totalDistributed = totalDistributed.add(tokenBought);\r\n        stageDistributed = stageDistributed.add(tokenBought);\r\n        \r\n        tokenReward.transfer(msg.sender, tokenBought);\r\n        \r\n        LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        LogContributorsPayout(msg.sender, tokenBought);\r\n        \r\n        checkIfFundingCompleteOrExpired();\r\n    }\r\n\r\n    /**\r\n    * @notice check status\r\n    */\r\n    function checkIfFundingCompleteOrExpired() public {\r\n        \r\n        if(state!=State.Successful){ //if we are on ICO period and its not Successful\r\n            \r\n            if(state == State.EarlyPreSale && now > startTime.add(8 days)){\r\n\r\n                StageDistributed(state,stageDistributed);\r\n\r\n                state = State.PreSale;\r\n                stageDistributed = 0;\r\n            \r\n            } else if(state == State.PreSale && now > startTime.add(15 days)){\r\n\r\n                StageDistributed(state,stageDistributed);\r\n\r\n                state = State.Crowdsale;\r\n                stageDistributed = 0;\r\n\r\n            } else if(state == State.Crowdsale && now > startTime.add(36 days)){\r\n\r\n                StageDistributed(state,stageDistributed);\r\n\r\n                state = State.Successful; //ico becomes Successful\r\n                completedAt = now; //ICO is complete\r\n                LogFundingSuccessful(totalRaised); //we log the finish\r\n                finished(); //and execute closure\r\n            \r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice closure handler\r\n    */\r\n    function finished() public { //When finished eth are transfered to creator\r\n        require(state == State.Successful);\r\n        uint256 remanent = tokenReward.balanceOf(this);\r\n\r\n        require(creator.send(this.balance));\r\n        tokenReward.transfer(creator,remanent);\r\n\r\n        LogBeneficiaryPaid(creator);\r\n        LogContributorsPayout(creator, remanent);\r\n    }\r\n\r\n    /**\r\n    * @notice Function to handle eth transfers\r\n    * @dev BEWARE: if a call to this functions doesn't have\r\n    * enought gas, transaction could not be finished\r\n    */\r\n\r\n    function () public payable {\r\n        contribute();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaignUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_campaignUrl\",\"type\":\"string\"},{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_stage\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_stageDistributed\",\"type\":\"uint256\"}],\"name\":\"StageDistributed\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000fcac7a7515e9a9d7619fa77a1fa738111f66727e00000000000000000000000000000000000000000000000000000000000000127777772e70697463686170706c792e636f6d0000000000000000000000000000","Library":"","SwarmSource":"bzzr://25237ddfecd29a7eb23c1248524cfca6ed6f9c4107d06506cc0df88e5f7efe9d"}]}