{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// Gizer Items - ERC721(ish) contract\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// SafeMath\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require( a == 0 || c / a == b );\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require( c >= a );\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require( b <= a );\r\n    c = a - b;\r\n  }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// Owned\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Owned {\r\n\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  mapping(address => bool) public isAdmin;\r\n\r\n  // Events ---------------------------\r\n\r\n  event OwnershipTransferProposed(address indexed _from, address indexed _to);\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n  event AdminChange(address indexed _admin, bool _status);\r\n\r\n  // Modifiers ------------------------\r\n\r\n  modifier onlyOwner { require( msg.sender == owner ); _; }\r\n  modifier onlyAdmin { require( isAdmin[msg.sender] ); _; }\r\n\r\n  // Functions ------------------------\r\n\r\n  function Owned() public {\r\n    owner = msg.sender;\r\n    isAdmin[owner] = true;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require( _newOwner != address(0x0) );\r\n    OwnershipTransferProposed(owner, _newOwner);\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n  \r\n  function addAdmin(address _a) public onlyOwner {\r\n    require( isAdmin[_a] == false );\r\n    isAdmin[_a] = true;\r\n    AdminChange(_a, true);\r\n  }\r\n\r\n  function removeAdmin(address _a) public onlyOwner {\r\n    require( isAdmin[_a] == true );\r\n    isAdmin[_a] = false;\r\n    AdminChange(_a, false);\r\n  }\r\n  \r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC721(ish) Token Interface \r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\ninterface ERC721Interface /* is ERC165 */ {\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _deedId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _deedId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 _balance);\r\n    function ownerOf(uint256 _deedId) external view returns (address _owner);\r\n    function transfer(address _to, uint256 _deedId) external;                    // removed payable\r\n    function transferFrom(address _from, address _to, uint256 _deedId) external; // removed payable\r\n    function approve(address _approved, uint256 _deedId) external;               // removed payable\r\n    // function setApprovalForAll(address _operateor, boolean _approved);        // removed payable\r\n    // function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\ninterface ERC721Metadata /* is ERC721 */ {\r\n    function name() external pure returns (string _name);\r\n    function symbol() external pure returns (string _symbol);\r\n    function deedUri(uint256 _deedId) external view returns (string _deedUri);\r\n}\r\n\r\ninterface ERC721Enumerable /* is ERC721 */ {\r\n    function totalSupply() external view returns (uint256 _count);\r\n    function deedByIndex(uint256 _index) external view returns (uint256 _deedId);\r\n    function countOfOwners() external view returns (uint256 _count);\r\n    // function ownerByIndex(uint256 _index) external view returns (address _owner);\r\n    // function deedOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 _deedId);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC721 Token\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC721Token is ERC721Interface, ERC721Metadata, ERC721Enumerable, Owned {\r\n  \r\n  using SafeMath for uint;\r\n\r\n  uint public ownerCount = 0;\r\n  uint public deedCount = 0;\r\n  \r\n  mapping(address => uint) public balances;\r\n  mapping(uint => address) public mIdOwner;\r\n  mapping(uint => address) public mIdApproved;\r\n\r\n  // Required Functions ------------------------\r\n\r\n  /* Get the number of tokens held by an address */\r\n\r\n  function balanceOf(address _owner) external view returns (uint balance) {\r\n    balance = balances[_owner];\r\n  }\r\n\r\n  /* Get the owner of a certain token */\r\n\r\n  function ownerOf(uint _id) external view returns (address owner) {\r\n    owner = mIdOwner[_id];\r\n    require( owner != address(0x0) );\r\n  }\r\n\r\n  /* Transfer token */\r\n  \r\n  function transfer(address _to, uint _id) external {\r\n    // check ownership and address\r\n    require( msg.sender == mIdOwner[_id] );\r\n    require( _to != address(0x0) );\r\n\r\n    // transfer ownership\r\n    mIdOwner[_id] = _to;\r\n    mIdApproved[_id] = address(0x0);\r\n\r\n    // update balances\r\n    updateBalances(msg.sender, _to);\r\n\r\n    // register event\r\n    Transfer(msg.sender, _to, _id);\r\n  }\r\n\r\n  /* Transfer from */\r\n  \r\n  function transferFrom(address _from, address _to, uint _id) external {\r\n    // check if the sender has the right to transfer\r\n    require( _from == mIdOwner[_id] && mIdApproved[_id] == msg.sender );\r\n\r\n    // transfer ownership and reset approval (if any)\r\n    mIdOwner[_id] = _to;\r\n    mIdApproved[_id] = address(0x0);\r\n\r\n    // update balances\r\n    updateBalances(_from, _to);\r\n\r\n    // register event\r\n    Transfer(_from, _to, _id);\r\n  }\r\n\r\n  /* Approve token transfer (we do not make it payable) */\r\n  \r\n   function approve(address _approved, uint _id) external {\r\n       require( msg.sender == mIdOwner[_id] );\r\n       require( msg.sender != _approved );\r\n       mIdApproved[_id] = _approved;\r\n       Approval(msg.sender, _approved, _id);\r\n   }\r\n\r\n  // Metadata Functions ---------------\r\n\r\n\r\n  // Enumeration Functions ------------\r\n  \r\n  function totalSupply() external view returns (uint count) {\r\n    count = deedCount;\r\n  }\r\n\r\n  function deedByIndex(uint _index) external view returns (uint id) {\r\n    id = _index;\r\n    require( id < deedCount );\r\n  }  \r\n  \r\n  function countOfOwners() external view returns (uint count) {\r\n    count = ownerCount;\r\n  }\r\n  \r\n  // Internal functions ---------------\r\n  \r\n  function updateBalances(address _from, address _to) internal {\r\n    // process from (skip if minted)\r\n    if (_from != address(0x0)) {\r\n      balances[_from]--;\r\n      if (balances[_from] == 0) { ownerCount--; }\r\n    }\r\n    // process to\r\n    balances[_to]++;\r\n    if (balances[_to] == 1) { ownerCount++; }\r\n  }\r\n      \r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC721 Token\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract GizerItems is ERC721Token {\r\n\r\n  /* Basic token data */\r\n  \r\n  string constant cName   = \"Gizer Item\";\r\n  string constant cSymbol = \"GZR721\";\r\n  \r\n  /* uuid information */\r\n\r\n  bytes32[] public code;\r\n  uint[] public weight;\r\n  uint public sumOfWeights;\r\n  \r\n  mapping(bytes32 => uint) public mCodeIndexPlus; // index + 1\r\n\r\n  /* Pseudo-randomisation variables */\r\n\r\n  uint public nonce = 0;\r\n  uint public lastRandom = 0;\r\n  \r\n  /* mapping from item index to uuid */\r\n  \r\n  mapping(uint => bytes32) public mIdxUuid;\r\n  \r\n  // Events ---------------------------\r\n  \r\n  event MintToken(address indexed minter, address indexed _owner, bytes32 indexed _code, uint _input);\r\n  \r\n  event CodeUpdate(uint8 indexed _type, bytes32 indexed _code, uint _weight, uint _sumOfWeights);\r\n  \r\n  // Basic Functions ------------------\r\n  \r\n  function GizerItems() public { }\r\n  \r\n  function () public payable { revert(); }\r\n  \r\n  // Information functions ------------\r\n\r\n  function name() external pure returns (string) {\r\n    return cName;\r\n  }\r\n  \r\n  function symbol() external pure returns (string) {\r\n    return cSymbol;\r\n  }\r\n  \r\n  function deedUri(uint _id) external view returns (string) {\r\n    return bytes32ToString(mIdxUuid[_id]);\r\n  }\r\n  \r\n  function getUuid(uint _id) external view returns (string) {\r\n    require( _id < code.length );\r\n    return bytes32ToString(code[_id]);  \r\n  }\r\n\r\n  // Token Minting --------------------\r\n  \r\n  function mint(address _to) public onlyAdmin returns (uint idx) {\r\n    \r\n    // initial checks\r\n    require( sumOfWeights > 0 );\r\n    require( _to != address(0x0) );\r\n    require( _to != address(this) );\r\n\r\n    // get random uuid\r\n    bytes32 uuid32 = getRandomUuid();\r\n\r\n    // mint token\r\n    deedCount++;\r\n    idx = deedCount;\r\n    mIdxUuid[idx] = uuid32;\r\n\r\n    // update balance and owner count\r\n    updateBalances(address(0x0), _to);\r\n    mIdOwner[idx] = _to;\r\n\r\n    // log event and return\r\n    MintToken(msg.sender, _to, uuid32, idx);\r\n  }\r\n  \r\n  // Random\r\n  \r\n  function getRandomUuid() internal returns (bytes32) {\r\n    // case where there is only one item type\r\n    if (code.length == 1) return code[0];\r\n\r\n    // more than one\r\n    updateRandom();\r\n    uint res = lastRandom % sumOfWeights;\r\n    uint cWeight = 0;\r\n    for (uint i = 0; i < code.length; i++) {\r\n      cWeight = cWeight + weight[i];\r\n      if (cWeight >= res) return code[i];\r\n    }\r\n\r\n    // we should never get here\r\n    revert();\r\n  }\r\n\r\n  function updateRandom() internal {\r\n    nonce++;\r\n    lastRandom = uint(keccak256(\r\n        nonce,\r\n        lastRandom,\r\n        block.blockhash(block.number - 1),\r\n        block.coinbase,\r\n        block.difficulty\r\n    ));\r\n  }\r\n  \r\n  // uuid functions -------------------\r\n  \r\n  /* add a new code + weight */\r\n  \r\n  function addCode(string _code, uint _weight) public onlyAdmin returns (bool success) {\r\n\r\n    bytes32 uuid32 = stringToBytes32(_code);\r\n\r\n    // weight posiitve & code not yet registered\r\n    require( _weight > 0 );\r\n    require( mCodeIndexPlus[uuid32] == 0 );\r\n\r\n    // add to end of array\r\n    uint idx = code.length;\r\n    code.push(uuid32);\r\n    weight.push(_weight);\r\n    mCodeIndexPlus[uuid32] = idx + 1;\r\n\r\n    // update sum of weights\r\n    sumOfWeights = sumOfWeights.add(_weight);\r\n\r\n    // register event and return\r\n    CodeUpdate(1, uuid32, _weight, sumOfWeights);\r\n    return true;\r\n  }\r\n  \r\n  /* update the weight of an existing code */\r\n  \r\n  function updateCodeWeight(string _code, uint _weight) public onlyAdmin returns (bool success) {\r\n\r\n    bytes32 uuid32 = stringToBytes32(_code);\r\n\r\n    // weight positive & code must be registered\r\n    require( _weight > 0 );\r\n    require( mCodeIndexPlus[uuid32] > 0 );\r\n\r\n    // update weight and sum of weights\r\n    uint idx = mCodeIndexPlus[uuid32] - 1;\r\n    uint oldWeight = weight[idx];\r\n    weight[idx] = _weight;\r\n    sumOfWeights = sumOfWeights.sub(oldWeight).add(_weight);\r\n\r\n    // register event and return\r\n    CodeUpdate(2, uuid32, _weight, sumOfWeights);\r\n    return true;\r\n  }\r\n  \r\n  /* remove an existing code */\r\n  \r\n  function removeCode(string _code) public onlyAdmin returns (bool success) {\r\n\r\n    bytes32 uuid32 = stringToBytes32(_code);\r\n\r\n    // code must be registered\r\n    require( mCodeIndexPlus[uuid32] > 0 );\r\n\r\n    // index of code to be deleted\r\n    uint idx = mCodeIndexPlus[uuid32] - 1;\r\n    uint idxLast = code.length - 1;\r\n\r\n    // update sum of weights and remove mapping\r\n    sumOfWeights = sumOfWeights.sub(weight[idx]);\r\n    mCodeIndexPlus[uuid32] = 0;\r\n\r\n    if (idx != idxLast) {\r\n      // if we are not deleting the last element:\r\n      // move last element to index of deleted element\r\n      code[idx] = code[idxLast];\r\n      weight[idx] = weight[idxLast];\r\n      mCodeIndexPlus[code[idxLast]] = idx;\r\n    }\r\n    // delete last element of arrays\r\n    delete code[idxLast];\r\n    code.length--;\r\n    delete weight[idxLast];\r\n    weight.length--;\r\n\r\n    // register event and return\r\n    CodeUpdate(3, uuid32, 0, sumOfWeights);\r\n    return true;\r\n  }\r\n\r\n  /* Transfer out any accidentally sent ERC20 tokens */\r\n\r\n  function transferAnyERC20Token(address tokenAddress, uint amount) public onlyOwner returns (bool success) {\r\n      return ERC20Interface(tokenAddress).transfer(owner, amount);\r\n  }\r\n  \r\n  // Utility functions ----------------\r\n\r\n  /* https://ethereum.stackexchange.com/questions/9142/how-to-convert-a-string-to-bytes32 */\r\n  \r\n  function stringToBytes32(string memory source) public pure returns (bytes32 result) {\r\n    bytes memory tempEmptyStringTest = bytes(source);\r\n    if (tempEmptyStringTest.length == 0) {\r\n        return 0x0;\r\n    }\r\n\r\n    assembly {\r\n        result := mload(add(source, 32))\r\n    }\r\n  }\r\n  \r\n  /* https://ethereum.stackexchange.com/questions/2519/how-to-convert-a-bytes32-to-string */\r\n\r\n  function bytes32ToString(bytes32 x) public pure returns (string) {\r\n    bytes memory bytesString = new bytes(32);\r\n    uint charCount = 0;\r\n    for (uint j = 0; j < 32; j++) {\r\n      byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n      if (char != 0) {\r\n        bytesString[charCount] = char;\r\n        charCount++;\r\n      }\r\n    }\r\n    bytes memory bytesStringTrimmed = new bytes(charCount);\r\n    for (j = 0; j < charCount; j++) {\r\n      bytesStringTrimmed[j] = bytesString[j];\r\n    }\r\n    return string(bytesStringTrimmed);\r\n  }\r\n  \r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Interface {\r\n  function transfer(address _to, uint _value) public returns (bool success);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"deedByIndex\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUuid\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"code\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"removeCode\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mIdApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_code\",\"type\":\"string\"},{\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"addCode\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"deedUri\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"mCodeIndexPlus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfOwners\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mIdOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumOfWeights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mIdxUuid\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_code\",\"type\":\"string\"},{\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"updateCodeWeight\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_code\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"MintToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"_code\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_weight\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sumOfWeights\",\"type\":\"uint256\"}],\"name\":\"CodeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"AdminChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"GizerItems","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a8b00e5ef18b98344e011ce2ce338201f16cebbd39e2430903b34c626a9502c4"}]}