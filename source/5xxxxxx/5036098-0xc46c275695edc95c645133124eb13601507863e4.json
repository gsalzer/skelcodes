{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract TokenTimeLock {\r\n    IToken public token;\r\n\r\n    address public beneficiary;\r\n\r\n    uint public releaseTimeFirst;\r\n    uint public amountFirst;\r\n\r\n    uint public releaseTimeSecond;\r\n    uint public amountSecond;\r\n\r\n\r\n    function TokenTimeLock(IToken _token, address _beneficiary, uint _releaseTimeFirst, uint _amountFirst, uint _releaseTimeSecond, uint _amountSecond)\r\n    public\r\n    {\r\n        require(_releaseTimeFirst > now && _releaseTimeSecond > now);\r\n        token = _token;\r\n        beneficiary = _beneficiary;\r\n\r\n        releaseTimeFirst = _releaseTimeFirst;\r\n        releaseTimeSecond  = _releaseTimeSecond;\r\n        amountFirst = _amountFirst;\r\n        amountSecond = _amountSecond;\r\n    }\r\n\r\n    function releaseFirst() public {\r\n        require(now >= releaseTimeFirst);\r\n\r\n        uint amount = token.balanceOf(this);\r\n        require(amount > 0 && amount >= amountFirst);\r\n\r\n        token.transfer(beneficiary, amountFirst);\r\n    }\r\n\r\n    function releaseSecond() public {\r\n        require(now >= releaseTimeSecond);\r\n\r\n        uint amount = token.balanceOf(this);\r\n        require(amount > 0 && amount >= amountSecond);\r\n\r\n        token.transfer(beneficiary, amountSecond);\r\n    }\r\n}\r\n\r\ncontract Base {\r\n    modifier only(address allowed) {\r\n        require(msg.sender == allowed);\r\n        _;\r\n    }\r\n\r\n    // *************************************************\r\n    // *          reentrancy handling                  *\r\n    // *************************************************\r\n\r\n    uint constant internal L00 = 2 ** 0;\r\n    uint constant internal L01 = 2 ** 1;\r\n    uint constant internal L02 = 2 ** 2;\r\n    uint constant internal L03 = 2 ** 3;\r\n    uint constant internal L04 = 2 ** 4;\r\n    uint constant internal L05 = 2 ** 5;\r\n\r\n    uint private bitlocks = 0;\r\n\r\n    modifier noAnyReentrancy {\r\n        var _locks = bitlocks;\r\n        require(_locks == 0);\r\n        bitlocks = uint(-1);\r\n        _;\r\n        bitlocks = _locks;\r\n    }\r\n\r\n}\r\n\r\ncontract Owned is Base {\r\n\r\n    address public owner;\r\n    address newOwner;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) only(owner) {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() only(newOwner) {\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n}\r\n\r\ncontract IToken {\r\n    function mint(address _to, uint _amount);\r\n    function start();\r\n    function getTotalSupply() returns(uint);\r\n    function balanceOf(address _owner) returns(uint);\r\n    function transfer(address _to, uint _amount) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n}\r\n\r\ncontract Crowdsale is Owned {\r\n    using SafeMath for uint;\r\n\r\n    enum State { INIT, PRESALE, PREICO, PREICO_FINISHED, ICO, CLOSED, EMERGENCY_STOP}\r\n    uint public constant MAX_SALE_SUPPLY = 26 * (10**24);\r\n\r\n    State public currentState = State.INIT;\r\n    IToken public token;\r\n    uint public totalSaleSupply = 0;\r\n    uint public totalFunds = 0;\r\n    uint public tokenPrice = 1000000000000000000; //wei\r\n    uint public bonus = 5000; //50%\r\n    uint public currentPrice;\r\n    address public beneficiary;\r\n    mapping(address => uint) balances;\r\n    mapping(address => TokenTimeLock) lockBalances;\r\n    mapping(address => uint) prices;\r\n\r\n    uint private bonusBase = 10000; //100%;\r\n\r\n    address confirmOwner = 0x40e72D1052A1bd4c40E5850DAC46C8B44e366a59;\r\n    \r\n    event Transfer(address indexed _to, uint _value);\r\n\r\n    modifier onlyConfirmOwner(){\r\n        require(msg.sender == confirmOwner);\r\n        _;\r\n    }\r\n    \r\n    modifier inState(State _state){\r\n        require(currentState == _state);\r\n        _;\r\n    }\r\n\r\n    modifier salesRunning(){\r\n        require(currentState == State.PREICO || currentState == State.ICO);\r\n        _;\r\n    }\r\n\r\n    function Crowdsale(address _beneficiary){\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function initialize(IToken _token)\r\n    public\r\n    only(owner)\r\n    inState(State.INIT)\r\n    {\r\n        require(_token != address(0));\r\n\r\n        token = _token;\r\n        currentPrice = tokenPrice.mul(bonus).div(bonusBase);\r\n    }\r\n\r\n    function setBonus(uint _bonus) public\r\n    only(owner)\r\n    {\r\n        bonus = _bonus;\r\n        currentPrice = tokenPrice.mul(bonus).div(bonusBase);\r\n    }\r\n\r\n    function setPrice(uint _tokenPrice)\r\n    public\r\n    only(owner)\r\n    {\r\n        tokenPrice = _tokenPrice;\r\n        currentPrice = tokenPrice.mul(bonus).div(bonusBase);\r\n    }\r\n\r\n    function setState(State _newState)\r\n    public\r\n    only(owner)\r\n    {\r\n        require(\r\n        currentState == State.INIT && _newState == State.PRESALE\r\n        || currentState == State.PRESALE && _newState == State.PREICO\r\n        || currentState == State.PREICO && _newState == State.PREICO_FINISHED\r\n        || currentState == State.PREICO_FINISHED && _newState == State.ICO\r\n        || currentState == State.ICO && _newState == State.CLOSED\r\n        || _newState == State.EMERGENCY_STOP\r\n        );\r\n\r\n        currentState = _newState;\r\n\r\n        if(_newState == State.CLOSED){\r\n            _finish();\r\n        }\r\n    }\r\n\r\n    function mintPresaleWithBlock(address _to, uint _firstStake, uint _firstUnblockDate, uint _secondStake, uint _secondUnblockDate)\r\n    public\r\n    only(owner)\r\n    inState(State.PRESALE)\r\n    {\r\n        uint totalAmount = _firstStake.add(_secondStake);\r\n        require(totalSaleSupply.add(totalAmount) <= MAX_SALE_SUPPLY);\r\n\r\n        totalSaleSupply = totalSaleSupply.add(totalAmount);\r\n\r\n        TokenTimeLock tokenTimeLock = new TokenTimeLock(token, _to, _firstUnblockDate, _firstStake, _secondUnblockDate, _secondStake);\r\n        lockBalances[_to] = tokenTimeLock;\r\n        _mint(address(tokenTimeLock), totalAmount);\r\n    }\r\n\r\n    function unblockFirstStake()\r\n    public\r\n    inState(State.CLOSED)\r\n    {\r\n        require(address(lockBalances[msg.sender]) != 0);\r\n\r\n        lockBalances[msg.sender].releaseFirst();\r\n    }\r\n\r\n    function unblockSecondStake()\r\n    public\r\n    inState(State.CLOSED)\r\n    {\r\n        require(address(lockBalances[msg.sender]) != 0);\r\n\r\n        lockBalances[msg.sender].releaseSecond();\r\n    }\r\n\r\n    function mintPresale(address _to, uint _amount)\r\n    public\r\n    only(owner)\r\n    inState(State.PRESALE)\r\n    {\r\n        require(totalSaleSupply.add(_amount) <= MAX_SALE_SUPPLY);\r\n\r\n        totalSaleSupply = totalSaleSupply.add(_amount);\r\n\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    function ()\r\n    public\r\n    payable\r\n    salesRunning\r\n    {\r\n        _receiveFunds();\r\n    }\r\n\r\n    function setTokenPrice(address _token, uint _price)\r\n    only(owner)\r\n    {\r\n        prices[_token] = _price;\r\n    }\r\n\r\n    function mint(uint _amount, address _erc20OrEth)\r\n    public\r\n    payable\r\n    salesRunning\r\n    {\r\n        uint transferTokens;\r\n\r\n        if(_erc20OrEth == address(0)){\r\n            require(msg.value != 0);\r\n            uint weiAmount = msg.value;\r\n            transferTokens = weiAmount.div(currentPrice);\r\n            require(totalSaleSupply.add(transferTokens) <= MAX_SALE_SUPPLY);\r\n\r\n            totalSaleSupply = totalSaleSupply.add(transferTokens);\r\n            balances[msg.sender] = balances[msg.sender].add(weiAmount);\r\n            totalFunds = totalFunds.add(weiAmount);\r\n\r\n            _mint(msg.sender, transferTokens);\r\n            beneficiary.transfer(weiAmount);\r\n            Transfer(msg.sender, transferTokens);\r\n        } else {\r\n            uint price = prices[_erc20OrEth];\r\n\r\n            require(price > 0 && _amount > 0);\r\n\r\n            transferTokens = _amount.div(price);\r\n            require(totalSaleSupply.add(transferTokens) <= MAX_SALE_SUPPLY);\r\n\r\n            totalSaleSupply = totalSaleSupply.add(transferTokens);\r\n            balances[msg.sender] = balances[msg.sender].add(weiAmount);\r\n            totalFunds = totalFunds.add(weiAmount);\r\n\r\n            IToken(_erc20OrEth).transferFrom(msg.sender, beneficiary, transferTokens);\r\n            Transfer(msg.sender, transferTokens);\r\n        }\r\n    }\r\n\r\n    function refundBalance(address _owner)\r\n    public\r\n    constant\r\n    returns(uint)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function investDirect(address _to, uint _amount)\r\n    public\r\n    salesRunning\r\n    onlyConfirmOwner\r\n    {\r\n\r\n        require(totalSaleSupply.add(_amount) <= MAX_SALE_SUPPLY);\r\n\r\n        totalSaleSupply = totalSaleSupply.add(_amount);\r\n\r\n        _mint(_to, _amount);\r\n        Transfer(_to, _amount);\r\n        \r\n    }\r\n    //==================== Internal Methods =================\r\n    function _receiveFunds()\r\n    internal\r\n    {\r\n        require(msg.value != 0);\r\n        uint transferTokens = msg.value.div(currentPrice);\r\n        require(totalSaleSupply.add(transferTokens) <= MAX_SALE_SUPPLY);\r\n\r\n        totalSaleSupply = totalSaleSupply.add(transferTokens);\r\n        balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n        totalFunds = totalFunds.add(msg.value);\r\n\r\n        _mint(msg.sender, transferTokens);\r\n        beneficiary.transfer(msg.value);\r\n        Transfer(msg.sender, transferTokens);\r\n    }\r\n    function _mint(address _to, uint _amount)\r\n    noAnyReentrancy\r\n    internal\r\n    {\r\n        token.mint(_to, _amount);\r\n    }\r\n\r\n    function _finish()\r\n    noAnyReentrancy\r\n    internal\r\n    {\r\n        token.start();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unblockFirstStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unblockSecondStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"refundBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SALE_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_erc20OrEth\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"investDirect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_firstStake\",\"type\":\"uint256\"},{\"name\":\"_firstUnblockDate\",\"type\":\"uint256\"},{\"name\":\"_secondStake\",\"type\":\"uint256\"},{\"name\":\"_secondUnblockDate\",\"type\":\"uint256\"}],\"name\":\"mintPresaleWithBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000040e72d1052a1bd4c40e5850dac46c8b44e366a59","Library":"","SwarmSource":"bzzr://6ee7db9246af1f5840a4d512b9c5232647c1098842f91930b43008534eb2725a"}]}