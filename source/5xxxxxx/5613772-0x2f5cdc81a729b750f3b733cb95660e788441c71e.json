{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n// File: contracts/storage/interface/RocketStorageInterface.sol\r\n\r\n// Our eternal storage interface\r\ncontract RocketStorageInterface {\r\n    // Modifiers\r\n    modifier onlyLatestRocketNetworkContract() {_;}\r\n    // Getters\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getUint(bytes32 _key) external view returns (uint);\r\n    function getString(bytes32 _key) external view returns (string);\r\n    function getBytes(bytes32 _key) external view returns (bytes);\r\n    function getBool(bytes32 _key) external view returns (bool);\r\n    function getInt(bytes32 _key) external view returns (int);\r\n    // Setters\r\n    function setAddress(bytes32 _key, address _value) onlyLatestRocketNetworkContract external;\r\n    function setUint(bytes32 _key, uint _value) onlyLatestRocketNetworkContract external;\r\n    function setString(bytes32 _key, string _value) onlyLatestRocketNetworkContract external;\r\n    function setBytes(bytes32 _key, bytes _value) onlyLatestRocketNetworkContract external;\r\n    function setBool(bytes32 _key, bool _value) onlyLatestRocketNetworkContract external;\r\n    function setInt(bytes32 _key, int _value) onlyLatestRocketNetworkContract external;\r\n    // Deleters\r\n    function deleteAddress(bytes32 _key) onlyLatestRocketNetworkContract external;\r\n    function deleteUint(bytes32 _key) onlyLatestRocketNetworkContract external;\r\n    function deleteString(bytes32 _key) onlyLatestRocketNetworkContract external;\r\n    function deleteBytes(bytes32 _key) onlyLatestRocketNetworkContract external;\r\n    function deleteBool(bytes32 _key) onlyLatestRocketNetworkContract external;\r\n    function deleteInt(bytes32 _key) onlyLatestRocketNetworkContract external;\r\n    // Hash helpers\r\n    function kcck256str(string _key1) external pure returns (bytes32);\r\n    function kcck256strstr(string _key1, string _key2) external pure returns (bytes32);\r\n    function kcck256stradd(string _key1, address _key2) external pure returns (bytes32);\r\n    function kcck256straddadd(string _key1, address _key2, address _key3) external pure returns (bytes32);\r\n}\r\n\r\n// File: contracts/storage/RocketBase.sol\r\n\r\n/// @title Base settings / modifiers for each contract in Rocket Pool\r\n/// @author David Rugendyke\r\ncontract RocketBase {\r\n\r\n    /*** Events ****************/\r\n\r\n    event ContractAdded (\r\n        address indexed _newContractAddress,                    // Address of the new contract\r\n        uint256 created                                         // Creation timestamp\r\n    );\r\n\r\n    event ContractUpgraded (\r\n        address indexed _oldContractAddress,                    // Address of the contract being upgraded\r\n        address indexed _newContractAddress,                    // Address of the new contract\r\n        uint256 created                                         // Creation timestamp\r\n    );\r\n\r\n    /**** Properties ************/\r\n\r\n    uint8 public version;                                                   // Version of this contract\r\n\r\n\r\n    /*** Contracts **************/\r\n\r\n    RocketStorageInterface rocketStorage = RocketStorageInterface(0);       // The main storage contract where primary persistant storage is maintained\r\n\r\n\r\n    /*** Modifiers ************/\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        roleCheck(\"owner\", msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to scope access to admins\r\n    */\r\n    modifier onlyAdmin() {\r\n        roleCheck(\"admin\", msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to scope access to admins\r\n    */\r\n    modifier onlySuperUser() {\r\n        require(roleHas(\"owner\", msg.sender) || roleHas(\"admin\", msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Reverts if the address doesn't have this role\r\n    */\r\n    modifier onlyRole(string _role) {\r\n        roleCheck(_role, msg.sender);\r\n        _;\r\n    }\r\n\r\n  \r\n    /*** Constructor **********/\r\n   \r\n    /// @dev Set the main Rocket Storage address\r\n    constructor(address _rocketStorageAddress) public {\r\n        // Update the contract address\r\n        rocketStorage = RocketStorageInterface(_rocketStorageAddress);\r\n    }\r\n\r\n\r\n    /*** Role Utilities */\r\n\r\n    /**\r\n    * @dev Check if an address is an owner\r\n    * @return bool\r\n    */\r\n    function isOwner(address _address) public view returns (bool) {\r\n        return rocketStorage.getBool(keccak256(\"access.role\", \"owner\", _address));\r\n    }\r\n\r\n    /**\r\n    * @dev Check if an address has this role\r\n    * @return bool\r\n    */\r\n    function roleHas(string _role, address _address) internal view returns (bool) {\r\n        return rocketStorage.getBool(keccak256(\"access.role\", _role, _address));\r\n    }\r\n\r\n     /**\r\n    * @dev Check if an address has this role, reverts if it doesn't\r\n    */\r\n    function roleCheck(string _role, address _address) view internal {\r\n        require(roleHas(_role, _address) == true);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Authorized.sol\r\n\r\n/**\r\n * @title Authorized\r\n * @dev The Authorized contract has an issuer, depository, and auditor address, and provides basic \r\n * authorization control functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Authorized is RocketBase {\r\n\r\n    // The issuer's address\r\n    // In contract's RocketStorage \r\n    // address public token.issuer;\r\n\r\n    // The depository's address\r\n    // In contract's RocketStorage \r\n    // address public token.depository;\r\n\r\n    // The auditor's address\r\n    // In contract's RocketStorage \r\n    // address public token.auditor;\r\n\r\n    event IssuerTransferred(address indexed previousIssuer, address indexed newIssuer);\r\n    event AuditorTransferred(address indexed previousAuditor, address indexed newAuditor);\r\n    event DepositoryTransferred(address indexed previousDepository, address indexed newDepository);\r\n\r\n    /* \r\n     *  Modifiers\r\n     */\r\n\r\n    // Ensure sender is issuer   \r\n    modifier onlyIssuer {\r\n        require( msg.sender == issuer() );\r\n        _;\r\n    }\r\n\r\n    // Ensure sender is depository\r\n    modifier onlyDepository {\r\n        require( msg.sender == depository() );\r\n        _;\r\n    }\r\n\r\n    // Ensure sender is auditor\r\n    modifier onlyAuditor {\r\n        require( msg.sender == auditor() );\r\n        _;\r\n    }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to explicity assign a new issuer.\r\n   * @param newIssuer The address of the new issuer.\r\n   */\r\n  function setIssuer(address newIssuer) public onlyOwner {\r\n    require(newIssuer != address(0));\r\n    rocketStorage.setAddress(keccak256(\"token.issuer\"), newIssuer);\r\n    emit IssuerTransferred(issuer(), newIssuer);\r\n  }\r\n\r\n  /**\r\n   * @dev Get the current issuer address from storage.\r\n   */\r\n  function issuer() public view returns (address) {\r\n    return rocketStorage.getAddress(keccak256(\"token.issuer\"));\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to explicity assign a new auditor.\r\n   * @param newAuditor The address of the new auditor.\r\n   */\r\n  function setAuditor(address newAuditor) public onlyOwner {\r\n    require(newAuditor != address(0));\r\n    rocketStorage.setAddress(keccak256(\"token.auditor\"), newAuditor);\r\n    emit AuditorTransferred(auditor(), newAuditor);\r\n  }\r\n\r\n  /**\r\n   * @dev Get the current auditor address from storage.\r\n   */\r\n  function auditor() public view returns (address) {\r\n    return rocketStorage.getAddress(keccak256(\"token.auditor\"));\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to explicity assign a new depository.\r\n   * @param newDepository The address of the new depository.\r\n   */\r\n  function setDepository(address newDepository) public onlyOwner {\r\n    require(newDepository != address(0));\r\n    rocketStorage.setAddress(keccak256(\"token.depository\"), newDepository);\r\n    emit DepositoryTransferred(depository(), newDepository);\r\n  }\r\n\r\n  /**\r\n   * @dev Get the current depository address from storage.\r\n   */\r\n  function depository() public view returns (address) {\r\n    return rocketStorage.getAddress(keccak256(\"token.depository\"));\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/PausableRedemption.sol\r\n\r\n/**\r\n * @title PausableRedemption\r\n * @dev Base contract which allows children to implement an emergency stop mechanism, specifically for redemption.\r\n */\r\ncontract PausableRedemption is RocketBase {\r\n  event PauseRedemption();\r\n  event UnpauseRedemption();\r\n\r\n  // Whether redemption is paused or not\r\n  // Stored in RocketStorage\r\n  // bool public token.redemptionPaused = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract redemption is not paused.\r\n   */\r\n  modifier whenRedemptionNotPaused() {\r\n    require(!redemptionPaused());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract redemption is paused.\r\n   */\r\n  modifier whenRedemptionPaused() {\r\n    require(redemptionPaused());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev returns the redemptionPaused status from contract storage\r\n   */\r\n  function redemptionPaused() public view returns (bool) {\r\n    return rocketStorage.getBool(keccak256(\"token.redemptionPaused\"));\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pauseRedemption() onlyOwner whenRedemptionNotPaused public {\r\n    rocketStorage.setBool(keccak256(\"token.redemptionPaused\"), true);\r\n    emit PauseRedemption();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause redemption, returns to normal state\r\n   */\r\n  function unpauseRedemption() onlyOwner whenRedemptionPaused public {\r\n    rocketStorage.setBool(keccak256(\"token.redemptionPaused\"), false);\r\n    emit UnpauseRedemption();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/Issuable.sol\r\n\r\ncontract Issuable is RocketBase, Authorized, PausableRedemption {\r\n    using SafeMath for uint256;\r\n\r\n    event AssetsUpdated(address indexed depository, uint256 amount);\r\n    event CertificationUpdated(address indexed auditor, uint256 amount);\r\n\r\n    // Get assetsOnDeposit\r\n    function assetsOnDeposit() public view returns (uint256) {\r\n        return rocketStorage.getUint(keccak256(\"issuable.assetsOnDeposit\"));\r\n    }\r\n\r\n    // Get assetsCertified\r\n    function assetsCertified() public view returns (uint256) {\r\n        return rocketStorage.getUint(keccak256(\"issuable.assetsCertified\"));\r\n    }\r\n\r\n    /******* For paused redemption *******/\r\n\r\n    // Set assetsOnDeposit\r\n    function setAssetsOnDeposit(uint256 _total) public onlyDepository whenRedemptionPaused {\r\n        uint256 totalSupply_ = rocketStorage.getUint(keccak256(\"token.totalSupply\"));\r\n        require(_total >= totalSupply_);\r\n        rocketStorage.setUint(keccak256(\"issuable.assetsOnDeposit\"), _total);\r\n        emit AssetsUpdated(msg.sender, _total);\r\n    }\r\n\r\n    // Set assetsCertified\r\n    function setAssetsCertified(uint256 _total) public onlyAuditor whenRedemptionPaused {\r\n        uint256 totalSupply_ = rocketStorage.getUint(keccak256(\"token.totalSupply\"));\r\n        require(_total >= totalSupply_);\r\n        rocketStorage.setUint(keccak256(\"issuable.assetsCertified\"), _total);\r\n        emit CertificationUpdated(msg.sender, _total);\r\n    }\r\n\r\n    /******* For during both paused and non-paused redemption *******/\r\n\r\n    // Depository can receive assets (increasing)\r\n    function receiveAssets(uint256 _units) public onlyDepository {\r\n        uint256 total_ = assetsOnDeposit().add(_units);\r\n        rocketStorage.setUint(keccak256(\"issuable.assetsOnDeposit\"), total_);\r\n        emit AssetsUpdated(msg.sender, total_);\r\n    }\r\n\r\n    // Depository can release assets (decreasing), but never to less than the totalSupply\r\n    function releaseAssets(uint256 _units) public onlyDepository {\r\n        uint256 totalSupply_ = rocketStorage.getUint(keccak256(\"token.totalSupply\"));\r\n        uint256 total_ = assetsOnDeposit().sub(_units);\r\n        require(total_ >= totalSupply_);\r\n        rocketStorage.setUint(keccak256(\"issuable.assetsOnDeposit\"), total_);\r\n        emit AssetsUpdated(msg.sender, total_);\r\n    }\r\n\r\n    // Auditor can increase certified assets\r\n    function increaseAssetsCertified(uint256 _units) public onlyAuditor {\r\n        uint256 total_ = assetsCertified().add(_units);\r\n        rocketStorage.setUint(keccak256(\"issuable.assetsCertified\"), total_);\r\n        emit CertificationUpdated(msg.sender, total_);\r\n    }\r\n\r\n    // Auditor can decrease certified assets\r\n    function decreaseAssetsCertified(uint256 _units) public onlyAuditor {\r\n        uint256 totalSupply_ = rocketStorage.getUint(keccak256(\"token.totalSupply\"));\r\n        uint256 total_ = assetsCertified().sub(_units);\r\n        require(total_ >= totalSupply_);\r\n        rocketStorage.setUint(keccak256(\"issuable.assetsCertified\"), total_);\r\n        emit CertificationUpdated(msg.sender, total_);\r\n    }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/LD2Token.sol\r\n\r\n/// @title The primary ERC20 token contract, using LD2 storage\r\n/// @author Steven Brendtro\r\ncontract LD2Token is ERC20, RocketBase, Issuable {\r\n  using SafeMath for uint256;\r\n\r\n  event TokensIssued(address indexed issuer, uint256 amount);\r\n\r\n  // The balances of the token, per ERC20, but stored in contract storage (rocketStorage)\r\n  // mapping(address => uint256) token.balances;\r\n\r\n  // The totalSupply of the token, per ERC20, but stored in contract storage (rocketStorage)\r\n  // uint256 token.totalSupply;\r\n\r\n  // The authorizations of the token, per ERC20, but stored in contract storage (rocketStorage)\r\n  // This is accomplished by hashing token.allowed + _fromAddr + _toAddr\r\n  // mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return rocketStorage.getUint(keccak256(\"token.totalSupply\"));\r\n  }\r\n\r\n  /**\r\n  * @dev increase total number of tokens in existence\r\n  */\r\n  function increaseTotalSupply(uint256 _increase) internal {\r\n    uint256 totalSupply_ = totalSupply();\r\n    totalSupply_ = totalSupply_.add(_increase);\r\n    rocketStorage.setUint(keccak256(\"token.totalSupply\"),totalSupply_);\r\n  }\r\n\r\n  /**\r\n  * @dev decrease total number of tokens in existence\r\n  */\r\n  function decreaseTotalSupply(uint256 _decrease) internal {\r\n    uint256 totalSupply_ = totalSupply();\r\n    totalSupply_ = totalSupply_.sub(_decrease);\r\n    rocketStorage.setUint(keccak256(\"token.totalSupply\"),totalSupply_);\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balanceOf(msg.sender));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    // Use the contract storage\r\n    setBalanceOf(msg.sender, balanceOf(msg.sender).sub(_value));\r\n    setBalanceOf(_to, balanceOf(_to).add(_value));\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return rocketStorage.getUint(keccak256(\"token.balances\",_owner));\r\n  }\r\n\r\n  /**\r\n  * @dev Updates the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @param _balance An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function setBalanceOf(address _owner, uint256 _balance) internal {\r\n    rocketStorage.setUint(keccak256(\"token.balances\",_owner), _balance);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return rocketStorage.getUint(keccak256(\"token.allowed\",_owner,_spender));\r\n  }\r\n\r\n  /**\r\n  * @dev Updates the allowance by _owner of the _spender to have access to _balance.\r\n  * @param _owner The address to query the the balance of.\r\n  * @param _spender The address which will spend the funds\r\n  * @param _balance An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function setAllowance(address _owner, address _spender, uint256 _balance) internal {\r\n    rocketStorage.setUint(keccak256(\"token.allowed\",_owner,_spender), _balance);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balanceOf(_from));\r\n    require(_value <= allowance(_from, msg.sender));\r\n    \r\n    setBalanceOf(_from, balanceOf(_from).sub(_value));\r\n    setBalanceOf(_to, balanceOf(_to).add(_value));\r\n    setAllowance(_from, msg.sender, allowance(_from, msg.sender).sub(_value));\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    setAllowance(msg.sender, _spender, _value);\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    setAllowance(msg.sender, _spender, allowance(msg.sender, _spender).add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowance(msg.sender, _spender));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowance(msg.sender, _spender);\r\n    if (_subtractedValue > oldValue) {\r\n      setAllowance(msg.sender, _spender, 0);\r\n    } else {\r\n      setAllowance(msg.sender, _spender, oldValue.sub(_subtractedValue));\r\n    }\r\n    emit Approval(msg.sender, _spender, allowance(msg.sender, _spender));\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * Issuer can only issue tokens up to the lesser of assetsOnDeposit and\r\n   * assetsCertified.  This prevents issuing uncertified tokens and ensures\r\n   * that every token issued has exactly one unit of the asset backing it.\r\n   * @param _units Total amount of additional tokens to issue\r\n   */\r\n  function issueTokensForAssets( uint256 _units ) public onlyIssuer {\r\n\r\n    uint256 newSupply_ = totalSupply().add(_units);\r\n\r\n    // Find the greater of assetsOnDeposit and assetsCertified\r\n    uint256 limit_ = 0;\r\n    if ( assetsOnDeposit() > assetsCertified() )\r\n      limit_ = assetsOnDeposit();\r\n    else\r\n      limit_ = assetsCertified();\r\n\r\n    // the new supply can't be larger than our issuance limit\r\n    require( newSupply_ <= limit_ );\r\n\r\n    // Increase the total supply\r\n    increaseTotalSupply( _units );\r\n\r\n    // Increase the issuer's balance\r\n    setBalanceOf(issuer(), balanceOf(issuer()).add(_units));\r\n\r\n    emit TokensIssued(issuer(), _units);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/LD2Zero.sol\r\n\r\n/// @title The LD2-style ERC20 token for LD2.zero\r\n/// @author Steven Brendtro\r\ncontract LD2Zero is LD2Token {\r\n\r\n  string public name = \"LD2.zero\";\r\n  string public symbol = \"XLDZ\";\r\n  // Decimals are stored in RocketStorage\r\n  // uint8 public token.decimals = 18;\r\n\r\n  /*** Constructor ***********/\r\n\r\n  /// @dev LD2Zero constructor\r\n  constructor(address _rocketStorageAddress) RocketBase(_rocketStorageAddress) public {\r\n    // Set the decimals\r\n    if(decimals() == 0) {\r\n      rocketStorage.setUint(keccak256(\"token.decimals\"),18);\r\n    }\r\n  }\r\n\r\n  function decimals() public view returns (uint8) {\r\n    return uint8(rocketStorage.getUint(keccak256(\"token.decimals\")));\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_units\",\"type\":\"uint256\"}],\"name\":\"increaseAssetsCertified\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDepository\",\"type\":\"address\"}],\"name\":\"setDepository\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_units\",\"type\":\"uint256\"}],\"name\":\"releaseAssets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_units\",\"type\":\"uint256\"}],\"name\":\"issueTokensForAssets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auditor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_units\",\"type\":\"uint256\"}],\"name\":\"receiveAssets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_units\",\"type\":\"uint256\"}],\"name\":\"decreaseAssetsCertified\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetsOnDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetsCertified\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newIssuer\",\"type\":\"address\"}],\"name\":\"setIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"setAssetsOnDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redemptionPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseRedemption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseRedemption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAuditor\",\"type\":\"address\"}],\"name\":\"setAuditor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"setAssetsCertified\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depository\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rocketStorageAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"depository\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CertificationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnpauseRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousIssuer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newIssuer\",\"type\":\"address\"}],\"name\":\"IssuerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAuditor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAuditor\",\"type\":\"address\"}],\"name\":\"AuditorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousDepository\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newDepository\",\"type\":\"address\"}],\"name\":\"DepositoryTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"created\",\"type\":\"uint256\"}],\"name\":\"ContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"created\",\"type\":\"uint256\"}],\"name\":\"ContractUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"LD2Zero","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006816184f231aa6af7f959d99ec0ace5731ab33f0","Library":"","SwarmSource":"bzzr://73ba48b577c606033328cba5d9b557f9f0563678c95115f31dd557fbf62d6634"}]}