{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n *      See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an address access to this role\r\n     */\r\n    function add(Role storage role, address addr)\r\n    internal\r\n    {\r\n        role.bearer[addr] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an address' access to this role\r\n     */\r\n    function remove(Role storage role, address addr)\r\n    internal\r\n    {\r\n        role.bearer[addr] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an address has this role\r\n     * // reverts\r\n     */\r\n    function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n    {\r\n        require(has(role, addr));\r\n    }\r\n\r\n    /**\r\n     * @dev check if an address has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return role.bearer[addr];\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * @dev Supports unlimited numbers of roles and addresses.\r\n * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n *  for you to write your own implementation of this interface using Enums or similar.\r\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\r\n *  to avoid typos.\r\n */\r\ncontract RBAC {\r\n    using Roles for Roles.Role;\r\n\r\n    mapping (string => Roles.Role) private roles;\r\n\r\n    event RoleAdded(address addr, string roleName);\r\n    event RoleRemoved(address addr, string roleName);\r\n\r\n    /**\r\n     * @dev reverts if addr does not have role\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     * // reverts\r\n     */\r\n    function checkRole(address addr, string roleName)\r\n    view\r\n    public\r\n    {\r\n        roles[roleName].check(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev determine if addr has role\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     * @return bool\r\n     */\r\n    function hasRole(address addr, string roleName)\r\n    view\r\n    public\r\n    returns (bool)\r\n    {\r\n        return roles[roleName].has(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev add a role to an address\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     */\r\n    function addRole(address addr, string roleName)\r\n    internal\r\n    {\r\n        roles[roleName].add(addr);\r\n        emit RoleAdded(addr, roleName);\r\n    }\r\n\r\n    /**\r\n     * @dev remove a role from an address\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     */\r\n    function removeRole(address addr, string roleName)\r\n    internal\r\n    {\r\n        roles[roleName].remove(addr);\r\n        emit RoleRemoved(addr, roleName);\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n     * @param roleName the name of the role\r\n     * // reverts\r\n     */\r\n    modifier onlyRole(string roleName)\r\n    {\r\n        checkRole(msg.sender, roleName);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n     * @param roleNames the names of the roles to scope access to\r\n     * // reverts\r\n     *\r\n     * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n     *  see: https://github.com/ethereum/solidity/issues/2467\r\n     */\r\n    // modifier onlyRoles(string[] roleNames) {\r\n    //     bool hasAnyRole = false;\r\n    //     for (uint8 i = 0; i < roleNames.length; i++) {\r\n    //         if (hasRole(msg.sender, roleNames[i])) {\r\n    //             hasAnyRole = true;\r\n    //             break;\r\n    //         }\r\n    //     }\r\n\r\n    //     require(hasAnyRole);\r\n\r\n    //     _;\r\n    // }\r\n}\r\n\r\n\r\n/**\r\n * @title RBACWithAdmin\r\n * @author Matt Condon (@Shrugs)\r\n * @dev It's recommended that you define constants in the contract,\r\n * @dev like ROLE_ADMIN below, to avoid typos.\r\n */\r\ncontract RBACWithAdmin is RBAC {\r\n    /**\r\n     * A constant role name for indicating admins.\r\n     */\r\n    string public constant ROLE_ADMIN = \"admin\";\r\n\r\n    /**\r\n     * @dev modifier to scope access to admins\r\n     * // reverts\r\n     */\r\n    modifier onlyAdmin()\r\n    {\r\n        checkRole(msg.sender, ROLE_ADMIN);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev constructor. Sets msg.sender as admin by default\r\n     */\r\n    function RBACWithAdmin()\r\n    public\r\n    {\r\n        addRole(msg.sender, ROLE_ADMIN);\r\n    }\r\n\r\n    /**\r\n     * @dev add a role to an address\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     */\r\n    function adminAddRole(address addr, string roleName)\r\n    onlyAdmin\r\n    public\r\n    {\r\n        addRole(addr, roleName);\r\n    }\r\n\r\n    /**\r\n     * @dev remove a role from an address\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     */\r\n    function adminRemoveRole(address addr, string roleName)\r\n    onlyAdmin\r\n    public\r\n    {\r\n        removeRole(addr, roleName);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    ERC20 public token;\r\n\r\n    // Address where funds are collected\r\n    address public wallet;\r\n\r\n    // How many token units a buyer gets per wei\r\n    uint256 public rate;\r\n\r\n    // Amount of wei raised\r\n    uint256 public weiRaised;\r\n\r\n    /**\r\n     * Event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * @param _rate Number of token units a buyer gets per wei\r\n     * @param _wallet Address where collected funds will be forwarded to\r\n     * @param _token Address of the token being sold\r\n     */\r\n    function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\r\n        require(_rate > 0);\r\n        require(_wallet != address(0));\r\n        require(_token != address(0));\r\n\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n        token = _token;\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // Crowdsale external interface\r\n    // -----------------------------------------\r\n\r\n    /**\r\n     * @dev fallback function ***DO NOT OVERRIDE***\r\n     */\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev low level token purchase ***DO NOT OVERRIDE***\r\n     * @param _beneficiary Address performing the token purchase\r\n     */\r\n    function buyTokens(address _beneficiary) public payable {\r\n\r\n        uint256 weiAmount = msg.value;\r\n        _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        _processPurchase(_beneficiary, tokens);\r\n        emit TokenPurchase(\r\n        msg.sender,\r\n        _beneficiary,\r\n        weiAmount,\r\n        tokens\r\n        );\r\n\r\n        _updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n        _forwardFunds();\r\n        _postValidatePurchase(_beneficiary, weiAmount);\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // Internal interface (extensible)\r\n    // -----------------------------------------\r\n\r\n    /**\r\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n     * @param _beneficiary Address performing the token purchase\r\n     * @param _weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n        require(_beneficiary != address(0));\r\n        require(_weiAmount != 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n     * @param _beneficiary Address performing the token purchase\r\n     * @param _weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n        // optional override\r\n    }\r\n\r\n    /**\r\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n     * @param _beneficiary Address performing the token purchase\r\n     * @param _tokenAmount Number of tokens to be emitted\r\n     */\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        token.transfer(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n     * @param _beneficiary Address receiving the tokens\r\n     * @param _tokenAmount Number of tokens to be purchased\r\n     */\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n     * @param _beneficiary Address receiving the tokens\r\n     * @param _weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n        // optional override\r\n    }\r\n\r\n    /**\r\n     * @dev Override to extend the way in which ether is converted to tokens.\r\n     * @param _weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _weiAmount\r\n     */\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        return _weiAmount.mul(rate);\r\n    }\r\n\r\n    /**\r\n     * @dev Determines how ETH is stored/forwarded on purchases.\r\n     */\r\n    function _forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n}\r\n\r\n\r\n\r\n// NbtToken crowdsale-valuable interface\r\ncontract NbtToken  {\r\n    uint256 public saleableTokens;\r\n    uint256 public MAX_SALE_VOLUME;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function moveTokensFromSaleToCirculating(address _to, uint256 _amount) public returns (bool);\r\n}\r\n\r\n/// @title Nbt Token Crowdsale Contract\r\n// Main crowdsale contract\r\ncontract NbtCrowdsale is Crowdsale, Pausable, RBACWithAdmin {\r\n\r\n    /*** EVENTS ***/\r\n\r\n    event NewStart(uint256 start);\r\n    event NewDeadline(uint256 deadline);\r\n    event NewRate(uint256 rate);\r\n    event NewWallet(address new_address);\r\n    event Sale(address indexed buyer, uint256 tokens_with_bonuses);\r\n\r\n    /*** CONSTANTS ***/\r\n\r\n    uint256 public DECIMALS = 8;\r\n    uint256 public BONUS1 = 100; // %\r\n    uint256 public BONUS1_LIMIT = 150000000 * 10**DECIMALS;\r\n    uint256 public BONUS2 = 60; // %\r\n    uint256 public BONUS2_LIMIT = 250000000 * 10**DECIMALS;\r\n    uint256 public MIN_TOKENS = 1000 * 10**DECIMALS;\r\n\r\n    NbtToken public token;\r\n\r\n    /*** STORAGE ***/\r\n\r\n    uint256 public start;\r\n    uint256 public deadline;\r\n    bool crowdsaleClosed = false;\r\n\r\n    /*** MODIFIERS ***/\r\n\r\n    modifier afterDeadline() { if (now > deadline) _; }\r\n    modifier beforeDeadline() { if (now <= deadline) _; }\r\n    modifier afterStart() { if (now >= start) _; }\r\n    modifier beforeStart() { if (now < start) _; }\r\n\r\n    /*** CONSTRUCTOR ***/\r\n\r\n    /**\r\n      * @param _rate Number of token units a buyer gets per wei\r\n      * @param _wallet Address where collected funds will be forwarded to\r\n      * @param _token Address of the token being sold\r\n      * @param _start Start date of the crowdsale\r\n      * @param _deadline Deadline of the crowdsale\r\n      */\r\n    function NbtCrowdsale(uint256 _rate, address _wallet, NbtToken _token, uint256 _start, uint256 _deadline) Crowdsale(_rate, _wallet, ERC20(_token)) public {\r\n        require(_rate > 0);\r\n        require(_wallet != address(0));\r\n        require(_token != address(0));\r\n        require(_start < _deadline);\r\n\r\n        start = _start;\r\n        deadline = _deadline;\r\n\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n        token = _token;\r\n    }\r\n\r\n    /*** PUBLIC AND EXTERNAL FUNCTIONS ***/\r\n\r\n    /**\r\n     * @dev set new start date for crowdsale.\r\n     * @param _start The new start timestamp\r\n     */\r\n    function setStart(uint256 _start) onlyAdmin whenPaused public returns (bool) {\r\n        require(_start < deadline);\r\n        start = _start;\r\n        emit NewStart(start);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev set new start date for crowdsale.\r\n     * @param _deadline The new deadline timestamp\r\n     */\r\n    function setDeadline(uint256 _deadline) onlyAdmin whenPaused public returns (bool) {\r\n        require(start < _deadline);\r\n        deadline = _deadline;\r\n        emit NewDeadline(_deadline);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev set new wallet address\r\n     * @param _addr The new wallet address\r\n     */\r\n    function setWallet(address _addr) onlyAdmin public returns (bool) {\r\n        require(_addr != address(0) && _addr != address(this));\r\n        wallet = _addr;\r\n        emit NewWallet(wallet);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev set new rate for crowdsale.\r\n     * @param _rate Number of token units a buyer gets per wei\r\n     */\r\n    function setRate(uint256 _rate) onlyAdmin public returns (bool) {\r\n        require(_rate > 0);\r\n        rate = _rate;\r\n        emit NewRate(rate);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      * @dev called by the admin to pause, triggers stopped state\r\n      */\r\n    function pause() onlyAdmin whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the admin to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyAdmin whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    function getCurrentBonus() public view returns (uint256) {\r\n        if (token.MAX_SALE_VOLUME().sub(token.saleableTokens()) < BONUS1_LIMIT) {\r\n            return BONUS1;\r\n        } else if (token.MAX_SALE_VOLUME().sub(token.saleableTokens()) < BONUS2_LIMIT) {\r\n            return BONUS2;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getTokenAmount(uint256 _weiAmount) public view returns (uint256) {\r\n        return _getTokenAmount(_weiAmount);\r\n    }\r\n\r\n    /**\r\n     * Close the crowdsale\r\n     */\r\n    function closeCrowdsale() onlyAdmin afterDeadline public {\r\n        crowdsaleClosed = true;\r\n    }\r\n\r\n    /*** INTERNAL FUNCTIONS ***/\r\n\r\n    /**\r\n       * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n       * @param _beneficiary Address performing the token purchase\r\n       * @param _weiAmount Value in wei involved in the purchase\r\n       */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) whenNotPaused afterStart beforeDeadline internal {\r\n        require(!crowdsaleClosed);\r\n        require(_weiAmount >= 1000000000000);\r\n        require(_getTokenAmount(_weiAmount) <= token.balanceOf(this));\r\n        require(_getTokenAmount(_weiAmount) >= MIN_TOKENS);\r\n        super._preValidatePurchase(_beneficiary, _weiAmount);\r\n    }\r\n\r\n    /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n    function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n        // optional override\r\n    }\r\n\r\n    /**\r\n      * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n      * @param _beneficiary Address performing the token purchase\r\n      * @param _tokenAmount Number of tokens to be emitted\r\n      */\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        token.moveTokensFromSaleToCirculating(_beneficiary, _tokenAmount);\r\n        token.transfer(_beneficiary, _tokenAmount);\r\n        emit Sale(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n        // optional override\r\n    }\r\n\r\n    /**\r\n     * @dev Override to extend the way in which ether is converted to tokens.\r\n     * @param _weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _weiAmount\r\n     */\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        uint256 _current_bonus =  getCurrentBonus();\r\n        if (_current_bonus == 0) {\r\n            return _weiAmount.mul(rate).div(1000000000000); // token amount for 1 szabo\r\n        } else {\r\n            return _weiAmount.mul(rate).mul(_current_bonus.add(100)).div(100).div(1000000000000); // token amount for 1 szabo\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Determines how ETH is stored/forwarded on purchases.\r\n     */\r\n    function _forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS2_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"setDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"adminRemoveRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS1_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"adminAddRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_deadline\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"NewStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"NewDeadline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"NewRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"new_address\",\"type\":\"address\"}],\"name\":\"NewWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens_with_bonuses\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"NbtCrowdsale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000071b9480000000000000000000000001c6e40c10e490f9807d650c184cdb1597f90f3960000000000000000000000002590e9238811b929135a406f3de5d0351cdd1bac000000000000000000000000000000000000000000000000000000005af159000000000000000000000000000000000000000000000000000000000068132a00","Library":"","SwarmSource":"bzzr://83676c66a3f3025b798a1fd46db13e32b5ba1f33e3b9fd9e65b884ae5552b486"}]}