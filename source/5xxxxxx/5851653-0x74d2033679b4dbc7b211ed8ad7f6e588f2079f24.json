{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/*\r\n    Utilities & Common Modifiers\r\n*/\r\ncontract Utils {\r\n    /**\r\n        constructor\r\n    */\r\n    function Utils() public {\r\n    }\r\n\r\n    // verifies that an amount is greater than zero\r\n    modifier greaterThanZero(uint256 _amount) {\r\n        require(_amount > 0);\r\n        _;\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        require(_address != 0x0);\r\n        _;\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThis(address _address) {\r\n        require(_address != address(this));\r\n        _;\r\n    }\r\n\r\n    // Overflow protected math functions\r\n\r\n    /**\r\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\r\n\r\n        @param _x   value 1\r\n        @param _y   value 2\r\n\r\n        @return sum\r\n    */\r\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x + _y;\r\n        assert(z >= _x);\r\n        return z;\r\n    }\r\n\r\n    /**\r\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\r\n\r\n        @param _x   minuend\r\n        @param _y   subtrahend\r\n\r\n        @return difference\r\n    */\r\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        assert(_x >= _y);\r\n        return _x - _y;\r\n    }\r\n\r\n    /**\r\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\r\n\r\n        @param _x   factor 1\r\n        @param _y   factor 2\r\n\r\n        @return product\r\n    */\r\n    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x * _y;\r\n        assert(_x == 0 || z / _x == _y);\r\n        return z;\r\n    }\r\n}\r\n\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public pure returns (address) {}\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\n\r\n/*\r\n    owned 是一个管理者\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address _prevOwner, address _newOwner);\r\n\r\n    /**\r\n     * 初始化构造函数\r\n     */\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * 判断当前合约调用者是否是管理员\r\n     */\r\n    modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * 指派一个新的管理员\r\n     * @param  _newOwner address 新的管理员帐户地址\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\ncontract IToken {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public pure returns (string) {}\r\n    function symbol() public pure returns (string) {}\r\n    function decimals() public pure returns (uint8) {}\r\n    function totalSupply() public pure returns (uint256) {}\r\n    function balanceOf(address _owner) public pure returns (uint256) { _owner; }\r\n    function allowance(address _owner, address _spender) public pure returns (uint256) { _owner; _spender; }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal;\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n}\r\n\r\n\r\ncontract Token is IToken, Owned, Utils {\r\n    /* 公共变量 */\r\n    string public standard = '';\r\n    string public name = ''; //代币名称\r\n    string public symbol = ''; //代币符号比如'$'\r\n    uint8 public decimals = 0;  //代币单位\r\n    uint256 public totalSupply = 0; //代币总量\r\n\r\n    /*记录所有余额的映射*/\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* 在区块链上创建一个事件，用以通知客户端*/\r\n    event Transfer(address indexed from, address indexed to, uint256 value);  //转帐通知事件\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value); //设置允许用户支付最大金额通知\r\n\r\n    function Token() public \r\n    {\r\n        name = 'YaoDun Chain';\r\n        symbol = 'YAODUN';\r\n        decimals = 8;\r\n        totalSupply = 2000000000 * 10 ** uint256(decimals);\r\n\r\n        balanceOf[owner] = totalSupply;\r\n    }\r\n\r\n\r\n    /**\r\n     * 私有方法从一个帐户发送给另一个帐户代币\r\n     * @param  _from address 发送代币的地址\r\n     * @param  _to address 接受代币的地址\r\n     * @param  _value uint256 接受代币的数量\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value)\r\n      internal\r\n      validAddress(_from)\r\n      validAddress(_to)\r\n    {\r\n\r\n\r\n      //检查发送者是否拥有足够余额\r\n      require(balanceOf[_from] >= _value);\r\n\r\n      //检查是否溢出\r\n      require(balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\n      //保存数据用于后面的判断\r\n      uint previousBalances = safeAdd(balanceOf[_from], balanceOf[_to]);\r\n\r\n      //从发送者减掉发送额\r\n      balanceOf[_from] = safeSub(balanceOf[_from], _value);\r\n\r\n      //给接收者加上相同的量\r\n      balanceOf[_to] += safeAdd(balanceOf[_to], _value);\r\n\r\n      //通知任何监听该交易的客户端\r\n      emit Transfer(_from, _to, _value);\r\n\r\n      //判断买、卖双方的数据是否和转换前一致\r\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\r\n    }\r\n\r\n    /**\r\n     * 从主帐户合约调用者发送给别人代币\r\n     * @param  _to address 接受代币的地址\r\n     * @param  _value uint256 接受代币的数量\r\n     */\r\n    function transfer(address _to, uint256 _value)\r\n      public\r\n      validAddress(_to)\r\n      returns (bool)\r\n    {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 从某个指定的帐户中，向另一个帐户发送代币\r\n     *\r\n     * 调用过程，会检查设置的允许最大交易额\r\n     *\r\n     * @param  _from address 发送者地址\r\n     * @param  _to address 接受者地址\r\n     * @param  _value uint256 要转移的代币数量\r\n     * @return        是否交易成功\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        validAddress(_from)\r\n        validAddress(_to)\r\n        returns (bool)\r\n    {\r\n        //检查发送者是否拥有足够余额支出的设置\r\n        require(_value <= allowance[_from][msg.sender]);   // Check allowance\r\n\r\n        allowance[_from][msg.sender] -= safeSub(allowance[_from][msg.sender], _value);\r\n\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 设置帐户允许支付的最大金额\r\n     *\r\n     * 一般在智能合约的时候，避免支付过多，造成风险\r\n     *\r\n     * @param _spender 帐户地址\r\n     * @param _value 金额\r\n     */\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        validAddress(_spender)\r\n        returns (bool success)\r\n    {\r\n\r\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\r\n\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract IYaoDun {\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal;\r\n    function mintToken(address target, uint256 mintedAmount) public;\r\n    function freezeAccount(address target, bool freeze) public;\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public;\r\n    function buy() payable public;\r\n    function sell(uint256 amount) public;\r\n}\r\n\r\n\r\ncontract SmartToken is Owned, Token {\r\n\r\n    string public version = '0.1';\r\n\r\n    // triggered when a smart token is deployed - the _token address is defined for forward compatibility, in case we want to trigger the event from a factory\r\n    event NewSmartToken(address _token);\r\n\r\n    /* 初始化合约，并且把初始的所有代币都给这合约的创建者\r\n     * @param tokenName 代币名称\r\n     * @param tokenSymbol 代币符号\r\n     * @param tokenTotal 代币总量\r\n     * @param decimalsUnits 代币后面的单位，小数点后面多少个0，以太币一样后面是是18个0\r\n     */\r\n    function SmartToken()\r\n        public\r\n        Token ()\r\n    {\r\n        emit NewSmartToken(address(this));\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract YaoDun is IYaoDun, Token {\r\n\r\n    //卖出的汇率,一个代币，可以卖出多少个以太币，单位是wei\r\n    uint256 public sellPrice;\r\n\r\n    //买入的汇率,1个以太币，可以买几个代币\r\n    uint256 public buyPrice;\r\n\r\n    //是否冻结帐户的列表\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    //定义一个事件，当有资产被冻结的时候，通知正在监听事件的客户端\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    // triggered when a smart token is deployed - the _token address is defined for forward compatibility, in case we want to trigger the event from a factory\r\n    event NewSmartToken(address _token);\r\n\r\n\r\n    function YaoDun()\r\n      public\r\n      Token ()\r\n    {\r\n        sellPrice = 2;     //设置1个单位的代币(单位是wei)，能够卖出2个以太币\r\n        buyPrice = 4;      //设置1个以太币，可以买0.25个代币\r\n        emit NewSmartToken(address(this));\r\n    }\r\n\r\n\r\n    function _transfer(address _from, address _to, uint _value)\r\n        validAddress(_from)\r\n        validAddress(_to)\r\n        internal\r\n    {\r\n        //检查发送者是否拥有足够余额\r\n        require (balanceOf[_from] > _value);\r\n\r\n        //检查是否溢出\r\n        require (balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\n        //检查 冻结帐户\r\n        require(!frozenAccount[_from]);\r\n        require(!frozenAccount[_to]);\r\n\r\n\r\n\r\n        //从发送者减掉发送额\r\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\r\n\r\n        //给接收者加上相同的量\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n\r\n        //通知任何监听该交易的客户端\r\n        emit Transfer(_from, _to, _value);\r\n\r\n    }\r\n\r\n    /**\r\n     * 账户挖矿\r\n     * @param  target address 帐户地址\r\n     * @param  mintedAmount uint256 增加的金额(单位是wei)\r\n     */\r\n    function mintToken(address target, uint256 mintedAmount)\r\n        validAddress(target)\r\n        public\r\n        onlyOwner\r\n    {\r\n\r\n        //给指定地址增加代币，同时总量也相加\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n\r\n\r\n        emit Transfer(0, this, mintedAmount);\r\n        emit Transfer(this, target, mintedAmount);\r\n    }\r\n\r\n    /**\r\n     * 增加冻结帐户名称\r\n     *\r\n     * 你可能需要监管功能以便你能控制谁可以/谁不可以使用你创建的代币合约\r\n     *\r\n     * @param  target address 帐户地址\r\n     * @param  freeze bool    是否冻结\r\n     */\r\n    function freezeAccount(address target, bool freeze)\r\n        validAddress(target)\r\n        public\r\n        onlyOwner\r\n    {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    /**\r\n     * 设置买卖价格\r\n     *\r\n     * 如果你想让ether(或其他代币)为你的代币进行背书,以便可以市场价自动化买卖代币,我们可以这么做。如果要使用浮动的价格，也可以在这里设置\r\n     *\r\n     * @param newSellPrice 新的卖出价格\r\n     * @param newBuyPrice 新的买入价格\r\n     */\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyOwner {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n    /**\r\n     * 使用以太币购买代币\r\n     */\r\n    function buy() payable public {\r\n      uint amount = msg.value / buyPrice;\r\n\r\n      _transfer(this, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev 卖出代币\r\n     * @return 要卖出的数量(单位是wei)\r\n     */\r\n    function sell(uint256 amount) public {\r\n\r\n        //检查合约的余额是否充足\r\n        require(balanceOf[address(this)] >= amount * sellPrice);\r\n\r\n        _transfer(msg.sender, this, amount);\r\n\r\n        msg.sender.transfer(amount * sellPrice);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"NewSmartToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"YaoDun","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://adbc8af937edf76e2c1d2f268dd3d8e0689cfe95220429332192de4be7e7a2a2"}]}