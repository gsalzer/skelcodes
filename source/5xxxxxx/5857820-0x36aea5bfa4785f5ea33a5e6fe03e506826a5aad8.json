{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function transfer (address _beneficiary, uint256 _tokenAmount) external returns (bool);\r\n    function mintFromICO(address _to, uint256 _amount) external  returns(bool);\r\n}\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract MainSale is Ownable {\r\n    \r\n    ERC20 public token;\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    address public backEndOperator = msg.sender;\r\n    \r\n    address team = 0x7DDA135cDAa44Ad3D7D79AAbE562c4cEA9DEB41d; // 25% all\r\n    \r\n    address reserve = 0x34bef601666D7b2E719Ff919A04266dD07706a79; // 15% all\r\n    \r\n    mapping(address=>bool) public whitelist;\r\n    \r\n    mapping(address => uint256) public investedEther;\r\n    \r\n    uint256 public startSale = 1537228801; // Tuesday, 18-Sep-18 00:00:01 UTC\r\n    \r\n    uint256 public endSale = 1545177599; // Tuesday, 18-Dec-18 23:59:59 UTC\r\n    \r\n    uint256 public investors;\r\n    \r\n    uint256 public weisRaised;\r\n    \r\n    uint256 public dollarRaised; // collected USD\r\n    \r\n    uint256 public softCap = 2000000000*1e18; // 20,000,000 USD\r\n    \r\n    uint256 public hardCap = 7000000000*1e18; // 70,000,000 USD\r\n    \r\n    uint256 public buyPrice; //0.01 USD\r\n    \r\n    uint256 public dollarPrice;\r\n    \r\n    uint256 public soldTokens;\r\n    \r\n    uint256 step1Sum = 3000000*1e18; // 3 mln $\r\n    \r\n    uint256 step2Sum = 10000000*1e18; // 10 mln $\r\n    \r\n    uint256 step3Sum = 20000000*1e18; // 20 mln $\r\n    \r\n    uint256 step4Sum = 30000000*1e18; // 30 mln $\r\n    \r\n    \r\n    event Authorized(address wlCandidate, uint timestamp);\r\n    \r\n    event Revoked(address wlCandidate, uint timestamp);\r\n    \r\n    event Refund(uint rate, address investor);\r\n    \r\n    \r\n    modifier isUnderHardCap() {\r\n        require(weisRaised <= hardCap);\r\n        _;\r\n    }\r\n    \r\n    modifier backEnd() {\r\n        require(msg.sender == backEndOperator || msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    \r\n    constructor(uint256 _dollareth) public {\r\n        dollarPrice = _dollareth;\r\n        buyPrice = 1e16/dollarPrice; // 16 decimals because 1 cent\r\n        hardCap = 7500000000*buyPrice;\r\n    }\r\n    \r\n    \r\n    function setToken (ERC20 _token) public onlyOwner {\r\n        token = _token;\r\n    }\r\n    \r\n    function setDollarRate(uint256 _usdether) public onlyOwner {\r\n        dollarPrice = _usdether;\r\n        buyPrice = 1e16/dollarPrice; // 16 decimals because 1 cent\r\n        hardCap = 7500000000*buyPrice;\r\n    }\r\n    \r\n    \r\n    function setPrice(uint256 newBuyPrice) public onlyOwner {\r\n        buyPrice = newBuyPrice;\r\n    }\r\n    \r\n    function setStartSale(uint256 newStartSale) public onlyOwner {\r\n        startSale = newStartSale;\r\n    }\r\n    \r\n    function setEndSale(uint256 newEndSaled) public onlyOwner {\r\n        endSale = newEndSaled;\r\n    }\r\n    \r\n    function setBackEndAddress(address newBackEndOperator) public onlyOwner {\r\n        backEndOperator = newBackEndOperator;\r\n    }\r\n    \r\n    /*******************************************************************************\r\n     * Whitelist's section */\r\n    \r\n    function authorize(address wlCandidate) public backEnd {\r\n        require(wlCandidate != address(0x0));\r\n        require(!isWhitelisted(wlCandidate));\r\n        whitelist[wlCandidate] = true;\r\n        investors++;\r\n        emit Authorized(wlCandidate, now);\r\n    }\r\n    \r\n    function revoke(address wlCandidate) public  onlyOwner {\r\n        whitelist[wlCandidate] = false;\r\n        investors--;\r\n        emit Revoked(wlCandidate, now);\r\n    }\r\n    \r\n    function isWhitelisted(address wlCandidate) public view returns(bool) {\r\n        return whitelist[wlCandidate];\r\n    }\r\n    \r\n    /*******************************************************************************\r\n     * Payable's section */\r\n    \r\n    function isMainSale() public constant returns(bool) {\r\n        return now >= startSale && now <= endSale;\r\n    }\r\n    \r\n    function () public payable isUnderHardCap {\r\n        require(isMainSale());\r\n        require(isWhitelisted(msg.sender));\r\n        require(msg.value >= 10000000000000000);\r\n        mainSale(msg.sender, msg.value);\r\n        investedEther[msg.sender] = investedEther[msg.sender].add(msg.value);\r\n    }\r\n    \r\n    function mainSale(address _investor, uint256 _value) internal {\r\n        uint256 tokens = _value.mul(1e18).div(buyPrice);\r\n        uint256 tokensSum = tokens.mul(discountSum(msg.value)).div(100);\r\n        uint256 tokensCollect = tokens.mul(discountCollect()).div(100);\r\n        tokens = tokens.add(tokensSum).add(tokensCollect);\r\n        token.mintFromICO(_investor, tokens);\r\n        uint256 tokensFounders = tokens.mul(5).div(12);\r\n        token.mintFromICO(team, tokensFounders);\r\n        uint256 tokensDevelopers = tokens.div(4);\r\n        token.mintFromICO(reserve, tokensDevelopers);\r\n        weisRaised = weisRaised.add(msg.value);\r\n        uint256 valueInUSD = msg.value.mul(dollarPrice);\r\n        dollarRaised = dollarRaised.add(valueInUSD);\r\n        soldTokens = soldTokens.add(tokens);\r\n    }\r\n    \r\n    \r\n    function discountSum(uint256 _tokens) pure private returns(uint256) {\r\n        if(_tokens >= 10000000*1e18) { // > 100k$ = 10,000,000 TAL\r\n            return 7;\r\n        }\r\n        if(_tokens >= 5000000*1e18) { // 50-100k$ = 5,000,000 TAL\r\n            return 5;\r\n        }\r\n        if(_tokens >= 1000000*1e18) { // 10-50k$ = 1,000,000 TAL\r\n            return 3;\r\n        } else\r\n            return 0;\r\n    }\r\n    \r\n    \r\n    function discountCollect() view private returns(uint256) {\r\n        // 20% bonus, if collected sum < 3 mln $\r\n        if(dollarRaised <= step1Sum) {\r\n            return 20;\r\n        } // 15% bonus, if collected sum < 10 mln $\r\n        if(dollarRaised <= step2Sum) {\r\n            return 15;\r\n        } // 10% bonus, if collected sum < 20 mln $\r\n        if(dollarRaised <= step3Sum) {\r\n            return 10;\r\n        } // 5% bonus, if collected sum < 30 mln $\r\n        if(dollarRaised <= step4Sum) {\r\n            return 5;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    \r\n    function mintManual(address _investor, uint256 _value) public onlyOwner {\r\n        token.mintFromICO(_investor, _value);\r\n        uint256 tokensFounders = _value.mul(5).div(12);\r\n        token.mintFromICO(team, tokensFounders);\r\n        uint256 tokensDevelopers = _value.div(4);\r\n        token.mintFromICO(reserve, tokensDevelopers);\r\n    }\r\n    \r\n    \r\n    function transferEthFromContract(address _to, uint256 amount) public onlyOwner {\r\n        require(amount != 0);\r\n        require(_to != 0x0);\r\n        _to.transfer(amount);\r\n    }\r\n    \r\n    \r\n    function refundSale() public {\r\n        require(soldTokens < softCap && now > endSale);\r\n        uint256 rate = investedEther[msg.sender];\r\n        require(investedEther[msg.sender] >= 0);\r\n        investedEther[msg.sender] = 0;\r\n        msg.sender.transfer(rate);\r\n        weisRaised = weisRaised.sub(rate);\r\n        emit Refund(rate, msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"backEndOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferEthFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wlCandidate\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dollarPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dollarRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wlCandidate\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintManual\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wlCandidate\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBackEndOperator\",\"type\":\"address\"}],\"name\":\"setBackEndAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStartSale\",\"type\":\"uint256\"}],\"name\":\"setStartSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMainSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usdether\",\"type\":\"uint256\"}],\"name\":\"setDollarRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weisRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEndSaled\",\"type\":\"uint256\"}],\"name\":\"setEndSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dollareth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wlCandidate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wlCandidate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"Refund\",\"type\":\"event\"}]","ContractName":"MainSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000001bd","Library":"","SwarmSource":"bzzr://ad364482cf8a0b76ef7ea23dfccaaba9a6fe42d0fc749b432e52cdcee8d96313"}]}