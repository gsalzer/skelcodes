{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n}\r\n\r\n\r\ncontract BasicToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    modifier nonZeroEth(uint _value) {\r\n      require(_value > 0);\r\n      _;\r\n    }\r\n\r\n    modifier onlyPayloadSize() {\r\n      require(msg.data.length >= 68);\r\n      _;\r\n    }\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Allocate(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n    /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n\r\n    function transfer(address _to, uint256 _value) nonZeroEth(_value) onlyPayloadSize returns (bool) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]){\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) nonZeroEth(_value) onlyPayloadSize returns (bool) {\r\n      if(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]){\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      }else{\r\n        return false;\r\n      }\r\n}\r\n\r\n\r\n    /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract BoonTech is BasicToken, Ownable{\r\n\r\nusing SafeMath for uint256;\r\n\r\n//token attributes\r\n\r\nstring public name = \"Boon Tech\";                 //name of the token\r\n\r\nstring public symbol = \"BOON\";                      // symbol of the token\r\n\r\nuint8 public decimals = 18;                        // decimals\r\n\r\nuint256 public totalSupply = 500000000 * 10**uint256(decimals);  // total supply of BOON Tokens\r\n\r\nuint256 private constant decimalFactor = 10**uint256(decimals);\r\n\r\nbool public transfersAreLocked = true;\r\n\r\nmapping (address => Allocation) public allocations;\r\n\r\n// Allocation with vesting information\r\n// 25% Released at Token Distribution +0.5 year -> 100% at Token Distribution +2 years\r\nstruct Allocation {\r\n  uint256 startTime;\r\n  uint256 endCliff;       // Tokens are locked until\r\n  uint256 endVesting;     // This is when the tokens are fully unvested\r\n  uint256 totalAllocated; // Total tokens allocated\r\n  uint256 amountClaimed;  // Total tokens claimed\r\n}\r\n\r\nuint256 public grandTotalClaimed = 0;\r\nuint256 tokensForDistribution = totalSupply.div(2);\r\nuint256 ethPrice = 960;\r\nuint256 tokenPrice = 4;\r\n\r\n//events\r\nevent LogNewAllocation(address indexed _recipient, uint256 _totalAllocated);\r\nevent LogBoonReleased(address indexed _recipient, uint256 _amountClaimed, uint256 _totalAllocated, uint256 _grandTotalClaimed);\r\n\r\n///////////////////////////////////////// CONSTRUCTOR for Distribution //////////////////////////////////////////////////\r\n\r\n  function BoonTech () {\r\n    balances[msg.sender] = totalSupply;\r\n  }\r\n\r\n///////////////////////////////////////// MODIFIERS /////////////////////////////////////////////////\r\n\r\n// Checks whether it can transfer or otherwise throws.\r\n  modifier canTransfer() {\r\n    require(transfersAreLocked == false);\r\n    _;\r\n  }\r\n\r\n  modifier nonZeroAddress(address _to) {\r\n    require(_to != 0x0);\r\n    _;\r\n  }\r\n\r\n////////////////////////////////////////// FUNCTIONS //////////////////////////////////////////////\r\n\r\n// Returns current token Owner\r\n\r\n  function tokenOwner() public view returns (address) {\r\n    return owner;\r\n  }\r\n\r\n// Checks modifier and allows transfer if tokens are not locked.\r\n  function transfer(address _to, uint _value) canTransfer() public returns (bool success) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  // Checks modifier and allows transfer if tokens are not locked.\r\n  function transferFrom(address _from, address _to, uint _value) canTransfer() public returns (bool success) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  // lock/unlock transfers\r\n  function transferLock() onlyOwner public{\r\n        transfersAreLocked = true;\r\n  }\r\n  function transferUnlock() onlyOwner public{\r\n        transfersAreLocked = false;\r\n  }\r\n\r\n  function setFounderAllocation(address _recipient, uint256 _totalAllocated) onlyOwner public {\r\n    require(allocations[_recipient].totalAllocated == 0 && _totalAllocated > 0);\r\n    require(_recipient != address(0));\r\n\r\n    allocations[_recipient] = Allocation(now, now + 0.5 years, now + 2 years, _totalAllocated, 0);\r\n    //allocations[_recipient] = Allocation(now, now + 2 minutes, now + 4 minutes, _totalAllocated, 0);\r\n\r\n    LogNewAllocation(_recipient, _totalAllocated);\r\n  }\r\n\r\n \r\n  function releaseVestedTokens(address _tokenAddress) onlyOwner public{\r\n    require(allocations[_tokenAddress].amountClaimed < allocations[_tokenAddress].totalAllocated);\r\n    require(now >= allocations[_tokenAddress].endCliff);\r\n    require(now >= allocations[_tokenAddress].startTime);\r\n    uint256 newAmountClaimed;\r\n    if (allocations[_tokenAddress].endVesting > now) {\r\n      // Transfer available amount based on vesting schedule and allocation\r\n      newAmountClaimed = allocations[_tokenAddress].totalAllocated.mul(now.sub(allocations[_tokenAddress].startTime)).div(allocations[_tokenAddress].endVesting.sub(allocations[_tokenAddress].startTime));\r\n    } else {\r\n      // Transfer total allocated (minus previously claimed tokens)\r\n      newAmountClaimed = allocations[_tokenAddress].totalAllocated;\r\n    }\r\n    uint256 tokensToTransfer = newAmountClaimed.sub(allocations[_tokenAddress].amountClaimed);\r\n    allocations[_tokenAddress].amountClaimed = newAmountClaimed;\r\n    if(transfersAreLocked == true){\r\n      transfersAreLocked = false;\r\n      require(transfer(_tokenAddress, tokensToTransfer * decimalFactor));\r\n      transfersAreLocked = true;\r\n    }else{\r\n      require(transfer(_tokenAddress, tokensToTransfer * decimalFactor));\r\n    }\r\n    grandTotalClaimed = grandTotalClaimed.add(tokensToTransfer);\r\n    LogBoonReleased(_tokenAddress, tokensToTransfer, newAmountClaimed, grandTotalClaimed);\r\n  }\r\n\r\n  function distributeToken(address[] _addresses, uint256[] _value) onlyOwner public {\r\n     for (uint i = 0; i < _addresses.length; i++) {\r\n         transfersAreLocked = false;\r\n         require(transfer(_addresses[i], _value[i] * decimalFactor));\r\n         transfersAreLocked = true;\r\n     }\r\n      \r\n  }\r\n\r\n      // Buy token function call only in duration of crowdfund active\r\n    function getNoOfTokensTransfer(uint32 _exchangeRate , uint256 _amount) internal returns (uint256) {\r\n         uint256 noOfToken = _amount.mul(_exchangeRate);\r\n         uint256 noOfTokenWithBonus =(100 * noOfToken ) / 100;\r\n         return noOfTokenWithBonus;\r\n    }\r\n\r\n    function setEthPrice(uint256 value)\r\n    external\r\n    onlyOwner\r\n    {\r\n        ethPrice = value;\r\n\r\n    }\r\n    function calcToken(uint256 value)\r\n        internal\r\n        returns(uint256 amount){\r\n             amount =  ethPrice.mul(100).mul(value).div(tokenPrice);\r\n             return amount;\r\n        }\r\n     function buyTokens()\r\n            external\r\n            payable\r\n            returns (uint256 amount)\r\n            {\r\n                amount = calcToken(msg.value);\r\n                require(msg.value > 0);\r\n                require(balanceOf(owner) >= amount);\r\n                balances[owner] = balances[owner].sub(msg.value);\r\n                balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n                return amount;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setEthPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_totalAllocated\",\"type\":\"uint256\"}],\"name\":\"setFounderAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endCliff\",\"type\":\"uint256\"},{\"name\":\"endVesting\",\"type\":\"uint256\"},{\"name\":\"totalAllocated\",\"type\":\"uint256\"},{\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersAreLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"distributeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grandTotalClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"releaseVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferUnlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalAllocated\",\"type\":\"uint256\"}],\"name\":\"LogNewAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalAllocated\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_grandTotalClaimed\",\"type\":\"uint256\"}],\"name\":\"LogBoonReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Allocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BoonTech","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://310fdf85e9ef9ed4515ca32463fb7025088abd5dea808d82307699e348bbda84"}]}