{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.20;\r\n/**\r\n* @title ICO CONTRACT\r\n* @dev ERC-20 Token Standard Compliant\r\n* @author Fares A. Akel C. f.antonio.akel@gmail.com\r\n*/\r\n\r\n/**\r\n* @title SafeMath by OpenZeppelin\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\ncontract token {\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    }\r\n\r\n/**\r\n* @title DateTime contract\r\n* @dev This contract will return the unix value of any date\r\n*/\r\ncontract DateTimeAPI {\r\n        \r\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) constant returns (uint timestamp);\r\n\r\n}\r\n\r\n\r\ncontract ICO {\r\n    using SafeMath for uint256;\r\n    //This ico have 5 states\r\n    enum State {\r\n        stage1,\r\n        stage2,\r\n        stage3,\r\n        stage4,\r\n        Successful\r\n    }\r\n\r\n    DateTimeAPI dateTimeContract = DateTimeAPI(0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce);//Main\r\n    //DateTimeAPI dateTimeContract = DateTimeAPI(0x1F0a2ba4B115bd3e4007533C52BBd30C17E8B222);//Ropsten\r\n\r\n    //public variables\r\n    State public state = State.stage1; //Set initial stage\r\n    uint256 public startTime;\r\n    uint256 public rate;\r\n    uint256 public totalRaised; //eth in wei\r\n    uint256 public totalDistributed; //tokens\r\n    uint256 public ICOdeadline;\r\n    uint256 public completedAt;\r\n    token public tokenReward;\r\n    address public creator;\r\n    address public beneficiary;\r\n    string public version = '1';\r\n\r\n    mapping(address => bool) public airdropClaimed;\r\n    mapping(address => uint) public icoTokensReceived;\r\n\r\n    uint public constant TOKEN_SUPPLY_ICO   = 130000000 * 10 ** 18; // 130 Million tokens\r\n\r\n    //events for log\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(address _creator, uint256 _ICOdeadline);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n    /**\r\n    * @notice ICO constructor\r\n    * @param _addressOfTokenUsedAsReward is the token totalDistributed\r\n    */\r\n    function ICO (token _addressOfTokenUsedAsReward) public {\r\n        \r\n        startTime = dateTimeContract.toTimestamp(2018,3,2,12); //From March 2 12:00 UTC\r\n        ICOdeadline = dateTimeContract.toTimestamp(2018,3,30,12); //Till March 30 12:00 UTC;\r\n        rate = 80000; //Tokens per ether unit\r\n\r\n        creator = msg.sender;\r\n        beneficiary = 0x3a1CE9289EC2826A69A115A6AAfC2fbaCc6F8063;\r\n        tokenReward = _addressOfTokenUsedAsReward;\r\n\r\n        LogFunderInitialized(\r\n            creator,\r\n            ICOdeadline);\r\n    }\r\n\r\n    /**\r\n    * @notice contribution handler\r\n    */\r\n    function contribute() public notFinished payable {\r\n        require(now >= startTime);\r\n        require(msg.value > 50 finney);\r\n\r\n        uint256 tokenBought = 0;\r\n\r\n        totalRaised = totalRaised.add(msg.value);\r\n        tokenBought = msg.value.mul(rate);\r\n\r\n        //Rate of exchange depends on stage\r\n        if (state == State.stage1){\r\n\r\n            tokenBought = tokenBought.mul(15);\r\n            tokenBought = tokenBought.div(10);//+50%\r\n        \r\n        } else if (state == State.stage2){\r\n        \r\n            tokenBought = tokenBought.mul(125);\r\n            tokenBought = tokenBought.div(100);//+25%\r\n        \r\n        } else if (state == State.stage3){\r\n        \r\n            tokenBought = tokenBought.mul(115);\r\n            tokenBought = tokenBought.div(100);//+15%\r\n        \r\n        }\r\n\r\n        icoTokensReceived[msg.sender] = icoTokensReceived[msg.sender].add(tokenBought);\r\n        totalDistributed = totalDistributed.add(tokenBought);\r\n        \r\n        tokenReward.transfer(msg.sender, tokenBought);\r\n\r\n        LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        LogContributorsPayout(msg.sender, tokenBought);\r\n        \r\n        checkIfFundingCompleteOrExpired();\r\n    }\r\n\r\n    function claimAirdrop() external {\r\n\r\n        doAirdrop(msg.sender);\r\n\r\n    }\r\n\r\n    function doAirdrop(address _participant) internal {\r\n        uint airdrop = computeAirdrop(_participant);\r\n\r\n        require( airdrop > 0 );\r\n\r\n        // update balances and token issue volume\r\n        airdropClaimed[_participant] = true;\r\n        tokenReward.transfer(_participant,airdrop);\r\n\r\n        // log\r\n        LogContributorsPayout(_participant, airdrop);\r\n    }\r\n\r\n    /* Function to estimate airdrop amount. For some accounts, the value of */\r\n    /* tokens received by calling claimAirdrop() may be less than gas costs */\r\n\r\n    /* If an account has tokens from the ico, the amount after the airdrop */\r\n    /* will be newBalance = tokens * TOKEN_SUPPLY_ICO / totalDistributed */\r\n      \r\n    function computeAirdrop(address _participant) public constant returns (uint airdrop) {\r\n        require(state == State.Successful);\r\n\r\n        // return  0 is the airdrop was already claimed\r\n        if( airdropClaimed[_participant] ) return 0;\r\n\r\n        // return 0 if the account does not hold any crowdsale tokens\r\n        if( icoTokensReceived[_participant] == 0 ) return 0;\r\n\r\n        // airdrop amount\r\n        uint tokens = icoTokensReceived[_participant];\r\n        uint newBalance = tokens.mul(TOKEN_SUPPLY_ICO) / totalDistributed;\r\n        airdrop = newBalance - tokens;\r\n    }\r\n\r\n    /**\r\n    * @notice check status\r\n    */\r\n    function checkIfFundingCompleteOrExpired() public {\r\n\r\n        if(state == State.stage1 && now > dateTimeContract.toTimestamp(2018,3,9,12)) { //Till March 9 12:00 UTC\r\n\r\n            state = State.stage2;\r\n\r\n        } else if(state == State.stage2 && now > dateTimeContract.toTimestamp(2018,3,16,12)) { //Till March 16 12:00 UTC\r\n\r\n            state = State.stage3;\r\n            \r\n        } else if(state == State.stage3 && now > dateTimeContract.toTimestamp(2018,3,23,12)) { //From March 23 12:00 UTC\r\n\r\n            state = State.stage4;\r\n            \r\n        } else if(now > ICOdeadline && state!=State.Successful) { //if we reach ico deadline and its not Successful yet\r\n\r\n        state = State.Successful; //ico becomes Successful\r\n        completedAt = now; //ICO is complete\r\n\r\n        LogFundingSuccessful(totalRaised); //we log the finish\r\n        finished(); //and execute closure\r\n\r\n    }\r\n}\r\n\r\n    /**\r\n    * @notice closure handler\r\n    */\r\n    function finished() public { //When finished eth are transfered to beneficiary\r\n\r\n        require(state == State.Successful);\r\n        require(beneficiary.send(this.balance));\r\n        LogBeneficiaryPaid(beneficiary);\r\n\r\n    }\r\n\r\n    /*\r\n    * @dev direct payments\r\n    */\r\n    function () public payable {\r\n        \r\n        contribute();\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"computeAirdrop\",\"outputs\":[{\"name\":\"airdrop\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOdeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_ICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ICOdeadline\",\"type\":\"uint256\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002313f908beddcb07565cdb48354523981d3a01c2","Library":"","SwarmSource":"bzzr://ece2f4bd86ae366120bdf54d4b2a32b7e2d16fd87a6efbcea35fecb1b2b9193b"}]}