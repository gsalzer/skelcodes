{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract zombieToken {\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function buyCard(address from, uint256 value) public returns (bool success);\r\n}\r\n\r\ncontract zombieMain {\r\n  function createZombie(uint8 star,bytes32 dna,uint16 roletype,bool isFreeZombie,address player) public;\r\n}\r\n\r\ncontract zombieCreator is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  event NewZombie(bytes32 dna, uint8 star,uint16 roletype, bool isfree);\r\n\r\n  mapping (address => bool) isGetFreeZombie;\r\n\r\n  uint createRandomZombie_EtherPrice = 0.01 ether;\r\n  uint createRandomZombie_ZOBToken_smallpack = 100 * 10 ** 18;\r\n  uint createRandomZombie_ZOBToken_goldpack = 400 * 10 ** 18;\r\n  \r\n  zombieMain c = zombieMain(0x58fd762F76D57C6fC2a480F6d26c1D03175AD64F);\r\n  zombieToken t = zombieToken(0x83B8C8A08938B878017fDF0Ec0A689313F75739D);\r\n  \r\n  uint public FreeZombieCount = 999999;\r\n\r\n  function isGetFreeZombiew(address _owner) public view returns (bool _getFreeZombie) {\r\n    return isGetFreeZombie[_owner];\r\n  }\r\n\r\n  function createRandomZombie_ZOB_smallpack() public {\r\n\r\n    require(t.buyCard(msg.sender, createRandomZombie_ZOBToken_smallpack));\r\n    \r\n    for(uint8 i = 0;i<3;i++){\r\n       \r\n       bytes32 dna;\r\n\r\n       if(i == 0){\r\n         dna = keccak256(block.blockhash(block.number-1), block.difficulty, block.coinbase, now, msg.sender, \"CryptoDeads DNA Seed\");\r\n       } else if(i == 1){\r\n         dna = keccak256(msg.sender, now, block.blockhash(block.number-1), \"CryptoDeads DNA Seed\", block.coinbase, block.difficulty);\r\n       } else {\r\n         dna = keccak256(\"CryptoDeads DNA Seed\", now, block.difficulty, block.coinbase, block.blockhash(block.number-1), msg.sender);\r\n       }\r\n\r\n       uint star = uint(dna) % 1000 +1;\r\n       uint roletype = 1;\r\n\r\n       if(star<=700){\r\n            star = 1;\r\n            roletype = uint(keccak256(msg.sender ,block.blockhash(block.number-1), block.coinbase, now, block.difficulty)) % 3 + 1;\r\n       }else if(star <= 980){\r\n            star = 2;\r\n            roletype = 4;\r\n       }else{\r\n            star = 3;\r\n            roletype = uint(keccak256(block.blockhash(block.number-1), msg.sender, block.difficulty, block.coinbase, now)) % 3 + 5; \r\n       }\r\n\r\n       c.createZombie(uint8(star),dna,uint16(roletype),false,msg.sender);\r\n       NewZombie(dna,uint8(star),uint16(roletype),false);\r\n    }\r\n  }\r\n\r\n  function createRandomZombie_ZOB_goldpack() public {\r\n\r\n    require(t.buyCard(msg.sender, createRandomZombie_ZOBToken_goldpack));\r\n    \r\n    for(uint8 i = 0;i<3;i++){\r\n\r\n       bytes32 dna;\r\n       \r\n       if(i == 0){\r\n         dna = keccak256(block.blockhash(block.number-1), block.difficulty, block.coinbase, now, msg.sender, \"CryptoDeads DNA Seed\");\r\n       } else if(i == 1){\r\n         dna = keccak256(msg.sender, now, block.blockhash(block.number-1), \"CryptoDeads DNA Seed\", block.coinbase, block.difficulty);\r\n       } else {\r\n         dna = keccak256(\"CryptoDeads DNA Seed\", now, block.difficulty, block.coinbase, block.blockhash(block.number-1), msg.sender);\r\n       }\r\n\r\n       uint star = uint(dna) % 1000 +1;\r\n       uint roletype = 2;\r\n\r\n       if(star<=700){\r\n            star = 2;\r\n            roletype = 4;\r\n       }else if(star <= 950){\r\n            star = 3;\r\n            roletype = uint(keccak256(msg.sender ,block.blockhash(block.number-1), block.coinbase, now, block.difficulty)) % 3 + 5;\r\n       }else{\r\n            star = 4;\r\n            roletype = uint(keccak256(block.blockhash(block.number-1), msg.sender, block.difficulty, block.coinbase, now)) % 3 + 9;\r\n       }\r\n\r\n       c.createZombie(uint8(star),dna,uint16(roletype),false,msg.sender);\r\n       NewZombie(dna,uint8(star),uint16(roletype),false);\r\n    }\r\n  }\r\n\r\n  function createRandomZombie_FreeZombie() public {\r\n    require(!isGetFreeZombie[msg.sender]);\r\n    require(FreeZombieCount>=1);\r\n\r\n    uint ran = uint(keccak256(block.coinbase,block.difficulty,now, block.blockhash(block.number-1))) % 100 + 1;\r\n\r\n    uint roletype = 1;\r\n    uint8 star = 1;\r\n\r\n    if(ran>=90){\r\n      roletype = 2;\r\n      star = 4;\r\n    } else {\r\n      roletype = uint(keccak256(msg.sender ,block.blockhash(block.number-1), block.coinbase, now, block.difficulty)) % 3 + 1;\r\n    }\r\n    \r\n    bytes32 dna = keccak256(block.blockhash(block.number-1), block.difficulty, block.coinbase, now, msg.sender, \"CryptoDeads DNA Seed\");\r\n    \r\n    c.createZombie(star,dna,uint16(roletype),true,msg.sender);\r\n    isGetFreeZombie[msg.sender] = true;\r\n    FreeZombieCount--;\r\n\r\n    NewZombie(dna,uint8(star),uint16(roletype),true);\r\n  }\r\n  \r\n  function createRandomZombie_Ether() public payable{\r\n    require(msg.value == createRandomZombie_EtherPrice);\r\n    \r\n    for(uint8 i = 0;i<3;i++){\r\n       bytes32 dna;\r\n       \r\n       if(i == 0){\r\n         dna = keccak256(block.blockhash(block.number-1), block.difficulty, block.coinbase, now, msg.sender, \"CryptoDeads DNA Seed\");\r\n       } else if(i == 1){\r\n         dna = keccak256(msg.sender, now, block.blockhash(block.number-1), \"CryptoDeads DNA Seed\", block.coinbase, block.difficulty);\r\n       } else {\r\n         dna = keccak256(\"CryptoDeads DNA Seed\", now, block.difficulty, block.coinbase, block.blockhash(block.number-1), msg.sender);\r\n       }\r\n\r\n       uint star = uint(dna) % 1000 + 1;\r\n       uint roletype = 4;\r\n\r\n       if(star<=500){\r\n            star = 2;\r\n       }else if(star <= 850){\r\n            star = 3;\r\n            roletype = uint(keccak256(msg.sender ,block.blockhash(block.number-1), block.coinbase, now, block.difficulty)) % 4 + 5;\r\n       }else{\r\n            star = 4;\r\n            roletype = uint(keccak256(block.blockhash(block.number-1), msg.sender, block.difficulty, block.coinbase, now)) % 4 + 9;\r\n       } \r\n\r\n       c.createZombie(uint8(star),dna,uint16(roletype),false,msg.sender);\r\n       \r\n       NewZombie(dna,uint8(star),uint16(roletype),true);\r\n    }\r\n  }\r\n  \r\n  function changeFreeZombiewCount(uint16 _count) public onlyOwner {\r\n      FreeZombieCount = _count;\r\n  }\r\n  \r\n  function withdrawEther(uint _ether) public onlyOwner{\r\n      msg.sender.transfer(_ether);\r\n  }\r\n\r\n  function withdrawZOB(uint _zob) public onlyOwner{\r\n      t.transfer(msg.sender, _zob);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"createRandomZombie_ZOB_smallpack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_zob\",\"type\":\"uint256\"}],\"name\":\"withdrawZOB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createRandomZombie_FreeZombie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isGetFreeZombiew\",\"outputs\":[{\"name\":\"_getFreeZombie\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FreeZombieCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createRandomZombie_Ether\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createRandomZombie_ZOB_goldpack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint16\"}],\"name\":\"changeFreeZombiewCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dna\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"star\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"roletype\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"isfree\",\"type\":\"bool\"}],\"name\":\"NewZombie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"zombieCreator","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f4bdff869181cdc7e2922fbd4f0c173fd6d52ce23f2c82e927788a95505f028b"}]}