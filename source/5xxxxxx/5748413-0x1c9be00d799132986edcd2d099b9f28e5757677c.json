{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'PoWEth Token' contract\r\n// Mineable ERC20 Token using Proof Of Work\r\n//\r\n// Symbol      : PoWEth\r\n// Name        : PoWEth Token\r\n// Total supply: 100,000,000.00\r\n// Decimals    : 8\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n}\r\n\r\nlibrary ExtendedMath {\r\n    //return the smaller of the two inputs (a or b)\r\n    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\r\n        if(a > b) return b;\r\n        return a;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and an\r\n// initial fixed supply\r\n// ----------------------------------------------------------------------------\r\ncontract _0xEtherToken is ERC20Interface {\r\n    using SafeMath for uint;\r\n    using ExtendedMath for uint;\r\n\r\n    string public symbol = \"PoWEth\";\r\n    string public name = \"PoWEth Token\";\r\n    uint8 public decimals = 8;\r\n    uint public _totalSupply = 10000000000000000;\r\n\tuint public maxSupplyForEra = 5000000000000000;\r\n\t\r\n    uint public latestDifficultyPeriodStarted;\r\n\tuint public tokensMinted;\r\n\t\r\n    uint public epochCount; //number of 'blocks' mined\r\n    uint public _BLOCKS_PER_READJUSTMENT = 1024;\r\n\r\n    uint public  _MINIMUM_TARGET = 2**16;\r\n    uint public  _MAXIMUM_TARGET = 2**234;\r\n\r\n    uint public miningTarget = _MAXIMUM_TARGET;\r\n\r\n    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\r\n\r\n    uint public rewardEra;\r\n    \r\n    address public lastRewardTo;\r\n    uint public lastRewardAmount;\r\n    uint public lastRewardEthBlockNumber;\r\n\r\n    mapping(bytes32 => bytes32) solutionForChallenge;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    address private owner;\r\n\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n\r\n    function _0xEtherToken() public {\r\n        \r\n        owner = msg.sender;\r\n        \r\n        latestDifficultyPeriodStarted = block.number;\r\n\r\n        _startNewMiningEpoch();\r\n\r\n        //The owner gets nothing! You must mine this ERC20 token\r\n        //balances[owner] = _totalSupply;\r\n        //Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n\tfunction mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\r\n\r\n\t\t//the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\r\n\t\tbytes32 digest = keccak256(challengeNumber, msg.sender, nonce );\r\n\r\n\t\t//the challenge digest must match the expected\r\n\t\tif (digest != challenge_digest) revert();\r\n\r\n\t\t//the digest must be smaller than the target\r\n\t\tif(uint256(digest) > miningTarget) revert();\r\n\r\n\t\t//only allow one reward for each challenge\r\n\t\tbytes32 solution = solutionForChallenge[challengeNumber];\r\n\t\tsolutionForChallenge[challengeNumber] = digest;\r\n\t\tif(solution != 0x0) \r\n\t\t\trevert();  //prevent the same answer from awarding twice\r\n\r\n\t\tuint reward_amount = getMiningReward();\r\n\r\n\t\tbalances[msg.sender] = balances[msg.sender].add(reward_amount);\r\n\r\n\t\ttokensMinted = tokensMinted.add(reward_amount);\r\n\r\n\t\t//Cannot mint more tokens than there are\r\n\t\tassert(tokensMinted <= maxSupplyForEra);\r\n\r\n\t\t//set readonly diagnostics data\r\n\t\tlastRewardTo = msg.sender;\r\n\t\tlastRewardAmount = reward_amount;\r\n\t\tlastRewardEthBlockNumber = block.number;\r\n\t\t\r\n\t\t_startNewMiningEpoch();\r\n    \temit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\r\n\r\n\t   return true;\r\n\t}\r\n\r\n    //a new 'block' to be mined\r\n    function _startNewMiningEpoch() internal {\r\n\t\t//if max supply for the era will be exceeded next reward round then enter the new era before that happens\r\n\r\n\t\t//20 is the final reward era, almost all tokens minted\r\n\t\t//once the final era is reached, more tokens will not be given out because the assert function\r\n\t\t// 1 era is estimated 1,5y, 20 era is roughly 60y of mining time\r\n\t\tif( tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 19)\r\n\t\t{\r\n\t\t\trewardEra = rewardEra + 1;\r\n\t\t}\r\n\r\n\t\tmaxSupplyForEra = _totalSupply - _totalSupply / (2**(rewardEra + 1));\r\n\r\n\t\tepochCount = epochCount.add(1);\r\n\r\n\t\t//every so often, readjust difficulty. Dont readjust when deploying\r\n\t\tif(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\r\n\t\t{\r\n\t\t\t_reAdjustDifficulty();\r\n\t\t}\r\n\r\n\t\t//make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\r\n\t\t//do this last since this is a protection mechanism in the mint() function\r\n\t\tchallengeNumber = block.blockhash(block.number - 1);\r\n    }\r\n\r\n    //https://en.bitcoin.it/wiki/Difficulty#What_is_the_formula_for_difficulty.3F\r\n    //as of 2017 the bitcoin difficulty was up to 17 zeroes, it was only 8 in the early days\r\n    //readjust the target by 5 percent\r\n    function _reAdjustDifficulty() internal {\r\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\r\n        \r\n        //assume 240 ethereum blocks per hour\r\n        //we want miners to spend ~7,5 minutes to mine each 'block', about 30 ethereum blocks = 1 PoWEth epoch\r\n        uint targetEthBlocksPerDiffPeriod = _BLOCKS_PER_READJUSTMENT * 30; //should be 30 times slower than ethereum\r\n\r\n        //if there were less eth blocks passed in time than expected\r\n        if(ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod)\r\n        {\r\n\t\t\tuint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)) / ethBlocksSinceLastDifficultyPeriod;\r\n\t\t\tuint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\r\n\t\t\t\r\n\t\t\t//make it harder\r\n\t\t\tminingTarget = miningTarget.sub((miningTarget/2000).mul(excess_block_pct_extra));\r\n        }else{\r\n\t\t\tuint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)) / targetEthBlocksPerDiffPeriod;\r\n\t\t\tuint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);\r\n\r\n\t\t\t//make it easier\r\n\t\t\tminingTarget = miningTarget.add((miningTarget/2000).mul(shortage_block_pct_extra));\r\n        }\r\n\r\n        latestDifficultyPeriodStarted = block.number;\r\n\r\n        if(miningTarget < _MINIMUM_TARGET) //very difficult\r\n        {\r\n\t\t\tminingTarget = _MINIMUM_TARGET;\r\n        }\r\n\r\n        if(miningTarget > _MAXIMUM_TARGET) //very easy\r\n        {\r\n\t\t\tminingTarget = _MAXIMUM_TARGET;\r\n        }\r\n    }\r\n\r\n    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\r\n    function getChallengeNumber() public constant returns (bytes32) {\r\n        return challengeNumber;\r\n    }\r\n\r\n    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\r\n     function getMiningDifficulty() public constant returns (uint) {\r\n        return _MAXIMUM_TARGET / miningTarget;\r\n    }\r\n\r\n    function getMiningTarget() public constant returns (uint) {\r\n       return miningTarget;\r\n\t}\r\n\r\n    //100m coins total\r\n    //reward begins at 250 and is cut in half every reward era (as tokens are mined)\r\n    function getMiningReward() public constant returns (uint) {\r\n\t\treturn 25000000000/(2**rewardEra);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public returns (bool success) {\r\n        require(msg.sender == owner);\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    \r\n    //help debug mining software\r\n    function getMintDigest(uint256 nonce, bytes32 challenge_number) public view returns (bytes32 digesttest) {\r\n        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\r\n        return digest;\r\n\t}\r\n\r\n\t//help debug mining software\r\n\tfunction checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\r\n\t\tbytes32 digest = keccak256(challenge_number,msg.sender,nonce);\r\n\t\tif(uint256(digest) > testTarget) \r\n\t\t\trevert();\r\n\t\treturn (digest == challenge_digest);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardEthBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningDifficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardEra\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChallengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupplyForEra\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardTo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"},{\"name\":\"testTarget\",\"type\":\"uint256\"}],\"name\":\"checkMintSolution\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MAXIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"}],\"name\":\"getMintDigest\",\"outputs\":[{\"name\":\"digesttest\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_BLOCKS_PER_READJUSTMENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestDifficultyPeriodStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MINIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"epochCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newChallengeNumber\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"_0xEtherToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://598a64dd442d040661cf26faae76b30281527749cfada01c7b0f9b4db2018419"}]}