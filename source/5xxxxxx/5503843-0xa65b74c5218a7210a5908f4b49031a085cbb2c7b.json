{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  uint constant public MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/*\r\n  Contract to handle all behavior related to ownership of contracts\r\n  -handles tracking current owner and transferring ownership to new owners\r\n*/\r\ncontract Owned {\r\n  address public owner;\r\n  address private newOwner;\r\n\r\n  event OwnershipTransferred(address indexed_from, address indexed_to);\r\n\r\n  function Owned() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0); //reset newOwner to 0/null\r\n  }\r\n}\r\n\r\n/*\r\n  Interface for being ERC223 compliant\r\n  -ERC223 is an industry standard for smart contracts\r\n*/\r\ncontract ERC223 {\r\n  function balanceOf(address who) public view returns (uint);\r\n  \r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function decimals() public view returns (uint8 _decimals);\r\n  function totalSupply() public view returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\n/*\r\n * Contract that is working with ERC223 tokens as a receiver for contract transfers\r\n */\r\n \r\n contract ContractReceiver {\r\n     \r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n    \r\n    \r\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\r\n      TKN memory tkn;\r\n      tkn.sender = _from;\r\n      tkn.value = _value;\r\n      tkn.data = _data;\r\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n      tkn.sig = bytes4(u);\r\n      \r\n      /* tkn variable is analogue of msg variable of Ether transaction\r\n      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\r\n      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\r\n      *  tkn.data is data of token transaction   (analogue of msg.data)\r\n      *  tkn.sig is 4 bytes signature of function\r\n      *  if data of token transaction is a function execution\r\n      */\r\n    }\r\n}\r\n\r\n/*\r\n  @author Nicholas Tuley\r\n  @desc Contract for the C2L token that carries out all token-specific behaviors for the C2L token\r\n*/\r\ncontract C2L is ERC223, Owned {\r\n  //constants\r\n  uint internal constant INITIAL_COIN_BALANCE = 21000000; //starting balance of 21 million coins\r\n\r\n  //variables\r\n  string public name = \"C2L\"; //name of currency\r\n  string public symbol = \"C2L\";\r\n  uint8 public decimals = 0;\r\n  mapping(address => bool) beingEdited; //mapping to prevent multiple edits of the same account occuring at the same time (reentrancy)\r\n\r\n  uint public totalCoinSupply = INITIAL_COIN_BALANCE; //number of this coin in active existence\r\n  mapping(address => uint) internal balances; //balances of users with this coin\r\n  mapping(address => mapping(address => uint)) internal allowed; //map holding how much each user is allowed to transfer out of other addresses\r\n  address[] addressLUT;\r\n\r\n  //C2L contract constructor\r\n  function C2L() public {\r\n    totalCoinSupply = INITIAL_COIN_BALANCE;\r\n    balances[owner] = totalCoinSupply;\r\n    updateAddresses(owner);\r\n  }\r\n\r\n  //getter methods for basic contract info\r\n  function name() public view returns (string _name) {\r\n    return name;\r\n  }\r\n\r\n  function symbol() public view returns (string _symbol) {\r\n    return symbol;\r\n  }\r\n\r\n  function decimals() public view returns (uint8 _decimals) {\r\n    return decimals;\r\n  }\r\n\r\n  /*\r\n    @return the total supply of this coin\r\n  */\r\n  function totalSupply() public view returns (uint256 _supply) {\r\n    return totalCoinSupply;\r\n  }\r\n\r\n  //toggle beingEdited status of this account\r\n  function setEditedTrue(address _subject) private {\r\n    beingEdited[_subject] = true;\r\n  }\r\n\r\n  function setEditedFalse(address _subject) private {\r\n    beingEdited[_subject] = false;\r\n  }\r\n\r\n  /*\r\n    get the balance of a given user\r\n    @param tokenOwner the address of the user account being queried\r\n    @return the balance of the given account\r\n  */\r\n  function balanceOf(address who) public view returns (uint) {\r\n    return balances[who];\r\n  }\r\n\r\n  /*\r\n    Check if the given address is a contract\r\n  */\r\n  function isContract(address _addr) private view returns (bool is_contract) {\r\n    uint length;\r\n    assembly {\r\n          //retrieve the size of the code on target address, this needs assembly\r\n          length := extcodesize(_addr)\r\n    }\r\n    return (length>0);\r\n  }\r\n\r\n  /*\r\n    owner mints new coins\r\n    @param amount The number of coins to mint\r\n    @condition\r\n      -the sender of this message must be the owner/minter/creator of this contract\r\n  */\r\n  function mint(uint amount) public onlyOwner {\r\n    require(beingEdited[owner] != true);\r\n    setEditedTrue(owner);\r\n    totalCoinSupply = SafeMath.add(totalCoinSupply, amount);\r\n    balances[owner] = SafeMath.add(balances[owner], amount);\r\n    setEditedFalse(owner);\r\n  }\r\n\r\n  /*\r\n    transfer tokens to a user from the msg sender\r\n    @param _to The address of the user coins are being sent to\r\n    @param _value The number of coins to send\r\n    @param _data The msg data for this transfer\r\n    @param _custom_fallback A custom fallback function for this transfer\r\n    @conditions:\r\n      -coin sender must have enough coins to carry out transfer\r\n      -the balances of the sender and receiver of the tokens must not be being edited by another transfer at the same time\r\n    @return True if execution of transfer is successful, False otherwise\r\n  */\r\n  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\n    if(isContract(_to)) {\r\n      require(beingEdited[_to] != true && beingEdited[msg.sender] != true);\r\n      //make sure the sender has enough coins to transfer\r\n      require (balances[msg.sender] >= _value); \r\n      setEditedTrue(_to);\r\n      setEditedTrue(msg.sender);\r\n      //transfer the coins\r\n      balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\r\n      balances[_to] = SafeMath.add(balances[_to], _value);\r\n      assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n      emit Transfer(msg.sender, _to, _value, _data); //log the transfer\r\n      setEditedFalse(_to);\r\n      setEditedFalse(msg.sender);\r\n      updateAddresses(_to);\r\n      updateAddresses(msg.sender);\r\n      return true;\r\n    }\r\n    else {\r\n      return transferToAddress(_to, _value, _data);\r\n    }\r\n  }\r\n\r\n  /*\r\n    Carry out transfer of tokens between accounts\r\n    @param _to The address of the user coins are being sent to\r\n    @param _value The number of coins to send\r\n    @param _data The msg data for this transfer\r\n    @conditions:\r\n      -coin sender must have enough coins to carry out transfer\r\n      -the balances of the sender and receiver of the tokens must not be being edited by another transfer at the same time\r\n    @return True if execution of transfer is successful, False otherwise\r\n  */\r\n  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n      if(isContract(_to)) {\r\n          return transferToContract(_to, _value, _data);\r\n      }\r\n      else {\r\n          return transferToAddress(_to, _value, _data);\r\n      }\r\n  }\r\n\r\n  /*\r\n    Backwards compatible transfer function to satisfy ERC20\r\n  */\r\n  function transfer(address _to, uint _value) public returns (bool success) {\r\n      //standard function transfer similar to ERC20 transfer with no _data\r\n      //added due to backwards compatibility reasons\r\n      bytes memory empty;\r\n      if(isContract(_to)) {\r\n          return transferToContract(_to, _value, empty);\r\n      }\r\n      else {\r\n          return transferToAddress(_to, _value, empty);\r\n      }\r\n  }\r\n\r\n  //transfer function that is called when transaction target is an address\r\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n      require(beingEdited[_to] != true && beingEdited[msg.sender] != true);\r\n      require (balanceOf(msg.sender) >= _value);\r\n      setEditedTrue(_to);\r\n      setEditedTrue(msg.sender);\r\n      balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\r\n      balances[_to] = SafeMath.add(balanceOf(_to), _value);\r\n      emit Transfer(msg.sender, _to, _value, _data);\r\n      setEditedFalse(_to);\r\n      setEditedFalse(msg.sender);\r\n      updateAddresses(_to);\r\n      updateAddresses(msg.sender);\r\n      return true;\r\n    }\r\n\r\n  //transfer function that is called when transaction target is a contract\r\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n      require(beingEdited[_to] != true && beingEdited[msg.sender] != true);\r\n      require (balanceOf(msg.sender) >= _value);\r\n      setEditedTrue(_to);\r\n      setEditedTrue(msg.sender);\r\n      balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\r\n      balances[_to] = SafeMath.add(balanceOf(_to), _value);\r\n      ContractReceiver receiver = ContractReceiver(_to);\r\n      receiver.tokenFallback(msg.sender, _value, _data);\r\n      emit Transfer(msg.sender, _to, _value, _data);\r\n      setEditedFalse(_to);\r\n      setEditedFalse(msg.sender);\r\n      updateAddresses(_to);\r\n      updateAddresses(msg.sender);\r\n      return true;\r\n  }\r\n\r\n  /*\r\n    update the addressLUT list of addresses by checking if the address is in the list already, and if not, add the address to the list\r\n    @param _lookup The address to check if it is in the list\r\n  */\r\n  function updateAddresses(address _lookup) private {\r\n    for(uint i = 0; i < addressLUT.length; i++) {\r\n      if(addressLUT[i] == _lookup) return;\r\n    }\r\n    addressLUT.push(_lookup);\r\n  }\r\n\r\n  //default, fallback function\r\n  function () public payable {\r\n  }\r\n\r\n  //self-destruct function for this contract\r\n  function killCoin() public onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCoinSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"indexed_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"indexed_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"C2L","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://da51458fed6520ecbf87ab6ad49f97a533edc0ca2d918cb7dd2f68a3846fde77"}]}