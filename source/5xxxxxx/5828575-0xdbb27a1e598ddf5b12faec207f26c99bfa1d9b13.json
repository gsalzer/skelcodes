{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/* ==================================================================== */\r\n/* Copyright (c) 2018 The Priate Conquest Project.  All rights reserved.\r\n/* \r\n/* https://www.pirateconquest.com One of the world's slg games of blockchain \r\n/*  \r\n/* authors rainy@livestar.com/Jonny.Fu@livestar.com\r\n/*                 \r\n/* ==================================================================== */\r\ncontract CaptainGameConfig {\r\n  address owner;\r\n  struct Card {\r\n    uint32 cardId;\r\n    uint32 color;\r\n    uint32 atk;\r\n    uint32 defense;\r\n    uint32 stype;\r\n    uint256 price;\r\n  }\r\n\r\n  /** mapping**/\r\n  mapping(uint256 => Card) private cardInfo;  //normal card\r\n  mapping(uint32 => uint256) public captainIndxToCount;\r\n  mapping(uint32 => uint32) private calfactor;\r\n  mapping(uint32 => bool) private unitSellable;\r\n\r\n  function CaptainGameConfig() public {\r\n    owner = msg.sender;\r\n\r\n    // level 1 config\r\n    cardInfo[1] = Card(1, 2, 220, 80, 1, 0.495 ether);\r\n    cardInfo[2] = Card(2, 1, 130, 20, 2, 0.2475 ether);\r\n    cardInfo[3] = Card(3, 4, 520, 80, 2, 0.99 ether);\r\n    cardInfo[4] = Card(4, 3, 240, 210, 3, 0.7425 ether);\r\n    cardInfo[5] = Card(5, 4, 320, 280, 3, 0.99 ether);\r\n    cardInfo[6] = Card(6, 4, 440, 160, 1, 0.99 ether);\r\n    cardInfo[7] = Card(7, 2, 260, 40, 2, 0.495 ether);\r\n    cardInfo[8] = Card(8, 3, 330, 120, 1, 0.7425 ether);\r\n    cardInfo[9] = Card(9, 1, 130, 20, 2, 0.2475 ether);\r\n\r\n    captainIndxToCount[1] = 100000; // for count limited\r\n    captainIndxToCount[2] = 100000;\r\n    captainIndxToCount[3] = 30;\r\n    captainIndxToCount[4] = 100000;\r\n    captainIndxToCount[5] = 30;\r\n    captainIndxToCount[6] = 30;\r\n    captainIndxToCount[7] = 100000;\r\n    captainIndxToCount[8] = 100000;\r\n    captainIndxToCount[9] = 100000;\r\n\r\n    calfactor[1] = 80; //for atk_min & atk_max calculate\r\n    calfactor[2] = 85;\r\n    calfactor[3] = 90;\r\n    calfactor[4] = 95;\r\n\r\n    unitSellable[3] = true;\r\n    unitSellable[5] = true;\r\n    unitSellable[6] = true;\r\n  }\r\n\r\n  function getCardInfo(uint32 cardId) external constant returns (uint32,uint32,uint32,uint32,uint32,uint256,uint256) {\r\n    return (\r\n      cardInfo[cardId].color,\r\n      cardInfo[cardId].atk, \r\n      cardInfo[cardId].atk*calfactor[cardInfo[cardId].color]/100,\r\n      cardInfo[cardId].atk*(200-cardInfo[cardId].color)/100,\r\n      cardInfo[cardId].defense,\r\n      cardInfo[cardId].price,\r\n      captainIndxToCount[cardId]);\r\n  }    \r\n  \r\n  function getCardType(uint32 cardId) external constant returns (uint32){\r\n    return cardInfo[cardId].stype;\r\n  }\r\n  function addCard(uint32 id, uint32 color, uint32 atk,uint32 defense, uint32 stype, uint256 price) external {\r\n    require(msg.sender == owner);\r\n    cardInfo[id] = Card(id, color, atk, defense, stype, price);\r\n  }\r\n  \r\n  function setCaptainIndexToCount(uint32 _id, uint256 _count) external {\r\n    require(msg.sender == owner);\r\n    captainIndxToCount[_id] = _count;\r\n  }\r\n  function getCaptainIndexToCount(uint32 _id) external constant returns (uint256) {\r\n    return captainIndxToCount[_id];\r\n  }\r\n\r\n  function getCalFactor(uint32 _color) external constant returns (uint32) {\r\n    return calfactor[_color];\r\n  }\r\n  function setCalFactor(uint32 _color, uint32 _factor) external {\r\n    require(msg.sender == owner);\r\n    calfactor[_color] = _factor;\r\n  }\r\n\r\n  function getSellable(uint32 _captainId) external constant returns (bool) {\r\n    return unitSellable[_captainId];\r\n  }\r\n\r\n  function setSellable(uint32 _captainId,bool b) external {\r\n    require(msg.sender == owner);\r\n    unitSellable[_captainId] = b;\r\n  }\r\n\r\n  function getLevelConfig(uint32 cardId, uint32 level) external view returns (uint32 atk,uint32 defense,uint32 atk_min,uint32 atk_max) {\r\n    if (level==1) {\r\n      atk = cardInfo[cardId].atk;\r\n      defense = cardInfo[cardId].defense;\r\n    } else if (level==2) {\r\n      atk = cardInfo[cardId].atk * 150/100;\r\n      defense = cardInfo[cardId].defense * 150/100;\r\n    } else if (level>=3) {\r\n      atk = cardInfo[cardId].atk * (level-1) - (level-2) * cardInfo[cardId].atk * 150/100;\r\n      defense = cardInfo[cardId].defense * 150/100;\r\n    }\r\n    atk_min = calfactor[cardInfo[cardId].color]/100;\r\n    atk_max = atk*(200-cardInfo[cardId].color)/100;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint32\"}],\"name\":\"getCardInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint32\"}],\"name\":\"getCardType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_captainId\",\"type\":\"uint32\"},{\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setSellable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_captainId\",\"type\":\"uint32\"}],\"name\":\"getSellable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"captainIndxToCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setCaptainIndexToCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_color\",\"type\":\"uint32\"}],\"name\":\"getCalFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint32\"},{\"name\":\"level\",\"type\":\"uint32\"}],\"name\":\"getLevelConfig\",\"outputs\":[{\"name\":\"atk\",\"type\":\"uint32\"},{\"name\":\"defense\",\"type\":\"uint32\"},{\"name\":\"atk_min\",\"type\":\"uint32\"},{\"name\":\"atk_max\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_color\",\"type\":\"uint32\"},{\"name\":\"_factor\",\"type\":\"uint32\"}],\"name\":\"setCalFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint32\"},{\"name\":\"color\",\"type\":\"uint32\"},{\"name\":\"atk\",\"type\":\"uint32\"},{\"name\":\"defense\",\"type\":\"uint32\"},{\"name\":\"stype\",\"type\":\"uint32\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"addCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getCaptainIndexToCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CaptainGameConfig","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6d84e8c1401a651e37f4eb3e80c074c190868e8b003fa3b3267de56a59ccadfe"}]}