{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n  function withdraw() public onlyOwner{\r\n      owner.transfer(address(this).balance);\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract SimpleERC721{\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n}\r\n\r\ncontract Solitaire is Ownable {\r\n    event NewAsset(uint256 index,address nft, uint256 token, address owner, string url,string memo);\r\n\r\n    struct Asset{\r\n        address nft;\r\n        uint256 tokenId;\r\n        address owner;\r\n        string url;\r\n        string memo;\r\n    }\r\n    uint256 public fee = 5 finney;\r\n    Asset[] queue;\r\n\r\n    function init(address _nft,uint256 _id,address _owner,string _url,string _memo) public onlyOwner{\r\n        require(queue.length<=1);\r\n        Asset memory a = Asset({\r\n            nft: _nft,\r\n            tokenId: _id,\r\n            owner: _owner,\r\n            url: _url,\r\n            memo: _memo\r\n        });\r\n        if (queue.length==0){\r\n            queue.push(a);\r\n        }else{\r\n            queue[0] = a;\r\n        }\r\n        emit NewAsset(0,_nft,_id,_owner,_url,_memo);\r\n    }\r\n    \r\n    function refund(address _nft,uint256 _id,address _owner) public onlyOwner{\r\n        require(_owner != address(0));\r\n        SimpleERC721 se = SimpleERC721(_nft);\r\n        require(se.ownerOf(_id) == address(this));\r\n        se.transfer(_owner,_id);\r\n    }\r\n    \r\n    function setfee(uint256 _fee) public onlyOwner{\r\n        require(_fee>=0);\r\n        fee = _fee;\r\n    }\r\n    \r\n    function totalAssets() public view returns(uint256){\r\n        return queue.length;\r\n    }\r\n    \r\n    function getAsset(uint256 _index) public view returns(address _nft,uint256 _id,address _owner,string _url,string _memo){\r\n        require(_index<queue.length);\r\n        Asset memory _a = queue[_index];\r\n        _nft = _a.nft;\r\n        _id = _a.tokenId;\r\n        _owner = _a.owner;\r\n        _url = _a.url;\r\n        _memo = _a.memo;\r\n    }\r\n    \r\n    function addLayer(address _nft,uint256 _id,string _url,string _memo) public payable{\r\n        require(msg.value >=fee);\r\n        require(_nft != address(0));\r\n        SimpleERC721 se = SimpleERC721(_nft);\r\n        require(se.ownerOf(_id) == msg.sender);\r\n        se.transferFrom(msg.sender,address(this),_id);\r\n        // double check\r\n        require(se.ownerOf(_id) == address(this));\r\n        Asset memory last = queue[queue.length -1];\r\n        SimpleERC721 lastse = SimpleERC721(last.nft);\r\n        lastse.transfer(msg.sender,last.tokenId);\r\n        Asset memory newasset = Asset({\r\n            nft: _nft,\r\n            tokenId: _id,\r\n            owner: msg.sender,\r\n            url: _url,\r\n            memo: _memo\r\n        });\r\n        uint256 index = queue.push(newasset) - 1;\r\n        emit NewAsset(index,_nft,  _id,  msg.sender,_url,_memo);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nft\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_url\",\"type\":\"string\"},{\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"addLayer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nft\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setfee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nft\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_url\",\"type\":\"string\"},{\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAsset\",\"outputs\":[{\"name\":\"_nft\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_url\",\"type\":\"string\"},{\"name\":\"_memo\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"NewAsset\",\"type\":\"event\"}]","ContractName":"Solitaire","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://73896cef7c951436e86a2f25769a0e598c6eb40a06bde029c7664c25d954037f"}]}