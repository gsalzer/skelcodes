{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n \r\n\r\n//-------------------------------\r\n// (        )   )  (            )  \r\n// )\\ )  ( /(( /(  )\\ )  (   ( /(  \r\n//(()/(  )\\())\\())(()/(  )\\  )\\()) \r\n// /(_))((_)((_)\\  /(_)|((_)((_)\\  \r\n//(_)) |_ ((_)((_)(_)) )\\___ _((_) \r\n/// __|| |/ // _ \\| _ ((/ __| || | \r\n//\\__ \\  ' <| (_) |   /| (__| __ | \r\n//|___/ _|\\_\\\\___/|_|_\\ \\___|_||_| \r\n//--------------------------------\r\n\r\n//------------------------------------------\r\n// Official Website: https://skorch.io\r\n// Github: https://github.com/skorchtoken\r\n// Twitter: https://twitter.com/SkorchToken\r\n// Reddit: https://reddit.com/r/SkorchToken\r\n// Medium: https://medium.com/@skorchtoken\r\n// Discord: https://discord.gg/yxZAnfe\r\n// Telegram: https://t.me/skorchtoken\r\n\r\n// ALWAYS refer to our official social media channels and website for project announcements.\r\n//------------------------------------------\r\n\r\n// Skorch is the first PoW+PoS mineable ERC20 token using Keccak256 (Sha3) algorithm\r\n// 210 Million Total Supply \r\n// 21 Million available for Proof of Work mining based on Bitcoin's SHA256 Algorithm\r\n// 21k (21,000) SKO Required to be held in your wallet to gain Proof of Stake Rewards\r\n// 189 Million of 210 Million total supply will be minted by the smart contract for PoS rewards \r\n// 30% PoS rewards for the first year but decreases each year after until 0 \r\n// PoS requirement decreases after first year and each year after until 0\r\n\r\n// Difficulty target auto-adjusts with PoW hashrate\r\n// Mining rewards decrease as more tokens are minted\r\n\r\n// To fix and improve the original Skorch token contract a snapshot was taken at block 5882054.\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n//209899900000000\r\n\r\nlibrary ExtendedMath {\r\n    //return the smaller of the two inputs (a or b)\r\n    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\r\n        if(a > b) return b;\r\n        return a;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Skorch is ERC20Interface, Owned {\r\n\r\n    using SafeMath for uint;\r\n    using ExtendedMath for uint;\r\n\r\n    string public symbol;\r\n\r\n    string public  name;\r\n\r\n    uint8 public decimals = 8;\r\n\r\n    uint public _totalSupply;\r\n    uint public latestDifficultyPeriodStarted;\r\n    uint public epochCount;\r\n    uint public _BLOCKS_PER_READJUSTMENT = 1024;\r\n\r\n    uint public  _MINIMUM_TARGET = 2**16;\r\n\r\n    uint public  _MAXIMUM_TARGET = 2**234;\r\n\r\n    uint public miningTarget;\r\n\r\n    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\r\n\r\n    uint public rewardEra;\r\n    uint public maxSupplyForEra;\r\n\r\n    address public lastRewardTo;\r\n    uint public lastRewardAmount;\r\n    uint public lastRewardEthBlockNumber;\r\n\r\n    bool locked = false;\r\n\r\n    mapping(bytes32 => bytes32) solutionForChallenge;\r\n\r\n    uint public tokensMinted;\r\n    \r\n    uint internal GLOBAL_START_TIMER;\r\n\r\n    mapping(address => uint) balances;\r\n\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    mapping(address => uint256) timer; // timer to check PoS \r\n    \r\n    // how to calculate doubleUnit: \r\n    // specify how much percent increase you want per year \r\n    // e.g. 130% -> 2.3 multiplier every year \r\n    // now divide (1 years) by LOG(2.3) where LOG is the natural logarithm (not LOG10)\r\n    // in this case LOG(2.3) is 0.83290912293\r\n    // hence multiplying by 1/0.83290912293 is the same \r\n    // 31536000 = 1 years (to prevent deprecated warning in solc)\r\n   \r\n    \r\n  //  uint256 timerUnit = 2.2075199 * (10**8);\r\n    uint256 timerUnit = 88416639; // unit for staking req\r\n    uint256 stakingRequirement = (21000 * (10**uint(decimals)));\r\n    \r\n    \r\n    uint stakeUnit = 930222908; // unit  for staking \r\n    \r\n    //uint256 stakingCap = (210000000 * (10**uint(decimals)));\r\n\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n    event PoS(address indexed from, uint reward_amount);\r\n\r\n    constructor()\r\n        public \r\n        onlyOwner()\r\n    {\r\n        symbol = \"SKO\";\r\n        name = \"Skorch\";\r\n        decimals = 8;\r\n        // uncomment this to test \r\n        //balances[msg.sender] = (21000) * (10 ** uint(decimals)); // change 21000 to some lower number than 21000 \r\n        //to see you will not get PoS tokens if you have less than 21000 tokens \r\n        //timer[msg.sender] = now - (1 years);\r\n        _totalSupply = 210000000 * 10**uint(decimals);\r\n        if(locked) revert();\r\n        locked = true;\r\n        tokensMinted = 69750000000000;\r\n        rewardEra = 0;\r\n        maxSupplyForEra = 1050000000000000;\r\n        //miningTarget = _MAXIMUM_TARGET;\r\n        latestDifficultyPeriodStarted = block.number;\r\n        //_startNewMiningEpoch(); all relevant vars are set below\r\n        GLOBAL_START_TIMER = now;\r\n        challengeNumber = 0x48f499eca7dc41858c2a53fded09096d138b8b88a9da8f488dccd5118bb1bbe2;\r\n        epochCount = 20181;\r\n        rewardEra = 0;\r\n        maxSupplyForEra = (_totalSupply/10) - _totalSupply.div( 20**(rewardEra + 1)); // multiplied by 10 since totalsupply is 210 million here \r\n        miningTarget = 462884030900683306229868328231836786922375156766639975465481078398;\r\n        \r\n        \r\n        \r\n        // SNAPSHOT DATA \r\n// NEW FILE\r\nbalances[0xab4485ca338b91087a09ae8bc141648bb1c6e967]=111501588282;\r\nemit Transfer(address(0x0), 0xab4485ca338b91087a09ae8bc141648bb1c6e967, 111501588282);\r\nbalances[0xf2119e50578b3dfa248652c4fbec76b9e415acb2]=10136508025;\r\nemit Transfer(address(0x0), 0xf2119e50578b3dfa248652c4fbec76b9e415acb2, 10136508025);\r\nbalances[0xb12b538cb67fceb50bbc1a31d2011eb92e6f7188]=1583682;\r\nemit Transfer(address(0x0), 0xb12b538cb67fceb50bbc1a31d2011eb92e6f7188, 1583682);\r\nbalances[0x21b7e18dacde5c004a0a56e74f071ac3fb2e98ff]=10790714329;\r\nemit Transfer(address(0x0), 0x21b7e18dacde5c004a0a56e74f071ac3fb2e98ff, 10790714329);\r\nbalances[0xe539a7645d2f33103c89b5b03abb422a163b7c73]=60819048154;\r\nemit Transfer(address(0x0), 0xe539a7645d2f33103c89b5b03abb422a163b7c73, 60819048154);\r\nbalances[0x4ffe17a2a72bc7422cb176bc71c04ee6d87ce329]=451048209723;\r\nemit Transfer(address(0x0), 0x4ffe17a2a72bc7422cb176bc71c04ee6d87ce329, 451048209723);\r\nbalances[0xc0a2002e74b3b22e77098cb87232f446d813ce31]=33885;\r\nemit Transfer(address(0x0), 0xc0a2002e74b3b22e77098cb87232f446d813ce31, 33885);\r\nbalances[0xfc313f77c2cbc6cd0dd82b9a0ed1620ba906e46d]=192593652488;\r\nemit Transfer(address(0x0), 0xfc313f77c2cbc6cd0dd82b9a0ed1620ba906e46d, 192593652488);\r\nbalances[0x219fdb55ea364fcaf29aaa87fb1c45ba7db8128e]=20273016051;\r\nemit Transfer(address(0x0), 0x219fdb55ea364fcaf29aaa87fb1c45ba7db8128e, 20273016051);\r\nbalances[0xfbc2b315ac1fba765597a92ff100222425ce66fd]=608190481542;\r\nemit Transfer(address(0x0), 0xfbc2b315ac1fba765597a92ff100222425ce66fd, 608190481542);\r\nbalances[0x852563d88480decbc9bfb4428bb689af48dd92a9]=1008618359915;\r\nemit Transfer(address(0x0), 0x852563d88480decbc9bfb4428bb689af48dd92a9, 1008618359915);\r\nbalances[0x4d01d11697f00097064d7e05114ecd3843e82867]=789840293838;\r\nemit Transfer(address(0x0), 0x4d01d11697f00097064d7e05114ecd3843e82867, 789840293838);\r\nbalances[0xe75ea07e4b90e46e13c37644138aa99ec69020ae]=526108154879;\r\nemit Transfer(address(0x0), 0xe75ea07e4b90e46e13c37644138aa99ec69020ae, 526108154879);\r\nbalances[0x51138ab5497b2c3d85be94d23905f5ead9e533a7]=5068254012;\r\nemit Transfer(address(0x0), 0x51138ab5497b2c3d85be94d23905f5ead9e533a7, 5068254012);\r\nbalances[0xae7c95f2192c739edfb16412a6112a54f8965305]=55750794141;\r\nemit Transfer(address(0x0), 0xae7c95f2192c739edfb16412a6112a54f8965305, 55750794141);\r\nbalances[0xe0261acfdd10508c75b6a60b1534c8386c4daa52]=5047016671743;\r\nemit Transfer(address(0x0), 0xe0261acfdd10508c75b6a60b1534c8386c4daa52, 5047016671743);\r\nbalances[0x0a26d9674c2a1581ada4316e3f5960bb70fb0fb2]=516961909310;\r\nemit Transfer(address(0x0), 0x0a26d9674c2a1581ada4316e3f5960bb70fb0fb2, 516961909310);\r\nbalances[0xa62178f120cccba370d2d2d12ec6fb1ff276d706]=2052642875205;\r\nemit Transfer(address(0x0), 0xa62178f120cccba370d2d2d12ec6fb1ff276d706, 2052642875205);\r\nbalances[0xe57a18783640c9fa3c5e8e4d4b4443e2024a7ff9]=2494738345632;\r\nemit Transfer(address(0x0), 0xe57a18783640c9fa3c5e8e4d4b4443e2024a7ff9, 2494738345632);\r\nbalances[0x9b8957d1ac592bd388dcde346933ac1269b7c314]=106433334269;\r\nemit Transfer(address(0x0), 0x9b8957d1ac592bd388dcde346933ac1269b7c314, 106433334269);\r\nbalances[0xf27bb893a4d9574378c4b1d089bdb6b9fce5099e]=380845;\r\nemit Transfer(address(0x0), 0xf27bb893a4d9574378c4b1d089bdb6b9fce5099e, 380845);\r\nbalances[0x54a8f792298af9489de7a1245169a943fb69f5a6]=707886981662;\r\nemit Transfer(address(0x0), 0x54a8f792298af9489de7a1245169a943fb69f5a6, 707886981662);\r\nbalances[0x004ba728a652bded4d4b79fb04b5a92ad8ce15e7]=21250198;\r\nemit Transfer(address(0x0), 0x004ba728a652bded4d4b79fb04b5a92ad8ce15e7, 21250198);\r\nbalances[0xd05803aee240195460f8589a6d6487fcea0097c1]=85731;\r\nemit Transfer(address(0x0), 0xd05803aee240195460f8589a6d6487fcea0097c1, 85731);\r\nbalances[0xad9f11d1dd6d202243473a0cdae606308ab243b4]=101365080257;\r\nemit Transfer(address(0x0), 0xad9f11d1dd6d202243473a0cdae606308ab243b4, 101365080257);\r\nbalances[0xfec55e783595682141c4b5e6ad9ea605f1683844]=60657099080;\r\nemit Transfer(address(0x0), 0xfec55e783595682141c4b5e6ad9ea605f1683844, 60657099080);\r\nbalances[0x99a7e5777b711ff23e2b6961232a4009f7cec1b0]=456860909542;\r\nemit Transfer(address(0x0), 0x99a7e5777b711ff23e2b6961232a4009f7cec1b0, 456860909542);\r\nbalances[0xbf45f4280cfbe7c2d2515a7d984b8c71c15e82b7]=1366848029003;\r\nemit Transfer(address(0x0), 0xbf45f4280cfbe7c2d2515a7d984b8c71c15e82b7, 1366848029003);\r\nbalances[0xb38094d492af4fffff760707f36869713bfb2250]=2032369859152;\r\nemit Transfer(address(0x0), 0xb38094d492af4fffff760707f36869713bfb2250, 2032369859152);\r\nbalances[0x900953b10460908ec636b46307dca13a759275cb]=1856435;\r\nemit Transfer(address(0x0), 0x900953b10460908ec636b46307dca13a759275cb, 1856435);\r\nbalances[0x167e733de0861f0d61b179d3d1891e6b90587732]=2047574621189;\r\nemit Transfer(address(0x0), 0x167e733de0861f0d61b179d3d1891e6b90587732, 2047574621189);\r\nbalances[0xdb3cbb8aa4dec854e6e60982dd9d4e85a8b422bc]=2;\r\nemit Transfer(address(0x0), 0xdb3cbb8aa4dec854e6e60982dd9d4e85a8b422bc, 2);\r\nbalances[0x072e8711704654019c3d9bc242b3f9a4ee1963ce]=10136236279;\r\nemit Transfer(address(0x0), 0x072e8711704654019c3d9bc242b3f9a4ee1963ce, 10136236279);\r\nbalances[0x04f72aa695b65a54d79db635005077293d111635]=167020515303;\r\nemit Transfer(address(0x0), 0x04f72aa695b65a54d79db635005077293d111635, 167020515303);\r\nbalances[0x30385a99e66469a8c0bf172896758dd4595704a9]=614699515479;\r\nemit Transfer(address(0x0), 0x30385a99e66469a8c0bf172896758dd4595704a9, 614699515479);\r\nbalances[0xfe5a94e5bab010f52ae8fd8589b7d0a7b0b433ae]=2067847571118;\r\nemit Transfer(address(0x0), 0xfe5a94e5bab010f52ae8fd8589b7d0a7b0b433ae, 2067847571118);\r\nbalances[0x88058d4d90cc9d9471509e5be819b2be361b51c6]=957900008429;\r\nemit Transfer(address(0x0), 0x88058d4d90cc9d9471509e5be819b2be361b51c6, 957900008429);\r\nbalances[0xfcc6bf3369077e22a90e05ad567744bf5109e4d4]=1635580659302;\r\nemit Transfer(address(0x0), 0xfcc6bf3369077e22a90e05ad567744bf5109e4d4, 1635580659302);\r\nbalances[0x21a6043877a0ac376b7ca91195521de88d440eba]=162184128411;\r\nemit Transfer(address(0x0), 0x21a6043877a0ac376b7ca91195521de88d440eba, 162184128411);\r\nbalances[0xd7dd80404d3d923c8a40c47c1f61aacbccb4191e]=3569292763171;\r\nemit Transfer(address(0x0), 0xd7dd80404d3d923c8a40c47c1f61aacbccb4191e, 3569292763171);\r\nbalances[0xa1a3e2fcc1e7c805994ca7309f9a829908a18b4c]=633301706054;\r\nemit Transfer(address(0x0), 0xa1a3e2fcc1e7c805994ca7309f9a829908a18b4c, 633301706054);\r\nbalances[0xc5556ce5c51d2f6a8d7a54bec2a9961dfada84db]=2471775966918;\r\nemit Transfer(address(0x0), 0xc5556ce5c51d2f6a8d7a54bec2a9961dfada84db, 2471775966918);\r\nbalances[0xb4894098be4dbfdc0024dfb9d2e9f6654e0e3786]=10053178133;\r\nemit Transfer(address(0x0), 0xb4894098be4dbfdc0024dfb9d2e9f6654e0e3786, 10053178133);\r\nbalances[0xe8a01b61f80130aefda985ee2e9c6899a57a17c8]=177388890449;\r\nemit Transfer(address(0x0), 0xe8a01b61f80130aefda985ee2e9c6899a57a17c8, 177388890449);\r\nbalances[0x559a922941f84ebe6b9f0ed58e3b96530614237e]=65887302167;\r\nemit Transfer(address(0x0), 0x559a922941f84ebe6b9f0ed58e3b96530614237e, 65887302167);\r\nbalances[0xf95f528d7c25904f15d4154e45eab8e5d4b6c160]=425572373267;\r\nemit Transfer(address(0x0), 0xf95f528d7c25904f15d4154e45eab8e5d4b6c160, 425572373267);\r\nbalances[0x0045b9707913eae3889283ed4d72077a904b9848]=1507541146428;\r\nemit Transfer(address(0x0), 0x0045b9707913eae3889283ed4d72077a904b9848, 1507541146428);\r\nbalances[0x586389feed58c2c6a0ce6258cb1c58833abdb093]=2603426;\r\nemit Transfer(address(0x0), 0x586389feed58c2c6a0ce6258cb1c58833abdb093, 2603426);\r\nbalances[0xd2b752bec2fe5c7e5cc600eb5ce465a210cb857a]=380119050963;\r\nemit Transfer(address(0x0), 0xd2b752bec2fe5c7e5cc600eb5ce465a210cb857a, 380119050963);\r\nbalances[0x518bbb5e4a1e8f8f21a09436c35b9cb5c20c7b43]=5037433249;\r\nemit Transfer(address(0x0), 0x518bbb5e4a1e8f8f21a09436c35b9cb5c20c7b43, 5037433249);\r\nbalances[0x25e5c43d5f53ee1a7dd5ad7560348e29baea3048]=5068254012;\r\nemit Transfer(address(0x0), 0x25e5c43d5f53ee1a7dd5ad7560348e29baea3048, 5068254012);\r\nbalances[0x22dd964193df4de2e6954a2a9d9cbbd6f44f0b28]=2754253183453;\r\nemit Transfer(address(0x0), 0x22dd964193df4de2e6954a2a9d9cbbd6f44f0b28, 2754253183453);\r\nbalances[0xaa7a7c2decb180f68f11e975e6d92b5dc06083a6]=116569842295;\r\nemit Transfer(address(0x0), 0xaa7a7c2decb180f68f11e975e6d92b5dc06083a6, 116569842295);\r\nbalances[0x4e27a678c8dc883035c542c83124e7e3f39842b0]=35477778089;\r\nemit Transfer(address(0x0), 0x4e27a678c8dc883035c542c83124e7e3f39842b0, 35477778089);\r\nbalances[0x3bd56f97876d3af248b1fe92e361c05038c74c27]=15181683975;\r\nemit Transfer(address(0x0), 0x3bd56f97876d3af248b1fe92e361c05038c74c27, 15181683975);\r\nbalances[0x674194d05bfc9a176a5b84711c8687609ff3d17b]=4287056630970;\r\nemit Transfer(address(0x0), 0x674194d05bfc9a176a5b84711c8687609ff3d17b, 4287056630970);\r\nbalances[0x0102f6ca7278e7d96a6d649da30bfe07e87155a3]=1233053375653;\r\nemit Transfer(address(0x0), 0x0102f6ca7278e7d96a6d649da30bfe07e87155a3, 1233053375653);\r\nbalances[0x3750ecf5e0536d04dd3858173ab571a0dcbdf7e0]=50270330036;\r\nemit Transfer(address(0x0), 0x3750ecf5e0536d04dd3858173ab571a0dcbdf7e0, 50270330036);\r\nbalances[0x07a68bd44a526e09b8dbfc7085b265450362b61a]=101365080257;\r\nemit Transfer(address(0x0), 0x07a68bd44a526e09b8dbfc7085b265450362b61a, 101365080257);\r\nbalances[0xebd76aa221968b8ba9cdd6e6b4dbb889140088a3]=309163494783;\r\nemit Transfer(address(0x0), 0xebd76aa221968b8ba9cdd6e6b4dbb889140088a3, 309163494783);\r\nbalances[0xc7ee330d69cdddc1b9955618ff0df27bb8de3143]=10098567209;\r\nemit Transfer(address(0x0), 0xc7ee330d69cdddc1b9955618ff0df27bb8de3143, 10098567209);\r\nbalances[0xe0c059faabce16dd5ddb4817f427f5cf3b40f4c4]=656449480989;\r\nemit Transfer(address(0x0), 0xe0c059faabce16dd5ddb4817f427f5cf3b40f4c4, 656449480989);\r\nbalances[0xdc680cc11a535e45329f49566850668fef34054f]=1629652247199;\r\nemit Transfer(address(0x0), 0xdc680cc11a535e45329f49566850668fef34054f, 1629652247199);\r\nbalances[0x22ef324a534ba9aa0d060c92294fdd0fc4aca065]=105388398778;\r\nemit Transfer(address(0x0), 0x22ef324a534ba9aa0d060c92294fdd0fc4aca065, 105388398778);\r\nbalances[0xe14cffadb6bbad8de69bd5ba214441a9582ec548]=70955556179;\r\nemit Transfer(address(0x0), 0xe14cffadb6bbad8de69bd5ba214441a9582ec548, 70955556179);\r\nbalances[0xdfb895c870c4956261f4839dd12786ef612d7314]=307632851383;\r\nemit Transfer(address(0x0), 0xdfb895c870c4956261f4839dd12786ef612d7314, 307632851383);\r\nbalances[0x620103bb2b263ab0a50a47f73140d218401541c0]=10780637244561;\r\nemit Transfer(address(0x0), 0x620103bb2b263ab0a50a47f73140d218401541c0, 10780637244561);\r\nbalances[0x9fc5b0edc0309745c6974f1a6718029ea41a4d6e]=65859631176;\r\nemit Transfer(address(0x0), 0x9fc5b0edc0309745c6974f1a6718029ea41a4d6e, 65859631176);\r\nbalances[0xd6ceae2756f2af0a2f825b6e3ca8a9cfb4d082e2]=1122517124649;\r\nemit Transfer(address(0x0), 0xd6ceae2756f2af0a2f825b6e3ca8a9cfb4d082e2, 1122517124649);\r\nbalances[0x25437b6a20021ea94d549ddd50403994e532e9d7]=1711954946632;\r\nemit Transfer(address(0x0), 0x25437b6a20021ea94d549ddd50403994e532e9d7, 1711954946632);\r\nbalances[0xeb4f4c886b402c65ff6f619716efe9319ce40fcf]=526035186557;\r\nemit Transfer(address(0x0), 0xeb4f4c886b402c65ff6f619716efe9319ce40fcf, 526035186557);\r\nbalances[0xf3552d4018fad9fcc390f5684a243f7318d8b570]=253412700642;\r\nemit Transfer(address(0x0), 0xf3552d4018fad9fcc390f5684a243f7318d8b570, 253412700642);\r\nbalances[0x85abe8e3bed0d4891ba201af1e212fe50bb65a26]=1060373239943;\r\nemit Transfer(address(0x0), 0x85abe8e3bed0d4891ba201af1e212fe50bb65a26, 1060373239943);\r\nbalances[0xc446073e0c00a1138812b3a99a19df3cb8ace70d]=2032369859153;\r\nemit Transfer(address(0x0), 0xc446073e0c00a1138812b3a99a19df3cb8ace70d, 2032369859153);\r\nbalances[0x195d65187a4aeb24b563dd2d52709a6b67064ad3]=235803680643;\r\nemit Transfer(address(0x0), 0x195d65187a4aeb24b563dd2d52709a6b67064ad3, 235803680643);\r\nbalances[0x588611841bd8b134f3d6ca3ff2796b483dfca4c6]=27875;\r\nemit Transfer(address(0x0), 0x588611841bd8b134f3d6ca3ff2796b483dfca4c6, 27875);\r\nbalances[0x43237ce180fc47cb4e3d32eb23e420f5ecf7a95e]=5087020825285;\r\nemit Transfer(address(0x0), 0x43237ce180fc47cb4e3d32eb23e420f5ecf7a95e, 5087020825285);\r\nbalances[0x394299ef1650ac563a9adbec4061b25e50570f49]=65523270720;\r\nemit Transfer(address(0x0), 0x394299ef1650ac563a9adbec4061b25e50570f49, 65523270720);\r\nbalances[0x0000bb50ee5f5df06be902d1f9cb774949c337ed]=728415;\r\nemit Transfer(address(0x0), 0x0000bb50ee5f5df06be902d1f9cb774949c337ed, 728415);\r\nbalances[0x4927fb34fff626adb7b07305c447ac89ded8bea2]=15181318646;\r\nemit Transfer(address(0x0), 0x4927fb34fff626adb7b07305c447ac89ded8bea2, 15181318646);\r\nbalances[0x93da7b2830e3932d906749e67a7ce1fbf3a5366d]=2768553093810;\r\nemit Transfer(address(0x0), 0x93da7b2830e3932d906749e67a7ce1fbf3a5366d, 2768553093810);\r\nbalances[0x7f4924f55e215e1fe44e3b5bb7fdfced2154b30f]=506445600761;\r\nemit Transfer(address(0x0), 0x7f4924f55e215e1fe44e3b5bb7fdfced2154b30f, 506445600761);\r\nbalances[0x9834977aa420b078b8fd47c73a9520f968d66a3a]=1035039327674;\r\nemit Transfer(address(0x0), 0x9834977aa420b078b8fd47c73a9520f968d66a3a, 1035039327674);\r\nbalances[0x26b8c7606e828a509bbb208a0322cf960c17b225]=1314664139193;\r\nemit Transfer(address(0x0), 0x26b8c7606e828a509bbb208a0322cf960c17b225, 1314664139193);\r\nbalances[0x8f3dd21c9334980030ba95c37565ba25df9574cd]=20273016051;\r\nemit Transfer(address(0x0), 0x8f3dd21c9334980030ba95c37565ba25df9574cd, 20273016051);\r\nbalances[0x85d66f3a8da35f47e03d6bb51f51c2d70a61e12e]=10419370357974;\r\nemit Transfer(address(0x0), 0x85d66f3a8da35f47e03d6bb51f51c2d70a61e12e, 10419370357974);\r\nbalances[0xbafc492638a2ec4f89aff258c8f18f806a844d72]=396663813367;\r\nemit Transfer(address(0x0), 0xbafc492638a2ec4f89aff258c8f18f806a844d72, 396663813367);\r\nbalances[0x2f0d5a1d6bb5d7eaa0eaad39518621911a4a1d9f]=45613275677;\r\nemit Transfer(address(0x0), 0x2f0d5a1d6bb5d7eaa0eaad39518621911a4a1d9f, 45613275677);\r\nbalances[0xae5910c6f3cd709bf497bae2b8eae8cf983aca1b]=561729123519;\r\nemit Transfer(address(0x0), 0xae5910c6f3cd709bf497bae2b8eae8cf983aca1b, 561729123519);\r\nbalances[0xb963db36d28468ce64bce65e560e5f27e75f2f50]=50497795029;\r\nemit Transfer(address(0x0), 0xb963db36d28468ce64bce65e560e5f27e75f2f50, 50497795029);\r\nbalances[0x7134161b9e6fa84d62f156037870ee77fa50f607]=806825;\r\nemit Transfer(address(0x0), 0x7134161b9e6fa84d62f156037870ee77fa50f607, 806825);\r\nbalances[0x111fd8a12981d1174cfa8eef3b0141b3d5d4e5b3]=5023380788;\r\nemit Transfer(address(0x0), 0x111fd8a12981d1174cfa8eef3b0141b3d5d4e5b3, 5023380788);\r\nbalances[0xafaf9a165408737e11191393fe695c1ebc7a5429]=3750469994332;\r\nemit Transfer(address(0x0), 0xafaf9a165408737e11191393fe695c1ebc7a5429, 3750469994332);\r\nbalances[0x5329fcc196c445009aac138b22d25543ed195888]=126671028590;\r\nemit Transfer(address(0x0), 0x5329fcc196c445009aac138b22d25543ed195888, 126671028590);\r\nbalances[0xa5b3725e37431dc6a103961749cb9c98954202cd]=446006353130;\r\nemit Transfer(address(0x0), 0xa5b3725e37431dc6a103961749cb9c98954202cd, 446006353130);\r\nbalances[0xb8ab7387076f022c28481fafb28911ce4377e0ea]=3045242779146;\r\nemit Transfer(address(0x0), 0xb8ab7387076f022c28481fafb28911ce4377e0ea, 3045242779146);\r\nbalances[0xd2470aacd96242207f06111819111d17ca055dfb]=957900008429;\r\nemit Transfer(address(0x0), 0xd2470aacd96242207f06111819111d17ca055dfb, 957900008429);\r\nbalances[0x1fca39ed4f19edd12eb274dc467c099eb5106a13]=278753970706;\r\nemit Transfer(address(0x0), 0x1fca39ed4f19edd12eb274dc467c099eb5106a13, 278753970706);\r\nbalances[0x8d12a197cb00d4747a1fe03395095ce2a5cc6819]=4743885756029;\r\nemit Transfer(address(0x0), 0x8d12a197cb00d4747a1fe03395095ce2a5cc6819, 4743885756029);\r\nbalances[0x2a23527a6dbafae390514686d50f47747d01e44d]=652376852116;\r\nemit Transfer(address(0x0), 0x2a23527a6dbafae390514686d50f47747d01e44d, 652376852116);\r\nbalances[0x371e31169df00563eafab334c738e66dd0476a8f]=226377928506;\r\nemit Transfer(address(0x0), 0x371e31169df00563eafab334c738e66dd0476a8f, 226377928506);\r\nbalances[0x40ea0a2abc9479e51e411870cafd759cb110c258]=30282012248;\r\nemit Transfer(address(0x0), 0x40ea0a2abc9479e51e411870cafd759cb110c258, 30282012248);\r\nbalances[0xe585ba86b84283f0f1118041837b06d03b96885e]=170791;\r\nemit Transfer(address(0x0), 0xe585ba86b84283f0f1118041837b06d03b96885e, 170791);\r\nbalances[0xbede88c495132efb90b5039bc2942042e07814df]=40513641855;\r\nemit Transfer(address(0x0), 0xbede88c495132efb90b5039bc2942042e07814df, 40513641855);\r\n        \r\n\r\n\r\n// test lines \r\n//balances[msg.sender] = 21000 * (10 ** uint(decimals));\r\n//timer[msg.sender ] = ( now - ( 1 years));\r\n\r\n    }\r\n\r\n\r\n        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\r\n            bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\r\n            if (digest != challenge_digest) revert();\r\n            if(uint256(digest) > miningTarget) revert();\r\n             bytes32 solution = solutionForChallenge[challengeNumber];\r\n             solutionForChallenge[challengeNumber] = digest;\r\n             if(solution != 0x0) revert();  //prevent the same answer from awarding twice\r\n             _claimTokens(msg.sender);\r\n             timer[msg.sender]=now;\r\n            uint reward_amount = getMiningReward();\r\n            balances[msg.sender] = balances[msg.sender].add(reward_amount);\r\n            tokensMinted = tokensMinted.add(reward_amount);\r\n            assert(tokensMinted <= maxSupplyForEra);\r\n            lastRewardTo = msg.sender;\r\n            lastRewardAmount = reward_amount;\r\n            lastRewardEthBlockNumber = block.number;\r\n             _startNewMiningEpoch();\r\n              emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\r\n              emit Transfer(address(0x0), msg.sender, reward_amount);\r\n           return true;\r\n        }\r\n\r\n    function _startNewMiningEpoch() internal {\r\n      if( tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39)\r\n      {\r\n        rewardEra = rewardEra + 1;\r\n      }\r\n      maxSupplyForEra = _totalSupply/10 - _totalSupply.div( 20**(rewardEra + 1));\r\n      epochCount = epochCount.add(1);\r\n      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\r\n      {\r\n        _reAdjustDifficulty();\r\n      }\r\n      challengeNumber = block.blockhash(block.number - 1);\r\n    }\r\n\r\n    function _reAdjustDifficulty() internal {\r\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\r\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT; \r\n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60; //should be 60 times slower than ethereum\r\n        if( ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod )\r\n        {\r\n          uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\r\n          uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\r\n          miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));   //by up to 50 %\r\n        }else{\r\n          uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\r\n          uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000); //always between 0 and 1000\r\n          miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));   //by up to 50 %\r\n        }\r\n        latestDifficultyPeriodStarted = block.number;\r\n        if(miningTarget < _MINIMUM_TARGET) //very difficult\r\n        {\r\n          miningTarget = _MINIMUM_TARGET;\r\n        }\r\n        if(miningTarget > _MAXIMUM_TARGET) //very easy\r\n        {\r\n          miningTarget = _MAXIMUM_TARGET;\r\n        }\r\n    }\r\n\r\n    function getChallengeNumber() public constant returns (bytes32) {\r\n        return challengeNumber;\r\n    }\r\n\r\n    function getMiningDifficulty() public constant returns (uint) {\r\n        return _MAXIMUM_TARGET.div(miningTarget);\r\n    }\r\n\r\n    function getMiningTarget() public constant returns (uint) {\r\n       return miningTarget;\r\n   }\r\n\r\n    function getMiningReward() public constant returns (uint) {\r\n         return (50 * 10**uint(decimals) ).div( 2**rewardEra ) ;\r\n    }\r\n\r\n    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\r\n        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\r\n        return digest;\r\n      }\r\n      \r\n      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\r\n          bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\r\n          if(uint256(digest) > testTarget) revert();\r\n          return (digest == challenge_digest);\r\n        }\r\n\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner] + _getPoS(tokenOwner); // add unclaimed pos tokens \r\n    }\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        _claimTokens(msg.sender);\r\n        _claimTokens(to);\r\n        timer[msg.sender] = now;\r\n        timer[to] = now;\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        _claimTokens(from);\r\n        _claimTokens(to);\r\n        timer[from] = now;\r\n        timer[to] = now;\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function () public payable {\r\n        revert();\r\n    } \r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    \r\n    function claimTokens() public {\r\n        _claimTokens(msg.sender);        \r\n        timer[msg.sender] = now;\r\n    }\r\n    \r\n    function _claimTokens(address target) internal{\r\n        if (timer[target] == 0){\r\n            // russian hackers BTFO\r\n\r\n            if (balances[target] > 0){\r\n                // timer is handled in _getPoS \r\n            }\r\n            else{\r\n                return;\r\n            }\r\n        }\r\n        if (timer[target] == now){\r\n            // 0 seconds passed, 0 tokens gotten via PoS \r\n            // return so no gas waste \r\n            return;\r\n        }\r\n        \r\n        uint256 totalTkn = _getPoS(target);\r\n        if (totalTkn > 0){\r\n            balances[target] = balances[target].add(totalTkn);\r\n            //_totalSupply.add(totalTkn); total supply is fixed \r\n            emit PoS(target, totalTkn);\r\n        }\r\n\r\n        //timer[target] = now; every time you claim tokens this timer is set. this is to prevent people claiming 0 tokens and then setting their timer\r\n        emit Transfer(address(0x0), target, totalTkn);\r\n    }\r\n    \r\n    function getStakingRequirementTime(address target, uint256 TIME) view returns (uint256){\r\n\r\n\r\n\r\n            return (stakingRequirement * fixedExp(((int(GLOBAL_START_TIMER) - int(TIME)) * one) / int(timerUnit)))/uint(one) ; \r\n\r\n    }\r\n    \r\n    function getRequirementTime(address target) view returns (uint256) {\r\n        uint256 balance = balances[target];\r\n        int ONE = 0x10000000000000000;\r\n        if (balance == 0){\r\n            return (uint256(0) - 1); // inf \r\n        }\r\n        uint TIME = timer[target];\r\n        if (TIME == 0){\r\n            TIME = GLOBAL_START_TIMER;\r\n        }\r\n        \r\n        int ln = fixedLog((balance * uint(one)) / stakingRequirement);\r\n        int mul = (int(timerUnit) * ln) / (int(one));\r\n        uint pos = uint( -mul);\r\n        \r\n        \r\n        return (pos + GLOBAL_START_TIMER);\r\n    }\r\n    \r\n    function GetStakingNow() view returns (uint256){\r\n        return (stakingRequirement * fixedExp(((int(GLOBAL_START_TIMER) - int(now)) * one) / int(timerUnit)))/uint(one) ; \r\n    }\r\n    \r\n\r\n    \r\n    \r\n    function _getPoS(address target) internal view returns (uint256){\r\n        if (balances[target] == 0){\r\n            return 0;\r\n        }\r\n        int ONE_SECOND = 0x10000000000000000;\r\n        uint TIME = timer[target];\r\n        if (TIME == 0){\r\n            TIME = GLOBAL_START_TIMER;\r\n        }\r\n        if (balances[target] < getStakingRequirementTime(target, TIME)){\r\n            // staking requirement was too low at update \r\n            // maybe it has since surpassed the requirement? \r\n            uint flipTime = getRequirementTime(target);\r\n            if ( now > flipTime ){\r\n                TIME = flipTime;\r\n            }\r\n            else{\r\n                return 0;\r\n            }\r\n        }\r\n        int PORTION_SCALED = ( (int(GLOBAL_START_TIMER) - int(TIME)) * ONE_SECOND) / int(stakeUnit); \r\n        uint256 exp = fixedExp(PORTION_SCALED);\r\n        \r\n        PORTION_SCALED = ( (int(GLOBAL_START_TIMER) - int(now)) * ONE_SECOND) / int(stakeUnit); \r\n        uint256 exp2 = fixedExp(PORTION_SCALED);\r\n        \r\n        uint256 MULT = (9 * (exp.sub(exp2)) * (balances[target])) / (uint(one)); \r\n        \r\n\r\n        \r\n        return (MULT);\r\n    }\r\n    \r\n    \r\n    \r\n    int256 constant ln2       = 0x0b17217f7d1cf79ac;\r\n    int256 constant ln2_64dot5= 0x2cb53f09f05cc627c8;\r\n    int256 constant one       = 0x10000000000000000;\r\n    int256 constant c2 =  0x02aaaaaaaaa015db0;\r\n    int256 constant c4 = -0x000b60b60808399d1;\r\n    int256 constant c6 =  0x0000455956bccdd06;\r\n    int256 constant c8 = -0x000001b893ad04b3a;\r\n    uint256 constant sqrt2    = 0x16a09e667f3bcc908;\r\n    uint256 constant sqrtdot5 = 0x0b504f333f9de6484;\r\n    int256 constant c1        = 0x1ffffffffff9dac9b;\r\n    int256 constant c3        = 0x0aaaaaaac16877908;\r\n    int256 constant c5        = 0x0666664e5e9fa0c99;\r\n    int256 constant c7        = 0x049254026a7630acf;\r\n    int256 constant c9        = 0x038bd75ed37753d68;\r\n    int256 constant c11       = 0x03284a0c14610924f;\r\n    function fixedExp(int256 a) public pure returns (uint256 exp) {\r\n        int256 scale = (a + (ln2_64dot5)) / ln2 - 64;\r\n        a -= scale*ln2;\r\n        // The polynomial R = 2 + c2*x^2 + c4*x^4 + ...\r\n        // approximates the function x*(exp(x)+1)/(exp(x)-1)\r\n        // Hence exp(x) = (R(x)+x)/(R(x)-x)\r\n        int256 z = (a*a) / one;\r\n        int256 R = ((int256)(2) * one) +\r\n            (z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);\r\n        exp = (uint256) (((R + a) * one) / (R - a));\r\n        if (scale >= 0)\r\n            exp <<= scale;\r\n        else\r\n            exp >>= -scale;\r\n        return exp;\r\n    }\r\n\r\n    function fixedLog(uint256 a) internal pure returns (int256 log) {\r\n        int32 scale = 0;\r\n        while (a > sqrt2) {\r\n            a /= 2;\r\n            scale++;\r\n        }\r\n        while (a <= sqrtdot5) {\r\n            a *= 2;\r\n            scale--;\r\n        }\r\n        int256 s = (((int256)(a) - one) * one) / ((int256)(a) + one);\r\n        // The polynomial R = c1*x + c3*x^3 + ... + c11 * x^11\r\n        // approximates the function log(1+x)-log(1-x)\r\n        // Hence R(s) = log((1+s)/(1-s)) = log(a)\r\n        var z = (s*s) / one;\r\n        return scale * ln2 +\r\n            (s*(c1 + (z*(c3 + (z*(c5 + (z*(c7 + (z*(c9 + (z*c11/one))\r\n                /one))/one))/one))/one))/one);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardEthBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningDifficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardEra\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChallengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupplyForEra\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardTo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetStakingNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"},{\"name\":\"testTarget\",\"type\":\"uint256\"}],\"name\":\"checkMintSolution\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MAXIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"}],\"name\":\"getMintDigest\",\"outputs\":[{\"name\":\"digesttest\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"TIME\",\"type\":\"uint256\"}],\"name\":\"getStakingRequirementTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_BLOCKS_PER_READJUSTMENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestDifficultyPeriodStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MINIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"int256\"}],\"name\":\"fixedExp\",\"outputs\":[{\"name\":\"exp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getRequirementTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"epochCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newChallengeNumber\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward_amount\",\"type\":\"uint256\"}],\"name\":\"PoS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Skorch","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d0ba7f7ed2eadd4840dbb112646dfd1d303c6a346decb8cea12c3dd076c57689"}]}