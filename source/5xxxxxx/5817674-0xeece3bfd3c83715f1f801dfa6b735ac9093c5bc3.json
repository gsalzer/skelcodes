{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract IInvestorList {\r\n    string public constant ROLE_REGD = \"regd\";\r\n    string public constant ROLE_REGCF = \"regcf\";\r\n    string public constant ROLE_REGS = \"regs\";\r\n    string public constant ROLE_UNKNOWN = \"unknown\";\r\n\r\n    function inList(address addr) public view returns (bool);\r\n    function addAddress(address addr, string role) public;\r\n    function getRole(address addr) public view returns (string);\r\n    function hasRole(address addr, string role) public view returns (bool);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Starts the 2-step process of changing ownership. The new owner\r\n     * must then call `acceptOwnership()`.\r\n     */\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Completes the process of transferring ownership to a new owner.\r\n     */\r\n    function acceptOwnership() public {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n            newOwner = 0;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract InvestorList is Ownable, IInvestorList {\r\n    event AddressAdded(address addr, string role);\r\n    event AddressRemoved(address addr, string role);\r\n\r\n    mapping (address => string) internal investorList;\r\n\r\n    /**\r\n     * @dev Throws if called by any account that's not investorListed.\r\n     * @param role string\r\n     */\r\n    modifier validRole(string role) {\r\n        require(\r\n            keccak256(bytes(role)) == keccak256(bytes(ROLE_REGD)) ||\r\n            keccak256(bytes(role)) == keccak256(bytes(ROLE_REGCF)) ||\r\n            keccak256(bytes(role)) == keccak256(bytes(ROLE_REGS)) ||\r\n            keccak256(bytes(role)) == keccak256(bytes(ROLE_UNKNOWN))\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter to determine if address is in investorList.\r\n     * @param addr address\r\n     * @return true if the address was added to the investorList, false if the address was already in the investorList\r\n     */\r\n    function inList(address addr)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (bytes(investorList[addr]).length != 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for address role if address is in list.\r\n     * @param addr address\r\n     * @return string for address role\r\n     */\r\n    function getRole(address addr)\r\n        public\r\n        view\r\n        returns (string)\r\n    {\r\n        require(inList(addr));\r\n        return investorList[addr];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a boolean indicating if the given address is in the list\r\n     *      with the given role.\r\n     * @param addr address to check\r\n     * @param role role to check\r\n     * @ return boolean for whether the address is in the list with the role\r\n     */\r\n    function hasRole(address addr, string role)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return keccak256(bytes(role)) == keccak256(bytes(investorList[addr]));\r\n    }\r\n\r\n    /**\r\n     * @dev Add single address to the investorList.\r\n     * @param addr address\r\n     * @param role string\r\n     */\r\n    function addAddress(address addr, string role)\r\n        onlyOwner\r\n        validRole(role)\r\n        public\r\n    {\r\n        investorList[addr] = role;\r\n        emit AddressAdded(addr, role);\r\n    }\r\n\r\n    /**\r\n     * @dev Add multiple addresses to the investorList.\r\n     * @param addrs addresses\r\n     * @param role string\r\n     */\r\n    function addAddresses(address[] addrs, string role)\r\n        onlyOwner\r\n        validRole(role)\r\n        public\r\n    {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            addAddress(addrs[i], role);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Remove single address from the investorList.\r\n     * @param addr address\r\n     */\r\n    function removeAddress(address addr)\r\n        onlyOwner\r\n        public\r\n    {\r\n        // removeRole(addr, ROLE_WHITELISTED);\r\n        require(inList(addr));\r\n        string memory role = investorList[addr];\r\n        investorList[addr] = \"\";\r\n        emit AddressRemoved(addr, role);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove multiple addresses from the investorList.\r\n     * @param addrs addresses\r\n     */\r\n    function removeAddresses(address[] addrs)\r\n        onlyOwner\r\n        public\r\n    {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            if (inList(addrs[i])) {\r\n                removeAddress(addrs[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\ninterface ISecuritySale {\r\n    function setLive(bool newLiveness) external;\r\n    function setInvestorList(address _investorList) external;\r\n}\r\n\r\ncontract SecuritySale is Ownable {\r\n\r\n    bool public live;        // sale is live right now\r\n    IInvestorList public investorList; // approved contributors\r\n\r\n    event SaleLive(bool liveness);\r\n    event EtherIn(address from, uint amount);\r\n    event StartSale();\r\n    event EndSale();\r\n\r\n    constructor() public {\r\n        live = false;\r\n    }\r\n\r\n    function setInvestorList(address _investorList) public onlyOwner {\r\n        investorList = IInvestorList(_investorList);\r\n    }\r\n\r\n    function () public payable {\r\n        require(live);\r\n        require(investorList.inList(msg.sender));\r\n        emit EtherIn(msg.sender, msg.value);\r\n    }\r\n\r\n    // set liveness\r\n    function setLive(bool newLiveness) public onlyOwner {\r\n        if(live && !newLiveness) {\r\n            live = false;\r\n            emit EndSale();\r\n        }\r\n        else if(!live && newLiveness) {\r\n            live = true;\r\n            emit StartSale();\r\n        }\r\n    }\r\n\r\n    // withdraw all of the Ether to owner\r\n    function withdraw() public onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    // withdraw some of the Ether to owner\r\n    function withdrawSome(uint value) public onlyOwner {\r\n        require(value <= address(this).balance);\r\n        msg.sender.transfer(value);\r\n    }\r\n\r\n    // withdraw tokens to owner\r\n    function withdrawTokens(address token) public onlyOwner {\r\n        ERC20Basic t = ERC20Basic(token);\r\n        require(t.transfer(msg.sender, t.balanceOf(this)));\r\n    }\r\n\r\n    // send received tokens to anyone\r\n    function sendReceivedTokens(address token, address sender, uint amount) public onlyOwner {\r\n        ERC20Basic t = ERC20Basic(token);\r\n        require(t.transfer(sender, amount));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_investorList\",\"type\":\"address\"}],\"name\":\"setInvestorList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendReceivedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawSome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newLiveness\",\"type\":\"bool\"}],\"name\":\"setLive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"liveness\",\"type\":\"bool\"}],\"name\":\"SaleLive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EndSale\",\"type\":\"event\"}]","ContractName":"SecuritySale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8fa54ee85952e4249bd172d98c65eabbce6898b4a6e06f0bd99a7060b71252eb"}]}