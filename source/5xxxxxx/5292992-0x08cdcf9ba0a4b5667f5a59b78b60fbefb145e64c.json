{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\ncontract ERC721 {\r\n    // Required methods\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function implementsERC721() public pure returns (bool);\r\n    function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n    function takeOwnership(uint256 _tokenId) public;\r\n    function totalSupply() public view returns (uint256 total);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n}\r\n\r\ncontract WorldCupToken is ERC721 {\r\n\r\n    /*****------ EVENTS -----*****/\r\n    // @dev whenever a token is sold.\r\n    event WorldCupTokenWereSold(address indexed curOwner, uint256 indexed tokenId, uint256 oldPrice, uint256 newPrice, address indexed prevOwner, uint256 traddingTime);//indexed\r\n    // @dev whenever Share Bonus.\r\n\tevent ShareBonus(address indexed toOwner, uint256 indexed tokenId, uint256 indexed traddingTime, uint256 remainingAmount);\r\n\t// @dev Present. \r\n    event Present(address indexed fromAddress, address indexed toAddress, uint256 amount, uint256 presentTime);\r\n    // @dev Transfer event as defined in ERC721. \r\n    event Transfer(address from, address to, uint256 tokenId);\r\n\r\n    /*****------- CONSTANTS -------******/\r\n    mapping (uint256 => address) public worldCupIdToOwnerAddress;  //@dev A mapping from world cup team id to the address that owns them. \r\n    mapping (address => uint256) private ownerAddressToTokenCount; //@dev A mapping from owner address to count of tokens that address owns.\r\n    mapping (uint256 => address) public worldCupIdToAddressForApproved; // @dev A mapping from token id to an address that has been approved to call.\r\n    mapping (uint256 => uint256) private worldCupIdToPrice; // @dev A mapping from token id to the price of the token.\r\n    //mapping (uint256 => uint256) private worldCupIdToOldPrice; // @dev A mapping from token id to the old price of the token.\r\n    string[] private worldCupTeamDescribe;\r\n\tuint256 private SHARE_BONUS_TIME = uint256(now);\r\n    address public ceoAddress;\r\n    address public cooAddress;\r\n\r\n    /*****------- MODIFIERS -------******/\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cooAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setCEO(address _newCEO) public onlyCEO {\r\n        require(_newCEO != address(0));\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    function setCOO(address _newCOO) public onlyCEO {\r\n        require(_newCOO != address(0));\r\n        cooAddress = _newCOO;\r\n    }\r\n\t\r\n\tfunction destroy() public onlyCEO {\r\n\t\tselfdestruct(ceoAddress);\r\n    }\r\n\t\r\n\tfunction payAllOut() public onlyCLevel {\r\n       ceoAddress.transfer(this.balance);\r\n    }\r\n\r\n    /*****------- CONSTRUCTOR -------******/\r\n    function WorldCupToken() public {\r\n        ceoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n\t    for (uint256 i = 0; i < 32; i++) {\r\n\t\t    uint256 newWorldCupTeamId = worldCupTeamDescribe.push(\"I love world cup!\") - 1;\r\n            worldCupIdToPrice[newWorldCupTeamId] = 0 ether;//SafeMath.sub(uint256(3.2 ether), SafeMath.mul(uint256(0.1 ether), i));\r\n\t        //worldCupIdToOldPrice[newWorldCupTeamId] = 0 ether;\r\n            _transfer(address(0), msg.sender, newWorldCupTeamId);\r\n\t    }\r\n    }\r\n\r\n    /*****------- PUBLIC FUNCTIONS -------******/\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        require(_isOwner(msg.sender, _tokenId));\r\n        worldCupIdToAddressForApproved[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// For querying balance of a particular account\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return ownerAddressToTokenCount[_owner];\r\n    }\r\n\r\n    /// @notice Returns all the world cup team information by token id.\r\n    function getWorlCupByID(uint256 _tokenId) public view returns (string wctDesc, uint256 sellingPrice, address owner) {\r\n        wctDesc = worldCupTeamDescribe[_tokenId];\r\n        sellingPrice = worldCupIdToPrice[_tokenId];\r\n        owner = worldCupIdToOwnerAddress[_tokenId];\r\n    }\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /// @dev Required for ERC-721 compliance.\r\n    function name() public pure returns (string) {\r\n        return \"WorldCupToken\";\r\n    }\r\n  \r\n    /// @dev Required for ERC-721 compliance.\r\n    function symbol() public pure returns (string) {\r\n        return \"WCT\";\r\n    }\r\n\r\n    // @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\r\n        owner = worldCupIdToOwnerAddress[_tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n  \r\n    function setWorldCupTeamDesc(uint256 _tokenId, string descOfOwner) public {\r\n        if(ownerOf(_tokenId) == msg.sender){\r\n\t        worldCupTeamDescribe[_tokenId] = descOfOwner;\r\n\t    }\r\n    }\r\n\r\n\t/// Allows someone to send ether and obtain the token\r\n    ///function PresentToCEO() public payable {\r\n\t///    ceoAddress.transfer(msg.value);\r\n\t///\tPresent(msg.sender, ceoAddress, msg.value, uint256(now));\r\n\t///}\r\n\t\r\n    // Allows someone to send ether and obtain the token\r\n    function buyWorldCupTeamToken(uint256 _tokenId) public payable {\r\n        address oldOwner = worldCupIdToOwnerAddress[_tokenId];\r\n        address newOwner = msg.sender;\r\n        require(oldOwner != newOwner); // Make sure token owner is not sending to self\r\n        require(_addressNotNull(newOwner)); //Safety check to prevent against an unexpected 0x0 default.\r\n\r\n\t    uint256 oldSoldPrice = worldCupIdToPrice[_tokenId];//worldCupIdToOldPrice[_tokenId];\r\n\t    uint256 diffPrice = SafeMath.sub(msg.value, oldSoldPrice);\r\n\t    uint256 priceOfOldOwner = SafeMath.add(oldSoldPrice, SafeMath.div(diffPrice, 2));\r\n\t    uint256 priceOfDevelop = SafeMath.div(diffPrice, 4);\r\n\t    worldCupIdToPrice[_tokenId] = msg.value;//SafeMath.add(msg.value, SafeMath.div(msg.value, 10));\r\n\t    //worldCupIdToOldPrice[_tokenId] = msg.value;\r\n\r\n        _transfer(oldOwner, newOwner, _tokenId);\r\n        if (oldOwner != address(this)) {\r\n\t        oldOwner.transfer(priceOfOldOwner);\r\n        }\r\n\t    ceoAddress.transfer(priceOfDevelop);\r\n\t    if(this.balance >= uint256(3.2 ether)){\r\n            if((uint256(now) - SHARE_BONUS_TIME) >= 86400){\r\n\t\t        for(uint256 i=0; i<32; i++){\r\n\t\t            worldCupIdToOwnerAddress[i].transfer(0.1 ether);\r\n\t\t\t\t\tShareBonus(worldCupIdToOwnerAddress[i], i, uint256(now), this.balance);\r\n\t\t        }\r\n\t\t\t    SHARE_BONUS_TIME = uint256(now);\r\n\t\t\t    //ShareBonus(SHARE_BONUS_TIME, this.balance);\r\n\t\t    }\r\n\t    }\r\n\t    WorldCupTokenWereSold(newOwner, _tokenId, oldSoldPrice, msg.value, oldOwner, uint256(now));\r\n\t}\r\n\r\n    function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n        return worldCupIdToPrice[_tokenId];\r\n    }\r\n\r\n    /// @dev Required for ERC-721 compliance.\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        address newOwner = msg.sender;\r\n        address oldOwner = worldCupIdToOwnerAddress[_tokenId];\r\n\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_addressNotNull(newOwner));\r\n\r\n        // Making sure transfer is approved\r\n        require(_approved(newOwner, _tokenId));\r\n\r\n        _transfer(oldOwner, newOwner, _tokenId);\r\n    }\r\n\r\n    function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n        if (tokenCount == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalCars = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            uint256 carId;\r\n            for (carId = 0; carId <= totalCars; carId++) {\r\n                if (worldCupIdToOwnerAddress[carId] == _owner) {\r\n                    result[resultIndex] = carId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n  \r\n    function getCEO() public view returns (address ceoAddr) {\r\n        return ceoAddress;\r\n    }\r\n\r\n    //Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint256 total) {\r\n        return worldCupTeamDescribe.length;\r\n    }\r\n  \r\n    //return BonusPool $\r\n    function getBonusPool() public view returns (uint256) {\r\n        return this.balance;\r\n    }\r\n  \r\n    function getTimeFromPrize() public view returns (uint256) {\r\n        return uint256(now) - SHARE_BONUS_TIME;\r\n    }\r\n\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(address _to, uint256 _tokenId) public {\r\n        require(_isOwner(msg.sender, _tokenId));\r\n        require(_addressNotNull(_to));\r\n\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n        require(_isOwner(_from, _tokenId));\r\n        require(_approved(_to, _tokenId));\r\n        require(_addressNotNull(_to));\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /********----------- PRIVATE FUNCTIONS ------------********/\r\n    function _addressNotNull(address _to) private pure returns (bool) {\r\n        return _to != address(0);\r\n    }\r\n\r\n    function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n        return worldCupIdToAddressForApproved[_tokenId] == _to;\r\n    }\r\n\r\n    function _isOwner(address checkAddress, uint256 _tokenId) private view returns (bool) {\r\n        return checkAddress == worldCupIdToOwnerAddress[_tokenId];\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n        ownerAddressToTokenCount[_to]++;\r\n        worldCupIdToOwnerAddress[_tokenId] = _to;  //transfer ownership\r\n\r\n        if (_from != address(0)) {\r\n            ownerAddressToTokenCount[_from]--;\r\n            delete worldCupIdToAddressForApproved[_tokenId];\r\n        }\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyWorldCupTeamToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payAllOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCEO\",\"outputs\":[{\"name\":\"ceoAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonusPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"worldCupIdToOwnerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"descOfOwner\",\"type\":\"string\"}],\"name\":\"setWorldCupTeamDesc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getWorlCupByID\",\"outputs\":[{\"name\":\"wctDesc\",\"type\":\"string\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"worldCupIdToAddressForApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeFromPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"curOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"traddingTime\",\"type\":\"uint256\"}],\"name\":\"WorldCupTokenWereSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"toOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"traddingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"name\":\"ShareBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"presentTime\",\"type\":\"uint256\"}],\"name\":\"Present\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WorldCupToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4c86bc91404bbeb31b622130f9a9075f670b371ec1b6cbb44223c0355deea1a5"}]}