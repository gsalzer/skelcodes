{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract Manifesto {\r\n\r\n  struct Vote {\r\n    address sender; \r\n    bool vote; \r\n    string message;\r\n  } \r\n\r\n  uint public votesSupport;\r\n  uint public votesDecline;\r\n\r\n  mapping(address => Vote) public votesArr;\r\n  \r\n  event Voted(address _sender, bool _vote, string _message);\r\n\r\n  function set(bool _vote, string _message) public {\r\n\r\n    Vote storage voteEl = votesArr[msg.sender];\r\n\r\n    if (voteEl.sender != 0) {\r\n      if (voteEl.vote != _vote) {\r\n        if (_vote) {\r\n          votesSupport += 1;\r\n          votesDecline -= 1;\r\n        } else {\r\n          votesSupport -= 1;\r\n          votesDecline += 1;\r\n        }\r\n      }\r\n    } else {\r\n      if (_vote) {\r\n        votesSupport += 1;\r\n      } else {\r\n        votesDecline += 1;\r\n      }\r\n    } \r\n\r\n    voteEl.sender = msg.sender;\r\n    voteEl.vote = _vote;\r\n    voteEl.message = _message;\r\n    Voted(msg.sender, _vote, _message);\r\n\r\n  }\r\n\r\n  function get(address _addr) view public returns (bool r_vote, string r_message) {\r\n    r_vote = votesArr[_addr].vote;\r\n    r_message = votesArr[_addr].message;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"votesSupport\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vote\",\"type\":\"bool\"},{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"votesArr\",\"outputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"vote\",\"type\":\"bool\"},{\"name\":\"message\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"r_vote\",\"type\":\"bool\"},{\"name\":\"r_message\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votesDecline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_vote\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"Voted\",\"type\":\"event\"}]","ContractName":"Manifesto","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://388e42c0fceefc60e94d5bfe2652c36dbfcc2826183799f54b3527de3cfb18f8"}]}