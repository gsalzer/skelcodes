{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title IHFVesting\r\n * @dev IHFVesting is a token holder contract that allows the specified beneficiary\r\n * to claim stored tokens after 6 month intervals\r\n*/\r\n\r\n contract IHFVesting {\r\n    using SafeMath for uint256;\r\n\r\n    address public beneficiary;\r\n    uint256 public fundingEndBlock;\r\n\r\n    bool private initClaim = false; // state tracking variables\r\n\r\n    uint256 public firstRelease; // vesting times\r\n    bool private firstDone = false;\r\n    uint256 public secondRelease;\r\n    bool private secondDone = false;\r\n    uint256 public thirdRelease;\r\n    bool private thirdDone = false;\r\n    uint256 public fourthRelease;\r\n\r\n    ERC20Basic public ERC20Token; // ERC20 basic token contract to hold\r\n\r\n    enum Stages {\r\n        initClaim,\r\n        firstRelease,\r\n        secondRelease,\r\n        thirdRelease,\r\n        fourthRelease\r\n    }\r\n\r\n    Stages public stage = Stages.initClaim;\r\n\r\n    modifier atStage(Stages _stage) {\r\n        if(stage == _stage) _;\r\n    }\r\n\r\n    function IHFVesting(address _token, uint256 fundingEndBlockInput) public {\r\n        require(_token != address(0));\r\n        beneficiary = msg.sender;\r\n        fundingEndBlock = fundingEndBlockInput;\r\n        ERC20Token = ERC20Basic(_token);\r\n    }\r\n\r\n    function changeBeneficiary(address newBeneficiary) external {\r\n        require(newBeneficiary != address(0));\r\n        require(msg.sender == beneficiary);\r\n        beneficiary = newBeneficiary;\r\n    }\r\n\r\n    function updateFundingEndBlock(uint256 newFundingEndBlock) public {\r\n        require(msg.sender == beneficiary);\r\n        require(block.number < fundingEndBlock);\r\n        require(block.number < newFundingEndBlock);\r\n        fundingEndBlock = newFundingEndBlock;\r\n    }\r\n\r\n    function checkBalance() public view returns (uint256 tokenBalance) {\r\n        return ERC20Token.balanceOf(this);\r\n    }\r\n\r\n    // in total 2.5% of IHF tokens will be sent to this contract\r\n    // INVICTUS: 1%\r\n    // TEAM: 1.5%\r\n    //  initalPaymen: 0.3%\r\n    //  firstRelease: 0.3%\r\n    //  secondRelease: 0.3%\r\n    //  thirdRelease: 0.3%\r\n    //  fourthRelease: 0.3%\r\n    // initial claim is Invictus + initial team payment\r\n    // initial claim is thus (1 + 0.3)/2.5 = 52% of C20 tokens sent here\r\n    // each other release (for team) is 12% of tokens sent here\r\n\r\n    function claim() external {\r\n        require(msg.sender == beneficiary);\r\n        require(block.number > fundingEndBlock);\r\n        uint256 balance = ERC20Token.balanceOf(this);\r\n        // in reverse order so stages changes don't carry within one claim\r\n        fourth_release(balance);\r\n        third_release(balance);\r\n        second_release(balance);\r\n        first_release(balance);\r\n        init_claim(balance);\r\n    }\r\n\r\n    function nextStage() private {\r\n        stage = Stages(uint256(stage) + 1);\r\n    }\r\n\r\n    function init_claim(uint256 balance) private atStage(Stages.initClaim) {\r\n        firstRelease = now + 26 weeks; // assign 4 claiming times\r\n        secondRelease = firstRelease + 26 weeks;\r\n        thirdRelease = secondRelease + 26 weeks;\r\n        fourthRelease = thirdRelease + 26 weeks;\r\n        uint256 amountToTransfer = balance.mul(52).div(100);\r\n        ERC20Token.transfer(beneficiary, amountToTransfer); // now 48% tokens left\r\n        nextStage();\r\n    }\r\n    function first_release(uint256 balance) private atStage(Stages.firstRelease) {\r\n        require(now > firstRelease);\r\n        uint256 amountToTransfer = balance.div(4);\r\n        ERC20Token.transfer(beneficiary, amountToTransfer); // send 25 % of team releases\r\n        nextStage();\r\n    }\r\n    function second_release(uint256 balance) private atStage(Stages.secondRelease) {\r\n        require(now > secondRelease);\r\n        uint256 amountToTransfer = balance.div(3);\r\n        ERC20Token.transfer(beneficiary, amountToTransfer); // send 25 % of team releases\r\n        nextStage();\r\n    }\r\n    function third_release(uint256 balance) private atStage(Stages.thirdRelease) {\r\n        require(now > thirdRelease);\r\n        uint256 amountToTransfer = balance.div(2);\r\n        ERC20Token.transfer(beneficiary, amountToTransfer); // send 25 % of team releases\r\n        nextStage();\r\n    }\r\n    function fourth_release(uint256 balance) private atStage(Stages.fourthRelease) {\r\n        require(now > fourthRelease);\r\n        ERC20Token.transfer(beneficiary, balance); // send remaining 25 % of team releases\r\n    }\r\n\r\n    function claimOtherTokens(address _token) external {\r\n        require(msg.sender == beneficiary);\r\n        require(_token != address(0));\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        require(token != ERC20Token);\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(beneficiary, balance);\r\n     }\r\n\r\n }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimOtherTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fourthRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFundingEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateFundingEndBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"fundingEndBlockInput\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"IHFVesting","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000af1250fa68d7decd34fd75de8742bc03b29bd58e0000000000000000000000000000000000000000000000000000000000989680","Library":"","SwarmSource":"bzzr://ff179b255e0871ac7b1d920615b9e72d964dc55a67481a722c8ac068a6869f2a"}]}