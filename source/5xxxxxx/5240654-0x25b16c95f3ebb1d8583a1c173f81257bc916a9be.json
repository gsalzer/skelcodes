{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant returns (uint256);\r\n    function transfer(address to, uint256 value) returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool);\r\n    function approve(address spender, uint256 value) returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n *\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner public returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\n/*\r\n * Company reserve pool where the tokens will be locked for two years\r\n * @title Company token reserve\r\n */\r\ncontract AdviserTimeLock is Ownable{\r\n\r\n    SignalsToken token;\r\n    uint256 withdrawn;\r\n    uint start;\r\n\r\n    event TokensWithdrawn(address owner, uint amount);\r\n\r\n    /*\r\n     * Constructor changing owner to owner multisig & setting time lock\r\n     * @param address of the Signals Token contract\r\n     * @param address of the owner multisig\r\n     */\r\n    function AdviserTimeLock(address _token, address _owner) public{\r\n        token = SignalsToken(_token);\r\n        owner = _owner;\r\n        start = now;\r\n    }\r\n\r\n    /*\r\n     * Only function for periodical tokens withdrawal (with monthly allowance)\r\n     * @dev Will withdraw the whole allowance;\r\n     */\r\n    function withdraw() onlyOwner public {\r\n        require(now - start >= 25920000);\r\n        uint toWithdraw = canWithdraw();\r\n        token.transfer(owner, toWithdraw);\r\n        withdrawn += toWithdraw;\r\n        TokensWithdrawn(owner, toWithdraw);\r\n    }\r\n\r\n    /*\r\n     * Only function for the tokens withdrawal (with two years time lock)\r\n     * @dev Based on division down rounding\r\n     */\r\n    function canWithdraw() public view returns (uint256) {\r\n        uint256 sinceStart = now - start;\r\n        uint256 allowed = (sinceStart/2592000)*504546000000000;\r\n        uint256 toWithdraw;\r\n        if (allowed > token.balanceOf(address(this))) {\r\n            toWithdraw = token.balanceOf(address(this));\r\n        } else {\r\n            toWithdraw = allowed - withdrawn;\r\n        }\r\n        return toWithdraw;\r\n    }\r\n\r\n    /*\r\n     * Function to clean up the state and moved not allocated tokens to custody\r\n     */\r\n    function cleanUp() onlyOwner public {\r\n        require(token.balanceOf(address(this)) == 0);\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n/*\r\n * Pre-allocation pool for company advisers\r\n * @title Advisory pool\r\n */\r\ncontract AdvisoryPool is Ownable{\r\n\r\n    SignalsToken token;\r\n\r\n    /*\r\n     * @dev constant addresses of all advisers\r\n     */\r\n    address constant ADVISER1 = 0x7915D5A865FE68C63112be5aD3DCA5187EB08f24;\r\n    address constant ADVISER2 = 0x31cFF39AA68B91fa7C957272A6aA8fB8F7b69Cb0;\r\n    address constant ADVISER3 = 0x358b3aeec9fae5ab15fe28d2fe6c7c9fda596857;\r\n    address constant ADVISER4 = 0x1011FC646261eb5d4aB875886f1470d4919d83c8;\r\n    address constant ADVISER5 = 0xcc04Cd98da89A9172372aEf4B62BEDecd01A7F5a;\r\n    address constant ADVISER6 = 0xECD791f8E548D46A9711D853Ead7edC685Ca4ee8;\r\n    address constant ADVISER7 = 0x38B58e5783fd4D077e422B3362E9d6B265484e3f;\r\n    address constant ADVISER8 = 0x2934205135A129F995AC891C143cCae83ce175c7;\r\n    address constant ADVISER9 = 0x9F5D00F4A383bAd14DEfA9aee53C5AF2ad9ad32F;\r\n    address constant ADVISER10 = 0xBE993c982Fc5a0C0360CEbcEf9e4d2727339d96B;\r\n    address constant ADVISER11 = 0xdf1E2126eB638335eFAb91a834db4c57Cbe18735;\r\n    address constant ADVISER12 = 0x8A404969Ad1BCD3F566A7796722f535eD9cA22b2;\r\n    address constant ADVISER13 = 0x066a8aD6fA94AC83e1AFB5Aa7Dc62eD1D2654bB2;\r\n    address constant ADVISER14 = 0xA1425Fa987d1b724306d93084b93D62F37482c4b;\r\n    address constant ADVISER15 = 0x4633515904eE5Bc18bEB70277455525e84a51e90;\r\n    address constant ADVISER16 = 0x230783Afd438313033b07D39E3B9bBDBC7817759;\r\n    address constant ADVISER17 = 0xe8b9b07c1cca9aE9739Cec3D53004523Ab206CAc;\r\n    address constant ADVISER18 = 0x0E73f16CfE7F545C0e4bB63A9Eef18De8d7B422d;\r\n    address constant ADVISER19 = 0x6B4c6B603ca72FE7dde971CF833a58415737826D;\r\n    address constant ADVISER20 = 0x823D3123254a3F9f9d3759FE3Fd7d15e21a3C5d8;\r\n    address constant ADVISER21 = 0x0E48bbc496Ae61bb790Fc400D1F1a57520f772Df;\r\n    address constant ADVISER22 = 0x06Ee8eCc0145CcaCEc829490e3c557f577BE0e85;\r\n    address constant ADVISER23 = 0xbE56bFF75A1cB085674Cc37a5C8746fF6C43C442;\r\n    address constant ADVISER24 = 0xb442b5297E4aEf19E489530E69dFef7fae27F4A5;\r\n    address constant ADVISER25 = 0x50EF1d6a7435C7FB3dB7c204b74EB719b1EE3dab;\r\n    address constant ADVISER26 = 0x3e9fed606822D5071f8a28d2c8B51E6964160CB2;\r\n\r\n    AdviserTimeLock public tokenLocker23;\r\n\r\n    /*\r\n     * Constructor changing owner to owner multisig & calling the allocation\r\n     * @param address of the Signals Token contract\r\n     * @param address of the owner multisig\r\n     */\r\n    function AdvisoryPool(address _token, address _owner) public {\r\n        owner = _owner;\r\n        token = SignalsToken(_token);\r\n    }\r\n\r\n    /*\r\n     * Allocation function, tokens get allocated from this contract as current token owner\r\n     * @dev only accessible from the constructor\r\n     */\r\n    function initiate() public onlyOwner {\r\n        require(token.balanceOf(address(this)) == 18500000000000000);\r\n        tokenLocker23 = new AdviserTimeLock(address(token), ADVISER23);\r\n\r\n        token.transfer(ADVISER1, 380952380000000);\r\n        token.transfer(ADVISER2, 380952380000000);\r\n        token.transfer(ADVISER3, 659200000000000);\r\n        token.transfer(ADVISER4, 95238100000000);\r\n        token.transfer(ADVISER5, 1850000000000000);\r\n        token.transfer(ADVISER6, 15384620000000);\r\n        token.transfer(ADVISER7, 62366450000000);\r\n        token.transfer(ADVISER8, 116805560000000);\r\n        token.transfer(ADVISER9, 153846150000000);\r\n        token.transfer(ADVISER10, 10683760000000);\r\n        token.transfer(ADVISER11, 114285710000000);\r\n        token.transfer(ADVISER12, 576923080000000);\r\n        token.transfer(ADVISER13, 76190480000000);\r\n        token.transfer(ADVISER14, 133547010000000);\r\n        token.transfer(ADVISER15, 96153850000000);\r\n        token.transfer(ADVISER16, 462500000000000);\r\n        token.transfer(ADVISER17, 462500000000000);\r\n        token.transfer(ADVISER18, 399865380000000);\r\n        token.transfer(ADVISER19, 20032050000000);\r\n        token.transfer(ADVISER20, 35559130000000);\r\n        token.transfer(ADVISER21, 113134000000000);\r\n        token.transfer(ADVISER22, 113134000000000);\r\n        token.transfer(address(tokenLocker23), 5550000000000000);\r\n        token.transfer(ADVISER23, 1850000000000000);\r\n        token.transfer(ADVISER24, 100000000000000);\r\n        token.transfer(ADVISER25, 100000000000000);\r\n        token.transfer(ADVISER26, 2747253000000000);\r\n\r\n    }\r\n\r\n    /*\r\n     * Clean up function for token loss prevention and cleaning up Ethereum blockchain\r\n     * @dev call to clean up the contract\r\n     */\r\n    function cleanUp() onlyOwner public {\r\n        uint256 notAllocated = token.balanceOf(address(this));\r\n        token.transfer(owner, notAllocated);\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n/*\r\n * Pre-allocation pool for the community, will be govern by a company multisig\r\n * @title Community pool\r\n */\r\ncontract CommunityPool is Ownable{\r\n\r\n    SignalsToken token;\r\n\r\n    event CommunityTokensAllocated(address indexed member, uint amount);\r\n\r\n    /*\r\n     * Constructor changing owner to owner multisig\r\n     * @param address of the Signals Token contract\r\n     * @param address of the owner multisig\r\n     */\r\n    function CommunityPool(address _token, address _owner) public{\r\n        token = SignalsToken(_token);\r\n        owner = _owner;\r\n    }\r\n\r\n    /*\r\n     * Function to alloc tokens to a community member\r\n     * @param address of community member\r\n     * @param uint amount units of tokens to be given away\r\n     */\r\n    function allocToMember(address member, uint amount) public onlyOwner {\r\n        require(amount > 0);\r\n        token.transfer(member, amount);\r\n        CommunityTokensAllocated(member, amount);\r\n    }\r\n\r\n    /*\r\n     * Clean up function\r\n     * @dev call to clean up the contract after all tokens were assigned\r\n     */\r\n    function clean() public onlyOwner {\r\n        require(token.balanceOf(address(this)) == 0);\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n/*\r\n * Company reserve pool where the tokens will be locked for two years\r\n * @title Company token reserve\r\n */\r\ncontract CompanyReserve is Ownable{\r\n\r\n    SignalsToken token;\r\n    uint256 withdrawn;\r\n    uint start;\r\n\r\n    /*\r\n     * Constructor changing owner to owner multisig & setting time lock\r\n     * @param address of the Signals Token contract\r\n     * @param address of the owner multisig\r\n     */\r\n    function CompanyReserve(address _token, address _owner) public {\r\n        token = SignalsToken(_token);\r\n        owner = _owner;\r\n        start = now;\r\n    }\r\n\r\n    event TokensWithdrawn(address owner, uint amount);\r\n\r\n    /*\r\n     * Only function for the tokens withdrawal (3% anytime, 5% after one year, 10% after two year)\r\n     * @dev Will withdraw the whole allowance;\r\n     */\r\n    function withdraw() onlyOwner public {\r\n        require(now - start >= 25920000);\r\n        uint256 toWithdraw = canWithdraw();\r\n        withdrawn += toWithdraw;\r\n        token.transfer(owner, toWithdraw);\r\n        TokensWithdrawn(owner, toWithdraw);\r\n    }\r\n\r\n    /*\r\n     * Checker function to find out how many tokens can be withdrawn.\r\n     * note: percentage of the token.totalSupply\r\n     * @dev Based on division down rounding\r\n     */\r\n    function canWithdraw() public view returns (uint256) {\r\n        uint256 sinceStart = now - start;\r\n        uint256 allowed;\r\n\r\n        if (sinceStart >= 0) {\r\n            allowed = 555000000000000;\r\n        } else if (sinceStart >= 31536000) { // one year difference\r\n            allowed = 1480000000000000;\r\n        } else if (sinceStart >= 63072000) { // two years difference\r\n            allowed = 3330000000000000;\r\n        } else {\r\n            return 0;\r\n        }\r\n        return allowed - withdrawn;\r\n    }\r\n\r\n    /*\r\n     * Function to clean up the state and moved not allocated tokens to custody\r\n     */\r\n    function cleanUp() onlyOwner public {\r\n        require(token.balanceOf(address(this)) == 0);\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Signals token\r\n * @dev Mintable token created for Signals.Network\r\n */\r\ncontract PresaleToken is PausableToken, MintableToken {\r\n\r\n    // Standard token variables\r\n    string constant public name = \"SGNPresaleToken\";\r\n    string constant public symbol = \"SGN\";\r\n    uint8 constant public decimals = 9;\r\n\r\n    event TokensBurned(address initiatior, address indexed _partner, uint256 _tokens);\r\n\r\n    /*\r\n     * Constructor which pauses the token at the time of creation\r\n     */\r\n    function PresaleToken() public {\r\n        pause();\r\n    }\r\n    /*\r\n    * @dev Token burn function to be called at the time of token swap\r\n    * @param _partner address to use for token balance buring\r\n    * @param _tokens uint256 amount of tokens to burn\r\n    */\r\n    function burnTokens(address _partner, uint256 _tokens) public onlyOwner {\r\n        require(balances[_partner] >= _tokens);\r\n\r\n        balances[_partner] -= _tokens;\r\n        totalSupply -= _tokens;\r\n        TokensBurned(msg.sender, _partner, _tokens);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Signals token\r\n * @dev Mintable token created for Signals.Network\r\n */\r\ncontract SignalsToken is PausableToken, MintableToken {\r\n\r\n    // Standard token variables\r\n    string constant public name = \"Signals Network Token\";\r\n    string constant public symbol = \"SGN\";\r\n    uint8 constant public decimals = 9;\r\n\r\n}\r\n\r\ncontract PrivateRegister is Ownable {\r\n\r\n    struct contribution {\r\n        bool approved;\r\n        uint8 extra;\r\n    }\r\n\r\n    mapping (address => contribution) verified;\r\n\r\n    event ApprovedInvestor(address indexed investor);\r\n    event BonusesRegistered(address indexed investor, uint8 extra);\r\n\r\n    /*\r\n     * Approve function to adjust allowance to investment of each individual investor\r\n     * @param _investor address sets the beneficiary for later use\r\n     * @param _referral address to pay a commission in token to\r\n     * @param _commission uint8 expressed as a number between 0 and 5\r\n    */\r\n    function approve(address _investor, uint8 _extra) onlyOwner public{\r\n        require(!isContract(_investor));\r\n        verified[_investor].approved = true;\r\n        if (_extra <= 100) {\r\n            verified[_investor].extra = _extra;\r\n            BonusesRegistered(_investor, _extra);\r\n        }\r\n        ApprovedInvestor(_investor);\r\n    }\r\n\r\n    /*\r\n     * Constant call to find out if an investor is registered\r\n     * @param _investor address to be checked\r\n     * @return bool is true is _investor was approved\r\n     */\r\n    function approved(address _investor) view public returns (bool) {\r\n        return verified[_investor].approved;\r\n    }\r\n\r\n    /*\r\n     * Constant call to find out the referral and commission to bound to an investor\r\n     * @param _investor address to be checked\r\n     * @return address of the referral, returns 0x0 if there is none\r\n     * @return uint8 commission to be paid out on any investment\r\n     */\r\n    function getBonuses(address _investor) view public returns (uint8 extra) {\r\n        return verified[_investor].extra;\r\n    }\r\n\r\n    /*\r\n     * Check if address is a contract to prevent contracts from participating the direct sale.\r\n     * @param addr address to be checked\r\n     * @return boolean of it is or isn't an contract address\r\n     * @credits Manuel Aráoz\r\n     */\r\n    function isContract(address addr) public view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n}\r\n\r\ncontract CrowdsaleRegister is Ownable {\r\n\r\n    struct contribution {\r\n        bool approved;\r\n        uint8 commission;\r\n        uint8 extra;\r\n    }\r\n\r\n    mapping (address => contribution) verified;\r\n\r\n    event ApprovedInvestor(address indexed investor);\r\n    event BonusesRegistered(address indexed investor, uint8 commission, uint8 extra);\r\n\r\n    /*\r\n     * Approve function to adjust allowance to investment of each individual investor\r\n     * @param _investor address sets the beneficiary for later use\r\n     * @param _referral address to pay a commission in token to\r\n     * @param _commission uint8 expressed as a number between 0 and 5\r\n    */\r\n    function approve(address _investor, uint8 _commission, uint8 _extra) onlyOwner public{\r\n        require(!isContract(_investor));\r\n        verified[_investor].approved = true;\r\n        if (_commission <= 15 && _extra <= 5) {\r\n            verified[_investor].commission = _commission;\r\n            verified[_investor].extra = _extra;\r\n            BonusesRegistered(_investor, _commission, _extra);\r\n        }\r\n        ApprovedInvestor(_investor);\r\n    }\r\n\r\n    /*\r\n     * Constant call to find out if an investor is registered\r\n     * @param _investor address to be checked\r\n     * @return bool is true is _investor was approved\r\n     */\r\n    function approved(address _investor) view public returns (bool) {\r\n        return verified[_investor].approved;\r\n    }\r\n\r\n    /*\r\n     * Constant call to find out the referral and commission to bound to an investor\r\n     * @param _investor address to be checked\r\n     * @return address of the referral, returns 0x0 if there is none\r\n     * @return uint8 commission to be paid out on any investment\r\n     */\r\n    function getBonuses(address _investor) view public returns (uint8 commission, uint8 extra) {\r\n        return (verified[_investor].commission, verified[_investor].extra);\r\n    }\r\n\r\n    /*\r\n     * Check if address is a contract to prevent contracts from participating the direct sale.\r\n     * @param addr address to be checked\r\n     * @return boolean of it is or isn't an contract address\r\n     * @credits Manuel Aráoz\r\n     */\r\n    function isContract(address addr) public view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\n *  Token pool for the presale tokens swap\r\n *  @title PresalePool\r\n *  @dev Requires to transfer ownership of both PresaleToken contracts to this contract\r\n */\r\ncontract PresalePool is Ownable {\r\n\r\n    PresaleToken public PublicPresale;\r\n    PresaleToken public PartnerPresale;\r\n    SignalsToken token;\r\n    CrowdsaleRegister registry;\r\n\r\n    /*\r\n     * Compensation coefficient based on the difference between the max ETHUSD price during the presale\r\n     * and price fix for mainsale\r\n     */\r\n    uint256 compensation1;\r\n    uint256 compensation2;\r\n    // Date after which all tokens left will be transfered to the company reserve\r\n    uint256 deadLine;\r\n\r\n    event SupporterResolved(address indexed supporter, uint256 burned, uint256 created);\r\n    event PartnerResolved(address indexed partner, uint256 burned, uint256 created);\r\n\r\n    /*\r\n     * Constructor changing owner to owner multisig, setting all the contract addresses & compensation rates\r\n     * @param address of the Signals Token contract\r\n     * @param address of the KYC registry\r\n     * @param address of the owner multisig\r\n     * @param uint rate of the compensation for early investors\r\n     * @param uint rate of the compensation for partners\r\n     */\r\n    function PresalePool(address _token, address _registry, address _owner, uint comp1, uint comp2) public {\r\n        owner = _owner;\r\n        PublicPresale = PresaleToken(0x15fEcCA27add3D28C55ff5b01644ae46edF15821);\r\n        PartnerPresale = PresaleToken(0xa70435D1a3AD4149B0C13371E537a22002Ae530d);\r\n        token = SignalsToken(_token);\r\n        registry = CrowdsaleRegister(_registry);\r\n        compensation1 = comp1;\r\n        compensation2 = comp2;\r\n        deadLine = now + 30 days;\r\n    }\r\n\r\n    /*\r\n     * Fallback function for simple contract usage, only calls the swap()\r\n     * @dev left for simpler interaction\r\n     */\r\n    function() public {\r\n        swap();\r\n    }\r\n\r\n    /*\r\n     * Function swapping the presale tokens for the Signal tokens regardless on the presale pool\r\n     * @dev requires having ownership of the two presale contracts\r\n     * @dev requires the calling party to finish the KYC process fully\r\n     */\r\n    function swap() public {\r\n        require(registry.approved(msg.sender));\r\n        uint256 oldBalance;\r\n        uint256 newBalance;\r\n\r\n        if (PublicPresale.balanceOf(msg.sender) > 0) {\r\n            oldBalance = PublicPresale.balanceOf(msg.sender);\r\n            newBalance = oldBalance * compensation1 / 100;\r\n            PublicPresale.burnTokens(msg.sender, oldBalance);\r\n            token.transfer(msg.sender, newBalance);\r\n            SupporterResolved(msg.sender, oldBalance, newBalance);\r\n        }\r\n\r\n        if (PartnerPresale.balanceOf(msg.sender) > 0) {\r\n            oldBalance = PartnerPresale.balanceOf(msg.sender);\r\n            newBalance = oldBalance * compensation2 / 100;\r\n            PartnerPresale.burnTokens(msg.sender, oldBalance);\r\n            token.transfer(msg.sender, newBalance);\r\n            PartnerResolved(msg.sender, oldBalance, newBalance);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Function swapping the presale tokens for the Signal tokens regardless on the presale pool\r\n     * @dev initiated from Signals (passing the ownership to a oracle to handle a script is recommended)\r\n     * @dev requires having ownership of the two presale contracts\r\n     * @dev requires the calling party to finish the KYC process fully\r\n     */\r\n    function swapFor(address whom) onlyOwner public returns(bool) {\r\n        require(registry.approved(whom));\r\n        uint256 oldBalance;\r\n        uint256 newBalance;\r\n\r\n        if (PublicPresale.balanceOf(whom) > 0) {\r\n            oldBalance = PublicPresale.balanceOf(whom);\r\n            newBalance = oldBalance * compensation1 / 100;\r\n            PublicPresale.burnTokens(whom, oldBalance);\r\n            token.transfer(whom, newBalance);\r\n            SupporterResolved(whom, oldBalance, newBalance);\r\n        }\r\n\r\n        if (PartnerPresale.balanceOf(whom) > 0) {\r\n            oldBalance = PartnerPresale.balanceOf(whom);\r\n            newBalance = oldBalance * compensation2 / 100;\r\n            PartnerPresale.burnTokens(whom, oldBalance);\r\n            token.transfer(whom, newBalance);\r\n            SupporterResolved(whom, oldBalance, newBalance);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Function to clean up the state and moved not allocated tokens to custody\r\n     */\r\n    function clean() onlyOwner public {\r\n        require(now >= deadLine);\r\n        uint256 notAllocated = token.balanceOf(address(this));\r\n        token.transfer(owner, notAllocated);\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    SignalsToken public token;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    // start/end related \r\n    uint256 public startTime;\r\n    bool public hasEnded;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    function Crowdsale(address _token, address _wallet) public {\r\n        require(_wallet != 0x0);\r\n        token = SignalsToken(_token);\r\n        wallet = _wallet;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) private {}\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal constant returns (bool) {}\r\n\r\n}\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    bool public isFinalized = false;\r\n\r\n    event Finalized();\r\n\r\n    /**\r\n     * @dev Must be called after crowdsale ends, to do some extra finalization\r\n     * work. Calls the contract's finalization function.\r\n     */\r\n    function finalize() onlyOwner public {\r\n        require(!isFinalized);\r\n        require(hasEnded);\r\n\r\n        finalization();\r\n        Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Can be overridden to add finalization logic. The overriding function\r\n     * should call super.finalization() to ensure the chain of finalization is\r\n     * executed entirely.\r\n     */\r\n    function finalization() internal {\r\n    }\r\n}\r\n\r\n\r\ncontract SignalsCrowdsale is FinalizableCrowdsale {\r\n\r\n    // Cap & price related values\r\n    uint256 public constant HARD_CAP = 18000*(10**18);\r\n    uint256 public toBeRaised = 18000*(10**18);\r\n    uint256 public constant PRICE = 360000;\r\n    uint256 public tokensSold;\r\n    uint256 public constant maxTokens = 185000000*(10**9);\r\n\r\n    // Allocation constants\r\n    uint constant ADVISORY_SHARE = 18500000*(10**9); //FIXED\r\n    uint constant BOUNTY_SHARE = 3700000*(10**9); // FIXED\r\n    uint constant COMMUNITY_SHARE = 37000000*(10**9); //FIXED\r\n    uint constant COMPANY_SHARE = 33300000*(10**9); //FIXED\r\n    uint constant PRESALE_SHARE = 7856217611546440; // FIXED;\r\n\r\n    // Address pointers\r\n    address constant ADVISORS = 0x98280b2FD517a57a0B8B01b674457Eb7C6efa842; // TODO: change\r\n    address constant BOUNTY = 0x8726D7ac344A0BaBFd16394504e1cb978c70479A; // TODO: change\r\n    address constant COMMUNITY = 0x90CDbC88aB47c432Bd47185b9B0FDA1600c22102; // TODO: change\r\n    address constant COMPANY = 0xC010b2f2364372205055a299B28ef934f090FE92; // TODO: change\r\n    address constant PRESALE = 0x7F3a38fa282B16973feDD1E227210Ec020F2481e; // TODO: change\r\n    CrowdsaleRegister register;\r\n    PrivateRegister register2;\r\n\r\n    // Start & End related vars\r\n    bool public ready;\r\n\r\n    // Events\r\n    event SaleWillStart(uint256 time);\r\n    event SaleReady();\r\n    event SaleEnds(uint256 tokensLeft);\r\n\r\n    function SignalsCrowdsale(address _token, address _wallet, address _register, address _register2) public\r\n    FinalizableCrowdsale()\r\n    Crowdsale(_token, _wallet)\r\n    {\r\n        register = CrowdsaleRegister(_register);\r\n        register2 = PrivateRegister(_register2);\r\n    }\r\n\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool started = (startTime <= now);\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        bool capNotReached = (weiRaised < HARD_CAP);\r\n        bool approved = register.approved(msg.sender);\r\n        bool approved2 = register2.approved(msg.sender);\r\n        return ready && started && !hasEnded && nonZeroPurchase && capNotReached && (approved || approved2);\r\n    }\r\n\r\n    /*\r\n     * Buy in function to be called from the fallback function\r\n     * @param beneficiary address\r\n     */\r\n    function buyTokens(address beneficiary) private {\r\n        require(beneficiary != 0x0);\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // base discount\r\n        uint256 discount = ((toBeRaised*10000)/HARD_CAP)*15;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens;\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        toBeRaised = toBeRaised.sub(weiAmount);\r\n\r\n        uint commission;\r\n        uint extra;\r\n        uint premium;\r\n\r\n        if (register.approved(beneficiary)) {\r\n            (commission, extra) = register.getBonuses(beneficiary);\r\n\r\n            // If extra access granted then give additional %\r\n            if (extra > 0) {\r\n                discount += extra*10000;\r\n            }\r\n            tokens =  howMany(msg.value, discount);\r\n\r\n            // If referral was involved, give some percent to the source\r\n            if (commission > 0) {\r\n                premium = tokens.mul(commission).div(100);\r\n                token.mint(BOUNTY, premium);\r\n            }\r\n\r\n        } else {\r\n            extra = register2.getBonuses(beneficiary);\r\n            if (extra > 0) {\r\n                discount = extra*10000;\r\n                tokens =  howMany(msg.value, discount);\r\n            }\r\n        }\r\n\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n        tokensSold += tokens + premium;\r\n        forwardFunds();\r\n\r\n        assert(token.totalSupply() <= maxTokens);\r\n    }\r\n\r\n    /*\r\n     * Helper token emission functions\r\n     * @param value uint256 of the wei amount that gets invested\r\n     * @return uint256 of how many tokens can one get\r\n     */\r\n    function howMany(uint256 value, uint256 discount) public view returns (uint256){\r\n        uint256 actualPrice = PRICE * (1000000 - discount) / 1000000;\r\n        return value / actualPrice;\r\n    }\r\n\r\n    /*\r\n     * Function to do preallocations - MANDATORY to continue\r\n     * @dev It's separated so it doesn't have to run in constructor\r\n     */\r\n    function initialize() public onlyOwner {\r\n        require(!ready);\r\n\r\n        // Pre-allocation to pools\r\n        token.mint(ADVISORS,ADVISORY_SHARE);\r\n        token.mint(BOUNTY,BOUNTY_SHARE);\r\n        token.mint(COMMUNITY,COMMUNITY_SHARE);\r\n        token.mint(COMPANY,COMPANY_SHARE);\r\n        token.mint(PRESALE,PRESALE_SHARE);\r\n\r\n        tokensSold = PRESALE_SHARE;\r\n\r\n        ready = true;\r\n        SaleReady();\r\n    }\r\n\r\n    /*\r\n     * Function to do set or adjust the startTime - NOT MANDATORY but good for future start\r\n     */\r\n    function changeStart(uint256 _time) public onlyOwner {\r\n        startTime = _time;\r\n        SaleWillStart(_time);\r\n    }\r\n\r\n    /*\r\n     * Function end or pause the sale\r\n     * @dev It's MANDATORY to finalize()\r\n     */\r\n    function endSale(bool end) public onlyOwner {\r\n        require(startTime <= now);\r\n        uint256 tokensLeft = maxTokens - token.totalSupply();\r\n        if (tokensLeft > 0) {\r\n            token.mint(wallet, tokensLeft);\r\n        }\r\n        hasEnded = end;\r\n        SaleEnds(tokensLeft);\r\n    }\r\n\r\n    /*\r\n     * Adjust finalization to transfer token ownership to the fund holding address for further use\r\n     */\r\n    function finalization() internal {\r\n        token.finishMinting();\r\n        token.transferOwnership(wallet);\r\n    }\r\n\r\n    /*\r\n     * Clean up function to get the contract selfdestructed - OPTIONAL\r\n     */\r\n    function cleanUp() public onlyOwner {\r\n        require(isFinalized);\r\n        selfdestruct(owner);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"toBeRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ready\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"howMany\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"changeStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"end\",\"type\":\"bool\"}],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_register\",\"type\":\"address\"},{\"name\":\"_register2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SaleWillStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleReady\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensLeft\",\"type\":\"uint256\"}],\"name\":\"SaleEnds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"SignalsCrowdsale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b2135ab9695a7678dd590b1a996cb0f37bcb0718000000000000000000000000233e11479f9d36f5cc632a78884189e1b9502128000000000000000000000000d5d7d89a913f0aeb3b9a4a685a7c846e8220fc0700000000000000000000000096d0040b4f84224c1dc7faf1d99eab3f91c52e4d","Library":"","SwarmSource":"bzzr://46571b5c195fa800f1305a3c4fa80bd18c4321653933e44d077970efcbddf40a"}]}