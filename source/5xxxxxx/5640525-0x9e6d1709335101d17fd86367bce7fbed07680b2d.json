{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0 uint256 c = a / b;\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract Jackpot is Ownable {\r\n\r\n  string public constant name = \"Jackpot\";\r\n\r\n  event newWinner(address winner, uint256 ticketNumber);\r\n  // event newRandomNumber_bytes(bytes);\r\n  // event newRandomNumber_uint(uint);\r\n  event newContribution(address contributor, uint value);\r\n\r\n  using SafeMath for uint256;\r\n  address[] public players = new address[](10);\r\n  uint256 public lastTicketNumber = 0;\r\n  uint8 public lastIndex = 0;\r\n\r\n  struct tickets {\r\n    uint256 startTicket;\r\n    uint256 endTicket;\r\n  }\r\n\r\n  mapping (address => tickets[]) public ticketsMap;\r\n  mapping (address => uint256) public contributions;\r\n\r\n\r\n  function executeLottery() { \r\n      \r\n        if (lastIndex > 9) {\r\n          uint randomNumber = this.balance.mul(16807) % 2147483647;\r\n          randomNumber = randomNumber % lastTicketNumber;\r\n          address winner;\r\n          bool hasWon;\r\n          for (uint8 i = 0; i < lastIndex; i++) {\r\n            address player = players[i];\r\n            for (uint j = 0; j < ticketsMap[player].length; j++) {\r\n              uint256 start = ticketsMap[player][j].startTicket;\r\n              uint256 end = ticketsMap[player][j].endTicket;\r\n              if (randomNumber >= start && randomNumber < end) {\r\n                winner = player;\r\n                hasWon = true;\r\n                break;\r\n              }\r\n            }\r\n            if(hasWon) break;\r\n          }\r\n          require(winner!=address(0) && hasWon);\r\n\r\n          for (uint8 k = 0; k < lastIndex; k++) {\r\n            delete ticketsMap[players[k]];\r\n            delete contributions[players[k]];\r\n          }\r\n\r\n          lastIndex = 0;\r\n          lastTicketNumber = 0;\r\n\r\n          uint balance = this.balance;\r\n          if (!owner.send(balance/10)) throw;\r\n          //Both SafeMath.div and / throws on error\r\n          if (!winner.send(balance - balance/10)) throw;\r\n          newWinner(winner, randomNumber);\r\n          \r\n        }\r\n      \r\n  }\r\n\r\n  function getPlayers() constant returns (address[], uint256[]) {\r\n    address[] memory addrs = new address[](lastIndex);\r\n    uint256[] memory _contributions = new uint256[](lastIndex);\r\n    for (uint i = 0; i < lastIndex; i++) {\r\n      addrs[i] = players[i];\r\n      _contributions[i] = contributions[players[i]];\r\n    }\r\n    return (addrs, _contributions);\r\n  }\r\n\r\n  function getTickets(address _addr) constant returns (uint256[] _start, uint256[] _end) {\r\n    tickets[] tks = ticketsMap[_addr];\r\n    uint length = tks.length;\r\n    uint256[] memory startTickets = new uint256[](length);\r\n    uint256[] memory endTickets = new uint256[](length);\r\n    for (uint i = 0; i < length; i++) {\r\n      startTickets[i] = tks[i].startTicket;\r\n      endTickets[i] = tks[i].endTicket;\r\n    }\r\n    return (startTickets, endTickets);\r\n  }\r\n\r\n  function() payable {\r\n    uint256 weiAmount = msg.value;\r\n    require(weiAmount >= 1e16);\r\n\r\n    bool isSenderAdded = false;\r\n    for (uint8 i = 0; i < lastIndex; i++) {\r\n      if (players[i] == msg.sender) {\r\n        isSenderAdded = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!isSenderAdded) {\r\n      players[lastIndex] = msg.sender;\r\n      lastIndex++;\r\n    }\r\n\r\n    tickets memory senderTickets;\r\n    senderTickets.startTicket = lastTicketNumber;\r\n    uint256 numberOfTickets = weiAmount/1e15;\r\n    senderTickets.endTicket = lastTicketNumber.add(numberOfTickets);\r\n    lastTicketNumber = lastTicketNumber.add(numberOfTickets);\r\n    ticketsMap[msg.sender].push(senderTickets);\r\n\r\n    contributions[msg.sender] = contributions[msg.sender].add(weiAmount);\r\n\r\n    newContribution(msg.sender, weiAmount);\r\n\r\n    if(lastIndex > 9) {\r\n      executeLottery();\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTickets\",\"outputs\":[{\"name\":\"_start\",\"type\":\"uint256[]\"},{\"name\":\"_end\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTicketNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketsMap\",\"outputs\":[{\"name\":\"startTicket\",\"type\":\"uint256\"},{\"name\":\"endTicket\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ticketNumber\",\"type\":\"uint256\"}],\"name\":\"newWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"newContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Jackpot","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3e7cb5555dac893a0532de353257756296cc0c6661339113ee8ca6da2cec15ca"}]}