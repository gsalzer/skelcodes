{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Soccer {\r\n  using SafeMath for uint256;\r\n  /*** EVENTS ***/\r\n  /// @dev The Birth event is fired whenever a new collectible comes into existence.\r\n  event Birth(uint256 tokenId, uint256 startPrice);\r\n  /// @dev The TokenSold event is fired whenever a token is sold.\r\n  event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner);\r\n  // ERC721 Transfer\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  // ERC721 Approval\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  /*** CONSTANTS ***/\r\n\r\n  string public constant NAME = \"SoccerAllStars\";\r\n  string public constant SYMBOL = \"SAS\";\r\n\r\n  /*** STORAGE ***/\r\n  struct Token {\r\n    address owner;\r\n    uint256 price;\r\n  }\r\n  mapping (uint256 => Token) collectibleIdx;\r\n  mapping (uint256 => address[3]) mapToLastOwners;\r\n  mapping (uint256 => address) collectibleIndexToApproved;\r\n  uint256[] private tokens;\r\n\r\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n\r\n  uint16 constant NATION_INDEX = 1000;\r\n  uint32 constant CLUB_INDEX = 1000000;\r\n\r\n  uint256 private constant PROMO_CREATION_LIMIT = 50000;\r\n  uint256 public promoCreatedCount;\r\n\r\n  uint256 constant PLAYER_PRICE = 1 finney;\r\n  uint256 constant CLUB_PRICE = 10 finney;\r\n  uint256 constant NATION_PRICE = 100 finney;\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  function Soccer() public {\r\n    ceoAddress = msg.sender;\r\n    cooAddress = msg.sender;\r\n  }\r\n  \r\n  function getTotalSupply() public view returns (uint) {\r\n    return tokens.length;\r\n  }\r\n  \r\n  function getInitialPriceOfToken(uint _tokenId) public pure returns (uint) {\r\n    if (_tokenId > CLUB_INDEX)\r\n      return PLAYER_PRICE;\r\n    if (_tokenId > NATION_INDEX)\r\n      return CLUB_PRICE;\r\n    return NATION_PRICE;\r\n  }\r\n\r\n  function getNextPrice(uint price, uint _tokenId) public pure returns (uint) {\r\n    if (price < 0.05 ether)\r\n      return price.mul(200).div(93); //x2\r\n    if (price < 0.5 ether)\r\n      return price.mul(150).div(93); //x1.5\r\n    if (price < 2 ether)\r\n      return price.mul(130).div(93); //x1.3\r\n    return price.mul(120).div(93); //x1.2\r\n  }\r\n\r\n  function buyToken(uint _tokenId) public payable {\r\n    require(!isContract(msg.sender));\r\n    \r\n    Token memory token = collectibleIdx[_tokenId];\r\n    address oldOwner = address(0);\r\n    uint256 sellingPrice;\r\n    if (token.owner == address(0)) {\r\n        sellingPrice = getInitialPriceOfToken(_tokenId);\r\n        token = Token({\r\n            owner: msg.sender,\r\n            price: sellingPrice\r\n        });\r\n    } else {\r\n        oldOwner = token.owner;\r\n        sellingPrice = token.price;\r\n        require(oldOwner != msg.sender);\r\n    }\r\n    require(msg.value >= sellingPrice);\r\n    \r\n    address[3] storage lastOwners = mapToLastOwners[_tokenId];\r\n    uint256 payment = _handle(_tokenId, sellingPrice, lastOwners);\r\n\r\n    // Transfers the Token\r\n    token.owner = msg.sender;\r\n    token.price = getNextPrice(sellingPrice, _tokenId);\r\n    mapToLastOwners[_tokenId] = _addLastOwner(lastOwners, oldOwner);\r\n\r\n    collectibleIdx[_tokenId] = token;\r\n    if (oldOwner != address(0)) {\r\n      // Payment for old owner\r\n      oldOwner.transfer(payment);\r\n      // clear any previously approved ownership exchange\r\n      delete collectibleIndexToApproved[_tokenId];\r\n    } else {\r\n      Birth(_tokenId, sellingPrice);\r\n      tokens.push(_tokenId);\r\n    }\r\n\r\n    TokenSold(_tokenId, sellingPrice, oldOwner, msg.sender);\r\n    Transfer(oldOwner, msg.sender, _tokenId);\r\n\r\n    // refund when paid too much\r\n    uint256 purchaseExcess = msg.value.sub(sellingPrice);\r\n    if (purchaseExcess > 0) {\r\n        msg.sender.transfer(purchaseExcess);\r\n    }\r\n  }\r\n\r\nfunction _handle(uint256 _tokenId, uint256 sellingPrice, address[3] lastOwners) private returns (uint256) {\r\n    uint256 pPrice = sellingPrice.div(100);\r\n    uint256 tax = pPrice.mul(7); // initial dev cut = 7%\r\n    if (_tokenId > CLUB_INDEX) {\r\n        uint256 clubId = _tokenId % CLUB_INDEX;\r\n        Token storage clubToken = collectibleIdx[clubId];\r\n        if (clubToken.owner != address(0)) {\r\n            uint256 clubTax = pPrice.mul(2); // 2% club tax;\r\n            tax += clubTax;\r\n            clubToken.owner.transfer(clubTax);\r\n        }\r\n\r\n        uint256 nationId = clubId % NATION_INDEX;\r\n        Token storage nationToken = collectibleIdx[nationId];\r\n        if (nationToken.owner != address(0)) {\r\n            tax += pPrice; // 1% nation tax;\r\n            nationToken.owner.transfer(pPrice);\r\n        }\r\n    } else if (_tokenId > NATION_INDEX) {\r\n        nationId = _tokenId % NATION_INDEX;\r\n        nationToken = collectibleIdx[nationId];\r\n        if (nationToken.owner != address(0)) {\r\n            tax += pPrice; // 1% nation tax;\r\n            nationToken.owner.transfer(pPrice);\r\n        }\r\n    }\r\n\r\n    //Pay tax to the previous 3 owners\r\n    uint256 lastOwnerTax;\r\n    if (lastOwners[0] != address(0)) {\r\n      tax += pPrice; // 1% 3rd payment\r\n      lastOwners[0].transfer(pPrice);\r\n    }\r\n    if (lastOwners[1] != address(0)) {\r\n      lastOwnerTax = pPrice.mul(2); // 2% 2nd payment\r\n      tax += lastOwnerTax;\r\n      lastOwners[1].transfer(lastOwnerTax);\r\n    }\r\n    if (lastOwners[2] != address(0)) {\r\n      lastOwnerTax = pPrice.mul(3); // 3% 1st payment\r\n      tax += lastOwnerTax;\r\n      lastOwners[2].transfer(lastOwnerTax);\r\n    }\r\n\r\n    return sellingPrice.sub(tax);\r\n}\r\n\r\nfunction _addLastOwner(address[3] lastOwners, address oldOwner) pure private returns (address[3]) {\r\n    lastOwners[0] = lastOwners[1];\r\n    lastOwners[1] = lastOwners[2];\r\n    lastOwners[2] = oldOwner;\r\n    return lastOwners;\r\n}\r\n  /*** ACCESS MODIFIERS ***/\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require( msg.sender == ceoAddress || msg.sender == cooAddress );\r\n    _;\r\n  }\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    collectibleIndexToApproved[_tokenId] = _to;\r\n\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// @dev Creates a new promo collectible with the given name, with given _price and assignes it to an address.\r\n  function createPromoCollectible(uint256 tokenId, address _owner, uint256 _price) public onlyCLevel {\r\n    Token memory token = collectibleIdx[tokenId];\r\n    require(token.owner == address(0));\r\n    require(promoCreatedCount < PROMO_CREATION_LIMIT);\r\n\r\n    address collectibleOwner = _owner;\r\n    if (collectibleOwner == address(0)) {\r\n      collectibleOwner = cooAddress;\r\n    }\r\n\r\n    if (_price <= 0) {\r\n      _price = getInitialPriceOfToken(tokenId);\r\n    }\r\n\r\n    promoCreatedCount++;\r\n    token = Token({\r\n        owner: collectibleOwner,\r\n        price: _price\r\n    });\r\n    collectibleIdx[tokenId] = token;\r\n    Birth(tokenId, _price);\r\n    tokens.push(tokenId);\r\n\r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transfer(address(0), collectibleOwner, tokenId);\r\n\r\n  }\r\n\r\n  bool isChangePriceLocked = false;\r\n  // allows owners of tokens to decrease the price of them or if there is no owner the coo can do it\r\n  function changePrice(uint256 _tokenId, uint256 newPrice) public {\r\n    require((_owns(msg.sender, _tokenId) && !isChangePriceLocked) || (_owns(address(0), _tokenId) && msg.sender == cooAddress));\r\n    Token storage token = collectibleIdx[_tokenId];\r\n    require(newPrice < token.price);\r\n    token.price = newPrice;\r\n    collectibleIdx[_tokenId] = token;\r\n  }\r\n  function unlockPriceChange() public onlyCLevel {\r\n    isChangePriceLocked = false;\r\n  }\r\n  function lockPriceChange() public onlyCLevel {\r\n    isChangePriceLocked = true;\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific collectible.\r\n  /// @param _tokenId The tokenId of the collectible of interest.\r\n  function getToken(uint256 _tokenId) public view returns (uint256 tokenId, uint256 sellingPrice, address owner, uint256 nextSellingPrice) {\r\n    tokenId = _tokenId;\r\n    Token storage token = collectibleIdx[_tokenId];\r\n    sellingPrice = token.price;\r\n    if (sellingPrice == 0)\r\n      sellingPrice = getInitialPriceOfToken(_tokenId);\r\n    owner = token.owner;\r\n    nextSellingPrice = getNextPrice(sellingPrice, _tokenId);\r\n  }\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n  /// For querying owner of token\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    Token storage token = collectibleIdx[_tokenId];\r\n    require(token.owner != address(0));\r\n    owner = token.owner;\r\n  }\r\n\r\n  function payout(address _to) public onlyCLevel {\r\n    _payout(_to);\r\n  }\r\n\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    Token storage token = collectibleIdx[_tokenId];\r\n    if (token.owner == address(0)) {\r\n        price = getInitialPriceOfToken(_tokenId);\r\n    } else {\r\n        price = token.price;\r\n    }\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n\r\n    ceoAddress = _newCEO;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\r\n  /// @param _newCOO The address of the new COO\r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n\r\n    cooAddress = _newCOO;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    Token storage token = collectibleIdx[_tokenId];\r\n    require(token.owner != address(0));\r\n    address oldOwner = token.owner;\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return collectibleIndexToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    Token storage token = collectibleIdx[_tokenId];\r\n    return claimant == token.owner;\r\n  }\r\n\r\n  /// For paying out balance on contract\r\n  function _payout(address _to) private {\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(this.balance);\r\n    } else {\r\n      _to.transfer(this.balance);\r\n    }\r\n  }\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) public view returns (uint256 result) {\r\n      uint256 totalTokens = tokens.length;\r\n      uint256 tokenIndex;\r\n      uint256 tokenId;\r\n      result = 0;\r\n      for (tokenIndex = 0; tokenIndex < totalTokens; tokenIndex++) {\r\n        tokenId = tokens[tokenIndex];\r\n        if (collectibleIdx[tokenId].owner == _owner) {\r\n          result = result.add(1);\r\n        }\r\n      }\r\n      return result;\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific Collectible to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    //transfer ownership\r\n    collectibleIdx[_tokenId].owner = _to;\r\n\r\n    // When creating new collectibles _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      // clear any previously approved ownership exchange\r\n      delete collectibleIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n\r\n   /// @param _owner The owner whose celebrity tokens we are interested in.\r\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n  ///  expensive (it walks the entire tokens array looking for tokens belonging to owner),\r\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n  ///  not contract-to-contract calls.\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalTokens = getTotalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 tokenIndex;\r\n      uint256 tokenId;\r\n      for (tokenIndex = 0; tokenIndex < totalTokens; tokenIndex++) {\r\n        tokenId = tokens[tokenIndex];\r\n        if (collectibleIdx[tokenId].owner == _owner) {\r\n          result[resultIndex] = tokenId;\r\n          resultIndex = resultIndex.add(1);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n    /* Util */\r\n  function isContract(address addr) private view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(addr) } // solium-disable-line\r\n    return size > 0;\r\n  }\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getInitialPriceOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockPriceChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockPriceChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNextPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createPromoCollectible\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"nextSellingPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Soccer","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1646eef852006a12a821b19b14971fb2973789b8e16fca28eab45b7ce0506849"}]}