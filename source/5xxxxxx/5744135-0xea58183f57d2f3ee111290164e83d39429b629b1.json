{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract Partner {\r\n    function exchangeTokensFromOtherContract(address _source, address _recipient, uint256 _RequestedTokens);\r\n}\r\n\r\ncontract Target {\r\n    function transfer(address _to, uint _value);\r\n}\r\n\r\ncontract MNY {\r\n\r\n    string public name = \"MNY by Monkey Capital\";\r\n    uint8 public decimals = 18;\r\n    string public symbol = \"MNY\";\r\n\r\n    address public owner;\r\n    address public exchangeAdmin;\r\n\r\n    // used to store list of contracts MNY holds tokens in\r\n    mapping(uint256 => address) public exchangePartners;\r\n    mapping(address => uint256) public exchangeRates;\r\n\r\n    uint tierLevel = 1;\r\n    uint maxTier = 30;\r\n    uint256 totalSupply = 1.698846726062230000E25;\r\n\r\n    uint256 public mineableTokens = totalSupply;\r\n    uint256 public swappedTokens = 0;\r\n    uint256 circulatingSupply = 0;\r\n    uint contractCount = 0;\r\n\r\n    // flags\r\n    bool swap = false;\r\n    bool distributionCalculated = false;\r\n    bool public initialTiers = false;\r\n    bool addTiers = true;\r\n\r\n    // Storage\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => uint256) public tokenBalances;\r\n    mapping (address => uint256) public tokenShare;\r\n\r\n    // erc20 compliance\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // mining schedule\r\n    mapping(uint => uint256) public scheduleTokens;\r\n    mapping(uint => uint256) public scheduleRates;\r\n\r\n    uint256 swapEndTime;\r\n\r\n    // events (ERC20)\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    // events (custom)\r\n    event TokensExchanged(address indexed _sendingWallet, address indexed _sendingContract, uint256 _tokensIn);\r\n\r\n    function MNY() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // tier pop\r\n    function populateTierTokens() public {\r\n        require((msg.sender == owner) && (initialTiers == false));\r\n        scheduleTokens[1] = 5.33696E18;\r\n        scheduleTokens[2] = 7.69493333E18;\r\n        scheduleTokens[3] = 4.75684324E18;\r\n        scheduleTokens[4] = 6.30846753E18;\r\n        scheduleTokens[5] = 6.21620513E18;\r\n        scheduleTokens[6] = 5.63157219E18;\r\n        scheduleTokens[7] = 5.80023669E18;\r\n        scheduleTokens[8] = 5.04458667E18;\r\n        scheduleTokens[9] = 4.58042767E18;\r\n        scheduleTokens[10] = 5E18;\r\n        scheduleTokens[11] = 5.59421053E18;\r\n        scheduleTokens[12] = 7.05050888E18;\r\n        scheduleTokens[13] = 1.93149011E19;\r\n        scheduleTokens[14] = 5.71055924E18;\r\n        scheduleTokens[15] = 1.087367665E19;\r\n        scheduleTokens[16] = 5.4685283E18;\r\n        scheduleTokens[17] = 7.58236145E18;\r\n        scheduleTokens[18] = 5.80773184E18;\r\n        scheduleTokens[19] = 4.74868639E18;\r\n        scheduleTokens[20] = 6.74810256E18;\r\n        scheduleTokens[21] = 5.52847682E18;\r\n        scheduleTokens[22] = 4.96611055E18;\r\n        scheduleTokens[23] = 5.45818182E18;\r\n        scheduleTokens[24] = 8.0597095E18;\r\n        scheduleTokens[25] = 1.459911381E19;\r\n        scheduleTokens[26] = 8.32598844E18;\r\n        scheduleTokens[27] = 4.555277509E19;\r\n        scheduleTokens[28] = 1.395674359E19;\r\n        scheduleTokens[29] = 9.78908515E18;\r\n        scheduleTokens[30] = 1.169045087E19;\r\n    }\r\n\r\n    function populateTierRates() public {\r\n        require((msg.sender == owner) && (initialTiers == false));\r\n        scheduleRates[1] = 9E18;\r\n        scheduleRates[2] = 9E18;\r\n        scheduleRates[3] = 8E18;\r\n        scheduleRates[4] = 7E18;\r\n        scheduleRates[5] = 8E18;\r\n        scheduleRates[6] = 5E18;\r\n        scheduleRates[7] = 6E18;\r\n        scheduleRates[8] = 5E18;\r\n        scheduleRates[9] = 5E18;\r\n        scheduleRates[10] = 6E18;\r\n        scheduleRates[11] = 6E18;\r\n        scheduleRates[12] = 6E18;\r\n        scheduleRates[13] = 7E18;\r\n        scheduleRates[14] = 6E18;\r\n        scheduleRates[15] = 7E18;\r\n        scheduleRates[16] = 6E18;\r\n        scheduleRates[17] = 6E18;\r\n        scheduleRates[18] = 6E18;\r\n        scheduleRates[19] = 6E18;\r\n        scheduleRates[20] = 6E18;\r\n        scheduleRates[21] = 6E18;\r\n        scheduleRates[22] = 6E18;\r\n        scheduleRates[23] = 6E18;\r\n        scheduleRates[24] = 7E18;\r\n        scheduleRates[25] = 7E18;\r\n        scheduleRates[26] = 7E18;\r\n        scheduleRates[27] = 7E18;\r\n        scheduleRates[28] = 6E18;\r\n        scheduleRates[29] = 7E18;\r\n        scheduleRates[30] = 7E18;\r\n        initialTiers = true;\r\n    }\r\n    // eof tier pop\r\n\r\n    function transfer(address _to, uint256 _value, bytes _data) public {\r\n        // sender must have enough tokens to transfer\r\n        require(balances[msg.sender] >= _value);\r\n\r\n        if(_to == address(this)) {\r\n            if(swap == false) {\r\n                // WARNING: if you transfer tokens back to the contract outside of the swap you will lose them\r\n                // use the exchange function to exchange for tokens with approved partner contracts\r\n                mineableTokens = add(mineableTokens, _value);\r\n                circulatingSupply = sub(circulatingSupply, _value);\r\n                if(circulatingSupply == 0) {\r\n                    swap = true;\r\n                    swapEndTime = now + 90 days;\r\n                }\r\n                scheduleTokens[maxTier] = add(scheduleTokens[maxTier], _value);\r\n                balances[msg.sender] = sub(balanceOf(msg.sender), _value);\r\n                Transfer(msg.sender, _to, _value);\r\n            }\r\n            else {\r\n                if(distributionCalculated = false) {\r\n                    calculateHeldTokenDistribution();\r\n                }\r\n                swappedTokens = add(swappedTokens, _value);\r\n                balances[msg.sender] = sub(balances[msg.sender], _value);\r\n                shareStoredTokens(msg.sender, _value);\r\n            }\r\n        }\r\n        else {\r\n            // WARNING: if you transfer tokens to a contract address they will be lost unless the contract\r\n            // has been designed to handle incoming/holding tokens in other contracts\r\n            balances[msg.sender] = sub(balanceOf(msg.sender), _value);\r\n            balances[_to] = add(balances[_to], _value);\r\n            Transfer(msg.sender, _to, _value);\r\n        }\r\n    }\r\n\r\n    function allocateTokens(uint256 _submitted, uint256 _tokenCount, address _recipient) internal {\r\n        uint256 _tokensAfforded = 0;\r\n\r\n        if(tierLevel <= maxTier) {\r\n            _tokensAfforded = div(_submitted, scheduleRates[tierLevel]);\r\n        }\r\n\r\n        if(_tokensAfforded >= scheduleTokens[tierLevel]) {\r\n            _submitted = sub(_submitted, mul(scheduleTokens[tierLevel], scheduleRates[tierLevel]));\r\n            _tokenCount = add(_tokenCount, scheduleTokens[tierLevel]);\r\n            circulatingSupply = add(circulatingSupply, _tokensAfforded);\r\n            mineableTokens = sub(mineableTokens, _tokensAfforded);\r\n            scheduleTokens[tierLevel] = 0;\r\n            tierLevel++;\r\n            allocateTokens(_submitted, _tokenCount, _recipient);\r\n        }\r\n        else if((scheduleTokens[tierLevel] >= _tokensAfforded) && (_tokensAfforded > 0)) {\r\n            scheduleTokens[tierLevel] = sub(scheduleTokens[tierLevel], _tokensAfforded);\r\n            _tokenCount = add(_tokenCount, _tokensAfforded);\r\n            circulatingSupply = add(circulatingSupply, _tokensAfforded);\r\n            mineableTokens = sub(mineableTokens, _tokensAfforded);\r\n\r\n            _submitted = sub(_submitted, mul(_tokensAfforded, scheduleRates[tierLevel]));\r\n            allocateTokens(_submitted, _tokenCount, _recipient);\r\n        }\r\n        else {\r\n            balances[_recipient] = add(balances[_recipient], _tokenCount);\r\n            Transfer(this, _recipient, _tokenCount);\r\n        }\r\n    }\r\n\r\n    function exchangeTokensFromOtherContract(address _source, address _recipient, uint256 _sentTokens) {\r\n        require(exchangeRates[msg.sender] > 0); // only approved contracts will satisfy this constraint\r\n        allocateTokens(mul(_sentTokens, exchangeRates[_source]), 0, _recipient);\r\n        TokensExchanged(_recipient, _source, _sentTokens);\r\n        maintainExternalContractTokenBalance(_source, _sentTokens);\r\n    }\r\n\r\n    function addExchangePartnerAddressAndRate(address _partner, uint256 _rate) public {\r\n        require(msg.sender == owner);\r\n        // check that _partner is a contract address\r\n        uint codeLength;\r\n        assembly {\r\n            codeLength := extcodesize(_partner)\r\n        }\r\n        require(codeLength > 0);\r\n        exchangeRates[_partner] = _rate;\r\n\r\n        bool isContract = existingContract(_partner);\r\n        if(isContract == false) {\r\n            contractCount++;\r\n            exchangePartners[contractCount] = _partner;\r\n        }\r\n    }\r\n\r\n    function addTierRateAndTokens(uint256 _level, uint256 _tokens, uint256 _rate) public {\r\n        require(((msg.sender == owner) || (msg.sender == exchangeAdmin)) && (addTiers == true));\r\n        scheduleTokens[_level] = _tokens;\r\n        scheduleRates[_level] = _rate;\r\n        maxTier++;\r\n        if(maxTier > 2856) {\r\n            totalSupply = add(totalSupply, _tokens);\r\n        }\r\n    }\r\n\r\n    function closeTierAddition() public {\r\n        require(msg.sender == owner);\r\n        addTiers = false;\r\n    }\r\n\r\n    // public data retrieval funcs\r\n    function getTotalSupply() public constant returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function getMineableTokens() public constant returns (uint256) {\r\n        return mineableTokens;\r\n    }\r\n\r\n    function getCirculatingSupply() public constant returns (uint256) {\r\n        return circulatingSupply;\r\n    }\r\n\r\n    function balanceOf(address _receiver) public constant returns (uint256) {\r\n        return balances[_receiver];\r\n    }\r\n\r\n    function balanceInTier() public constant returns (uint256) {\r\n        return scheduleTokens[tierLevel];\r\n    }\r\n\r\n    function balanceInSpecificTier(uint256 _tier) public constant returns (uint256) {\r\n        return scheduleTokens[_tier];\r\n    }\r\n\r\n    function rateInSpecificTier(uint256 _tier) public constant returns (uint256) {\r\n        return scheduleRates[_tier];\r\n    }\r\n\r\n    function currentTier() public constant returns (uint256) {\r\n        return tierLevel;\r\n    }\r\n\r\n    // NB: we use this to manually process tokens sent in from contracts not able to interact direct with MNY\r\n    function convertTransferredTokensToMny(uint256 _value, address _recipient, address _source, uint256 _originalTokenAmount) public {\r\n        // This allows tokens transferred in for exchange to be converted to MNY and distributed\r\n        // NOTE: COE is able to interact directly with the MNY contract - other exchange partners cannot unless designed ot do so\r\n        // Please contact us at 3@dunaton.com for details on designing a contract that *can* deal directly with MNY\r\n        require((msg.sender == owner) || (msg.sender == exchangeAdmin));\r\n        require(exchangeRates[_source] > 0);\r\n        allocateTokens(_value, 0, _recipient);\r\n        maintainExternalContractTokenBalance(_source, _originalTokenAmount);\r\n        TokensExchanged(_recipient, _source, _originalTokenAmount);\r\n    }\r\n\r\n    function changeOwner(address _newOwner) public {\r\n        require(msg.sender == owner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function changeExchangeAdmin(address _newAdmin) public {\r\n        require(msg.sender == owner);\r\n        exchangeAdmin = _newAdmin;\r\n    }\r\n\r\n    function maintainExternalContractTokenBalance(address _contract, uint256 _tokens) internal {\r\n        tokenBalances[_contract] = add(tokenBalances[_contract], _tokens);\r\n    }\r\n\r\n    function getTokenBalance(address _contract) public constant returns (uint256) {\r\n        return tokenBalances[_contract];\r\n    }\r\n\r\n    function calculateHeldTokenDistribution() public {\r\n        require(swap == true);\r\n        for(uint256 i=0; i<contractCount; i++) {\r\n            tokenShare[exchangePartners[i]] = div(tokenBalances[exchangePartners[i]], totalSupply);\r\n        }\r\n        distributionCalculated = true;\r\n    }\r\n\r\n    function tokenShare(address _contract) public constant returns (uint256) {\r\n        return tokenShare[_contract];\r\n    }\r\n\r\n    function shareStoredTokens(address _recipient, uint256 mny) internal {\r\n        Target t;\r\n        uint256 share = 0;\r\n        for(uint i=0; i<contractCount; i++) {\r\n            share = mul(mny, tokenShare[exchangePartners[i]]);\r\n\r\n            t = Target(exchangePartners[i]);\r\n            t.transfer(_recipient, share);\r\n            tokenBalances[exchangePartners[i]] = sub(tokenBalances[exchangePartners[i]], share);\r\n        }\r\n    }\r\n\r\n    // NOTE: this function is used to redistribute the swapped MNY after swap has ended\r\n    function distributeMnyAfterSwap(address _recipient, uint256 _tokens) public {\r\n        require(msg.sender == owner);\r\n        require(swappedTokens <= _tokens);\r\n        balances[_recipient] = add(balances[_recipient], _tokens);\r\n        Transfer(this, _recipient, _tokens);\r\n        swappedTokens = sub(totalSupply, _tokens);\r\n        circulatingSupply = add(circulatingSupply, _tokens);\r\n    }\r\n\r\n    // we will use this to distribute tokens owned in other contracts\r\n    // e.g. if we have MNY irretrievably locked in contracts/forgotten wallets etc that cannot be returned.\r\n    // This function WILL ONLY be called fter fair notice and CANNOT be called until 90 days have\r\n    // passed since the swap started\r\n    function distributeOwnedTokensFromOtherContracts(address _contract, address _recipient, uint256 _tokens) {\r\n        require(now >= swapEndTime);\r\n        require(msg.sender == owner);\r\n\r\n        require(tokenBalances[_contract] >= _tokens);\r\n        Target t = Target(_contract);\r\n        t.transfer(_recipient, _tokens);\r\n        tokenBalances[_contract] = sub(tokenBalances[_contract], _tokens);\r\n    }\r\n\r\n    function existingContract(address _contract) internal returns (bool) {\r\n        for(uint i=0; i<=contractCount; i++) {\r\n            if(exchangePartners[i] == _contract) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function contractExchangeRate(address _contract) public constant returns (uint256) {\r\n        return exchangeRates[_contract];\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    // ERC20 compliance addition\r\n    function transferFrom(address _from, address _to, uint256 _tokens) public returns (bool success) {\r\n        require(balances[_from] >= _tokens);\r\n        balances[_from] = sub(balances[_from],_tokens);\r\n        allowed[_from][msg.sender] = sub(allowed[_from][msg.sender],_tokens);\r\n        balances[_to] = add(balances[_to],_tokens);\r\n        Transfer(_from, _to, _tokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _tokens) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _tokens;\r\n        Approval(msg.sender, _spender, _tokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _tokenOwner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_tokenOwner][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchangePartners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"scheduleRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeExchangeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMineableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_source\",\"type\":\"address\"},{\"name\":\"_originalTokenAmount\",\"type\":\"uint256\"}],\"name\":\"convertTransferredTokensToMny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"addTierRateAndTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTiers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"rateInSpecificTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_source\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_sentTokens\",\"type\":\"uint256\"}],\"name\":\"exchangeTokensFromOtherContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"addExchangePartnerAddressAndRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"distributeOwnedTokensFromOtherContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangeRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"distributeMnyAfterSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeTierAddition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"calculateHeldTokenDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceInTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"populateTierTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"scheduleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"contractExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"tokenShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"balanceInSpecificTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"populateTierRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mineableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swappedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sendingWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_sendingContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokensIn\",\"type\":\"uint256\"}],\"name\":\"TokensExchanged\",\"type\":\"event\"}]","ContractName":"MNY","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2760f5ae9b49c2af631a9c6859c6f24ef88a8e3daaa41be4133909dd5596256e"}]}