{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n//import \"./ConvertLib.sol\";\r\n\r\ncontract CryptoStars {\r\n\r\n    address owner;\r\n    string public standard = \"STRZ\";     \r\n    string public name;                     \r\n    string public symbol;  \r\n    uint8 public decimals;                         //Zero for this type of token\r\n    uint256 public totalSupply;                    //Total Supply of STRZ tokens \r\n    uint256 public initialPrice;                  //Price to buy an offered star for sale\r\n    uint256 public transferPrice;                 //Minimum price to transfer star to another address\r\n    uint256 public MaxStarIndexAvailable;         //Set a maximum for range of offered stars for sale\r\n    uint256 public MinStarIndexAvailable;        //Set a minimum for range of offered stars for sale\r\n    uint public nextStarIndexToAssign = 0;\r\n    uint public starsRemainingToAssign = 0;\r\n    uint public numberOfStarsToReserve;\r\n    uint public numberOfStarsReserved = 0;\r\n\r\n    mapping (uint => address) public starIndexToAddress;    \r\n    mapping (uint => string) public starIndexToSTRZName;        //Allowed to be set or changed by STRZ token owner\r\n    mapping (uint => string) public starIndexToSTRZMasterName;  //Only allowed to be set or changed by contract owner\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    struct Offer {\r\n        bool isForSale;\r\n        uint starIndex;\r\n        address seller;\r\n        uint minValue;          // In Wei\r\n        address onlySellTo;     // specify to sell only to a specific person\r\n    }\r\n\r\n    struct Bid {\r\n        bool hasBid;\r\n        uint starIndex;\r\n        address bidder;        \r\n        uint value;              //In Wei\r\n    }\r\n\r\n    \r\n\r\n    // A record of stars that are offered for sale at a specific minimum value, and perhaps to a specific person\r\n    mapping (uint => Offer) public starsOfferedForSale;\r\n\r\n    // A record of the highest star bid\r\n    mapping (uint => Bid) public starBids;\r\n\r\n    // Accounts may have credit that can be withdrawn.   Credit can be from withdrawn bids or losing bids.\r\n    // Credits also occur when STRZ tokens are sold.   \r\n    mapping (address => uint) public pendingWithdrawals;\r\n\r\n\r\n    event Assign(address indexed to, uint256 starIndex, string GivenName, string MasterName);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event StarTransfer(address indexed from, address indexed to, uint256 starIndex);\r\n    event StarOffered(uint indexed starIndex, uint minValue, address indexed fromAddress, address indexed toAddress);\r\n    event StarBidEntered(uint indexed starIndex, uint value, address indexed fromAddress);\r\n    event StarBidWithdrawn(uint indexed starIndex, uint value, address indexed fromAddress);\r\n    event StarBidAccepted(uint indexed starIndex, uint value, address indexed fromAddress);\r\n    event StarBought(uint indexed starIndex, uint value, address indexed fromAddress, address indexed toAddress, string GivenName, string MasterName, uint MinStarAvailable, uint MaxStarAvailable);\r\n    event StarNoLongerForSale(uint indexed starIndex);\r\n    event StarMinMax(uint MinStarAvailable, uint MaxStarAvailable, uint256 Price);\r\n    event NewOwner(uint indexed starIndex, address indexed toAddress);\r\n\r\n   \r\n    function CryptoStars() payable {\r\n        \r\n        owner = msg.sender;\r\n        totalSupply = 119614;                        // Update total supply\r\n        starsRemainingToAssign = totalSupply;\r\n        numberOfStarsToReserve = 1000;\r\n        name = \"CRYPTOSTARS\";                        // Set the name for display purposes\r\n        symbol = \"STRZ\";                             // Set the symbol for display purposes\r\n        decimals = 0;                                // Amount of decimals for display purposes\r\n        initialPrice = 99000000000000000;          // Initial price when tokens are first sold 0.099 ETH\r\n        transferPrice = 10000000000000000;          //Set min transfer price to 0.01 ETH\r\n        MinStarIndexAvailable = 11500;               //Min Available Star Index for range of current offer group                                           \r\n        MaxStarIndexAvailable = 12000;               //Max Available Star Index for range of current offer group\r\n\r\n        //Sol - 0\r\n        starIndexToSTRZMasterName[0] = \"Sol\";\r\n        starIndexToAddress[0] = owner;\r\n        Assign(owner, 0, starIndexToSTRZName[0], starIndexToSTRZMasterName[0]);\r\n\r\n        //Odyssey 2001\r\n        starIndexToSTRZMasterName[2001] = \"Odyssey\";\r\n        starIndexToAddress[2001] = owner;\r\n        Assign(owner, 2001, starIndexToSTRZName[2001], starIndexToSTRZMasterName[2001]);\r\n\r\n        //Delta Velorum - 119006\r\n        starIndexToSTRZMasterName[119006] = \"Delta Velorum\";\r\n        starIndexToAddress[119006] = owner;\r\n        Assign(owner, 119006, starIndexToSTRZName[119006], starIndexToSTRZMasterName[119006]);\r\n\r\n        //Gamma Camelopardalis - 119088\r\n        starIndexToSTRZMasterName[119088] = \"Gamma Camelopardalis\";\r\n        starIndexToAddress[119088] = owner;\r\n        Assign(owner, 119088, starIndexToSTRZName[119088], starIndexToSTRZMasterName[119088]);\r\n\r\n        //Capella - 119514\r\n        starIndexToSTRZMasterName[119514] = \"Capella\";\r\n        starIndexToAddress[119514] = owner;\r\n        Assign(owner, 119514, starIndexToSTRZName[119514], starIndexToSTRZMasterName[119514]);\r\n\r\n    }\r\n\r\n\r\n    function reserveStarsForOwner(uint maxForThisRun) {              //Assign groups of stars to the owner\r\n        if (msg.sender != owner) throw;\r\n        if (numberOfStarsReserved >= numberOfStarsToReserve) throw;\r\n        uint numberStarsReservedThisRun = 0;\r\n        while (numberOfStarsReserved < numberOfStarsToReserve && numberStarsReservedThisRun < maxForThisRun) {\r\n            starIndexToAddress[nextStarIndexToAssign] = msg.sender;\r\n            Assign(msg.sender, nextStarIndexToAssign,starIndexToSTRZName[nextStarIndexToAssign], starIndexToSTRZMasterName[nextStarIndexToAssign]);\r\n            numberStarsReservedThisRun++;\r\n            nextStarIndexToAssign++;\r\n        }\r\n        starsRemainingToAssign -= numberStarsReservedThisRun;\r\n        numberOfStarsReserved += numberStarsReservedThisRun;\r\n        balanceOf[msg.sender] += numberStarsReservedThisRun;\r\n    }\r\n\r\n    function setGivenName(uint starIndex, string name) {\r\n        if (starIndexToAddress[starIndex] != msg.sender) throw;     //Only allow star owner to change GivenName\r\n        starIndexToSTRZName[starIndex] = name;\r\n        Assign(msg.sender, starIndex, starIndexToSTRZName[starIndex], starIndexToSTRZMasterName[starIndex]);  //Update Info\r\n    }\r\n\r\n    function setMasterName(uint starIndex, string name) {\r\n        if (msg.sender != owner) throw;                             //Only allow contract owner to change MasterName\r\n        if (starIndexToAddress[starIndex] != owner) throw;          //Only allow contract owner to change MasterName if they are owner of the star\r\n       \r\n        starIndexToSTRZMasterName[starIndex] = name;\r\n        Assign(msg.sender, starIndex, starIndexToSTRZName[starIndex], starIndexToSTRZMasterName[starIndex]);  //Update Info\r\n    }\r\n\r\n    function getMinMax(){\r\n        StarMinMax(MinStarIndexAvailable,MaxStarIndexAvailable, initialPrice);\r\n    }\r\n\r\n    function setMinMax(uint256 MaxStarIndexHolder, uint256 MinStarIndexHolder) {\r\n        if (msg.sender != owner) throw;\r\n        MaxStarIndexAvailable = MaxStarIndexHolder;\r\n        MinStarIndexAvailable = MinStarIndexHolder;\r\n        StarMinMax(MinStarIndexAvailable,MaxStarIndexAvailable, initialPrice);\r\n    }\r\n\r\n    function setStarInitialPrice(uint256 initialPriceHolder) {\r\n        if (msg.sender != owner) throw;\r\n        initialPrice = initialPriceHolder;\r\n        StarMinMax(MinStarIndexAvailable,MaxStarIndexAvailable, initialPrice);\r\n    }\r\n\r\n    function setTransferPrice(uint256 transferPriceHolder){\r\n        if (msg.sender != owner) throw;\r\n        transferPrice = transferPriceHolder;\r\n    }\r\n\r\n    function getStar(uint starIndex, string strSTRZName, string strSTRZMasterName) {\r\n        if (msg.sender != owner) throw;\r\n       \r\n        if (starIndexToAddress[starIndex] != 0x0) throw;\r\n\r\n        starIndexToSTRZName[starIndex] = strSTRZName;\r\n        starIndexToSTRZMasterName[starIndex] = strSTRZMasterName;\r\n\r\n        starIndexToAddress[starIndex] = msg.sender;\r\n    \r\n        balanceOf[msg.sender]++;\r\n        Assign(msg.sender, starIndex, starIndexToSTRZName[starIndex], starIndexToSTRZMasterName[starIndex]);\r\n    }\r\n\r\n    \r\n    function transferStar(address to, uint starIndex) payable {\r\n        if (starIndexToAddress[starIndex] != msg.sender) throw;\r\n        if (msg.value < transferPrice) throw;                       // Didn't send enough ETH\r\n\r\n        starIndexToAddress[starIndex] = to;\r\n        balanceOf[msg.sender]--;\r\n        balanceOf[to]++;\r\n        StarTransfer(msg.sender, to, starIndex);\r\n        Assign(to, starIndex, starIndexToSTRZName[starIndex], starIndexToSTRZMasterName[starIndex]);\r\n        pendingWithdrawals[owner] += msg.value;\r\n        //kill any bids and refund bid\r\n        Bid bid = starBids[starIndex];\r\n        if (bid.hasBid) {\r\n            pendingWithdrawals[bid.bidder] += bid.value;\r\n            starBids[starIndex] = Bid(false, starIndex, 0x0, 0);\r\n            StarBidWithdrawn(starIndex, bid.value, to);\r\n        }\r\n        \r\n        //Remove any offers\r\n        Offer offer = starsOfferedForSale[starIndex];\r\n        if (offer.isForSale) {\r\n             starsOfferedForSale[starIndex] = Offer(false, starIndex, msg.sender, 0, 0x0);\r\n        }\r\n\r\n    }\r\n\r\n    function starNoLongerForSale(uint starIndex) {\r\n        if (starIndexToAddress[starIndex] != msg.sender) throw;\r\n        starsOfferedForSale[starIndex] = Offer(false, starIndex, msg.sender, 0, 0x0);\r\n        StarNoLongerForSale(starIndex);\r\n        Bid bid = starBids[starIndex];\r\n        if (bid.bidder == msg.sender ) {\r\n            // Kill bid and refund value\r\n            pendingWithdrawals[msg.sender] += bid.value;\r\n            starBids[starIndex] = Bid(false, starIndex, 0x0, 0);\r\n            StarBidWithdrawn(starIndex, bid.value, msg.sender);\r\n        }\r\n    }\r\n\r\n    function offerStarForSale(uint starIndex, uint minSalePriceInWei) {\r\n        if (starIndexToAddress[starIndex] != msg.sender) throw;\r\n        starsOfferedForSale[starIndex] = Offer(true, starIndex, msg.sender, minSalePriceInWei, 0x0);\r\n        StarOffered(starIndex, minSalePriceInWei, msg.sender, 0x0);\r\n    }\r\n\r\n    function offerStarForSaleToAddress(uint starIndex, uint minSalePriceInWei, address toAddress) {\r\n        if (starIndexToAddress[starIndex] != msg.sender) throw;\r\n        starsOfferedForSale[starIndex] = Offer(true, starIndex, msg.sender, minSalePriceInWei, toAddress);\r\n        StarOffered(starIndex, minSalePriceInWei, msg.sender, toAddress);\r\n    }\r\n\r\n    //New owner buys a star that has been offered\r\n    function buyStar(uint starIndex) payable {\r\n        Offer offer = starsOfferedForSale[starIndex];\r\n        if (!offer.isForSale) throw;                                            // star not actually for sale\r\n        if (offer.onlySellTo != 0x0 && offer.onlySellTo != msg.sender) throw;   // star not supposed to be sold to this user\r\n        if (msg.value < offer.minValue) throw;                                  // Didn't send enough ETH\r\n        if (offer.seller != starIndexToAddress[starIndex]) throw;               // Seller no longer owner of star\r\n\r\n        address seller = offer.seller;\r\n        \r\n        balanceOf[seller]--;\r\n        balanceOf[msg.sender]++;\r\n\r\n        Assign(msg.sender, starIndex,starIndexToSTRZName[starIndex], starIndexToSTRZMasterName[starIndex]);\r\n\r\n        uint amountseller = msg.value*97/100;\r\n        uint amountowner = msg.value*3/100;           //Owner of contract receives 3% registration fee\r\n\r\n        pendingWithdrawals[owner] += amountowner;    \r\n        pendingWithdrawals[seller] += amountseller;\r\n\r\n        starIndexToAddress[starIndex] = msg.sender;\r\n \r\n        starNoLongerForSale(starIndex);\r\n    \r\n        string STRZName = starIndexToSTRZName[starIndex];\r\n        string STRZMasterName = starIndexToSTRZMasterName[starIndex];\r\n\r\n        StarBought(starIndex, msg.value, offer.seller, msg.sender, STRZName, STRZMasterName, MinStarIndexAvailable, MaxStarIndexAvailable);\r\n\r\n        Bid bid = starBids[starIndex];\r\n        if (bid.bidder == msg.sender) {\r\n            // Kill bid and refund value\r\n            pendingWithdrawals[msg.sender] += bid.value;\r\n            starBids[starIndex] = Bid(false, starIndex, 0x0, 0);\r\n            StarBidWithdrawn(starIndex, bid.value, msg.sender);\r\n        }\r\n\r\n    }\r\n\r\n    function buyStarInitial(uint starIndex, string strSTRZName) payable {\r\n         \r\n    // We only allow the Nextavailable star to be sold \r\n        if (starIndex > MaxStarIndexAvailable) throw;     //Above Current Offering Range\r\n        if (starIndex < MinStarIndexAvailable) throw;       //Below Current Offering Range\r\n        if (starIndexToAddress[starIndex] != 0x0) throw;    //Star is already owned\r\n        if (msg.value < initialPrice) throw;               // Didn't send enough ETH\r\n        \r\n        starIndexToAddress[starIndex] = msg.sender;   \r\n        starIndexToSTRZName[starIndex] = strSTRZName;      //Assign the star to new owner\r\n        \r\n        balanceOf[msg.sender]++;                            //Update the STRZ token balance for the new owner\r\n        pendingWithdrawals[owner] += msg.value;\r\n\r\n        string STRZMasterName = starIndexToSTRZMasterName[starIndex];\r\n        StarBought(starIndex, msg.value, owner, msg.sender, strSTRZName, STRZMasterName ,MinStarIndexAvailable, MaxStarIndexAvailable);\r\n\r\n        Assign(msg.sender, starIndex, starIndexToSTRZName[starIndex], starIndexToSTRZMasterName[starIndex]);\r\n        //Assign(msg.sender, starIndex);\r\n    }\r\n\r\n    function enterBidForStar(uint starIndex) payable {\r\n\r\n        if (starIndex >= totalSupply) throw;             \r\n        if (starIndexToAddress[starIndex] == 0x0) throw;\r\n        if (starIndexToAddress[starIndex] == msg.sender) throw;\r\n        if (msg.value == 0) throw;\r\n\r\n        Bid existing = starBids[starIndex];\r\n        if (msg.value <= existing.value) throw;\r\n        if (existing.value > 0) {\r\n            // Refund the failing bid\r\n            pendingWithdrawals[existing.bidder] += existing.value;\r\n        }\r\n\r\n        starBids[starIndex] = Bid(true, starIndex, msg.sender, msg.value);\r\n        StarBidEntered(starIndex, msg.value, msg.sender);\r\n    }\r\n\r\n    function acceptBidForStar(uint starIndex, uint minPrice) {\r\n        if (starIndex >= totalSupply) throw;\r\n        //if (!allStarsAssigned) throw;                \r\n        if (starIndexToAddress[starIndex] != msg.sender) throw;\r\n        address seller = msg.sender;\r\n        Bid bid = starBids[starIndex];\r\n        if (bid.value == 0) throw;\r\n        if (bid.value < minPrice) throw;\r\n\r\n        starIndexToAddress[starIndex] = bid.bidder;\r\n        balanceOf[seller]--;\r\n        balanceOf[bid.bidder]++;\r\n        Transfer(seller, bid.bidder, 1);\r\n\r\n        starsOfferedForSale[starIndex] = Offer(false, starIndex, bid.bidder, 0, 0x0);\r\n        \r\n        uint amount = bid.value;\r\n        uint amountseller = amount*97/100;\r\n        uint amountowner = amount*3/100;\r\n        \r\n        pendingWithdrawals[seller] += amountseller;\r\n        pendingWithdrawals[owner] += amountowner;               //Registration Fee 3%\r\n\r\n        string STRZGivenName = starIndexToSTRZName[starIndex];\r\n        string STRZMasterName = starIndexToSTRZMasterName[starIndex];\r\n        StarBought(starIndex, bid.value, seller, bid.bidder, STRZGivenName, STRZMasterName, MinStarIndexAvailable, MaxStarIndexAvailable);\r\n        StarBidWithdrawn(starIndex, bid.value, bid.bidder);\r\n        Assign(bid.bidder, starIndex, starIndexToSTRZName[starIndex], starIndexToSTRZMasterName[starIndex]);\r\n        StarNoLongerForSale(starIndex);\r\n\r\n        starBids[starIndex] = Bid(false, starIndex, 0x0, 0);\r\n    }\r\n\r\n    function withdrawBidForStar(uint starIndex) {\r\n        if (starIndex >= totalSupply) throw;            \r\n        if (starIndexToAddress[starIndex] == 0x0) throw;\r\n        if (starIndexToAddress[starIndex] == msg.sender) throw;\r\n\r\n        Bid bid = starBids[starIndex];\r\n        if (bid.bidder != msg.sender) throw;\r\n        StarBidWithdrawn(starIndex, bid.value, msg.sender);\r\n        uint amount = bid.value;\r\n        starBids[starIndex] = Bid(false, starIndex, 0x0, 0);\r\n        // Refund the bid money\r\n        pendingWithdrawals[msg.sender] += amount;\r\n    \r\n    }\r\n\r\n    function withdraw() {\r\n        //if (!allStarsAssigned) throw;\r\n        uint amount = pendingWithdrawals[msg.sender];\r\n        // Remember to zero the pending refund before\r\n        // sending to prevent re-entrancy attacks\r\n        pendingWithdrawals[msg.sender] = 0;\r\n        msg.sender.send(amount);\r\n    }\r\n\r\n    function withdrawPartial(uint withdrawAmount) {\r\n        //Only available to owner\r\n        //Withdraw partial amount of the pending withdrawal\r\n        if (msg.sender != owner) throw;\r\n        if (withdrawAmount > pendingWithdrawals[msg.sender]) throw;\r\n\r\n        pendingWithdrawals[msg.sender] -= withdrawAmount;\r\n        msg.sender.send(withdrawAmount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"starIndexToSTRZName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transferPriceHolder\",\"type\":\"uint256\"}],\"name\":\"setTransferPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawPartial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"starIndexToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfStarsReserved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawBidForStar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starIndex\",\"type\":\"uint256\"}],\"name\":\"buyStar\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"starBids\",\"outputs\":[{\"name\":\"hasBid\",\"type\":\"bool\"},{\"name\":\"starIndex\",\"type\":\"uint256\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextStarIndexToAssign\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starIndex\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setMasterName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starIndex\",\"type\":\"uint256\"},{\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"acceptBidForStar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starIndex\",\"type\":\"uint256\"},{\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"}],\"name\":\"offerStarForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMinMax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starIndex\",\"type\":\"uint256\"}],\"name\":\"starNoLongerForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"MaxStarIndexHolder\",\"type\":\"uint256\"},{\"name\":\"MinStarIndexHolder\",\"type\":\"uint256\"}],\"name\":\"setMinMax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starIndex\",\"type\":\"uint256\"},{\"name\":\"strSTRZName\",\"type\":\"string\"}],\"name\":\"buyStarInitial\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfStarsToReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starIndex\",\"type\":\"uint256\"}],\"name\":\"enterBidForStar\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxStarIndexAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxForThisRun\",\"type\":\"uint256\"}],\"name\":\"reserveStarsForOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starIndex\",\"type\":\"uint256\"},{\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"},{\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"offerStarForSaleToAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starsRemainingToAssign\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"starsOfferedForSale\",\"outputs\":[{\"name\":\"isForSale\",\"type\":\"bool\"},{\"name\":\"starIndex\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"minValue\",\"type\":\"uint256\"},{\"name\":\"onlySellTo\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"starIndex\",\"type\":\"uint256\"}],\"name\":\"transferStar\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starIndex\",\"type\":\"uint256\"},{\"name\":\"strSTRZName\",\"type\":\"string\"},{\"name\":\"strSTRZMasterName\",\"type\":\"string\"}],\"name\":\"getStar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"initialPriceHolder\",\"type\":\"uint256\"}],\"name\":\"setStarInitialPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"starIndexToSTRZMasterName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MinStarIndexAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starIndex\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setGivenName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"starIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"GivenName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"MasterName\",\"type\":\"string\"}],\"name\":\"Assign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"starIndex\",\"type\":\"uint256\"}],\"name\":\"StarTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"starIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minValue\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"StarOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"starIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"StarBidEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"starIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"StarBidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"starIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"StarBidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"starIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"GivenName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"MasterName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"MinStarAvailable\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"MaxStarAvailable\",\"type\":\"uint256\"}],\"name\":\"StarBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"starIndex\",\"type\":\"uint256\"}],\"name\":\"StarNoLongerForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"MinStarAvailable\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"MaxStarAvailable\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Price\",\"type\":\"uint256\"}],\"name\":\"StarMinMax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"starIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"}]","ContractName":"CryptoStars","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f2174277e5642550fe0f94a16e191f8d469ce273d3a6169f9ececdc3273e2c1d"}]}