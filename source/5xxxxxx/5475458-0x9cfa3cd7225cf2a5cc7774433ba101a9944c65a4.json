{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract AddressesFilterFeature is Ownable {\r\n\r\n  mapping(address => bool) public allowedAddresses;\r\n\r\n  function addAllowedAddress(address allowedAddress) public onlyOwner {\r\n    allowedAddresses[allowedAddress] = true;\r\n  }\r\n\r\n  function removeAllowedAddress(address allowedAddress) public onlyOwner {\r\n    allowedAddresses[allowedAddress] = false;\r\n  }\r\n\r\n}\r\n\r\ncontract ValueBonusFeature is Ownable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  uint percentRate = 1000;\r\n\r\n  struct ValueBonus {\r\n    uint from;\r\n    uint bonus;\r\n  }\r\n\r\n  ValueBonus[] public valueBonuses;\r\n\r\n  function addValueBonus(uint from, uint bonus) public onlyOwner {\r\n    valueBonuses.push(ValueBonus(from, bonus));\r\n  }\r\n\r\n  function getValueBonusTokens(uint tokens, uint invested) public view returns(uint) {\r\n    uint valueBonus = getValueBonus(invested);\r\n    if(valueBonus == 0) {\r\n      return 0;\r\n    }\r\n    return tokens.mul(valueBonus).div(percentRate);\r\n  }\r\n\r\n  function getValueBonus(uint value) public view returns(uint) {\r\n    uint bonus = 0;\r\n    for(uint i = 0; i < valueBonuses.length; i++) {\r\n      if(value >= valueBonuses[i].from) {\r\n        bonus = valueBonuses[i].bonus;\r\n      } else {\r\n        return bonus;\r\n      }\r\n    }\r\n    return bonus;\r\n  }\r\n\r\n}\r\n\r\ncontract WalletProvider is Ownable {\r\n\r\n  address public wallet;\r\n\r\n  function setWallet(address newWallet) public onlyOwner {\r\n    wallet = newWallet;\r\n  }\r\n\r\n}\r\n\r\ncontract WalletsPercents is Ownable {\r\n\r\n  address[] public wallets;\r\n\r\n  mapping (address => uint) percents;\r\n\r\n  function addWallet(address wallet, uint percent) public onlyOwner {\r\n    wallets.push(wallet);\r\n    percents[wallet] = percent;\r\n  }\r\n \r\n  function cleanWallets() public onlyOwner {\r\n    wallets.length = 0;\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract PercentRateProvider {\r\n\r\n  uint public percentRate = 100;\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract PercentRateFeature is Ownable, PercentRateProvider {\r\n\r\n  function setPercentRate(uint newPercentRate) public onlyOwner {\r\n    percentRate = newPercentRate;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract InvestedProvider is Ownable {\r\n\r\n  uint public invested;\r\n\r\n}\r\n\r\ncontract ReceivingContractCallback {\r\n\r\n  function tokenFallback(address _from, uint _value) public;\r\n\r\n}\r\n\r\ncontract RetrieveTokensFeature is Ownable {\r\n\r\n  function retrieveTokens(address to, address anotherToken) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(to, alienToken.balanceOf(this));\r\n  }\r\n\r\n}\r\n\r\ncontract StagedCrowdsale is Ownable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  struct Milestone {\r\n    uint period;\r\n    uint bonus;\r\n  }\r\n\r\n  uint public totalPeriod;\r\n\r\n  Milestone[] public milestones;\r\n\r\n  function milestonesCount() public view returns(uint) {\r\n    return milestones.length;\r\n  }\r\n\r\n  function addMilestone(uint period, uint bonus) public onlyOwner {\r\n    require(period > 0);\r\n    milestones.push(Milestone(period, bonus));\r\n    totalPeriod = totalPeriod.add(period);\r\n  }\r\n\r\n  function removeMilestone(uint8 number) public onlyOwner {\r\n    require(number < milestones.length);\r\n    Milestone storage milestone = milestones[number];\r\n    totalPeriod = totalPeriod.sub(milestone.period);\r\n\r\n    delete milestones[number];\r\n\r\n    for (uint i = number; i < milestones.length - 1; i++) {\r\n      milestones[i] = milestones[i+1];\r\n    }\r\n\r\n    milestones.length--;\r\n  }\r\n\r\n  function changeMilestone(uint8 number, uint period, uint bonus) public onlyOwner {\r\n    require(number < milestones.length);\r\n    Milestone storage milestone = milestones[number];\r\n\r\n    totalPeriod = totalPeriod.sub(milestone.period);\r\n\r\n    milestone.period = period;\r\n    milestone.bonus = bonus;\r\n\r\n    totalPeriod = totalPeriod.add(period);\r\n  }\r\n\r\n  function insertMilestone(uint8 numberAfter, uint period, uint bonus) public onlyOwner {\r\n    require(numberAfter < milestones.length);\r\n\r\n    totalPeriod = totalPeriod.add(period);\r\n\r\n    milestones.length++;\r\n\r\n    for (uint i = milestones.length - 2; i > numberAfter; i--) {\r\n      milestones[i + 1] = milestones[i];\r\n    }\r\n\r\n    milestones[numberAfter + 1] = Milestone(period, bonus);\r\n  }\r\n\r\n  function clearMilestones() public onlyOwner {\r\n    require(milestones.length > 0);\r\n    for (uint i = 0; i < milestones.length; i++) {\r\n      delete milestones[i];\r\n    }\r\n    milestones.length -= milestones.length;\r\n    totalPeriod = 0;\r\n  }\r\n\r\n  function lastSaleDate(uint start) public view returns(uint) {\r\n    return start + totalPeriod * 1 days;\r\n  }\r\n\r\n  function currentMilestone(uint start) public view returns(uint) {\r\n    uint previousDate = start;\r\n    for(uint i=0; i < milestones.length; i++) {\r\n      if(now >= previousDate && now < previousDate + milestones[i].period * 1 days) {\r\n        return i;\r\n      }\r\n      previousDate = previousDate.add(milestones[i].period * 1 days);\r\n    }\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract TokenProvider is Ownable {\r\n\r\n  MintableToken public token;\r\n\r\n  function setToken(address newToken) public onlyOwner {\r\n    token = MintableToken(newToken);\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is AddressesFilterFeature, StandardToken {\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  address public saleAgent;\r\n\r\n  mapping (address => uint) public initialBalances;\r\n\r\n  uint public vestingPercent;\r\n\r\n  uint public constant percentRate = 100;\r\n\r\n  modifier notLocked(address _from, uint _value) {\r\n    if(!(_from == owner || _from == saleAgent || allowedAddresses[_from])) {\r\n      require(mintingFinished);\r\n      if((vestingPercent <= percentRate) && (vestingPercent != 0)) {\r\n        uint minLockedBalance = initialBalances[_from].mul(vestingPercent).div(percentRate);\r\n        require(minLockedBalance <= balances[_from].sub(_value));\r\n      }\r\n    }\r\n    _;\r\n  }\r\n\r\n  function setVestingPercent(uint newVestingPercent) public {\r\n    require(msg.sender == saleAgent || msg.sender == owner);\r\n    vestingPercent = newVestingPercent;\r\n  }\r\n\r\n  function setSaleAgent(address newSaleAgnet) public {\r\n    require(msg.sender == saleAgent || msg.sender == owner);\r\n    saleAgent = newSaleAgnet;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) public returns (bool) {\r\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\r\n    \r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n\r\n    initialBalances[_to] = balances[_to];\r\n\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public returns (bool) {\r\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public notLocked(msg.sender, _value)  returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public notLocked(from, value) returns (bool) {\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n\r\n}\r\n\r\ncontract Token is MintableToken {\r\n\r\n  string public constant name = \"Worldopoly\";\r\n\r\n  string public constant symbol = \"WPT\";\r\n\r\n  uint32 public constant decimals = 18;\r\n\r\n  mapping(address => bool)  public registeredCallbacks;\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    return processCallback(super.transfer(_to, _value), msg.sender, _to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    return processCallback(super.transferFrom(_from, _to, _value), _from, _to, _value);\r\n  }\r\n\r\n  function registerCallback(address callback) public onlyOwner {\r\n    registeredCallbacks[callback] = true;\r\n  }\r\n\r\n  function deregisterCallback(address callback) public onlyOwner {\r\n    registeredCallbacks[callback] = false;\r\n  }\r\n\r\n  function processCallback(bool result, address from, address to, uint value) internal returns(bool) {\r\n    if (result && registeredCallbacks[to]) {\r\n      ReceivingContractCallback targetCallback = ReceivingContractCallback(to);\r\n      targetCallback.tokenFallback(from, value);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\ncontract MintTokensInterface is TokenProvider {\r\n\r\n  function mintTokens(address to, uint tokens) internal;\r\n\r\n}\r\n\r\ncontract MintTokensFeature is MintTokensInterface {\r\n\r\n  function mintTokens(address to, uint tokens) internal {\r\n    token.mint(to, tokens);\r\n  }\r\n\r\n}\r\n\r\ncontract CommonSale is PercentRateFeature, InvestedProvider, WalletProvider, RetrieveTokensFeature, MintTokensFeature {\r\n\r\n  using SafeMath for uint;\r\n\r\n  address public directMintAgent;\r\n\r\n  uint public price;\r\n\r\n  uint public start;\r\n\r\n  uint public minInvestedLimit;\r\n\r\n  uint public hardcap;\r\n\r\n  modifier isUnderHardcap() {\r\n    require(invested <= hardcap);\r\n    _;\r\n  }\r\n\r\n  function setHardcap(uint newHardcap) public onlyOwner {\r\n    hardcap = newHardcap;\r\n  }\r\n\r\n  modifier onlyDirectMintAgentOrOwner() {\r\n    require(directMintAgent == msg.sender || owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier minInvestLimited(uint value) {\r\n    require(value >= minInvestedLimit);\r\n    _;\r\n  }\r\n\r\n  function setStart(uint newStart) public onlyOwner {\r\n    start = newStart;\r\n  }\r\n\r\n  function setMinInvestedLimit(uint newMinInvestedLimit) public onlyOwner {\r\n    minInvestedLimit = newMinInvestedLimit;\r\n  }\r\n\r\n  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\r\n    directMintAgent = newDirectMintAgent;\r\n  }\r\n\r\n  function setPrice(uint newPrice) public onlyOwner {\r\n    price = newPrice;\r\n  }\r\n\r\n  function calculateTokens(uint _invested) internal returns(uint);\r\n\r\n  function mintTokensExternal(address to, uint tokens) public onlyDirectMintAgentOrOwner {\r\n    mintTokens(to, tokens);\r\n  }\r\n\r\n  function endSaleDate() public view returns(uint);\r\n\r\n  function mintTokensByETHExternal(address to, uint _invested) public onlyDirectMintAgentOrOwner returns(uint) {\r\n    updateInvested(_invested);\r\n    return mintTokensByETH(to, _invested);\r\n  }\r\n\r\n  function mintTokensByETH(address to, uint _invested) internal isUnderHardcap returns(uint) {\r\n    uint tokens = calculateTokens(_invested);\r\n    mintTokens(to, tokens);\r\n    return tokens;\r\n  }\r\n\r\n  function transferToWallet(uint value) internal {\r\n    wallet.transfer(value);\r\n  }\r\n\r\n  function updateInvested(uint value) internal {\r\n    invested = invested.add(value);\r\n  }\r\n\r\n  function fallback() internal minInvestLimited(msg.value) returns(uint) {\r\n    require(now >= start && now < endSaleDate());\r\n    transferToWallet(msg.value);\r\n    updateInvested(msg.value);\r\n    return mintTokensByETH(msg.sender, msg.value);\r\n  }\r\n\r\n  function () public payable {\r\n    fallback();\r\n  }\r\n\r\n}\r\n\r\ncontract AssembledCommonSale is ValueBonusFeature, CommonSale {\r\n\r\n}\r\n\r\n\r\n\r\ncontract DevFeeFeature is CommonSale {\r\n\r\n  using SafeMath for uint;\r\n\r\n  uint public constant devLimit = 19500000000000000000;\r\n\r\n  uint public devBalance;\r\n\r\n  address public constant devWallet = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770;\r\n\r\n  function transferToWallet(uint value) internal {\r\n    uint toDev = devLimit - devBalance;\r\n    if(toDev > 0) {\r\n      if(toDev > value) {\r\n        toDev = value;\r\n      } else { \r\n        wallet.transfer(value.sub(toDev));\r\n      }\r\n      devWallet.transfer(toDev);\r\n      devBalance = devBalance.add(toDev);\r\n    } else {\r\n      wallet.transfer(value);\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Cutted {\r\n    \r\n  function balanceOf(address who) public constant returns (uint256);\r\n  \r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  \r\n}\r\n\r\ncontract ExtendedWalletsMintTokensFeature is MintTokensInterface, WalletsPercents {\r\n\r\n  using SafeMath for uint;\r\n\r\n  uint public percentRate = 1000;\r\n\r\n  function mintExtendedTokens() public onlyOwner {\r\n    uint summaryTokensPercent = 0;\r\n    for(uint i = 0; i < wallets.length; i++) {\r\n      summaryTokensPercent = summaryTokensPercent.add(percents[wallets[i]]);\r\n    }\r\n    uint mintedTokens = token.totalSupply();\r\n    uint allTokens = mintedTokens.mul(percentRate).div(percentRate.sub(summaryTokensPercent));\r\n    for(uint k = 0; k < wallets.length; k++) {\r\n      mintTokens(wallets[k], allTokens.mul(percents[wallets[k]]).div(percentRate));\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ITO is ExtendedWalletsMintTokensFeature, AssembledCommonSale {\r\n\r\n  uint public period;\r\n\r\n  uint public firstBonusPercent;\r\n\r\n  uint public firstBonusLimitPercent;\r\n\r\n  function setFirstBonusPercent(uint newFirstBonusPercent) public onlyOwner {\r\n    firstBonusPercent = newFirstBonusPercent;\r\n  }\r\n\r\n  function setFirstBonusLimitPercent(uint newFirstBonusLimitPercent) public onlyOwner {\r\n    firstBonusLimitPercent = newFirstBonusLimitPercent;\r\n  }\r\n\r\n  function calculateTokens(uint _invested) internal returns(uint) {\r\n    uint tokens = _invested.mul(price).div(1 ether);\r\n    uint valueBonusTokens = getValueBonusTokens(tokens, _invested);\r\n    if(invested < hardcap.mul(firstBonusLimitPercent).div(percentRate)) {\r\n      tokens = tokens.add(tokens.mul(firstBonusPercent).div(percentRate));\r\n    }\r\n    return tokens.add(valueBonusTokens);\r\n  }\r\n\r\n  function setPeriod(uint newPeriod) public onlyOwner {\r\n    period = newPeriod;\r\n  }\r\n\r\n  function endSaleDate() public view returns(uint) {\r\n    return start.add(period * 1 days);\r\n  }\r\n\r\n  function finish() public onlyOwner {\r\n     mintExtendedTokens();\r\n     token.finishMinting();\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract NextSaleAgentFeature is Ownable {\r\n\r\n  address public nextSaleAgent;\r\n\r\n  function setNextSaleAgent(address newNextSaleAgent) public onlyOwner {\r\n    nextSaleAgent = newNextSaleAgent;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract PreITO is DevFeeFeature, NextSaleAgentFeature, StagedCrowdsale, AssembledCommonSale {\r\n\r\n  function calculateTokens(uint _invested) internal returns(uint) {\r\n    uint milestoneIndex = currentMilestone(start);\r\n    Milestone storage milestone = milestones[milestoneIndex];\r\n    uint tokens = _invested.mul(price).div(1 ether);\r\n    uint valueBonusTokens = getValueBonusTokens(tokens, _invested);\r\n    if(milestone.bonus > 0) {\r\n      tokens = tokens.add(tokens.mul(milestone.bonus).div(percentRate));\r\n    }\r\n    return tokens.add(valueBonusTokens);\r\n  }\r\n\r\n  function endSaleDate() public view returns(uint) {\r\n    return lastSaleDate(start);\r\n  }\r\n\r\n  function finish() public onlyOwner {\r\n    token.setSaleAgent(nextSaleAgent);\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Configurator is Ownable {\r\n\r\n  Token public token;\r\n\r\n  PreITO public preITO;\r\n\r\n  ITO public ito;\r\n\r\n  function deploy() public onlyOwner {\r\n\r\n    address manager = 0xB8A4799a4E2f10e4b30b6C6E9F762833C13eCDF4;\r\n\r\n    token = new Token();\r\n\r\n    preITO = new PreITO();\r\n    ito = new ITO();\r\n\r\n    commonConfigure(preITO);\r\n    commonConfigure(ito);\r\n\r\n    preITO.setWallet(0x28D1e6eeBf60b5eb747E2Ee7a185472Ae073Ab7e);\r\n    preITO.setStart(1524441600);\r\n    preITO.addMilestone(10, 200);\r\n    preITO.addMilestone(10, 150);\r\n    preITO.addMilestone(10, 100);\r\n    preITO.setHardcap(6282000000000000000000);\r\n\r\n    token.setSaleAgent(preITO);\r\n    token.setVestingPercent(100);\r\n\r\n    ito.setWallet(0x029fa7ef4E852Bb53CcbafA2308eE728320A5B8d);\r\n    ito.setStart(1527206400);\r\n    ito.setPeriod(44);\r\n    ito.setFirstBonusPercent(50);\r\n    ito.setFirstBonusLimitPercent(200);\r\n    ito.setHardcap(37697000000000000000000);\r\n\r\n    ito.addWallet(0xd4Dde5011e330f8bFB246ce60d163AA5900ba71E, 150);\r\n    ito.addWallet(0x752A9D3d59b8DFbd0798C70c59CAf4A95b5D896e, 50);\r\n    ito.addWallet(0xae3182c9B850843773714dC5384A38116F6ec135, 50);\r\n\r\n    preITO.setNextSaleAgent(ito);\r\n\r\n    token.transferOwnership(manager);\r\n    preITO.transferOwnership(manager);\r\n    ito.transferOwnership(manager);\r\n  }\r\n\r\n  function commonConfigure(AssembledCommonSale sale) internal {\r\n    sale.setPercentRate(1000);\r\n    sale.setMinInvestedLimit(100000000000000000);\r\n    sale.setPrice(3184000000000000000000);\r\n    sale.addValueBonus(3000000000000000000, 10);\r\n    sale.addValueBonus(6000000000000000000, 15);\r\n    sale.addValueBonus(9000000000000000000, 20);\r\n    sale.addValueBonus(12000000000000000000, 25);\r\n    sale.addValueBonus(15000000000000000000, 30);\r\n    sale.addValueBonus(21000000000000000000, 40);\r\n    sale.addValueBonus(30000000000000000000, 50);\r\n    sale.addValueBonus(48000000000000000000, 60);\r\n    sale.addValueBonus(75000000000000000000, 70);\r\n    sale.addValueBonus(120000000000000000000, 80);\r\n    sale.addValueBonus(150000000000000000000, 90);\r\n    sale.addValueBonus(225000000000000000000, 100);\r\n    sale.addValueBonus(300000000000000000000, 110);\r\n    sale.addValueBonus(450000000000000000000, 120);\r\n    sale.addValueBonus(600000000000000000000, 130);\r\n    sale.addValueBonus(900000000000000000000, 150);\r\n    sale.setToken(token);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"deploy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preITO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ito\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Configurator","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c556495a2f483cba5b24e69c0dbe73763ccb4997b3327493d0866328652877e9"}]}