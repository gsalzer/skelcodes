{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\n \r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Standard\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Interface {\r\n     function totalSupply() public constant returns (uint);\r\n     function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n     function transfer(address to, uint tokens) public returns (bool success);\r\n     function approve(address spender, uint tokens) public returns (bool success);\r\n     function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n     event Transfer(address indexed from, address indexed to, uint tokens);\r\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\ncontract EtheeraToken is ERC20Interface,Ownable {\r\n\r\n    using SafeMath for uint256;\r\n   \r\n    mapping(address => uint256) tokenBalances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    string public constant name = \"ETHEERA\";\r\n    string public constant symbol = \"ETA\";\r\n    uint256 public constant decimals = 18;\r\n\r\n   uint256 public constant INITIAL_SUPPLY = 75000000000;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(tokenBalances[msg.sender]>=_value);\r\n    tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(_value);\r\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n    return tokenBalances[_owner];\r\n  }\r\n  \r\n  \r\n     /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= tokenBalances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    tokenBalances[_from] = tokenBalances[_from].sub(_value);\r\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n     /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n     // ------------------------------------------------------------------------\r\n     // Total supply\r\n     // ------------------------------------------------------------------------\r\n     function totalSupply() public constant returns (uint) {\r\n         return totalSupply  - tokenBalances[address(0)];\r\n     }\r\n     \r\n    \r\n     \r\n     // ------------------------------------------------------------------------\r\n     // Returns the amount of tokens approved by the owner that can be\r\n     // transferred to the spender's account\r\n     // ------------------------------------------------------------------------\r\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n         return allowed[tokenOwner][spender];\r\n     }\r\n     \r\n     /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n     \r\n     // ------------------------------------------------------------------------\r\n     // Don't accept ETH\r\n     // ------------------------------------------------------------------------\r\n     function () public payable {\r\n         revert();\r\n     }   \r\n\r\n\r\n  \r\n   event Debug(string message, address addr, uint256 number);\r\n   /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens.\r\n   */\r\n    function EtheeraToken(address wallet) public {\r\n        owner = msg.sender;\r\n        totalSupply = INITIAL_SUPPLY * 10 ** 18;\r\n        tokenBalances[wallet] = totalSupply;   //Since we divided the token into 10^18 parts\r\n    }\r\n\r\n    function mint(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {\r\n      require(tokenBalances[wallet] >= tokenAmount);               // checks if it has enough to sell\r\n      tokenBalances[buyer] = tokenBalances[buyer].add(tokenAmount);                  // adds the amount to buyer's balance\r\n      tokenBalances[wallet] = tokenBalances[wallet].sub(tokenAmount);                        // subtracts amount from seller's balance\r\n      Transfer(wallet, buyer, tokenAmount); \r\n      totalSupply = totalSupply.sub(tokenAmount); \r\n    }\r\n    \r\n   \r\n}\r\ncontract EtheeraCrowdsale {\r\n  using SafeMath for uint256;\r\n \r\n  // The token being sold\r\n  EtheeraToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint public startTime;\r\n  uint public endTime;\r\n\r\n  // address where funds are collected\r\n  // address where tokens are deposited and from where we send tokens to buyers\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public ratePerWei = 500000;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  // flags to show whether soft cap / hard cap is reached\r\n  bool public isSoftCapReached = false;\r\n  bool public isHardCapReached = false;\r\n    \r\n  //this flag is set to true when ICO duration is over and soft cap is not reached  \r\n  bool public refundToBuyers = false;\r\n    \r\n  // Soft cap of the ICO in ethers  \r\n  uint256 public softCap = 6000;\r\n    \r\n  //Hard cap of the ICO in ethers\r\n  uint256 public hardCap = 105000;\r\n  \r\n  //total tokens that have been sold  \r\n  uint256 public tokens_sold = 0;\r\n\r\n  //total tokens that are to be sold - this is 70% of the total supply i.e. 52500000000\r\n  uint maxTokensForSale = 52500000000;\r\n  \r\n  //tokens that are reserved for the etheera team - this is 30% of the total supply  \r\n  uint256 public tokensForReservedFund = 0;\r\n  uint256 public tokensForAdvisors = 0;\r\n  uint256 public tokensForFoundersAndTeam = 0;\r\n  uint256 public tokensForMarketing = 0;\r\n  uint256 public tokensForTournament = 0;\r\n\r\n  bool ethersSentForRefund = false;\r\n\r\n  // the buyers of tokens and the amount of ethers they sent in\r\n  mapping(address=>uint256) usersThatBoughtETA;\r\n \r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event ICOStarted(uint256 startTime, uint256 endTime);\r\n  function EtheeraCrowdsale(uint256 _startTime, address _wallet) public {\r\n\r\n    startTime = _startTime;\r\n    endTime = startTime.add(79 days);\r\n\r\n    require(endTime >= startTime);\r\n    require(_wallet != 0x0);\r\n\r\n    wallet = _wallet;\r\n    token = createTokenContract(wallet);\r\n    \r\n    ICOStarted(startTime,endTime);\r\n\r\n  }\r\n\r\n  function createTokenContract(address wall) internal returns (EtheeraToken) {\r\n    return new EtheeraToken(wall);\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () public payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  //determine the bonus with respect to time elapsed\r\n  function determineBonus(uint tokens) internal view returns (uint256 bonus) {\r\n    \r\n    uint256 timeElapsed = now - startTime;\r\n    uint256 timeElapsedInDays = timeElapsed.div(1 days);\r\n     \r\n    if (timeElapsedInDays <=35)\r\n    {\r\n        //early sale\r\n        //valid for 10-02-2018 to 16-03-2018 i.e. 0 to 35th days\r\n        //40% BONUS\r\n        bonus = tokens.mul(40);\r\n        bonus = bonus.div(100);\r\n       \r\n    }\r\n    else if (timeElapsedInDays>35 && timeElapsedInDays <=50)\r\n    {\r\n        //sale\r\n        //from 17.03.2018 - 31.03.2018 i.e. 35th to 50th days\r\n       \r\n        //20% bonus\r\n        bonus = tokens.mul(20);\r\n        bonus = bonus.div(100);\r\n        \r\n       \r\n    }\r\n    else if (timeElapsedInDays>50 && timeElapsedInDays <=64)\r\n    {\r\n        //sale\r\n        //from 01.04.2018 - 14.04.2018  i.e. 50th to 64th days\r\n       \r\n        //10% bonus\r\n        bonus = tokens.mul(10);\r\n        bonus = bonus.div(100);\r\n        \r\n       \r\n    }\r\n    else\r\n    {\r\n        //no bonuses 15.04.2018 - 30.04.2018 \r\n        bonus = 0;\r\n    }\r\n   \r\n  }\r\n\r\n  // low level token purchase function\r\n  // Minimum purchase can be of 75 ETA tokens\r\n  \r\n  function buyTokens(address beneficiary) public payable {\r\n    \r\n  //tokens not to be sent to 0x0\r\n  require(beneficiary != 0x0);\r\n\r\n  if(hasEnded() && !isHardCapReached)\r\n  {\r\n      if (!isSoftCapReached)\r\n        refundToBuyers = true;\r\n      burnRemainingTokens();\r\n      beneficiary.transfer(msg.value);\r\n  }\r\n  \r\n  else\r\n  {\r\n    //the purchase should be within duration and non zero\r\n    require(validPurchase());\r\n    \r\n    // amount sent by the user\r\n    uint256 weiAmount = msg.value;\r\n    \r\n    // calculate token amount to be sold\r\n    uint256 tokens = weiAmount.mul(ratePerWei);\r\n  \r\n    require (tokens>=75 * 10 ** 18);\r\n    \r\n    //Determine bonus\r\n    uint bonus = determineBonus(tokens);\r\n    tokens = tokens.add(bonus);\r\n  \r\n    //can't sale tokens more than 52500000000 tokens\r\n    require(tokens_sold + tokens <= maxTokensForSale * 10 ** 18);\r\n  \r\n    //30% of the tokens being sold are being accumulated for the etheera team\r\n    updateTokensForEtheeraTeam(tokens);\r\n\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    \r\n    \r\n    if (weiRaised >= softCap * 10 ** 18 && !isSoftCapReached)\r\n    {\r\n      isSoftCapReached = true;\r\n    }\r\n  \r\n    if (weiRaised >= hardCap * 10 ** 18 && !isHardCapReached)\r\n      isHardCapReached = true;\r\n    \r\n    token.mint(wallet, beneficiary, tokens);\r\n    \r\n    uint olderAmount = usersThatBoughtETA[beneficiary];\r\n    usersThatBoughtETA[beneficiary] = weiAmount + olderAmount;\r\n    \r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    \r\n    tokens_sold = tokens_sold.add(tokens);\r\n    forwardFunds();\r\n  }\r\n }\r\n\r\n  // send ether to the fund collection wallet\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n    \r\n    function burnRemainingTokens() internal\r\n    {\r\n        //burn all the unsold tokens as soon as the ICO is ended\r\n        uint balance = token.balanceOf(wallet);\r\n        require(balance>0);\r\n        uint tokensForTeam = tokensForReservedFund + tokensForFoundersAndTeam + tokensForAdvisors +tokensForMarketing + tokensForTournament;\r\n        uint tokensToBurn = balance.sub(tokensForTeam);\r\n        require (balance >=tokensToBurn);\r\n        address burnAddress = 0x0;\r\n        token.mint(wallet,burnAddress,tokensToBurn);\r\n    }\r\n    \r\n    function getRefund() public \r\n    {\r\n        require(ethersSentForRefund && usersThatBoughtETA[msg.sender]>0);\r\n        uint256 ethersSent = usersThatBoughtETA[msg.sender];\r\n        require (wallet.balance >= ethersSent);\r\n        msg.sender.transfer(ethersSent);\r\n        uint256 tokensIHave = token.balanceOf(msg.sender);\r\n        token.mint(msg.sender,0x0,tokensIHave);\r\n    }\r\n    \r\n    function debitAmountToRefund() public payable \r\n    {\r\n        require(hasEnded() && msg.sender == wallet && !isSoftCapReached && !ethersSentForRefund);\r\n        require(msg.value >=weiRaised);\r\n        ethersSentForRefund = true;\r\n    }\r\n    \r\n    function updateTokensForEtheeraTeam(uint256 tokens) internal \r\n    {\r\n        uint256 reservedFundTokens;\r\n        uint256 foundersAndTeamTokens;\r\n        uint256 advisorsTokens;\r\n        uint256 marketingTokens;\r\n        uint256 tournamentTokens;\r\n        \r\n        //10% of tokens for reserved fund\r\n        reservedFundTokens = tokens.mul(10);\r\n        reservedFundTokens = reservedFundTokens.div(100);\r\n        tokensForReservedFund = tokensForReservedFund.add(reservedFundTokens);\r\n    \r\n        //15% of tokens for founders and team    \r\n        foundersAndTeamTokens=tokens.mul(15);\r\n        foundersAndTeamTokens= foundersAndTeamTokens.div(100);\r\n        tokensForFoundersAndTeam = tokensForFoundersAndTeam.add(foundersAndTeamTokens);\r\n    \r\n        //3% of tokens for advisors\r\n        advisorsTokens=tokens.mul(3);\r\n        advisorsTokens= advisorsTokens.div(100);\r\n        tokensForAdvisors= tokensForAdvisors.add(advisorsTokens);\r\n    \r\n        //1% of tokens for marketing\r\n        marketingTokens = tokens.mul(1);\r\n        marketingTokens= marketingTokens.div(100);\r\n        tokensForMarketing= tokensForMarketing.add(marketingTokens);\r\n        \r\n        //1% of tokens for tournament \r\n        tournamentTokens=tokens.mul(1);\r\n        tournamentTokens= tournamentTokens.div(100);\r\n        tokensForTournament= tokensForTournament.add(tournamentTokens);\r\n    }\r\n    \r\n    function withdrawTokensForEtheeraTeam(uint256 whoseTokensToWithdraw,address[] whereToSendTokens) public {\r\n        //1 reserved fund, 2 for founders and team, 3 for advisors, 4 for marketing, 5 for tournament\r\n        require(msg.sender == wallet && now>=endTime);\r\n        uint256 lockPeriod = 0;\r\n        uint256 timePassed = now - endTime;\r\n        uint256 tokensToSend = 0;\r\n        uint256 i = 0;\r\n        if (whoseTokensToWithdraw == 1)\r\n        {\r\n          //15 months lockup period\r\n          lockPeriod = 15 days * 30;\r\n          require(timePassed >= lockPeriod);\r\n          require (tokensForReservedFund >0);\r\n          //allow withdrawal\r\n          tokensToSend = tokensForReservedFund.div(whereToSendTokens.length);\r\n                \r\n          for (i=0;i<whereToSendTokens.length;i++)\r\n          {\r\n            token.mint(wallet,whereToSendTokens[i],tokensToSend);\r\n          }\r\n          tokensForReservedFund = 0;\r\n        }\r\n        else if (whoseTokensToWithdraw == 2)\r\n        {\r\n          //10 months lockup period\r\n          lockPeriod = 10 days * 30;\r\n          require(timePassed >= lockPeriod);\r\n          require(tokensForFoundersAndTeam > 0);\r\n          //allow withdrawal\r\n          tokensToSend = tokensForFoundersAndTeam.div(whereToSendTokens.length);\r\n                \r\n          for (i=0;i<whereToSendTokens.length;i++)\r\n          {\r\n            token.mint(wallet,whereToSendTokens[i],tokensToSend);\r\n          }            \r\n          tokensForFoundersAndTeam = 0;\r\n        }\r\n        else if (whoseTokensToWithdraw == 3)\r\n        {\r\n            require (tokensForAdvisors > 0);\r\n          //allow withdrawal\r\n          tokensToSend = tokensForAdvisors.div(whereToSendTokens.length);        \r\n          for (i=0;i<whereToSendTokens.length;i++)\r\n          {\r\n            token.mint(wallet,whereToSendTokens[i],tokensToSend);\r\n          }\r\n          tokensForAdvisors = 0;\r\n        }\r\n        else if (whoseTokensToWithdraw == 4)\r\n        {\r\n            require (tokensForMarketing > 0);\r\n          //allow withdrawal\r\n          tokensToSend = tokensForMarketing.div(whereToSendTokens.length);\r\n                \r\n          for (i=0;i<whereToSendTokens.length;i++)\r\n          {\r\n            token.mint(wallet,whereToSendTokens[i],tokensToSend);\r\n          }\r\n          tokensForMarketing = 0;\r\n        }\r\n        else if (whoseTokensToWithdraw == 5)\r\n        {\r\n            require (tokensForTournament > 0);\r\n          //allow withdrawal\r\n          tokensToSend = tokensForTournament.div(whereToSendTokens.length);\r\n                \r\n          for (i=0;i<whereToSendTokens.length;i++)\r\n          {\r\n            token.mint(wallet,whereToSendTokens[i],tokensToSend);\r\n          }\r\n          tokensForTournament = 0;\r\n        }\r\n        else \r\n        {\r\n          //wrong input\r\n          require (1!=1);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForAdvisors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whoseTokensToWithdraw\",\"type\":\"uint256\"},{\"name\":\"whereToSendTokens\",\"type\":\"address[]\"}],\"name\":\"withdrawTokensForEtheeraTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"debitAmountToRefund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isHardCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForFoundersAndTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForTournament\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokens_sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSoftCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForReservedFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePerWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundToBuyers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"ICOStarted\",\"type\":\"event\"}]","ContractName":"EtheeraCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a7eb490000000000000000000000000470a2eb9907f216e5ce79c9ec0818f17001311c6","Library":"","SwarmSource":"bzzr://380044947e6a80306c82d4cc97eaf3d057d4e725c979e7c8c2371606e290dc54"}]}