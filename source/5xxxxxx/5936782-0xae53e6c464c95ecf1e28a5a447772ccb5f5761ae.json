{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20 Ownable\r\n * @dev ERC20 interface\r\n * @author Comps Pte. Ltd.\r\n */\r\ncontract ERC20 {\r\n  address public owner;\r\n  string public name;\r\n  string public symbol;\r\n  uint256 public decimals;\r\n  uint256 public totalSupply;\r\n\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  function allowance(address _owner, address _spender) public view returns (uint256);\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title  ERC20 Meta Info\r\n * @dev    Mata data storage for ERC20 compatible tokens\r\n */\r\ncontract ERC20MetaInfo {\r\n  address public owner;\r\n  mapping (address => mapping (string => string)) keyValues;\r\n\r\n  // constructor\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev   setKeyValue Assign (key, value) pair to a token\r\n   * @param _token      ERC20 compatible token contract's address\r\n   * @param _key        Key in string\r\n   * @param _value      Value in string\r\n   */\r\n  function setKeyValue(ERC20 _token, string _key, string _value) public returns (bool) {\r\n    // If a value is empty, anybody can assign a pair of (key, value)\r\n    // Otherwise, only token contract's \"owner\" (if the token contract is Ownable),\r\n    // or ERC20MetaInfo contract owner can assign/update a value\r\n    require(bytes(keyValues[_token][_key]).length == 0 || owner == msg.sender || _token.owner() == msg.sender);\r\n    keyValues[_token][_key] = _value;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev   getKeyValue Get value correspoinding to a key\r\n   * @param _token      ERC20 compatible token contract's address\r\n   * @param _key        Specify a key in string\r\n   */\r\n  function getKeyValue(address _token, string _key) public view returns (string _value) {\r\n    return keyValues[_token][_key];\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setKeyValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"getKeyValue\",\"outputs\":[{\"name\":\"_value\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"ERC20MetaInfo","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b7f64003cd3d3c60bc57d58f3304d4c169ae766b3d9d38e20652ef402ad6da49"}]}