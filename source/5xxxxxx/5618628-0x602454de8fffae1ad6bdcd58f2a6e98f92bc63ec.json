{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n   /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract KYCCrowdsale is Ownable{\r\n\r\n    bool public isKYCRequired = false;\r\n\r\n    mapping (bytes32 => address) public whiteListed;\r\n\r\n    function enableKYC() external onlyOwner {\r\n        require(!isKYCRequired); // kyc is not enabled\r\n        isKYCRequired = true;\r\n    }\r\n\r\n    function disableKYC() external onlyOwner {\r\n        require(isKYCRequired); // kyc is enabled\r\n        isKYCRequired = false; \r\n    }\r\n\r\n    //TODO: handle single address can be whiteListed multiple time using unique signed hashes\r\n        function isWhitelistedAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public returns (bool){\r\n        assert( whiteListed[hash] == address(0x0)); // verify hash is unique\r\n        require(owner == ecrecover(hash, v, r, s));\r\n        whiteListed[hash] = msg.sender;\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale is Pausable, KYCCrowdsale{\r\n  using SafeMath for uint256;\r\n    \r\n  // The token interface\r\n  ERC20 public token;\r\n\r\n  // The address of token holder that allowed allowance to contract\r\n  address public tokenWallet;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // token rate in wei\r\n  uint256 public rate;\r\n  \r\n  uint256 public roundOneRate;\r\n  uint256 public roundTwoRate;\r\n  uint256 public defaultBonussRate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  uint256 public tokensSold;\r\n\r\n  uint256 public constant forSale = 16250000 ether;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   * @param releaseTime tokens unlock time\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 releaseTime);\r\n\r\n  /**\r\n   * event upon endTime updated\r\n   */\r\n  event EndTimeUpdated();\r\n\r\n  /**\r\n   * EQUI token price updated\r\n   */\r\n  event EQUIPriceUpdated(uint256 oldPrice, uint256 newPrice);\r\n\r\n  /**\r\n   * event for token releasing\r\n   * @param holder who is releasing his tokens\r\n   */\r\n  event TokenReleased(address indexed holder, uint256 amount);\r\n\r\n  constructor() public\r\n   {\r\n    owner = address(0xe46d0049D4a4642bC875164bd9293a05dBa523f1);\r\n    \r\n    startTime = now;\r\n    endTime = 1527811199; //GMT: Thursday, May 31, 2018 11:59:59 PM\r\n    rate = 500000000000000;                     // 1 Token price: 0.0005 Ether == $0.35 @ Ether prie $700\r\n    roundOneRate = (rate.mul(6)).div(10);       // price at 40% discount\r\n    roundTwoRate = (rate.mul(65)).div(100);     // price at 35% discount\r\n    defaultBonussRate = (rate.mul(8)).div(10);  // price at 20% discount\r\n    \r\n    wallet =  address(0xccB84A750f386bf5A4FC8C29611ad59057968605);\r\n    token = ERC20(0xE6FF2834b6Cf56DC23282A5444B297fAcCcA1b28);\r\n    tokenWallet =  address(0x4AA48F9cF25eB7d2c425780653c321cfaC458FA4);\r\n    \r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable whenNotPaused {\r\n    require(beneficiary != address(0));\r\n\r\n    validPurchase();\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    tokensSold = tokensSold.add(tokens);\r\n\r\n    balances[beneficiary] = balances[beneficiary].add(tokens);\r\n    deposited[msg.sender] = deposited[msg.sender].add(weiAmount);\r\n    \r\n    updateRoundLimits(tokens);\r\n    \r\n    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, releaseTime);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n  \r\n   uint256 public roundOneLimit = 9500000 ether;\r\n   uint256 public roundTwoLimit = 6750000 ether;\r\n   \r\n  function updateRoundLimits(uint256 _amount) private {\r\n      if (roundOneLimit > 0){\r\n          if(roundOneLimit > _amount){\r\n                roundOneLimit = roundOneLimit.sub(_amount);\r\n                return;\r\n          } else {\r\n              _amount = _amount.sub(roundOneLimit);\r\n              roundOneLimit = 0;\r\n          }\r\n      }\r\n      roundTwoLimit = roundTwoLimit.sub(_amount);\r\n  }\r\n\r\n  function getTokenAmount(uint256 weiAmount) public view returns(uint256) {\r\n  \r\n      uint256 buffer = 0;\r\n      uint256 tokens = 0;\r\n      if(weiAmount < 1 ether)\r\n      \r\n        return (weiAmount.mul(1 ether)).div(defaultBonussRate);\r\n\r\n      else if(weiAmount >= 1 ether) {\r\n          \r\n          \r\n          if(roundOneLimit > 0){\r\n              \r\n              uint256 amount = roundOneRate * roundOneLimit;\r\n              \r\n              if (weiAmount > amount){\r\n                  buffer = weiAmount - amount;\r\n                  tokens =  (amount.mul(1 ether)).div(roundOneRate);\r\n              }else{\r\n                  \r\n                  return (weiAmount.mul(1 ether)).div(roundOneRate);\r\n              }\r\n        \r\n          }\r\n          \r\n          if(buffer > 0){\r\n              uint256 roundTwo = (buffer.mul(1 ether)).div(roundTwoRate);\r\n              return tokens + roundTwo;\r\n          }\r\n          \r\n          return (weiAmount.mul(1 ether)).div(roundTwoRate);\r\n      }\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view {\r\n    require(msg.value != 0);\r\n    require(now >= startTime && now <= endTime);\r\n  }\r\n\r\n  function updateEndTime(uint256 newTime) onlyOwner external {\r\n    require(newTime > startTime);\r\n    endTime = newTime;\r\n    emit EndTimeUpdated();\r\n  }\r\n\r\n  function updateEQUIPrice(uint256 weiAmount) onlyOwner external {\r\n    require(weiAmount > 0);\r\n    assert((1 ether) % weiAmount == 0);\r\n    emit EQUIPriceUpdated(rate, weiAmount);\r\n    rate = weiAmount;\r\n    roundOneRate = (weiAmount.mul(6)).div(10);       // price at 40% discount\r\n    roundTwoRate = (weiAmount.mul(65)).div(100);     // price at 35% discount\r\n    defaultBonussRate = (weiAmount.mul(8)).div(10);    // price at 20% discount\r\n  }\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping(address => uint256) internal deposited;\r\n  \r\n  uint256 public releaseTime = 1538351999; //September 30, 2018 11:59:59 PM\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   */\r\n  function releaseEQUITokens(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public whenNotPaused {\r\n    require(now >= releaseTime);\r\n    \r\n    require(balances[msg.sender] > 0);\r\n    uint256 amount = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n\r\n   require(isWhitelistedAddress(hash, v, r, s));\r\n    if(!token.transferFrom(tokenWallet,msg.sender,amount)){\r\n        revert();\r\n    }\r\n    emit TokenReleased(msg.sender,amount);\r\n   \r\n  }\r\n  \r\n  function releaseEQUIWihtoutKYC() public whenNotPaused {\r\n    require(now >= releaseTime);\r\n    require(isKYCRequired == false);\r\n    require(balances[msg.sender] > 0);\r\n    \r\n    uint256 amount = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n\r\n    if(!token.transferFrom(tokenWallet,msg.sender,amount)){\r\n        revert();\r\n    }\r\n    emit TokenReleased(msg.sender,amount);\r\n    \r\n  }\r\n\r\n   /**\r\n   * @dev Checks the amount of tokens left in the allowance.\r\n   * @return Amount of tokens left in the allowance\r\n   */\r\n  function allowanceBalance() public view returns (uint256) {\r\n    return token.allowance(tokenWallet, this);\r\n  }\r\n}\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract Refundable is Crowdsale {\r\n\r\n  uint256 public availableBalance; \r\n  bool public refunding = false;\r\n\r\n  event RefundStatusUpdated();\r\n  event Deposited();\r\n  event Withdraw(uint256 _amount);\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n  \r\n  function deposit() onlyOwner public payable {\r\n    availableBalance = availableBalance.add(msg.value);\r\n    emit Deposited();\r\n  }\r\n  \r\n  function tweakRefundStatus() onlyOwner public {\r\n    refunding = !refunding;\r\n    emit RefundStatusUpdated();\r\n  }\r\n\r\n  \r\n  function refund() public {\r\n    require(refunding);\r\n    uint256 depositedValue = deposited[msg.sender];\r\n    deposited[msg.sender] = 0;\r\n    msg.sender.transfer(depositedValue);\r\n    emit Refunded(msg.sender, depositedValue);\r\n  }\r\n  \r\n  function withDrawBack() onlyOwner public{\r\n      owner.transfer(contractbalance());\r\n  }\r\n  \r\n  function contractbalance() view public returns( uint256){\r\n      return address(this).balance;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"defaultBonussRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseEQUIWihtoutKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tweakRefundStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundTwoLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractbalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundTwoRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withDrawBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"updateEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"whiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowanceBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isKYCRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"updateEQUIPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"releaseEQUITokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundOneLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"isWhitelistedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundOneRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EndTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"EQUIPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Refundable","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a1b1fcc02fb0f1582135a238aa23042a3c578fe833e08573187fc79838557dae"}]}