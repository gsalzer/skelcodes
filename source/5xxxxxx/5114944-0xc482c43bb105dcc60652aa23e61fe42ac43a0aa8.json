{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Contracts that should not own Contracts\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\r\n * of this contract to reclaim ownership of the contracts.\r\n */\r\ncontract HasNoContracts is Ownable {\r\n\r\n  /**\r\n   * @dev Reclaim ownership of Ownable contracts\r\n   * @param contractAddr The address of the Ownable to be reclaimed.\r\n   */\r\n  function reclaimContract(address contractAddr) external onlyOwner {\r\n    Ownable contractInst = Ownable(contractAddr);\r\n    contractInst.transferOwnership(owner);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Contracts that should not own Tokens\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\r\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\r\n * owner to reclaim the tokens.\r\n */\r\ncontract HasNoTokens is CanReclaimToken {\r\n\r\n /**\r\n  * @dev Reject all ERC23 compatible tokens\r\n  * @param from_ address The address that is transferring the tokens\r\n  * @param value_ uint256 the amount of the specified token\r\n  * @param data_ Bytes The data passed from the caller.\r\n  */\r\n  function tokenFallback(address from_, uint256 value_, bytes data_) external {\r\n    from_;\r\n    value_;\r\n    data_;\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract VITToken is Claimable, HasNoTokens, MintableToken {\r\n    // solhint-disable const-name-snakecase\r\n    string public constant name = \"Vice\";\r\n    string public constant symbol = \"VIT\";\r\n    uint8 public constant decimals = 18;\r\n    // solhint-enable const-name-snakecase\r\n\r\n    modifier cannotMint() {\r\n        require(mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function VITToken() public {\r\n\r\n    }\r\n\r\n    /// @dev Same ERC20 behavior, but reverts if still minting.\r\n    /// @param _to address The address to transfer to.\r\n    /// @param _value uint256 The amount to be transferred.\r\n    function transfer(address _to, uint256 _value) public cannotMint returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /// @dev Same ERC20 behavior, but reverts if still minting.\r\n    /// @param _from address The address which you want to send tokens from.\r\n    /// @param _to address The address which you want to transfer to.\r\n    /// @param _value uint256 the amount of tokens to be transferred.\r\n    function transferFrom(address _from, address _to, uint256 _value) public cannotMint returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/// @title VITToken sale contract.\r\ncontract VITTokenSale is Claimable {\r\n    using Math for uint256;\r\n    using SafeMath for uint256;\r\n\r\n    // VIT token contract.\r\n    VITToken public vitToken;\r\n\r\n    // Received funds are forwarded to this address.\r\n    address public fundingRecipient;\r\n\r\n    // VIT token unit.\r\n    uint256 public constant TOKEN_UNIT = 10 ** 18;\r\n\r\n    // Maximum tokens offered in the sale: 2B.\r\n    uint256 public constant MAX_TOKENS_SOLD = 2 * 10 ** 9 * TOKEN_UNIT;\r\n\r\n    // VIT to 1 wei ratio.\r\n    uint256 public vitPerWei;\r\n\r\n    // Sale start and end timestamps.\r\n    uint256 public constant RESTRICTED_PERIOD_DURATION = 1 days;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // Refund data and state.\r\n    uint256 public refundEndTime;\r\n    mapping (address => uint256) public refundableEther;\r\n    mapping (address => uint256) public claimableTokens;\r\n    uint256 public totalClaimableTokens = 0;\r\n    bool public finalizedRefund = false;\r\n\r\n    // Amount of tokens sold until now in the sale.\r\n    uint256 public tokensSold = 0;\r\n\r\n    // Accumulated amount each participant has contributed so far.\r\n    mapping (address => uint256) public participationHistory;\r\n\r\n    // Maximum amount that each participant is allowed to contribute (in WEI), during the restricted period.\r\n    mapping (address => uint256) public participationCaps;\r\n\r\n    // Initial allocations.\r\n    address[20] public strategicPartnersPools;\r\n    uint256 public constant STRATEGIC_PARTNERS_POOL_ALLOCATION = 100 * 10 ** 6 * TOKEN_UNIT; // 100M\r\n\r\n    event TokensIssued(address indexed to, uint256 tokens);\r\n    event EtherRefunded(address indexed from, uint256 weiAmount);\r\n    event TokensClaimed(address indexed from, uint256 tokens);\r\n    event Finalized();\r\n    event FinalizedRefunds();\r\n\r\n    /// @dev Reverts if called when not during sale.\r\n    modifier onlyDuringSale() {\r\n        require(!saleEnded() && now >= startTime);\r\n\r\n        _;\r\n    }\r\n\r\n    /// @dev Reverts if called before the sale ends.\r\n    modifier onlyAfterSale() {\r\n        require(saleEnded());\r\n\r\n        _;\r\n    }\r\n\r\n    /// @dev Reverts if called not doing the refund period.\r\n    modifier onlyDuringRefund() {\r\n        require(saleDuringRefundPeriod());\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyAfterRefund() {\r\n        require(saleAfterRefundPeriod());\r\n\r\n        _;\r\n    }\r\n\r\n    /// @dev Constructor that initializes the sale conditions.\r\n    /// @param _fundingRecipient address The address of the funding recipient.\r\n    /// @param _startTime uint256 The start time of the token sale.\r\n    /// @param _endTime uint256 The end time of the token sale.\r\n    /// @param _refundEndTime uint256 The end time of the refunding period.\r\n    /// @param _vitPerWei uint256 The exchange rate of VIT for one ETH.\r\n    /// @param _strategicPartnersPools address[20] The addresses of the 20 strategic partners pools.\r\n    function VITTokenSale(address _fundingRecipient, uint256 _startTime, uint256 _endTime, uint256 _refundEndTime,\r\n        uint256 _vitPerWei, address[20] _strategicPartnersPools) public {\r\n        require(_fundingRecipient != address(0));\r\n        require(_startTime > now && _startTime < _endTime && _endTime < _refundEndTime);\r\n        require(_startTime.add(RESTRICTED_PERIOD_DURATION) < _endTime);\r\n        require(_vitPerWei > 0);\r\n\r\n        for (uint i = 0; i < _strategicPartnersPools.length; ++i) {\r\n            require(_strategicPartnersPools[i] != address(0));\r\n        }\r\n\r\n        fundingRecipient = _fundingRecipient;\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        refundEndTime = _refundEndTime;\r\n        vitPerWei = _vitPerWei;\r\n        strategicPartnersPools = _strategicPartnersPools;\r\n\r\n        // Deploy new VITToken contract.\r\n        vitToken = new VITToken();\r\n\r\n        // Grant initial token allocations.\r\n        grantInitialAllocations();\r\n    }\r\n\r\n    /// @dev Fallback function that will delegate the request to create().\r\n    function () external payable onlyDuringSale {\r\n        address recipient = msg.sender;\r\n\r\n        uint256 cappedWeiReceived = msg.value;\r\n        uint256 weiAlreadyParticipated = participationHistory[recipient];\r\n\r\n        // If we're during the restricted period, then only the white-listed participants are allowed to participate,\r\n        if (saleDuringRestrictedPeriod()) {\r\n            uint256 participationCap = participationCaps[recipient];\r\n            cappedWeiReceived = Math.min256(cappedWeiReceived, participationCap.sub(weiAlreadyParticipated));\r\n        }\r\n\r\n        require(cappedWeiReceived > 0);\r\n\r\n        // Calculate how much tokens can be sold to this participant.\r\n        uint256 tokensLeftInSale = MAX_TOKENS_SOLD.sub(tokensSold);\r\n        uint256 weiLeftInSale = tokensLeftInSale.div(vitPerWei);\r\n        uint256 weiToParticipate = Math.min256(cappedWeiReceived, weiLeftInSale);\r\n        participationHistory[recipient] = weiAlreadyParticipated.add(weiToParticipate);\r\n\r\n        // Issue tokens and transfer to recipient.\r\n        uint256 tokensToIssue = weiToParticipate.mul(vitPerWei);\r\n        if (tokensLeftInSale.sub(tokensToIssue) < vitPerWei) {\r\n            // If purchase would cause less than vitPerWei tokens left then nobody could ever buy them, so we'll gift\r\n            // them to the last buyer.\r\n            tokensToIssue = tokensLeftInSale;\r\n        }\r\n\r\n        // Record the both the participate ETH and tokens for future refunds.\r\n        refundableEther[recipient] = refundableEther[recipient].add(weiToParticipate);\r\n        claimableTokens[recipient] = claimableTokens[recipient].add(tokensToIssue);\r\n\r\n        // Update token counters.\r\n        totalClaimableTokens = totalClaimableTokens.add(tokensToIssue);\r\n        tokensSold = tokensSold.add(tokensToIssue);\r\n\r\n        // Issue the tokens to the token sale smart contract itself, which will hold them for future refunds.\r\n        issueTokens(address(this), tokensToIssue);\r\n\r\n        // Partial refund if full participation not possible, e.g. due to cap being reached.\r\n        uint256 refund = msg.value.sub(weiToParticipate);\r\n        if (refund > 0) {\r\n            msg.sender.transfer(refund);\r\n        }\r\n    }\r\n\r\n    /// @dev Set restricted period participation caps for a list of addresses.\r\n    /// @param _participants address[] The list of participant addresses.\r\n    /// @param _cap uint256 The cap amount (in ETH).\r\n    function setRestrictedParticipationCap(address[] _participants, uint256 _cap) external onlyOwner {\r\n        for (uint i = 0; i < _participants.length; ++i) {\r\n            participationCaps[_participants[i]] = _cap;\r\n        }\r\n    }\r\n\r\n    /// @dev Finalizes the token sale event, by stopping token minting.\r\n    function finalize() external onlyAfterSale {\r\n        // Issue any unsold tokens back to the company.\r\n        if (tokensSold < MAX_TOKENS_SOLD) {\r\n            issueTokens(fundingRecipient, MAX_TOKENS_SOLD.sub(tokensSold));\r\n        }\r\n\r\n        // Finish minting. Please note, that if minting was already finished - this call will revert().\r\n        vitToken.finishMinting();\r\n\r\n        Finalized();\r\n    }\r\n\r\n    function finalizeRefunds() external onlyAfterRefund {\r\n        require(!finalizedRefund);\r\n\r\n        finalizedRefund = true;\r\n\r\n        // Transfer all the Ether to the beneficiary of the funding.\r\n        fundingRecipient.transfer(this.balance);\r\n\r\n        FinalizedRefunds();\r\n    }\r\n\r\n    /// @dev Reclaim all ERC20 compatible tokens, but not more than the VIT tokens which were reserved for refunds.\r\n    /// @param token ERC20Basic The address of the token contract.\r\n    function reclaimToken(ERC20Basic token) external onlyOwner {\r\n        uint256 balance = token.balanceOf(this);\r\n        if (token == vitToken) {\r\n            balance = balance.sub(totalClaimableTokens);\r\n        }\r\n\r\n        assert(token.transfer(owner, balance));\r\n    }\r\n\r\n    /// @dev Allows participants to claim their tokens, which also transfers the Ether to the funding recipient.\r\n    /// @param _tokensToClaim uint256 The amount of tokens to claim.\r\n    function claimTokens(uint256 _tokensToClaim) public onlyAfterSale {\r\n        require(_tokensToClaim != 0);\r\n\r\n        address participant = msg.sender;\r\n        require(claimableTokens[participant] > 0);\r\n\r\n        uint256 claimableTokensAmount = claimableTokens[participant];\r\n        require(_tokensToClaim <= claimableTokensAmount);\r\n\r\n        uint256 refundableEtherAmount = refundableEther[participant];\r\n        uint256 etherToClaim = _tokensToClaim.mul(refundableEtherAmount).div(claimableTokensAmount);\r\n        assert(etherToClaim > 0);\r\n\r\n        refundableEther[participant] = refundableEtherAmount.sub(etherToClaim);\r\n        claimableTokens[participant] = claimableTokensAmount.sub(_tokensToClaim);\r\n        totalClaimableTokens = totalClaimableTokens.sub(_tokensToClaim);\r\n\r\n        // Transfer the tokens from the token sale smart contract to the participant.\r\n        assert(vitToken.transfer(participant, _tokensToClaim));\r\n\r\n        // Transfer the Ether to the beneficiary of the funding (as long as the refund hasn't finalized yet).\r\n        if (!finalizedRefund) {\r\n            fundingRecipient.transfer(etherToClaim);\r\n        }\r\n\r\n        TokensClaimed(participant, _tokensToClaim);\r\n    }\r\n\r\n    /// @dev Allows participants to claim all their tokens.\r\n    function claimAllTokens() public onlyAfterSale {\r\n        uint256 claimableTokensAmount = claimableTokens[msg.sender];\r\n        claimTokens(claimableTokensAmount);\r\n    }\r\n\r\n    /// @dev Allows participants to claim refund for their purchased tokens.\r\n    /// @param _etherToClaim uint256 The amount of Ether to claim.\r\n    function refundEther(uint256 _etherToClaim) public onlyDuringRefund {\r\n        require(_etherToClaim != 0);\r\n\r\n        address participant = msg.sender;\r\n\r\n        uint256 refundableEtherAmount = refundableEther[participant];\r\n        require(_etherToClaim <= refundableEtherAmount);\r\n\r\n        uint256 claimableTokensAmount = claimableTokens[participant];\r\n        uint256 tokensToClaim = _etherToClaim.mul(claimableTokensAmount).div(refundableEtherAmount);\r\n        assert(tokensToClaim > 0);\r\n\r\n        refundableEther[participant] = refundableEtherAmount.sub(_etherToClaim);\r\n        claimableTokens[participant] = claimableTokensAmount.sub(tokensToClaim);\r\n        totalClaimableTokens = totalClaimableTokens.sub(tokensToClaim);\r\n\r\n        // Transfer the tokens to the beneficiary of the funding.\r\n        assert(vitToken.transfer(fundingRecipient, tokensToClaim));\r\n\r\n        // Transfer the Ether to the participant.\r\n        participant.transfer(_etherToClaim);\r\n\r\n        EtherRefunded(participant, _etherToClaim);\r\n    }\r\n\r\n    /// @dev Allows participants to claim refund for all their purchased tokens.\r\n    function refundAllEther() public onlyDuringRefund {\r\n        uint256 refundableEtherAmount = refundableEther[msg.sender];\r\n        refundEther(refundableEtherAmount);\r\n    }\r\n\r\n    /// @dev Initialize token grants.\r\n    function grantInitialAllocations() private onlyOwner {\r\n        for (uint i = 0; i < strategicPartnersPools.length; ++i) {\r\n            issueTokens(strategicPartnersPools[i], STRATEGIC_PARTNERS_POOL_ALLOCATION);\r\n        }\r\n    }\r\n\r\n    /// @dev Issues tokens for the recipient.\r\n    /// @param _recipient address The address of the recipient.\r\n    /// @param _tokens uint256 The amount of tokens to issue.\r\n    function issueTokens(address _recipient, uint256 _tokens) private {\r\n        // Request VIT token contract to mint the requested tokens for the buyer.\r\n        assert(vitToken.mint(_recipient, _tokens));\r\n\r\n        TokensIssued(_recipient, _tokens);\r\n    }\r\n\r\n    /// @dev Returns whether the sale has ended.\r\n    /// @return bool Whether the sale has ended or not.\r\n    function saleEnded() private view returns (bool) {\r\n        return tokensSold >= MAX_TOKENS_SOLD || now >= endTime;\r\n    }\r\n\r\n    /// @dev Returns whether the sale is during its restricted period, where only white-listed participants are allowed\r\n    /// to participate.\r\n    /// @return bool Whether the sale is during its restricted period, where only white-listed participants are allowed\r\n    /// to participate.\r\n    function saleDuringRestrictedPeriod() private view returns (bool) {\r\n        return now <= startTime.add(RESTRICTED_PERIOD_DURATION);\r\n    }\r\n\r\n    /// @dev Returns whether the sale is during its refund period.\r\n    /// @return bool whether the sale is during its refund period.\r\n    function saleDuringRefundPeriod() private view returns (bool) {\r\n        return saleEnded() && now <= refundEndTime;\r\n    }\r\n\r\n    /// @dev Returns whether the sale is during its refund period.\r\n    /// @return bool whether the sale is during its refund period.\r\n    function saleAfterRefundPeriod() private view returns (bool) {\r\n        return saleEnded() && now > refundEndTime;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"},{\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"VITToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3fb31a45d5aca375ad8734a96460c2b95dfe55e1c7e140cc01b8bd1b7da6d7ba"}]}