{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract Queue {\r\n    using SafeMath for uint256;\r\n    address[] users;\r\n    mapping(address => bool) usersExist;\r\n    mapping(address => address) users2users;\r\n    mapping(address => uint256) collectBalances;\r\n    mapping(address => uint256) balances;\r\n    mapping(address => uint256) balancesTotal;\r\n    uint256 nextForwardUserId = 0;\r\n    uint256 nextBackUserId = 0;\r\n    uint256 cyles = 50;\r\n    uint256 interes = 10 finney;\r\n    uint256 reminder=0;\r\n    uint256 price = 20 finney;\r\n    uint256 referalBonus = 5 finney;\r\n    uint256 queueInteres = 100 szabo;\r\n    address to;\r\n    uint256 collect = 30 finney;\r\n    \r\n    event QueueStart(address indexed user, address indexed parentUser, uint256 indexed timeshtamp);\r\n    event BalanceUp(address indexed user, uint256 amount, uint256 indexed timeshtamp);\r\n    event GetMyMoney(address indexed user, uint256 amount, uint256 indexed timeshtamp);\r\n    \r\n    function () payable public {\r\n        msg.sender.transfer(msg.value);\r\n    }\r\n    \r\n    function startQueue(address parentUser) payable public {\r\n        require(msg.value == price);\r\n        require(msg.sender != address(0));\r\n        require(parentUser != address(0));\r\n        require(!usersExist[msg.sender]);\r\n        _queue(msg.sender, parentUser);\r\n    }\r\n    \r\n    function serchIndexByAddress(address a) public view returns (uint256 index) {\r\n        for(index=0; index<users.length; index++) {\r\n            if(a == users[index]){\r\n                return index;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _removeIndex(uint256 indexToRemove) internal {\r\n        if (indexToRemove >= users.length) return;\r\n\r\n        for (uint i = indexToRemove; i<users.length-1; i++){\r\n            users[i] = users[i+1];\r\n        }\r\n        delete users[users.length-1];\r\n        users.length--;\r\n    }\r\n    \r\n    function _queue(address user, address parentUser) internal {\r\n        if (user != address(0x9a965e5e9c3A0F062C80a7f3d1B0972201b2F19f) ) {\r\n            require(parentUser!=user);\r\n            require(usersExist[parentUser]);\r\n        }\r\n        users.push(user);\r\n        usersExist[user]=true;\r\n        users2users[user]=parentUser;\r\n        emit QueueStart(user, parentUser, now);\r\n        \r\n        if (collectBalances[parentUser].add(referalBonus) >= collect){\r\n            reminder = collectBalances[parentUser].add(referalBonus) - collect;\r\n            balancesTotal[parentUser] = balancesTotal[parentUser].add(interes);\r\n            balances[parentUser] = balances[parentUser].add(interes);\r\n            emit BalanceUp(parentUser, interes, now);\r\n            collectBalances[parentUser] = reminder;\r\n            to = parentUser;\r\n            _removeIndex(serchIndexByAddress(parentUser));\r\n            _queue(to, users2users[to]);\r\n        }else{\r\n            collectBalances[parentUser] = collectBalances[parentUser].add(referalBonus);\r\n        }\r\n        \r\n        if (collectBalances[users2users[parentUser]].add(referalBonus) >= collect){\r\n            reminder = collectBalances[users2users[parentUser]].add(referalBonus) - collect;\r\n            balancesTotal[users2users[parentUser]] = balancesTotal[users2users[parentUser]].add(interes);\r\n            balances[users2users[parentUser]] = balances[users2users[parentUser]].add(interes);\r\n            emit BalanceUp(users2users[parentUser], interes, now);\r\n            collectBalances[users2users[parentUser]] = reminder;\r\n            to = users2users[parentUser];\r\n            _removeIndex(serchIndexByAddress(users2users[parentUser]));\r\n            _queue(to, users2users[to]);\r\n        }else{\r\n            collectBalances[users2users[parentUser]] = collectBalances[users2users[parentUser]].add(referalBonus);\r\n        }\r\n        \r\n        uint256 length = users.length;\r\n        uint256 existLastIndex = length.sub(1);\r\n        uint256 firstHalfEnd = 0;\r\n        uint256 secondHalfStart = 0;\r\n        \r\n        if (length == 1 ){\r\n            collectBalances[users[0]] = collectBalances[users[0]].add(queueInteres.mul(cyles.mul(2)));\r\n        }else{\r\n            if (length % 2 != 0) {\r\n                firstHalfEnd  = length.div(2);\r\n                secondHalfStart  = length.div(2);\r\n            }else{\r\n                firstHalfEnd  = length.div(2).sub(1);\r\n                secondHalfStart  = length.div(2);\r\n            }\r\n            \r\n            for (uint i = 1; i <= cyles; i++) {\r\n                if(collectBalances[users[nextForwardUserId]].add(queueInteres) >= collect){\r\n                    reminder = collectBalances[users[nextForwardUserId]].add(queueInteres) - collect;\r\n                    balancesTotal[users[nextForwardUserId]] = balancesTotal[users[nextForwardUserId]].add(interes);\r\n                    balances[users[nextForwardUserId]] = balances[users[nextForwardUserId]].add(interes);\r\n                    collectBalances[users[nextForwardUserId]] = reminder;\r\n                    emit BalanceUp(users[nextForwardUserId], interes, now);\r\n                    to = users[nextForwardUserId];\r\n                    _removeIndex(serchIndexByAddress(users[nextForwardUserId]));\r\n                    _queue(to, users2users[to]);\r\n                    if (nextForwardUserId == 0){\r\n                        nextForwardUserId = firstHalfEnd;\r\n                    }else{\r\n                        nextForwardUserId = nextForwardUserId.sub(1);\r\n                    }\r\n                }else{\r\n                    collectBalances[users[nextForwardUserId]] = collectBalances[users[nextForwardUserId]].add(queueInteres);\r\n                }\r\n                if(collectBalances[users[nextBackUserId]].add(queueInteres) == collect){\r\n                    reminder = collectBalances[users[nextBackUserId]].add(queueInteres) - collect;\r\n                    balancesTotal[users[nextBackUserId]] = balancesTotal[users[nextBackUserId]].add(interes);\r\n                    balances[users[nextBackUserId]] = balances[users[nextBackUserId]].add(interes);\r\n                    collectBalances[users[nextBackUserId]] = reminder;\r\n                    emit BalanceUp(users[nextBackUserId], interes, now);\r\n                    to = users[nextBackUserId];\r\n                    _removeIndex(serchIndexByAddress(users[nextBackUserId]));\r\n                    _queue(to, users2users[to]);\r\n                    if (nextBackUserId == existLastIndex){\r\n                        nextBackUserId = secondHalfStart;\r\n                    }else{\r\n                        nextBackUserId = nextBackUserId.add(1);\r\n                    }\r\n                }else{\r\n                    collectBalances[users[nextBackUserId]] = collectBalances[users[nextBackUserId]].add(queueInteres);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getMyMoney() public {\r\n        require(balances[msg.sender]>0);\r\n        msg.sender.transfer(balances[msg.sender]);\r\n        emit GetMyMoney(msg.sender, balances[msg.sender], now);\r\n        balances[msg.sender]=0;\r\n    }\r\n    \r\n    function balanceOf(address who) public view returns (uint256 balance) {\r\n        return balances[who];\r\n    }\r\n    \r\n    function balanceTotalOf(address who) public view returns (uint256 balanceTotal) {\r\n        return balancesTotal[who];\r\n    }\r\n    \r\n    function getNextForwardUserId() public view returns (uint256) {\r\n        return nextForwardUserId;\r\n    }\r\n    \r\n    function getNextBackUserId() public view returns (uint256) {\r\n        return nextBackUserId;\r\n    }\r\n    \r\n    function getLastIndex() public view returns (uint256) {\r\n        uint256 length = users.length;\r\n        return length.sub(1);\r\n    }\r\n    \r\n    function getUserAddressById(uint256 id) public view returns (address userAddress) {\r\n        return users[id];\r\n    }\r\n    \r\n    function checkExistAddress(address user) public view returns (bool) {\r\n        return usersExist[user];\r\n    }\r\n    \r\n    function getParentUser(address user) public view returns (address) {\r\n        return users2users[user];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkExistAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parentUser\",\"type\":\"address\"}],\"name\":\"startQueue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextBackUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"serchIndexByAddress\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUserAddressById\",\"outputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextForwardUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceTotalOf\",\"outputs\":[{\"name\":\"balanceTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getParentUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"parentUser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"timeshtamp\",\"type\":\"uint256\"}],\"name\":\"QueueStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"timeshtamp\",\"type\":\"uint256\"}],\"name\":\"BalanceUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"timeshtamp\",\"type\":\"uint256\"}],\"name\":\"GetMyMoney\",\"type\":\"event\"}]","ContractName":"Queue","CompilerVersion":"v0.4.25-nightly.2018.7.5+commit.b1ab81ef","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5471b1b4b0754802439ad7208255b63fbbd8060eed8481cf1dc6498d0c511269"}]}