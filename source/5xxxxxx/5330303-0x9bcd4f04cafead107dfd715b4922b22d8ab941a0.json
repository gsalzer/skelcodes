{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n// CONTRACT USED TO TEST THE ICO CONTRACT\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract IprontoToken is StandardToken {\r\n\r\n  // Setting Token Name to Mango\r\n  string public constant name = \"iPRONTO\";\r\n\r\n  // Setting Token Symbol to MGO\r\n  string public constant symbol = \"IPR\";\r\n\r\n  // Setting Token Decimals to 18\r\n  uint8 public constant decimals = 18;\r\n\r\n  // Setting Token Decimals to 45 Million\r\n  uint256 public constant INITIAL_SUPPLY = 45000000 * (1 ether / 1 wei);\r\n\r\n  address public owner;\r\n\r\n  // Flags address for KYC verrified.\r\n  mapping (address => bool) public validKyc;\r\n\r\n  function IprontoToken() public{\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // Approving an address to tranfer tokens\r\n  function approveKyc(address[] _addrs)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint len = _addrs.length;\r\n        while (len-- > 0) {\r\n            validKyc[_addrs[len]] = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n  function isValidKyc(address _addr) public constant returns (bool){\r\n    return validKyc[_addr];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    require(isValidKyc(msg.sender));\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function() public{\r\n    throw;\r\n  }\r\n}\r\n\r\n\r\ncontract CrowdsaleiPRONTOLiveICO{\r\n  using SafeMath for uint256;\r\n  address public owner;\r\n\r\n  // The token being sold\r\n  IprontoToken public token;\r\n\r\n  // rate for one token in wei\r\n  uint256 public rate = 500; // 1 ether\r\n  uint256 public discountRatePreIco = 588; // 1 ether\r\n  uint256 public discountRateIco = 555; // 1 ether\r\n\r\n  // funds raised in Wei\r\n  uint256 public weiRaised;\r\n\r\n  // Funds pool\r\n  // Setting funds pool for PROMOTORS_POOL, PRIVATE_SALE_POOL, PRE_ICO_POOL and ICO_POOL\r\n  uint256 public constant PROMOTORS_POOL = 18000000 * (1 ether / 1 wei);\r\n  uint256 public constant PRIVATE_SALE_POOL = 3600000 * (1 ether / 1 wei);\r\n  uint256 public constant PRE_ICO_POOL = 6300000 * (1 ether / 1 wei);\r\n  uint256 public constant ICO_POOL = 17100000 * (1 ether / 1 wei);\r\n\r\n  // Initilising tracking variables for Funds pool\r\n  uint256 public promotorSale = 0;\r\n  uint256 public privateSale = 0;\r\n  uint256 public preicoSale = 0;\r\n  uint256 public icoSale = 0;\r\n\r\n  // Solidity event to notify the dashboard app about transfer\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  // Contract constructor\r\n  function CrowdsaleiPRONTOLiveICO() public{\r\n    token = createTokenContract();\r\n    owner = msg.sender;\r\n  }\r\n\r\n  // Creates ERC20 standard token\r\n  function createTokenContract() internal returns (IprontoToken) {\r\n    return new IprontoToken();\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase(uint256 weiAmount, address beneficiary) internal view returns (bool) {\r\n    bool nonZeroPurchase = weiAmount != 0;\r\n    bool validAddress = beneficiary != address(0);\r\n    return nonZeroPurchase && validAddress;\r\n  }\r\n\r\n  // Getter function to see all funds pool balances.\r\n  function availableTokenBalance(uint256 token_needed, uint8 mode)  internal view returns (bool){\r\n\r\n    if (mode == 1) { // promotorSale\r\n      return ((promotorSale + token_needed) <= PROMOTORS_POOL );\r\n    }\r\n    else if (mode == 2) { // Closed Group\r\n      return ((privateSale + token_needed) <= PRIVATE_SALE_POOL);\r\n    }\r\n    else if (mode == 3) { // preicoSale\r\n      return ((preicoSale + token_needed) <= PRE_ICO_POOL);\r\n    }\r\n    else if (mode == 4) { // icoSale\r\n      return ((icoSale + token_needed) <= ICO_POOL);\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () public payable {\r\n    throw;\r\n  }\r\n\r\n  // Token transfer\r\n  function transferToken(address beneficiary, uint256 tokens, uint8 mode) onlyOwner public {\r\n    // Checking for valid purchase\r\n    require(validPurchase(tokens, beneficiary));\r\n    require(availableTokenBalance(tokens, mode));\r\n    // Execute token purchase\r\n    if(mode == 1){\r\n      promotorSale = promotorSale.add(tokens);\r\n    } else if(mode == 2) {\r\n      privateSale = privateSale.add(tokens);\r\n    } else if(mode == 3) {\r\n      preicoSale = preicoSale.add(tokens);\r\n    } else if(mode == 4) {\r\n      icoSale = icoSale.add(tokens);\r\n    } else {\r\n      throw;\r\n    }\r\n    token.transfer(beneficiary, tokens);\r\n    TokenPurchase(beneficiary, beneficiary, tokens, tokens);\r\n  }\r\n\r\n  // Function to get balance of an address\r\n  function balanceOf(address _addr) public view returns (uint256 balance) {\r\n    return token.balanceOf(_addr);\r\n  }\r\n\r\n  function setTokenPrice(uint256 _rate,uint256 _discountRatePreIco,uint256 _discountRateIco) onlyOwner public returns (bool){\r\n    rate = _rate; // 1 ether\r\n    discountRatePreIco = _discountRatePreIco; // 1 ether\r\n    discountRateIco = _discountRateIco; // 1 ether\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promotorSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discountRatePreIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRIVATE_SALE_POOL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_POOL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_POOL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preicoSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_discountRatePreIco\",\"type\":\"uint256\"},{\"name\":\"_discountRateIco\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMOTORS_POOL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discountRateIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"CrowdsaleiPRONTOLiveICO","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://be38c299baead8b7c6869b489093cbf4061b3943234f8045905bddabdf10c9ec"}]}