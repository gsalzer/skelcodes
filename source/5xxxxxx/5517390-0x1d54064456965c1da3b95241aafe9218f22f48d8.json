{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"ONLY OWNER IS ALLOWED\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract IBelottoToken{\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function burn(uint256 _value) public;\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n}\r\n\r\n/**\r\n * @title BelottoCrowdsale\r\n * @dev BelottoCrowdsale accepting contributions only within a time frame.\r\n */\r\ncontract BelottoCrowdsale is Owned {\r\n  using SafeMath for uint256; \r\n  uint256 public presaleopeningTime;\r\n  uint256 public presaleclosingTime;\r\n  uint256 public saleopeningTime;\r\n  uint256 public saleclosingTime;\r\n  uint256 public secondsaleopeningTime;\r\n  uint256 public secondsaleclosingTime;\r\n  address public reserverWallet;    // Address where reserve tokens will be sent\r\n  address public bountyWallet;      // Address where bounty tokens will be sent\r\n  address public teamsWallet;       // Address where team's tokens will be sent\r\n  address public fundsWallet;       // Address where funds are collected\r\n  uint256 public fundsRaised;         // Amount of total fundsRaised\r\n  uint256 public preSaleTokens;\r\n  uint256 public saleTokens;\r\n  uint256 public teamAdvTokens;\r\n  uint256 public reserveTokens;\r\n  uint256 public bountyTokens;\r\n  uint256 public hardCap;\r\n  uint256 public minTxSize;\r\n  uint256 public maxTxSize;\r\n  bool    public presaleOpen;\r\n  bool    public firstsaleOpen;\r\n  bool    public secondsaleOpen;\r\n  mapping(address => uint) preSaleFunds;\r\n  mapping(address => uint) firstSaleFunds;\r\n  mapping(address => uint) secondSaleFunds;\r\n  struct Funds {\r\n    address spender;\r\n    uint256 amount;\r\n    uint256 time;\r\n    }\r\n    Funds[]  preSaleFundsArray;\r\n    Funds[]  firstSaleFundsArray;\r\n    Funds[]  secondSaleFundsArray;\r\n  \r\n  IBelottoToken public token;\r\n  \r\n  event Burn(address indexed burner, uint256 value);\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  /** @dev Reverts if not in crowdsale time range. */\r\n  modifier onlyWhilePreSaleOpen {\r\n    require(now >= presaleopeningTime && now <= presaleclosingTime, \"Pre Sale Close\");\r\n    _;\r\n  }\r\n  \r\n  modifier onlyWhileFirstSaleOpen {\r\n    require(now >= saleopeningTime && now <= saleclosingTime, \"First Sale Close\");\r\n    _;\r\n  }\r\n  \r\n  modifier onlyWhileSecondSaleOpen {\r\n    require(now >= secondsaleopeningTime && now <= secondsaleclosingTime, \"Second Sale Close\");\r\n    _;\r\n  }\r\n  \r\n  function totalRemainingTokens() public view returns(uint256 remainingTokens){\r\n    return token.balanceOf(this);      \r\n  }\r\n  \r\n  function BelottoCrowdsale(uint256 _preST, uint256 _saleT, uint256 _teamAdvT, uint256 _reserveT, uint256 _bountyT, address _reserverWallet, \r\n                            address _bountyWallet, address _teamsWallet, address _fundsWallet, address _tokenContractAdd, address _owner) \r\n                            public {\r\n    \r\n    \r\n    _setWallets(_reserverWallet,_bountyWallet,_teamsWallet,_fundsWallet);\r\n    _setMoreDetails(_preST,_saleT,_teamAdvT,_reserveT,_bountyT,_owner);\r\n    _setTimes();\r\n    \r\n    // takes an address of the existing token contract as parameter\r\n    token = IBelottoToken(_tokenContractAdd);\r\n  }\r\n  \r\n  function _setTimes() internal{\r\n    presaleopeningTime    = 1524873600; // 28th April 2018 00:00:00 GMT \r\n    presaleclosingTime    = 1527379199; // 26th May 2018 23:59:59 GMT   \r\n    saleopeningTime       = 1527724800; // 31st May 2018 00:00:00 GMT \r\n    saleclosingTime       = 1532908799; // 29th July 2018 23:59:59 GMT\r\n    secondsaleopeningTime = 1532908800; // 30th July 2018 00:00:00 GMT\r\n    secondsaleclosingTime = 1535673599; // 30th August 2018 23:59:59 GMT\r\n  }\r\n  \r\n  function _setWallets(address _reserverWallet, address _bountyWallet, address _teamsWallet, address _fundsWallet) internal{\r\n    reserverWallet        = _reserverWallet;\r\n    bountyWallet          = _bountyWallet;\r\n    teamsWallet           = _teamsWallet;\r\n    fundsWallet           = _fundsWallet;\r\n  }\r\n  \r\n  function _setMoreDetails(uint256 _preST, uint256 _saleT, uint256 _teamAdvT, uint256 _reserveT, uint256 _bountyT, address _owner) internal{\r\n    preSaleTokens         = _preST * 10**uint(18);\r\n    saleTokens            = _saleT * 10**uint(18);\r\n    teamAdvTokens         = _teamAdvT * 10**uint(18);\r\n    reserveTokens         = _reserveT * 10**uint(18);\r\n    bountyTokens          = _bountyT * 10**uint(18);\r\n    hardCap               = 16000 * 10**(uint(18));   //in start only, it'll be set by Owner\r\n    minTxSize             = 100000000000000000; // in wei's. (0,1 ETH)\r\n    maxTxSize             = 200000000000000000000; // in wei's. (200 ETH)\r\n    owner = _owner;\r\n  }\r\n  \r\n  function TokenAllocate(address _wallet,uint256 _amount) internal returns (bool success) {\r\n      uint256 tokenAmount = _amount;\r\n      token.transfer(_wallet,tokenAmount);\r\n      return true;\r\n  }\r\n  \r\n  function startSecondSale() public onlyOwner{\r\n      presaleOpen = false;\r\n      firstsaleOpen  = false;\r\n      secondsaleOpen = true;\r\n  }\r\n  \r\n  \r\n  function stopSecondSale() public onlyOwner{\r\n      presaleOpen = false;\r\n      firstsaleOpen = false;\r\n      secondsaleOpen = false;\r\n      if(teamAdvTokens >= 0 && bountyTokens >=0){\r\n          TokenAllocate(teamsWallet,teamAdvTokens);\r\n          teamAdvTokens = 0;\r\n          TokenAllocate(bountyWallet,bountyTokens);\r\n          bountyTokens = 0;\r\n      }\r\n  }\r\n\r\n  function _checkOpenings(uint256 _weiAmount) internal{\r\n      if((fundsRaised + _weiAmount >= hardCap)){\r\n            presaleOpen = false;\r\n            firstsaleOpen  = false;\r\n            secondsaleOpen = true;\r\n      }\r\n      else if(secondsaleOpen){\r\n          presaleOpen = false;\r\n          firstsaleOpen  = false;\r\n          secondsaleOpen = true;\r\n      }\r\n      else if(now >= presaleopeningTime && now <= presaleclosingTime){\r\n          presaleOpen = true;\r\n          firstsaleOpen = false;\r\n          secondsaleOpen = false;\r\n          if(reserveTokens >= 0){\r\n            if(TokenAllocate(reserverWallet,reserveTokens)){\r\n                reserveTokens = 0;\r\n            }\r\n          }\r\n      }\r\n      else if(now >= saleopeningTime && now <= saleclosingTime){\r\n          presaleOpen = false;\r\n          firstsaleOpen = true;\r\n          secondsaleOpen = false;\r\n      }\r\n      else if(now >= secondsaleopeningTime && now <= secondsaleclosingTime){\r\n            presaleOpen = false;\r\n            firstsaleOpen  = false;\r\n            secondsaleOpen = true;\r\n      }\r\n      else{\r\n          presaleOpen = false;\r\n          firstsaleOpen = false;\r\n          secondsaleOpen = false;\r\n          if(teamAdvTokens >= 0 && bountyTokens >=0){\r\n            TokenAllocate(teamsWallet,teamAdvTokens);\r\n            teamAdvTokens = 0;\r\n            TokenAllocate(bountyWallet,bountyTokens);\r\n            bountyTokens = 0;\r\n          }\r\n      }\r\n  }\r\n  \r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  function buyTokens(address _beneficiary) public payable {\r\n    \r\n    uint256 ethers = msg.value;\r\n    \r\n    _preValidatePurchase(_beneficiary, ethers);\r\n    \r\n    _checkOpenings(ethers);\r\n    \r\n    _setFunds(_beneficiary,ethers);\r\n    \r\n    // update state of wei's raised during complete ICO\r\n    fundsRaised = fundsRaised.add(ethers);\r\n    //sjfhj\r\n    _forwardFunds(_beneficiary); \r\n  }\r\n  \r\n  function _setFunds(address _beneficiary, uint256 _ethers) internal{\r\n      if(presaleOpen){\r\n          preSaleFundsArray.push(Funds(_beneficiary,_ethers, now));\r\n      }\r\n      else if(firstsaleOpen){\r\n          firstSaleFundsArray.push(Funds(_beneficiary,_ethers, now));\r\n      }\r\n      else if(secondsaleOpen){\r\n          secondSaleFundsArray.push(Funds(_beneficiary,_ethers, now));\r\n      }\r\n  }\r\n  \r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal{\r\n   require(_beneficiary != address(0), \"WRONG Address\");\r\n   require(_weiAmount != 0, \"Insufficient funds\");\r\n   require(_weiAmount >= minTxSize  && _weiAmount <= maxTxSize ,\"FUNDS should be MIN 0,1 ETH and Max 200 ETH\");\r\n  }\r\n  \r\n  function TotalSpenders() public view returns (uint256 preSaleSpenders,uint256 firstSaleSpenders,uint256 secondSaleSpenders){\r\n      return ((preSaleFundsArray.length),(firstSaleFundsArray.length),(secondSaleFundsArray.length));\r\n  }\r\n  \r\n  function _forwardFunds(address _beneficiary) internal {\r\n    fundsWallet.transfer(msg.value);\r\n  }\r\n  \r\n  function preSaleDelivery(address _beneficiary, uint256 _tokenAmount) public onlyOwner{\r\n      _checkOpenings(0);\r\n      require(!presaleOpen, \"Pre-Sale is NOT CLOSE \");\r\n      require(preSaleTokens >= _tokenAmount,\"NO Pre-SALE Tokens Available\");\r\n      token.transfer(_beneficiary,_tokenAmount);\r\n      preSaleTokens = preSaleTokens.sub(_tokenAmount);\r\n  }\r\n  \r\n  function firstSaleDelivery(address _beneficiary, uint256 _tokenAmount) public onlyOwner{\r\n      require(!presaleOpen && !firstsaleOpen, \"First Sale is NOT CLOSE\");\r\n      if(saleTokens <= _tokenAmount && preSaleTokens >= _tokenAmount){\r\n          saleTokens = saleTokens.add(_tokenAmount);\r\n          preSaleTokens = preSaleTokens.sub(_tokenAmount);\r\n      }\r\n      token.transfer(_beneficiary,_tokenAmount);\r\n      saleTokens = saleTokens.sub(_tokenAmount);\r\n  }\r\n  \r\n  function secondSaleDelivery(address _beneficiary, uint256 _tokenAmount) public onlyOwner{\r\n      require(!presaleOpen && !firstsaleOpen && !secondsaleOpen, \"Second Sale is NOT CLOSE\");\r\n      require(saleTokens >= _tokenAmount,\"NO Sale Tokens Available\");\r\n      token.transfer(_beneficiary,_tokenAmount);\r\n      saleTokens = saleTokens.sub(_tokenAmount);\r\n  }\r\n  \r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burnTokens(uint256 _value) public onlyOwner {\r\n      token.burn(_value);\r\n  }\r\n \r\n  function preSaleSpenderTxDetails(uint _index) public view returns(address spender, uint256 amount, uint256 time){\r\n      return (preSaleFundsArray[_index].spender,preSaleFundsArray[_index].amount,preSaleFundsArray[_index].time);\r\n  }\r\n  \r\n  function firstSaleSpenderTxDetails(uint _index) public view returns(address spender, uint256 amount, uint256 time){\r\n      return (firstSaleFundsArray[_index].spender,firstSaleFundsArray[_index].amount,firstSaleFundsArray[_index].time);\r\n  }\r\n  \r\n  function secSaleSpenderTxDetails(uint _index) public view returns(address spender, uint256 amount, uint256 time){\r\n      return (secondSaleFundsArray[_index].spender,secondSaleFundsArray[_index].amount,secondSaleFundsArray[_index].time);\r\n  }\r\n  \r\n  \r\n  function transferRemainingTokens(address _to,uint256 _tokens) public onlyOwner {\r\n      require(!presaleOpen && !firstsaleOpen && !secondsaleOpen);\r\n      uint myBalance = token.balanceOf(this); \r\n      require(myBalance >= _tokens);\r\n      token.transfer(_to,_tokens);\r\n  }\r\n  \r\n  function updateHardCap(uint256 _hardCap)public onlyOwner {\r\n      hardCap = _hardCap * 10**uint(18);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"firstsaleOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTxSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsaleopeningTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"preSaleSpenderTxDetails\",\"outputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"secSaleSpenderTxDetails\",\"outputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemainingTokens\",\"outputs\":[{\"name\":\"remainingTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalSpenders\",\"outputs\":[{\"name\":\"preSaleSpenders\",\"type\":\"uint256\"},{\"name\":\"firstSaleSpenders\",\"type\":\"uint256\"},{\"name\":\"secondSaleSpenders\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"firstSaleSpenderTxDetails\",\"outputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"updateHardCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsaleOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTxSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleopeningTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"secondSaleDelivery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleclosingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferRemainingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"firstSaleDelivery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleopeningTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAdvTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserverWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleclosingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSecondSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSecondSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"preSaleDelivery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsaleclosingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_preST\",\"type\":\"uint256\"},{\"name\":\"_saleT\",\"type\":\"uint256\"},{\"name\":\"_teamAdvT\",\"type\":\"uint256\"},{\"name\":\"_reserveT\",\"type\":\"uint256\"},{\"name\":\"_bountyT\",\"type\":\"uint256\"},{\"name\":\"_reserverWallet\",\"type\":\"address\"},{\"name\":\"_bountyWallet\",\"type\":\"address\"},{\"name\":\"_teamsWallet\",\"type\":\"address\"},{\"name\":\"_fundsWallet\",\"type\":\"address\"},{\"name\":\"_tokenContractAdd\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BelottoCrowdsale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000007270e000000000000000000000000000000000000000000000000000000000023c34600000000000000000000000000000000000000000000000000000000000aba9500000000000000000000000000000000000000000000000000000000000e4e1c000000000000000000000000000000000000000000000000000000000003938700000000000000000000000000dc6d15158296ca79344ffb5287c65c42526bf9ab00000000000000000000000096f06dbace3ea24dfce49e220096fad077070b6b0000000000000000000000002c97bc85d3ba199403890882df83655eac61401c000000000000000000000000549d458fa301b3045c1daf6225408ff828b0e1520000000000000000000000004c1ed91da2edd5f86c0f4adb8562466f202f0a0a00000000000000000000000042b9f657fbfebb78d00cd18e47d2e2d58b342085","Library":"","SwarmSource":"bzzr://4b78ed189cdce2fbdc808f372a0c32125ff057b0f5a6994459429534f0c87097"}]}