{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------------------------\r\n// Moviecoin Token by Xender Limited.\r\n// An ERC20 standard\r\n//\r\n// author: Xender Team\r\n// Contact: service@xender.com\r\n// ----------------------------------------------------------------------------------------------\r\n\r\n/*\r\n    Standard Token interface\r\n*/\r\ncontract ERC20Interface {\r\n     // Get the total token name\r\n    function name() public constant returns (string);\r\n\r\n    // Get the total token symbol\r\n    function symbol() public constant returns (string); \r\n\r\n    // Get the total token decimals\r\n    function decimals() public constant returns (uint);\r\n\r\n    // Get the total token supply\r\n    function totalSupply() public constant returns (uint256);\r\n\r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) public constant returns (uint256);\r\n  \r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    \r\n    // transfer _value amount of token approved by address _from\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n    // approve an address with _value amount of tokens\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n\r\n    // get remaining token approved by _owner to _spender\r\n    function allowance(address _owner, address _spender) public constant returns (uint256);\r\n   \r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/*\r\n    owned manager\r\n*/\r\ncontract Owned {\r\n\r\n\t// Owner of this contract\r\n    address owner;\r\n    \r\n    // permit transaction\r\n    bool isLock = true;\r\n    \r\n    // white list\r\n    mapping(address => bool) whitelisted;\r\n \r\n    \r\n    function Owned() public {\r\n        owner = msg.sender;\r\n        whitelisted[owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\t\r\n\tmodifier isUnlock () {\r\n        if (isLock){\r\n            require(whitelisted[msg.sender] == true);\r\n        }\r\n        _;\r\n    }\r\n\t\r\n\t /**\r\n     * add new address to white list\r\n     */\r\n     function addWhitelist(address _white) public onlyOwner {\r\n         whitelisted[_white] = true;\r\n     }\r\n     \r\n    /**\r\n     * remove address from white list\r\n     */\r\n    function removeWhitelist(address _white) public onlyOwner {\r\n        whitelisted[_white] = false;\r\n    }\r\n      \r\n    /**\r\n     * check whether the address is in the white list\r\n     */\r\n    function checkWhitelist(address _addr) public view returns (bool) {\r\n        return whitelisted[_addr];\r\n    }\r\n    \r\n    /**\r\n    * unlock token. Only after unlock can it be traded.\r\n    */\r\n    function unlockToken() public onlyOwner returns (bool) {\r\n        isLock = false;\r\n        return isLock;\r\n    } \r\n}\r\n\r\n/*\r\n    Utilities & Common Modifiers\r\n*/\r\ncontract Utils {\r\n    /**\r\n        constructor\r\n    */\r\n    function Utils() public {\r\n    }\r\n    \r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        require(_address != 0x0);\r\n        _;\r\n    }\r\n\r\n    // Overflow protected math functions\r\n\r\n    /**\r\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\r\n\r\n        @param _x   value 1\r\n        @param _y   value 2\r\n\r\n        @return sum\r\n    */\r\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x + _y;\r\n        require(z >= _x);\r\n        return z;\r\n    }\r\n\r\n    /**\r\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\r\n\r\n        @param _x   minuend\r\n        @param _y   subtrahend\r\n\r\n        @return difference\r\n    */\r\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        require(_x >= _y);\r\n        return _x - _y;\r\n    }\r\n}\r\n\r\n/*\r\n    Moviecoin Token\r\n*/\r\ncontract Moviecoin is ERC20Interface, Owned, Utils {\r\n    string name_ = 'Dayibi';  \r\n    string  symbol_ = 'DYB';\r\n    uint8 decimals_ = 8; \r\n    uint256 totalSupply_ = 10 ** 18;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function Moviecoin() public {\r\n        balances[msg.sender] = totalSupply_;\r\n        Transfer(0x0, msg.sender, totalSupply_);\r\n    }\r\n\r\n  /**\r\n  * @dev token's symbol\r\n  */\r\n  \r\n  function name() public constant returns (string){\r\n      return name_;\r\n  }\r\n  \r\n  /**\r\n   * @dev set token name\r\n   */\r\n   function setName(string _name) public onlyOwner {\r\n       name_ = _name;\r\n   }\r\n\r\n  \r\n  /**\r\n  * @dev token's symbol\r\n  */\r\n  function symbol() public constant returns (string){\r\n      return symbol_;\r\n  }\r\n  \r\n   /**\r\n   * @dev set token symbol\r\n   */\r\n   function setSymbol(string _symbol) public onlyOwner {\r\n       symbol_ = _symbol;\r\n   }\r\n    \r\n  /**\r\n  * @dev token's decimals\r\n  */\r\n   function decimals() public constant returns (uint){\r\n        return decimals_;\r\n   }\r\n \r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Get the account balance of another account with address _owner\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256) {\r\n        return balances[_owner];\r\n  }\r\n \r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public isUnlock returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public isUnlock returns (bool) {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = safeSub(balances[_from], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public isUnlock validAddress(_spender) returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n  /**\r\n   * @dev Don't accept ETH\r\n   */\r\n   function () public payable {\r\n       revert();\r\n   }\r\n   \r\n   /**\r\n    * @dev Owner can transfer out any accidentally sent ERC20 tokens\r\n    */\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_white\",\"type\":\"address\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_white\",\"type\":\"address\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Moviecoin","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e634b2df705394106e5680301708f7f62a31cbee6b435c99cdc0d83ef9e42074"}]}