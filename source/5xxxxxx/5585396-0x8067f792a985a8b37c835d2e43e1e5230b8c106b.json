{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ninterface IERC20 {\r\n \r\n\r\n    function totalSupply() public constant returns (uint256 totalSupply);\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _owner, uint256 _value) public returns (bool success);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n    function transferFrom(address _owner, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n*/\r\ncontract KeplerCoin is IERC20 {\r\n    \r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    \r\n    uint256 public constant  _totalSupply = 30000000000000000000000000 ;\r\n    string public constant symbol = \"KPL\";\r\n    string public constant name = \"Kepler Coin\";\r\n    uint8 public constant decimals = 18;\r\n    \r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n    // rate of our token\r\n    uint256 public RATE = 5000;\r\n    \r\n    // address of the person who created it\r\n    address public owner;\r\n    \r\n    bool public isActive = true;\r\n    \r\n\r\n    \r\n    //paybale function to create transaction\r\n    \r\n    function () payable {\r\n        createTokens();\r\n    }\r\n\r\n    function KeplerCoin(){\r\n    \r\n        owner = msg.sender;\r\n        balances[msg.sender] = _totalSupply;\r\n\r\n\r\n    } \r\n    \r\n    function changeRate(uint256 _rate){\r\n    \r\n        require(msg.sender == owner);\r\n\r\n        RATE = _rate;\r\n    }\r\n    \r\n    \r\n    function toggleActive(bool _isActive){\r\n        \r\n        require(msg.sender == owner);\r\n        \r\n        isActive = _isActive;\r\n\r\n    }\r\n    \r\n    \r\n   \r\n \r\n    \r\n    function createTokens() payable{\r\n        require(msg.value > 0\r\n        && isActive\r\n        );\r\n        \r\n        uint256 tokens = msg.value*RATE;\r\n        \r\n        require(balances[owner] >= tokens);\r\n\r\n        balances[owner] = balances[owner].sub(tokens);\r\n\r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n\r\n        owner.transfer(msg.value);\r\n    }\r\n    \r\n    function totalSupply() public constant returns (uint256 totalSupply){\r\n        return _totalSupply;\r\n    }\r\n    \r\n     function balanceOf(address _owner) public constant returns (uint256 balance){\r\n         return balances[_owner];\r\n     }\r\n     \r\n    function transfer(address _owner, uint256 _value) public returns (bool success){\r\n        \r\n        require(\r\n            balances[msg.sender]>= _value \r\n            && _value >0\r\n            );\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_owner] = balances[_owner].add(_value);\r\n        Transfer(msg.sender , _owner  , _value);\r\n        return true;\r\n    }\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    \r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining){\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n        require(\r\n            allowed[_from][msg.sender] >= _value\r\n            && balances[_from] >= _value\r\n            && _value >0\r\n            );\r\n        \r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from , _to , _value);\r\n        return true;\r\n        \r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success){\r\n        \r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender , _spender , _value);\r\n        return true;\r\n        \r\n    }\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n\r\n \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"toggleActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"KeplerCoin","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9f1568898b31675a3d438a37a644c117ce033bd2aec1841599e67c62cc1453ae"}]}