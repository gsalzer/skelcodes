{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply()public view returns (uint total_Supply);\r\n  function balanceOf(address who)public view returns (uint256);\r\n  function allowance(address owner, address spender)public view returns (uint);\r\n  function transferFrom(address from, address to, uint value)public returns (bool ok);\r\n  function approve(address spender, uint value)public returns (bool ok);\r\n  function transfer(address to, uint value)public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract TANDER is ERC20\r\n{ using SafeMath for uint256;\r\n    // Name of the token\r\n    string public constant name = \"TANDER\";\r\n\r\n    // Symbol of token\r\n    string public constant symbol = \"TDR\";\r\n    uint8 public constant decimals = 18;\r\n    uint public _totalsupply = 10000000000000 *10 ** 18; // 10 TRILLION TDR\r\n    address public owner;\r\n    uint256 constant public _price_tokn = 1000 ; \r\n    uint256 no_of_tokens;\r\n    uint256 bonus_token;\r\n    uint256 total_token;\r\n    bool stopped = false;\r\n    uint256 public pre_startdate;\r\n    uint256 public ico_startdate;\r\n    uint256 pre_enddate;\r\n    uint256 ico_enddate;\r\n    uint256 maxCap_PRE;\r\n    uint256 maxCap_ICO;\r\n    bool public icoRunningStatus = true;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    address ethFundMain = 0x0070570A1D3F5CcaD6A74B3364D13C475BF9bD6a; // Owner's Account\r\n    uint256 public Numtokens;\r\n    uint256 public bonustokn;\r\n    uint256 public ethreceived;\r\n    uint bonusCalculationFactor;\r\n    uint public bonus;\r\n    uint x ;\r\n \r\n    \r\n     enum Stages {\r\n        NOTSTARTED,\r\n        PREICO,\r\n        ICO,\r\n        ENDED\r\n    }\r\n    Stages public stage;\r\n    \r\n    modifier atStage(Stages _stage) {\r\n        if (stage != _stage)\r\n            // Contract not in expected state\r\n            revert();\r\n        _;\r\n    }\r\n    \r\n     modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n  \r\n   \r\n    function TANDER() public\r\n    {\r\n        owner = msg.sender;\r\n        balances[owner] = 2000000000000 *10 ** 18;  // 2 TRILLION TDR FOR RESERVE\r\n        stage = Stages.NOTSTARTED;\r\n        Transfer(0, owner, balances[owner]);\r\n    }\r\n  \r\n    function () public payable \r\n    {\r\n        require(stage != Stages.ENDED);\r\n        require(!stopped && msg.sender != owner);\r\n    if( stage == Stages.PREICO && now <= pre_enddate )\r\n        {  \r\n            no_of_tokens =(msg.value).mul(_price_tokn);\r\n            ethreceived = ethreceived.add(msg.value);\r\n            bonus= bonuscalpre();\r\n            bonus_token = ((no_of_tokens).mul(bonus)).div(100);  // bonus calculation\r\n            total_token = no_of_tokens + bonus_token;\r\n            Numtokens= Numtokens.add(no_of_tokens);\r\n             bonustokn= bonustokn.add(bonus_token);\r\n            transferTokens(msg.sender,total_token);\r\n         }\r\n         \r\n         \r\n    else\r\n    if(stage == Stages.ICO && now <= ico_enddate )\r\n        {\r\n             \r\n            no_of_tokens =((msg.value).mul(_price_tokn));\r\n            ethreceived = ethreceived.add(msg.value);\r\n            total_token = no_of_tokens + bonus_token;\r\n           Numtokens= Numtokens.add(no_of_tokens);\r\n             bonustokn= bonustokn.add(bonus_token);\r\n            transferTokens(msg.sender,total_token);\r\n        \r\n        }\r\n    else {\r\n            revert();\r\n        }\r\n       \r\n    }\r\n\r\n    \r\n    //bonus calculation for preico on per day basis\r\n     function bonuscalpre() private returns (uint256 cp)\r\n        {\r\n          uint bon = 8;\r\n             bonusCalculationFactor = (block.timestamp.sub(pre_startdate)).div(604800); //time period in seconds\r\n            if(bonusCalculationFactor == 0)\r\n            {\r\n                bon = 8;\r\n            }\r\n         \r\n            else{\r\n                 bon -= bonusCalculationFactor* 8;\r\n            }\r\n            return bon;\r\n          \r\n        }\r\n        \r\n \r\n  \r\n     function start_PREICO() public onlyOwner atStage(Stages.NOTSTARTED)\r\n      {\r\n          stage = Stages.PREICO;\r\n          stopped = false;\r\n          maxCap_PRE = 3000000000000 * 10 ** 18;  // 3 TRILLION\r\n          balances[address(this)] = maxCap_PRE;\r\n          pre_startdate = now;\r\n          pre_enddate = now + 90 days; //time for preICO\r\n          Transfer(0, address(this), balances[address(this)]);\r\n          }\r\n    \r\n    \r\n      function start_ICO() public onlyOwner atStage(Stages.PREICO)\r\n      {\r\n          stage = Stages.ICO;\r\n          stopped = false;\r\n          maxCap_ICO = 5000000000000 * 10 **18;   // 5 TRILLION\r\n          balances[address(this)] = balances[address(this)].add(maxCap_ICO);\r\n         ico_startdate = now;\r\n         ico_enddate = now + 180 days; //time for ICO\r\n          Transfer(0, address(this), balances[address(this)]);\r\n          }\r\n          \r\n   \r\n    // called by the owner, pause ICO\r\n    function StopICO() external onlyOwner  {\r\n        stopped = true;\r\n      \r\n    }\r\n\r\n    // called by the owner , resumes ICO\r\n    function releaseICO() external onlyOwner\r\n    {\r\n        stopped = false;\r\n      \r\n    }\r\n    \r\n     function end_ICO() external onlyOwner atStage(Stages.ICO)\r\n     {\r\n         require(now > ico_enddate);\r\n         stage = Stages.ENDED;\r\n         icoRunningStatus= false;\r\n        _totalsupply = (_totalsupply).sub(balances[address(this)]);\r\n         balances[address(this)] = 0;\r\n         Transfer(address(this), 0 , balances[address(this)]);\r\n         \r\n     }\r\n      // This function can be used by owner in emergency to update running status parameter\r\n        function fixSpecications(bool RunningStatus ) external onlyOwner\r\n        {\r\n           icoRunningStatus = RunningStatus;\r\n        }\r\n     \r\n    // what is the total supply of the ech tokens\r\n     function totalSupply() public view returns (uint256 total_Supply) {\r\n         total_Supply = _totalsupply;\r\n     }\r\n    \r\n    // What is the balance of a particular account?\r\n     function balanceOf(address _owner)public view returns (uint256 balance) {\r\n         return balances[_owner];\r\n     }\r\n    \r\n    // Send _value amount of tokens from address _from to address _to\r\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n     // fees in sub-currencies; the command should fail unless the _from account has\r\n     // deliberately authorized the sender of the message via some mechanism; we propose\r\n     // these standardized APIs for approval:\r\n     function transferFrom( address _from, address _to, uint256 _amount )public returns (bool success) {\r\n     require( _to != 0x0);\r\n     require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\r\n     balances[_from] = (balances[_from]).sub(_amount);\r\n     allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\r\n     balances[_to] = (balances[_to]).add(_amount);\r\n     Transfer(_from, _to, _amount);\r\n     return true;\r\n         }\r\n    \r\n   // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     function approve(address _spender, uint256 _amount)public returns (bool success) {\r\n         require(!icoRunningStatus);\r\n         require( _spender != 0x0);\r\n         allowed[msg.sender][_spender] = _amount;\r\n         Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n  \r\n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\r\n         require( _owner != 0x0 && _spender !=0x0);\r\n         return allowed[_owner][_spender];\r\n   }\r\n    // Transfer the balance from owner's account to another account\r\n     function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n         if(icoRunningStatus && msg.sender == owner)\r\n         {\r\n            require(balances[owner] >= _amount && _amount >= 0 && balances[_to] + _amount > balances[_to]);\r\n            balances[owner] = (balances[owner]).sub(_amount);\r\n            balances[_to] = (balances[_to]).add(_amount);\r\n            Transfer(owner, _to, _amount);\r\n            return true;\r\n         }\r\n       \r\n         else if(!icoRunningStatus)\r\n         {\r\n            require(balances[msg.sender] >= _amount && _amount >= 0 && balances[_to] + _amount > balances[_to]);\r\n            balances[msg.sender] = (balances[msg.sender]).sub(_amount);\r\n            balances[_to] = (balances[_to]).add(_amount);\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n         } \r\n         \r\n         else \r\n         revert();\r\n     }\r\n  \r\n\r\n          // Transfer the balance from owner's account to another account\r\n    function transferTokens(address _to, uint256 _amount) private returns(bool success) {\r\n        require( _to != 0x0);       \r\n        require(balances[address(this)] >= _amount && _amount > 0);\r\n        balances[address(this)] = (balances[address(this)]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        Transfer(address(this), _to, _amount);\r\n        return true;\r\n        }\r\n\r\n        function transferby(address _to,uint256 _amount) external onlyOwner returns(bool success) {\r\n        require( _to != 0x0); \r\n        require(balances[address(this)] >= _amount && _amount > 0);\r\n        balances[address(this)] = (balances[address(this)]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        Transfer(address(this), _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n \r\n    \t//In case the ownership needs to be transferred\r\n\tfunction transferOwnership(address newOwner)public onlyOwner\r\n\t{\r\n\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\r\n\t    balances[owner] = 0;\r\n\t    owner = newOwner;\r\n\t}\r\n\r\n    \r\n    function drain() external onlyOwner {\r\n        ethFundMain.transfer(this.balance);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"end_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethreceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_PREICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_price_tokn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonustokn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pre_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferby\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Numtokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"RunningStatus\",\"type\":\"bool\"}],\"name\":\"fixSpecications\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoRunningStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TANDER","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://91726bd9c164575f6d89ba3c6ea2073c84bc7e5d5d1a955d946433e32e96c4ec"}]}