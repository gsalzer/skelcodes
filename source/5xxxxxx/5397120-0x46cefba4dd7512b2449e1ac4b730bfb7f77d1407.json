{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/// @author MinakoKojima (https://github.com/lychees)\r\ncontract DecentralizedExchangeHotPotato {\r\n  address private owner;\r\n  mapping (address => bool) private admins;\r\n  \r\n  struct Order {\r\n    address creator;    \r\n    address owner;\r\n    address issuer;    \r\n    uint256 tokenId;    \r\n    uint256 price;\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n  }  \r\n  Order[] private orderBook;\r\n  uint256 private orderBookSize;\r\n\r\n  function DecentralizedExchangeHotPotato() public {\r\n    owner = msg.sender;\r\n    admins[owner] = true;    \r\n  }\r\n\r\n  /* Modifiers */\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmins() {\r\n    require(admins[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /* Owner */\r\n  function setOwner (address _owner) onlyOwner() public {\r\n    owner = _owner;\r\n  }\r\n\r\n  function addAdmin (address _admin) onlyOwner() public {\r\n    admins[_admin] = true;\r\n  }\r\n\r\n  function removeAdmin (address _admin) onlyOwner() public {\r\n    delete admins[_admin];\r\n  }\r\n\r\n  /* Withdraw */\r\n  function withdrawAll () onlyAdmins() public {\r\n   msg.sender.transfer(address(this).balance);\r\n  }\r\n\r\n  function withdrawAmount (uint256 _amount) onlyAdmins() public {\r\n    msg.sender.transfer(_amount);\r\n  }\r\n\r\n  /* ERC721 */\r\n  function name() public pure returns (string _name) {\r\n    return \"dapdap.io | HotPotatoExchange\";\r\n  }\r\n\r\n  /* Read */\r\n  function isAdmin(address _admin) public view returns (bool _isAdmin) {\r\n    return admins[_admin];\r\n  }\r\n  function totalOrder() public view returns (uint256 _totalOrder) {\r\n    return orderBookSize;\r\n  }  \r\n  function allOf (uint256 _id) public view returns (address _creator, address _owner, address _issuer, uint256 _tokenId, uint256 _price, uint256 _startTime, uint256 _endTime) {\r\n    return (orderBook[_id].creator, orderBook[_id].owner, orderBook[_id].issuer, orderBook[_id].tokenId, orderBook[_id].price, orderBook[_id].startTime, orderBook[_id].endTime);\r\n  }  \r\n  \r\n  /* Util */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(addr) } // solium-disable-line\r\n    return size > 0;\r\n  }\r\n\r\n  function getNextPrice (uint256 _price) public pure returns (uint256 _nextPrice) {\r\n    return _price * 123 / 100;\r\n  }  \r\n\r\n  /* Buy */\r\n  function put(address _issuer, uint256 _tokenId, uint256 _price,\r\n               uint256 _startTime, uint256 _endTime) public {\r\n    require(_startTime <= _endTime);                 \r\n    Issuer issuer = Issuer(_issuer);\r\n    require(issuer.ownerOf(_tokenId) == msg.sender);\r\n    issuer.transferFrom(msg.sender, address(this), _tokenId);\r\n    if (orderBookSize == orderBook.length) {\r\n      orderBook.push(Order(msg.sender, msg.sender,  _issuer, _tokenId, _price, _startTime, _endTime));\r\n    } else {    \r\n      orderBook[orderBookSize] = Order(msg.sender, msg.sender,  _issuer, _tokenId, _price, _startTime, _endTime);\r\n    }\r\n    orderBookSize += 1;\r\n  }\r\n  function buy(uint256 _id) public payable{\r\n    require(msg.value >= orderBook[_id].price);\r\n    require(msg.sender != orderBook[_id].owner);\r\n    require(!isContract(msg.sender));\r\n    require(orderBook[_id].startTime <= now && now <= orderBook[_id].endTime);\r\n    orderBook[_id].owner.transfer(orderBook[_id].price*24/25); // 96%\r\n    orderBook[_id].creator.transfer(orderBook[_id].price/50);  // 2%    \r\n    if (msg.value > orderBook[_id].price) {\r\n        msg.sender.transfer(msg.value - orderBook[_id].price);\r\n    }\r\n    orderBook[_id].owner = msg.sender;\r\n    orderBook[_id].price = getNextPrice(orderBook[_id].price);\r\n  }\r\n  function revoke(uint256 _id) public {\r\n    require(msg.sender == orderBook[_id].owner);\r\n    require(orderBook[_id].endTime <= now);\r\n    \r\n    Issuer issuer = Issuer(orderBook[_id].issuer);\r\n    issuer.transfer(msg.sender, orderBook[_id].tokenId);    \r\n    orderBook[_id] = orderBook[orderBookSize-1];\r\n    orderBookSize -= 1;\r\n  }\r\n}\r\n\r\ninterface Issuer {\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) external;  \r\n  function transfer(address _to, uint256 _tokenId) external;\r\n  function ownerOf (uint256 _tokenId) external view returns (address _owner);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalOrder\",\"outputs\":[{\"name\":\"_totalOrder\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"allOf\",\"outputs\":[{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_issuer\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_issuer\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"put\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getNextPrice\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"DecentralizedExchangeHotPotato","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e9a83c10a36a8374601cd284a4a59aec07fa16a7ca7f807c88e182c863a08b50"}]}