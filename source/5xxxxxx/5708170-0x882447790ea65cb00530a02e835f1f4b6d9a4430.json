{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n// We need this interface to interact with out ERC20 - tokencontract\r\ncontract ERC20Interface {\r\n         // function totalSupply() public constant returns (uint256);\r\n      function balanceOf(address tokenOwner) public constant returns (uint256 balance);\r\n         // function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\r\n      function transfer(address to, uint256 tokens) public returns (bool success);\r\n         // function approve(address spender, uint256 tokens) public returns (bool success);\r\n         // function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n         // event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n         // event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n } \r\n\r\n\r\n// ---\r\n// Main tokensale class\r\n//\r\ncontract Tokensale\r\n{\r\nusing SafeMath for uint256;\r\n\r\naddress public owner;                  // Owner of this contract, may withdraw ETH and kill this contract\r\naddress public thisAddress;            // Address of this contract\r\nstring  public lastaction;             // \r\nuint256 public constant RATE = 1000;   // 1 ETH = 1000 Rentarto Coin\r\nuint256 public raisedAmount     = 0;   // Raised amount in ETH\r\nuint256 public available_tokens = 0;   // Last number of available_tokens BEFORE last payment\r\n\r\nuint256 public lasttokencount;         // Last ordered token\r\nbool    public last_transfer_state;    // Last state (bool) of token transfer\r\n\r\n\r\n\r\n// ---\r\n// Construktor\r\n// \r\nfunction Tokensale () public\r\n{\r\nowner       = msg.sender;\r\nthisAddress = address(this);\r\n} // Construktor\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n// ---\r\n// Pay ether to this contract and receive your tokens\r\n//\r\nfunction () payable public\r\n{\r\naddress tokenAddress = 0x7C0924eEA284EF4B7A1b0Fefdd0d808Fc717377E;\r\nERC20Interface atoContract = ERC20Interface(tokenAddress); // Rentarto Coin is 0x7C0924eEA284EF4B7A1b0Fefdd0d808Fc717377E\r\n\r\n\r\n//\r\n// Minimum = 0.00125 ETH\r\n//\r\nif ( msg.value >= 1250000000000000 )\r\n   {\r\n   // Calculate tokens to sell\r\n   uint256 weiAmount = msg.value;\r\n   uint256 tokens = weiAmount.mul(RATE);\r\n    \r\n   // Our current token balance\r\n   available_tokens = atoContract.balanceOf(thisAddress);    \r\n    \r\n   \r\n   if (available_tokens >= tokens)\r\n      {      \r\n      \r\n      \t  lasttokencount = tokens;   \r\n      \t  raisedAmount   = raisedAmount.add(msg.value);\r\n   \r\n          // Send tokens to buyer\r\n          last_transfer_state = atoContract.transfer(msg.sender,  tokens);\r\n          \r\n          \r\n      } // if (available_tokens >= tokens)\r\n      else\r\n          {\r\n          revert();\r\n          }\r\n   \r\n   \r\n   \r\n   } // if ( msg.value >= 1250000000000000 )\r\n   else\r\n       {\r\n       revert();\r\n       }\r\n\r\n\r\n\r\n\r\n\r\n} // ()\r\n \r\n\r\n\r\n\r\n//\r\n// owner_withdraw - Ether withdraw (owner only)\r\n//\r\nfunction owner_withdraw () public\r\n{\r\nif (msg.sender != owner) return;\r\n\r\nowner.transfer( this.balance );\r\nlastaction = \"Withdraw\";  \r\n} // owner_withdraw\r\n\r\n\r\n\r\n//\r\n// Kill (owner only)\r\n//\r\nfunction kill () public\r\n{\r\nif (msg.sender != owner) return;\r\n\r\n\r\n// Transfer tokens back to owner\r\naddress tokenAddress = 0x7C0924eEA284EF4B7A1b0Fefdd0d808Fc717377E;\r\nERC20Interface atoContract = ERC20Interface(tokenAddress); // rentarto is 0x7C0924eEA284EF4B7A1b0Fefdd0d808Fc717377E\r\n\r\nuint256 balance = atoContract.balanceOf(this);\r\nassert(balance > 0);\r\natoContract.transfer(owner, balance);\r\n\r\n\r\nowner.transfer( this.balance );\r\nselfdestruct(owner);\r\n} // kill\r\n\r\n\r\n} /* contract Tokensale */","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"last_transfer_state\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lasttokencount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"owner_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"available_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thisAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Tokensale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2d298043128cbfc49c62e2474a5079c13f82dbfd09aac790aa3f97589cdcc2bb"}]}