{"status":"1","message":"OK","result":[{"SourceCode":"// Minimum required version of Solidity (Ethereum programming language)\r\npragma solidity ^0.4.0;\r\n\r\n// Soldity contract for proof of perception\r\ncontract Percept {\r\n\r\n    mapping(bytes32 => Proof) public proofs;    // Proof storage mappings (key => value data)\r\n\r\n    struct Proof {              // Proof data type\r\n        // Pre-release data\r\n        address creator;        // Address of the proof maker\r\n        bytes32 hash;           // 1-way hash of the proof text\r\n        uint timestamp;         // Unix timestamp of the proof's creation\r\n        uint blockNum;          // Latest block number during proof creation\r\n        bytes32 proofMapping;   // Mapping hash of sender address, timestamp, block number, and proof hash\r\n\r\n        // Post-release data\r\n        string release;         // Proof string of perception\r\n        bool released;          // Whether this proof has been released or not\r\n        uint releaseTime;       // Unix timestamp of the proof's release\r\n        uint releaseBlockNum;   // Latest block number during proof release\r\n    }\r\n\r\n    // Function to submit a new unreleased proof\r\n    // Param: hash (32 bytes) - Hash of the proof text\r\n    function submitProof(bytes32 hash) public returns (bytes32) {\r\n        uint timestamp = now;   // Current unix timestamp\r\n        uint blockNum = block.number;   // Current block number this transaction is in\r\n\r\n        bytes32 proofMapping = keccak256(abi.encodePacked(msg.sender, timestamp, blockNum, hash));    // Mapping hash of proof data\r\n\r\n        // Construct the proof in memory, unreleased\r\n        Proof memory proof = Proof(msg.sender, hash, timestamp, blockNum, proofMapping, \"\", false, 0, 0);\r\n\r\n        // Store the proof in the contract mapping storage\r\n        proofs[proofMapping] = proof;\r\n        \r\n        return proofMapping; // Return the generated proof mapping\r\n    }\r\n\r\n    // Release the contents of a submitted proof\r\n    // Param: proofMapping (32 bytes) - The key to lookup the proof\r\n    // Param: release (string) - The text that was originally hashed\r\n    function releaseProof(bytes32 proofMapping, string release) public {\r\n        // Load the unreleased proof from storage\r\n        Proof storage proof = proofs[proofMapping];\r\n\r\n        require(msg.sender == proof.creator);       // Ensure the releaser was the creator\r\n        require(proof.hash == keccak256(abi.encodePacked(release)));  // Ensure the release string's hash is the same as the proof\r\n        require(!proof.released);                   // Ensure the proof isn't released yet\r\n\r\n        proof.release = release;                // Release the proof text\r\n        proof.released = true;                  // Set proof released flag to true\r\n        proof.releaseTime = now;                // Set the release unix timestamp to now\r\n        proof.releaseBlockNum = block.number;   // Set the release block number to the current block number\r\n    }\r\n\r\n    // Function to determine whether a proof is valid for a certain verification string\r\n    // Should not be called on blockchain, only on local cache\r\n    // Param: proofMapping (32 bytes) - The key to lookup the proof\r\n    // Param: verify (string) - The text that was supposedly originally hashed\r\n    function isValidProof(bytes32 proofMapping, string verify) public view returns (bool) {\r\n        Proof memory proof = proofs[proofMapping]; // Load the proof into memory\r\n\r\n        require(proof.creator != 0); // Ensure the proof exists\r\n\r\n        return proof.hash == keccak256(abi.encodePacked(verify)); // Return whether the proof hash matches the verification's hash\r\n    }\r\n\r\n    // Functon to retrieve a proof that has not been completed yet\r\n    // Should not be called on blockchain, only on local hash\r\n    // Param: proofMapping (32 bytes) - The key to lookup the proof\r\n    function retrieveIncompleteProof(bytes32 proofMapping) public view returns (\r\n        address creator,\r\n        bytes32 hash,\r\n        uint timestamp,\r\n        uint blockNum\r\n    ) {\r\n        Proof memory proof = proofs[proofMapping];  // Load the proof into memory\r\n        require(proof.creator != 0);                // Ensure the proof exists\r\n        require(!proof.released);                   // Ensure the proof has not been released\r\n\r\n        // Return the collective proof data individually\r\n        return (\r\n            proof.creator,\r\n            proof.hash,\r\n            proof.timestamp,\r\n            proof.blockNum\r\n        );\r\n    }\r\n\r\n    // Functon to retrieve a proof that has been completed\r\n    // Should not be called on blockchain, only on local hash\r\n    // Param: proofMapping (32 bytes) - The key to lookup the proof\r\n    function retrieveCompletedProof(bytes32 proofMapping) public view returns (\r\n        address creator,\r\n        string release,\r\n        bytes32 hash,\r\n        uint timestamp,\r\n        uint releaseTime,\r\n        uint blockNum,\r\n        uint releaseBlockNum\r\n    ) {\r\n        Proof memory proof = proofs[proofMapping];  // Load the proof into memory\r\n        require(proof.creator != 0);                // Ensure the proof exists\r\n        require(proof.released);                    // Ensure the proof has been released\r\n\r\n        // Return the collective proof data individually\r\n        return (\r\n            proof.creator,\r\n            proof.release,\r\n            proof.hash,\r\n            proof.timestamp,\r\n            proof.releaseTime,\r\n            proof.blockNum,\r\n            proof.releaseBlockNum\r\n        );\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"proofMapping\",\"type\":\"bytes32\"},{\"name\":\"release\",\"type\":\"string\"}],\"name\":\"releaseProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proofMapping\",\"type\":\"bytes32\"}],\"name\":\"retrieveCompletedProof\",\"outputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"release\",\"type\":\"string\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"name\":\"blockNum\",\"type\":\"uint256\"},{\"name\":\"releaseBlockNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proofs\",\"outputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"blockNum\",\"type\":\"uint256\"},{\"name\":\"proofMapping\",\"type\":\"bytes32\"},{\"name\":\"release\",\"type\":\"string\"},{\"name\":\"released\",\"type\":\"bool\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"name\":\"releaseBlockNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proofMapping\",\"type\":\"bytes32\"}],\"name\":\"retrieveIncompleteProof\",\"outputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"blockNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"submitProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proofMapping\",\"type\":\"bytes32\"},{\"name\":\"verify\",\"type\":\"string\"}],\"name\":\"isValidProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Percept","CompilerVersion":"v0.4.25-nightly.2018.5.18+commit.4d7b092c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://97efb89ab05f6dc2cdcdf0b564f74be95fde68dec6664b0025cda55858dba2a0"}]}