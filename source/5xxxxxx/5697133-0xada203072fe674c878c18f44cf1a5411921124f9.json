{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n//this is the smart contract for the Hundred Ether Wall\r\n//please take note that the contract contains a constructor That\r\n//declares the contract owner, only the contract owner can withdraw funds\r\n//if you want to see the methods being called on\r\n//take a look at the HomePage.js component\r\n\r\ncontract HundredEtherWall {\r\n  address public contractOwner;\r\n\r\n  //a modifier can be used on methods to inherit the require\r\n  modifier onlyContractOwner {\r\n    require(msg.sender == contractOwner);\r\n    _;\r\n  }\r\n\r\n  uint public constant pixelPrice = 80000000000000;\r\n  uint public constant pixelsPerCell = 625;\r\n  address receiver;\r\n\r\n  //event for buying an ad\r\n  event Buy (\r\n    uint indexed idx,\r\n    address owner,\r\n    uint x,\r\n    uint y,\r\n    uint width,\r\n    uint height\r\n  );\r\n\r\n  //event for updating an ad\r\n  event Update (\r\n    uint indexed idx,\r\n    string link,\r\n    string ipfsHash,\r\n    string title\r\n  );\r\n\r\n  //event for setting an add off or on sale\r\n  event SetSale (\r\n    uint indexed idx,\r\n    bool forSale,\r\n    uint marketPrice\r\n  );\r\n\r\n  //event for setting an add off or on sale\r\n  event MarketBuy (\r\n    uint indexed idx,\r\n    address owner,\r\n    bool forSale,\r\n    uint marketPrice\r\n  );\r\n\r\n  //event for setting an add off or on active\r\n  event SetActive (\r\n    uint indexed idx,\r\n    bool active\r\n  );\r\n\r\n  //Contents on an ad\r\n  struct Ad {\r\n    address owner;\r\n    uint width;\r\n    uint height;\r\n    uint x;\r\n    uint y;\r\n    string title;\r\n    string link;\r\n    string ipfsHash;\r\n    bool forSale;\r\n    bool active;\r\n    uint marketPrice;\r\n  }\r\n\r\n  //the actual array of the ads\r\n  Ad[] public ads;\r\n\r\n  //2d array of booleans to set true whenever an ad is bought\r\n  //this is used in the buy() method to check if the spot is availible or not\r\n  bool[40][50] public grid;\r\n\r\n  //the constructor\r\n  constructor() public {\r\n      contractOwner = msg.sender;\r\n  }\r\n\r\n  //payable function to trigger the purchase\r\n  function buy(uint _x, uint _y, uint _width, uint _height, string _title, string _link, string _ipfsHash) public payable returns (uint idx) {\r\n    //calculate the price of the ad\r\n    uint price = _width * _height * pixelPrice;\r\n\r\n    //set restrictions\r\n    require(price > 0);\r\n    require(msg.value >= price);\r\n    require(_width % 25 == 0);\r\n    require(_height % 25 == 0);\r\n\r\n    //fill 2d array with true fo the purchased blocks\r\n    //if the block is already true (means its already bought)\r\n    // -> revert()\r\n    for(uint i = 0; i < _width / 25; i++) {\r\n        for(uint j = 0; j < _height / 25; j++) {\r\n            if (grid[_x / 25 + i][_y / 25 + j]) {\r\n                revert();\r\n            }\r\n            grid[_x / 25 + i][_y / 25 + j] = true;\r\n        }\r\n    }\r\n\r\n    //store the ad, return the index\r\n    Ad memory ad = Ad(msg.sender, _x, _y, _width, _height, _title, _link, _ipfsHash, false, true, price);\r\n    idx = ads.push(ad) - 1;\r\n\r\n    //trigger transaction with the buy event\r\n    emit Buy(idx, msg.sender, _x, _y, _width, _height);\r\n\r\n    return idx;\r\n  }\r\n\r\n  //function for updating an ad\r\n  function update(uint _idx, string _title, string _link, string _ipfsHash) public {\r\n    //get add with index from parameter\r\n    Ad storage ad = ads[_idx];\r\n    require(msg.sender == ad.owner || msg.sender == contractOwner);\r\n\r\n    //set parameters to repalce the old content\r\n    ad.link = _link;\r\n    ad.ipfsHash = _ipfsHash;\r\n    ad.title = _title;\r\n\r\n    //trigger transaction without cost\r\n    emit Update(_idx, ad.link, ad.ipfsHash, ad.title);\r\n  }\r\n\r\n  //function for setting an ad for sale\r\n  function setSale(uint _idx, bool _sale, uint _marketPrice) public {\r\n    //get add with index from parameter\r\n    Ad storage ad = ads[_idx];\r\n    require(msg.sender == ad.owner);\r\n\r\n    ad.forSale = _sale;\r\n    ad.marketPrice = _marketPrice;\r\n\r\n    emit SetSale(_idx, ad.forSale, ad.marketPrice);\r\n  }\r\n\r\n  //method for buying an ad on the market. Has to change owner only\r\n  //set the forSale bool false again\r\n  function marketBuy(uint _idx) public payable {\r\n    //get add with index from parameter\r\n    Ad storage ad = ads[_idx];\r\n    //set restrictions\r\n    require(msg.sender != ad.owner);\r\n    require(msg.value > 0);\r\n    require(msg.value >= ad.marketPrice);\r\n    require(ad.forSale == true);\r\n\r\n    receiver = ad.owner;\r\n\r\n    ad.owner = msg.sender;\r\n    ad.forSale = false;\r\n\r\n    //set the ad back to its original price\r\n    uint price = ad.width * ad.height * pixelPrice;\r\n\r\n    receiver.transfer(msg.value);\r\n    emit MarketBuy(_idx, ad.owner, ad.forSale, price);\r\n  }\r\n\r\n  //function for setting an ad active or inactive\r\n  function setActive(uint _idx, bool _active) public onlyContractOwner {\r\n    //get add with index from parameter\r\n    Ad storage ad = ads[_idx];\r\n\r\n    ad.active = _active;\r\n\r\n    emit SetActive(_idx, ad.active);\r\n  }\r\n\r\n  //returns the total length of ads, used for looping over the ads in the homepage.js\r\n  //note: this does only return an integer\r\n  function getAds() public constant returns (uint) {\r\n    return ads.length;\r\n  }\r\n\r\n  //transfers the full funds to the contract owner\r\n  //contractOwner === deployer of the contract\r\n  function withdraw() public onlyContractOwner {\r\n    contractOwner.transfer(address(this).balance);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getAds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ads\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"width\",\"type\":\"uint256\"},{\"name\":\"height\",\"type\":\"uint256\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"link\",\"type\":\"string\"},{\"name\":\"ipfsHash\",\"type\":\"string\"},{\"name\":\"forSale\",\"type\":\"bool\"},{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"marketPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pixelsPerCell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_width\",\"type\":\"uint256\"},{\"name\":\"_height\",\"type\":\"uint256\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_link\",\"type\":\"string\"},{\"name\":\"_ipfsHash\",\"type\":\"string\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_link\",\"type\":\"string\"},{\"name\":\"_ipfsHash\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_sale\",\"type\":\"bool\"},{\"name\":\"_marketPrice\",\"type\":\"uint256\"}],\"name\":\"setSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"marketBuy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pixelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"width\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"height\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"link\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"ipfsHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"title\",\"type\":\"string\"}],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"forSale\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"marketPrice\",\"type\":\"uint256\"}],\"name\":\"SetSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"forSale\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"marketPrice\",\"type\":\"uint256\"}],\"name\":\"MarketBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetActive\",\"type\":\"event\"}]","ContractName":"HundredEtherWall","CompilerVersion":"v0.4.25-nightly.2018.5.28+commit.c223b03","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://40e76380ab7b7334d8e7a373e0c3e8f668982631460d515217de730406ad47ed"}]}