{"status":"1","message":"OK","result":[{"SourceCode":"pragma experimental \"v0.5.0\";\r\n\r\n////////////////////\r\n//   HOURLY PAY   //\r\n//    CONTRACT    //\r\n//    v 0.2.1     //\r\n////////////////////\r\n\r\n// The Hourly Pay Contract allows you to track your time and get paid a hourly wage for tracked time.\r\n//\r\n// HOW IT WORKS:\r\n//\r\n//  1. Client creates the contract, making himself the owner of the contract.\r\n//\r\n//  2. Client can fund the contract with ETH by simply sending money to the contract (via payable fallback function).\r\n//\r\n//  3. Before hiring someone, client can change additional parameters, such as:\r\n//\r\n//      - setContractDurationInDays(days) - The duration of the contract (default is 365 days).\r\n//\r\n//      - setDailyHourLimit(hours) - How much hours the Employee can work per day (default is 8 hours).\r\n//\r\n//      - setPaydayFrequencyInDays(days) - How often the Employee can withdraw the earnings (default is every 3 days).\r\n//\r\n//      - setBeginTimeTS(utcTimestamp) - Work on contract can be started after this timestamp (default is contract creation time).\r\n//                                       Also defines the start of Day and Week for accounting and daily limits.\r\n//                                       Day transition time should be convenient for the employee (like 4am),\r\n//                                       so that work doesn't cross between days,\r\n//                                       The excess won't be transferred to the next day.\r\n//\r\n//  4. Client hires the Employee by invoking hire(addressOfEmployee, ratePerHourInWei)\r\n//     This starts the project and puts the contract in a workable state.\r\n//     Before hiring, contract should be loaded with enough ETH to provide at least one day of work at specified ratePerHourInWei\r\n// \r\n//  5. To start work and earn ETH the Employee should:\r\n//\r\n//      invoke startWork() when he starts working to run the timer.\r\n//\r\n//      invoke stopWork() when he finishes working to stop the timer.\r\n//\r\n//    After the timer is stopped - the ETH earnings are calculated and recorded on Employee's internal balance.\r\n//    If the stopWork() is invoked after more hours had passed than dailyLimit - the excess is ignored\r\n//    and only the dailyLimit is added to the internal balance.\r\n//\r\n//  6. Employee can withdraw earnings from internal balance after paydayFrequencyInDays days have passed after BeginTimeTS:\r\n//      by invoking withdraw()\r\n//\r\n//    After each withdrawal the paydayFrequencyInDays is reset and starts counting itself from the TS of the first startWork() after withdrawal.\r\n//\r\n//    This delay is implemented as a safety mechanism, so the Client can have time to check the work and\r\n//    cancel the earnings if something goes wrong.\r\n//    That way only money earned during the last paydayFrequencyInDays is at risk.\r\n//\r\n//  7. Client can fire() the Employee after his services are no longer needed.\r\n//    That would stop any ongoing work by terminating the timer and won't allow to start the work again.\r\n//\r\n//  8. If anything in the relationship or hour counting goes wrong, there are safety functions:\r\n//      - refundAll() - terminates all unwithdrawn earnings.\r\n//      - refund(amount) - terminates the (amount) of unwithdrawn earnings.\r\n//    Can be only called if not working.\r\n//    Both of these can be called by Client or Employee.\r\n//      * TODO: Still need to think if allowing Client to do that won't hurt the Employee.\r\n//      * TODO: SecondsWorkedToday don't reset after refund, so dailyLimit still affects\r\n//      * TODO: Think of a better name. ClearEarnings?\r\n//\r\n//  9. Client can withdraw any excess ETH from the contract via:\r\n//      - clientWithdrawAll() - withdraws all funds minus locked in earnings.\r\n//      - clientWithdraw(amount) - withdraws (amount), not locked in earnings.\r\n//     Can be invoked only if Employee isn't hired or has been fired.\r\n//\r\n// 10. Client and Contract Ownership can be made \"Public\"/\"None\" by calling:\r\n//      - releaseOwnership()\r\n//     It simply sets the Owner (Client) to 0x0, so no one is in control of the contract anymore.\r\n//     That way the contract can be used on projects as Hourly-Wage Donations.\r\n//\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract HourlyPay { \r\n\r\n    ////////////////////////////////\r\n    // Addresses\r\n\r\n    address public owner;           // Client and owner address\r\n    address public employeeAddress = 0x0;  // Employee address\r\n\r\n\r\n    /////////////////////////////////\r\n    // Contract business properties\r\n    \r\n    uint public beginTimeTS;               // When the contract work can be started. Also TS of day transition.\r\n    uint public ratePerHourInWei;          // Employee rate in wei\r\n    uint public earnings = 0;              // Earnings of employee\r\n    bool public hired = false;             // If the employee is hired and approved to perform work\r\n    bool public working = false;           // Is employee currently working with timer on?\r\n    uint public startedWorkTS;             // Timestamp of when the timer started counting time\r\n    uint public workedTodayInSeconds = 0;  // How many seconds worked today\r\n    uint public currentDayTS;\r\n    uint public lastPaydayTS;\r\n    string public contractName = \"Hourly Pay Contract\";\r\n\r\n    ////////////////////////////////\r\n    // Contract Limits and maximums\r\n    \r\n    uint16 public contractDurationInDays = 365;  // Overall contract duration in days, default is 365 and it's also maximum for safety reasons\r\n    uint8 public dailyHourLimit = 8;               // Limits the hours per day, max 24 hours\r\n    uint8 public paydayFrequencyInDays = 3;       // How often can Withdraw be called, default is every 3 days\r\n\r\n    uint8 constant hoursInWeek = 168;\r\n    uint8 constant maxDaysInFrequency = 30; // every 30 days is a wise maximum\r\n\r\n\r\n    ////////////////\r\n    // Constructor\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        beginTimeTS = now;\r\n        currentDayTS = beginTimeTS;\r\n        lastPaydayTS = beginTimeTS;\r\n    }\r\n\r\n\r\n    //////////////\r\n    // Modifiers\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyEmployee {\r\n        require(msg.sender == employeeAddress);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwnerOrEmployee {\r\n        require((msg.sender == employeeAddress) || (msg.sender == owner));\r\n        _;\r\n    }\r\n\r\n    modifier beforeHire {\r\n        require(employeeAddress == 0x0);                        // Contract can hire someone only once\r\n        require(hired == false);                                // Shouldn't be already hired\r\n        _;\r\n    }\r\n\r\n\r\n    ///////////\r\n    // Events\r\n    \r\n    event GotFunds(address sender, uint amount);\r\n    event ContractDurationInDaysChanged(uint16 contractDurationInDays);\r\n    event DailyHourLimitChanged(uint8 dailyHourLimit);\r\n    event PaydayFrequencyInDaysChanged(uint32 paydayFrequencyInDays);\r\n    event BeginTimeTSChanged(uint beginTimeTS);\r\n    event Hired(address employeeAddress, uint ratePerHourInWei, uint hiredTS);\r\n    event NewDay(uint currentDayTS, uint16 contractDaysLeft);\r\n    event StartedWork(uint startedWorkTS, uint workedTodayInSeconds, string comment);\r\n    event StoppedWork(uint stoppedWorkTS, uint workedInSeconds, uint earned);\r\n    event Withdrawal(uint amount, address employeeAddress, uint withdrawalTS);\r\n    event Fired(address employeeAddress, uint firedTS);\r\n    event Refunded(uint amount, address whoInitiatedRefund, uint refundTS);\r\n    event ClientWithdrawal(uint amount, uint clientWithdrawalTS);\r\n    event ContractNameChanged(string contractName);\r\n    \r\n    ////////////////////////////////////////////////\r\n    // Fallback function to fund contract with ETH\r\n    \r\n    function () external payable {\r\n        emit GotFunds(msg.sender, msg.value);\r\n    }\r\n    \r\n    \r\n    ///////////////////////////\r\n    // Main Setters\r\n\r\n    function setContractName(string newContractName) external onlyOwner beforeHire {\r\n        contractName = newContractName;\r\n        emit ContractNameChanged(contractName);\r\n    }\r\n\r\n    function setContractDurationInDays(uint16 newContractDurationInDays) external onlyOwner beforeHire {\r\n        require(newContractDurationInDays <= 365);\r\n        contractDurationInDays = newContractDurationInDays;\r\n        emit ContractDurationInDaysChanged(contractDurationInDays);\r\n    }\r\n    \r\n    function setDailyHourLimit(uint8 newDailyHourLimit) external onlyOwner beforeHire {\r\n        require(newDailyHourLimit <= 24);\r\n        dailyHourLimit = newDailyHourLimit;\r\n        emit DailyHourLimitChanged(dailyHourLimit);\r\n    }\r\n\r\n    function setPaydayFrequencyInDays(uint8 newPaydayFrequencyInDays) external onlyOwner beforeHire {\r\n        require(newPaydayFrequencyInDays < maxDaysInFrequency);\r\n        paydayFrequencyInDays = newPaydayFrequencyInDays;\r\n        emit PaydayFrequencyInDaysChanged(paydayFrequencyInDays);\r\n    }\r\n    \r\n    function setBeginTimeTS(uint newBeginTimeTS) external onlyOwner beforeHire {\r\n        beginTimeTS = newBeginTimeTS;\r\n        currentDayTS = beginTimeTS;\r\n        lastPaydayTS = beginTimeTS;\r\n        emit BeginTimeTSChanged(beginTimeTS);\r\n    }\r\n    \r\n    ///////////////////\r\n    // Helper getters\r\n    \r\n    function getWorkSecondsInProgress() public view returns(uint) {\r\n        if (!working) return 0;\r\n        return now - startedWorkTS;\r\n    }\r\n    \r\n    function isOvertime() external view returns(bool) {\r\n        if (workedTodayInSeconds + getWorkSecondsInProgress() > dailyHourLimit * 1 hours) return true;\r\n        return false;\r\n    }\r\n    \r\n    function hasEnoughFundsToStart() public view returns(bool) {\r\n        return ((address(this).balance > earnings) &&\r\n                (address(this).balance - earnings >= ratePerHourInWei * (dailyHourLimit * 1 hours - (isNewDay() ? 0 : workedTodayInSeconds)) / 1 hours));\r\n    }\r\n    \r\n    function isNewDay() public view returns(bool) {\r\n        return (now - currentDayTS > 1 days);\r\n    }\r\n    \r\n    function canStartWork() public view returns(bool) {\r\n        return (hired\r\n            && !working\r\n            && (now > beginTimeTS)\r\n            && (now < beginTimeTS + (contractDurationInDays * 1 days))\r\n            && hasEnoughFundsToStart()\r\n            && ((workedTodayInSeconds < dailyHourLimit * 1 hours) || isNewDay()));\r\n    }\r\n\r\n    function canStopWork() external view returns(bool) {\r\n        return (working\r\n            && hired\r\n            && (now > startedWorkTS));\r\n    }\r\n\r\n    function currentTime() external view returns(uint) {\r\n        return now;\r\n    }\r\n\r\n    function getBalance() external view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    ////////////////////////////\r\n    // Main workflow functions\r\n\r\n    function releaseOwnership() external onlyOwner {\r\n        owner = 0x0;\r\n    }\r\n\r\n    function hire(address newEmployeeAddress, uint newRatePerHourInWei) external onlyOwner beforeHire {\r\n        require(newEmployeeAddress != 0x0);                     // Protection from burning the ETH\r\n\r\n        // Contract should be loaded with ETH for a minimum one day balance to perform Hire:\r\n        require(address(this).balance >= newRatePerHourInWei * dailyHourLimit);\r\n        employeeAddress = newEmployeeAddress;\r\n        ratePerHourInWei = newRatePerHourInWei;\r\n        \r\n        hired = true;\r\n        emit Hired(employeeAddress, ratePerHourInWei, now);\r\n    }\r\n\r\n    function startWork(string comment) external onlyEmployee {\r\n        require(hired == true);\r\n        require(working == false);\r\n        \r\n        require(now > beginTimeTS); // can start working only after contract beginTimeTS\r\n        require(now < beginTimeTS + (contractDurationInDays * 1 days)); // can't start after contractDurationInDays has passed since beginTimeTS\r\n        \r\n        checkForNewDay();\r\n        \r\n        require(workedTodayInSeconds < dailyHourLimit * 1 hours); // can't start if already approached dailyHourLimit\r\n\r\n        require(address(this).balance > earnings); // balance must be greater than earnings        \r\n\r\n        // balance minus earnings must be sufficient for at least 1 day of work minus workedTodayInSeconds:\r\n        require(address(this).balance - earnings >= ratePerHourInWei * (dailyHourLimit * 1 hours - workedTodayInSeconds) / 1 hours);\r\n        \r\n        if (earnings == 0) lastPaydayTS = now; // reset the payday timer TS if this is the first time work starts after last payday\r\n\r\n        startedWorkTS = now;\r\n        working = true;\r\n        \r\n        emit StartedWork(startedWorkTS, workedTodayInSeconds, comment);\r\n    }\r\n    \r\n    function checkForNewDay() internal {\r\n        if (now - currentDayTS > 1 days) { // new day\r\n            while (currentDayTS < now) {\r\n                currentDayTS += 1 days;\r\n            }\r\n            currentDayTS -= 1 days;\r\n            workedTodayInSeconds = 0;\r\n            emit NewDay(currentDayTS, uint16 ((beginTimeTS + (contractDurationInDays * 1 days) - currentDayTS) / 1 days));\r\n        }\r\n    }\r\n    \r\n    function stopWork() external onlyEmployee {\r\n        stopWorkInternal();\r\n    }\r\n    \r\n    function stopWorkInternal() internal {\r\n        require(hired == true);\r\n        require(working == true);\r\n    \r\n        require(now > startedWorkTS); // just a temporary overflow check, in case of miners manipulate time\r\n        \r\n        \r\n        uint newWorkedTodayInSeconds = workedTodayInSeconds + (now - startedWorkTS);\r\n        if (newWorkedTodayInSeconds > dailyHourLimit * 1 hours) { // check for overflow\r\n            newWorkedTodayInSeconds = dailyHourLimit * 1 hours;   // and assign max dailyHourLimit if there is an overflow\r\n        }\r\n        \r\n        uint earned = (newWorkedTodayInSeconds - workedTodayInSeconds) * ratePerHourInWei / 1 hours;\r\n        earnings += earned; // add new earned ETH to earnings\r\n        \r\n        emit StoppedWork(now, newWorkedTodayInSeconds - workedTodayInSeconds, earned);\r\n\r\n        workedTodayInSeconds = newWorkedTodayInSeconds; // updated todays works in seconds\r\n        working = false;\r\n\r\n        checkForNewDay();\r\n    }\r\n\r\n    function withdraw() external onlyEmployee {\r\n        require(working == false);\r\n        require(earnings > 0);\r\n        require(earnings <= address(this).balance);\r\n        \r\n        require(now - lastPaydayTS > paydayFrequencyInDays * 1 days); // check if payday frequency days passed after last withdrawal\r\n        \r\n        lastPaydayTS = now;\r\n        uint amountToWithdraw = earnings;\r\n        earnings = 0;\r\n        \r\n        employeeAddress.transfer(amountToWithdraw);\r\n        \r\n        emit Withdrawal(amountToWithdraw, employeeAddress, now);\r\n    }\r\n    \r\n    function withdrawAfterEnd() external onlyEmployee {\r\n        require(owner == 0x0); // only if there's no owner\r\n        require(now > beginTimeTS + (contractDurationInDays * 1 days)); // only after contract end\r\n        require(address(this).balance > 0); // only if there's balance\r\n\r\n        employeeAddress.transfer(address(this).balance);\r\n        emit Withdrawal(address(this).balance, employeeAddress, now);\r\n    }\r\n    \r\n    function fire() external onlyOwner {\r\n        if (working) stopWorkInternal(); // cease all motor functions if working\r\n        \r\n        hired = false; // fire\r\n        \r\n        emit Fired(employeeAddress, now);\r\n    }\r\n\r\n    function refundAll() external onlyOwnerOrEmployee {    // terminates all unwithdrawn earnings.\r\n        require(working == false);\r\n        require(earnings > 0);\r\n        uint amount = earnings;\r\n        earnings = 0;\r\n\r\n        emit Refunded(amount, msg.sender, now);\r\n    }\r\n    \r\n    function refund(uint amount) external onlyOwnerOrEmployee {  // terminates the (amount) of unwithdrawn earnings.\r\n        require(working == false);\r\n        require(amount < earnings);\r\n        earnings -= amount;\r\n\r\n        emit Refunded(amount, msg.sender, now);\r\n    }\r\n\r\n    function clientWithdrawAll() external onlyOwner { // withdraws all funds minus locked in earnings.\r\n        require(hired == false);\r\n        require(address(this).balance > earnings);\r\n        uint amount = address(this).balance - earnings;\r\n        \r\n        owner.transfer(amount);\r\n        \r\n        emit ClientWithdrawal(amount, now);\r\n    }\r\n    \r\n    function clientWithdraw(uint amount) external onlyOwner { // withdraws (amount), if not locked in earnings.\r\n        require(hired == false);\r\n        require(address(this).balance > earnings);\r\n        require(amount < address(this).balance);\r\n        require(address(this).balance - amount > earnings);\r\n        \r\n        owner.transfer(amount);\r\n\r\n        emit ClientWithdrawal(amount, now);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"paydayFrequencyInDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newContractName\",\"type\":\"string\"}],\"name\":\"setContractName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clientWithdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"employeeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"workedTodayInSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyHourLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"clientWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fire\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAfterEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newContractDurationInDays\",\"type\":\"uint16\"}],\"name\":\"setContractDurationInDays\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOvertime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPaydayTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"startWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canStopWork\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractDurationInDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"working\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPaydayFrequencyInDays\",\"type\":\"uint8\"}],\"name\":\"setPaydayFrequencyInDays\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBeginTimeTS\",\"type\":\"uint256\"}],\"name\":\"setBeginTimeTS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePerHourInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isNewDay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWorkSecondsInProgress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDailyHourLimit\",\"type\":\"uint8\"}],\"name\":\"setDailyHourLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnoughFundsToStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startedWorkTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beginTimeTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDayTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canStartWork\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEmployeeAddress\",\"type\":\"address\"},{\"name\":\"newRatePerHourInWei\",\"type\":\"uint256\"}],\"name\":\"hire\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GotFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractDurationInDays\",\"type\":\"uint16\"}],\"name\":\"ContractDurationInDaysChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dailyHourLimit\",\"type\":\"uint8\"}],\"name\":\"DailyHourLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paydayFrequencyInDays\",\"type\":\"uint32\"}],\"name\":\"PaydayFrequencyInDaysChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beginTimeTS\",\"type\":\"uint256\"}],\"name\":\"BeginTimeTSChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"employeeAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ratePerHourInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hiredTS\",\"type\":\"uint256\"}],\"name\":\"Hired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currentDayTS\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contractDaysLeft\",\"type\":\"uint16\"}],\"name\":\"NewDay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startedWorkTS\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"workedTodayInSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"StartedWork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stoppedWorkTS\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"workedInSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"earned\",\"type\":\"uint256\"}],\"name\":\"StoppedWork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"employeeAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawalTS\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"employeeAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"firedTS\",\"type\":\"uint256\"}],\"name\":\"Fired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"whoInitiatedRefund\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"refundTS\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"clientWithdrawalTS\",\"type\":\"uint256\"}],\"name\":\"ClientWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"ContractNameChanged\",\"type\":\"event\"}]","ContractName":"HourlyPay","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f33363df56338a43fbd9ccdde5cc23b37d1b96bf46fd510b5cf3043b11aaddf3"}]}