{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract EtherGuess {\r\n\r\n    //Storage Variables\r\n    bool private running;  //Pause / Unpause the game\r\n    bytes32 public pauseReason;\r\n    uint public totalPayout; //Total Amount waiting Payout\r\n    int public numberOfGuesses;  //Total Guesses for this Game\r\n    uint public currentRound;\r\n    uint public totalPayedOut;\r\n    uint8 public adminPayout;   //The Percentage of Admin Payout\r\n    uint public lastFinish;\r\n    uint public minimumValue;\r\n    address public admin;\r\n    address public bot;\r\n    mapping (address => uint) public winners;\r\n    mapping (int => GuessInfo) public guesses;\r\n    mapping (uint8 => bool) public closedHour;\r\n\r\n    //Constant Variables\r\n    uint constant NEGLECTGUESSTIMER = 5 days;\r\n    uint constant NEGLECTOWNERTIMER = 30 days;\r\n    uint constant ADMINPAYOUTDENOMINATOR = 100;\r\n\r\n    function EtherGuess() public {\r\n       \r\n        minimumValue = 5 finney;\r\n        admin = msg.sender;\r\n        bot = msg.sender;\r\n        adminPayout = 10;\r\n        running = true;\r\n        closedHour[23] = true;\r\n        closedHour[0] = true;\r\n        currentRound = 1;\r\n        lastFinish = now;\r\n    }\r\n\r\n    struct GuessInfo {\r\n        address owner;\r\n        uint value;\r\n        uint round;\r\n    }\r\n\r\n    function setOpenCloseHour(uint8 hour, bool closed) onlyAdmin public {\r\n            closedHour[hour] = closed;\r\n    }\r\n\r\n    function setAdminPayout(uint8 newAdminPayout) onlyAdmin public {\r\n        require(newAdminPayout <= 10);\r\n        adminPayout = newAdminPayout;\r\n    }\r\n\r\n    function setBotAddress(address newBot) onlyAdmin public {\r\n        bot = newBot;\r\n    }\r\n    \r\n    event Withdraw(\r\n        address indexed _payto,\r\n        uint _value\r\n    );\r\n\r\n    event Winner(\r\n        address indexed _payto,\r\n        uint indexed _round,\r\n        uint _value,\r\n        int _price,\r\n        string _priceInfo\r\n    );\r\n\r\n    event NoWinner(\r\n        address indexed _admin,\r\n        uint indexed _round,\r\n        int _price,\r\n        string _priceInfo\r\n    );\r\n\r\n    event Refund(\r\n        address indexed _payto,\r\n        uint indexed _round,\r\n        uint _value,\r\n        int _guess\r\n    );\r\n\r\n    event Neglect(\r\n        address indexed _payto,\r\n        uint indexed _round,\r\n        uint _value,\r\n        int _guess\r\n    );\r\n\r\n    event Guess(\r\n        address  indexed _from,\r\n        uint indexed _round,\r\n        int _numberOfGuesses,\r\n        int  _guess,\r\n        uint _value\r\n    );\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier adminOrBot {\r\n        require(msg.sender == bot || msg.sender == admin);\r\n        _;\r\n    }\r\n    \r\n    modifier isOpen {\r\n      require(!closedHour[uint8((now / 60 / 60) % 24)] && running);\r\n      _;\r\n    }\r\n\r\n    function () public payable {\r\n          \r\n    }\r\n\r\n\r\n    function isGuessesOpen() public view returns (bool, bytes32) {\r\n        bool open = true;\r\n        bytes32 answer = \"\";\r\n        \r\n        if (closedHour[uint8((now / 60 / 60) % 24)]){\r\n            open = false;\r\n            answer = \"Hours\";\r\n        }\r\n        \r\n        if (!running) {\r\n            open = running;\r\n            answer = pauseReason;\r\n        }\r\n        return (open, answer);\r\n    }\r\n\r\n\r\n    function getWinnings() public {\r\n        require(winners[msg.sender]>0);\r\n        uint value = winners[msg.sender];\r\n        winners[msg.sender] = 0;\r\n        totalPayout = subToZero(totalPayout,value);\r\n        Withdraw(msg.sender,value);\r\n        msg.sender.transfer(value);\r\n    }\r\n\r\n    function addGuess(int guess) public payable isOpen {\r\n        uint oldRound = guesses[guess].round;\r\n        uint oldValue = guesses[guess].value;\r\n        uint testValue;\r\n        if (oldRound < currentRound) {\r\n            testValue = minimumValue;\r\n        } else {\r\n            testValue = oldValue + minimumValue;\r\n        }\r\n        require(testValue == msg.value);\r\n        if (oldRound == currentRound) {\r\n           totalPayout += oldValue;\r\n           address oldOwner = guesses[guess].owner;\r\n           winners[oldOwner] += oldValue;\r\n           Refund(oldOwner, currentRound, oldValue, guess);\r\n           guesses[guess].owner = msg.sender;\r\n           guesses[guess].value = msg.value;\r\n        } else {\r\n            GuessInfo memory gi = GuessInfo(msg.sender, msg.value, currentRound);\r\n            guesses[guess] = gi;\r\n        }\r\n        numberOfGuesses++;\r\n        Guess(msg.sender, currentRound, numberOfGuesses, guess, msg.value);\r\n        \r\n    }\r\n    \r\n    function addGuessWithRefund(int guess) public payable isOpen {\r\n        uint oldRound = guesses[guess].round;\r\n        uint oldValue = guesses[guess].value;\r\n        uint testValue;\r\n        if (oldRound < currentRound) {\r\n            testValue = minimumValue;\r\n        } else {\r\n            testValue = oldValue + minimumValue;\r\n        }\r\n        require(winners[msg.sender] >= testValue);\r\n        if (oldRound == currentRound) {\r\n           totalPayout += oldValue;\r\n           address oldOwner = guesses[guess].owner;\r\n           winners[oldOwner] += oldValue;\r\n           Refund(oldOwner, currentRound, oldValue, guess);\r\n           guesses[guess].owner = msg.sender;\r\n           guesses[guess].value = testValue;\r\n           winners[msg.sender] -= testValue;\r\n        } else {\r\n            GuessInfo memory gi = GuessInfo(msg.sender, testValue, currentRound);\r\n            guesses[guess] = gi;\r\n            winners[msg.sender] -= testValue;\r\n        }\r\n        numberOfGuesses++;\r\n        Guess(msg.sender, currentRound, numberOfGuesses, guess, testValue);\r\n        \r\n    }\r\n    \r\n    function multiGuess(int[] multiGuesses) public payable isOpen {\r\n        require(multiGuesses.length > 1 && multiGuesses.length <= 20);\r\n        uint valueLeft = msg.value;\r\n        for (uint i = 0; i < multiGuesses.length; i++) {\r\n            if (valueLeft > 0) {\r\n                uint newValue = minimumValue;\r\n                if (guesses[multiGuesses[i]].round == currentRound) {\r\n                    uint oldValue = guesses[multiGuesses[i]].value;\r\n                    totalPayout += oldValue;\r\n                    address oldOwner = guesses[multiGuesses[i]].owner;\r\n                    winners[oldOwner] += oldValue;\r\n                    Refund(oldOwner, currentRound, oldValue, multiGuesses[i]);\r\n                    newValue = oldValue + minimumValue;\r\n                }\r\n                valueLeft = subToZero(valueLeft,newValue);\r\n                GuessInfo memory gi = GuessInfo(msg.sender, newValue, currentRound);\r\n                guesses[multiGuesses[i]] = gi;\r\n                Guess(msg.sender, currentRound, ++numberOfGuesses, multiGuesses[i], newValue);\r\n            }\r\n\r\n        }\r\n        if (valueLeft > 0) {\r\n            Refund(msg.sender, currentRound, valueLeft, -1);\r\n            winners[msg.sender] += valueLeft;\r\n        }\r\n\r\n    }\r\n\r\n    function pauseResumeContract(bool state, bytes32 reason) public onlyAdmin {\r\n        pauseReason = reason;\r\n        running = state;\r\n        lastFinish = now;\r\n    }\r\n\r\n    function subToZero(uint a, uint b) pure internal returns (uint) {\r\n        if (b > a) {\r\n            return 0;\r\n        } else {\r\n        return a - b;\r\n        }\r\n    }\r\n    \r\n\r\n    function finishUpRound(int price, string priceInfo) public adminOrBot {\r\n        \r\n        \r\n            if (guesses[price].round == currentRound && guesses[price].value > 0) {\r\n                \r\n                uint finalTotalPayout = this.balance - totalPayout;\r\n                uint finalAdminPayout = (finalTotalPayout * adminPayout) / ADMINPAYOUTDENOMINATOR;\r\n                uint finalPlayerPayout = finalTotalPayout - finalAdminPayout;\r\n                \r\n                Winner(guesses[price].owner, currentRound, finalPlayerPayout, price, priceInfo);  \r\n                \r\n                totalPayout += finalTotalPayout;\r\n                totalPayedOut += finalPlayerPayout;\r\n                winners[guesses[price].owner] += finalPlayerPayout;\r\n                winners[admin] += finalAdminPayout;\r\n                numberOfGuesses = 0;\r\n                currentRound++;\r\n\r\n            } else {\r\n                NoWinner(msg.sender, currentRound, price, priceInfo);\r\n            }\r\n        \r\n\r\n        lastFinish = now;\r\n\r\n    }\r\n\r\n    function neglectGuess(int guess) public {\r\n        require(lastFinish + NEGLECTGUESSTIMER < now);\r\n        require(guesses[guess].owner == msg.sender && guesses[guess].round == currentRound);\r\n        guesses[guess].round = 0;  \r\n        numberOfGuesses -= 1;\r\n        Neglect(msg.sender, currentRound, guesses[guess].value, guess);\r\n        msg.sender.transfer(guesses[guess].value);\r\n\r\n    }\r\n\r\n    function neglectOwner() public {\r\n        require(lastFinish + NEGLECTOWNERTIMER < now);\r\n        lastFinish = now;\r\n        admin = msg.sender;\r\n        winners[msg.sender] += winners[admin];\r\n        winners[admin] = 0;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"pauseReason\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"multiGuesses\",\"type\":\"int256[]\"}],\"name\":\"multiGuess\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBot\",\"type\":\"address\"}],\"name\":\"setBotAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"neglectOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guess\",\"type\":\"int256\"}],\"name\":\"neglectGuess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPayedOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"winners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getWinnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"bool\"},{\"name\":\"reason\",\"type\":\"bytes32\"}],\"name\":\"pauseResumeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guess\",\"type\":\"int256\"}],\"name\":\"addGuess\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"closedHour\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guess\",\"type\":\"int256\"}],\"name\":\"addGuessWithRefund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"int256\"},{\"name\":\"priceInfo\",\"type\":\"string\"}],\"name\":\"finishUpRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hour\",\"type\":\"uint8\"},{\"name\":\"closed\",\"type\":\"bool\"}],\"name\":\"setOpenCloseHour\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"name\":\"guesses\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"round\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGuessesOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfGuesses\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastFinish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdminPayout\",\"type\":\"uint8\"}],\"name\":\"setAdminPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_payto\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_payto\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"_priceInfo\",\"type\":\"string\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"_priceInfo\",\"type\":\"string\"}],\"name\":\"NoWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_payto\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_guess\",\"type\":\"int256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_payto\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_guess\",\"type\":\"int256\"}],\"name\":\"Neglect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_numberOfGuesses\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"_guess\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Guess\",\"type\":\"event\"}]","ContractName":"EtherGuess","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d270458d25e95608755262b015efb5967a311f4e270c6bcf3f4be9ea80ba145d"}]}