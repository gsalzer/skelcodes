{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title NoteChain\r\n * @dev The NoteChain contract provides functions to store notes in blockchain\r\n */\r\n\r\ncontract NoteChain {\r\n\r\n        // EVENTS\r\n        event NoteCreated(uint64 id, bytes2 publicKey);\r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n        // CONSTANTS\r\n        uint8 constant Deleted = 1;\r\n        uint8 constant IsPrivateBitPosition = 1;\r\n\r\n        address public owner;\r\n        uint public noteChainFee = 0.0002 ether; // fee for using noteChain\r\n\r\n        struct Note {\r\n                uint16 metadata;\r\n                bytes2 publicKey; \r\n                // publicKey: generated client-side, \r\n                // it will create a code for share URL-> publicKey + hex(_noteId)\r\n\r\n                bytes12 title;\r\n                bytes content;\r\n        }\r\n\r\n        Note[] private notes;\r\n\r\n        mapping (uint64 => address) private noteToOwner;\r\n        mapping (address => uint64[]) private ownerNotes;\r\n\r\n        // PURE FUNCTIONS\r\n        function isPosBitOne(uint data, uint pos) internal pure returns (bool) {\r\n                return data % (2**(pos+1)) >= (2**pos);\r\n        }\r\n\r\n        // MODIFIERS\r\n        modifier onlyOwner() {\r\n                require(msg.sender == owner);\r\n                _;\r\n        }\r\n\r\n        modifier onlyOwnerOf(uint64 _noteId) {\r\n                require(msg.sender == noteToOwner[_noteId]);\r\n                _;\r\n        }\r\n\r\n        modifier payFee() {\r\n                require(msg.value >= noteChainFee);\r\n                _;\r\n        }\r\n\r\n        modifier notDeleted(uint64 _noteId) {\r\n                require(uint8(notes[_noteId].metadata) != Deleted);\r\n                _;\r\n        }\r\n\r\n        modifier notPrivate(uint64 _noteId) {\r\n                require(isPosBitOne( uint( notes[_noteId].metadata), uint(IsPrivateBitPosition) ) == false );\r\n                _;\r\n        }\r\n\r\n        // constructor\r\n        constructor() public {\r\n                owner = msg.sender;\r\n        }\r\n\r\n        function setFee(uint _fee) external onlyOwner {\r\n                noteChainFee = _fee;\r\n        }\r\n\r\n        function withdraw(address _address, uint _amount) external onlyOwner {\r\n                require(_amount <= address(this).balance);\r\n                address(_address).transfer(_amount);\r\n        }\r\n\r\n        function getBalance() external constant returns(uint){\r\n                return address(this).balance;\r\n        }\r\n\r\n        function transferOwnership(address newOwner) external onlyOwner {\r\n                require(newOwner != address(0));\r\n                emit OwnershipTransferred(owner, newOwner);\r\n                owner = newOwner;\r\n        }\r\n\r\n        // NOTES related functions\r\n        // payable functions\r\n        function createNote(uint16 _metadata, bytes2 _publicKey, bytes12 _title, bytes _content) external payable payFee {\r\n                uint64 id = uint64(notes.push(Note(_metadata, _publicKey, _title, _content))) - 1;\r\n                noteToOwner[id] = msg.sender;\r\n                ownerNotes[msg.sender].push(id);\r\n                emit NoteCreated(id, _publicKey);\r\n        }\r\n\r\n        function deleteNote(uint64 _noteId) external notDeleted(_noteId) onlyOwnerOf(_noteId) payable payFee {\r\n                notes[_noteId].metadata = Deleted;\r\n        }\r\n\r\n        function updateNote(uint64 _noteId, uint16 _metadata, bytes12 _title, bytes _content) external notDeleted(_noteId) onlyOwnerOf(_noteId) payable payFee {\r\n                Note storage myNote = notes[_noteId];\r\n                myNote.title = _title;\r\n                myNote.metadata = _metadata;\r\n                myNote.content = _content;\r\n        }\r\n\r\n        function updateNoteMetadata(uint64 _noteId, uint16 _metadata) external notDeleted(_noteId) onlyOwnerOf(_noteId) payable payFee {\r\n                Note storage myNote = notes[_noteId];\r\n                myNote.metadata = _metadata;\r\n        }\r\n\r\n        function updateNoteContent(uint64 _noteId, bytes _content) external notDeleted(_noteId) onlyOwnerOf(_noteId) payable payFee {\r\n                Note storage myNote = notes[_noteId];\r\n                myNote.content = _content;\r\n        }\r\n\r\n        function updateNoteTitle(uint64 _noteId, bytes12 _title) external notDeleted(_noteId) onlyOwnerOf(_noteId) payable payFee {\r\n                Note storage myNote = notes[_noteId];\r\n                myNote.title = _title;\r\n        }\r\n\r\n        function updateNoteButContent(uint64 _noteId, uint16 _metadata, bytes12 _title) external notDeleted(_noteId) onlyOwnerOf(_noteId) payable payFee {\r\n                Note storage myNote = notes[_noteId];\r\n                myNote.metadata = _metadata;\r\n                myNote.title = _title;\r\n        }\r\n\r\n        // view functions\r\n        function getNotesCount() external view returns (uint64) {\r\n                return uint64(notes.length);\r\n        }\r\n\r\n        function getMyNote(uint64 _noteId) external notDeleted(_noteId) onlyOwnerOf(_noteId) view returns (uint16, bytes12, bytes) {\r\n                return (notes[_noteId].metadata, notes[_noteId].title, notes[_noteId].content);\r\n        }\r\n\r\n        function getMyNotes(uint64 _startFrom, uint64 _limit) external view returns (uint64[], uint16[], bytes2[], bytes12[], uint64) {\r\n                uint64 len = uint64(ownerNotes[msg.sender].length);\r\n                uint64 maxLoop = (len - _startFrom) > _limit ? _limit : (len - _startFrom);\r\n\r\n                uint64[] memory ids = new uint64[](maxLoop);\r\n                uint16[] memory metadatas = new uint16[](maxLoop);\r\n                bytes2[] memory publicKeys = new bytes2[](maxLoop);\r\n                bytes12[] memory titles = new bytes12[](maxLoop);\r\n\r\n                for (uint64 i = 0; i < maxLoop; i++) {\r\n                        ids[i] = ownerNotes[msg.sender][i+_startFrom];\r\n                        metadatas[i] = notes[ ids[i] ].metadata;\r\n                        publicKeys[i] = notes[ ids[i] ].publicKey;\r\n                        titles[i] = notes[ ids[i] ].title;\r\n                }\r\n                return (ids, metadatas, publicKeys, titles, len);\r\n        }\r\n\r\n        function publicGetNote(uint64 _noteId, bytes2 _publicKey) external notDeleted(_noteId) notPrivate(_noteId) view returns (uint16, bytes12, bytes) {\r\n                require(notes[_noteId].publicKey == _publicKey); // for public to get the note's data, knowing the publicKey is needed\r\n                return (notes[_noteId].metadata, notes[_noteId].title, notes[_noteId].content);\r\n        }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_noteId\",\"type\":\"uint64\"},{\"name\":\"_metadata\",\"type\":\"uint16\"},{\"name\":\"_title\",\"type\":\"bytes12\"},{\"name\":\"_content\",\"type\":\"bytes\"}],\"name\":\"updateNote\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_noteId\",\"type\":\"uint64\"},{\"name\":\"_title\",\"type\":\"bytes12\"}],\"name\":\"updateNoteTitle\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_noteId\",\"type\":\"uint64\"},{\"name\":\"_publicKey\",\"type\":\"bytes2\"}],\"name\":\"publicGetNote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"bytes12\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_noteId\",\"type\":\"uint64\"},{\"name\":\"_content\",\"type\":\"bytes\"}],\"name\":\"updateNoteContent\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_metadata\",\"type\":\"uint16\"},{\"name\":\"_publicKey\",\"type\":\"bytes2\"},{\"name\":\"_title\",\"type\":\"bytes12\"},{\"name\":\"_content\",\"type\":\"bytes\"}],\"name\":\"createNote\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noteChainFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNotesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_noteId\",\"type\":\"uint64\"},{\"name\":\"_metadata\",\"type\":\"uint16\"},{\"name\":\"_title\",\"type\":\"bytes12\"}],\"name\":\"updateNoteButContent\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_noteId\",\"type\":\"uint64\"}],\"name\":\"deleteNote\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_startFrom\",\"type\":\"uint64\"},{\"name\":\"_limit\",\"type\":\"uint64\"}],\"name\":\"getMyNotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64[]\"},{\"name\":\"\",\"type\":\"uint16[]\"},{\"name\":\"\",\"type\":\"bytes2[]\"},{\"name\":\"\",\"type\":\"bytes12[]\"},{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_noteId\",\"type\":\"uint64\"}],\"name\":\"getMyNote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"bytes12\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_noteId\",\"type\":\"uint64\"},{\"name\":\"_metadata\",\"type\":\"uint16\"}],\"name\":\"updateNoteMetadata\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"publicKey\",\"type\":\"bytes2\"}],\"name\":\"NoteCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NoteChain","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d83690182f90cab5141392384f3d6b4a127ae15501f7050ae0e9ed87a6d55c65"}]}