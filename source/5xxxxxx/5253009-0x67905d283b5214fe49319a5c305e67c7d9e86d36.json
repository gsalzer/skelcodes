{"status":"1","message":"OK","result":[{"SourceCode":"//File: contracts/acl/IACL.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\ninterface IACL {\r\n    function initialize(address permissionsCreator) public;\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n}\r\n\r\n//File: contracts/kernel/IKernel.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\ninterface IKernel {\r\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\r\n\r\n    function acl() public view returns (IACL);\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n\r\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\r\n    function getApp(bytes32 id) public view returns (address);\r\n}\r\n//File: contracts/kernel/KernelStorage.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\ncontract KernelConstants {\r\n    bytes32 constant public CORE_NAMESPACE = keccak256(\"core\");\r\n    bytes32 constant public APP_BASES_NAMESPACE = keccak256(\"base\");\r\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\"app\");\r\n\r\n    bytes32 constant public KERNEL_APP_ID = keccak256(\"kernel.aragonpm.eth\");\r\n    bytes32 constant public KERNEL_APP = keccak256(CORE_NAMESPACE, KERNEL_APP_ID);\r\n\r\n    bytes32 constant public ACL_APP_ID = keccak256(\"acl.aragonpm.eth\");\r\n    bytes32 constant public ACL_APP = keccak256(APP_ADDR_NAMESPACE, ACL_APP_ID);\r\n}\r\n\r\n\r\ncontract KernelStorage is KernelConstants {\r\n    mapping (bytes32 => address) public apps;\r\n}\r\n\r\n//File: contracts/acl/ACLSyntaxSugar.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\ncontract ACLSyntaxSugar {\r\n    function arr() internal pure returns (uint256[] r) {}\r\n\r\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\r\n    }\r\n\r\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\r\n        r = new uint256[](1);\r\n        r[0] = _a;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        r = new uint256[](2);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        r = new uint256[](3);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        r = new uint256[](4);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        r = new uint256[](5);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n        r[4] = _e;\r\n    }\r\n}\r\n\r\n\r\ncontract ACLHelpers {\r\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 30));\r\n    }\r\n\r\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 31));\r\n    }\r\n\r\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\r\n        a = uint32(_x);\r\n        b = uint32(_x >> (8 * 4));\r\n        c = uint32(_x >> (8 * 8));\r\n    }\r\n}\r\n\r\n//File: contracts/apps/IAppProxy.sol\r\npragma solidity 0.4.18;\r\n\r\ninterface IAppProxy {\r\n    function isUpgradeable() public pure returns (bool);\r\n    function getCode() public view returns (address);\r\n}\r\n\r\n//File: contracts/apps/AppStorage.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\ncontract AppStorage {\r\n    IKernel public kernel;\r\n    bytes32 public appId;\r\n    address internal pinnedCode; // used by Proxy Pinned\r\n    uint256 internal initializationBlock; // used by Initializable\r\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\r\n    uint256 private offset;\r\n}\r\n\r\n//File: contracts/common/Initializable.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\ncontract Initializable is AppStorage {\r\n    modifier onlyInit {\r\n        require(initializationBlock == 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @return Block number in which the contract was initialized\r\n    */\r\n    function getInitializationBlock() public view returns (uint256) {\r\n        return initializationBlock;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization has finished.\r\n    */\r\n    function initialized() internal onlyInit {\r\n        initializationBlock = getBlockNumber();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current block number.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber() internal view returns (uint256) {\r\n        return block.number;\r\n    }\r\n}\r\n\r\n//File: contracts/common/DelegateProxy.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\ncontract DelegateProxy {\r\n    /**\r\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\r\n    * @param _dst Destination address to perform the delegatecall\r\n    * @param _calldata Calldata for the delegatecall\r\n    */\r\n    function delegatedFwd(address _dst, bytes _calldata) internal {\r\n        require(isContract(_dst));\r\n        assembly {\r\n            let result := delegatecall(sub(gas, 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\r\n            let size := returndatasize\r\n\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\r\n            // if the call returned error data, forward it\r\n            switch result case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n\r\n    function isContract(address _target) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(_target) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n//File: contracts/apps/AppProxyBase.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AppProxyBase is IAppProxy, AppStorage, DelegateProxy, KernelConstants {\r\n    /**\r\n    * @dev Initialize AppProxy\r\n    * @param _kernel Reference to organization kernel for the app\r\n    * @param _appId Identifier for app\r\n    * @param _initializePayload Payload for call to be made after setup to initialize\r\n    */\r\n    function AppProxyBase(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\r\n        kernel = _kernel;\r\n        appId = _appId;\r\n\r\n        // Implicit check that kernel is actually a Kernel\r\n        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\r\n        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\r\n        // it.\r\n        address appCode = getAppBase(appId);\r\n\r\n        // If initialize payload is provided, it will be executed\r\n        if (_initializePayload.length > 0) {\r\n            require(isContract(appCode));\r\n            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\r\n            // returns ending execution context and halts contract deployment\r\n            require(appCode.delegatecall(_initializePayload));\r\n        }\r\n    }\r\n\r\n    function getAppBase(bytes32 _appId) internal view returns (address) {\r\n        return kernel.getApp(keccak256(APP_BASES_NAMESPACE, _appId));\r\n    }\r\n\r\n    function () payable public {\r\n        address target = getCode();\r\n        require(target != 0); // if app code hasn't been set yet, don't call\r\n        delegatedFwd(target, msg.data);\r\n    }\r\n}\r\n//File: contracts/apps/AppProxyUpgradeable.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\ncontract AppProxyUpgradeable is AppProxyBase {\r\n    address public pinnedCode;\r\n\r\n    /**\r\n    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\r\n    * @param _kernel Reference to organization kernel for the app\r\n    * @param _appId Identifier for app\r\n    * @param _initializePayload Payload for call to be made after setup to initialize\r\n    */\r\n    function AppProxyUpgradeable(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\r\n             AppProxyBase(_kernel, _appId, _initializePayload) public\r\n    {\r\n\r\n    }\r\n\r\n    function getCode() public view returns (address) {\r\n        return getAppBase(appId);\r\n    }\r\n\r\n    function isUpgradeable() public pure returns (bool) {\r\n        return true;\r\n    }\r\n}\r\n\r\n//File: contracts/apps/AppProxyPinned.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\ncontract AppProxyPinned is AppProxyBase {\r\n    /**\r\n    * @dev Initialize AppProxyPinned (makes it an un-upgradeable Aragon app)\r\n    * @param _kernel Reference to organization kernel for the app\r\n    * @param _appId Identifier for app\r\n    * @param _initializePayload Payload for call to be made after setup to initialize\r\n    */\r\n    function AppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\r\n             AppProxyBase(_kernel, _appId, _initializePayload) public\r\n    {\r\n        pinnedCode = getAppBase(appId);\r\n        require(pinnedCode != address(0));\r\n    }\r\n\r\n    function getCode() public view returns (address) {\r\n        return pinnedCode;\r\n    }\r\n\r\n    function isUpgradeable() public pure returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function () payable public {\r\n        delegatedFwd(getCode(), msg.data);\r\n    }\r\n}\r\n//File: contracts/factory/AppProxyFactory.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\n\r\ncontract AppProxyFactory {\r\n    event NewAppProxy(address proxy);\r\n\r\n    function newAppProxy(IKernel _kernel, bytes32 _appId) public returns (AppProxyUpgradeable) {\r\n        return newAppProxy(_kernel, _appId, new bytes(0));\r\n    }\r\n\r\n    function newAppProxy(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyUpgradeable) {\r\n        AppProxyUpgradeable proxy = new AppProxyUpgradeable(_kernel, _appId, _initializePayload);\r\n        NewAppProxy(address(proxy));\r\n        return proxy;\r\n    }\r\n\r\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId) public returns (AppProxyPinned) {\r\n        return newAppProxyPinned(_kernel, _appId, new bytes(0));\r\n    }\r\n\r\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyPinned) {\r\n        AppProxyPinned proxy = new AppProxyPinned(_kernel, _appId, _initializePayload);\r\n        NewAppProxy(address(proxy));\r\n        return proxy;\r\n    }\r\n}\r\n\r\n//File: contracts/kernel/Kernel.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Kernel is IKernel, KernelStorage, Initializable, AppProxyFactory, ACLSyntaxSugar {\r\n    bytes32 constant public APP_MANAGER_ROLE = keccak256(\"APP_MANAGER_ROLE\");\r\n\r\n    /**\r\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\r\n    * @notice Initializes a kernel instance along with its ACL and sets `_permissionsCreator` as the entity that can create other permissions\r\n    * @param _baseAcl Address of base ACL app\r\n    * @param _permissionsCreator Entity that will be given permission over createPermission\r\n    */\r\n    function initialize(address _baseAcl, address _permissionsCreator) onlyInit public {\r\n        initialized();\r\n\r\n        IACL acl = IACL(newAppProxy(this, ACL_APP_ID));\r\n\r\n        _setApp(APP_BASES_NAMESPACE, ACL_APP_ID, _baseAcl);\r\n        _setApp(APP_ADDR_NAMESPACE, ACL_APP_ID, acl);\r\n\r\n        acl.initialize(_permissionsCreator);\r\n    }\r\n\r\n    /**\r\n    * @dev Create a new instance of an app linked to this kernel and set its base\r\n    *      implementation if it was not already set\r\n    * @param _name Name of the app\r\n    * @param _appBase Address of the app's base implementation\r\n    * @return AppProxy instance\r\n    */\r\n    function newAppInstance(bytes32 _name, address _appBase) auth(APP_MANAGER_ROLE, arr(APP_BASES_NAMESPACE, _name)) public returns (IAppProxy appProxy) {\r\n        _setAppIfNew(APP_BASES_NAMESPACE, _name, _appBase);\r\n        appProxy = newAppProxy(this, _name);\r\n    }\r\n\r\n    /**\r\n    * @dev Create a new pinned instance of an app linked to this kernel and set\r\n    *      its base implementation if it was not already set\r\n    * @param _name Name of the app\r\n    * @param _appBase Address of the app's base implementation\r\n    * @return AppProxy instance\r\n    */\r\n    function newPinnedAppInstance(bytes32 _name, address _appBase) auth(APP_MANAGER_ROLE, arr(APP_BASES_NAMESPACE, _name)) public returns (IAppProxy appProxy) {\r\n        _setAppIfNew(APP_BASES_NAMESPACE, _name, _appBase);\r\n        appProxy = newAppProxyPinned(this, _name);\r\n    }\r\n\r\n    /**\r\n    * @dev Set the resolving address of an app instance or base implementation\r\n    * @param _namespace App namespace to use\r\n    * @param _name Name of the app\r\n    * @param _app Address of the app\r\n    * @return ID of app\r\n    */\r\n    function setApp(bytes32 _namespace, bytes32 _name, address _app) auth(APP_MANAGER_ROLE, arr(_namespace, _name)) kernelIntegrity public returns (bytes32 id) {\r\n        return _setApp(_namespace, _name, _app);\r\n    }\r\n\r\n    /**\r\n    * @dev Get the address of an app instance or base implementation\r\n    * @param _id App identifier\r\n    * @return Address of the app\r\n    */\r\n    function getApp(bytes32 _id) public view returns (address) {\r\n        return apps[_id];\r\n    }\r\n\r\n    /**\r\n    * @dev Get the installed ACL app\r\n    * @return ACL app\r\n    */\r\n    function acl() public view returns (IACL) {\r\n        return IACL(getApp(ACL_APP));\r\n    }\r\n\r\n    /**\r\n    * @dev Function called by apps to check ACL on kernel or to check permission status\r\n    * @param _who Sender of the original call\r\n    * @param _where Address of the app\r\n    * @param _what Identifier for a group of actions in app\r\n    * @param _how Extra data for ACL auth\r\n    * @return boolean indicating whether the ACL allows the role or not\r\n    */\r\n    function hasPermission(address _who, address _where, bytes32 _what, bytes _how) public view returns (bool) {\r\n        return acl().hasPermission(_who, _where, _what, _how);\r\n    }\r\n\r\n    function _setApp(bytes32 _namespace, bytes32 _name, address _app) internal returns (bytes32 id) {\r\n        id = keccak256(_namespace, _name);\r\n        apps[id] = _app;\r\n        SetApp(_namespace, _name, id, _app);\r\n    }\r\n\r\n    function _setAppIfNew(bytes32 _namespace, bytes32 _name, address _app) internal returns (bytes32 id) {\r\n        id = keccak256(_namespace, _name);\r\n\r\n        if (_app != address(0)) {\r\n            address app = getApp(id);\r\n            if (app != address(0)) {\r\n                require(app == _app);\r\n            } else {\r\n                apps[id] = _app;\r\n                SetApp(_namespace, _name, id, _app);\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier auth(bytes32 _role, uint256[] memory params) {\r\n        bytes memory how;\r\n        uint256 byteLength = params.length * 32;\r\n        assembly {\r\n            how := params // forced casting\r\n            mstore(how, byteLength)\r\n        }\r\n        // Params is invalid from this point fwd\r\n        require(hasPermission(msg.sender, address(this), _role, how));\r\n        _;\r\n    }\r\n\r\n    modifier kernelIntegrity {\r\n        _; // After execution check integrity\r\n        address kernel = getApp(KERNEL_APP);\r\n        uint256 size;\r\n        assembly { size := extcodesize(kernel) }\r\n        require(size > 0);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"apps\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getApp\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_baseAcl\",\"type\":\"address\"},{\"name\":\"_permissionsCreator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORE_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_appBase\",\"type\":\"address\"}],\"name\":\"newAppInstance\",\"outputs\":[{\"name\":\"appProxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_MANAGER_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_appBase\",\"type\":\"address\"}],\"name\":\"newPinnedAppInstance\",\"outputs\":[{\"name\":\"appProxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_namespace\",\"type\":\"bytes32\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_app\",\"type\":\"address\"}],\"name\":\"setApp\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"},{\"name\":\"_initializePayload\",\"type\":\"bytes\"}],\"name\":\"newAppProxyPinned\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_BASES_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"acl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"}],\"name\":\"newAppProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"},{\"name\":\"_initializePayload\",\"type\":\"bytes\"}],\"name\":\"newAppProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_where\",\"type\":\"address\"},{\"name\":\"_what\",\"type\":\"bytes32\"},{\"name\":\"_how\",\"type\":\"bytes\"}],\"name\":\"hasPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"}],\"name\":\"newAppProxyPinned\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"NewAppProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"namespace\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"app\",\"type\":\"address\"}],\"name\":\"SetApp\",\"type\":\"event\"}]","ContractName":"Kernel","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://99b362aedaa258d311c36caf494b0d0daf00333ca8cd976c3041285e378b582c"}]}