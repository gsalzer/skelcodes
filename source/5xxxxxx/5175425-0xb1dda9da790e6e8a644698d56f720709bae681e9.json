{"status":"1","message":"OK","result":[{"SourceCode":"// CryptoDays Source code\r\n// copyright 2018 xeroblood <https://owntheday.io>\r\n\r\npragma solidity 0.4.19;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n* @title Pausable\r\n* @dev Base contract which allows children to implement an emergency stop mechanism.\r\n*/\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title Helps contracts guard agains reentrancy attacks.\r\n* @author Remco Bloemen <remco@2Ï€.com>\r\n* @notice If you mark a function `nonReentrant`, you should also\r\n* mark it `external`.\r\n*/\r\ncontract ReentrancyGuard {\r\n\r\n    /**\r\n    * @dev We use a single lock for the whole contract.\r\n    */\r\n    bool private reentrancyLock = false;\r\n\r\n    /**\r\n    * @dev Prevents a contract from calling itself, directly or indirectly.\r\n    * @notice If you mark a function `nonReentrant`, you should also\r\n    * mark it `external`. Calling one nonReentrant function from\r\n    * another is not supported. Instead, you can implement a\r\n    * `private` function doing the actual work, and a `external`\r\n    * wrapper marked as `nonReentrant`.\r\n    */\r\n    modifier nonReentrant() {\r\n        require(!reentrancyLock);\r\n        reentrancyLock = true;\r\n        _;\r\n        reentrancyLock = false;\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Crypto Days Base - Controls Ownership of Contract and retreiving Funds\r\n/// @author xeroblood (https://owntheday.io)\r\ncontract CryptoDaysBase is Pausable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    event BalanceCollected(address collector, uint256 amount);\r\n\r\n    /// @dev A mapping from Day Index to the address owner. Days with\r\n    ///  no valid owner address are assigned to contract owner.\r\n    mapping (address => uint256) public availableForWithdraw;\r\n\r\n    function contractBalance() public view returns (uint256) {\r\n        return this.balance;\r\n    }\r\n\r\n    function withdrawBalance() public nonReentrant {\r\n        require(msg.sender != address(0));\r\n        require(availableForWithdraw[msg.sender] > 0);\r\n        require(availableForWithdraw[msg.sender] <= this.balance);\r\n        uint256 amount = availableForWithdraw[msg.sender];\r\n        availableForWithdraw[msg.sender] = 0;\r\n        BalanceCollected(msg.sender, amount);\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    /// @dev Calculate the Final Sale Price after the Owner-Cut has been calculated\r\n    function calculateOwnerCut(uint256 price) public pure returns (uint256) {\r\n        uint8 percentCut = 5;\r\n        if (price > 5500 finney) {\r\n            percentCut = 2;\r\n        } else if (price > 1250 finney) {\r\n            percentCut = 3;\r\n        } else if (price > 250 finney) {\r\n            percentCut = 4;\r\n        }\r\n        return price.mul(percentCut).div(100);\r\n    }\r\n\r\n    /// @dev Calculate the Price Increase based on the current Purchase Price\r\n    function calculatePriceIncrease(uint256 price) public pure returns (uint256) {\r\n        uint8 percentIncrease = 100;\r\n        if (price > 5500 finney) {\r\n            percentIncrease = 13;\r\n        } else if (price > 2750 finney) {\r\n            percentIncrease = 21;\r\n        } else if (price > 1250 finney) {\r\n            percentIncrease = 34;\r\n        } else if (price > 250 finney) {\r\n            percentIncrease = 55;\r\n        }\r\n        return price.mul(percentIncrease).div(100);\r\n    }\r\n}\r\n\r\n\r\n/// @title Crypto Days!  Own the Day!\r\n/// @author xeroblood (https://owntheday.io)\r\ncontract CryptoDays is CryptoDaysBase {\r\n    using SafeMath for uint256;\r\n\r\n    event DayClaimed(address buyer, address seller, uint16 dayIndex, uint256 newPrice);\r\n\r\n    /// @dev A mapping from Day Index to Current Price.\r\n    ///  Initial Price set at 1 finney (1/1000th of an ether).\r\n    mapping (uint16 => uint256) public dayIndexToPrice;\r\n\r\n    /// @dev A mapping from Day Index to the address owner. Days with\r\n    ///  no valid owner address are assigned to contract owner.\r\n    mapping (uint16 => address) public dayIndexToOwner;\r\n\r\n    /// @dev A mapping from Account Address to Nickname.\r\n    mapping (address => string) public ownerAddressToName;\r\n\r\n    /// @dev Gets the Current (or Default) Price of a Day\r\n    function getPriceByDayIndex(uint16 dayIndex) public view returns (uint256) {\r\n        require(dayIndex >= 0 && dayIndex < 366);\r\n        uint256 price = dayIndexToPrice[dayIndex];\r\n        if (price == 0) { price = 1 finney; }\r\n        return price;\r\n    }\r\n\r\n    /// @dev Sets the Nickname for an Account Address\r\n    function setAccountNickname(string nickname) public whenNotPaused {\r\n        require(msg.sender != address(0));\r\n        require(bytes(nickname).length > 0);\r\n        ownerAddressToName[msg.sender] = nickname;\r\n    }\r\n\r\n    /// @dev Claim a Day for Your Very Own!\r\n    /// The Purchase Price is Paid to the Previous Owner\r\n    function claimDay(uint16 dayIndex) public nonReentrant whenNotPaused payable {\r\n        require(msg.sender != address(0));\r\n        require(dayIndex >= 0 && dayIndex < 366);\r\n\r\n        // Prevent buying from self\r\n        address buyer = msg.sender;\r\n        address seller = dayIndexToOwner[dayIndex];\r\n        require(buyer != seller);\r\n\r\n        // Get Amount Paid\r\n        uint256 amountPaid = msg.value;\r\n\r\n        // Get Current Purchase Price from Index and ensure enough was Paid\r\n        uint256 purchasePrice = dayIndexToPrice[dayIndex];\r\n        if (purchasePrice == 0) {\r\n            purchasePrice = 1 finney; // == 0.001 ether or 1000000000000000 wei\r\n        }\r\n        require(amountPaid >= purchasePrice);\r\n\r\n        // If too much was paid, track the change to be returned\r\n        uint256 changeToReturn = 0;\r\n        if (amountPaid > purchasePrice) {\r\n            changeToReturn = amountPaid.sub(purchasePrice);\r\n            amountPaid -= changeToReturn;\r\n        }\r\n\r\n        // Calculate New Purchase Price and update storage\r\n        uint256 priceIncrease = calculatePriceIncrease(purchasePrice);\r\n        uint256 newPurchasePrice = purchasePrice.add(priceIncrease);\r\n        dayIndexToPrice[dayIndex] = newPurchasePrice;\r\n\r\n        // Calculate Sale Price after Owner-Cut and update Owner Balance\r\n        uint256 ownerCut = calculateOwnerCut(amountPaid);\r\n        uint256 salePrice = amountPaid.sub(ownerCut);\r\n        availableForWithdraw[owner] += ownerCut;\r\n\r\n        // Assign Day to New Owner\r\n        dayIndexToOwner[dayIndex] = buyer;\r\n\r\n        // Fire Claim Event\r\n        DayClaimed(buyer, seller, dayIndex, newPurchasePrice);\r\n\r\n        // Transfer Funds (Initial sales are made to contract)\r\n        if (seller != address(0)) {\r\n            availableForWithdraw[seller] += salePrice;\r\n        } else {\r\n            availableForWithdraw[owner] += salePrice;\r\n        }\r\n        if (changeToReturn > 0) {\r\n            buyer.transfer(changeToReturn);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"dayIndexToPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"calculateOwnerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nickname\",\"type\":\"string\"}],\"name\":\"setAccountNickname\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dayIndex\",\"type\":\"uint16\"}],\"name\":\"getPriceByDayIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableForWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dayIndex\",\"type\":\"uint16\"}],\"name\":\"claimDay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"calculatePriceIncrease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerAddressToName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"dayIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dayIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"DayClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"collector\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptoDays","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3370953b98db56f5b6463999cd3835f3ec77206ae90e1a4f748a40046bf3d07c"}]}