{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n \r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n} \r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n \r\n  mapping(address => uint256) balances;\r\n \r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n \r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n \r\n}\r\n \r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n \r\n  mapping (address => mapping (address => uint256)) allowed;\r\n \r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n \r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n \r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n \r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n \r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n \r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n \r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n  /*\r\n  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n   */\r\n}\r\n \r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n*/\r\n \r\ncontract BurnableToken is StandardToken {\r\n \r\n  function burn(uint256 _value) public {\r\n    require(_value > 0);\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    emit Burn(burner, _value);\r\n    emit Transfer(msg.sender, address(0), _value);\r\n}\r\n \r\n  event Burn(address indexed burner, uint256 indexed value);\r\n}\r\n\r\ncontract TMBToken is BurnableToken {\r\n    \r\n  string public constant name = \"Teambrella Token\";\r\n    \r\n  string public constant symbol = \"TMB\";\r\n    \r\n  uint32 public constant decimals = 18;\r\n    \r\n  uint256 public constant INITIAL_SUPPLY = 17500000E18;  // 60% is for sale:  10000000E18 max during the sale + 500000E18 max bonus during the pre-sale\r\n  \r\n  uint256 public constant lockPeriodStart = 1536796740;  // end of sale 2018-09-12 23:59\r\n    \r\n  bool public stopped = true;\r\n  address public owner;\r\n  \r\n  mapping(address => uint256) public unlockTimes;\r\n\r\n  modifier isRunning() {\r\n    if (stopped) {\r\n        if (msg.sender != owner)\r\n            revert();\r\n      }\r\n    _;\r\n  }\r\n\r\n  modifier isNotLocked() {\r\n    // unconditionally unlock everything in 2 years\r\n    \r\n    if (now < lockPeriodStart + 730 days) {\r\n        // add lockedPeriods \r\n        if (now < unlockTimes[msg.sender])\r\n            revert();\r\n      }\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n    emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\r\n  }\r\n  \r\n  function start() public {\r\n    require(msg.sender == owner);\r\n    stopped = false;\r\n  }\r\n\r\n  function lockAddress(address _addr, uint256 _period) public {\r\n      require(msg.sender == owner);\r\n      require(stopped); // not possible to lock addresses after start of the contract\r\n      unlockTimes[_addr] = lockPeriodStart + _period;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public isRunning isNotLocked returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public isRunning returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public isRunning isNotLocked returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n/*\r\n  function increaseApproval(address _spender, uint256 _addedValue) public isRunning isNotLocked returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint256 _subtractedValue) public isRunning isNotLocked returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n*/ \r\n  \r\n}\r\n\r\ncontract TMBTokenSale {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    address public multisigOwner;\r\n\r\n    address public multisigFunds;\r\n    address public company;\r\n    address public partners;\r\n    \r\n    // uint256 public constant rate = 1000;\r\n\r\n    uint256 public constant soldPercent = 60;\r\n    uint256 public constant partnersPercent = 5;\r\n    uint256 public constant companyPercent = 35;\r\n\r\n    uint256 public constant softcap = 2000 * 1 ether;\r\n    uint256 public constant presalecap = 2500 * 1 ether;\r\n    uint256 public constant hardcap = 10000 * 1 ether;\r\n \r\n    uint256 public constant startPresale = 1532304000; // 2018-07-23 00:00\r\n    uint256 public constant endPresale = 1534118340; // 2018-08-12 23:59\r\n\r\n    uint256 public constant startSale = 1534118400; // 2018-08-13 00:00\r\n    uint256 public constant endSale = 1536796740; // 2018-09-12 23:59\r\n\r\n    TMBToken public token = new TMBToken();\r\n\r\n    bool public stoppedSale = false;\r\n    bool public stoppedPresale = false;\r\n\r\n    uint256 public receivedEth = 0;\r\n    uint256 public deliveredEth = 0;\r\n    \r\n    uint256 public issuedTokens;\r\n \r\n    mapping(address => uint256) public preBalances;\r\n    mapping(address => uint256) public saleBalances;\r\n    \r\n    bool tokensaleFinished = false;\r\n    \r\n    event ReservedPresale(address indexed to, uint256 value);\r\n    event ReservedSale(address indexed to, uint256 value);\r\n    event Issued(address indexed to, uint256 value);\r\n    event Refunded(address indexed to, uint256 value);\r\n\r\n    constructor() public {\r\n        \r\n        multisigOwner = 0x101B8fA4F9fA10B9800aCa7b2f4F4841d24DA48E;\r\n\r\n        multisigFunds = 0xc65484367BdD9265D487d905A5AAe228e9eE1000;\r\n        company = 0x993C5743Fe73a805d125051f77A32cFAaEF08427;\r\n        partners = 0x66885Bf2915b687E37253F8efB50Cc01f9452802;\r\n\r\n    }\r\n \r\n    modifier isAfterPresale() {\r\n    \trequire(now > endPresale || (stoppedPresale && now > startPresale));\r\n    \t_;\r\n    }\r\n\r\n    modifier isAfterSale() {\r\n    \trequire(now > endSale || (stoppedSale && now > startSale));\r\n    \t_;\r\n    }\r\n\t\r\n    modifier isAboveSoftCap() {\r\n        require(receivedEth >= softcap);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(multisigOwner == msg.sender);\r\n        _;\r\n    }\r\n    \r\n    function() external payable {\r\n      reserveFunds();\r\n    }\r\n\r\n   function reserveFunds() public payable {\r\n       \r\n       uint256 _value = msg.value;\r\n       address _addr = msg.sender;\r\n       \r\n       require (!isContract(_addr));\r\n       require(_value >= 0.01 * 1 ether);\r\n       \r\n       uint256 _totalFundedEth;\r\n       \r\n       if (!stoppedPresale && now > startPresale && now < endPresale)\r\n       {\r\n           _totalFundedEth = preBalances[_addr].add(_value);\r\n           preBalances[_addr] = _totalFundedEth;\r\n           receivedEth = receivedEth.add(_value);\r\n           emit ReservedPresale(_addr, _value);\r\n       }\r\n       else if (!stoppedSale && now > startSale && now < endSale)\r\n       {\r\n           _totalFundedEth = saleBalances[_addr].add(_value);\r\n           saleBalances[_addr] = _totalFundedEth;\r\n           receivedEth = receivedEth.add(_value);\r\n           emit ReservedSale(_addr, _value);\r\n       }\r\n       else\r\n       {\r\n           revert();\r\n       }\r\n    }\r\n\r\n    function stopPresale() public onlyOwner {\r\n        stoppedPresale = true;\r\n    }\r\n    \r\n    function stopSale() public onlyOwner {\r\n        stoppedSale = true;\r\n    }\r\n\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n\t    uint256 size;\r\n\t    if (_addr == 0) return false;\r\n\t    assembly {\r\n\t\t    size := extcodesize(_addr)\r\n\t    }\r\n\t    return size > 0;\r\n    }\r\n\r\n    function issueTokens(address _addr, uint256 _valTokens) internal {\r\n\r\n        token.transfer(_addr, _valTokens);\r\n        issuedTokens = issuedTokens.add(_valTokens);\r\n        emit Issued(_addr, _valTokens);\r\n    }\r\n\r\n    function deliverPresale(address _addr, uint256 _valEth) internal {\r\n\r\n        uint256 _issuedTokens = _valEth * 1200; // _valEth * rate + 20% presale bonus, rate == 1000\r\n        uint256 _newDeliveredEth = deliveredEth.add(_valEth);\r\n        require(_newDeliveredEth < presalecap);\r\n        multisigFunds.transfer(_valEth);\r\n        deliveredEth = _newDeliveredEth;\r\n\r\n        issueTokens(_addr, _issuedTokens);\r\n    }\r\n    \r\n    function deliverSale(address _addr, uint256 _valEth) internal {\r\n\r\n        uint256 _issuedTokens = _valEth * 1000; // _valEth * rate, rate == 1000\r\n        uint256 _newDeliveredEth = deliveredEth.add(_valEth);\r\n        require(_newDeliveredEth < hardcap);\r\n        multisigFunds.transfer(_valEth);\r\n        deliveredEth = _newDeliveredEth;\r\n\r\n        issueTokens(_addr, _issuedTokens);\r\n    }\r\n    \r\n    // everyone is able to withdraw his own money if no softcap\r\n    function refund() public isAfterSale {\r\n        require(receivedEth < softcap);\r\n        uint256 _value = preBalances[msg.sender]; \r\n        _value += saleBalances[msg.sender]; \r\n        if (_value > 0)\r\n        {\r\n            preBalances[msg.sender] = 0;\r\n            saleBalances[msg.sender] = 0; \r\n            msg.sender.transfer(_value);\r\n            emit Refunded(msg.sender, _value);\r\n        }\r\n    }\r\n\r\n    function issueTokensPresale(address _addr, uint256 _val) public onlyOwner isAfterPresale isAboveSoftCap {\r\n\r\n        require(_val >= 0);\r\n        require(!tokensaleFinished);\r\n        \r\n        uint256 _fundedEth = preBalances[_addr];\r\n        if (_fundedEth > 0)\r\n        {\r\n            if (_fundedEth > _val)\r\n            {\r\n                // rollback the rest of funds\r\n                uint256 _refunded = _fundedEth.sub(_val);\r\n                _addr.transfer(_refunded);\r\n                emit Refunded(_addr, _refunded);\r\n                _fundedEth = _val;\r\n            }\r\n\r\n            if (_fundedEth > 0)\r\n            {\r\n                deliverPresale(_addr, _fundedEth);\r\n            }\r\n            preBalances[_addr] = 0;\r\n        }\r\n    }\r\n\r\n    function issueTokensSale(address _addr, uint256 _val) public onlyOwner isAfterSale isAboveSoftCap {\r\n\r\n        require(_val >= 0);\r\n        require(!tokensaleFinished);\r\n        \r\n        uint256 _fundedEth = saleBalances[_addr];\r\n        if (_fundedEth > 0)\r\n        {\r\n            if (_fundedEth > _val)\r\n            {\r\n                // rollback the rest of funds\r\n                uint256 _refunded = _fundedEth.sub(_val);\r\n                _addr.transfer(_refunded);\r\n                emit Refunded(_addr, _refunded);\r\n                _fundedEth = _val;\r\n            }\r\n\r\n            if (_fundedEth > 0)\r\n            {\r\n                deliverSale(_addr, _fundedEth);\r\n            }\r\n            saleBalances[_addr] = 0;\r\n        }\r\n    }\r\n\r\n    function issueTokensPresale(address[] _addrs) public onlyOwner isAfterPresale isAboveSoftCap {\r\n\r\n        require(!tokensaleFinished);\r\n\r\n        for (uint256 i; i < _addrs.length; i++)\r\n        {\r\n            address _addr = _addrs[i];\r\n            uint256 _fundedEth = preBalances[_addr];\r\n            if (_fundedEth > 0)\r\n            {\r\n                deliverPresale(_addr, _fundedEth);\r\n                preBalances[_addr] = 0;\r\n            }            \r\n        }\r\n    }\r\n\r\n    function issueTokensSale(address[] _addrs) public onlyOwner isAfterSale isAboveSoftCap {\r\n\r\n        require(!tokensaleFinished);\r\n\r\n        for (uint256 i; i < _addrs.length; i++)\r\n        {\r\n            address _addr = _addrs[i];\r\n            uint256 _fundedEth = saleBalances[_addr];\r\n            if (_fundedEth > 0)\r\n            {\r\n                deliverSale(_addr, _fundedEth);\r\n                saleBalances[_addr] = 0;\r\n            }            \r\n        }\r\n    }\r\n    \r\n    function refundTokensPresale(address[] _addrs) public onlyOwner isAfterPresale {\r\n\r\n        for (uint256 i; i < _addrs.length; i++)\r\n        {\r\n            address _addr = _addrs[i];\r\n            uint256 _fundedEth = preBalances[_addr];\r\n            if (_fundedEth > 0)\r\n            {\r\n                _addr.transfer(_fundedEth);\r\n                emit Refunded(_addr, _fundedEth);\r\n                preBalances[_addr] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function refundTokensSale(address[] _addrs) public onlyOwner isAfterSale {\r\n\r\n        for (uint256 i; i < _addrs.length; i++)\r\n        {\r\n            address _addr = _addrs[i];\r\n            uint256 _fundedEth = saleBalances[_addr];\r\n            if (_fundedEth > 0)\r\n            {\r\n                _addr.transfer(_fundedEth);\r\n                emit Refunded(_addr, _fundedEth);\r\n                saleBalances[_addr] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function lockAddress(address _addr, uint256 _period) public onlyOwner {\r\n        token.lockAddress(_addr, _period);\r\n    }\r\n\r\n    function finalize() public onlyOwner isAfterSale isAboveSoftCap {\r\n\r\n        require(!tokensaleFinished);\r\n\r\n        tokensaleFinished = true;\r\n        \r\n        uint256 _soldTokens = issuedTokens;\r\n        \r\n        // transfer tokens to partners\r\n        uint256 _partnersTokens = _soldTokens * partnersPercent / soldPercent;\r\n        issueTokens(partners, _partnersTokens);\r\n\r\n        // transfer tokens to company\r\n        uint256 _companyTokens = _soldTokens * companyPercent / soldPercent;\r\n        issueTokens(company, _companyTokens);\r\n        token.lockAddress(company, 730 days);\r\n\r\n        // burn everything but issued (sold + partners + company)\r\n        uint256 _tokensToBurn = token.balanceOf(this); //token.INITIAL_SUPPLY().sub(issuedTokens);\r\n        token.burn(_tokensToBurn);\r\n        token.start();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"preBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stoppedPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"lockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"refundTokensPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"issueTokensSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"saleBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"issueTokensSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnersPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presalecap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deliveredEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"company\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reserveFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"issueTokensPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"refundTokensSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"issueTokensPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stoppedSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receivedEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReservedPresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReservedSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"}]","ContractName":"TMBTokenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3c94ad5ea0d01c52bc447aa473ff8ac52a468fde21d2b0e1474ac671fabb14ba"}]}