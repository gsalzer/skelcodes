{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address newOwner) public onlyOwner returns (bool) {\r\n        require(newOwner != address(0));\r\n        require(newOwner != address(this));\r\n        require(newOwner != owner);  \r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n      */\r\n    function transfer(address _to, uint256 _value) public returns (bool){\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n// ************************ new Standard  ERC20 token with increase and decraese approval ***********************\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n//  *************************************************************************************************************\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n  /**\r\n  * @dev Function to mint tokens\r\n  * @param _to The address that will recieve the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n   */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(0X0, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n  * @dev Function to stop minting new tokens.\r\n  * @return True if the operation was successful.\r\n   */\r\n    function finishMinting() onlyOwner public returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MooToken is MintableToken {\r\n  // Coin Properties\r\n    string public name = \"MOO token\";\r\n    string public symbol = \"XMOO\";\r\n    uint256 public decimals = 18;\r\n\r\n    event EmergencyERC20DrainWasCalled(address tokenaddress, uint256 _amount);\r\n\r\n  // Special propeties\r\n    bool public tradingStarted = false;\r\n\r\n  /**\r\n  * @dev modifier that throws if trading has not started yet\r\n   */\r\n    modifier hasStartedTrading() {\r\n        require(tradingStarted);\r\n        _;\r\n    }\r\n\r\n  /**\r\n  * @dev Allows the owner to enable the trading. This can not be undone\r\n  */\r\n    function startTrading() public onlyOwner returns(bool) {\r\n        require(!tradingStarted);\r\n        tradingStarted = true;\r\n        return true;\r\n    }\r\n\r\n  /**\r\n  * @dev Allows anyone to transfer the MOO tokens once trading has started\r\n  * @param _to the recipient address of the tokens.\r\n  * @param _value number of tokens to be transfered.\r\n   */\r\n    function transfer(address _to, uint _value) hasStartedTrading public returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n  /**\r\n  * @dev Allows anyone to transfer the MOO tokens once trading has started\r\n  * @param _from address The address which you want to send tokens from\r\n  * @param _to address The address which you want to transfer to\r\n  * @param _value uint the amout of tokens to be transfered\r\n   */\r\n    function transferFrom(address _from, address _to, uint _value) hasStartedTrading public returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function emergencyERC20Drain( ERC20 oddToken, uint amount ) public onlyOwner returns(bool){\r\n        oddToken.transfer(owner, amount);\r\n        EmergencyERC20DrainWasCalled(oddToken, amount);\r\n        return true;\r\n    }\r\n\r\n    function isOwner(address _owner) public view returns(bool){\r\n        if (owner == _owner) {\r\n            return true;    \r\n    } else {\r\n            return false;    \r\n    } \r\n    }\r\n}\r\n\r\n\r\ncontract MooTokenSale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n    MooToken public token;\r\n    uint256 public decimals;\r\n    uint256 public oneCoin;\r\n\r\n  // start and end block where investments are allowed \r\n    uint256 public PRESALE_STARTTIMESTAMP;\r\n    uint256 public PRESALE_ENDTIMESTAMP;\r\n\r\n  // start and end block where investments are allowed \r\n    uint256 public PUBLICSALE_STARTTIMESTAMP;\r\n    uint256 public PUBLICSALE_ENDTIMESTAMP;\r\n\r\n  // address where funds are collected\r\n    address public multiSig;\r\n\r\n    function setWallet(address _newWallet) public onlyOwner returns (bool) {\r\n        multiSig = _newWallet;\r\n        WalletUpdated(_newWallet);\r\n        return true;\r\n    } \r\n\r\n    uint256 rate; // how many token units a buyer gets per wei\r\n    uint256 public minContribution = 0.0001 ether;  // minimum contributio to participate in tokensale\r\n    uint256 public maxContribution = 1000 ether;\r\n    uint256 public tokensOfTeamAndAdvisors;\r\n\r\n  // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n  // amount of raised tokens\r\n    uint256 public tokenRaised;\r\n\r\n  // maximum amount of tokens being created\r\n    uint256 public maxTokens;\r\n\r\n  // maximum amount of tokens for sale\r\n    uint256 public tokensForSale;  \r\n  // maximum amount of tokens for presale\r\n  // uint256 public tokensForPreSale; \r\n\r\n  // number of participants in presale\r\n    uint256 public numberOfContributors = 0;\r\n\r\n  //  for whitelist\r\n    address public cs;\r\n  //  for whitelist AND placement\r\n    address public Admin;\r\n\r\n  //  for rate\r\n    uint public basicRate;\r\n\r\n  // for maximum token what one contributor can buy\r\n    uint public maxTokenCap;\r\n  // for suspension\r\n    bool public suspended;\r\n \r\n\r\n    mapping (address => bool) public authorised; // just to annoy the heck out of americans\r\n    mapping (address => uint) adminCallMintToTeamCount; // count to admin only once can call MintToTeamAndAdvisors\r\n\r\n    event TokenPurchase(address indexed purchaser, uint256 amount, uint256 _tokens);\r\n    event TokenPlaced(address indexed beneficiary, uint256 _tokens);\r\n    event SaleClosed();\r\n    event TradingStarted();\r\n    event Closed();\r\n    event AdminUpdated(address newAdminAddress);\r\n    event CsUpdated(address newCSAddress);\r\n    event EmergencyERC20DrainWasCalled(address tokenaddress, uint256 _amount);\r\n    event AuthoriseStatusUpdated(address accounts, bool status);\r\n    event SaleResumed();\r\n    event SaleSuspended();\r\n    event WalletUpdated(address newwallet);\r\n   \r\n\r\n    function MooTokenSale() public {\r\n        PRESALE_STARTTIMESTAMP = 1516896000;\r\n        // 1516896000 converts to Friday January 26, 2018 00:00:00 (am) in time zone Asia/Singapore (+08)\r\n        PRESALE_ENDTIMESTAMP = 1522209600;\r\n        //1522209600 converts to Wednesday March 28, 2018 12:00:00 (pm) in time zone Asia/Singapore (+08)\r\n        PUBLICSALE_STARTTIMESTAMP = 1522382400;\r\n        //  1522382400 converts to Friday March 30, 2018 12:00:00 (pm) in time zone Asia/Singapore (+08)\r\n        PUBLICSALE_ENDTIMESTAMP = 1525060800; \r\n        // 1525060800 converts to Monday April 30, 2018 12:00:00 (pm) in time zone Asia/Singapore (+08)\r\n      \r\n        multiSig = 0x90420B8aef42F856a0AFB4FFBfaA57405FB190f3;\r\n   \r\n        token = new MooToken();\r\n        decimals = token.decimals();\r\n        oneCoin = 10 ** decimals;\r\n        maxTokens = 500 * (10**6) * oneCoin;\r\n        tokensForSale = 200260050 * oneCoin; // 200 260 050\r\n        basicRate = 1800;\r\n        rate = basicRate;\r\n        tokensOfTeamAndAdvisors = 99739950 * oneCoin;  // it was missing the onecoin , 99 739 950\r\n        maxTokenCap = basicRate * maxContribution * 11/10;\r\n        suspended = false;\r\n    }\r\n\r\n\r\n    function currentTime() public constant returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates the rate with bonus in the publis sale\r\n    */\r\n    function getCurrentRate() public view returns (uint256) {\r\n    \r\n        if (currentTime() <= PRESALE_ENDTIMESTAMP) {\r\n            return basicRate * 5/4;\r\n        }\r\n\r\n        if (tokenRaised <= 10000000 * oneCoin) {\r\n            return basicRate * 11/10;\r\n    } else if (tokenRaised <= 20000000 * oneCoin) {\r\n        return basicRate * 1075/1000;\r\n    } else if (tokenRaised <= 30000000 * oneCoin) {\r\n        return basicRate * 105/100;\r\n    } else {\r\n        return basicRate ;\r\n    }\r\n    }\r\n\r\n\r\n  // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        if (currentTime() > PUBLICSALE_ENDTIMESTAMP)\r\n            return true; // if  the time is over\r\n        if (tokenRaised >= tokensForSale)\r\n            return true; // if we reach the tokensForSale \r\n        return false;\r\n    }\r\n\r\n// Allows admin to suspend the sale.\r\n    function suspend() external onlyAdmin returns(bool) {\r\n        if (suspended == true) {\r\n            return false;\r\n        }\r\n        suspended = true;\r\n        SaleSuspended();\r\n        return true;\r\n    }\r\n\r\n\r\n// Allows admin to resume the sale.\r\n    function resume() external onlyAdmin returns(bool) {\r\n        if (suspended == false) {\r\n            return false;\r\n        }\r\n        suspended = false;\r\n        SaleResumed();\r\n        return true;\r\n    }\r\n\r\n  \r\n  // @dev throws if person sending is not contract Admin or cs role\r\n    modifier onlyCSorAdmin() {\r\n        require((msg.sender == Admin) || (msg.sender==cs));\r\n        _;\r\n    }\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == Admin);\r\n        _;\r\n    }\r\n\r\n  /**\r\n  * @dev throws if person sending is not authorised or sends nothing or we are out of time\r\n  */\r\n    modifier onlyAuthorised() {\r\n        require (authorised[msg.sender]);\r\n        require ((currentTime() >= PRESALE_STARTTIMESTAMP && currentTime() <= PRESALE_ENDTIMESTAMP ) || (currentTime() >= PUBLICSALE_STARTTIMESTAMP && currentTime() <= PUBLICSALE_ENDTIMESTAMP ));\r\n        require (!(hasEnded()));\r\n        require (multiSig != 0x0);\r\n        require (msg.value > 1 finney);\r\n        require(!suspended);\r\n        require(tokensForSale > tokenRaised); // check we are not over the number of tokensForSale\r\n        _;\r\n    }\r\n\r\n  /**\r\n  * @dev authorise an account to participate\r\n  */\r\n    function authoriseAccount(address whom) onlyCSorAdmin public returns(bool) {\r\n        require(whom != address(0));\r\n        require(whom != address(this));\r\n        authorised[whom] = true;\r\n        AuthoriseStatusUpdated(whom, true);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n  * @dev authorise a lot of accounts in one go\r\n  */\r\n    function authoriseManyAccounts(address[] many) onlyCSorAdmin public returns(bool) {\r\n        require(many.length > 0);  \r\n        for (uint256 i = 0; i < many.length; i++) {\r\n            require(many[i] != address(0));\r\n            require(many[i] != address(this));  \r\n            authorised[many[i]] = true;\r\n            AuthoriseStatusUpdated(many[i], true);\r\n        }\r\n        return true;            \r\n    }\r\n\r\n  /**\r\n  * @dev ban an account from participation (default)\r\n  */\r\n    function blockAccount(address whom) onlyCSorAdmin public returns(bool){\r\n        require(whom != address(0));\r\n        require(whom != address(this));\r\n        authorised[whom] = false;\r\n        AuthoriseStatusUpdated(whom, false);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n  * @dev set a new CS representative\r\n  */\r\n    function setCS(address newCS) onlyOwner public returns (bool){\r\n        require(newCS != address(0));\r\n        require(newCS != address(this));\r\n        require(newCS != owner);  \r\n        cs = newCS;\r\n        CsUpdated(newCS);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n  * @dev set a new Admin representative\r\n  */\r\n    function setAdmin(address newAdmin) onlyOwner public returns (bool) {\r\n        require(newAdmin != address(0));\r\n        require(newAdmin != address(this));\r\n        require(newAdmin != owner);  \r\n        Admin = newAdmin;\r\n        AdminUpdated(newAdmin);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n  * @dev set a new Rate BE CAREFULL: when we calculate the bonus better if we have'nt remainder \r\n  */\r\n    function setBasicRate(uint newRate) onlyAdmin public returns (bool){\r\n        require(0 < newRate && newRate < 5000);\r\n        basicRate = newRate;\r\n        return true;\r\n    }\r\n\r\n    function setMaxTokenCap(uint _newMaxTokenCap) onlyAdmin public returns (bool){\r\n        require(0 < _newMaxTokenCap && _newMaxTokenCap < tokensForSale);\r\n        maxTokenCap = _newMaxTokenCap;\r\n        return true;\r\n    }\r\n  \r\n    function isOwner(address _owner) public view returns(bool){\r\n        if (owner == _owner) {\r\n            return true;    \r\n    } else {\r\n            return false;    \r\n    } \r\n    }\r\n  \r\n    function isAdmin(address _admin) public view returns(bool){\r\n        if (Admin == _admin) {\r\n            return true;    \r\n    } else {\r\n            return false;    \r\n    } \r\n    }\r\n\r\n    function isCS(address _cs) public view returns(bool){\r\n        if (cs == _cs) {\r\n            return true;    \r\n    } else {\r\n            return false;    \r\n    } \r\n    }\r\n\r\n/**\r\n  * @dev  only Admin can send tokens manually\r\n  */\r\n    function placeTokens(address beneficiary, uint256 _tokens) onlyAdmin public returns(bool){\r\n\r\n    // *************************************************************************************************************  \r\n        require(tokenRaised.add(_tokens) <= tokensForSale); // we dont want to overmint ********************************\r\n    // *************************************************************************************************************\r\n\r\n        require(_tokens != 0);\r\n        require(!hasEnded());\r\n        if (token.balanceOf(beneficiary) == 0) {\r\n            numberOfContributors++;\r\n        }\r\n        tokenRaised = tokenRaised.add(_tokens); // so we can go slightly over\r\n        token.mint(beneficiary, _tokens);\r\n        TokenPlaced(beneficiary, _tokens);\r\n        return true;\r\n    }\r\n\r\n  // low level token purchase function\r\n    function buyTokens(address beneficiary, uint256 amount) onlyAuthorised internal returns (bool){\r\n      \r\n        rate = getCurrentRate();\r\n      // check we are in pre sale , bonus 25%\r\n        if (currentTime() <= PRESALE_ENDTIMESTAMP) {\r\n            minContribution = 50 ether;\r\n            maxContribution = 1000 ether;\r\n    // we are in publicsale bonus depends on the sold out tokens. we set the rate in the setTier\r\n    } else {\r\n            minContribution = 0.2 ether;\r\n            maxContribution = 20 ether;\r\n        }\r\n\r\n    //check minimum and maximum amount\r\n        require(msg.value >= minContribution);\r\n        require(msg.value <= maxContribution);\r\n    \r\n    // Calculate token amount to be purchased    \r\n        uint256 tokens = amount.mul(rate);\r\n   \r\n   \r\n    // *************************************************************************************************************\r\n        require(tokenRaised.add(tokens) <= tokensForSale); //if dont want to overmint ******************************\r\n    // *************************************************************************************************************\r\n        require(token.balanceOf(beneficiary) + tokens <= maxTokenCap); // limit of tokens what a buyer can buy *****\r\n    //  ************************************************************************************************************\r\n\r\n\r\n    // update state\r\n        weiRaised = weiRaised.add(amount);\r\n        if (token.balanceOf(beneficiary) == 0) {\r\n            numberOfContributors++;\r\n        }\r\n        tokenRaised = tokenRaised.add(tokens); // so we can go slightly over\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(beneficiary, amount, tokens);\r\n        multiSig.transfer(this.balance); // better in case any other ether ends up here\r\n        return true;\r\n    }\r\n\r\n  // transfer ownership of the token to the owner of the presale contract\r\n    function finishSale() public onlyOwner {\r\n        require(hasEnded());\r\n    // assign the rest of the 300 M tokens to the reserve\r\n        uint unassigned;    \r\n        if(tokensForSale > tokenRaised) {\r\n            unassigned = tokensForSale.sub(tokenRaised);\r\n            tokenRaised = tokenRaised.add(unassigned);\r\n            token.mint(multiSig,unassigned);\r\n            TokenPlaced(multiSig,unassigned);\r\n    }\r\n        SaleClosed();\r\n        token.startTrading(); \r\n        TradingStarted();\r\n    // from now everyone can trade the tokens  and the owner of the tokencontract stay the salecontract\r\n    }\r\n \r\n/**\r\n*****************************************************************************************\r\n*****************************************************************************************\r\n*    SPECIAL PART START\r\n*****************************************************************************************\r\n*****************************************************************************************\r\n  * @dev only Admin can mint once the given amount in the given time\r\n  * tokensOfTeamAndAdvisors was given by consumer\r\n  * multiSig was given by consumer\r\n*****************************************************************************************\r\n*****************************************************************************************\r\n */\r\n    function mintToTeamAndAdvisors() public onlyAdmin {\r\n        require(hasEnded());\r\n        require(adminCallMintToTeamCount[msg.sender] == 0); // count to admin only once can call MintToTeamAndAdvisors\r\n        require(1535644800 <= currentTime() && currentTime() <= 1535731200);  // Admin have 24h to call this function\r\n      //1535644800 converts to Friday August 31, 2018 00:00:00 (am) in time zone Asia/Singapore (+08)\r\n      //1535731200 converts to Saturday September 01, 2018 00:00:00 (am) in time zone Asia/Singapore (+08)\r\n        adminCallMintToTeamCount[msg.sender]++; \r\n        tokenRaised = tokenRaised.add(tokensOfTeamAndAdvisors);\r\n        token.mint(multiSig,tokensOfTeamAndAdvisors);\r\n        TokenPlaced(multiSig, tokensOfTeamAndAdvisors);\r\n    }\r\n /**\r\n*****************************************************************************************\r\n*****************************************************************************************\r\n  * @dev only Admin can mint from \"SaleClosed\" to \"Closed\" \r\n  * _tokens given by client (limit if we reach the maxTokens)\r\n  * multiSig was given by client\r\n*****************************************************************************************\r\n*****************************************************************************************\r\n */ \r\n    function afterSaleMinting(uint _tokens) public onlyAdmin {\r\n        require(hasEnded());\r\n        uint limit = maxTokens.sub(tokensOfTeamAndAdvisors); \r\n     // we dont want to mint the reserved tokens for Team and Advisors\r\n        require(tokenRaised.add(_tokens) <= limit);  \r\n        tokenRaised = tokenRaised.add(_tokens);\r\n        token.mint(multiSig,_tokens);\r\n        TokenPlaced(multiSig, _tokens);\r\n    }  \r\n/**\r\n*****************************************************************************************\r\n*****************************************************************************************\r\n  * @dev only Owner can call after the sale\r\n  * unassigned , all missing tokens will be minted\r\n  * multiSig was given by client\r\n  * finish minting and transfer ownership of token\r\n*****************************************************************************************\r\n*****************************************************************************************\r\n */\r\n    function close() public onlyOwner {\r\n        require(1535731200 <= currentTime());  // only after the Aug31\r\n        uint unassigned;\r\n        if( maxTokens > tokenRaised) {\r\n            unassigned = maxTokens.sub(tokenRaised);\r\n            tokenRaised = tokenRaised.add(unassigned);\r\n            token.mint(multiSig,unassigned);\r\n            TokenPlaced(multiSig,unassigned);\r\n            multiSig.transfer(this.balance); // just in case if we have ether in the contarct\r\n        }\r\n        token.finishMinting();\r\n        token.transferOwnership(owner);\r\n        Closed();\r\n    }\r\n/**\r\n*****************************************************************************************\r\n*****************************************************************************************\r\n  * END OF THE SPECIAL PART\r\n*****************************************************************************************\r\n*****************************************************************************************\r\n */\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n    function () public payable {\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n\r\n  // emergency if the contarct get ERC20 tokens\r\n    function emergencyERC20Drain( ERC20 oddToken, uint amount ) public onlyCSorAdmin returns(bool){\r\n        oddToken.transfer(owner, amount);\r\n        EmergencyERC20DrainWasCalled(oddToken, amount);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenaddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyERC20DrainWasCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MooToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://36507f874bdd6fd9a5e2ef9c7330993480058a7194f1b7a38ab6b2ae5e16c33c"}]}