{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n* @title ICO CONTRACT\r\n* @dev ERC-20 Token Standard Compliant\r\n* @author Fares A. Akel C. f.antonio.akel@gmail.com\r\n*/\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract token {\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    }\r\n\r\ncontract DateTimeAPI {\r\n        \r\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) constant returns (uint timestamp);\r\n\r\n}\r\n\r\ncontract FiatContract {\r\n\r\n  function USD(uint _id) constant returns (uint256);\r\n\r\n}\r\n\r\n\r\ncontract ICO {\r\n\r\n    DateTimeAPI dateTimeContract = DateTimeAPI(0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce);\r\n    FiatContract price = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591); // MAINNET ADDRESS\r\n\r\n    using SafeMath for uint256;\r\n    enum State {\r\n    //This ico have 4 states\r\n        stage1, //PreSales\r\n        stage2, //PreICo\r\n        stage3, //ICO\r\n        Successful\r\n    }\r\n    //public variables\r\n    State public state = State.stage1; //Set initial stage\r\n    uint256 public startTime = now; //block-time when it was deployed\r\n    uint256 public totalRaised; //eth in wei\r\n    uint256 public totalDistributed; //tokens\r\n    uint256 public ICOdeadline;\r\n    uint256 public completedAt;\r\n    token public tokenReward;\r\n    address public creator;\r\n    string public campaignUrl;\r\n    string public version = '1';\r\n\r\n    //events for log\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(\r\n        address _creator,\r\n        string _url,\r\n        uint256 _ICOdeadline);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n    /**\r\n    * @notice ICO constructor\r\n    * @param _campaignUrl is the ICO _url\r\n    * @param _addressOfTokenUsedAsReward is the token totalDistributed\r\n    */\r\n    function ICO ( string _campaignUrl, token _addressOfTokenUsedAsReward ) public {\r\n\r\n        creator = msg.sender;\r\n        campaignUrl = _campaignUrl;\r\n        tokenReward = _addressOfTokenUsedAsReward;\r\n        ICOdeadline = dateTimeContract.toTimestamp(2018,7,31,23,59); // Jul 31\r\n\r\n        LogFunderInitialized(\r\n            creator,\r\n            campaignUrl,\r\n            ICOdeadline);\r\n            \r\n    }\r\n\r\n    /**\r\n    * @notice contribution handler\r\n    */\r\n    function contribute() public notFinished payable {\r\n\r\n        uint256 tokenBought = 0;\r\n        uint256 usdCentInWei = price.USD(0);\r\n        uint baseCalc = usdCentInWei.div(10 ** 2); //it will give 2 decimals numbers to the result\r\n\r\n        totalRaised = totalRaised.add(msg.value);\r\n\r\n        //Rate of exchange depends on stage\r\n        if (state == State.stage1){\r\n\r\n            baseCalc = baseCalc.mul(15); //15 cents per token\r\n            tokenBought = msg.value.div(baseCalc);\r\n        \r\n        } else if (state == State.stage2){\r\n        \r\n            baseCalc = baseCalc.mul(27); //27 cents per token\r\n            tokenBought = msg.value.div(baseCalc);\r\n        \r\n        } else if (state == State.stage3){\r\n        \r\n            baseCalc = baseCalc.mul(35); //35 cents per token\r\n            tokenBought = msg.value.div(baseCalc);\r\n        \r\n        }\r\n\r\n        if(msg.value >= usdCentInWei.mul(5000000)){ // 5.000.000 cents = 50.000,00 $\r\n\r\n            tokenBought = tokenBought.mul(2); // +100%\r\n\r\n        } else if(msg.value >= usdCentInWei.mul(2000000)){ // 2.000.000 cents = 20.000,00 $\r\n\r\n            tokenBought = tokenBought.mul(18);\r\n            tokenBought = tokenBought.div(10); // +80%            \r\n\r\n        } else if(msg.value >= usdCentInWei.mul(1000000)){ // 1.000.000 cents = 10.000,00 $\r\n\r\n            tokenBought = tokenBought.mul(16);\r\n            tokenBought = tokenBought.div(10); // +60%            \r\n\r\n        } else if(msg.value >= usdCentInWei.mul(500000)){ // 500.000 cents = 5.000,00 $\r\n\r\n            tokenBought = tokenBought.mul(14);\r\n            tokenBought = tokenBought.div(10); // +40%            \r\n\r\n        } else if(msg.value >= usdCentInWei.mul(100000)){ // 100.000 cents = 1.000,00 $\r\n\r\n            tokenBought = tokenBought.mul(12);\r\n            tokenBought = tokenBought.div(10); // +20%            \r\n\r\n        }\r\n\r\n        totalDistributed = totalDistributed.add(tokenBought);\r\n        \r\n        tokenReward.transfer(msg.sender, tokenBought);\r\n\r\n        LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        LogContributorsPayout(msg.sender, tokenBought);\r\n\r\n        checkIfFundingCompleteOrExpired();\r\n    }\r\n\r\n    /**\r\n    * @notice check status\r\n    */\r\n    function checkIfFundingCompleteOrExpired() public {\r\n\r\n        if(state == State.stage1 && now > dateTimeContract.toTimestamp(2018,5,31,23,59)){ // May 31\r\n\r\n            state = State.stage2;\r\n\r\n        } else if(state == State.stage2 && now > dateTimeContract.toTimestamp(2018,6,30,23,59)){ // Jun 30\r\n\r\n            state = State.stage3;\r\n            \r\n        } else if(state == State.stage3 && now > ICOdeadline && state!=State.Successful){\r\n\r\n            state = State.Successful; //ico becomes Successful\r\n            completedAt = now; //ICO is complete\r\n\r\n            LogFundingSuccessful(totalRaised); //we log the finish\r\n            finished(); //and execute closure\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice closure handler\r\n    */\r\n    function finished() public { //When finished eth are transfered to creator\r\n\r\n        require(state == State.Successful);\r\n        uint256 remanent = tokenReward.balanceOf(this);\r\n\r\n        require(creator.send(this.balance));\r\n        tokenReward.transfer(creator,remanent);\r\n\r\n        LogBeneficiaryPaid(creator);\r\n        LogContributorsPayout(creator, remanent);\r\n\r\n    }\r\n\r\n    /*\r\n    * @dev direct payments handle\r\n    */\r\n\r\n    function () public payable {\r\n        \r\n        contribute();\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOdeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaignUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_campaignUrl\",\"type\":\"string\"},{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_ICOdeadline\",\"type\":\"uint256\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000001bafa500bd219a2afb8f2d0286cc9480c7bd95c2000000000000000000000000000000000000000000000000000000000000000f7777772e7067636f696e2e746563680000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://18a8eb0aea197d4f81ed9fea6997bc6094230162428d54ab6dad25a492645188"}]}