{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ncontract fortunes {\r\n    \r\n    string public standard = 'Fortunes';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    \r\n    address owner;\r\n    uint public max_fortunes;\r\n    uint public unopened_bid;\r\n    bytes32[] public ur_luck;                      // store lucky say\r\n    \r\n    struct fortune {\r\n        address original_owner;                     // one who opened\r\n        address original_minter;                    // one who marked\r\n        address current_owner;\r\n        uint32 number;\r\n        uint8 level;\r\n        bytes32[144] img;\r\n        bytes32 str_luck;                           // 32 char max luck\r\n        bytes32 str_name;                           // 32 char max name\r\n        bool has_img;   \r\n        bool opened;                                // opened has set the lvl and luck\r\n        bool forsale;                       \r\n        uint current_bid;\r\n        address current_bidder;\r\n        uint bid_cnt;                               // times bid on this sale\r\n        uint auction_end;                           // time to end the auction\r\n    }\r\n    \r\n    fortune[] public fortune_arr;                   // fortunes cannot be deleted\r\n    mapping(uint8 => uint8) public lvl_count;       // cnt each lvl fortunes\r\n    mapping(address => uint) public pending_pay;    // pending withdrawals\r\n    \r\n    uint tax;\r\n\tuint public fortune_limitbreak;\t\t\t\t    // current limitbreak ammount\r\n\tuint public fortune_break_current;\t\t\t\t// current ammount of ether for limitbreak\r\n    \r\n    \r\n    modifier only_owner() \r\n        { require(msg.sender == owner, \"only owner can call.\"); _; }\r\n    modifier only_currowner(uint _idx) \r\n        { require(fortune_arr[_idx].current_owner == msg.sender, \"you're not the owner\"); _; }\r\n    modifier idx_inrange(uint _idx)\r\n        { require(_idx >= 0 && _idx < fortune_arr.length, \"idx out of range\"); _; }\r\n        \r\n        \r\n    constructor() public {\r\n        owner = (msg.sender);\r\n        max_fortunes = 5000;\r\n        unopened_bid = 0.014 ether;\r\n        tax = 50; // N/25 = 4% \r\n\t\tfortune_limitbreak = 2 ether;\r\n        \r\n        name = \"FORTUNES\";\r\n        symbol = \"4TN\";\r\n        decimals = 0;\r\n        \r\n        // initial luck\r\n        ur_luck.push(\"The WORST Possible\");\r\n        ur_luck.push(\"Terrible\");\r\n        ur_luck.push(\"Bad\");\r\n        ur_luck.push(\"Exactly Average\");\r\n        ur_luck.push(\"Good\");\r\n        ur_luck.push(\"Excellent\");\r\n        ur_luck.push(\"The BEST Possible\");\r\n    }\r\n    \r\n    function is_owned(uint _idx) public view idx_inrange(_idx) returns(bool) \r\n        { return msg.sender == fortune_arr[_idx].current_owner; }\r\n\t\r\n    function ret_len() public view returns(uint) { return fortune_arr.length; }\r\n    \r\n    function ret_luklen () public view returns(uint) { return ur_luck.length; }\r\n    \r\n\tfunction ret_img(uint _idx) public idx_inrange(_idx) view returns(bytes32[144]) {\r\n\t\treturn fortune_arr[_idx].img;\r\n\t}\r\n    \r\n    function fortune_new() public payable {\r\n\t\trequire(msg.value >= unopened_bid || \r\n\t\t        msg.sender == owner || \r\n\t\t        fortune_arr.length <= 500, \r\n\t\t        \"ammount below unopened bid\");\r\n        require(fortune_arr.length <= max_fortunes,\"fortunes max reached\");\r\n        fortune memory x;\r\n        x.current_owner = msg.sender;\r\n\t\tx.number = uint32(fortune_arr.length);\r\n\t\tunopened_bid += unopened_bid/1000; // 0.01% increase\r\n        fortune_arr.push(x);\r\n        pending_pay[owner]+= msg.value;\r\n        emit event_new(fortune_arr.length-1);\r\n    }\r\n    \r\n    function fortune_open(uint _idx) public idx_inrange(_idx) only_currowner(_idx) {\r\n        require(!fortune_arr[_idx].opened, \"fortune is already open\");\r\n        require(!fortune_arr[_idx].forsale, \"fortune is selling\");\r\n        fortune_arr[_idx].original_owner = msg.sender;\r\n        uint _ran = arand(fortune_arr[_idx].current_owner, now)%1000;\r\n        uint8 clvl = 1;\r\n        if (_ran <= 810) clvl = 2;\r\n        if (_ran <= 648) clvl = 3;\r\n        if (_ran <= 504) clvl = 4;\r\n        if (_ran <= 378) clvl = 5;\r\n        if (_ran <= 270) clvl = 6;\r\n        if (_ran <= 180) clvl = 7;\r\n        if (_ran <= 108) clvl = 8;\r\n        if (_ran <= 54)  clvl = 9;\r\n        if (_ran <= 18)  clvl = 10;\r\n\r\n        fortune_arr[_idx].level = clvl;\r\n        fortune_arr[_idx].opened = true;\r\n        fortune_arr[_idx].str_luck = \r\n            ur_luck[arand(fortune_arr[_idx].current_owner, now)% ur_luck.length];\r\n        \r\n        // first fortune in honor of mai waifu\r\n        if(_idx == 0) {\r\n            fortune_arr[_idx].level = 0;\r\n            fortune_arr[_idx].str_luck = ur_luck[6];\r\n            lvl_count[0] += 1;\r\n        } else lvl_count[clvl] += 1;    \r\n        emit event_open(_idx);\r\n    }\r\n    \r\n    // mint fortune\r\n    function fortune_setimgnme(uint _idx, bytes32[144] _imgarr, bytes32 _nme) \r\n        public idx_inrange(_idx) only_currowner(_idx) {\r\n        require(fortune_arr[_idx].opened, \"fortune has to be opened\");\r\n        require(!fortune_arr[_idx].has_img, \"image cant be reset\");\r\n        require(!fortune_arr[_idx].forsale, \"fortune is selling\");\r\n        fortune_arr[_idx].original_minter = fortune_arr[_idx].current_owner;\r\n        for(uint i = 0; i < 144; i++)\r\n            fortune_arr[_idx].img[i] = _imgarr[i];\r\n        fortune_arr[_idx].str_name = _nme;\r\n        emit event_mint(_idx);\r\n        fortune_arr[_idx].has_img = true;\r\n    }\r\n    \r\n    // start auction\r\n    function fortune_sell(uint _idx, uint basebid, uint endt) \r\n        public idx_inrange(_idx) only_currowner(_idx) {\r\n        require(_idx > 0, \"I'll always be here with you.\");\r\n        require(!fortune_arr[_idx].forsale, \"already selling\");\r\n        require(endt <= 7 days, \"auction time too long\");\r\n        fortune_arr[_idx].current_bid = basebid;\r\n        fortune_arr[_idx].auction_end = now + endt;\r\n        fortune_arr[_idx].forsale = true;\r\n        emit event_sale(_idx);\r\n    }\r\n    \r\n    // bid auction\r\n    function fortune_bid(uint _idx) public payable idx_inrange(_idx) {\r\n        require(fortune_arr[_idx].forsale, \"fortune not for sale\");\r\n        require(now < fortune_arr[_idx].auction_end, \"auction ended\");\r\n        require(msg.value > fortune_arr[_idx].current_bid, \r\n            \"new bid has to be higher than current\");\r\n\r\n        // return the previous bid        \r\n        if(fortune_arr[_idx].bid_cnt != 0) \r\n            pending_pay[fortune_arr[_idx].current_bidder] += \r\n                fortune_arr[_idx].current_bid;\r\n        \r\n        fortune_arr[_idx].current_bid = msg.value;\r\n        fortune_arr[_idx].current_bidder = msg.sender;\r\n        fortune_arr[_idx].bid_cnt += 1;\r\n        emit event_bids(_idx);\r\n    }\r\n    \r\n    // end auction\r\n    function fortune_endauction(uint _idx) public idx_inrange(_idx) {\r\n        require(now >= fortune_arr[_idx].auction_end,\"auction is still going\");\r\n        require(fortune_arr[_idx].forsale, \"fortune not for sale\");\r\n        \r\n        // sale\r\n        if(fortune_arr[_idx].bid_cnt > 0) {\r\n    \t\tuint ntax = fortune_arr[_idx].current_bid/tax;              // 2%\r\n    \t\tuint otax = fortune_arr[_idx].current_bid/tax;               // 2% \r\n    \t\tuint ftax = ntax;\r\n\r\n            pending_pay[owner] += ntax;\r\n    \t\tif(fortune_arr[_idx].opened) { \r\n    \t\t    ftax+= otax; \r\n    \t\t    pending_pay[fortune_arr[_idx].original_owner] += otax; \r\n    \t\t}                  \r\n    \t\tif(fortune_arr[_idx].has_img) { \r\n    \t\t    ftax+= otax; \r\n    \t\t    pending_pay[fortune_arr[_idx].original_minter] += otax; \r\n    \t\t}             \r\n    \t\tpending_pay[fortune_arr[_idx].current_owner] += \r\n                fortune_arr[_idx].current_bid-ftax; \r\n                \r\n            fortune_arr[_idx].current_owner = \r\n                fortune_arr[_idx].current_bidder;\r\n            emit event_sold(_idx, fortune_arr[_idx].current_owner);\r\n        }\r\n        \r\n        // reset bid\r\n        // current bid doesnt reset to save last sold price\r\n        fortune_arr[_idx].forsale = false;\r\n        fortune_arr[_idx].current_bidder = 0;\r\n        fortune_arr[_idx].bid_cnt = 0;\r\n        fortune_arr[_idx].auction_end = 0;\r\n    }\r\n    \r\n    \r\n    function withdraw() public {\r\n        require(pending_pay[msg.sender]>0, \"insufficient funds\");\r\n        uint _pay = pending_pay[msg.sender];\r\n        pending_pay[msg.sender] = 0;\r\n        msg.sender.transfer(_pay);\r\n        emit event_withdraw(msg.sender, _pay);\r\n    }\r\n    \r\n    function add_luck(bytes32 _nmsg) public payable {\r\n        require(msg.value >= unopened_bid, \r\n            \"adding a fortune label costs the unopened_bid eth\");\r\n        ur_luck.push(_nmsg);\r\n        pending_pay[owner] += msg.value;\r\n        emit event_addluck(msg.sender);\r\n    } \r\n    \r\n    function limitbreak_contrib() public payable {\r\n\t\tfortune_break_current += msg.value;\r\n\t\temit event_limitbreak_contrib(msg.sender, msg.value);\r\n\t}\r\n\t\r\n    function limitbreak_RELEASE() public {\r\n\t\trequire(fortune_break_current >= fortune_limitbreak, \r\n\t\t\t\"limit breaking takes a few hits more\");\r\n\t\trequire(fortune_arr.length >= max_fortunes, \"limit not reached yet\");\r\n        max_fortunes += max_fortunes + 500;\r\n\t\tpending_pay[owner]+= fortune_break_current;\r\n\t\tfortune_break_current = 0;\r\n\t\tif(fortune_limitbreak >= 128 ether) fortune_limitbreak = 32 ether;\r\n\t\telse fortune_limitbreak *= 2;\r\n\t\temit event_limitbreak(fortune_limitbreak);\r\n    }\r\n    \r\n    \r\n    function arand(address _addr, uint seed) internal view returns(uint) {\r\n        return uint\r\n            (keccak256\r\n                (abi.encodePacked(blockhash(block.number-1), seed, uint(_addr))));\r\n    }\r\n    \r\n    // erc20 semi \r\n    function totalSupply() public constant returns (uint) { return max_fortunes; }\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance)\r\n        { return pending_pay[tokenOwner]; }\r\n        \r\n    function giveTo(uint _idx, address _addr) public idx_inrange(_idx) only_currowner(_idx) {\r\n        fortune_arr[_idx].current_owner = _addr;\r\n    }\r\n    \r\n    \r\n    // events\r\n    event event_new(uint _idx);                                     //[x]\r\n    event event_open(uint _idx);                                    //[x]\r\n    event event_mint(uint _idx);                                    //[x]\r\n    event event_sale(uint _idx);                                    //[x]\r\n    event event_bids(uint _idx);                                    //[x]\r\n    event event_sold(uint _idx, address _newowner);                 //[x]\r\n    event event_addluck(address _addr);                             //[x]\r\n    event event_limitbreak(uint newlimit);                          //[x]\r\n    event event_limitbreak_contrib(address _addr, uint _ammount);   //[x]\r\n    event event_withdraw(address _addr, uint _ammount);             //[x]\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"fortune_new\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nmsg\",\"type\":\"bytes32\"}],\"name\":\"add_luck\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fortune_arr\",\"outputs\":[{\"name\":\"original_owner\",\"type\":\"address\"},{\"name\":\"original_minter\",\"type\":\"address\"},{\"name\":\"current_owner\",\"type\":\"address\"},{\"name\":\"number\",\"type\":\"uint32\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"str_luck\",\"type\":\"bytes32\"},{\"name\":\"str_name\",\"type\":\"bytes32\"},{\"name\":\"has_img\",\"type\":\"bool\"},{\"name\":\"opened\",\"type\":\"bool\"},{\"name\":\"forsale\",\"type\":\"bool\"},{\"name\":\"current_bid\",\"type\":\"uint256\"},{\"name\":\"current_bidder\",\"type\":\"address\"},{\"name\":\"bid_cnt\",\"type\":\"uint256\"},{\"name\":\"auction_end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"limitbreak_RELEASE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"basebid\",\"type\":\"uint256\"},{\"name\":\"endt\",\"type\":\"uint256\"}],\"name\":\"fortune_sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"giveTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"fortune_open\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"is_owned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"fortune_endauction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max_fortunes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"fortune_bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unopened_bid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ur_luck\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fortune_limitbreak\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lvl_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ret_luklen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"limitbreak_contrib\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ret_len\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fortune_break_current\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_imgarr\",\"type\":\"bytes32[144]\"},{\"name\":\"_nme\",\"type\":\"bytes32\"}],\"name\":\"fortune_setimgnme\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"ret_img\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[144]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pending_pay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"event_new\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"event_open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"event_mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"event_sale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"event_bids\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_idx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newowner\",\"type\":\"address\"}],\"name\":\"event_sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"event_addluck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newlimit\",\"type\":\"uint256\"}],\"name\":\"event_limitbreak\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ammount\",\"type\":\"uint256\"}],\"name\":\"event_limitbreak_contrib\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ammount\",\"type\":\"uint256\"}],\"name\":\"event_withdraw\",\"type\":\"event\"}]","ContractName":"fortunes","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3a15908403ed02d5310b2da7466e370363954b24448c3110f7f193d2f90a161b"}]}