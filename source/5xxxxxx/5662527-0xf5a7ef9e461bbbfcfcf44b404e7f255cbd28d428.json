{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts-raw/CryptoSpin.sol\r\n\r\n//   ____                  _          ____        _\r\n//  / ___|_ __ _   _ _ __ | |_ ___   / ___| _ __ (_)_ __\r\n// | |   | '__| | | | '_ \\| __/ _ \\  \\___ \\| '_ \\| | '_ \\\r\n// | |___| |  | |_| | |_) | || (_) |  ___) | |_) | | | | |\r\n//  \\____|_|   \\__, | .__/ \\__\\___/  |____/| .__/|_|_| |_|\r\n//             |___/|_|                    |_|\r\n\r\n// Crypto Spin - Ethereum Slot Machine with Uncompromised RTP\r\n// Copyright 2018 www.cryptospin.co\r\n// In association with www.budapestgame.com\r\n\r\npragma solidity ^0.4.18;\r\n\r\n// File: contracts-raw/Ownable.sol\r\n\r\ncontract Ownable {\r\n        address public        owner;\r\n\r\n        event OwnershipTransferred (address indexed prevOwner, address indexed newOwner);\r\n\r\n        constructor () public {\r\n                owner       = msg.sender;\r\n        }\r\n\r\n        modifier onlyOwner () {\r\n                require (msg.sender == owner);\r\n                _;\r\n        }\r\n\r\n        function transferOwnership (address newOwner) public onlyOwner {\r\n              require (newOwner != address (0));\r\n\r\n              emit OwnershipTransferred (owner, newOwner);\r\n              owner     = newOwner;\r\n        }\r\n}\r\n\r\n// File: contracts-raw/Pausable.sol\r\n\r\ncontract Pausable is Ownable {\r\n        event Pause ();\r\n        event Unpause ();\r\n\r\n        bool public paused        = false;\r\n\r\n        modifier whenNotPaused () {\r\n                require(!paused);\r\n                _;\r\n        }\r\n\r\n        modifier whenPaused () {\r\n                require (paused);\r\n                _;\r\n        }\r\n\r\n        function pause () onlyOwner whenNotPaused public {\r\n                paused  = true;\r\n                emit Pause ();\r\n        }\r\n\r\n        function unpause () onlyOwner whenPaused public {\r\n                paused = false;\r\n                emit Unpause ();\r\n        }\r\n}\r\n\r\n// File: contracts-raw/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n        function add (uint256 a, uint256 b) internal pure returns (uint256) {\r\n              uint256   c = a + b;\r\n              assert (c >= a);\r\n              return c;\r\n        }\r\n\r\n        function sub (uint256 a, uint256 b) internal pure returns (uint256) {\r\n              assert (b <= a);\r\n              return a - b;\r\n        }\r\n\r\n        function mul (uint256 a, uint256 b) internal pure returns (uint256) {\r\n                if (a == 0) {\r\n                        return 0;\r\n                }\r\n                uint256 c = a * b;\r\n                assert (c/a == b);\r\n                return c;\r\n        }\r\n\r\n        // Solidty automatically throws\r\n        // function div (uint256 a, uint256 b) internal pure returns (uint256) {\r\n        //       // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        //       uint256   c = a/b;\r\n        //       // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        //       return c;\r\n        // }\r\n}\r\n\r\n// File: contracts-raw/CryptoSpin.sol\r\n\r\n//   ____                  _          ____        _\r\n//  / ___|_ __ _   _ _ __ | |_ ___   / ___| _ __ (_)_ __\r\n// | |   | '__| | | | '_ \\| __/ _ \\  \\___ \\| '_ \\| | '_ \\\r\n// | |___| |  | |_| | |_) | || (_) |  ___) | |_) | | | | |\r\n//  \\____|_|   \\__, | .__/ \\__\\___/  |____/| .__/|_|_| |_|\r\n//             |___/|_|                    |_|\r\n\r\n// Crypto Spin - Ethereum Slot Machine with Uncompromised RTP\r\n// Copyright 2018 www.cryptospin.co\r\n// In association with www.budapestgame.com\r\n\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\ncontract RSPTokenInterface {\r\n        function version () public pure returns (uint8);\r\n\r\n        function buyTokens (address referral) public payable;\r\n        function sellTokens (uint256 amount) public;\r\n\r\n        function transfer (address to, uint256 amount) public returns (bool);\r\n\r\n        // function approve (address spender, uint256 amount) public returns (bool);\r\n        // function transferFrom (address from, address to, uint256 amount) public returns (bool);\r\n}\r\n\r\n\r\ncontract CryptoSpin is Pausable {\r\n        using SafeMath for uint256;\r\n\r\n        uint8 public    version             = 2;\r\n\r\n        RSPTokenInterface public        rspToken;\r\n\r\n        function _setRspTokenAddress (address addr) internal {\r\n                RSPTokenInterface     candidate     = RSPTokenInterface (addr);\r\n                require (candidate.version () >= 7);\r\n                rspToken        = candidate;\r\n        }\r\n\r\n        function setRspTokenAddress (address addr) public onlyOwner {\r\n                _setRspTokenAddress (addr);\r\n        }\r\n\r\n        // Constructor is not called multiple times, fortunately\r\n        // function CryptoSpin (address addr) public {\r\n        constructor (address addr) public {\r\n                // Onwer should be set up and become msg.sender\r\n                // During test, mint owner some amount\r\n                // During deployment, onwer himself has to buy tokens to be fair\r\n                // _mint (msg.sender, initialAmount);\r\n\r\n                if (addr != address(0)) {\r\n                        _setRspTokenAddress (addr);\r\n                }\r\n        }\r\n\r\n        event SlotToppedUp (address indexed gamer, uint256 nTokens);\r\n        event SlotToppedDown (address indexed gamer, uint256 nTokens);\r\n\r\n        // mapping (address => uint256) public         weisPaid;\r\n        mapping (address => uint256) public         nTokensCredited;\r\n        mapping (address => uint256) public         nTokensWithdrawn;\r\n\r\n        // Convenience\r\n        function playerInfo (address player) public view returns (uint256, uint256) {\r\n\r\n                return (\r\n                    nTokensCredited[player],\r\n                    nTokensWithdrawn[player]\r\n                );\r\n        }\r\n\r\n        // Escrew and start game\r\n        function _markCredit (address player, uint256 nTokens) internal {\r\n                // Overflow check (unnecessarily)\r\n                nTokensCredited[player]     = nTokensCredited[player].add (nTokens);\r\n                emit SlotToppedUp (player, nTokens);\r\n        }\r\n\r\n        function _markWithdraw (address player, uint256 nTokens) internal {\r\n                // Overflow check (unnecessarily)\r\n                nTokensWithdrawn[player]    = nTokensWithdrawn[player].add (nTokens);\r\n                emit SlotToppedDown (player, nTokens);\r\n        }\r\n\r\n        function buyAndTopup (address referral) whenNotPaused public payable {\r\n                // The contract holds the token until refunding\r\n                rspToken.buyTokens.value (msg.value) (referral);\r\n                uint256     nTokens     = msg.value.mul (8000);\r\n\r\n                _markCredit (msg.sender, nTokens);\r\n        }\r\n\r\n        function topdownAndCashout (address player, uint256 nTokens) onlyOwner public {\r\n                uint256     nWeis       = nTokens/8000;\r\n                uint256     nRspTokens  = nWeis.mul (5000);\r\n\r\n                rspToken.sellTokens (nRspTokens);\r\n\r\n                _markWithdraw (player, nTokens);\r\n                player.transfer (nWeis);\r\n        }\r\n\r\n        // EndGame\r\n        // function transferTokensTo (address to, uint256 nTokens) onlyOwner public {\r\n        //         rspToken.transfer (to, nTokens);\r\n        // }\r\n\r\n        function markCredit (address player, uint256 nTokens) onlyOwner public {\r\n                _markCredit (player, nTokens);\r\n        }\r\n\r\n        function () public payable {}\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setRspTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"playerInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rspToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nTokensCredited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buyAndTopup\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"nTokens\",\"type\":\"uint256\"}],\"name\":\"topdownAndCashout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nTokensWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"nTokens\",\"type\":\"uint256\"}],\"name\":\"markCredit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gamer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nTokens\",\"type\":\"uint256\"}],\"name\":\"SlotToppedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gamer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nTokens\",\"type\":\"uint256\"}],\"name\":\"SlotToppedDown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptoSpin","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"0000000000000000000000008008292c480b1d23a4203d94468cc899759bc70e","Library":"","SwarmSource":"bzzr://fdee4244d5a997488051cfc52f6ef7d993d1958068683bd50f637775b2a9af33"}]}