{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\nlibrary SafeMath {\r\n    /* Internals */\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a + b;\r\n        assert( c >= a );\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a - b;\r\n        assert( c <= a );\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a * b;\r\n        assert( c == 0 || c / a == b );\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a / b;\r\n    }\r\n    function pow(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a ** b;\r\n        assert( c % a == 0 );\r\n        return a ** b;\r\n    }\r\n}\r\ncontract Token {\r\n    /* Externals */\r\n    function transfer(address _to, uint256 _amount) external returns (bool _success) {}\r\n    function bulkTransfer(address[] _to, uint256[] _amount) external returns (bool _success) {}\r\n    /* Constants */\r\n    function balanceOf(address _owner) public view returns (uint256 _balance) {}\r\n}\r\ncontract MultiOwnerWallet {\r\n    /* Declarations */\r\n    using SafeMath for uint256;\r\n    /* Structures */\r\n    struct action_s {\r\n        address origin;\r\n        uint256 voteCounter;\r\n        uint256 uid;\r\n        mapping(address => uint256) voters;\r\n    }\r\n    /* Variables */\r\n    mapping(address => bool) public owners;\r\n    mapping(bytes32 => action_s) public actions;\r\n    uint256 public actionVotedRate;\r\n    uint256 public ownerCounter;\r\n    uint256 public voteUID;\r\n    Token public token;\r\n    /* Constructor */\r\n    constructor(address _tokenAddress, uint256 _actionVotedRate, address[] _owners) public {\r\n        uint256 i;\r\n        token = Token(_tokenAddress);\r\n        require( _actionVotedRate <= 100 );\r\n        actionVotedRate = _actionVotedRate;\r\n        for ( i=0 ; i<_owners.length ; i++ ) {\r\n            owners[_owners[i]] = true;\r\n        }\r\n        ownerCounter = _owners.length;\r\n    }\r\n    /* Fallback */\r\n    function () public {\r\n        revert();\r\n    }\r\n    /* Externals */\r\n    function transfer(address _to, uint256 _amount) external returns (bool _success) {\r\n        bytes32 _hash;\r\n        bool    _subResult;\r\n        _hash = keccak256(address(token), 'transfer', _to, _amount);\r\n        if ( actions[_hash].origin == 0x00 ) {\r\n            emit newTransferAction(_hash, _to, _amount, msg.sender);\r\n        }\r\n        if ( doVote(_hash) ) {\r\n            _subResult = token.transfer(_to, _amount);\r\n            require( _subResult );\r\n        }\r\n        return true;\r\n    }\r\n    function bulkTransfer(address[] _to, uint256[] _amount) external returns (bool _success) {\r\n        bytes32 _hash;\r\n        bool    _subResult;\r\n        _hash = keccak256(address(token), 'bulkTransfer', _to, _amount);\r\n        if ( actions[_hash].origin == 0x00 ) {\r\n            emit newBulkTransferAction(_hash, _to, _amount, msg.sender);\r\n        }\r\n        if ( doVote(_hash) ) {\r\n            _subResult = token.bulkTransfer(_to, _amount);\r\n            require( _subResult );\r\n        }\r\n        return true;\r\n    }\r\n    function changeTokenAddress(address _tokenAddress) external returns (bool _success) {\r\n        bytes32 _hash;\r\n        _hash = keccak256(address(token), 'changeTokenAddress', _tokenAddress);\r\n        if ( actions[_hash].origin == 0x00 ) {\r\n            emit newChangeTokenAddressAction(_hash, _tokenAddress, msg.sender);\r\n        }\r\n        if ( doVote(_hash) ) {\r\n            token = Token(_tokenAddress);\r\n        }\r\n        return true;\r\n    }\r\n    function addNewOwner(address _owner) external returns (bool _success) {\r\n        bytes32 _hash;\r\n        require( ! owners[_owner] );\r\n        _hash = keccak256(address(token), 'addNewOwner', _owner);\r\n        if ( actions[_hash].origin == 0x00 ) {\r\n            emit newAddNewOwnerAction(_hash, _owner, msg.sender);\r\n        }\r\n        if ( doVote(_hash) ) {\r\n            ownerCounter = ownerCounter.add(1);\r\n            owners[_owner] = true;\r\n        }\r\n        return true;\r\n    }\r\n    function delOwner(address _owner) external returns (bool _success) {\r\n        bytes32 _hash;\r\n        require( owners[_owner] );\r\n        _hash = keccak256(address(token), 'delOwner', _owner);\r\n        if ( actions[_hash].origin == 0x00 ) {\r\n            emit newDelOwnerAction(_hash, _owner, msg.sender);\r\n        }\r\n        if ( doVote(_hash) ) {\r\n            ownerCounter = ownerCounter.sub(1);\r\n            owners[_owner] = false;\r\n        }\r\n        return true;\r\n    }\r\n    /* Constants */\r\n    function selfBalance() public view returns (uint256 _balance) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n    function balanceOf(address _owner) public view returns (uint256 _balance) {\r\n        return token.balanceOf(_owner);\r\n    }\r\n    function hasVoted(bytes32 _hash, address _owner) public view returns (bool _voted) {\r\n        return actions[_hash].origin != 0x00 && actions[_hash].voters[_owner] == actions[_hash].uid;\r\n    }\r\n    /* Internals */\r\n    function doVote(bytes32 _hash) internal returns (bool _voted) {\r\n        require( owners[msg.sender] );\r\n        if ( actions[_hash].origin == 0x00 ) {\r\n            voteUID = voteUID.add(1);\r\n            actions[_hash].origin = msg.sender;\r\n            actions[_hash].voteCounter = 1;\r\n            actions[_hash].uid = voteUID;\r\n        } else if ( ( actions[_hash].voters[msg.sender] != actions[_hash].uid ) && actions[_hash].origin != msg.sender ) {\r\n            actions[_hash].voters[msg.sender] = actions[_hash].uid;\r\n            actions[_hash].voteCounter = actions[_hash].voteCounter.add(1);\r\n            emit vote(_hash, msg.sender);\r\n        }\r\n        if ( actions[_hash].voteCounter.mul(100).div(ownerCounter) >= actionVotedRate ) {\r\n            _voted = true;\r\n            emit votedAction(_hash);\r\n            delete actions[_hash];\r\n        }\r\n    }\r\n    /* Events */\r\n    event newTransferAction(bytes32 _hash, address _to, uint256 _amount, address _origin);\r\n    event newBulkTransferAction(bytes32 _hash, address[] _to, uint256[] _amount, address _origin);\r\n    event newChangeTokenAddressAction(bytes32 _hash, address _tokenAddress, address _origin);\r\n    event newAddNewOwnerAction(bytes32 _hash, address _owner, address _origin);\r\n    event newDelOwnerAction(bytes32 _hash, address _owner, address _origin);\r\n    event vote(bytes32 _hash, address _voter);\r\n    event votedAction(bytes32 _hash);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteUID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addNewOwner\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"delOwner\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actionVotedRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"name\":\"_voted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfBalance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"actions\",\"outputs\":[{\"name\":\"origin\",\"type\":\"address\"},{\"name\":\"voteCounter\",\"type\":\"uint256\"},{\"name\":\"uid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_actionVotedRate\",\"type\":\"uint256\"},{\"name\":\"_owners\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_origin\",\"type\":\"address\"}],\"name\":\"newTransferAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"_origin\",\"type\":\"address\"}],\"name\":\"newBulkTransferAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_origin\",\"type\":\"address\"}],\"name\":\"newChangeTokenAddressAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_origin\",\"type\":\"address\"}],\"name\":\"newAddNewOwnerAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_origin\",\"type\":\"address\"}],\"name\":\"newDelOwnerAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"votedAction\",\"type\":\"event\"}]","ContractName":"MultiOwnerWallet","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f784682c82526e245f50975190ef0fff4e4fc07700000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000cf3ce62606edcd072418a8c9fbed14e7c199b60000000000000000000000000096f2d1bd11dd6dc4ba6cb61c66c94548e5661500000000000000000000000000f9547f9e398ff4ff6f528910ddc4c270f706cc","Library":"","SwarmSource":"bzzr://fbdcde2e5365a1933bb698b8727002524ae34bab965df76d6dffdcfcb1e13778"}]}