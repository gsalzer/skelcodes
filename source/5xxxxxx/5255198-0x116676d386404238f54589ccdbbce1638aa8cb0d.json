{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n \r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract AGASCrowdsale is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    event Print(string _message, address _msgSender);\r\n\r\n    address public multisig = 0x0A9465529653815E61E5187517392d9C10d0f9dd; \r\n    address public addressOfERC20Tocken = 0xa7A1F840CF741B96F5A80D5856ae02F0f474251f;\r\n    ERC20 public token;\r\n    \r\n    \r\n    uint public startPreICO = 1521435600; //Mon, 19 Mar 2018 05:00:00 GMT \r\n    uint public startICO = 1523854800; //Mon, 16 Apr 2018 05:00:00 GMT\r\n    uint public startProICO = 1526274000; //Mon, 14 May 2018 05:00:00 GMT\r\n    \r\n    uint public tokenDec = 1000000000000000000; //18\r\n    \r\n    uint public PreICOHardcap = 2000000*tokenDec;\r\n    uint public ICOHardcap = 6000000*tokenDec;\r\n    uint public ProICOHardcap = 8000000*tokenDec;\r\n    uint public tokensSold = 0;\r\n    \r\n    uint public bonusAmount = 200000*tokenDec;\r\n    uint public givenBonus = 0;\r\n    \r\n    uint public PreICOPrice = 1000000000000000; // 0.001 ETH \r\n    uint public ICOPrice = 2000000000000000; // 0.002 ETH\r\n    uint public ProICOPrice = 4000000000000000; // 0.004 ETH\r\n    \r\n    \r\n    \r\n    function AGASCrowdsale(){\r\n        owner = msg.sender;\r\n        token = ERC20(addressOfERC20Tocken);\r\n    }    \r\n    \r\n    \r\n   \r\n    function tokenBalance() constant returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    } \r\n    \r\n   \r\n    function setAddressOfERC20Tocken(address _addressOfERC20Tocken) onlyOwner {\r\n        addressOfERC20Tocken =  _addressOfERC20Tocken;\r\n        token = ERC20(addressOfERC20Tocken);\r\n        \r\n    }\r\n    \r\n\r\n    function transferToken(address _to, uint _value) onlyOwner returns (bool) {\r\n        return token.transfer(_to,  _value);\r\n    }\r\n    \r\n    function() payable {\r\n        doPurchase();\r\n    }\r\n\r\n\r\n\r\n    function doPurchase() payable {\r\n       \r\n        require(now >= startPreICO);\r\n        \r\n       \r\n        require(msg.value >= 100000000000000); \r\n    \r\n        uint sum = msg.value;\r\n        uint rest = 0;\r\n        uint tokensAmount = 0;\r\n        \r\n        \r\n      \r\n        if(now >= startPreICO && now < startICO){\r\n           \r\n            require(PreICOHardcap > tokensSold);\r\n            \r\n           \r\n            tokensAmount = sum.mul(tokenDec).div(PreICOPrice);\r\n            \r\n            \r\n            if(tokensAmount.add(tokensSold) > PreICOHardcap) {\r\n              \r\n                tokensAmount = PreICOHardcap.sub(tokensSold);\r\n               \r\n                rest = sum.sub(tokensAmount.mul(PreICOPrice).div(tokenDec));\r\n            }\r\n                \r\n          \r\n        } else if(now >= startICO && now < startProICO){\r\n            \r\n            require(ICOHardcap > tokensSold);\r\n            \r\n            \r\n            tokensAmount = sum.mul(tokenDec).div(ICOPrice);\r\n            \r\n             \r\n            if(tokensAmount.add(tokensSold) > ICOHardcap) {\r\n                \r\n                tokensAmount = ICOHardcap.sub(tokensSold);\r\n              \r\n                rest = sum.sub(tokensAmount.mul(ICOPrice).div(tokenDec));\r\n            }\r\n        \r\n        \r\n        } else {\r\n            \r\n            require(ProICOHardcap > tokensSold);\r\n            \r\n            tokensAmount = sum.mul(tokenDec).div(ProICOPrice);\r\n            \r\n             \r\n            if(tokensAmount.add(tokensSold) > ProICOHardcap) {\r\n              \r\n                tokensAmount = ProICOHardcap.sub(tokensSold);\r\n              \r\n                rest = sum.sub(tokensAmount.mul(ProICOPrice).div(tokenDec));\r\n            }\r\n            \r\n        }         \r\n        \r\n      \r\n        tokensSold = tokensSold.add(tokensAmount);\r\n        \r\n\r\n\r\n        if(givenBonus < bonusAmount && tokensAmount >= 500*tokenDec){\r\n            \r\n            uint bonus = 0;\r\n            \r\n            \r\n            if(tokensAmount >= 500*tokenDec && tokensAmount <1000*tokenDec)\r\n            { \r\n               \r\n                bonus = 20*tokenDec;\r\n            \r\n            } else if ( tokensAmount >= 1000*tokenDec && tokensAmount <5000*tokenDec ) {\r\n              \r\n                bonus = 100*tokenDec;\r\n            \r\n            } else if ( tokensAmount >= 5000*tokenDec && tokensAmount <10000*tokenDec ) {\r\n               \r\n                bonus = 600*tokenDec;\r\n            \r\n            } else if ( tokensAmount >= 10000*tokenDec ) {\r\n            \r\n                bonus = 1500*tokenDec;\r\n            }\r\n\r\n            bonus = (bonus < (bonusAmount - givenBonus) ) ? bonus : (bonusAmount - givenBonus);\r\n            \r\n     \r\n            givenBonus = givenBonus.add(bonus);\r\n       \r\n            tokensAmount = tokensAmount.add(bonus);\r\n            \r\n        } \r\n\r\n        require(tokenBalance() > tokensAmount);\r\n        \r\n        require(token.transfer(msg.sender, tokensAmount));\r\n       \r\n        if(rest==0){\r\n\r\n            multisig.transfer(msg.value);\r\n        }else{\r\n\r\n            multisig.transfer(msg.value.sub(rest)); \r\n\r\n            msg.sender.transfer(rest);\r\n        }\r\n             \r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"startProICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreICOHardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ProICOHardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"givenBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreICOPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOHardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressOfERC20Tocken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doPurchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressOfERC20Tocken\",\"type\":\"address\"}],\"name\":\"setAddressOfERC20Tocken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ProICOPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDec\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"}],\"name\":\"Print\",\"type\":\"event\"}]","ContractName":"AGASCrowdsale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://de26e73ac86791baaa61d2ab57a5039d4168ac80aab868efe19d5c0884ecaef7"}]}