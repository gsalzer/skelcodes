{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n\r\n/// @dev Implements access control to the Chronos contract.\r\ncontract ChronosAccessControl is Claimable, Pausable, CanReclaimToken {\r\n    address public cfoAddress;\r\n    \r\n    function ChronosAccessControl() public {\r\n        // The creator of the contract is the initial CFO.\r\n        cfoAddress = msg.sender;\r\n    }\r\n    \r\n    /// @dev Access modifier for CFO-only functionality.\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current contract owner.\r\n    /// @param _newCFO The address of the new CFO.\r\n    function setCFO(address _newCFO) external onlyOwner {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n}\r\n\r\n\r\n/// @dev Defines base data structures for Chronos.\r\ncontract ChronosBase is ChronosAccessControl {\r\n    using SafeMath for uint256;\r\n \r\n    /// @notice Boolean indicating whether a game is live.\r\n    bool public gameStarted;\r\n    \r\n    /// @notice The player who started the game.\r\n    address public gameStarter;\r\n    \r\n    /// @notice The last player to have entered.\r\n    address public lastPlayer;\r\n    \r\n    /// @notice The timestamp the last wager times out.\r\n    uint256 public lastWagerTimeoutTimestamp;\r\n\r\n    /// @notice The number of seconds before the game ends.\r\n    uint256 public timeout;\r\n    \r\n    /// @notice The number of seconds before the game ends -- setting\r\n    /// for the next game.\r\n    uint256 public nextTimeout;\r\n    \r\n    /// @notice The minimum number of seconds before the game ends.\r\n    uint256 public minimumTimeout;\r\n    \r\n    /// @notice The minmum number of seconds before the game ends --\r\n    /// setting for the next game.\r\n    uint256 public nextMinimumTimeout;\r\n    \r\n    /// @notice The number of wagers required to move to the\r\n    /// minimum timeout.\r\n    uint256 public numberOfWagersToMinimumTimeout;\r\n    \r\n    /// @notice The number of wagers required to move to the\r\n    /// minimum timeout -- setting for the next game.\r\n    uint256 public nextNumberOfWagersToMinimumTimeout;\r\n    \r\n    /// @notice The wager index of the the current wager in the game.\r\n    uint256 public wagerIndex = 0;\r\n    \r\n    /// @notice Calculate the current game's timeout.\r\n    function calculateTimeout() public view returns(uint256) {\r\n        if (wagerIndex >= numberOfWagersToMinimumTimeout || numberOfWagersToMinimumTimeout == 0) {\r\n            return minimumTimeout;\r\n        } else {\r\n            // This cannot underflow, as timeout is guaranteed to be\r\n            // greater than or equal to minimumTimeout.\r\n            uint256 difference = timeout - minimumTimeout;\r\n            \r\n            // Calculate the decrease in timeout, based on the number of wagers performed.\r\n            uint256 decrease = difference.mul(wagerIndex).div(numberOfWagersToMinimumTimeout);\r\n            \r\n            // This subtraction cannot underflow, as decrease is guaranteed to be less than or equal to timeout.            \r\n            return (timeout - decrease);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title PullPayment\r\n * @dev Base contract supporting async send for pull payments. Inherit from this\r\n * contract and use asyncSend instead of send.\r\n */\r\ncontract PullPayment {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public payments;\r\n  uint256 public totalPayments;\r\n\r\n  /**\r\n  * @dev withdraw accumulated balance, called by payee.\r\n  */\r\n  function withdrawPayments() public {\r\n    address payee = msg.sender;\r\n    uint256 payment = payments[payee];\r\n\r\n    require(payment != 0);\r\n    require(this.balance >= payment);\r\n\r\n    totalPayments = totalPayments.sub(payment);\r\n    payments[payee] = 0;\r\n\r\n    assert(payee.send(payment));\r\n  }\r\n\r\n  /**\r\n  * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n  * @param dest The destination address of the funds.\r\n  * @param amount The amount to transfer.\r\n  */\r\n  function asyncSend(address dest, uint256 amount) internal {\r\n    payments[dest] = payments[dest].add(amount);\r\n    totalPayments = totalPayments.add(amount);\r\n  }\r\n}\r\n\r\n\r\n/// @dev Defines base finance functionality for Chronos.\r\ncontract ChronosFinance is ChronosBase, PullPayment {\r\n    /// @notice The dev fee in 1/1000th\r\n    /// of a percentage.\r\n    uint256 public feePercentage = 2500;\r\n    \r\n    /// @notice The game starter fee.\r\n    uint256 public gameStarterDividendPercentage = 1000;\r\n    \r\n    /// @notice The wager price.\r\n    uint256 public price;\r\n    \r\n    /// @notice The wager price -- setting for the next game.\r\n    uint256 public nextPrice;\r\n    \r\n    /// @notice The current prize pool (in wei).\r\n    uint256 public prizePool;\r\n    \r\n    /// @notice The current 7th wager pool (in wei).\r\n    uint256 public wagerPool;\r\n    \r\n    /// @notice Sets a new game starter dividend percentage.\r\n    /// @param _gameStarterDividendPercentage The new game starter dividend percentage.\r\n    function setGameStarterDividendPercentage(uint256 _gameStarterDividendPercentage) external onlyCFO {\r\n        // Game started dividend percentage must be 0.5% at least and 4% at the most.\r\n        require(500 <= _gameStarterDividendPercentage && _gameStarterDividendPercentage <= 4000);\r\n        \r\n        gameStarterDividendPercentage = _gameStarterDividendPercentage;\r\n    }\r\n    \r\n    /// @dev Send funds to a beneficiary. If sending fails, assign\r\n    /// funds to the beneficiary's balance for manual withdrawal.\r\n    /// @param beneficiary The beneficiary's address to send funds to\r\n    /// @param amount The amount to send.\r\n    function _sendFunds(address beneficiary, uint256 amount) internal {\r\n        if (!beneficiary.send(amount)) {\r\n            // Failed to send funds. This can happen due to a failure in\r\n            // fallback code of the beneficiary, or because of callstack\r\n            // depth.\r\n            // Send funds asynchronously for manual withdrawal by the\r\n            // beneficiary.\r\n            asyncSend(beneficiary, amount);\r\n        }\r\n    }\r\n    \r\n    /// @notice Withdraw (unowed) contract balance.\r\n    function withdrawFreeBalance() external onlyCFO {\r\n        // Calculate the free (unowed) balance.\r\n        uint256 freeBalance = this.balance.sub(totalPayments).sub(prizePool).sub(wagerPool);\r\n        \r\n        cfoAddress.transfer(freeBalance);\r\n    }\r\n}\r\n\r\n\r\n/// @dev Defines core Chronos functionality.\r\ncontract ChronosCore is ChronosFinance {\r\n    \r\n    function ChronosCore(uint256 _price, uint256 _timeout, uint256 _minimumTimeout, uint256 _numberOfWagersToMinimumTimeout) public {\r\n        require(_timeout >= _minimumTimeout);\r\n        \r\n        nextPrice = _price;\r\n        nextTimeout = _timeout;\r\n        nextMinimumTimeout = _minimumTimeout;\r\n        nextNumberOfWagersToMinimumTimeout = _numberOfWagersToMinimumTimeout;\r\n        NextGame(nextPrice, nextTimeout, nextMinimumTimeout, nextNumberOfWagersToMinimumTimeout);\r\n    }\r\n    \r\n    event NextGame(uint256 price, uint256 timeout, uint256 minimumTimeout, uint256 numberOfWagersToMinimumTimeout);\r\n    event Start(address indexed starter, uint256 timestamp, uint256 price, uint256 timeout, uint256 minimumTimeout, uint256 numberOfWagersToMinimumTimeout);\r\n    event End(address indexed winner, uint256 timestamp, uint256 prize);\r\n    event Play(address indexed player, uint256 timestamp, uint256 timeoutTimestamp, uint256 wagerIndex, uint256 newPrizePool);\r\n    event SpiceUpPrizePool(address indexed spicer, uint256 spiceAdded, string message, uint256 newPrizePool);\r\n    \r\n    /// @notice Participate in the game.\r\n    /// @param startNewGameIfIdle Start a new game if the current game is idle.\r\n    function play(bool startNewGameIfIdle) external payable {\r\n        // Check to see if the game should end. Process payment.\r\n        _processGameEnd();\r\n        \r\n        if (!gameStarted) {\r\n            // If the game is not started, the contract must not be paused.\r\n            require(!paused);\r\n            \r\n            // If the game is not started, the player must be willing to start\r\n            // a new game.\r\n            require(startNewGameIfIdle);\r\n            \r\n            // Set the price and timeout.\r\n            price = nextPrice;\r\n            timeout = nextTimeout;\r\n            minimumTimeout = nextMinimumTimeout;\r\n            numberOfWagersToMinimumTimeout = nextNumberOfWagersToMinimumTimeout;\r\n            \r\n            // Start the game.\r\n            gameStarted = true;\r\n            \r\n            // Set the game starter.\r\n            gameStarter = msg.sender;\r\n            \r\n            // Emit start event.\r\n            Start(msg.sender, block.timestamp, price, timeout, minimumTimeout, numberOfWagersToMinimumTimeout);\r\n        }\r\n        \r\n        // Enough Ether must be supplied.\r\n        require(msg.value >= price);\r\n        \r\n        // Calculate the fees and dividends.\r\n        uint256 fee = price.mul(feePercentage).div(100000);\r\n        uint256 dividend = price.mul(gameStarterDividendPercentage).div(100000);\r\n        uint256 wagerPoolPart;\r\n        \r\n        if (wagerIndex % 7 == 6) {\r\n            // Give the wager prize every 7th wager.\r\n            \r\n            // Calculate total 7th wager prize.\r\n            uint256 wagerPrize = price.mul(2);\r\n            \r\n            // Calculate the missing wager pool part (equal to price.mul(2).div(7) plus a few wei).\r\n            wagerPoolPart = wagerPrize.sub(wagerPool);\r\n        \r\n            // Give the wager prize to the sender.\r\n            msg.sender.transfer(wagerPrize);\r\n            \r\n            // Reset the wager pool.\r\n            wagerPool = 0;\r\n        } else {\r\n            // On every non-7th wager, increase the wager pool.\r\n            \r\n            // Calculate the wager pool part.\r\n            wagerPoolPart = price.mul(2).div(7);\r\n            \r\n            // Add funds to the wager pool.\r\n            wagerPool = wagerPool.add(wagerPoolPart);\r\n        }\r\n        \r\n        // Calculate the timeout.\r\n        uint256 currentTimeout = calculateTimeout();\r\n        \r\n        // Set the last player, timestamp, timeout timestamp, and increase prize.\r\n        lastPlayer = msg.sender;\r\n        lastWagerTimeoutTimestamp = block.timestamp + currentTimeout;\r\n        prizePool = prizePool.add(price.sub(fee).sub(dividend).sub(wagerPoolPart));\r\n        \r\n        // Emit event.\r\n        Play(msg.sender, block.timestamp, lastWagerTimeoutTimestamp, wagerIndex, prizePool);\r\n        \r\n        // Send the game starter dividend.\r\n        _sendFunds(gameStarter, dividend);\r\n        \r\n        // Increment the wager index.\r\n        wagerIndex = wagerIndex.add(1);\r\n        \r\n        // Refund any excess Ether sent.\r\n        // This subtraction never underflows, as msg.value is guaranteed\r\n        // to be greater than or equal to price.\r\n        uint256 excess = msg.value - price;\r\n        \r\n        if (excess > 0) {\r\n            msg.sender.transfer(excess);\r\n        }\r\n    }\r\n    \r\n    /// @notice Spice up the prize pool.\r\n    /// @param message An optional message to be sent along with the spice.\r\n    function spiceUp(string message) external payable {\r\n        // Game must be live or unpaused.\r\n        require(gameStarted || !paused);\r\n        \r\n        // Funds must be sent.\r\n        require(msg.value > 0);\r\n        \r\n        // Add funds to the prize pool.\r\n        prizePool = prizePool.add(msg.value);\r\n        \r\n        // Emit event.\r\n        SpiceUpPrizePool(msg.sender, msg.value, message, prizePool);\r\n    }\r\n    \r\n    /// @notice Set the parameters for the next game.\r\n    /// @param _price The price of wagers for the next game.\r\n    /// @param _timeout The timeout in seconds for the next game.\r\n    /// @param _minimumTimeout The minimum timeout in seconds for\r\n    /// the next game.\r\n    /// @param _numberOfWagersToMinimumTimeout The number of wagers\r\n    /// required to move to the minimum timeout for the next game.\r\n    function setNextGame(uint256 _price, uint256 _timeout, uint256 _minimumTimeout, uint256 _numberOfWagersToMinimumTimeout) external onlyCFO {\r\n        require(_timeout >= _minimumTimeout);\r\n    \r\n        nextPrice = _price;\r\n        nextTimeout = _timeout;\r\n        nextMinimumTimeout = _minimumTimeout;\r\n        nextNumberOfWagersToMinimumTimeout = _numberOfWagersToMinimumTimeout;\r\n        NextGame(nextPrice, nextTimeout, nextMinimumTimeout, nextNumberOfWagersToMinimumTimeout);\r\n    } \r\n    \r\n    /// @notice End the game. Pay prize.\r\n    function endGame() external {\r\n        require(_processGameEnd());\r\n    }\r\n    \r\n    /// @dev End the game. Pay prize.\r\n    function _processGameEnd() internal returns(bool) {\r\n        if (!gameStarted) {\r\n            // No game is started.\r\n            return false;\r\n        }\r\n    \r\n        if (block.timestamp <= lastWagerTimeoutTimestamp) {\r\n            // The game has not yet finished.\r\n            return false;\r\n        }\r\n        \r\n        // Calculate the prize. Any leftover funds for the\r\n        // 7th wager prize is added to the prize pool.\r\n        uint256 prize = prizePool.add(wagerPool);\r\n        \r\n        // The game has finished. Pay the prize to the last player.\r\n        _sendFunds(lastPlayer, prize);\r\n        \r\n        // Emit event.\r\n        End(lastPlayer, lastWagerTimeoutTimestamp, prize);\r\n        \r\n        // Reset the game.\r\n        gameStarted = false;\r\n        gameStarter = 0x0;\r\n        lastPlayer = 0x0;\r\n        lastWagerTimeoutTimestamp = 0;\r\n        wagerIndex = 0;\r\n        prizePool = 0;\r\n        wagerPool = 0;\r\n        \r\n        // Indicate ending the game was successful.\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameStarterDividendPercentage\",\"type\":\"uint256\"}],\"name\":\"setGameStarterDividendPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wagerIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wagerPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStarter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextNumberOfWagersToMinimumTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastWagerTimeoutTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextMinimumTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfWagersToMinimumTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startNewGameIfIdle\",\"type\":\"bool\"}],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_timeout\",\"type\":\"uint256\"},{\"name\":\"_minimumTimeout\",\"type\":\"uint256\"},{\"name\":\"_numberOfWagersToMinimumTimeout\",\"type\":\"uint256\"}],\"name\":\"setNextGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"spiceUp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFreeBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStarterDividendPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_timeout\",\"type\":\"uint256\"},{\"name\":\"_minimumTimeout\",\"type\":\"uint256\"},{\"name\":\"_numberOfWagersToMinimumTimeout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minimumTimeout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numberOfWagersToMinimumTimeout\",\"type\":\"uint256\"}],\"name\":\"NextGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"starter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minimumTimeout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numberOfWagersToMinimumTimeout\",\"type\":\"uint256\"}],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"End\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeoutTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wagerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrizePool\",\"type\":\"uint256\"}],\"name\":\"Play\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spicer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spiceAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newPrizePool\",\"type\":\"uint256\"}],\"name\":\"SpiceUpPrizePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ChronosCore","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000011c37937e0800000000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000000000000c8","Library":"","SwarmSource":"bzzr://9b6cf748068b46ff7f9654def74fa250dca59caa7bceec9d48e1fefc1e962c8c"}]}