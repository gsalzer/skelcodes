{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/* first version of the FundRequest ClaimRepository */\r\n\r\n/// @dev `Owned` is a base level contract that assigns an `owner` that can be\r\n///  later changed\r\ncontract Owned {\r\n  /// @dev `owner` is the only address that can call a function with this\r\n  /// modifier\r\n  modifier onlyOwner { require (msg.sender == owner); _; }\r\n\r\n  address public owner;\r\n\r\n  /// @notice The Constructor assigns the message sender to be `owner`\r\n  function Owned() public { owner = msg.sender;}\r\n\r\n  /// @notice `owner` can step down and assign some other address to this role\r\n  /// @param _newOwner The address of the new owner. 0x0 can be used to create\r\n  ///  an unowned neutral vault, however that cannot be undone\r\n  function changeOwner(address _newOwner) public onlyOwner {\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ClaimRepository is Owned {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (bytes32 => mapping (string => Claim)) claims;\r\n\r\n    mapping(address => bool) public callers;\r\n\r\n    uint256 public totalBalanceClaimed;\r\n    uint256 public totalClaims;\r\n\r\n\r\n    //modifiers\r\n    modifier onlyCaller {\r\n        require(callers[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    struct Claim {\r\n        address solverAddress;\r\n        string solver;\r\n        uint256 requestBalance;\r\n    }\r\n\r\n    function ClaimRepository() {\r\n        //constructor\r\n    }\r\n\r\n    function addClaim(address _solverAddress, bytes32 _platform, string _platformId, string _solver, uint256 _requestBalance) public onlyCaller returns (bool) {\r\n        claims[_platform][_platformId].solver = _solver;\r\n        claims[_platform][_platformId].solverAddress = _solverAddress;\r\n        claims[_platform][_platformId].requestBalance = _requestBalance;\r\n        totalBalanceClaimed = totalBalanceClaimed.add(_requestBalance);\r\n        totalClaims = totalClaims.add(1);\r\n        return true;\r\n    }\r\n\r\n    //management of the repositories\r\n    function updateCaller(address _caller, bool allowed) public onlyOwner {\r\n        callers[_caller] = allowed;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_solverAddress\",\"type\":\"address\"},{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"},{\"name\":\"_solver\",\"type\":\"string\"},{\"name\":\"_requestBalance\",\"type\":\"uint256\"}],\"name\":\"addClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClaims\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"callers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBalanceClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"},{\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"ClaimRepository","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://adc0336d096271a3e605fd41a702fd5f647eaaff1be2b5edbe59c74af25e4a26"}]}