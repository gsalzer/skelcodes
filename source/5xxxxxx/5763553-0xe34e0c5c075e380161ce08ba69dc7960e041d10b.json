{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\ncontract VestingToken is StandardToken {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) public vested;\r\n  mapping(address => uint256) public released;\r\n  uint256 public totalVested;\r\n  uint256 public vestingStartTime;\r\n  uint256 public vestingStageTime = 2592000; // 30 days\r\n\r\n  function vestedTo (address _address) public view returns (uint256) {\r\n    return vested[_address];\r\n  }\r\n\r\n  function releasedTo (address _address) public view returns (uint256) {\r\n    return released[_address];\r\n  }\r\n\r\n  function getShare () internal view returns (uint8) {\r\n    uint256 elapsedTime = now.sub(vestingStartTime);\r\n    if (elapsedTime > vestingStageTime.mul(3)) return uint8(100);\r\n    if (elapsedTime > vestingStageTime.mul(2)) return uint8(75);\r\n    if (elapsedTime > vestingStageTime) return uint8(50);   \r\n    return uint8(25);\r\n  }\r\n\r\n  function release () public returns (bool) {\r\n    uint8 shareForRelease = getShare(); // in percent\r\n    uint256 tokensForRelease = vested[msg.sender].mul(shareForRelease).div(100);\r\n    tokensForRelease = tokensForRelease.sub(released[msg.sender]);\r\n    require(tokensForRelease > 0);\r\n    released[msg.sender] = released[msg.sender].add(tokensForRelease);\r\n    balances[msg.sender] = balances[msg.sender].add(tokensForRelease);\r\n    totalSupply_ = totalSupply_.add(tokensForRelease);\r\n    emit Release(msg.sender, tokensForRelease);\r\n    return true;\r\n  }\r\n  event Vest(address indexed to, uint256 value);\r\n  event Release(address indexed to, uint256 value);\r\n}\r\n\r\ncontract CrowdsaleToken is VestingToken, Ownable {\r\n  using SafeMath for uint64;\r\n  uint64 public cap = 3170000000;\r\n  uint64 public saleCap = 1866912500;\r\n  uint64 public team = 634000000;\r\n  uint64 public advisors = 317000000;\r\n  uint64 public mlDevelopers = 79250000;\r\n  uint64 public marketing = 87175000;\r\n  uint64 public reserved = 185662500;\r\n  uint64 public basePrice = 18750;\r\n  uint64 public icoPeriodTime = 604800;\r\n  uint256 public sold = 0;\r\n  uint256 public currentIcoPeriodStartDate;\r\n  uint256 public icoEndDate;\r\n  bool public preSaleComplete = false;\r\n\r\n  enum Stages {Pause, PreSale, Ico1, Ico2, Ico3, Ico4, IcoEnd}\r\n  Stages currentStage;\r\n\r\n  mapping(uint8 => uint64) public stageCap;\r\n\r\n  mapping(uint8 => uint256) public stageSupply;\r\n\r\n  constructor() public {\r\n    currentStage = Stages.Pause;\r\n    stageCap[uint8(Stages.PreSale)] = 218750000;\r\n    stageCap[uint8(Stages.Ico1)] = 115200000;\r\n    stageCap[uint8(Stages.Ico2)] = 165312500;\r\n    stageCap[uint8(Stages.Ico3)] = 169400000;\r\n    stageCap[uint8(Stages.Ico4)] = 1198250000;\r\n  }\r\n\r\n  function startPreSale () public onlyOwner returns (bool) {\r\n    require(currentStage == Stages.Pause);\r\n    require(!preSaleComplete);\r\n    currentStage = Stages.PreSale;\r\n    return true;\r\n  }\r\n\r\n  function endPreSale () public onlyOwner returns (bool) {\r\n    require(currentStage == Stages.PreSale);\r\n    currentStage = Stages.Pause;\r\n    preSaleComplete = true;\r\n    return true;\r\n  }\r\n\r\n  function startIco () public onlyOwner returns (bool) {\r\n    require(currentStage == Stages.Pause);\r\n    require(preSaleComplete);\r\n    currentStage = Stages.Ico1;\r\n    currentIcoPeriodStartDate = now;\r\n    return true;\r\n  }\r\n\r\n  function endIco () public onlyOwner returns (bool) {\r\n    if (currentStage != Stages.Ico1 && currentStage != Stages.Ico2 && currentStage != Stages.Ico3 && currentStage != Stages.Ico4) revert();\r\n    currentStage = Stages.IcoEnd;\r\n    icoEndDate = now;\r\n    vestingStartTime = now;\r\n    uint256 unsoldTokens = saleCap.sub(sold);\r\n    balances[address(this)] = unsoldTokens;\r\n    totalSupply_ = totalSupply_.add(unsoldTokens);\r\n    return true;\r\n  }\r\n\r\n  function sendUnsold (address _to, uint256 _value) public onlyOwner {\r\n    require(_value <= balances[address(this)]);\r\n    balances[address(this)] = balances[address(this)].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(address(this), _to, _value);\r\n  }\r\n\r\n  function getReserve () public onlyOwner returns (bool) {\r\n    require(reserved > 0);\r\n    balances[owner] = balances[owner].add(reserved);\r\n    totalSupply_ = totalSupply_.add(reserved);\r\n    emit Transfer(address(this), owner, reserved);\r\n    reserved = 0;\r\n    return true;   \r\n  }\r\n\r\n  function vest2team (address _address) public onlyOwner returns (bool) {\r\n    require(team > 0);\r\n    vested[_address] = vested[_address].add(team);\r\n    totalVested = totalVested.add(team);\r\n    team = 0;\r\n    emit Vest(_address, team);\r\n    return true;   \r\n  }\r\n\r\n  function vest2advisors (address _address) public onlyOwner returns (bool) {\r\n    require(advisors > 0);\r\n    vested[_address] = vested[_address].add(advisors);\r\n    totalVested = totalVested.add(advisors);\r\n    advisors = 0;\r\n    emit Vest(_address, advisors);\r\n    return true;       \r\n  }\r\n\r\n  function send2marketing (address _address) public onlyOwner returns (bool) {\r\n    require(marketing > 0);\r\n    balances[_address] = balances[_address].add(marketing);\r\n    totalSupply_ = totalSupply_.add(marketing);\r\n    emit Transfer(address(this), _address, marketing);\r\n    marketing = 0;\r\n    return true;           \r\n  }\r\n\r\n  function vest2mlDevelopers (address _address) public onlyOwner returns (bool) {\r\n    require(mlDevelopers > 0);\r\n    vested[_address] = vested[_address].add(mlDevelopers);\r\n    totalVested = totalVested.add(mlDevelopers);\r\n    mlDevelopers = 0;\r\n    emit Vest(_address, mlDevelopers);\r\n    return true;           \r\n  }\r\n\r\n  function vest2all (address _address) public onlyOwner returns (bool) {\r\n    if (team > 0) {\r\n      vested[_address] = vested[_address].add(team);\r\n      totalVested = totalVested.add(team);\r\n      team = 0;\r\n      emit Vest(_address, team);      \r\n    }\r\n    if (advisors > 0) {\r\n      vested[_address] = vested[_address].add(advisors);\r\n      totalVested = totalVested.add(advisors);\r\n      advisors = 0;\r\n      emit Vest(_address, advisors);      \r\n    }\r\n    if (mlDevelopers > 0) {\r\n      vested[_address] = vested[_address].add(mlDevelopers);\r\n      totalVested = totalVested.add(mlDevelopers);\r\n      mlDevelopers = 0;\r\n      emit Vest(_address, mlDevelopers);      \r\n    }\r\n    return true;          \r\n  }\r\n\r\n  function getBonuses () internal view returns (uint8) {\r\n    if (currentStage == Stages.PreSale) {\r\n      return 25;\r\n    }\r\n    if (currentStage == Stages.Ico1) {\r\n      return 20;\r\n    }\r\n    if (currentStage == Stages.Ico2) {\r\n      return 15;\r\n    }\r\n    if (currentStage == Stages.Ico3) {\r\n      return 10;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function vestTo (address _to, uint256 _value) public onlyOwner returns (bool) {\r\n    require(currentStage != Stages.Pause);\r\n    require(currentStage != Stages.IcoEnd);\r\n    require(_to != address(0));\r\n    stageSupply[uint8(currentStage)] = stageSupply[uint8(currentStage)].add(_value);\r\n    require(stageSupply[uint8(currentStage)] <= stageCap[uint8(currentStage)]);\r\n    vested[_to] = vested[_to].add(_value);\r\n    sold = sold.add(_value);\r\n    totalVested = totalVested.add(_value);\r\n    emit Vest(_to, _value);\r\n    return true;\r\n  }\r\n\r\n  function getTokensAmount (uint256 _wei, address _sender) internal returns (uint256) {\r\n    require(currentStage != Stages.IcoEnd);\r\n    require(currentStage != Stages.Pause);\r\n    uint256 tokens = _wei.mul(basePrice).div(1 ether);\r\n    uint256 extraTokens = 0;\r\n    uint256 stageRemains = 0;\r\n    uint256 stagePrice = 0;\r\n    uint256 stageBonuses = 0;\r\n    uint256 spentWei = 0;\r\n    uint256 change = 0;\r\n    uint8 bonuses = 0;\r\n    if (currentStage == Stages.PreSale) {\r\n      require(_wei >= 100 finney);\r\n      bonuses = getBonuses();\r\n      extraTokens = tokens.mul(bonuses).div(100);\r\n      tokens = tokens.add(extraTokens);\r\n      stageSupply[uint8(currentStage)] = stageSupply[uint8(currentStage)].add(tokens);\r\n      require(stageSupply[uint8(currentStage)] <= stageCap[uint8(currentStage)]);\r\n      return tokens;\r\n    }\r\n    require(_wei >= 1 ether);\r\n    if (currentStage == Stages.Ico4) {\r\n      stageSupply[uint8(currentStage)] = stageSupply[uint8(currentStage)].add(tokens);\r\n      require(stageSupply[uint8(currentStage)] <= stageCap[uint8(currentStage)]);\r\n      return tokens;\r\n    } else {\r\n      if (currentIcoPeriodStartDate.add(icoPeriodTime) < now) nextStage(true);\r\n      bonuses = getBonuses();\r\n      stageRemains = stageCap[uint8(currentStage)].sub(stageSupply[uint8(currentStage)]);\r\n      extraTokens = tokens.mul(bonuses).div(100);\r\n      tokens = tokens.add(extraTokens);\r\n      if (stageRemains > tokens) {\r\n        stageSupply[uint8(currentStage)] = stageSupply[uint8(currentStage)].add(tokens);\r\n        return tokens;\r\n      } else {\r\n        stageBonuses = basePrice.mul(bonuses).div(100);\r\n        stagePrice = basePrice.add(stageBonuses);\r\n        tokens = stageRemains;\r\n        stageSupply[uint8(currentStage)] = stageCap[uint8(currentStage)];\r\n        spentWei = tokens.mul(1 ether).div(stagePrice);\r\n        change = _wei.sub(spentWei);\r\n        nextStage(false);\r\n        _sender.transfer(change);\r\n        return tokens;\r\n      }\r\n    }\r\n  }\r\n\r\n  function nextStage (bool _time) internal returns (bool) {\r\n    if (_time) {\r\n      if (currentStage == Stages.Ico1) {\r\n        if (currentIcoPeriodStartDate.add(icoPeriodTime).mul(3) < now) {\r\n          currentStage = Stages.Ico4;\r\n          currentIcoPeriodStartDate = now;\r\n          return true;\r\n        }\r\n        if (currentIcoPeriodStartDate.add(icoPeriodTime).mul(2) < now) {\r\n          currentStage = Stages.Ico3;\r\n          currentIcoPeriodStartDate = now;\r\n          return true;\r\n        }\r\n        currentStage = Stages.Ico2;\r\n        currentIcoPeriodStartDate = now;\r\n        return true;\r\n      }\r\n      if (currentStage == Stages.Ico2) {\r\n        if (currentIcoPeriodStartDate.add(icoPeriodTime).mul(2) < now) {\r\n          currentStage = Stages.Ico4;\r\n          currentIcoPeriodStartDate = now;\r\n          return true;\r\n        }\r\n        currentStage = Stages.Ico3;\r\n        currentIcoPeriodStartDate = now;\r\n        return true;\r\n      }\r\n      if (currentStage == Stages.Ico3) {\r\n        currentStage = Stages.Ico4;\r\n        currentIcoPeriodStartDate = now;\r\n        return true;\r\n      }\r\n    } else {\r\n      if (currentStage == Stages.Ico1) {\r\n        currentStage = Stages.Ico2;\r\n        currentIcoPeriodStartDate = now;\r\n        return true;      \r\n      }\r\n      if (currentStage == Stages.Ico2) {\r\n        currentStage = Stages.Ico3;\r\n        currentIcoPeriodStartDate = now;\r\n        return true;      \r\n      }\r\n      if (currentStage == Stages.Ico3) {\r\n        currentStage = Stages.Ico4;\r\n        currentIcoPeriodStartDate = now;\r\n        return true;      \r\n      }\r\n    }\r\n  }\r\n\r\n  function () public payable {\r\n    uint256 tokens = getTokensAmount(msg.value, msg.sender);\r\n    vested[msg.sender] = vested[msg.sender].add(tokens);\r\n    sold = sold.add(tokens);\r\n    totalVested = totalVested.add(tokens);\r\n    emit Vest(msg.sender, tokens);\r\n  }\r\n}\r\n\r\ncontract Multisign is Ownable {\r\n  address public address1 = address(0);\r\n  address public address2 = address(0);\r\n  address public address3 = address(0);\r\n  mapping(address => address) public withdrawAddress;\r\n\r\n  function setAddresses (address _address1, address _address2, address _address3) public onlyOwner returns (bool) {\r\n    require(address1 == address(0) && address2 == address(0) && address3 == address(0));\r\n    require(_address1 != address(0) && _address2 != address(0) && _address3 != address(0));\r\n    address1 = _address1;\r\n    address2 = _address2;\r\n    address3 = _address3;\r\n    return true;\r\n  }\r\n\r\n  function signWithdraw (address _address) public returns (bool) {\r\n    assert(msg.sender != address(0));\r\n    require (msg.sender == address1 || msg.sender == address2 || msg.sender == address3);\r\n    require (_address != address(0));\r\n    withdrawAddress[msg.sender] = _address;\r\n    if (withdrawAddress[address1] == withdrawAddress[address2] && withdrawAddress[address1] != address(0)) {\r\n      withdraw(withdrawAddress[address1]);\r\n      return true;\r\n    }\r\n    if (withdrawAddress[address1] == withdrawAddress[address3] && withdrawAddress[address1] != address(0)) {\r\n      withdraw(withdrawAddress[address1]);\r\n      return true;\r\n    }\r\n    if (withdrawAddress[address2] == withdrawAddress[address3] && withdrawAddress[address2] != address(0)) {\r\n      withdraw(withdrawAddress[address2]);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function withdraw (address _address) internal returns (bool) {\r\n    require(address(this).balance > 0);\r\n    withdrawAddress[address1] = address(0);\r\n    withdrawAddress[address2] = address(0);\r\n    withdrawAddress[address3] = address(0);\r\n    _address.transfer(address(this).balance);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract NSD is CrowdsaleToken, Multisign {\r\n  string public constant name = \"NeuroSeed\";\r\n  string public constant symbol = \"NSD\";\r\n  uint32 public constant decimals = 0;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"icoPeriodTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"releasedTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentIcoPeriodStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"address3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"stageCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address1\",\"type\":\"address\"},{\"name\":\"_address2\",\"type\":\"address\"},{\"name\":\"_address3\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"address1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"signWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"vest2all\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"vest2team\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"vest2mlDevelopers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"stageSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingStageTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"address2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"vestedTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"vestTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendUnsold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"vest2advisors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mlDevelopers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"send2marketing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Vest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"NSD","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://32a8f5b51c41393c5a29654933a1d9c0708d4ab157d777b61a3ff3068d5f9a73"}]}