{"status":"1","message":"OK","result":[{"SourceCode":"// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ODIN token contract \r\n// ----------------------------------------------------------------------------\r\npragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address private newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract OdinToken is ERC20Interface, Owned {\r\n\r\n  using SafeMath for uint256;\r\n\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint private _totalSupply;\r\n    bool private _whitelistAll;\r\n\r\n    struct balanceData {  \r\n       bool locked;\r\n       uint balance;\r\n       uint airDropQty;\r\n    }\r\n\r\n    mapping(address => balanceData) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n\r\n  /**\r\n  * @dev Constructor for Odin creation\r\n  * @dev Initially assigns the totalSupply to the contract creator\r\n  */\r\n    function OdinToken() public {\r\n        \r\n        // owner of this contract\r\n        address owner;\r\n        owner = msg.sender;\r\n        symbol = \"ODIN\";\r\n        name = \"ODIN Token\";\r\n        decimals = 18;\r\n        _whitelistAll=false;\r\n        _totalSupply = 100000000000000000000000;\r\n        balances[owner].balance = _totalSupply;\r\n\r\n        Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply - balances[owner].balance;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // whitelist an address\r\n    // ------------------------------------------------------------------------\r\n    function whitelistAddress(address to) public returns (bool)    {\r\n\t\trequire(msg.sender == owner);\r\n\t\tbalances[to].airDropQty = 0;\r\n\t\treturn true;\r\n    }\r\n\r\n\r\n  /**\r\n  * @dev Whitelist all addresses early\r\n  * @return An bool showing if the function succeeded.\r\n  */\r\n    function whitelistAllAddresses() public returns (bool) {\r\n        require (msg.sender == owner);\r\n        _whitelistAll = true;\r\n        return true;\r\n    }\r\n\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param tokenOwner The address to query the the balance of.\r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner].balance;\r\n    }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param tokens The amount to be transferred.\r\n  */\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n\r\n        require (msg.sender != to);                             // cannot send to yourself\r\n        require(to != address(0));                              // cannot send to address(0)\r\n        require(tokens <= balances[msg.sender].balance);        // do you have enough to send?\r\n        \r\n        uint sep_1_2018_ts = 1535760000;\r\n        uint dec_31_2018_ts = 1546214400;\r\n        uint mar_31_2019_ts = 1553990400;\r\n        uint jun_30_2019_ts = 1561852800;\r\n        uint oct_2_2019_ts = 1569974400;\r\n\r\n        if (!_whitelistAll) {\r\n\r\n            // do not allow transfering air dropped tokens prior to Sep 1 2018\r\n             if (msg.sender != owner && block.timestamp < sep_1_2018_ts && balances[msg.sender].airDropQty>0) {\r\n                 require(tokens < 0);\r\n            }\r\n\r\n            // after Sep 1 2018 and before Dec 31, 2018, do not allow transfering more than 10% of air dropped tokens\r\n            if (msg.sender != owner && block.timestamp < dec_31_2018_ts && balances[msg.sender].airDropQty>0) {\r\n                require((balances[msg.sender].balance - tokens) >= (balances[msg.sender].airDropQty / 10 * 9));\r\n            }\r\n\r\n            // after Dec 31 2018 and before March 31, 2019, do not allow transfering more than 25% of air dropped tokens\r\n            if (msg.sender != owner && block.timestamp < mar_31_2019_ts && balances[msg.sender].airDropQty>0) {\r\n                require((balances[msg.sender].balance - tokens) >= balances[msg.sender].airDropQty / 4 * 3);\r\n            }\r\n\r\n            // after March 31, 2019 and before Jun 30, 2019, do not allow transfering more than 50% of air dropped tokens\r\n            if (msg.sender != owner && block.timestamp < jun_30_2019_ts && balances[msg.sender].airDropQty>0) {\r\n                require((balances[msg.sender].balance - tokens) >= balances[msg.sender].airDropQty / 2);\r\n            }\r\n\r\n            // after Jun 30, 2019 and before Oct 2, 2019, do not allow transfering more than 75% of air dropped tokens\r\n            if (msg.sender != owner && block.timestamp < jun_30_2019_ts && balances[msg.sender].airDropQty>0) {\r\n                require((balances[msg.sender].balance - tokens) >= balances[msg.sender].airDropQty / 4);\r\n            }\r\n            \r\n            // otherwise, no transfer restrictions\r\n\r\n        }\r\n        \r\n        balances[msg.sender].balance = balances[msg.sender].balance.sub(tokens);\r\n        balances[to].balance = balances[to].balance.add(tokens);\r\n        if (msg.sender == owner) {\r\n            balances[to].airDropQty = balances[to].airDropQty.add(tokens);\r\n        }\r\n        Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // not implemented\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        return false;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // not implemented\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        return false;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // not implemented\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return 0;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // not implemented\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        return false;\r\n    }\r\n\r\n    function () {\r\n        //if ether is sent to this address, send it back.\r\n        throw;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"whitelistAllAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"whitelistAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"OdinToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://44319bd1b7638caa7774d6beaefdd7017466b0978ce5645fc5ebd34c944bf595"}]}