{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\nlibrary SafeMath {\r\n    //internals\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c>=a && c>=b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\n/// @title Simple Tokens\r\n/// Simple Tokens that can be minted by their owner\r\ncontract SimpleToken is Owned {\r\n    using SafeMath for uint256;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // This creates a mapping with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    // Another array with spending allowances\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    // The total supply of the token\r\n    uint256 public totalSupply;\r\n\r\n    // Some variables for nice wallet integration\r\n    string public name = \"CryptoGold\";          // Set the name for display purposes\r\n    string public symbol = \"CGC\" ;             // Set the symbol for display purposes\r\n    uint8 public decimals = 6;                // Amount of decimals for display purposes\r\n\r\n    // Send coins\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != 0x0);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != 0x0);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // Approve that others can transfer _value tokens for the msg.sender\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = allowance[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowance[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowance[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowance[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/// @title Multisignature Mintable Token - Allows minting of Tokens by a 2-2-Multisignature\r\n/// @author Henning Kopp - <kopp@blockchain-beratung.de>\r\ncontract MultiSigMint is SimpleToken {\r\n\r\n    // Address change event\r\n    event newOwner(address indexed oldAddress, address indexed newAddress);\r\n    event newNotary(address indexed oldAddress, address indexed newAddress);    \r\n    event Mint(address indexed minter, uint256 value);\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    // The address of the notary\r\n    address public notary;\r\n\r\n    uint256 proposedMintAmnt = 0;\r\n    uint256 proposedBurnAmnt = 0;\r\n\r\n    address proposeOwner = 0x0;\r\n    address proposeNotary = 0x0;\r\n\r\n    function MultiSigMint(address _notary) public {\r\n        require(_notary != 0x0);\r\n        require(msg.sender != _notary);\r\n        notary = _notary;\r\n    }\r\n\r\n    modifier onlyNotary {\r\n        require(msg.sender == notary);\r\n        _;\r\n    }\r\n\r\n    /* Allows the owner to propose the minting of tokens.\r\n     * tokenamount is the amount of tokens to be minted.\r\n     */\r\n    function proposeMinting(uint256 _tokenamount) external onlyOwner returns (bool) {\r\n        require(_tokenamount > 0);\r\n        proposedMintAmnt = _tokenamount;\r\n        return true;\r\n    }\r\n\r\n    /* Allows the notary to confirm the minting of tokens.\r\n     * tokenamount is the amount of tokens to be minted.\r\n     */\r\n    function confirmMinting(uint256 _tokenamount) external onlyNotary returns (bool) {\r\n        if (_tokenamount == proposedMintAmnt) {\r\n            proposedMintAmnt = 0; // reset the amount\r\n            balanceOf[owner] = balanceOf[owner].add(_tokenamount);\r\n            totalSupply = totalSupply.add(_tokenamount);\r\n            emit Mint(owner, _tokenamount);\r\n            emit Transfer(0x0, owner, _tokenamount);\r\n            return true;\r\n        } else {\r\n            proposedMintAmnt = 0; // reset the amount\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* Allows the owner to propose the burning of tokens.\r\n     * tokenamount is the amount of tokens to be burned.\r\n     */\r\n    function proposeBurning(uint256 _tokenamount) external onlyOwner returns (bool) {\r\n        require(_tokenamount > 0);\r\n        proposedBurnAmnt = _tokenamount;\r\n        return true;\r\n    }\r\n\r\n    /* Allows the notary to confirm the burning of tokens.\r\n     * tokenamount is the amount of tokens to be burning.\r\n     */\r\n    function confirmBurning(uint256 _tokenamount) external onlyNotary returns (bool) {\r\n        if (_tokenamount == proposedBurnAmnt) {\r\n            proposedBurnAmnt = 0; // reset the amount\r\n            balanceOf[owner] = balanceOf[owner].sub(_tokenamount);\r\n            totalSupply = totalSupply.sub(_tokenamount);\r\n            emit Burn(owner, _tokenamount);\r\n            emit Transfer(owner, 0x0, _tokenamount);\r\n            return true;\r\n        } else {\r\n            proposedBurnAmnt = 0; // reset the amount\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* Owner can propose an address change for owner\r\n    The notary has to confirm that address\r\n    */\r\n    function proposeNewOwner(address _newAddress) external onlyOwner {\r\n        proposeOwner = _newAddress;\r\n    }\r\n    function confirmNewOwner(address _newAddress) external onlyNotary returns (bool) {\r\n        if (proposeOwner == _newAddress && _newAddress != 0x0 && _newAddress != notary) {\r\n            proposeOwner = 0x0;\r\n            emit newOwner(owner, _newAddress);\r\n            owner = _newAddress;\r\n            return true;\r\n        } else {\r\n            proposeOwner = 0x0;\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    /* Owner can propose an address change for notary\r\n    The notary has to confirm that address\r\n    */\r\n    function proposeNewNotary(address _newAddress) external onlyOwner {\r\n        proposeNotary = _newAddress;\r\n    }\r\n    function confirmNewNotary(address _newAddress) external onlyNotary returns (bool) {\r\n        if (proposeNotary == _newAddress && _newAddress != 0x0 && _newAddress != owner) {\r\n            proposeNotary = 0x0;\r\n            emit newNotary(notary, _newAddress);\r\n            notary = _newAddress;\r\n            return true;\r\n        } else {\r\n            proposeNotary = 0x0;\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n/// @title Contract with fixed parameters for deployment\r\n/// @author Henning Kopp - <kopp@blockchain-beratung.de>\r\ncontract GoldToken is MultiSigMint {\r\n    function GoldToken(address _notary) public MultiSigMint(_notary) {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenamount\",\"type\":\"uint256\"}],\"name\":\"confirmMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"proposeNewNotary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"confirmNewNotary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenamount\",\"type\":\"uint256\"}],\"name\":\"proposeMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenamount\",\"type\":\"uint256\"}],\"name\":\"proposeBurning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"notary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"confirmNewOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenamount\",\"type\":\"uint256\"}],\"name\":\"confirmBurning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_notary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"newOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"newNotary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GoldToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000546f291fd830e626a9799d34946706a8c7bf50","Library":"","SwarmSource":"bzzr://8525b52e70d547cb373f789a1dcf3e351930dd3bfa51568c51a825e4da83a9ab"}]}