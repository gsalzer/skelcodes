{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// File: contracts/CAVAssetInterface.sol\r\n\r\ncontract CAVAssetInterface {\r\n    function __transferWithReference(address _to, uint _value, string _reference, address _sender) returns(bool);\r\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) returns(bool);\r\n    function __approve(address _spender, uint _value, address _sender) returns(bool);\r\n    function __process(bytes _data, address _sender) payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n// File: contracts/CAVAssetProxyInterface.sol\r\n\r\ncontract CAVAssetProxy {\r\n    address public platform;\r\n    bytes32 public smbl;\r\n    function __transferWithReference(address _to, uint _value, string _reference, address _sender) returns(bool);\r\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) returns(bool);\r\n    function __approve(address _spender, uint _value, address _sender) returns(bool);\r\n    function getLatestVersion() returns(address);\r\n    function init(address _CAVPlatform, string _symbol, string _name);\r\n    function proposeUpgrade(address _newVersion) returns (bool);\r\n}\r\n\r\n// File: contracts/CAVPlatformInterface.sol\r\n\r\ncontract CAVPlatform {\r\n    mapping(bytes32 => address) public proxies;\r\n    function symbols(uint _idx) public constant returns (bytes32);\r\n    function symbolsCount() public constant returns (uint);\r\n\r\n    function name(bytes32 _symbol) returns(string);\r\n    function setProxy(address _address, bytes32 _symbol) returns(uint errorCode);\r\n    function isCreated(bytes32 _symbol) constant returns(bool);\r\n    function isOwner(address _owner, bytes32 _symbol) returns(bool);\r\n    function owner(bytes32 _symbol) constant returns(address);\r\n    function totalSupply(bytes32 _symbol) returns(uint);\r\n    function balanceOf(address _holder, bytes32 _symbol) returns(uint);\r\n    function allowance(address _from, address _spender, bytes32 _symbol) returns(uint);\r\n    function baseUnit(bytes32 _symbol) returns(uint8);\r\n    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference, address _sender) returns(uint errorCode);\r\n    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) returns(uint errorCode);\r\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) returns(uint errorCode);\r\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable) returns(uint errorCode);\r\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable, address _account) returns(uint errorCode);\r\n    function reissueAsset(bytes32 _symbol, uint _value) returns(uint errorCode);\r\n    function revokeAsset(bytes32 _symbol, uint _value) returns(uint errorCode);\r\n    function isReissuable(bytes32 _symbol) returns(bool);\r\n    function changeOwnership(bytes32 _symbol, address _newOwner) returns(uint errorCode);\r\n    function hasAssetRights(address _owner, bytes32 _symbol) public view returns (bool);\r\n}\r\n\r\n// File: contracts/CAVAsset.sol\r\n\r\n/**\r\n * @title CAV Asset implementation contract.\r\n *\r\n * Basic asset implementation contract, without any additional logic.\r\n * Every other asset implementation contracts should derive from this one.\r\n * Receives calls from the proxy, and calls back immediatly without arguments modification.\r\n *\r\n * Note: all the non constant functions return false instead of throwing in case if state change\r\n * didn't happen yet.\r\n */\r\ncontract CAVAsset is CAVAssetInterface {\r\n\r\n    // Assigned asset proxy contract, immutable.\r\n    CAVAssetProxy public proxy;\r\n\r\n    // banned addresses\r\n    mapping (address => bool) public blacklist;\r\n\r\n    // stops asset transfers\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * Only assigned proxy is allowed to call.\r\n     */\r\n    modifier onlyProxy() {\r\n        if (proxy == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n    \r\n    modifier onlyNotPaused(address sender) {\r\n        if (!paused || isAuthorized(sender)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier onlyAcceptable(address _address) {\r\n        if (!blacklist[_address]) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n    *  Only assets's admins are allowed to execute\r\n    */\r\n    modifier onlyAuthorized() {\r\n        if (isAuthorized(msg.sender)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets asset proxy address.\r\n     *\r\n     * Can be set only once.\r\n     *\r\n     * @param _proxy asset proxy contract address.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function init(CAVAssetProxy _proxy) returns(bool) {\r\n        if (address(proxy) != 0x0) {\r\n            return false;\r\n        }\r\n        proxy = _proxy;\r\n        return true;\r\n    }\r\n\r\n    function isAuthorized(address sender) public view returns (bool) {\r\n        CAVPlatform platform = CAVPlatform(proxy.platform());\r\n        return platform.hasAssetRights(sender, proxy.smbl());\r\n    }\r\n\r\n    /**\r\n    *  @dev Lifts the ban on transfers for given addresses\r\n    */\r\n    function restrict(address [] _restricted) external onlyAuthorized returns (bool) {\r\n        for (uint i = 0; i < _restricted.length; i++) {\r\n            blacklist[_restricted[i]] = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    *  @dev Revokes the ban on transfers for given addresses\r\n    */\r\n    function unrestrict(address [] _unrestricted) external onlyAuthorized returns (bool) {\r\n        for (uint i = 0; i < _unrestricted.length; i++) {\r\n            delete blacklist[_unrestricted[i]];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    * Only admin is allowed to execute this method.\r\n    */\r\n    function pause() external onlyAuthorized returns (bool) {\r\n        paused = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    * Only admin is allowed to execute this method.\r\n    */\r\n    function unpause() external onlyAuthorized returns (bool) {\r\n        paused = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function __transferWithReference(address _to, uint _value, string _reference, address _sender) onlyProxy() returns(bool) {\r\n        return _transferWithReference(_to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications if an asset is not stopped.\r\n     * Checks whether _from/_sender are not in blacklist.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferWithReference(address _to, uint _value, string _reference, address _sender)\r\n    internal\r\n    onlyNotPaused(_sender)\r\n    onlyAcceptable(_to)\r\n    onlyAcceptable(_sender)\r\n    returns(bool)\r\n    {\r\n        return proxy.__transferWithReference(_to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) onlyProxy() returns(bool) {\r\n        return _transferFromWithReference(_from, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications if an asset is not stopped.\r\n     * Checks whether _from/_sender are not in blacklist.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender)\r\n    internal\r\n    onlyNotPaused(_sender)\r\n    onlyAcceptable(_from)\r\n    onlyAcceptable(_to)\r\n    onlyAcceptable(_sender)\r\n    returns(bool)\r\n    {\r\n        return proxy.__transferFromWithReference(_from, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function __approve(address _spender, uint _value, address _sender) onlyProxy() returns(bool) {\r\n        return _approve(_spender, _value, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _approve(address _spender, uint _value, address _sender)\r\n    internal\r\n    onlyAcceptable(_spender)\r\n    onlyAcceptable(_sender)\r\n    returns(bool)\r\n    {\r\n        return proxy.__approve(_spender, _value, _sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__transferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_restricted\",\"type\":\"address[]\"}],\"name\":\"restrict\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__transferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unrestricted\",\"type\":\"address[]\"}],\"name\":\"unrestrict\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__process\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CAVAsset","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f60911e6d9f0c19350569a02acb15f2ccaec423d196500000c42aeddecfd191c"}]}