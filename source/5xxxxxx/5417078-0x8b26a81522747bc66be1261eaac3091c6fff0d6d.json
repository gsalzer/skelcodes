{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Distribution is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Recipient {\r\n        address addr;\r\n        uint256 share;\r\n        uint256 balance;\r\n        uint256 received;\r\n    }\r\n\r\n    uint256 sharesSum;\r\n    uint8 constant maxRecsAmount = 12;\r\n    mapping(address => Recipient) public recs;\r\n    address[maxRecsAmount] public recsLookUpTable; //to iterate\r\n\r\n    event Payment(address indexed to, uint256 value);\r\n    event AddShare(address to, uint256 value);\r\n    event ChangeShare(address to, uint256 value);\r\n    event DeleteShare(address to);\r\n    event ChangeAddessShare(address newAddress);\r\n    event FoundsReceived(uint256 value);\r\n\r\n    function Distribution() public {\r\n        sharesSum = 0;\r\n    }\r\n\r\n    function receiveFunds() public payable {\r\n        emit FoundsReceived(msg.value);\r\n        for (uint8 i = 0; i < maxRecsAmount; i++) {\r\n            Recipient storage rec = recs[recsLookUpTable[i]];\r\n            uint ethAmount = (rec.share.mul(msg.value)).div(sharesSum);\r\n            rec.balance = rec.balance + ethAmount;\r\n        }\r\n    }\r\n\r\n    modifier onlyMembers(){\r\n        require(recs[msg.sender].addr != address(0));\r\n        _;\r\n    }\r\n\r\n    function doPayments() public {\r\n        Recipient storage rec = recs[msg.sender];\r\n        require(rec.balance >= 1e12);\r\n        rec.addr.transfer(rec.balance);\r\n        emit Payment(rec.addr, rec.balance);\r\n        rec.received = (rec.received).add(rec.balance);\r\n        rec.balance = 0;\r\n    }\r\n\r\n    function addShare(address _rec, uint256 share) public onlyOwner {\r\n        require(_rec != address(0));\r\n        require(share > 0);\r\n        require(recs[_rec].addr == address(0));\r\n        recs[_rec].addr = _rec;\r\n        recs[_rec].share = share;\r\n        recs[_rec].received = 0;\r\n        for(uint8 i = 0; i < maxRecsAmount; i++ ) {\r\n            if (recsLookUpTable[i] == address(0)) {\r\n                recsLookUpTable[i] = _rec;\r\n                break;\r\n            }\r\n        }\r\n        sharesSum = sharesSum.add(share);\r\n        emit AddShare(_rec, share);\r\n    }\r\n\r\n    function changeShare(address _rec, uint share) public onlyOwner {\r\n        require(_rec != address(0));\r\n        require(share > 0);\r\n        require(recs[_rec].addr != address(0));\r\n        Recipient storage rec = recs[_rec];\r\n        sharesSum = sharesSum.sub(rec.share).add(share);\r\n        rec.share = share;\r\n        emit ChangeShare(_rec, share);\r\n    }\r\n\r\n    function deleteShare(address _rec) public onlyOwner {\r\n        require(_rec != address(0));\r\n        require(recs[_rec].addr != address(0));\r\n        sharesSum = sharesSum.sub(recs[_rec].share);\r\n        for(uint8 i = 0; i < maxRecsAmount; i++ ) {\r\n            if (recsLookUpTable[i] == recs[_rec].addr) {\r\n                recsLookUpTable[i] = address(0);\r\n                break;\r\n            }\r\n        }\r\n        delete recs[_rec];\r\n        emit DeleteShare(msg.sender);\r\n    }\r\n\r\n    function changeRecipientAddress(address _newRec) public {\r\n        require(msg.sender != address(0));\r\n        require(_newRec != address(0));\r\n        require(recs[msg.sender].addr != address(0));\r\n        require(recs[_newRec].addr == address(0));\r\n        require(recs[msg.sender].addr != _newRec);\r\n\r\n        Recipient storage rec = recs[msg.sender];\r\n        uint256 prevBalance = rec.balance;\r\n        addShare(_newRec, rec.share);\r\n        emit ChangeAddessShare(_newRec);\r\n        deleteShare(msg.sender);\r\n        recs[_newRec].balance = prevBalance;\r\n        emit DeleteShare(msg.sender);\r\n\r\n    }\r\n\r\n    function getMyBalance() public view returns(uint256) {\r\n        return recs[msg.sender].balance;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"receiveFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"recs\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"share\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recsLookUpTable\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rec\",\"type\":\"address\"}],\"name\":\"deleteShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRec\",\"type\":\"address\"}],\"name\":\"changeRecipientAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rec\",\"type\":\"address\"},{\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"addShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rec\",\"type\":\"address\"},{\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"changeShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AddShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ChangeShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"DeleteShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ChangeAddessShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FoundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Distribution","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://31bd87756402a4e43140439660acf9d262b5a690b8df81d8420040bb54403489"}]}