{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Exponent {\r\n    function checkMultOverflow(uint x, uint y) public pure returns(bool) {\r\n        if(y == 0) return false;\r\n        return (((x*y) / y) != x);\r\n    }\r\n    \r\n    function exp(uint p, uint q, uint precision) public pure returns(uint){\r\n        uint n = 0;\r\n        uint nFact = 1;\r\n        uint currentP = 1;\r\n        uint currentQ = 1;\r\n        \r\n        uint sum = 0;\r\n        \r\n        while(true) {\r\n            if(checkMultOverflow(currentP, precision)) return sum; \r\n            if(checkMultOverflow(currentQ, nFact)) return sum;            \r\n            \r\n            sum += (currentP * precision ) / (currentQ * nFact);\r\n            \r\n            n++;\r\n            \r\n            if(checkMultOverflow(currentP,p)) return sum;            \r\n            if(checkMultOverflow(currentQ,q)) return sum;\r\n            if(checkMultOverflow(nFact,n)) return sum;\r\n            \r\n            currentP *= p;\r\n            currentQ *= q;\r\n            nFact *= n;\r\n        }\r\n\r\n    }\r\n    \r\n    event ExpResult(uint result, uint precision);\r\n    \r\n    function expTx(uint p, uint q, uint precision) public {\r\n        ExpResult(exp(p,q,precision),precision);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"checkMultOverflow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"p\",\"type\":\"uint256\"},{\"name\":\"q\",\"type\":\"uint256\"},{\"name\":\"precision\",\"type\":\"uint256\"}],\"name\":\"exp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"p\",\"type\":\"uint256\"},{\"name\":\"q\",\"type\":\"uint256\"},{\"name\":\"precision\",\"type\":\"uint256\"}],\"name\":\"expTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"precision\",\"type\":\"uint256\"}],\"name\":\"ExpResult\",\"type\":\"event\"}]","ContractName":"Exponent","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2830c36f4d355a757a1b763c0013df96d79b2356101508e4a4797a688d199b07"}]}