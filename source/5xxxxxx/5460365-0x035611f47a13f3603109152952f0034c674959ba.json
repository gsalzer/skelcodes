{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// File: contracts/ISimpleCrowdsale.sol\r\n\r\ninterface ISimpleCrowdsale {\r\n    function getSoftCap() external view returns(uint256);\r\n    function isContributorInLists(address contributorAddress) external view returns(bool);\r\n    function processReservationFundContribution(\r\n        address contributor,\r\n        uint256 tokenAmount,\r\n        uint256 tokenBonusAmount\r\n    ) external payable;\r\n}\r\n\r\n// File: contracts/fund/ICrowdsaleReservationFund.sol\r\n\r\n/**\r\n * @title ICrowdsaleReservationFund\r\n * @dev ReservationFund methods used by crowdsale contract\r\n */\r\ninterface ICrowdsaleReservationFund {\r\n    /**\r\n     * @dev Check if contributor has transactions\r\n     */\r\n    function canCompleteContribution(address contributor) external returns(bool);\r\n    /**\r\n     * @dev Complete contribution\r\n     * @param contributor Contributor`s address\r\n     */\r\n    function completeContribution(address contributor) external;\r\n    /**\r\n     * @dev Function accepts user`s contributed ether and amount of tokens to issue\r\n     * @param contributor Contributor wallet address.\r\n     * @param _tokensToIssue Token amount to issue\r\n     * @param _bonusTokensToIssue Bonus token amount to issue\r\n     */\r\n    function processContribution(address contributor, uint256 _tokensToIssue, uint256 _bonusTokensToIssue) external payable;\r\n\r\n    /**\r\n     * @dev Function returns current user`s contributed ether amount\r\n     */\r\n    function contributionsOf(address contributor) external returns(uint256);\r\n\r\n    /**\r\n     * @dev Function is called on the end of successful crowdsale\r\n     */\r\n    function onCrowdsaleEnd() external;\r\n}\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n    /**\r\n    * @dev constructor\r\n    */\r\n    function SafeMath() public {\r\n    }\r\n\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(a >= b);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract.\r\n    */\r\n    function Ownable(address _owner) public {\r\n        owner = _owner == address(0) ? msg.sender : _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev confirm ownership by a new owner\r\n    */\r\n    function confirmOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n}\r\n\r\n// File: contracts/ReservationFund.sol\r\n\r\ncontract ReservationFund is ICrowdsaleReservationFund, Ownable, SafeMath {\r\n    bool public crowdsaleFinished = false;\r\n\r\n    mapping(address => uint256) contributions;\r\n    mapping(address => uint256) tokensToIssue;\r\n    mapping(address => uint256) bonusTokensToIssue;\r\n\r\n    ISimpleCrowdsale public crowdsale;\r\n\r\n    event RefundPayment(address contributor, uint256 etherAmount);\r\n    event TransferToFund(address contributor, uint256 etherAmount);\r\n    event FinishCrowdsale();\r\n\r\n    function ReservationFund(address _owner) public Ownable(_owner) {\r\n    }\r\n\r\n    modifier onlyCrowdsale() {\r\n        require(msg.sender == address(crowdsale));\r\n        _;\r\n    }\r\n\r\n    function setCrowdsaleAddress(address crowdsaleAddress) public onlyOwner {\r\n        require(crowdsale == address(0));\r\n        crowdsale = ISimpleCrowdsale(crowdsaleAddress);\r\n    }\r\n\r\n    function onCrowdsaleEnd() external onlyCrowdsale {\r\n        crowdsaleFinished = true;\r\n        FinishCrowdsale();\r\n    }\r\n\r\n\r\n    function canCompleteContribution(address contributor) external returns(bool) {\r\n        if(crowdsaleFinished) {\r\n            return false;\r\n        }\r\n        if(!crowdsale.isContributorInLists(contributor)) {\r\n            return false;\r\n        }\r\n        if(contributions[contributor] == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check contributions by address\r\n     */\r\n    function contributionsOf(address contributor) external returns(uint256) {\r\n        return contributions[contributor];\r\n    }\r\n\r\n    /**\r\n     * @dev Process crowdsale contribution without whitelist\r\n     */\r\n    function processContribution(\r\n        address contributor,\r\n        uint256 _tokensToIssue,\r\n        uint256 _bonusTokensToIssue\r\n    ) external payable onlyCrowdsale {\r\n        contributions[contributor] = safeAdd(contributions[contributor], msg.value);\r\n        tokensToIssue[contributor] = safeAdd(tokensToIssue[contributor], _tokensToIssue);\r\n        bonusTokensToIssue[contributor] = safeAdd(bonusTokensToIssue[contributor], _bonusTokensToIssue);\r\n    }\r\n\r\n    /**\r\n     * @dev Complete contribution after if user is whitelisted\r\n     */\r\n    function completeContribution(address contributor) external {\r\n        require(!crowdsaleFinished);\r\n        require(crowdsale.isContributorInLists(contributor));\r\n        require(contributions[contributor] > 0);\r\n\r\n        uint256 etherAmount = contributions[contributor];\r\n        uint256 tokenAmount = tokensToIssue[contributor];\r\n        uint256 tokenBonusAmount = bonusTokensToIssue[contributor];\r\n\r\n        contributions[contributor] = 0;\r\n        tokensToIssue[contributor] = 0;\r\n        bonusTokensToIssue[contributor] = 0;\r\n\r\n        crowdsale.processReservationFundContribution.value(etherAmount)(contributor, tokenAmount, tokenBonusAmount);\r\n        TransferToFund(contributor, etherAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Refund payments if crowdsale is finalized\r\n     */\r\n    function refundPayment(address contributor) public {\r\n        require(crowdsaleFinished);\r\n        require(contributions[contributor] > 0 || tokensToIssue[contributor] > 0);\r\n        uint256 amountToRefund = contributions[contributor];\r\n\r\n        contributions[contributor] = 0;\r\n        tokensToIssue[contributor] = 0;\r\n        bonusTokensToIssue[contributor] = 0;\r\n\r\n        contributor.transfer(amountToRefund);\r\n        RefundPayment(contributor, amountToRefund);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"crowdsaleAddress\",\"type\":\"address\"}],\"name\":\"setCrowdsaleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"completeContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"contributionsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"onCrowdsaleEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"refundPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"_tokensToIssue\",\"type\":\"uint256\"},{\"name\":\"_bonusTokensToIssue\",\"type\":\"uint256\"}],\"name\":\"processContribution\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"canCompleteContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"RefundPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"TransferToFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FinishCrowdsale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ReservationFund","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005eaf0a37346ff992199fbc4480c9ccc4137d9c1f","Library":"","SwarmSource":"bzzr://83aa3ef81dbb9fc6d276a8d4d86c73d7899896e1087d599ff5060c48a725e4f2"}]}