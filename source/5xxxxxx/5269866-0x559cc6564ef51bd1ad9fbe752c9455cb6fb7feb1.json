{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title GuessNumber\r\n * @dev My first smart contract! GuessNumber contract starts with a random,\r\n * hashed number that the player can try to guess. If the guess is correct,\r\n * they receive the balance of the contract as a reward (including their bet).\r\n * If they guess incorrectly, the contract keeps the player's bet amount. Have fun!\r\n */\r\ncontract GuessNumber {\r\n  // creates random number between 1 - 10 on contract creation\r\n  uint256 private randomNumber = uint256( keccak256(now) ) % 10 + 1;\r\n  uint256 public lastPlayed;\r\n  uint256 public minBet = 0.1 ether;\r\n  address owner;\r\n\r\n  struct GuessHistory {\r\n    address player;\r\n    uint256 number;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  function GuessNumber() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  // 0.1 ether is a pretty good bet amount but if price changes, this will be useful\r\n  function changeMinBet(uint256 _newMinBet) external onlyOwner {\r\n    minBet = _newMinBet;\r\n  }\r\n\r\n  function guessNumber(uint256 _number) public payable {\r\n    require(msg.value >= minBet && _number <= 10);\r\n\r\n    GuessHistory guessHistory;\r\n    guessHistory.player = msg.sender;\r\n    guessHistory.number = _number;\r\n\r\n    // if player guesses correctly, transfer contract balance\r\n    // else the player's bet is automatically added to the reward / contract balance\r\n    if (_number == randomNumber) {\r\n      msg.sender.transfer(this.balance);\r\n    }\r\n\r\n    lastPlayed = now;\r\n  }\r\n\r\n  function kill() public onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function() public payable { }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"guessNumber\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPlayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinBet\",\"type\":\"uint256\"}],\"name\":\"changeMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"GuessNumber","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4e925d7b0b914bb9c5021bae68437ffa172a9cc10f1fcc7f5e2e4454ed61825c"}]}