{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  ERC20 public token;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // How many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  /**\r\n   * @param _rate Number of token units a buyer gets per wei\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   * @param _token Address of the token being sold\r\n   */\r\n  function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    token = _token;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(_beneficiary, tokens);\r\n    emit TokenPurchase(\r\n      msg.sender,\r\n      _beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    _updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n    _forwardFunds();\r\n    _postValidatePurchase(_beneficiary, weiAmount);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n    token.transfer(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n    return _weiAmount.mul(rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/PausableCrowdsale.sol\r\n\r\n/**\r\n * @title PausableCrowdsale\r\n * @dev Extension of Crowdsale contract that can be paused and unpaused by owner\r\n */\r\ncontract PausableCrowdsale is Crowdsale, Pausable {\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal whenNotPaused {\r\n    return super._preValidatePurchase(_beneficiary, _weiAmount);\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/IDAVToken.sol\r\n\r\ncontract IDAVToken is ERC20 {\r\n\r\n  function name() public view returns (string) {}\r\n  function symbol() public view returns (string) {}\r\n  function decimals() public view returns (uint8) {}\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool success);\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success);\r\n\r\n  function owner() public view returns (address) {}\r\n  function transferOwnership(address newOwner) public;\r\n\r\n  function burn(uint256 _value) public;\r\n\r\n  function pauseCutoffTime() public view returns (uint256) {}\r\n  function paused() public view returns (bool) {}\r\n  function pause() public;\r\n  function unpause() public;\r\n  function setPauseCutoffTime(uint256 _pauseCutoffTime) public;\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\r\n\r\n/**\r\n * @title TimedCrowdsale\r\n * @dev Crowdsale accepting contributions only within a time frame.\r\n */\r\ncontract TimedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public openingTime;\r\n  uint256 public closingTime;\r\n\r\n  /**\r\n   * @dev Reverts if not in crowdsale time range.\r\n   */\r\n  modifier onlyWhileOpen {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor, takes crowdsale opening and closing times.\r\n   * @param _openingTime Crowdsale opening time\r\n   * @param _closingTime Crowdsale closing time\r\n   */\r\n  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(_openingTime >= block.timestamp);\r\n    require(_closingTime >= _openingTime);\r\n\r\n    openingTime = _openingTime;\r\n    closingTime = _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n   * @return Whether crowdsale period has elapsed\r\n   */\r\n  function hasClosed() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp > closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring to be within contributing period\r\n   * @param _beneficiary Token purchaser\r\n   * @param _weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is TimedCrowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasClosed());\r\n\r\n    finalization();\r\n    emit Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/DAVCrowdsale.sol\r\n\r\n/**\r\n * @title DAVCrowdsale\r\n * @dev DAV Crowdsale contract\r\n */\r\ncontract DAVCrowdsale is PausableCrowdsale, FinalizableCrowdsale {\r\n\r\n  // Opening time for Whitelist B\r\n  uint256 public openingTimeB;\r\n  // Sum of contributions in Wei, per beneficiary\r\n  mapping(address => uint256) public contributions;\r\n  // List of beneficiaries whitelisted in group A\r\n  mapping(address => bool) public whitelistA;\r\n  // List of beneficiaries whitelisted in group B\r\n  mapping(address => bool) public whitelistB;\r\n  // Maximum number of Wei that can be raised\r\n  uint256 public weiCap;\r\n  // Maximum number of Vincis that can be sold in Crowdsale\r\n  uint256 public vinciCap;\r\n  // Minimal contribution amount in Wei per transaction\r\n  uint256 public minimalContribution;\r\n  // Maximal total contribution amount in Wei per beneficiary\r\n  uint256 public maximalIndividualContribution;\r\n  // Maximal acceptable gas price\r\n  uint256 public gasPriceLimit = 50000000000 wei;\r\n  // Wallet to transfer foundation tokens to\r\n  address public tokenWallet;\r\n  // Wallet to transfer locked tokens to (e.g., presale buyers)\r\n  address public lockedTokensWallet;\r\n  // DAV Token\r\n  IDAVToken public davToken;\r\n  // Amount of Vincis sold\r\n  uint256 public vinciSold;\r\n  // Address of account that can manage the whitelist\r\n  address public whitelistManager;\r\n\r\n  constructor(uint256 _rate, address _wallet, address _tokenWallet, address _lockedTokensWallet, IDAVToken _token, uint256 _weiCap, uint256 _vinciCap, uint256 _minimalContribution, uint256 _maximalIndividualContribution, uint256 _openingTime, uint256 _openingTimeB, uint256 _closingTime) public\r\n    Crowdsale(_rate, _wallet, _token)\r\n    TimedCrowdsale(_openingTime, _closingTime)\r\n  {\r\n    require(_openingTimeB >= _openingTime);\r\n    require(_openingTimeB <= _closingTime);\r\n    require(_weiCap > 0);\r\n    require(_vinciCap > 0);\r\n    require(_minimalContribution > 0);\r\n    require(_maximalIndividualContribution > 0);\r\n    require(_minimalContribution <= _maximalIndividualContribution);\r\n    require(_tokenWallet != address(0));\r\n    require(_lockedTokensWallet != address(0));\r\n    weiCap = _weiCap;\r\n    vinciCap = _vinciCap;\r\n    minimalContribution = _minimalContribution;\r\n    maximalIndividualContribution = _maximalIndividualContribution;\r\n    openingTimeB = _openingTimeB;\r\n    tokenWallet = _tokenWallet;\r\n    lockedTokensWallet= _lockedTokensWallet;\r\n    davToken = _token;\r\n    whitelistManager = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only if user is in whitelist A, or in whitelist B and openingTimeB has passed\r\n   */\r\n  modifier onlyWhitelisted(address _beneficiary) {\r\n    require(whitelistA[_beneficiary] || (whitelistB[_beneficiary] && block.timestamp >= openingTimeB));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the whitelist manager\r\n   */\r\n  modifier onlyWhitelistManager() {\r\n    require(msg.sender == whitelistManager);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Change the whitelist manager\r\n   *\r\n   * @param _whitelistManager Address of new whitelist manager\r\n   */\r\n  function setWhitelistManager(address _whitelistManager) external onlyOwner {\r\n    require(_whitelistManager != address(0));\r\n    whitelistManager= _whitelistManager;\r\n  }\r\n\r\n  /**\r\n   * @dev Change the gas price limit\r\n   *\r\n   * @param _gasPriceLimit New gas price limit\r\n   */\r\n  function setGasPriceLimit(uint256 _gasPriceLimit) external onlyOwner {\r\n    gasPriceLimit = _gasPriceLimit;\r\n  }\r\n\r\n  /**\r\n   * Add a group of users to whitelist A\r\n   *\r\n   * @param _beneficiaries List of addresses to be whitelisted\r\n   */\r\n  function addUsersWhitelistA(address[] _beneficiaries) external onlyWhitelistManager {\r\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n      whitelistA[_beneficiaries[i]] = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a group of users to whitelist B\r\n   *\r\n   * @param _beneficiaries List of addresses to be whitelisted\r\n   */\r\n  function addUsersWhitelistB(address[] _beneficiaries) external onlyWhitelistManager {\r\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n      whitelistB[_beneficiaries[i]] = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a group of users from whitelist A\r\n   *\r\n   * @param _beneficiaries List of addresses to be removed from whitelist\r\n   */\r\n  function removeUsersWhitelistA(address[] _beneficiaries) external onlyWhitelistManager {\r\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n      whitelistA[_beneficiaries[i]] = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a group of users from whitelist B\r\n   *\r\n   * @param _beneficiaries List of addresses to be removed from whitelist\r\n   */\r\n  function removeUsersWhitelistB(address[] _beneficiaries) external onlyWhitelistManager {\r\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n      whitelistB[_beneficiaries[i]] = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allow adjustment of the closing time\r\n   *\r\n   * @param _closingTime Time to close the sale. If in the past will set to the present\r\n   */\r\n  function closeEarly(uint256 _closingTime) external onlyOwner onlyWhileOpen {\r\n    // Make sure the new closing time isn't after the old closing time\r\n    require(_closingTime <= closingTime);\r\n    // solium-disable-next-line security/no-block-members\r\n    if (_closingTime < block.timestamp) {\r\n      // If closing time is in the past, set closing time to right now\r\n      closingTime = block.timestamp;\r\n    } else {\r\n      // Update the closing time\r\n      closingTime = _closingTime;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Record a transaction that happened during the presale and transfer tokens to locked tokens wallet\r\n   *\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   * @param _vinciAmount Amount of Vincis sold\r\n   */\r\n  function recordSale(uint256 _weiAmount, uint256 _vinciAmount) external onlyOwner {\r\n    // Verify that the amount won't put us over the wei cap\r\n    require(weiRaised.add(_weiAmount) <= weiCap);\r\n    // Verify that the amount won't put us over the vinci cap\r\n    require(vinciSold.add(_vinciAmount) <= vinciCap);\r\n    // Verify Crowdsale hasn't been finalized yet\r\n    require(!isFinalized);\r\n    // Update crowdsale totals\r\n    weiRaised = weiRaised.add(_weiAmount);\r\n    vinciSold = vinciSold.add(_vinciAmount);\r\n    // Transfer tokens\r\n    token.transfer(lockedTokensWallet, _vinciAmount);\r\n  }\r\n\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhitelisted(_beneficiary) {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n    // Verify that the amount won't put us over the wei cap\r\n    require(weiRaised.add(_weiAmount) <= weiCap);\r\n    // Verify that the amount won't put us over the vinci cap\r\n    require(vinciSold.add(_weiAmount.mul(rate)) <= vinciCap);\r\n    // Verify amount is larger than or equal to minimal contribution\r\n    require(_weiAmount >= minimalContribution);\r\n    // Verify that the gas price is lower than 50 gwei\r\n    require(tx.gasprice <= gasPriceLimit);\r\n    // Verify that user hasn't contributed more than the individual hard cap\r\n    require(contributions[_beneficiary].add(_weiAmount) <= maximalIndividualContribution);\r\n  }\r\n\r\n  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n    super._updatePurchasingState(_beneficiary, _weiAmount);\r\n    // Update user contribution total\r\n    contributions[_beneficiary] = contributions[_beneficiary].add(_weiAmount);\r\n    // Update total Vincis sold\r\n    vinciSold = vinciSold.add(_weiAmount.mul(rate));\r\n  }\r\n\r\n  function finalization() internal {\r\n    super.finalization();\r\n    // transfer tokens to foundation\r\n    uint256 foundationTokens = weiRaised.div(2).add(weiRaised);\r\n    foundationTokens = foundationTokens.mul(rate);\r\n    uint256 crowdsaleBalance = davToken.balanceOf(this);\r\n    if (crowdsaleBalance < foundationTokens) {\r\n      foundationTokens = crowdsaleBalance;\r\n    }\r\n    davToken.transfer(tokenWallet, foundationTokens);\r\n    // Burn off remaining tokens\r\n    crowdsaleBalance = davToken.balanceOf(this);\r\n    davToken.burn(crowdsaleBalance);\r\n    // Set token's pause cutoff time to 3 weeks from closing time\r\n    davToken.setPauseCutoffTime(closingTime.add(1814400));\r\n    // transfer token Ownership back to original owner\r\n    davToken.transferOwnership(owner);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_gasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"setGasPriceLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addUsersWhitelistB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistA\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"name\":\"closeEarly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vinciSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"name\":\"_vinciAmount\",\"type\":\"uint256\"}],\"name\":\"recordSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelistManager\",\"type\":\"address\"}],\"name\":\"setWhitelistManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"removeUsersWhitelistB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"removeUsersWhitelistA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"davToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vinciCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTimeB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPriceLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistB\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximalIndividualContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addUsersWhitelistA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenWallet\",\"type\":\"address\"},{\"name\":\"_lockedTokensWallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_weiCap\",\"type\":\"uint256\"},{\"name\":\"_vinciCap\",\"type\":\"uint256\"},{\"name\":\"_minimalContribution\",\"type\":\"uint256\"},{\"name\":\"_maximalIndividualContribution\",\"type\":\"uint256\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_openingTimeB\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"DAVCrowdsale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000002710000000000000000000000000e341c37f86993d2d4b858f1734c330df9fab40c900000000000000000000000080200e47123591d480ad22410c0b2514064d323e000000000000000000000000a0c628031f8307b5d740684fa052b8a2f00884770000000000000000000000000e973e3f25eea2d43919436e59744e7ed993ad9c000000000000000000000000000000000000000000000b7ed996c471f77800000000000000000000000000000000000000000000024a1dd6225784985574000000000000000000000000000000000000000000000000000002c68af0bb14000000000000000000000000000000000000000000000000000821ab0d4414980000000000000000000000000000000000000000000000000000000000005b194f78000000000000000000000000000000000000000000000000000000005b195428000000000000000000000000000000000000000000000000000000005b1972a0","Library":"","SwarmSource":"bzzr://8eecfb5da48dc83463cfe31facc7cad2ca82eb6fd3a8c94aeb8105c3e94bc3c2"}]}