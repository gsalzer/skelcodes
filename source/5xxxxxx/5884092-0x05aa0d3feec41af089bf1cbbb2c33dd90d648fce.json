{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ClearCoinAdExchange {\r\n    \r\n    /*\r\n     * Events\r\n     */\r\n    event lineItemActivated(address indexed wallet);\r\n    event lineItemDeactivated(address indexed wallet);\r\n    event adSlotActivated(address indexed wallet);\r\n    event adSlotDeactivated(address indexed wallet);\r\n    event clickTracked(address indexed lineItem, address indexed adSlot);\r\n    \r\n    address owner;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only owner can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address new_owner) public onlyOwner {\r\n        owner = new_owner;\r\n    }\r\n\r\n    /*\r\n     * Demand-side (Advertiser)\r\n     */\r\n    struct LineItem {\r\n        uint256 budget;          // when XCLR is transferred to this line item, it's budget increases; eventually the publisher will get paid from the budget\r\n        string destination_url;  // clicks on creative point here\r\n        uint256 max_cpc;         // maximum XCLR willing to spend for CPC (Cost Per Click) [8 decimals]\r\n        uint256 max_daily_spend; // maximum XCLR to spend per 24 hours [8 decimals]\r\n        uint256 creative_type;   // (1,2,3) => leaderboard (728x90), skyscraper (120x600), medium rectangle (300x250)\r\n        uint256[] categories;    // (1,2,3,4,etc) => (Automotive, Education, Business, ICO, etc)\r\n        bool active;\r\n    }\r\n    \r\n    // all line items\r\n    // costs are charged from this address as XCLR\r\n    // think of it as the control for Max Lifetime Spend, but you can always top-up with more XCLR\r\n    // also an identifier for the creative URI\r\n    mapping (address => LineItem) line_items;\r\n    \r\n    modifier lineItemExists {\r\n        require(\r\n            line_items[msg.sender].active,\r\n            \"This address has not created a line item.\"\r\n        );\r\n        _;\r\n    }    \r\n        \r\n    function createLineItem(\r\n        string destination_url,\r\n        uint256 max_cpc,\r\n        uint256 max_daily_spend,\r\n        uint256 creative_type,\r\n        uint256[] categories\r\n    ) public {\r\n        line_items[msg.sender] = LineItem({\r\n            budget: 0,\r\n            destination_url: destination_url,\r\n            max_cpc: max_cpc,\r\n            max_daily_spend: max_daily_spend,\r\n            creative_type: creative_type,\r\n            categories: categories,\r\n            active: true\r\n        });\r\n\r\n        emit lineItemActivated(msg.sender);\r\n    }\r\n    \r\n    function deactivateLineItem() public lineItemExists {\r\n        line_items[msg.sender].active = false;\r\n        \r\n        emit lineItemDeactivated(msg.sender);\r\n    }\r\n    \r\n    function activateLineItem() public lineItemExists {\r\n        line_items[msg.sender].active = true;\r\n        \r\n        emit lineItemActivated(msg.sender);\r\n    }\r\n\r\n\r\n    /*\r\n     * Supply-side (Publisher)\r\n     */\r\n    struct AdSlot {\r\n        string domain;          // domain name of website\r\n        uint256 creative_type;  // (1,2,3) => leaderboard (728x90), skyscraper (120x600), medium rectangle (300x250)\r\n        uint256 min_cpc;        // minimum XCLR willing to accept to display ad\r\n        uint256[] categories;   // (1,2,3,4,etc) => (Automotive, Education, Business, ICO, etc)\r\n        uint256 avg_ad_quality; // reputation of this AdSlot (updated by algorithm that considers NHT% and number of historical clicks)\r\n        bool active;\r\n    }\r\n    \r\n    // all ad slots\r\n    // costs are paid out to these addresses as XCLR\r\n    mapping (address => AdSlot) ad_slots;\r\n    \r\n    modifier adSlotExists {\r\n        require(\r\n            ad_slots[msg.sender].active,\r\n            \"This address has not created an ad slot.\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    function createAdSlot(\r\n        string domain,\r\n        uint256 creative_type,\r\n        uint256 min_cpc,\r\n        uint256[] categories\r\n    ) public {\r\n        ad_slots[msg.sender] = AdSlot({\r\n            domain: domain,\r\n            creative_type: creative_type,\r\n            min_cpc: min_cpc,\r\n            categories: categories,\r\n            avg_ad_quality: 100, // starts at 100% by default\r\n            active: true\r\n        });\r\n\r\n        emit adSlotActivated(msg.sender);\r\n    }\r\n    \r\n    function deactivateAdSlot() public adSlotExists {\r\n        ad_slots[msg.sender].active = false;\r\n        \r\n        emit adSlotDeactivated(msg.sender);\r\n    }\r\n    \r\n    function activateAdSlot() public adSlotExists {\r\n        ad_slots[msg.sender].active = true;\r\n        \r\n        emit adSlotActivated(msg.sender);\r\n    }\r\n\r\n    // only owner can submit tracked clicks (from ad server)\r\n    function trackClick(address line_item_address, address ad_slot_address) public onlyOwner {\r\n        emit clickTracked(line_item_address, ad_slot_address);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"creative_type\",\"type\":\"uint256\"},{\"name\":\"min_cpc\",\"type\":\"uint256\"},{\"name\":\"categories\",\"type\":\"uint256[]\"}],\"name\":\"createAdSlot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination_url\",\"type\":\"string\"},{\"name\":\"max_cpc\",\"type\":\"uint256\"},{\"name\":\"max_daily_spend\",\"type\":\"uint256\"},{\"name\":\"creative_type\",\"type\":\"uint256\"},{\"name\":\"categories\",\"type\":\"uint256[]\"}],\"name\":\"createLineItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"line_item_address\",\"type\":\"address\"},{\"name\":\"ad_slot_address\",\"type\":\"address\"}],\"name\":\"trackClick\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateLineItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deactivateAdSlot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateAdSlot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deactivateLineItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"lineItemActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"lineItemDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"adSlotActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"adSlotDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lineItem\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"adSlot\",\"type\":\"address\"}],\"name\":\"clickTracked\",\"type\":\"event\"}]","ContractName":"ClearCoinAdExchange","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://144dea434ec57a5b19014292e8f1d3db3f4cb42a5165de7b2e62196bc89a19a0"}]}