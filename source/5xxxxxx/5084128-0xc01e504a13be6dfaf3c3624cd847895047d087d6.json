{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract XMB is ERC20,Ownable{\r\n\tusing SafeMath for uint256;\r\n\r\n\t//the base info of the token\r\n\tstring public constant name=\"XMB\";\r\n\tstring public constant symbol=\"XMB\";\r\n\tstring public constant version = \"1.0\";\r\n\tuint256 public constant decimals = 18;\r\n\r\n    mapping(address => uint256) balances;\r\n\tmapping (address => mapping (address => uint256)) allowed;\r\n\t//总发行10亿\r\n\tuint256 public constant MAX_SUPPLY=1000000000*10**decimals;\r\n\t//初始发行3亿，用于空投和团队保留\r\n\tuint256 public constant INIT_SUPPLY=300000000*10**decimals;\r\n\r\n\t//第一阶段兑换比例\r\n\tuint256 public stepOneRate;\r\n\t//第二阶段兑换比例\r\n\tuint256 public stepTwoRate;\r\n\r\n\t//第一阶段开始时间\r\n\tuint256 public stepOneStartTime;\r\n\t//第一阶段结束时间\r\n\tuint256 public stepOneEndTime;\r\n\r\n\r\n\t//第二阶段开始时间\r\n\tuint256 public stepTwoStartTime;\r\n\t//第二阶段结束时间\r\n\tuint256 public stepTwoEndTime;\r\n\r\n\t//锁仓截止日期1\r\n\tuint256 public stepOneLockEndTime;\r\n\r\n\t//锁仓截止日期2\r\n\tuint256 public stepTwoLockEndTime;\r\n\r\n\t//已经空投量\r\n\tuint256 public airdropSupply;\r\n\r\n\t//期数\r\n    struct epoch  {\r\n        uint256 endTime;\r\n        uint256 amount;\r\n    }\r\n\r\n\t//各个用户的锁仓金额\r\n\tmapping(address=>epoch[]) public lockEpochsMap;\r\n\r\n\r\n\tfunction XMB(){\r\n\t\tairdropSupply = 0;\r\n\t\t//第一阶段5w个\r\n\t\tstepOneRate = 50000;\r\n\t\t//第二阶段2.5w个\r\n\t\tstepTwoRate = 25000;\r\n\t\t//20180214 00:00:00\r\n\t\tstepOneStartTime=1518537600;\r\n\t\t//20180220 00:00:00\r\n\t\tstepOneEndTime=1519056000;\r\n\r\n\r\n\t\t//20180220 00:00:00\r\n\t\tstepTwoStartTime=1519056000;\r\n\t\t//20180225 00:00:00\r\n\t\tstepTwoEndTime=1519488000;\r\n\r\n\t\t//20180501 00:00:00\r\n\t\tstepOneLockEndTime = 1525104000;\r\n\r\n\t\t//20180401 00:00:00\r\n\t\tstepTwoLockEndTime = 1522512000;\r\n\r\n\t\ttotalSupply = INIT_SUPPLY;\r\n\t\tbalances[msg.sender] = INIT_SUPPLY;\r\n\t\tTransfer(0x0, msg.sender, INIT_SUPPLY);\r\n\t}\r\n\r\n\tmodifier totalSupplyNotReached(uint256 _ethContribution,uint rate){\r\n\t\tassert(totalSupply.add(_ethContribution.mul(rate)) <= MAX_SUPPLY);\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\t//空投\r\n    function airdrop(address [] _holders,uint256 paySize) external\r\n    \tonlyOwner \r\n\t{\r\n        uint256 count = _holders.length;\r\n        assert(paySize.mul(count) <= balanceOf(msg.sender));\r\n        for (uint256 i = 0; i < count; i++) {\r\n            transfer(_holders [i], paySize);\r\n\t\t\tairdropSupply = airdropSupply.add(paySize);\r\n        }\r\n    }\r\n\r\n\r\n\t//允许用户往合约账户打币\r\n\tfunction () payable external\r\n\t{\r\n\t\t\tif(now > stepOneStartTime&&now<=stepOneEndTime){\r\n\t\t\t\tprocessFunding(msg.sender,msg.value,stepOneRate);\r\n\t\t\t\t//设置锁仓\r\n\t\t\t\tuint256 stepOnelockAmount = msg.value.mul(stepOneRate);\r\n\t\t\t\tlockBalance(msg.sender,stepOnelockAmount,stepOneLockEndTime);\r\n\t\t\t}else if(now > stepTwoStartTime&&now<=stepTwoEndTime){\r\n\t\t\t\tprocessFunding(msg.sender,msg.value,stepTwoRate);\r\n\t\t\t\t//设置锁仓\r\n\t\t\t\tuint256 stepTwolockAmount = msg.value.mul(stepTwoRate);\r\n\t\t\t\tlockBalance(msg.sender,stepTwolockAmount,stepTwoLockEndTime);\t\t\t\t\r\n\t\t\t}else{\r\n\t\t\t\trevert();\r\n\t\t\t}\r\n\t}\r\n\r\n\t//owner有权限提取账户中的eth\r\n\tfunction etherProceeds() external\r\n\t\tonlyOwner\r\n\r\n\t{\r\n\t\tif(!msg.sender.send(this.balance)) revert();\r\n\t}\r\n\r\n\t//设置锁仓\r\n\tfunction lockBalance(address user, uint256 amount,uint256 endTime) internal\r\n\t{\r\n\t\t epoch[] storage epochs = lockEpochsMap[user];\r\n\t\t epochs.push(epoch(endTime,amount));\r\n\t}\r\n\r\n\tfunction processFunding(address receiver,uint256 _value,uint256 fundingRate) internal\r\n\t\ttotalSupplyNotReached(_value,fundingRate)\r\n\r\n\t{\r\n\t\tuint256 tokenAmount = _value.mul(fundingRate);\r\n\t\ttotalSupply=totalSupply.add(tokenAmount);\r\n\t\tbalances[receiver] += tokenAmount;  // safeAdd not needed; bad semantics to use here\r\n\t\tTransfer(0x0, receiver, tokenAmount);\r\n\t}\r\n\r\n\r\n\tfunction setStepOneRate (uint256 _rate)  external \r\n\t\tonlyOwner\r\n\t{\r\n\t\tstepOneRate=_rate;\r\n\t}\r\n\tfunction setStepTwoRate (uint256 _rate)  external \r\n\t\tonlyOwner\r\n\t{\r\n\t\tstepTwoRate=_rate;\r\n\t}\t\r\n\r\n\tfunction setStepOneTime (uint256 _stepOneStartTime,uint256 _stepOneEndTime)  external \r\n\t\tonlyOwner\r\n\t{\r\n\t\tstepOneStartTime=_stepOneStartTime;\r\n\t\tstepOneEndTime = _stepOneEndTime;\r\n\t}\t\r\n\r\n\tfunction setStepTwoTime (uint256 _stepTwoStartTime,uint256 _stepTwoEndTime)  external \r\n\t\tonlyOwner\r\n\t{\r\n\t\tstepTwoStartTime=_stepTwoStartTime;\r\n\t\tstepTwoEndTime = _stepTwoEndTime;\r\n\t}\t\r\n\r\n\tfunction setStepOneLockEndTime (uint256 _stepOneLockEndTime) external\r\n\t\tonlyOwner\r\n\t{\r\n\t\tstepOneLockEndTime = _stepOneLockEndTime;\r\n\t}\r\n\t\r\n\tfunction setStepTwoLockEndTime (uint256 _stepTwoLockEndTime) external\r\n\t\tonlyOwner\r\n\t{\r\n\t\tstepTwoLockEndTime = _stepTwoLockEndTime;\r\n\t}\r\n\r\n  //转账前，先校验减去转出份额后，是否大于等于锁仓份额\r\n  \tfunction transfer(address _to, uint256 _value) public  returns (bool)\r\n \t{\r\n\t\trequire(_to != address(0));\r\n\t\t//计算锁仓份额\r\n\t\tepoch[] epochs = lockEpochsMap[msg.sender];\r\n\t\tuint256 needLockBalance = 0;\r\n\t\tfor(uint256 i;i<epochs.length;i++)\r\n\t\t{\r\n\t\t\t//如果当前时间小于当期结束时间,则此期有效\r\n\t\t\tif( now < epochs[i].endTime )\r\n\t\t\t{\r\n\t\t\t\tneedLockBalance=needLockBalance.add(epochs[i].amount);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trequire(balances[msg.sender].sub(_value)>=needLockBalance);\r\n\t\t// SafeMath.sub will throw if there is not enough balance.\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n  \t}\r\n\r\n  \tfunction balanceOf(address _owner) public constant returns (uint256 balance) \r\n  \t{\r\n\t\treturn balances[_owner];\r\n  \t}\r\n\r\n\r\n  //从委托人账上转出份额时，还要判断委托人的余额-转出份额是否大于等于锁仓份额\r\n  \tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) \r\n  \t{\r\n\t\trequire(_to != address(0));\r\n\r\n\t\t//计算锁仓份额\r\n\t\tepoch[] epochs = lockEpochsMap[_from];\r\n\t\tuint256 needLockBalance = 0;\r\n\t\tfor(uint256 i;i<epochs.length;i++)\r\n\t\t{\r\n\t\t\t//如果当前时间小于当期结束时间,则此期有效\r\n\t\t\tif( now < epochs[i].endTime )\r\n\t\t\t{\r\n\t\t\t\tneedLockBalance = needLockBalance.add(epochs[i].amount);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trequire(balances[_from].sub(_value)>=needLockBalance);\r\n\t\tuint256 _allowance = allowed[_from][msg.sender];\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n  \t}\r\n\r\n  \tfunction approve(address _spender, uint256 _value) public returns (bool) \r\n  \t{\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n  \t}\r\n\r\n  \tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \r\n  \t{\r\n\t\treturn allowed[_owner][_spender];\r\n  \t}\r\n\r\n\t  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_stepOneStartTime\",\"type\":\"uint256\"},{\"name\":\"_stepOneEndTime\",\"type\":\"uint256\"}],\"name\":\"setStepOneTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepOneStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepTwoRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setStepOneRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stepTwoStartTime\",\"type\":\"uint256\"},{\"name\":\"_stepTwoEndTime\",\"type\":\"uint256\"}],\"name\":\"setStepTwoTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stepTwoLockEndTime\",\"type\":\"uint256\"}],\"name\":\"setStepTwoLockEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockEpochsMap\",\"outputs\":[{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepOneLockEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepOneEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepTwoEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"etherProceeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INIT_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stepOneLockEndTime\",\"type\":\"uint256\"}],\"name\":\"setStepOneLockEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepTwoLockEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"},{\"name\":\"paySize\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepTwoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepOneRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setStepTwoRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"XMB","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e7f487ecc6249a1fb40909bdca57b43cc66f81a80bd4f0f271bc6bbb44134692"}]}