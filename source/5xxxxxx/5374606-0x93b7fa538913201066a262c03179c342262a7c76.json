{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract UnicornManagementInterface {\r\n\r\n    function ownerAddress() external view returns (address);\r\n    function managerAddress() external view returns (address);\r\n    function communityAddress() external view returns (address);\r\n    function dividendManagerAddress() external view returns (address);\r\n    function walletAddress() external view returns (address);\r\n    function blackBoxAddress() external view returns (address);\r\n    function unicornBreedingAddress() external view returns (address);\r\n    function geneLabAddress() external view returns (address);\r\n    function unicornTokenAddress() external view returns (address);\r\n    function candyToken() external view returns (address);\r\n    function candyPowerToken() external view returns (address);\r\n\r\n    function createDividendPercent() external view returns (uint);\r\n    function sellDividendPercent() external view returns (uint);\r\n    function subFreezingPrice() external view returns (uint);\r\n    function subFreezingTime() external view returns (uint64);\r\n    function subTourFreezingPrice() external view returns (uint);\r\n    function subTourFreezingTime() external view returns (uint64);\r\n    function createUnicornPrice() external view returns (uint);\r\n    function createUnicornPriceInCandy() external view returns (uint);\r\n    function oraclizeFee() external view returns (uint);\r\n\r\n    function paused() external view returns (bool);\r\n    //    function locked() external view returns (bool);\r\n\r\n    function isTournament(address _tournamentAddress) external view returns (bool);\r\n\r\n    function getCreateUnicornFullPrice() external view returns (uint);\r\n    function getHybridizationFullPrice(uint _price) external view returns (uint);\r\n    function getSellUnicornFullPrice(uint _price) external view returns (uint);\r\n    function getCreateUnicornFullPriceInCandy() external view returns (uint);\r\n\r\n\r\n    //service\r\n    function registerInit(address _contract) external;\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract megaCandyInterface is ERC20 {\r\n    function transferFromSystem(address _from, address _to, uint256 _value) public returns (bool);\r\n    function burn(address _from, uint256 _value) public returns (bool);\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n}\r\n\r\ncontract DividendManagerInterface {\r\n    function payDividend() external payable;\r\n}\r\n\r\ncontract BlackBoxInterface {\r\n    function createGen0(uint _unicornId) public payable;\r\n    function geneCore(uint _childUnicornId, uint _parent1UnicornId, uint _parent2UnicornId) public payable;\r\n}\r\n\r\ncontract UnicornTokenInterface {\r\n\r\n    //ERC721\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n    function ownerOf(uint256 _unicornId) public view returns (address _owner);\r\n    function transfer(address _to, uint256 _unicornId) public;\r\n    function approve(address _to, uint256 _unicornId) public;\r\n    function takeOwnership(uint256 _unicornId) public;\r\n    function totalSupply() public constant returns (uint);\r\n    function owns(address _claimant, uint256 _unicornId) public view returns (bool);\r\n    function allowance(address _claimant, uint256 _unicornId) public view returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _unicornId) public;\r\n\r\n    //specific\r\n    function createUnicorn(address _owner) external returns (uint);\r\n    //    function burnUnicorn(uint256 _unicornId) external;\r\n    function getGen(uint _unicornId) external view returns (bytes);\r\n    function setGene(uint _unicornId, bytes _gene) external;\r\n    function updateGene(uint _unicornId, bytes _gene) external;\r\n    function getUnicornGenByte(uint _unicornId, uint _byteNo) external view returns (uint8);\r\n\r\n    function setName(uint256 _unicornId, string _name ) external returns (bool);\r\n    function plusFreezingTime(uint _unicornId) external;\r\n    function plusTourFreezingTime(uint _unicornId) external;\r\n    function minusFreezingTime(uint _unicornId, uint64 _time) external;\r\n    function minusTourFreezingTime(uint _unicornId, uint64 _time) external;\r\n    function isUnfreezed(uint _unicornId) external view returns (bool);\r\n    function isTourUnfreezed(uint _unicornId) external view returns (bool);\r\n\r\n    function marketTransfer(address _from, address _to, uint256 _unicornId) external;\r\n}\r\n\r\n\r\n\r\ncontract UnicornAccessControl {\r\n\r\n    UnicornManagementInterface public unicornManagement;\r\n\r\n    function UnicornAccessControl(address _unicornManagementAddress) public {\r\n        unicornManagement = UnicornManagementInterface(_unicornManagementAddress);\r\n        unicornManagement.registerInit(this);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == unicornManagement.ownerAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == unicornManagement.managerAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyCommunity() {\r\n        require(msg.sender == unicornManagement.communityAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyTournament() {\r\n        require(unicornManagement.isTournament(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!unicornManagement.paused());\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(unicornManagement.paused());\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyManagement() {\r\n        require(msg.sender == address(unicornManagement));\r\n        _;\r\n    }\r\n\r\n    modifier onlyBreeding() {\r\n        require(msg.sender == unicornManagement.unicornBreedingAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyGeneLab() {\r\n        require(msg.sender == unicornManagement.geneLabAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyBlackBox() {\r\n        require(msg.sender == unicornManagement.blackBoxAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyUnicornToken() {\r\n        require(msg.sender == unicornManagement.unicornTokenAddress());\r\n        _;\r\n    }\r\n\r\n    function isGamePaused() external view returns (bool) {\r\n        return unicornManagement.paused();\r\n    }\r\n}\r\n\r\ncontract UnicornBreeding is UnicornAccessControl {\r\n    using SafeMath for uint;\r\n    //onlyOwner\r\n    UnicornTokenInterface public unicornToken; //only on deploy\r\n    BlackBoxInterface public blackBox;\r\n\r\n    event HybridizationAdd(uint indexed unicornId, uint price);\r\n    event HybridizationAccept(uint indexed firstUnicornId, uint indexed secondUnicornId, uint newUnicornId);\r\n    event HybridizationDelete(uint indexed unicornId);\r\n    event FundsTransferred(address dividendManager, uint value);\r\n    event CreateUnicorn(address indexed owner, uint indexed unicornId, uint parent1, uint  parent2);\r\n    event NewGen0Limit(uint limit);\r\n    event NewGen0Step(uint step);\r\n\r\n\r\n    event OfferAdd(uint256 indexed unicornId, uint priceEth, uint priceCandy);\r\n    event OfferDelete(uint256 indexed unicornId);\r\n    event UnicornSold(uint256 indexed unicornId);\r\n\r\n    event NewSellDividendPercent(uint percentCandy, uint percentCandyEth);\r\n\r\n    ERC20 public candyToken;\r\n    megaCandyInterface public megaCandyToken;\r\n\r\n    uint public sellDividendPercentCandy = 375; //OnlyManager 4 digits. 10.5% = 1050\r\n    uint public sellDividendPercentEth = 375; //OnlyManager 4 digits. 10.5% = 1050\r\n\r\n    //counter for gen0\r\n    uint public gen0Limit = 30000;\r\n    uint public gen0Count = 1805;\r\n    uint public gen0Step = 1000;\r\n\r\n    //counter for presale gen0\r\n    uint public gen0PresaleLimit = 1000;\r\n    uint public gen0PresaleCount = 0;\r\n\r\n    struct Hybridization{\r\n        uint listIndex;\r\n        uint price;\r\n        //        uint second_unicorn_id;\r\n        //        bool accepted;\r\n        bool exists;\r\n    }\r\n\r\n    // Mapping from unicorn ID to Hybridization struct\r\n    mapping (uint => Hybridization) public hybridizations;\r\n    mapping(uint => uint) public hybridizationList;\r\n    uint public hybridizationListSize = 0;\r\n\r\n\r\n    function() public payable {\r\n\r\n    }\r\n\r\n    function UnicornBreeding(address _unicornManagementAddress) UnicornAccessControl(_unicornManagementAddress) public {\r\n        candyToken = ERC20(unicornManagement.candyToken());\r\n\r\n    }\r\n\r\n    function init() onlyManagement whenPaused external {\r\n        unicornToken = UnicornTokenInterface(unicornManagement.unicornTokenAddress());\r\n        blackBox = BlackBoxInterface(unicornManagement.blackBoxAddress());\r\n        megaCandyToken = megaCandyInterface(unicornManagement.candyPowerToken());\r\n    }\r\n\r\n    function makeHybridization(uint _unicornId, uint _price) public {\r\n        require(unicornToken.owns(msg.sender, _unicornId));\r\n        require(unicornToken.isUnfreezed(_unicornId));\r\n        require(!hybridizations[_unicornId].exists);\r\n\r\n        hybridizations[_unicornId] = Hybridization({\r\n            price: _price,\r\n            exists: true,\r\n            listIndex: hybridizationListSize\r\n            });\r\n        hybridizationList[hybridizationListSize++] = _unicornId;\r\n\r\n        emit HybridizationAdd(_unicornId, _price);\r\n    }\r\n\r\n\r\n    function acceptHybridization(uint _firstUnicornId, uint _secondUnicornId) whenNotPaused public payable {\r\n        require(unicornToken.owns(msg.sender, _secondUnicornId));\r\n        require(_secondUnicornId != _firstUnicornId);\r\n        require(unicornToken.isUnfreezed(_firstUnicornId) && unicornToken.isUnfreezed(_secondUnicornId));\r\n        require(hybridizations[_firstUnicornId].exists);\r\n        require(msg.value == unicornManagement.oraclizeFee());\r\n        if (hybridizations[_firstUnicornId].price > 0) {\r\n            require(candyToken.transferFrom(msg.sender, this, getHybridizationPrice(_firstUnicornId)));\r\n        }\r\n\r\n        plusFreezingTime(_firstUnicornId);\r\n        plusFreezingTime(_secondUnicornId);\r\n        uint256 newUnicornId = unicornToken.createUnicorn(msg.sender);\r\n        //        BlackBoxInterface blackBox = BlackBoxInterface(unicornManagement.blackBoxAddress());\r\n        blackBox.geneCore.value(unicornManagement.oraclizeFee())(newUnicornId, _firstUnicornId, _secondUnicornId);\r\n        emit CreateUnicorn(msg.sender, newUnicornId, _firstUnicornId, _secondUnicornId);\r\n        if (hybridizations[_firstUnicornId].price > 0) {\r\n            candyToken.transfer(unicornToken.ownerOf(_firstUnicornId), hybridizations[_firstUnicornId].price);\r\n        }\r\n        emit HybridizationAccept(_firstUnicornId, _secondUnicornId, newUnicornId);\r\n        _deleteHybridization(_firstUnicornId);\r\n    }\r\n\r\n\r\n    function cancelHybridization (uint _unicornId) public {\r\n        require(unicornToken.owns(msg.sender,_unicornId));\r\n        require(hybridizations[_unicornId].exists);\r\n        _deleteHybridization(_unicornId);\r\n    }\r\n\r\n    function deleteHybridization(uint _unicornId) onlyUnicornToken external {\r\n        _deleteHybridization(_unicornId);\r\n    }\r\n\r\n    function _deleteHybridization(uint _unicornId) internal {\r\n        if (hybridizations[_unicornId].exists) {\r\n            hybridizations[hybridizationList[--hybridizationListSize]].listIndex = hybridizations[_unicornId].listIndex;\r\n            hybridizationList[hybridizations[_unicornId].listIndex] = hybridizationList[hybridizationListSize];\r\n            delete hybridizationList[hybridizationListSize];\r\n            delete hybridizations[_unicornId];\r\n            emit HybridizationDelete(_unicornId);\r\n        }\r\n    }\r\n\r\n    //Create new 0 gen\r\n    function createUnicorn() public payable whenNotPaused returns(uint256)   {\r\n        require(msg.value == getCreateUnicornPrice());\r\n        return _createUnicorn(msg.sender);\r\n    }\r\n\r\n    function createUnicornForCandy() public payable whenNotPaused returns(uint256)   {\r\n        require(msg.value == unicornManagement.oraclizeFee());\r\n        require(candyToken.transferFrom(msg.sender, this, getCreateUnicornPriceInCandy()));\r\n        return _createUnicorn(msg.sender);\r\n    }\r\n\r\n    function createPresaleUnicorns(uint _count, address _owner) public payable onlyManager whenPaused returns(bool) {\r\n        require(gen0PresaleCount.add(_count) <= gen0PresaleLimit);\r\n        uint256 newUnicornId;\r\n        address owner = _owner == address(0) ? msg.sender : _owner;\r\n        for (uint i = 0; i < _count; i++){\r\n            newUnicornId = unicornToken.createUnicorn(owner);\r\n            blackBox.createGen0(newUnicornId);\r\n            emit CreateUnicorn(owner, newUnicornId, 0, 0);\r\n            gen0Count = gen0Count.add(1);\r\n            gen0PresaleCount = gen0PresaleCount.add(1);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _createUnicorn(address _owner) private returns(uint256) {\r\n        require(gen0Count < gen0Limit);\r\n        uint256 newUnicornId = unicornToken.createUnicorn(_owner);\r\n        //        BlackBoxInterface blackBox = BlackBoxInterface(unicornManagement.blackBoxAddress());\r\n        blackBox.createGen0.value(unicornManagement.oraclizeFee())(newUnicornId);\r\n        emit CreateUnicorn(_owner, newUnicornId, 0, 0);\r\n        gen0Count = gen0Count.add(1);\r\n        return newUnicornId;\r\n    }\r\n\r\n    function plusFreezingTime(uint _unicornId) private {\r\n        unicornToken.plusFreezingTime(_unicornId);\r\n    }\r\n\r\n    function plusTourFreezingTime(uint _unicornId) onlyTournament public {\r\n        unicornToken.plusTourFreezingTime(_unicornId);\r\n    }\r\n\r\n    //change freezing time for megacandy\r\n    function minusFreezingTime(uint _unicornId, uint _count) public { \r\n        require(megaCandyToken.burn(msg.sender,   unicornManagement.subFreezingPrice().mul(_count)));\r\n        unicornToken.minusFreezingTime(_unicornId,  unicornManagement.subFreezingTime() * uint64(_count));\r\n    }\r\n\r\n    //change tour freezing time for megacandy\r\n    function minusTourFreezingTime(uint _unicornId, uint _count) public { \r\n        require(megaCandyToken.burn(msg.sender, unicornManagement.subTourFreezingPrice().mul(_count)));\r\n        unicornToken.minusTourFreezingTime(_unicornId, unicornManagement.subTourFreezingTime() * uint64(_count));\r\n    }\r\n\r\n    function getHybridizationPrice(uint _unicornId) public view returns (uint) {\r\n        return unicornManagement.getHybridizationFullPrice(hybridizations[_unicornId].price);\r\n    }\r\n\r\n    function getEtherFeeForPriceInCandy() public view returns (uint) {\r\n        return unicornManagement.oraclizeFee();\r\n    }\r\n\r\n    function getCreateUnicornPriceInCandy() public view returns (uint) {\r\n        return unicornManagement.getCreateUnicornFullPriceInCandy();\r\n    }\r\n\r\n\r\n    function getCreateUnicornPrice() public view returns (uint) {\r\n        return unicornManagement.getCreateUnicornFullPrice();\r\n    }\r\n\r\n\r\n    function withdrawTokens() onlyManager public {\r\n        require(candyToken.balanceOf(this) > 0); \r\n        candyToken.transfer(unicornManagement.walletAddress(), candyToken.balanceOf(this)); \r\n    }\r\n\r\n\r\n    function transferEthersToDividendManager(uint _value) onlyManager public {\r\n        require(address(this).balance >= _value);\r\n        DividendManagerInterface dividendManager = DividendManagerInterface(unicornManagement.dividendManagerAddress());\r\n        dividendManager.payDividend.value(_value)();\r\n        emit FundsTransferred(unicornManagement.dividendManagerAddress(), _value);\r\n    }\r\n\r\n\r\n    function setGen0Limit() external onlyCommunity {\r\n        require(gen0Count == gen0Limit);\r\n        gen0Limit = gen0Limit.add(gen0Step);\r\n        emit NewGen0Limit(gen0Limit);\r\n    }\r\n \r\n\r\n    ////MARKET\r\n    struct Offer{\r\n        uint marketIndex;\r\n        uint priceEth;\r\n        uint priceCandy;\r\n        bool exists;\r\n    }\r\n\r\n    // Mapping from unicorn ID to Offer struct\r\n    mapping (uint => Offer) public offers;\r\n    // Mapping from unicorn ID to offer ID\r\n    //    mapping (uint => uint) public unicornOffer;\r\n    // market index => offerId\r\n    mapping(uint => uint) public market;\r\n    uint public marketSize = 0;\r\n\r\n\r\n    function sellUnicorn(uint _unicornId, uint _priceEth, uint _priceCandy) public {\r\n        require(unicornToken.owns(msg.sender, _unicornId));\r\n        require(!offers[_unicornId].exists);\r\n\r\n        offers[_unicornId] = Offer({\r\n            priceEth: _priceEth,\r\n            priceCandy: _priceCandy,\r\n            exists: true,\r\n            marketIndex: marketSize\r\n            });\r\n\r\n        market[marketSize++] = _unicornId;\r\n\r\n        emit OfferAdd(_unicornId, _priceEth, _priceCandy);\r\n    }\r\n\r\n\r\n    function buyUnicornWithEth(uint _unicornId) public payable {\r\n        require(offers[_unicornId].exists);\r\n        uint price = offers[_unicornId].priceEth;\r\n        //Выставлять на продажу за 0 можно. Но нужно проверить чтобы и вторая цена также была 0\r\n        if (price == 0) {\r\n            require(offers[_unicornId].priceCandy == 0);\r\n        }\r\n        require(msg.value == getOfferPriceEth(_unicornId));\r\n\r\n        address owner = unicornToken.ownerOf(_unicornId);\r\n\r\n        emit UnicornSold(_unicornId);\r\n        //deleteoffer вызовется внутри transfer\r\n        unicornToken.marketTransfer(owner, msg.sender, _unicornId);\r\n        owner.transfer(price);\r\n    }\r\n\r\n\r\n    function buyUnicornWithCandy(uint _unicornId) public {\r\n        require(offers[_unicornId].exists);\r\n        uint price = offers[_unicornId].priceCandy;\r\n        //Выставлять на продажу за 0 можно. Но нужно проверить чтобы и вторая цена также была 0\r\n        if (price == 0) {\r\n            require(offers[_unicornId].priceEth == 0);\r\n        }\r\n\r\n        address owner = unicornToken.ownerOf(_unicornId);\r\n\r\n        if (price > 0) {\r\n            require(candyToken.transferFrom(msg.sender, this, getOfferPriceCandy(_unicornId)));\r\n            candyToken.transfer(owner, price);\r\n        }\r\n\r\n        emit UnicornSold(_unicornId);\r\n        //deleteoffer вызовется внутри transfer\r\n        unicornToken.marketTransfer(owner, msg.sender, _unicornId);\r\n    }\r\n\r\n\r\n    function revokeUnicorn(uint _unicornId) public {\r\n        require(unicornToken.owns(msg.sender, _unicornId));\r\n        require(offers[_unicornId].exists);\r\n        _deleteOffer(_unicornId);\r\n    }\r\n\r\n\r\n    function deleteOffer(uint _unicornId) onlyUnicornToken external {\r\n        _deleteOffer(_unicornId);\r\n    }\r\n\r\n\r\n    function _deleteOffer(uint _unicornId) internal {\r\n        if (offers[_unicornId].exists) {\r\n            offers[market[--marketSize]].marketIndex = offers[_unicornId].marketIndex;\r\n            market[offers[_unicornId].marketIndex] = market[marketSize];\r\n            delete market[marketSize];\r\n            delete offers[_unicornId];\r\n            emit OfferDelete(_unicornId);\r\n        }\r\n    }\r\n\r\n\r\n    function getOfferPriceEth(uint _unicornId) public view returns (uint) {\r\n        return offers[_unicornId].priceEth.add(valueFromPercent(offers[_unicornId].priceEth, sellDividendPercentEth));\r\n    }\r\n\r\n\r\n    function getOfferPriceCandy(uint _unicornId) public view returns (uint) {\r\n        return offers[_unicornId].priceCandy.add(valueFromPercent(offers[_unicornId].priceCandy, sellDividendPercentCandy));\r\n    }\r\n\r\n\r\n    function setSellDividendPercent(uint _percentCandy, uint _percentEth) public onlyManager {\r\n        //no more then 25%\r\n        require(_percentCandy < 2500 && _percentEth < 2500);\r\n\r\n        sellDividendPercentCandy = _percentCandy;\r\n        sellDividendPercentEth = _percentEth;\r\n        emit NewSellDividendPercent(_percentCandy, _percentEth);\r\n    }\r\n\r\n\r\n    //1% - 100, 10% - 1000 50% - 5000\r\n    function valueFromPercent(uint _value, uint _percent) internal pure returns (uint amount)    {\r\n        uint _amount = _value.mul(_percent).div(10000);\r\n        return (_amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isGamePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hybridizations\",\"outputs\":[{\"name\":\"listIndex\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"getHybridizationPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"makeHybridization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"getOfferPriceCandy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"market\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"},{\"name\":\"_priceEth\",\"type\":\"uint256\"},{\"name\":\"_priceCandy\",\"type\":\"uint256\"}],\"name\":\"sellUnicorn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"cancelHybridization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCreateUnicornPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"buyUnicornWithEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"minusFreezingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"minusTourFreezingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPresaleUnicorns\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createUnicornForCandy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unicornToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hybridizationList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"getOfferPriceEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"deleteOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0PresaleLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0PresaleCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"name\":\"marketIndex\",\"type\":\"uint256\"},{\"name\":\"priceEth\",\"type\":\"uint256\"},{\"name\":\"priceCandy\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createUnicorn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unicornManagement\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percentCandy\",\"type\":\"uint256\"},{\"name\":\"_percentEth\",\"type\":\"uint256\"}],\"name\":\"setSellDividendPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"revokeUnicorn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0Count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellDividendPercentCandy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blackBox\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"deleteHybridization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"buyUnicornWithCandy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"plusTourFreezingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0Step\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_firstUnicornId\",\"type\":\"uint256\"},{\"name\":\"_secondUnicornId\",\"type\":\"uint256\"}],\"name\":\"acceptHybridization\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEtherFeeForPriceInCandy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0Limit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellDividendPercentEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hybridizationListSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setGen0Limit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCreateUnicornPriceInCandy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferEthersToDividendManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"megaCandyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_unicornManagementAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"HybridizationAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"firstUnicornId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"secondUnicornId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newUnicornId\",\"type\":\"uint256\"}],\"name\":\"HybridizationAccept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"}],\"name\":\"HybridizationDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dividendManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FundsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parent1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parent2\",\"type\":\"uint256\"}],\"name\":\"CreateUnicorn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"NewGen0Limit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"step\",\"type\":\"uint256\"}],\"name\":\"NewGen0Step\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceCandy\",\"type\":\"uint256\"}],\"name\":\"OfferAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"}],\"name\":\"OfferDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"}],\"name\":\"UnicornSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"percentCandy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percentCandyEth\",\"type\":\"uint256\"}],\"name\":\"NewSellDividendPercent\",\"type\":\"event\"}]","ContractName":"UnicornBreeding","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000010cc060f6f9b2e5dcdb23f1361e4b368a7daec73","Library":"","SwarmSource":"bzzr://02fbaec93aa6785fe1ba1594dd1f9e6ec59a1d479aeff95bac55bd7183d68cf6"}]}