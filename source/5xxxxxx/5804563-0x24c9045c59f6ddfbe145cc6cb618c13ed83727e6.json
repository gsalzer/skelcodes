{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract ERC223 {\r\n  \r\n  function balanceOf(address who) constant returns (uint);\r\n  \r\n  function name() constant returns (string _name);\r\n  function symbol() constant returns (string _symbol);\r\n  function decimals() constant returns (uint8 _decimals);\r\n   \r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\ncontract ForeignToken {\r\n    function balanceOf(address _owner) constant public returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\n\r\ncontract ContractReceiver {\r\n     \r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n    \r\n    \r\n    function tokenFallback(address _from, uint _value, bytes _data){\r\n      TKN memory tkn;\r\n      tkn.sender = _from;\r\n      tkn.value = _value;\r\n      tkn.data = _data;\r\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n      tkn.sig = bytes4(u);\r\n      \r\n      /* tkn variable is analogue of msg variable of Ether transaction\r\n      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\r\n      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\r\n      *  tkn.data is data of token transaction   (analogue of msg.data)\r\n      *  tkn.sig is 4 bytes signature of function\r\n      *  if data of token transaction is a function execution\r\n      */\r\n    }\r\n}\r\n /**\r\n * ERC23 token by Dexaran\r\n *\r\n * https://github.com/Dexaran/ERC23-tokens\r\n */\r\n \r\n \r\n /* https://github.com/LykkeCity/EthereumApiDotNetCore/blob/master/src/ContractBuilder/contracts/token/SafeMath.sol */\r\ncontract SafeMath {\r\n    uint256 constant public MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert(x <= MAX_UINT256 - y);\r\n        return x + y;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert(x >= y);\r\n        return x - y;\r\n    }\r\n\r\n    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (y == 0) return 0;\r\n        assert(x <= MAX_UINT256 / y);\r\n        return x * y;\r\n    }\r\n}\r\n \r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract Haltable is Ownable {\r\n  bool public halted;\r\n\r\n  modifier stopInEmergency {\r\n    assert(!halted);\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    assert(halted);\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n  }\r\n\r\n}\r\n\r\ncontract Tablow is ERC223, SafeMath, Haltable {\r\n\r\n  mapping(address => uint) balances;\r\n  \r\n  string public symbol = \"TC\";\r\n    string public name = \"Tablow Club\";\r\n    uint8 public decimals = 18;\r\n    uint256  _totalSupply = 0;\r\n    uint256 _MaxDistribPublicSupply = 0;\r\n    uint256 _OwnerDistribSupply = 0;\r\n    uint256 _CurrentDistribPublicSupply = 0;\r\n    uint256 _FreeTokens = 0;\r\n    uint256 _Multiplier1 = 2;\r\n    uint256 _Multiplier2 = 3;\r\n    uint256 _LimitMultiplier1 = 4e15;\r\n    uint256 _LimitMultiplier2 = 8e15;\r\n    uint256 _HighDonateLimit = 5e16;\r\n    uint256 _BonusTokensPerETHdonated = 0;\r\n    address _DistribFundsReceiverAddress = 0;\r\n    address _remainingTokensReceiverAddress = 0;\r\n    address owner = 0;\r\n    bool setupDone = false;\r\n    bool IsDistribRunning = false;\r\n    bool DistribStarted = false;\r\n  \r\n  \r\n  // Function to access name of token .\r\n  function name() constant returns (string _name) {\r\n      return name;\r\n  }\r\n  // Function to access symbol of token .\r\n  function symbol() constant returns (string _symbol) {\r\n      return symbol;\r\n  }\r\n  // Function to access decimals of token .\r\n  function decimals() constant returns (uint8 _decimals) {\r\n      return decimals;\r\n  }\r\n  // Function to access total supply of tokens .\r\n   \r\n  \r\n   event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed _owner, uint256 _value);\r\n\r\n   \r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    mapping(address => bool) public Claimed;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Tablow() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function() public payable {\r\n        if (IsDistribRunning) {\r\n            uint256 _amount;\r\n            if (((_CurrentDistribPublicSupply + _amount) > _MaxDistribPublicSupply) && _MaxDistribPublicSupply > 0) revert();\r\n            if (!_DistribFundsReceiverAddress.send(msg.value)) revert();\r\n            if (Claimed[msg.sender] == false) {\r\n                _amount = _FreeTokens * 1e18;\r\n                _CurrentDistribPublicSupply += _amount;\r\n                balances[msg.sender] += _amount;\r\n                _totalSupply += _amount;\r\n                Transfer(this, msg.sender, _amount);\r\n                Claimed[msg.sender] = true;\r\n            }\r\n\r\n            require(msg.value <= _HighDonateLimit);\r\n\r\n            if (msg.value >= 1e15) {\r\n                if (msg.value >= _LimitMultiplier2) {\r\n                    _amount = msg.value * _BonusTokensPerETHdonated * _Multiplier2;\r\n                } else {\r\n                    if (msg.value >= _LimitMultiplier1) {\r\n                        _amount = msg.value * _BonusTokensPerETHdonated * _Multiplier1;\r\n                    } else {\r\n\r\n                        _amount = msg.value * _BonusTokensPerETHdonated;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                _CurrentDistribPublicSupply += _amount;\r\n                balances[msg.sender] += _amount;\r\n                _totalSupply += _amount;\r\n                Transfer(this, msg.sender, _amount);\r\n            }\r\n\r\n\r\n\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function SetupToken(string tokenName, string tokenSymbol, uint256 BonusTokensPerETHdonated, uint256 MaxDistribPublicSupply, uint256 OwnerDistribSupply, address remainingTokensReceiverAddress, address DistribFundsReceiverAddress, uint256 FreeTokens) public {\r\n        if (msg.sender == owner && !setupDone) {\r\n            symbol = tokenSymbol;\r\n            name = tokenName;\r\n            _FreeTokens = FreeTokens;\r\n            _BonusTokensPerETHdonated = BonusTokensPerETHdonated;\r\n            _MaxDistribPublicSupply = MaxDistribPublicSupply * 1e18;\r\n            if (OwnerDistribSupply > 0) {\r\n                _OwnerDistribSupply = OwnerDistribSupply * 1e18;\r\n                _totalSupply = _OwnerDistribSupply;\r\n                balances[owner] = _totalSupply;\r\n                _CurrentDistribPublicSupply += _totalSupply;\r\n                Transfer(this, owner, _totalSupply);\r\n            }\r\n            _DistribFundsReceiverAddress = DistribFundsReceiverAddress;\r\n            if (_DistribFundsReceiverAddress == 0) _DistribFundsReceiverAddress = owner;\r\n            _remainingTokensReceiverAddress = remainingTokensReceiverAddress;\r\n\r\n            setupDone = true;\r\n        }\r\n    }\r\n\r\n    function SetupMultipliers(uint256 Multiplier1inX, uint256 Multiplier2inX, uint256 LimitMultiplier1inWei, uint256 LimitMultiplier2inWei, uint256 HighDonateLimitInWei) onlyOwner public {\r\n        _Multiplier1 = Multiplier1inX;\r\n        _Multiplier2 = Multiplier2inX;\r\n        _LimitMultiplier1 = LimitMultiplier1inWei;\r\n        _LimitMultiplier2 = LimitMultiplier2inWei;\r\n        _HighDonateLimit = HighDonateLimitInWei;\r\n    }\r\n\r\n    function SetBonus(uint256 BonusTokensPerETHdonated) onlyOwner public {\r\n        _BonusTokensPerETHdonated = BonusTokensPerETHdonated;\r\n    }\r\n\r\n    function SetFreeTokens(uint256 FreeTokens) onlyOwner public {\r\n        _FreeTokens = FreeTokens;\r\n    }\r\n\r\n    function StartDistrib() public returns(bool success) {\r\n        if (msg.sender == owner && !DistribStarted && setupDone) {\r\n            DistribStarted = true;\r\n            IsDistribRunning = true;\r\n        } else {\r\n            revert();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function StopDistrib() public returns(bool success) {\r\n        if (msg.sender == owner && IsDistribRunning) {\r\n            if (_remainingTokensReceiverAddress != 0 && _MaxDistribPublicSupply > 0) {\r\n                uint256 _remainingAmount = _MaxDistribPublicSupply - _CurrentDistribPublicSupply;\r\n                if (_remainingAmount > 0) {\r\n                    balances[_remainingTokensReceiverAddress] += _remainingAmount;\r\n                    _totalSupply += _remainingAmount;\r\n                    Transfer(this, _remainingTokensReceiverAddress, _remainingAmount);\r\n                }\r\n            }\r\n            DistribStarted = false;\r\n            IsDistribRunning = false;\r\n        } else {\r\n            revert();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function distribution(address[] addresses, uint256 _amount) onlyOwner public {\r\n\r\n        uint256 _remainingAmount = _MaxDistribPublicSupply - _CurrentDistribPublicSupply;\r\n        require(addresses.length <= 255);\r\n        require(_amount <= _remainingAmount);\r\n        _amount = _amount * 1e18;\r\n\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            require(_amount <= _remainingAmount);\r\n            _CurrentDistribPublicSupply += _amount;\r\n            balances[addresses[i]] += _amount;\r\n            _totalSupply += _amount;\r\n            Transfer(this, addresses[i], _amount);\r\n\r\n        }\r\n\r\n        if (_CurrentDistribPublicSupply >= _MaxDistribPublicSupply) {\r\n            DistribStarted = false;\r\n            IsDistribRunning = false;\r\n        }\r\n    }\r\n\r\n    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner public {\r\n\r\n        uint256 _remainingAmount = _MaxDistribPublicSupply - _CurrentDistribPublicSupply;\r\n        uint256 _amount;\r\n\r\n        require(addresses.length <= 255);\r\n        require(addresses.length == amounts.length);\r\n\r\n        for (uint8 i = 0; i < addresses.length; i++) {\r\n            _amount = amounts[i] * 1e18;\r\n            require(_amount <= _remainingAmount);\r\n            _CurrentDistribPublicSupply += _amount;\r\n            balances[addresses[i]] += _amount;\r\n            _totalSupply += _amount;\r\n            Transfer(this, addresses[i], _amount);\r\n\r\n\r\n            if (_CurrentDistribPublicSupply >= _MaxDistribPublicSupply) {\r\n                DistribStarted = false;\r\n                IsDistribRunning = false;\r\n            }\r\n        }\r\n    }\r\n\r\n function BurnTokens(uint256 amount) public returns(bool success) {\r\n        uint256 _amount = amount * 1e18;\r\n        if (balances[msg.sender] >= _amount) {\r\n            balances[msg.sender] -= _amount;\r\n            _totalSupply -= _amount;\r\n            Burn(msg.sender, _amount);\r\n            Transfer(msg.sender, 0, _amount);\r\n        } else {\r\n            revert();\r\n        }\r\n        return true;\r\n    }\r\n\r\n     \r\n\r\n    function MaxDistribPublicSupply_() public constant returns(uint256 MaxDistribPublicSupply) {\r\n        return _MaxDistribPublicSupply;\r\n    }\r\n\r\n    function OwnerDistribSupply_() public constant returns(uint256 OwnerDistribSupply) {\r\n        return _OwnerDistribSupply;\r\n    }\r\n\r\n    function CurrentDistribPublicSupply_() public constant returns(uint256 CurrentDistribPublicSupply) {\r\n        return _CurrentDistribPublicSupply;\r\n    }\r\n\r\n    function RemainingTokensReceiverAddress() public constant returns(address remainingTokensReceiverAddress) {\r\n        return _remainingTokensReceiverAddress;\r\n    }\r\n\r\n    function DistribFundsReceiverAddress() public constant returns(address DistribfundsReceiver) {\r\n        return _DistribFundsReceiverAddress;\r\n    }\r\n\r\n    function Owner() public constant returns(address ownerAddress) {\r\n        return owner;\r\n    }\r\n\r\n    function SetupDone() public constant returns(bool setupDoneFlag) {\r\n        return setupDone;\r\n    }\r\n\r\n    function IsDistribRunningFalg_() public constant returns(bool IsDistribRunningFalg) {\r\n        return IsDistribRunning;\r\n    }\r\n     function totalSupply() public constant returns(uint256 totalSupplyValue) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function IsDistribStarted() public constant returns(bool IsDistribStartedFlag) {\r\n        return DistribStarted;\r\n    }\r\n function approve(address _spender, uint256 _amount) public returns(bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\nfunction withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\r\n        ForeignToken token = ForeignToken(_tokenContract);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(owner, amount);\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n  // Function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\r\n      \r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, _data);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n}\r\n  \r\n  // Standard function transfer similar to ERC20 transfer with no _data .\r\n  // Added due to backwards compatibility reasons .\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n      \r\n    //standard function transfer similar to ERC20 transfer with no _data\r\n    //added due to backwards compatibility reasons\r\n    bytes memory empty;\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, empty);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, empty);\r\n    }\r\n}\r\n\r\n//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) private returns (bool is_contract) {\r\n      uint length;\r\n      assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        if(length>0) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n  //function that is called when transaction target is an address\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    assert(balanceOf(msg.sender) >= _value);\r\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n    balances[_to] = safeAdd(balanceOf(_to), _value);\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    assert(balanceOf(msg.sender) >= _value);\r\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n    balances[_to] = safeAdd(balanceOf(_to), _value);\r\n    ContractReceiver reciever = ContractReceiver(_to);\r\n    reciever.tokenFallback(msg.sender, _value, _data);\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n}\r\n\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Multiplier1inX\",\"type\":\"uint256\"},{\"name\":\"Multiplier2inX\",\"type\":\"uint256\"},{\"name\":\"LimitMultiplier1inWei\",\"type\":\"uint256\"},{\"name\":\"LimitMultiplier2inWei\",\"type\":\"uint256\"},{\"name\":\"HighDonateLimitInWei\",\"type\":\"uint256\"}],\"name\":\"SetupMultipliers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupplyValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StopDistrib\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurrentDistribPublicSupply_\",\"outputs\":[{\"name\":\"CurrentDistribPublicSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StartDistrib\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsDistribStarted\",\"outputs\":[{\"name\":\"IsDistribStartedFlag\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"BonusTokensPerETHdonated\",\"type\":\"uint256\"},{\"name\":\"MaxDistribPublicSupply\",\"type\":\"uint256\"},{\"name\":\"OwnerDistribSupply\",\"type\":\"uint256\"},{\"name\":\"remainingTokensReceiverAddress\",\"type\":\"address\"},{\"name\":\"DistribFundsReceiverAddress\",\"type\":\"address\"},{\"name\":\"FreeTokens\",\"type\":\"uint256\"}],\"name\":\"SetupToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"BonusTokensPerETHdonated\",\"type\":\"uint256\"}],\"name\":\"SetBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"FreeTokens\",\"type\":\"uint256\"}],\"name\":\"SetFreeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsDistribRunningFalg_\",\"outputs\":[{\"name\":\"IsDistribRunningFalg\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DistribFundsReceiverAddress\",\"outputs\":[{\"name\":\"DistribfundsReceiver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SetupDone\",\"outputs\":[{\"name\":\"setupDoneFlag\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OwnerDistribSupply_\",\"outputs\":[{\"name\":\"OwnerDistribSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RemainingTokensReceiverAddress\",\"outputs\":[{\"name\":\"remainingTokensReceiverAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxDistribPublicSupply_\",\"outputs\":[{\"name\":\"MaxDistribPublicSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"Tablow","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5b23cf85d782ec95f475c23503069715c8962be52119eb6b228f4a20cd169ca4"}]}