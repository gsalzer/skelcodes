{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n\r\n    /**\r\n     * The address whcih deploys this contrcat is automatically assgined ownership.\r\n     * */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Functions with this modifier can only be executed by the owner of the contract. \r\n     * */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    /**\r\n    * Transfers ownership to new Ethereum address. This function can only be called by the \r\n    * owner.\r\n    * @param _newOwner the address to be granted ownership.\r\n    **/\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != 0x0);\r\n        OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract ERC20TransferInterface {\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function balanceOf(address who) constant public returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\ncontract MultiSigWallet is Ownable {\r\n\r\n    event AddressAuthorised(address indexed addr);\r\n    event AddressUnauthorised(address indexed addr);\r\n    event TransferOfEtherRequested(address indexed by, address indexed to, uint256 valueInWei);\r\n    event EthTransactionConfirmed(address indexed by);\r\n    event EthTransactionRejected(address indexed by);\r\n    event TransferOfErc20Requested(address indexed by, address indexed to, address indexed token, uint256 value);\r\n    event Erc20TransactionConfirmed(address indexed by);\r\n    event Erc20TransactionRejected(address indexed by);\r\n\r\n    /**\r\n    * Struct exists to hold data associated with the requests of ETH transactions. \r\n    **/\r\n    struct EthTransactionRequest {\r\n        address _from;\r\n        address _to;\r\n        uint256 _valueInWei;\r\n    }\r\n\r\n    /**\r\n    * Struct exists to hold data associated with the requests of ERC20 token transactions. \r\n    **/\r\n    struct Erc20TransactionRequest {\r\n        address _from;\r\n        address _to;\r\n        address _token;\r\n        uint256 _value;\r\n    }\r\n\r\n    EthTransactionRequest public latestEthTxRequest;\r\n    Erc20TransactionRequest public latestErc20TxRequest;\r\n\r\n    mapping (address => bool) public isAuthorised;\r\n\r\n\r\n    /**\r\n    * Constructor initializes the isOwner mapping. \r\n    **/\r\n    function MultiSigWallet() public {\r\n \r\n        isAuthorised[0xF748D2322ADfE0E9f9b262Df6A2aD6CBF79A541A] = true; //account 1\r\n        isAuthorised[0x4BbBbDd42c7aab36BeA6A70a0cB35d6C20Be474E] = true; //account 2\r\n        isAuthorised[0x2E661Be8C26925DDAFc25EEe3971efb8754E6D90] = true; //account 3\r\n        isAuthorised[0x1ee9b4b8c9cA6637eF5eeCEE62C9e56072165AAF] = true; //account 4\r\n\r\n    }\r\n\r\n    modifier onlyAuthorisedAddresses {\r\n        require(isAuthorised[msg.sender] = true);\r\n        _;\r\n    }\r\n\r\n    modifier validEthConfirmation {\r\n        require(msg.sender != latestEthTxRequest._from);\r\n        _;\r\n    }\r\n\r\n    modifier validErc20Confirmation {\r\n        require(msg.sender != latestErc20TxRequest._from);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * Fallback function makes it possible for the contract to receive ETH. \r\n    **/\r\n    function() public payable { }\r\n\r\n    /**\r\n    * Allows the owner to authorise an address to approve and request the transfer of ETH and\r\n    * ERC20 tokens.\r\n    **/\r\n    function authoriseAddress(address _addr) public onlyOwner {\r\n        require(_addr != 0x0 && !isAuthorised[_addr]);\r\n        isAuthorised[_addr] = true;\r\n        AddressAuthorised(_addr);\r\n    }\r\n\r\n    /**\r\n    * Allows the owner to unauthorise an address from approving or requesting the transfer of ETH\r\n    * and ERC20 tokens.\r\n    **/\r\n    function unauthoriseAddress(address _addr) public onlyOwner {\r\n        require(isAuthorised[_addr] && _addr != owner);\r\n        isAuthorised[_addr] = false;\r\n        AddressUnauthorised(_addr);\r\n    }\r\n\r\n    /**\r\n    * Creates an ETH transaction request which will be stored in the contract's state. The transaction\r\n    * will only go through if it is confirmed by at least one more owner address. If this function is \r\n    * called before a previous ETH transaction request has been confirmed, then it will be overridden. This\r\n    * function can only be called by one of the owner addresses. \r\n    * \r\n    * @param _to The address of the recipient\r\n    * @param _valueInWei The amount of ETH to send specified in units of wei\r\n    **/\r\n    function requestTransferOfETH(address _to, uint256 _valueInWei) public onlyAuthorisedAddresses {\r\n        require(_to != 0x0 && _valueInWei > 0);\r\n        latestEthTxRequest = EthTransactionRequest(msg.sender, _to, _valueInWei);\r\n        TransferOfEtherRequested(msg.sender, _to, _valueInWei);\r\n    }\r\n\r\n    /**\r\n    * Creates an ERC20 transaction request which will be stored in the contract's state. The transaction\r\n    * will only go through if it is confirmed by at least one more owner address. If this function is \r\n    * called before a previous ERC20 transaction request has been confirmed, then it will be overridden. This\r\n    * function can only be called by one of the owner addresses. \r\n    * \r\n    * @param _token The address of the ERC20 token contract\r\n    * @param _to The address of the recipient\r\n    * @param _value The amount of tokens to be sent\r\n    **/\r\n    function requestErc20Transfer(address _token, address _to, uint256 _value) public onlyAuthorisedAddresses {\r\n        ERC20TransferInterface token = ERC20TransferInterface(_token);\r\n        require(_to != 0x0 && _value > 0 && token.balanceOf(address(this)) >= _value);\r\n        latestErc20TxRequest = Erc20TransactionRequest(msg.sender, _to, _token, _value);\r\n        TransferOfErc20Requested(msg.sender, _to, _token, _value);\r\n    }\r\n\r\n    /**\r\n    * Confirms previously requested ETH transactions. This function can only be called by one of the owner addresses\r\n    * excluding the address which initially made the request. \r\n    **/\r\n    function confirmEthTransactionRequest() public onlyAuthorisedAddresses validEthConfirmation  {\r\n        require(isAuthorised[latestEthTxRequest._from] && latestEthTxRequest._to != 0x0 && latestEthTxRequest._valueInWei > 0);\r\n        latestEthTxRequest._to.transfer(latestEthTxRequest._valueInWei);\r\n        latestEthTxRequest = EthTransactionRequest(0x0, 0x0, 0);\r\n        EthTransactionConfirmed(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * Confirms previously requested ERC20 transactions. This function can only be called by one of the owner addresses\r\n    * excluding the address which initially made the request. \r\n    **/\r\n    function confirmErc20TransactionRequest() public onlyAuthorisedAddresses validErc20Confirmation {\r\n        require(isAuthorised[latestErc20TxRequest._from] && latestErc20TxRequest._to != 0x0 && latestErc20TxRequest._value != 0 && latestErc20TxRequest._token != 0x0);\r\n        ERC20TransferInterface token = ERC20TransferInterface(latestErc20TxRequest._token);\r\n        token.transfer(latestErc20TxRequest._to,latestErc20TxRequest._value);\r\n        latestErc20TxRequest = Erc20TransactionRequest(0x0, 0x0, 0x0, 0);\r\n        Erc20TransactionConfirmed(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * Rejects ETH transaction requests and erases all data associated with the request. This function can only be called\r\n    * by one of the owner addresses. \r\n    **/\r\n    function rejectEthTransactionRequest() public onlyAuthorisedAddresses {\r\n        latestEthTxRequest = EthTransactionRequest(0x0, 0x0, 0);\r\n        EthTransactionRejected(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * Rejects ERC20 transaction requests and erases all data associated with the request. This function can only be called\r\n    * by one of the owner addresses. \r\n    **/\r\n    function rejectErx20TransactionRequest() public onlyAuthorisedAddresses {\r\n        latestErc20TxRequest = Erc20TransactionRequest(0x0, 0x0, 0x0, 0);\r\n        Erc20TransactionRejected(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * Returns the data associated with the latest ETH transaction request in the form of a touple. This data includes:\r\n    * the owner address which requested the transfer, the address of the recipient and the value of the transfer \r\n    * specified in units of wei. \r\n    **/\r\n    function viewLatestEthTransactionRequest() public view returns(address from, address to, uint256 valueInWei) {\r\n        return (latestEthTxRequest._from, latestEthTxRequest._to, latestEthTxRequest._valueInWei);\r\n    }\r\n\r\n    /**\r\n    * Returns the data associated with the latest ERC20 transaction request in the form of a touple. This data includes:\r\n    * the owner address which requested the transfer, the address of the recipient, the address of the ERC20 token contract\r\n    * and the amount of tokens to send. \r\n    **/\r\n    function viewLatestErc20TransactionRequest() public view returns(address from, address to, address token, uint256 value) {\r\n        return(latestErc20TxRequest._from, latestErc20TxRequest._to, latestErc20TxRequest._token, latestErc20TxRequest._value);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_valueInWei\",\"type\":\"uint256\"}],\"name\":\"requestTransferOfETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmErc20TransactionRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestErc20TxRequest\",\"outputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuthorised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unauthoriseAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewLatestEthTransactionRequest\",\"outputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"valueInWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rejectErx20TransactionRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewLatestErc20TransactionRequest\",\"outputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmEthTransactionRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"authoriseAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"requestErc20Transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestEthTxRequest\",\"outputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_valueInWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rejectEthTransactionRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressAuthorised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressUnauthorised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"valueInWei\",\"type\":\"uint256\"}],\"name\":\"TransferOfEtherRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"EthTransactionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"EthTransactionRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferOfErc20Requested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"Erc20TransactionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"Erc20TransactionRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MultiSigWallet","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8efae109b49da16be6edea5c57f2d0029ab2c84b13992bd9435cdbe330bd73c8"}]}