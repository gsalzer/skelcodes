{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath32\r\n * @dev SafeMath library implemented for uint32\r\n */\r\nlibrary SafeMath32 {\r\n\r\n  function mul(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint32 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint32 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    uint32 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath16\r\n * @dev SafeMath library implemented for uint16\r\n */\r\nlibrary SafeMath16 {\r\n\r\n  function mul(uint16 a, uint16 b) internal pure returns (uint16) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint16 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint16 a, uint16 b) internal pure returns (uint16) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint16 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint16 a, uint16 b) internal pure returns (uint16) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint16 a, uint16 b) internal pure returns (uint16) {\r\n    uint16 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract ERC721 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n}\r\ncontract FootBall is Ownable,ERC721{\r\n    using SafeMath for uint256;\r\n    uint public drawFee = 0.05 ether;\r\n    uint public defendFee = 0.01 ether;\r\n    uint public inviteRate = 5;\r\n    uint coolDownTime = 24 hours;\r\n    uint public playerInDraw = 0;\r\n    uint backFee = 75;\r\n    event newPlayer(uint _id,uint16 _attack);\r\n    event drawedPlayer(uint _id,address indexed _to,uint _time);\r\n    event battleLog(uint _playerA,uint _playerB,uint _result,uint _rdId,address indexed _addressA,address indexed _addressB);\r\n    event playerDefend(uint _id,uint _time);\r\n    event playerBack(uint _id , address indexed _address);\r\n    event purChase(uint _id, address _newowner, address _oldowner);\r\n    event inviteBack(address _from,address _to, uint _fee);\r\n    //name&pic store in db;\r\n    struct Player{\r\n        uint256 sellPrice;\r\n        uint256 readytime;\r\n        uint16 attack;\r\n        uint16 winCount;\r\n        uint16 lossCount;\r\n        uint8 isSell;\r\n        uint8 isDraw;\r\n    }\r\n    Player[] public players; \r\n    mapping(uint=>address) playerToOwner;\r\n    mapping(address=>uint) ownerPlayerCount;\r\n    mapping (uint => address) playerApprovals;\r\n    //modifier\r\n    modifier onlyOwnerOf(uint _id) {\r\n        require(msg.sender == playerToOwner[_id]);\r\n        _;\r\n    }\r\n    //owner draw _money\r\n    function withdraw() external onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    function() payable public{}\r\n    //change fee\r\n    function changeDrawFee(uint _money)public onlyOwner{ \r\n        drawFee = _money;\r\n    }\r\n    function changeDefendFee(uint _money) public onlyOwner{\r\n        defendFee = _money;\r\n    }\r\n    function changeCoolDownTime(uint _time) public onlyOwner{\r\n        coolDownTime = _time;\r\n    }\r\n    function changeInviteRate(uint _rate) public onlyOwner{\r\n        inviteRate = _rate;\r\n    }\r\n    //create player;\r\n    function createPlayer(uint16 _attack) public onlyOwner{ \r\n      uint id = players.push (Player(0 ether,0,_attack,0,0,0,0)) - 1;\r\n      playerInDraw = playerInDraw.add(1);\r\n      emit newPlayer(id,_attack);\r\n    }\r\n    //draw card\r\n    function drawPlayer(address _address) public payable returns (uint playerId){\r\n        require(msg.value == drawFee && playerInDraw > 0);\r\n        for(uint i =0;i < players.length;i++){ \r\n            if(players[i].isDraw == 0){ \r\n                players[i].isDraw = 1;\r\n                playerInDraw  = playerInDraw.sub(1);\r\n                playerToOwner[i] = msg.sender;\r\n                ownerPlayerCount[msg.sender] = ownerPlayerCount[msg.sender].add(1);\r\n                if(_address != 0){ \r\n                 uint inviteFee = msg.value * 5 / 100;\r\n                 _address.transfer(inviteFee);\r\n                 emit inviteBack(msg.sender,_address,inviteFee);\r\n                }\r\n                emit drawedPlayer(i,msg.sender,now);\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    //battle \r\n    function playerAttack(uint _playerA,uint _playerB) external{\r\n        require(playerToOwner[_playerA] == msg.sender && players[_playerB].isDraw == 1 && playerToOwner[_playerA] != playerToOwner[_playerB]);\r\n        require(now >= players[_playerB].readytime);\r\n        uint rdId = uint256(keccak256(block.difficulty,now))%1000;\r\n        uint attackA;\r\n        uint attackB;\r\n        address ownerOfB = playerToOwner[_playerB];\r\n        if(rdId >= players[_playerA].attack){\r\n            attackA = rdId -  players[_playerA].attack;\r\n        }else{ \r\n            attackA =  players[_playerA].attack - rdId;\r\n        }\r\n        if(rdId >= players[_playerB].attack){\r\n            attackB =  rdId -  players[_playerB].attack;\r\n        }else{\r\n            attackB =  players[_playerB].attack - rdId;\r\n        }\r\n        uint8 result= 0;\r\n        if(attackA < attackB){\r\n            result = 1;\r\n            playerToOwner[_playerB] = msg.sender;\r\n            ownerPlayerCount[msg.sender] = ownerPlayerCount[msg.sender].add(1);\r\n            ownerPlayerCount[playerToOwner[_playerB]] = ownerPlayerCount[playerToOwner[_playerB]].sub(1);\r\n        }else{ \r\n            result = 2;\r\n            playerToOwner[_playerA] = playerToOwner[_playerB];\r\n            ownerPlayerCount[msg.sender] = ownerPlayerCount[msg.sender].sub(1);\r\n            ownerPlayerCount[playerToOwner[_playerB]] = ownerPlayerCount[playerToOwner[_playerB]].add(1);\r\n        }\r\n        emit battleLog(_playerA,_playerB,result,rdId,msg.sender,ownerOfB);\r\n    }\r\n    //defend\r\n    function getPlayerDefend(uint _id) public payable{\r\n        require(msg.value == defendFee && msg.sender == playerToOwner[_id]);\r\n        players[_id].readytime = uint256(now + coolDownTime);\r\n        emit playerDefend(_id,players[_id].readytime);\r\n    }\r\n    //sendback\r\n    function sendPlayerBack(uint[] _id) public {\r\n        for(uint i=0;i<_id.length;i++){ \r\n            uint256 id = _id[i];\r\n            require(playerToOwner[id] == msg.sender);\r\n            uint fee = drawFee * backFee/100;\r\n            //init player info \r\n            players[id].isDraw = 0;\r\n            players[id].isSell = 0;\r\n            players[id].readytime = 0;\r\n            players[id].sellPrice = 0 ether;\r\n            playerToOwner[id] = 0;\r\n            ownerPlayerCount[msg.sender] = ownerPlayerCount[msg.sender].sub(1);\r\n            playerInDraw  = playerInDraw.add(1);\r\n            if(address(this).balance >= fee){ \r\n                msg.sender.transfer(fee);    \r\n            }  \r\n            emit playerBack(id,msg.sender);\r\n        }\r\n\r\n    }\r\n    //ERC721 functions;\r\n    function balanceOf(address _owner) public view returns (uint256 _balance) {\r\n        return ownerPlayerCount[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner) {\r\n        return playerToOwner[_tokenId];\r\n    }\r\n    function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n        require(_from != _to);\r\n        ownerPlayerCount[_to] = ownerPlayerCount[_to].add(1) ;\r\n        ownerPlayerCount[_from] = ownerPlayerCount[_from].sub(1);\r\n        playerToOwner[_tokenId] = _to;\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n        playerApprovals[_tokenId] = _to;\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        require(playerApprovals[_tokenId] == msg.sender && playerToOwner[_tokenId] != msg.sender);\r\n        address owner = ownerOf(_tokenId);\r\n        _transfer(owner, msg.sender, _tokenId);\r\n    }\r\n    //market functions\r\n    function setPlayerPrice(uint _id,uint _price) public payable onlyOwnerOf(_id){ \r\n        require(msg.value == defendFee);\r\n        players[_id].isSell = 1;\r\n        players[_id].sellPrice = _price;\r\n        players[_id].readytime = uint256(now + coolDownTime);\r\n    }\r\n    function playerTakeOff(uint _id) public onlyOwnerOf(_id){\r\n        players[_id].isSell = 0;\r\n    }\r\n    function purchase(uint _id) public payable{\r\n        require(players[_id].isSell == 1 && msg.value == players[_id].sellPrice &&msg.sender != playerToOwner[_id]);\r\n        address owner = playerToOwner[_id];\r\n        ownerPlayerCount[owner] = ownerPlayerCount[owner].sub(1) ;\r\n        ownerPlayerCount[msg.sender] = ownerPlayerCount[msg.sender].add(1);\r\n        playerToOwner[_id] = msg.sender;\r\n        owner.transfer(msg.value);\r\n        emit purChase(_id,msg.sender,owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPlayerDefend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_attack\",\"type\":\"uint16\"}],\"name\":\"createPlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playerInDraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"playerTakeOff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_money\",\"type\":\"uint256\"}],\"name\":\"changeDefendFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_money\",\"type\":\"uint256\"}],\"name\":\"changeDrawFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defendFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256[]\"}],\"name\":\"sendPlayerBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeInviteRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"changeCoolDownTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPlayerPrice\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inviteRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerA\",\"type\":\"uint256\"},{\"name\":\"_playerB\",\"type\":\"uint256\"}],\"name\":\"playerAttack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"drawFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"drawPlayer\",\"outputs\":[{\"name\":\"playerId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"readytime\",\"type\":\"uint256\"},{\"name\":\"attack\",\"type\":\"uint16\"},{\"name\":\"winCount\",\"type\":\"uint16\"},{\"name\":\"lossCount\",\"type\":\"uint16\"},{\"name\":\"isSell\",\"type\":\"uint8\"},{\"name\":\"isDraw\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_attack\",\"type\":\"uint16\"}],\"name\":\"newPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"drawedPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_playerA\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_playerB\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rdId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_addressA\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_addressB\",\"type\":\"address\"}],\"name\":\"battleLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"playerDefend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"playerBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newowner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oldowner\",\"type\":\"address\"}],\"name\":\"purChase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"inviteBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FootBall","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://35f47af589e5d23f7314a6baeb095cca856355d07a01fd2dbeba967cae6a9ec0"}]}