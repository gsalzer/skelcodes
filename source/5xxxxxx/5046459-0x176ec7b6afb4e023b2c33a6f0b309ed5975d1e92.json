{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * Modifier avoids short address attacks.\r\n  * For more info check: https://ericrafaloff.com/analyzing-the-erc20-short-address-attack/\r\n  */\r\n  modifier onlyPayloadSize(uint size) {\r\n      if (msg.data.length < size + 4) {\r\n      revert();\r\n      }\r\n      _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    \r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool) {\r\n    require(_to != address(0));\r\n    require(allowed[_from][msg.sender] >= _value);\r\n    require(balances[_from] >= _value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until \r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() internal {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable  {\r\n    event Pause();\r\n    event Unpause();\r\n    event Freeze ();\r\n    event LogFreeze();\r\n\r\n    bool public paused = false;\r\n\r\n    address public founder;\r\n    \r\n    /**\r\n    * @dev modifier to allow actions only when the contract IS paused\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused || msg.sender == founder);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev modifier to allow actions only when the contract IS NOT paused\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n    \r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused onlyPayloadSize(2 * 32) returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused onlyPayloadSize(3 * 32) returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  //The functions below surve no real purpose. Even if one were to approve another to spend\r\n  //tokens on their behalf, those tokens will still only be transferable when the token contract\r\n  //is not paused.\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract MintableToken is PausableToken {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract TestToken is MintableToken {\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  event TokensBurned(address initiatior, address indexed _partner, uint256 _tokens);\r\n \r\n\r\n  /**\r\n   * @dev Constructor that gives the founder all of the existing tokens.\r\n   */\r\n    function TestToken() public {\r\n        name = \"FTest3\";\r\n        symbol = \"FOT3\";\r\n        decimals = 18;\r\n        totalSupply = 15000000e18;\r\n        founder = 0xc85095257946D88585ab12050890bdd6f07a80F0;\r\n        balances[founder] = totalSupply; //15,000,000 tokens for founders for marketing.\r\n        Transfer(0x0, founder, 15000000e18);\r\n        pause();\r\n    }\r\n\r\n    modifier onlyFounder {\r\n      require(msg.sender == founder);\r\n      _;\r\n    }\r\n\r\n    event NewFounderAddress(address indexed from, address indexed to);\r\n\r\n    function changeFounderAddress(address _newFounder) public onlyFounder {\r\n        require(_newFounder != 0x0);\r\n        NewFounderAddress(founder, _newFounder);\r\n        founder = _newFounder;\r\n    }\r\n\r\n    /*\r\n    * @dev Token burn function to be called at the time of token swap\r\n    * @param _partner address to use for token balance buring\r\n    * @param _tokens uint256 amount of tokens to burn\r\n    */\r\n    function burnTokens(address _partner, uint256 _tokens) public onlyFounder {\r\n        require(balances[_partner] >= _tokens);\r\n        balances[_partner] = balances[_partner].sub(_tokens);\r\n        totalSupply = totalSupply.sub(_tokens);\r\n        TokensBurned(msg.sender, _partner, _tokens);\r\n    }\r\n}\r\n\r\n\r\ncontract Crowdsale is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    TestToken public token;\r\n    uint256 public tokensForPreICO;\r\n    uint256 public tokenCapForFirstMainStage;\r\n    uint256 public tokenCapForSecondMainStage;\r\n    uint256 public tokenCapForThirdMainStage;\r\n    uint256 public tokenCapForFourthMainStage;\r\n    uint256 public totalTokensForSale;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    address public wallet;\r\n    uint256 public rate;\r\n    uint256 public weiRaised;\r\n\r\n    uint256[4] public ICObonusStages;\r\n\r\n    uint256 public preICOduration;\r\n    bool public mainSaleActive;\r\n\r\n    uint256 public tokensSold;\r\n\r\n    /**\r\n    * event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event ICOSaleExtended(uint256 newEndTime);\r\n\r\n    function Crowdsale() public {\r\n        token = new TestToken();  //msg.sender is passed as the founder wallet which will recieve the 15,000,000 tokens\r\n        startTime = now; \r\n        rate = 1160;\r\n        wallet = 0xc85095257946D88585ab12050890bdd6f07a80F0;\r\n        tokensForPreICO = 4500000e18;\r\n\r\n        tokenCapForFirstMainStage = 11500000e18;  //7,000,000 + 4,500,000\r\n        tokenCapForSecondMainStage = 18500000e18;  //11,500,000 + 7,000,000\r\n        tokenCapForThirdMainStage = 25500000e18;  //18,500,000 + 7,000,000\r\n        tokenCapForFourthMainStage = 35000000e18;  //25,500,000 + 9,500,000\r\n\r\n        totalTokensForSale = 35000000e18;\r\n        tokensSold = 0;\r\n\r\n        preICOduration = now.add(30 minutes);\r\n        endTime = preICOduration;\r\n\r\n        mainSaleActive = false;\r\n    }\r\n\r\n    function() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address _addr) public payable {\r\n        require(validPurchase() && tokensSold < totalTokensForSale);\r\n        require(_addr != 0x0 && msg.value > 100 finney);  \r\n        uint256 toMint;\r\n        if(now <= preICOduration) {\r\n            if(tokensSold >= tokensForPreICO) { revert(); }\r\n            toMint = msg.value.mul(rate.mul(2));\r\n        } else {\r\n            if(!mainSaleActive) { revert(); }\r\n            toMint = msg.value.mul(getRateWithBonus());\r\n        }\r\n        tokensSold = tokensSold.add(toMint);\r\n        token.mint(_addr, toMint);\r\n        forwardFunds();\r\n    }\r\n\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    function processOfflinePurchase(address _to, uint256 _toMint) public onlyOwner {\r\n        require(tokensSold.add(_toMint) <= totalTokensForSale);\r\n        require(_toMint > 0 && _to != 0x0);\r\n        tokensSold = tokensSold.add(_toMint);\r\n        token.mint(_to, _toMint);\r\n    }\r\n\r\n    function validPurchase() internal view returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;                                 // Dins periode total ICO\r\n        bool nonZeroPurchase = msg.value != 0;                                                  // ETH enviats diferent de 0\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n\r\n    function getRateWithBonus() internal view returns (uint256 rateWithDiscount) {\r\n        if (now > preICOduration && tokensSold < totalTokensForSale) {\r\n            return rate.mul(getCurrentBonus()).div(100).add(rate);\r\n            return rateWithDiscount;\r\n        }\r\n        return rate;\r\n    }\r\n\r\n    /**\r\n    * Function is called when the buy function is invoked  only after the pre sale duration and returns \r\n    * the current discount in percentage. In this example, the discount starts at 20% and reduces by 5% for \r\n    * every discount stage that has passed. After the 8th week, the discount percentage will be set to 0.\r\n    *\r\n    * day 31 - 37   / week 1: 20%\r\n    * day 38 - 44   / week 2: 15%\r\n    * day 45 - 51   / week 3: 10%\r\n    * day 52 - 58   / week 4:  0%\r\n    */\r\n    function getCurrentBonus() internal view returns (uint256 discount) {\r\n        require(tokensSold < tokenCapForFourthMainStage);\r\n        uint256 timeStamp = now;\r\n        uint256 stage;\r\n\r\n        for (uint i = 0; i < ICObonusStages.length; i++) {\r\n            if (timeStamp <= ICObonusStages[i]) {\r\n                stage = i + 1;\r\n                break;\r\n            } \r\n        } \r\n\r\n        if(stage == 1 && tokensSold < tokenCapForFirstMainStage) { discount = 20; }\r\n        if(stage == 1 && tokensSold >= tokenCapForFirstMainStage) { discount = 15; }\r\n        if(stage == 1 && tokensSold >= tokenCapForSecondMainStage) { discount = 10; }\r\n        if(stage == 1 && tokensSold >= tokenCapForThirdMainStage) { discount = 0; }\r\n\r\n        if(stage == 2 && tokensSold < tokenCapForSecondMainStage) { discount = 15; }\r\n        if(stage == 2 && tokensSold >= tokenCapForSecondMainStage) { discount = 10; }\r\n        if(stage == 2 && tokensSold >= tokenCapForThirdMainStage) { discount = 0; }\r\n\r\n        if(stage == 3 && tokensSold < tokenCapForThirdMainStage) { discount = 10; }\r\n        if(stage == 3 && tokensSold >= tokenCapForThirdMainStage) { discount = 0; }\r\n\r\n        if(stage == 4) { discount = 0; }\r\n\r\n        return discount;\r\n    }\r\n\r\n\r\n    \r\n    /**\r\n    * Function activates the main ICO only when the duration of the preICO hass finished. This function\r\n    * can only be called by the owner of the contract. Once called, the bonus stages will be set as such:\r\n    * week 1 will have 20% bonus, week 2 will have 15% bonus, week 3 will have 10% bonus and week 4 will \r\n    * have no bonus.\r\n    **/\r\n    function activateMainSale() public onlyOwner {\r\n        require(now > preICOduration || tokensSold >= tokensForPreICO);\r\n        require(!mainSaleActive);\r\n        if(now < preICOduration) { preICOduration = now; }\r\n        mainSaleActive = true;\r\n        ICObonusStages[0] = now.add(7 minutes);\r\n\r\n        for (uint y = 1; y < ICObonusStages.length; y++) {\r\n            ICObonusStages[y] = ICObonusStages[y - 1].add(7 minutes);\r\n        }\r\n\r\n        endTime = ICObonusStages[3];\r\n    }\r\n\r\n    function extendDuration(uint256 _newEndTime) public onlyOwner {\r\n        require(endTime < _newEndTime && mainSaleActive);\r\n        endTime = _newEndTime;\r\n        ICOSaleExtended(_newEndTime);\r\n    }\r\n\r\n\r\n    function hasEnded() public view returns (bool) { \r\n        return now > endTime;\r\n    }\r\n\r\n    /**\r\n    * Allows the owner of the ICO contract to unpause the token contract. This function is needed\r\n    * because the ICO contract deploys a new instance of the token contract, and by default the \r\n    * ETH address which deploys a contract which is Ownable is assigned ownership of the contract,\r\n    * so the ICO contract is the owner of the token contract. Since unpause is a function which can\r\n    * only be executed by the owner, by adding this function here, then the owner of the ICO contract\r\n    * can call this and then the ICO contract will invoke the unpause function of the token contract\r\n    * and thus the token contract will successfully unpause as its owner the ICO contract invokend\r\n    * the the function. \r\n    */\r\n    function unpauseToken() public onlyOwner {\r\n        token.unpause();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFounder\",\"type\":\"address\"}],\"name\":\"changeFounderAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"initiatior\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_partner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"NewFounderAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TestToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1817ce653b6edb1d920b8deef8debb0795c4bb7c34ff1c7bca77562491a4fe7c"}]}