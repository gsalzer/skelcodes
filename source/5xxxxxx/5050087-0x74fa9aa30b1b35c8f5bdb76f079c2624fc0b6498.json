{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    Transfer(msg.sender, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n    Transfer(_from, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n\r\n    Approval(msg.sender, _spender, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Spend Token\r\n */\r\ncontract SpendToken is StandardToken {\r\n  string public constant name = \"Spend Token\";\r\n  string public constant symbol = \"SPEND\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  address public presale;\r\n  address public team;\r\n\r\n  uint public constant TOKEN_LIMIT = 50000000;\r\n\r\n  /**\r\n   * @dev Create our actual token\r\n   */\r\n  function SpendToken(address _presale, address _team) public {\r\n    require(_presale != address(0));\r\n    require(_team != address(0));\r\n\r\n    presale = _presale;\r\n    team = _team;\r\n  }\r\n\r\n  /**\r\n   * @dev Mint new tokens to the specified address, only callable by the\r\n   * presale contract itself\r\n   */\r\n  function mint(address _holder, uint _value) external {\r\n    require(msg.sender == presale);\r\n    require(_value > 0);\r\n    require(totalSupply + _value <= TOKEN_LIMIT);\r\n\r\n    balances[_holder] += _value;\r\n    totalSupply += _value;\r\n\r\n    Transfer(0x0, _holder, _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title MoxyOne Presale\r\n */\r\ncontract MoxyOnePresale {\r\n  enum PreSaleState {\r\n    PreSaleStarted,\r\n    PreSaleFinished\r\n  }\r\n\r\n  SpendToken public token;\r\n  PreSaleState public preSaleState = PreSaleState.PreSaleStarted;\r\n  address public team;\r\n  bool public isPaused = false;\r\n  uint256 public pricePerToken = 1 ether / 1000;\r\n\r\n  event PreSaleStarted();\r\n  event PreSaleFinished();\r\n  event PreSalePaused();\r\n  event PreSaleResumed();\r\n  event TokenBuy(address indexed buyer, uint256 tokens);\r\n\r\n  /**\r\n   * @dev Only allow the team to execute these commands\r\n   */\r\n  modifier teamOnly {\r\n    require(msg.sender == team);\r\n\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Create the presale contract and the token contract alongside\r\n   */\r\n  function MoxyOnePresale() public {\r\n    team = msg.sender;\r\n    token = new SpendToken(this, team);\r\n  }\r\n\r\n  /**\r\n   * @dev Pause the presale in the event of an emergency\r\n   */\r\n  function pausePreSale() external teamOnly {\r\n    require(!isPaused);\r\n    require(preSaleState == PreSaleState.PreSaleStarted);\r\n\r\n    isPaused = true;\r\n\r\n    PreSalePaused();\r\n  }\r\n\r\n  /**\r\n   * @dev Resume the presale if necessary\r\n   */\r\n  function resumePreSale() external teamOnly {\r\n    require(isPaused);\r\n    require(preSaleState == PreSaleState.PreSaleStarted);\r\n\r\n    isPaused = false;\r\n\r\n    PreSaleResumed();\r\n  }\r\n\r\n  /**\r\n   * @dev End the presale event, preventing any further token purchases\r\n   */\r\n  function finishPreSale() external teamOnly {\r\n    require(preSaleState == PreSaleState.PreSaleStarted);\r\n\r\n    preSaleState = PreSaleState.PreSaleFinished;\r\n\r\n    PreSaleFinished();\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw the funds from this contract to the specified address\r\n   */\r\n  function withdrawFunds(address _target, uint256 _amount) external teamOnly {\r\n    _target.transfer(_amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Buy tokens, called internally from the catcher\r\n   */\r\n  function buyTokens(address _buyer, uint256 _value) internal returns (uint) {\r\n    require(_buyer != address(0));\r\n    require(_value > 0);\r\n    require(preSaleState == PreSaleState.PreSaleStarted);\r\n    require(!isPaused);\r\n\r\n    uint256 boughtTokens = _value / pricePerToken;\r\n\r\n    require(boughtTokens > 0);\r\n\r\n    token.mint(_buyer, boughtTokens);\r\n\r\n    TokenBuy(_buyer, boughtTokens);\r\n  }\r\n\r\n  /**\r\n   * @dev Catch any incoming payments to the contract and convert the ETH to tokens\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender, msg.value);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"finishPreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pausePreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumePreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PreSaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PreSaleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PreSalePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PreSaleResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokenBuy\",\"type\":\"event\"}]","ContractName":"MoxyOnePresale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://03cf0882c9fab5dc76322999fc52d8f2183b7c80840347ad5e906e84178d6280"}]}