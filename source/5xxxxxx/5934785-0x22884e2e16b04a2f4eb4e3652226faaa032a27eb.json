{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract BtzReceiver {\r\n    using SafeMath for *;\r\n\r\n    // BTZReceiver state variables\r\n    BtzToken BTZToken;\r\n    address public tokenAddress = 0x0;\r\n    address public owner;\r\n    uint numUsers;\r\n\r\n    // Struct to store user info\r\n    struct UserInfo {\r\n        uint totalDepositAmount;\r\n        uint totalDepositCount;\r\n        uint lastDepositAmount;\r\n        uint lastDepositTime;\r\n    }\r\n\r\n    event DepositReceived(uint indexed _who, uint _value, uint _timestamp);\r\n    event Withdrawal(address indexed _withdrawalAddress, uint _value, uint _timestamp);\r\n\r\n    // mapping of user info indexed by the user ID\r\n    mapping (uint => UserInfo) userInfo;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _addr) public onlyOwner {\r\n        owner = _addr;\r\n    }\r\n\r\n    /*\r\n    * @dev Gives admin the ability to update the address of BTZ223\r\n    *\r\n    * @param _tokenAddress The new address of BTZ223\r\n    **/\r\n    function setTokenContractAddress(address _tokenAddress) public onlyOwner {\r\n        tokenAddress = _tokenAddress;\r\n        BTZToken = BtzToken(_tokenAddress);\r\n    }\r\n\r\n    /*\r\n    * @dev Returns the information of a user\r\n    *\r\n    * @param _uid The id of the user whose info to return\r\n    **/\r\n    function userLookup(uint _uid) public view returns (uint, uint, uint, uint){\r\n        return (userInfo[_uid].totalDepositAmount, userInfo[_uid].totalDepositCount, userInfo[_uid].lastDepositAmount, userInfo[_uid].lastDepositTime);\r\n    }\r\n\r\n    /*\r\n    * @dev The function BTZ223 uses to update user info in this contract\r\n    *\r\n    * @param _id The users Bunz Application User ID\r\n    * @param _value The number of tokens to deposit\r\n    **/\r\n    function receiveDeposit(uint _id, uint _value) public {\r\n        require(msg.sender == tokenAddress);\r\n        userInfo[_id].totalDepositAmount = userInfo[_id].totalDepositAmount.add(_value);\r\n        userInfo[_id].totalDepositCount = userInfo[_id].totalDepositCount.add(1);\r\n        userInfo[_id].lastDepositAmount = _value;\r\n        userInfo[_id].lastDepositTime = now;\r\n        emit DepositReceived(_id, _value, now);\r\n    }\r\n\r\n    /*\r\n    * @dev The withdrawal function for admin\r\n    *\r\n    * @param _withdrawalAddr The admins address to withdraw the BTZ223 tokens to\r\n    **/\r\n    function withdrawTokens(address _withdrawalAddr) public onlyOwner{\r\n        uint tokensToWithdraw = BTZToken.balanceOf(this);\r\n        BTZToken.transfer(_withdrawalAddr, tokensToWithdraw);\r\n        emit Withdrawal(_withdrawalAddr, tokensToWithdraw, now);\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) returns (bool ok);\r\n  function approve(address spender, uint value) returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n  using SafeMath for *;\r\n\r\n  mapping(address => uint) balances;\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  function transfer(address _to, uint _value) public returns (bool success) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint _value) public returns (bool success) {\r\n    require(_value <= balances[msg.sender]);\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\ncontract ERC223 is ERC20 {\r\n  function transfer(address to, uint value, bytes data) returns (bool ok);\r\n  function transferFrom(address from, address to, uint value, bytes data) returns (bool ok);\r\n}\r\n\r\ncontract Standard223Token is ERC223, StandardToken {\r\n  //function that is called when a user or another contract wants to transfer funds\r\n  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\r\n    //filtering if the target is a contract with bytecode inside it\r\n    if (!super.transfer(_to, _value)) throw; // do a normal token transfer\r\n    if (isContract(_to)) return contractFallback(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value, bytes _data) returns (bool success) {\r\n    if (!super.transferFrom(_from, _to, _value)) revert(); // do a normal token transfer\r\n    if (isContract(_to)) return contractFallback(_from, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n    return transfer(_to, _value, new bytes(0));\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\r\n    return transferFrom(_from, _to, _value, new bytes(0));\r\n  }\r\n\r\n  //function that is called when transaction target is a contract\r\n  function contractFallback(address _origin, address _to, uint _value, bytes _data) private returns (bool success) {\r\n    ERC223Receiver reciever = ERC223Receiver(_to);\r\n    return reciever.tokenFallback(msg.sender, _origin, _value, _data);\r\n  }\r\n\r\n  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) private returns (bool is_contract) {\r\n    // retrieve the size of the code on target address, this needs assembly\r\n    uint length;\r\n    assembly { length := extcodesize(_addr) }\r\n    return length > 0;\r\n  }\r\n}\r\n\r\ncontract BtzToken is Standard223Token {\r\n  using SafeMath for *;\r\n  address public owner;\r\n\r\n  // BTZ Token parameters\r\n  string public name = \"BTZ by Bunz\";\r\n  string public symbol = \"BTZ\";\r\n  uint8 public constant decimals = 18;\r\n  uint256 public constant decimalFactor = 10 ** uint256(decimals);\r\n  uint256 public constant totalSupply = 200000000000 * decimalFactor;\r\n\r\n  // Variables for deposit functionality\r\n  bool public prebridge;\r\n  BtzReceiver receiverContract;\r\n  address public receiverContractAddress = 0x0;\r\n\r\n  event Deposit(address _to, uint _value);\r\n\r\n  /**\r\n  * @dev Constructor function for BTZ creation\r\n  */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    balances[owner] = totalSupply;\r\n    prebridge = true;\r\n    receiverContract = BtzReceiver(receiverContractAddress);\r\n\r\n    Transfer(address(0), owner, totalSupply);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n  }\r\n\r\n  function setOwner(address _addr) public onlyOwner {\r\n      owner = _addr;\r\n  }\r\n\r\n  /**\r\n  * @dev Gives admin the ability to switch prebridge states.\r\n  *\r\n  */\r\n  function togglePrebrdige() onlyOwner {\r\n      prebridge = !prebridge;\r\n  }\r\n\r\n  /**\r\n  * @dev Gives admin the ability to update the address of reciever contract\r\n  *\r\n  * @param _newAddr The address of the new receiver contract\r\n  */\r\n  function setReceiverContractAddress(address _newAddr) onlyOwner {\r\n      receiverContractAddress = _newAddr;\r\n      receiverContract = BtzReceiver(_newAddr);\r\n  }\r\n\r\n  /**\r\n  * @dev Deposit function for users to send tokens to Bunz Application\r\n  *\r\n  * @param _value A uint representing the amount of BTZ to deposit\r\n  */\r\n  function deposit(uint _id, uint _value) public {\r\n      require(prebridge &&\r\n              balances[msg.sender] >= _value);\r\n      balances[msg.sender] = balances[msg.sender].sub(_value);\r\n      balances[receiverContractAddress] = balances[receiverContractAddress].add(_value);\r\n      emit Transfer(msg.sender, receiverContractAddress, _value);\r\n      receiverContract.receiveDeposit(_id, _value);\r\n  }\r\n}\r\n\r\ncontract ERC223Receiver {\r\n  function tokenFallback(address _sender, address _origin, uint _value, bytes _data) returns (bool ok);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawalAddr\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"receiveDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"userLookup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_withdrawalAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"}]","ContractName":"BtzReceiver","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://610a679848d7056377f73028178d5e9b21b3d331bc23d69ca3de780cf284d315"}]}