{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// The NOTES ERC20 Token. There is a delay before addresses that are not added to the \"activeGroup\" can transfer tokens. \r\n// That delay ends when admin calls the \"activate()\" function.\r\n// Otherwise it is a generic ERC20 standard token, based originally on the BAT token\r\n// https://etherscan.io/address/0x0d8775f648430679a709e98d2b0cb6250d2887ef#code\r\n\r\n// The standard ERC20 Token interface\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// NOTES Token Implementation - transfers are prohibited unless switched on by admin\r\ncontract Notes is Token {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    //// CONSTANTS\r\n\r\n    // Number of NOTES (800 million)\r\n    uint256 public constant TOTAL_SUPPLY = 2000 * (10**6) * 10**uint256(decimals);\r\n\r\n    // Token Metadata\r\n    string public constant name = \"NOTES\";\r\n    string public constant symbol = \"NOTES\";\r\n    uint8 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n\r\n    //// PROPERTIES\r\n\r\n    address admin;\r\n    bool public activated = false;\r\n    mapping (address => bool) public activeGroup;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    //// MODIFIERS\r\n\r\n    modifier active()\r\n    {\r\n        require(activated || activeGroup[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin()\r\n    {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    //// CONSTRUCTOR\r\n\r\n    function Notes(address fund, address _admin)\r\n    {\r\n        admin = _admin;\r\n        totalSupply = TOTAL_SUPPLY;\r\n        balances[fund] = TOTAL_SUPPLY;    // Deposit all to fund\r\n        Transfer(address(this), fund, TOTAL_SUPPLY);\r\n        activeGroup[fund] = true;  // Allow the fund to transfer\r\n    }\r\n\r\n    //// ADMIN FUNCTIONS\r\n\r\n    function addToActiveGroup(address a) onlyAdmin {\r\n        activeGroup[a] = true;\r\n    }\r\n\r\n    function activate() onlyAdmin {\r\n        activated = true;\r\n    }\r\n\r\n    //// TOKEN FUNCTIONS\r\n\r\n    function transfer(address _to, uint256 _value) active returns (bool success) {\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) active returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value);\r\n        require(allowed[_from][msg.sender] >= _value && _value > 0);\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) active returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n// The Choon smart contract. A state channel on the streaming service distributes cryptographically signed vouchers to artists on demand.\r\n// Those artists can then cash those vouchers into NOTES via this contract.\r\n// A solo artist could cash the NOTES directly to an address, or a band could cash them to a Smart Record Contract.\r\n// The Smart Record contract would then distribute the NOTES to the individual artists, according to its terms.\r\n\r\ncontract Choon  {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Events\r\n    event VoucherCashed(address indexed to, uint256 value);\r\n\r\n    // Notes Contract\r\n    address notesContract;\r\n\r\n    // The address of the state channel authority that signs the vouchers\r\n    address choonAuthority;\r\n\r\n    // The contract admin\r\n    address admin;\r\n\r\n    // The total Notes payments to each address\r\n    mapping(address => uint256) public payments;\r\n\r\n    // Used to kill the contract in case it needs to be replaced with a new one\r\n    bool active = true;\r\n\r\n    // Modifiers\r\n    modifier onlyAdmin()\r\n    {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier isActive()\r\n    {\r\n        require(active);\r\n        _;\r\n    }\r\n\r\n    // Constructor\r\n    function Choon(address _notesContract, address _choonAuthority, address _admin)\r\n    {\r\n        notesContract = _notesContract;\r\n        choonAuthority = _choonAuthority;\r\n        admin = _admin;\r\n    }\r\n\r\n    function setActive(bool _active) onlyAdmin external {\r\n        active = _active;\r\n    }\r\n\r\n    function setAuthority(address _authority) onlyAdmin external {\r\n        choonAuthority = _authority;\r\n    }\r\n\r\n    function shutdown() onlyAdmin external {\r\n        active = false;\r\n        // Transfer all remaining Notes to admin\r\n        uint256 balance = Notes(notesContract).balanceOf(address(this));\r\n        Notes(notesContract).transfer(admin, balance);\r\n    }\r\n\r\n    /// @dev Remit a voucher to Choon to get paid Notes\r\n    // Note that the voucher always updates the *total* lifetime balance of the beneficiary.\r\n    // This contract tracks what has been paid out so far, so it then knows how much to pay.\r\n    // This prevents double-spending of vouchers.\r\n    function remit(address receiver, uint256 balance, bytes sig) external isActive {\r\n        // Ensure that the voucher sig is valid and from the choonAuthority\r\n        require(verifyBalanceProof(receiver, balance, sig));\r\n        // Compute the NOTES owed due to this voucher and pay the beneficiary (receiver).\r\n        uint priorBalance = payments[receiver];\r\n        uint owed = balance.sub(priorBalance);\r\n        require(owed > 0);\r\n        payments[receiver] = balance;\r\n        Notes(notesContract).transfer(receiver, owed);\r\n        VoucherCashed(receiver, owed);\r\n    }\r\n\r\n    function verifyBalanceProof(address receiver, uint256 balance, bytes sig) private returns (bool) {\r\n        bytes memory prefix = \"\\x19Choon:\\n32\";\r\n        bytes32 message_hash = keccak256(prefix, receiver, balance);\r\n        address signer = ecverify(message_hash, sig);\r\n        return (signer == choonAuthority);\r\n    }\r\n\r\n    // ECVerify function, from ÂµRaiden and others\r\n    function ecverify(bytes32 hash, bytes signature) private returns (address signature_address) {\r\n        require(signature.length == 65);\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // The signature format is a compact form of:\r\n        //   {bytes32 r}{bytes32 s}{uint8 v}\r\n        // Compact means, uint8 is not padded to 32 bytes.\r\n        assembly {\r\n            r := mload(add(signature, 32))\r\n            s := mload(add(signature, 64))\r\n\r\n        // Here we are loading the last 32 bytes, including 31 bytes of 's'.\r\n            v := byte(0, mload(add(signature, 96)))\r\n        }\r\n\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        require(v == 27 || v == 28);\r\n\r\n        signature_address = ecrecover(hash, v, r, s);\r\n\r\n        // ecrecover returns zero on error\r\n        require(signature_address != 0x0);\r\n\r\n        return signature_address;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_authority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"remit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_notesContract\",\"type\":\"address\"},{\"name\":\"_choonAuthority\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"VoucherCashed\",\"type\":\"event\"}]","ContractName":"Choon","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005e6364d4534f780ae053b93b45c8b8840e683eb7000000000000000000000000f5827e7142e151660a5baf3f43630d70d002b9df0000000000000000000000007d7e227c80d14fd82d22998bd76e38fec9487c9a","Library":"","SwarmSource":"bzzr://ce9504421b5e85fb96556bc63196727ca3e9699927e3abea6bf16a6514148ed6"}]}