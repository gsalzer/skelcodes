{"status":"1","message":"OK","result":[{"SourceCode":"/** \r\n\tEtherus presale contract\r\n*/\r\n\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * Mintable token\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    uint public totalSupply = 0;\r\n    address private minter;\r\n    bool public mintingEnabled = true;\r\n\r\n    modifier onlyMinter() {\r\n        require(minter == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function setMinter(address _minter) public onlyOwner {\r\n        minter = _minter;\r\n    }\r\n\r\n    function mint(address _to, uint _amount) public onlyMinter {\r\n        require(mintingEnabled);\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(address(0x0), _to, _amount);\r\n    }\r\n\r\n    function stopMinting() public onlyMinter {\r\n        mintingEnabled = false;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract EtherusPreSale is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    // Constants\r\n    // =========\r\n\r\n    uint private constant fractions = 1e18;\r\n    uint private constant millions = 1e6*fractions;\r\n\r\n    uint private constant CAP = 15*millions;\r\n    uint private constant SALE_CAP = 5*millions;\r\n    uint private constant ETR_USD_PRICE = 400; //in cents\r\n\r\n    uint public ethPrice = 40000; //in cents\r\n\r\n    // Events\r\n    // ======\r\n\r\n    event AltBuy(address holder, uint tokens, string txHash);\r\n    event Buy(address holder, uint tokens);\r\n    event RunSale();\r\n    event PauseSale();\r\n    event FinishSale();\r\n    event PriceSet(uint USDPerETH);\r\n\r\n    // State variables\r\n    // ===============\r\n\r\n    MintableToken public token;\r\n    address authority; //An account to control the contract on behalf of the owner\r\n    address robot; //An account to purchase tokens for altcoins\r\n    bool public isOpen = false;\r\n\r\n    // Constructor\r\n    // ===========\r\n\r\n    function EtherusPreSale(address _token, address _multisig, address _authority, address _robot) public {\r\n        token = MintableToken(_token);\r\n        authority = _authority;\r\n        robot = _robot;\r\n        transferOwnership(_multisig);\r\n    }\r\n\r\n    // Public functions\r\n    // ================\r\n\r\n    /**\r\n    * Gets the bonus in percents for the specified sum\r\n    */\r\n    function getBonus(uint ethSum) public view returns (uint){\r\n\r\n        uint usdSum = ethSum.mul(ethPrice).div(fractions);\r\n        if(usdSum >= 1e6*100)\r\n            return 100;\r\n        if(usdSum >= 5e5*100)\r\n            return 80;\r\n        if(usdSum >= 2.5e5*100)\r\n            return 70;\r\n        if(usdSum >= 2e5*100)\r\n            return 60;\r\n        if(usdSum >= 1.5e5*100)\r\n            return 50;\r\n        if(usdSum >= 1.25e5*100)\r\n            return 40;\r\n        if(usdSum >= 1e5*100)\r\n            return 30;\r\n        if(usdSum >= 7.5e4*100)\r\n            return 20;\r\n        if(usdSum >= 5e4*100)\r\n            return 10;\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n    * Computes number of tokens with bonus for the specified ether. Correctly\r\n    * adds bonuses if the sum is large enough to belong to several bonus intervals\r\n    */\r\n    function getTokensAmount(uint etherVal) public view returns (uint) {\r\n        uint bonus = getBonus(etherVal);\r\n        uint tokens = etherVal.mul(ethPrice).mul(100 + bonus).div(ETR_USD_PRICE*100);\r\n        return tokens;\r\n    }\r\n\r\n    function buy(address to) public payable onlyOpen {\r\n        uint amount = msg.value;\r\n        uint tokens = getTokensAmountUnderCap(amount);\r\n\r\n        owner.transfer(amount);\r\n        token.mint(to, tokens);\r\n\r\n        Buy(to, tokens);\r\n    }\r\n\r\n    function () public payable{\r\n        buy(msg.sender);\r\n    }\r\n\r\n    // Modifiers\r\n    // =================\r\n\r\n    modifier onlyAuthority() {\r\n        require(msg.sender == authority || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyRobot() {\r\n        require(msg.sender == robot);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOpen() {\r\n        require(isOpen);\r\n        _;\r\n    }\r\n\r\n    // Priveleged functions\r\n    // ====================\r\n\r\n    /**\r\n    * Used to buy tokens for altcoins.\r\n    * Robot may call it before TokenSale officially starts to migrate early investors\r\n    */\r\n    function buyAlt(address to, uint etherAmount, string _txHash) public onlyRobot {\r\n        uint tokens = getTokensAmountUnderCap(etherAmount);\r\n        token.mint(to, tokens);\r\n        AltBuy(to, tokens, _txHash);\r\n    }\r\n\r\n    function setAuthority(address _authority) public onlyOwner {\r\n        authority = _authority;\r\n    }\r\n\r\n    function setRobot(address _robot) public onlyAuthority {\r\n        robot = _robot;\r\n    }\r\n\r\n    function setPrice(uint usdPerEther) public onlyAuthority {\r\n        //Ether is not expected to rate less than $1 and more than $100000 during presale\r\n        require(1*100 <= usdPerEther && usdPerEther <= 100000*100);\r\n        ethPrice = usdPerEther;\r\n        PriceSet(ethPrice);\r\n    }\r\n\r\n    // SALE state management: start / pause / finalize\r\n    // --------------------------------------------\r\n    function open(bool _open) public onlyAuthority {\r\n        isOpen = _open;\r\n        if (_open) {\r\n            RunSale();\r\n        } else {\r\n            PauseSale();\r\n        }\r\n    }\r\n\r\n    function finalize() public onlyAuthority {\r\n        uint diff = CAP.sub(token.totalSupply());\r\n        if(diff > 0) //The unsold capacity moves to team\r\n            token.mint(owner, diff);\r\n        token.stopMinting();\r\n        selfdestruct(owner);\r\n        FinishSale();\r\n    }\r\n\r\n    // Private functions\r\n    // =========================\r\n\r\n    /**\r\n    * Gets tokens for specified ether provided that they are still under the cap\r\n    */\r\n    function getTokensAmountUnderCap(uint etherAmount) private view returns (uint){\r\n        uint tokens = getTokensAmount(etherAmount);\r\n        require(tokens > 0);\r\n        require(tokens.add(token.totalSupply()) <= SALE_CAP);\r\n        return tokens;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"name\":\"_txHash\",\"type\":\"string\"}],\"name\":\"buyAlt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_robot\",\"type\":\"address\"}],\"name\":\"setRobot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethSum\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"etherVal\",\"type\":\"uint256\"}],\"name\":\"getTokensAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"usdPerEther\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"open\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_authority\",\"type\":\"address\"},{\"name\":\"_robot\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"AltBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RunSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FinishSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"USDPerETH\",\"type\":\"uint256\"}],\"name\":\"PriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EtherusPreSale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f8cee9b80a7cccf22594614cb42c06600c03d0d9000000000000000000000000dc7719cd8a49babdf47c31f7f25ad839252badf0000000000000000000000000ff5d1030e622cdb782970fb4ad8089cab649735a000000000000000000000000ff5d1030e622cdb782970fb4ad8089cab649735a","Library":"","SwarmSource":"bzzr://6049611a2c395afd56e2cbcaadaa82be47354eead9c18dc8da6a656c1cf028f6"}]}