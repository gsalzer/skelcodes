{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of contracts/LightPool.sol\r\npragma solidity ^0.4.21;\r\n\r\n////// contracts/interfaces/ERC20.sol\r\n/* pragma solidity ^0.4.21; */\r\n\r\ncontract ERC20Events {\r\n    event Approval(address indexed src, address indexed guy, uint wad);\r\n    event Transfer(address indexed src, address indexed dst, uint wad);\r\n}\r\n\r\ncontract ERC20 is ERC20Events {\r\n    function decimals() public view returns (uint);\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address guy) public view returns (uint);\r\n    function allowance(address src, address guy) public view returns (uint);\r\n\r\n    function approve(address guy, uint wad) public returns (bool);\r\n    function transfer(address dst, uint wad) public returns (bool);\r\n    function transferFrom(address src, address dst, uint wad) public returns (bool);\r\n}\r\n\r\n////// contracts/interfaces/PriceSanityInterface.sol\r\n/* pragma solidity ^0.4.21; */\r\n\r\ncontract PriceSanityInterface {\r\n    function checkPrice(address base, address quote, bool buy, uint256 baseAmount, uint256 quoteAmount) external view returns (bool result);\r\n}\r\n\r\n////// contracts/interfaces/WETHInterface.sol\r\n/* pragma solidity ^0.4.21; */\r\n\r\n/* import \"./ERC20.sol\"; */\r\n\r\ncontract WETHInterface is ERC20 {\r\n  function() external payable;\r\n  function deposit() external payable;\r\n  function withdraw(uint wad) external;\r\n}\r\n\r\n////// contracts/LightPool.sol\r\n/* pragma solidity ^0.4.21; */\r\n\r\n/* import \"./interfaces/WETHInterface.sol\"; */\r\n/* import \"./interfaces/PriceSanityInterface.sol\"; */\r\n/* import \"./interfaces/ERC20.sol\"; */\r\n\r\ncontract LightPool {\r\n    uint16 constant public EXTERNAL_QUERY_GAS_LIMIT = 4999;    // Changes to state require at least 5000 gas\r\n\r\n    struct TokenData {\r\n        address walletAddress;\r\n        PriceSanityInterface priceSanityContract;\r\n    }\r\n\r\n    // key = keccak256(token, base, walletAddress)\r\n    mapping(bytes32 => TokenData)       public markets;\r\n    mapping(address => bool)            public traders;\r\n    address                             public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWalletAddress(address base, address quote) {\r\n        bytes32 key = keccak256(base, quote, msg.sender);\r\n        require(markets[key].walletAddress == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyTrader() {\r\n        require(traders[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function LightPool() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setTrader(address trader, bool enabled) onlyOwner external {\r\n        traders[trader] = enabled;\r\n    }\r\n\r\n    function setOwner(address _owner) onlyOwner external {\r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n    }\r\n\r\n    event AddMarket(address indexed base, address indexed quote, address indexed walletAddress, address priceSanityContract);\r\n    function addMarket(ERC20 base, ERC20 quote, PriceSanityInterface priceSanityContract) external {\r\n        require(base != address(0));\r\n        require(quote != address(0));\r\n\r\n        // Make sure there's no such configured token\r\n        bytes32 tokenHash = keccak256(base, quote, msg.sender);\r\n        require(markets[tokenHash].walletAddress == address(0));\r\n\r\n        // Initialize token pool data\r\n        markets[tokenHash] = TokenData(msg.sender, priceSanityContract);\r\n        emit AddMarket(base, quote, msg.sender, priceSanityContract);\r\n    }\r\n\r\n    event RemoveMarket(address indexed base, address indexed quote, address indexed walletAddress);\r\n    function removeMarket(ERC20 base, ERC20 quote) onlyWalletAddress(base, quote) external {\r\n        bytes32 tokenHash = keccak256(base, quote, msg.sender);\r\n        TokenData storage tokenData = markets[tokenHash];\r\n\r\n        emit RemoveMarket(base, quote, tokenData.walletAddress);\r\n        delete markets[tokenHash];\r\n    }\r\n\r\n    event ChangePriceSanityContract(address indexed base, address indexed quote, address indexed walletAddress, address priceSanityContract);\r\n    function changePriceSanityContract(ERC20 base, ERC20 quote, PriceSanityInterface _priceSanityContract) onlyWalletAddress(base, quote) external {\r\n        bytes32 tokenHash = keccak256(base, quote, msg.sender);\r\n        TokenData storage tokenData = markets[tokenHash];\r\n        tokenData.priceSanityContract = _priceSanityContract;\r\n        emit ChangePriceSanityContract(base, quote, msg.sender, _priceSanityContract);\r\n    }\r\n\r\n    event Trade(address indexed trader, address indexed baseToken, address indexed quoteToken, address walletAddress, bool buy, uint256 baseAmount, uint256 quoteAmount);\r\n    function trade(ERC20 base, ERC20 quote, address walletAddress, bool buy, uint256 baseAmount, uint256 quoteAmount) onlyTrader external {\r\n        bytes32 tokenHash = keccak256(base, quote, walletAddress);\r\n        TokenData storage tokenData = markets[tokenHash];\r\n        require(tokenData.walletAddress != address(0));\r\n        if (tokenData.priceSanityContract != address(0)) {\r\n            require(tokenData.priceSanityContract.checkPrice.gas(EXTERNAL_QUERY_GAS_LIMIT)(base, quote, buy, baseAmount, quoteAmount)); // Limit gas to prevent reentrancy\r\n        }\r\n        ERC20 takenToken;\r\n        ERC20 givenToken;\r\n        uint256 takenTokenAmount;\r\n        uint256 givenTokenAmount;\r\n        if (buy) {\r\n            takenToken = quote;\r\n            givenToken = base;\r\n            takenTokenAmount = quoteAmount;\r\n            givenTokenAmount = baseAmount;\r\n        } else {\r\n            takenToken = base;\r\n            givenToken = quote;\r\n            takenTokenAmount = baseAmount;\r\n            givenTokenAmount = quoteAmount;\r\n        }\r\n        require(takenTokenAmount != 0 && givenTokenAmount != 0);\r\n\r\n        // Swap!\r\n        require(takenToken.transferFrom(msg.sender, tokenData.walletAddress, takenTokenAmount));\r\n        require(givenToken.transferFrom(tokenData.walletAddress, msg.sender, givenTokenAmount));\r\n        emit Trade(msg.sender, base, quote, walletAddress, buy, baseAmount, quoteAmount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"base\",\"type\":\"address\"},{\"name\":\"quote\",\"type\":\"address\"},{\"name\":\"priceSanityContract\",\"type\":\"address\"}],\"name\":\"addMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"markets\",\"outputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"},{\"name\":\"priceSanityContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"trader\",\"type\":\"address\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setTrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"traders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"base\",\"type\":\"address\"},{\"name\":\"quote\",\"type\":\"address\"}],\"name\":\"removeMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"base\",\"type\":\"address\"},{\"name\":\"quote\",\"type\":\"address\"},{\"name\":\"walletAddress\",\"type\":\"address\"},{\"name\":\"buy\",\"type\":\"bool\"},{\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXTERNAL_QUERY_GAS_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"base\",\"type\":\"address\"},{\"name\":\"quote\",\"type\":\"address\"},{\"name\":\"_priceSanityContract\",\"type\":\"address\"}],\"name\":\"changePriceSanityContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"base\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"quote\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"priceSanityContract\",\"type\":\"address\"}],\"name\":\"AddMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"base\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"quote\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"RemoveMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"base\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"quote\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"priceSanityContract\",\"type\":\"address\"}],\"name\":\"ChangePriceSanityContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buy\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"}]","ContractName":"LightPool","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8157f68c99bf64435c49e0adee0888eda04de9e173063ce5774b77b9bd27c707"}]}