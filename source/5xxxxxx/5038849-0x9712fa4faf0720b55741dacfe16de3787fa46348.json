{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract EtherHell {\r\n    using SafeMath for uint256;\r\n\r\n    event NewRound(\r\n        uint _timestamp,\r\n        uint _round,\r\n        uint _initialPot\r\n    );\r\n\r\n    event Bid(\r\n        uint _timestamp,\r\n        address _address,\r\n        uint _amount,\r\n        uint _newPot\r\n    );\r\n\r\n    event NewLeader(\r\n        uint _timestamp,\r\n        address _address,\r\n        uint _newPot,\r\n        uint _newDeadline\r\n    );\r\n    \r\n    event Winner(\r\n        uint _timestamp,\r\n        address _address,\r\n        uint _earnings,\r\n        uint _deadline\r\n    );\r\n\r\n    event Withdrawal(\r\n        uint _timestamp,\r\n        address _address,\r\n        uint _amount\r\n    );\r\n\r\n    // Initial countdown duration at the start of each round\r\n    uint public constant BASE_DURATION = 1 days;\r\n\r\n    // Amount by which the countdown duration decreases per ether in the pot\r\n    uint public constant DURATION_DECREASE_PER_ETHER = 10 minutes;\r\n\r\n    // Minimum countdown duration\r\n    uint public constant MINIMUM_DURATION = 1 hours;\r\n\r\n    // Fraction of the previous pot used to seed the next pot\r\n    uint public constant NEXT_POT_FRAC_TOP = 1;\r\n    uint public constant NEXT_POT_FRAC_BOT = 2;\r\n\r\n    // Minimum fraction of the pot required by a bidder to become the new leader\r\n    uint public constant MIN_LEADER_FRAC_TOP = 1;\r\n    uint public constant MIN_LEADER_FRAC_BOT = 1000;\r\n\r\n    // Fraction of each bid set aside as seed funding for even more devilish variants from the community\r\n    uint public constant FUND_FRAC_TOP = 1;\r\n    uint public constant FUND_FRAC_BOT = 5;\r\n\r\n    // Owner of the contract\r\n    address owner;\r\n\r\n    // Mapping from addresses to amounts earned\r\n    mapping(address => uint) public earnings;\r\n\r\n    // Current round number\r\n    uint public round;\r\n\r\n    // Current value of the pot\r\n    uint public pot;\r\n\r\n    // Address of the current leader\r\n    address public leader;\r\n\r\n    // Time at which the current round expires\r\n    uint public deadline;\r\n\r\n    function EtherHell() public payable {\r\n        require(msg.value > 0);\r\n        owner = msg.sender;\r\n        round = 1;\r\n        pot = msg.value;\r\n        leader = owner;\r\n        deadline = computeDeadline();\r\n        NewRound(now, round, pot);\r\n        NewLeader(now, leader, pot, deadline);\r\n    }\r\n    \r\n    function computeDeadline() internal view returns (uint) {\r\n        uint _durationDecrease = DURATION_DECREASE_PER_ETHER.mul(pot.div(1 ether));\r\n        uint _duration;\r\n        if (MINIMUM_DURATION.add(_durationDecrease) > BASE_DURATION) {\r\n            _duration = MINIMUM_DURATION;\r\n        } else {\r\n            _duration = BASE_DURATION.sub(_durationDecrease);\r\n        }\r\n        return now.add(_duration);\r\n    }\r\n\r\n    modifier advanceRoundIfNeeded {\r\n        if (now > deadline) {\r\n            uint _nextPot = pot.mul(NEXT_POT_FRAC_TOP).div(NEXT_POT_FRAC_BOT);\r\n            uint _leaderEarnings = pot.sub(_nextPot);\r\n            Winner(now, leader, _leaderEarnings, deadline);\r\n            earnings[leader] = earnings[leader].add(_leaderEarnings);\r\n            round++;\r\n            pot = _nextPot;\r\n            leader = owner;\r\n            deadline = computeDeadline();\r\n            NewRound(now, round, pot);\r\n            NewLeader(now, leader, pot, deadline);\r\n        }\r\n        _;\r\n    }\r\n\r\n    function bid() public payable advanceRoundIfNeeded {\r\n        uint _minLeaderAmount = pot.mul(MIN_LEADER_FRAC_TOP).div(MIN_LEADER_FRAC_BOT);\r\n        uint _bidAmountToFund = msg.value.mul(FUND_FRAC_TOP).div(FUND_FRAC_BOT);\r\n        uint _bidAmountToPot = msg.value.sub(_bidAmountToFund);\r\n\r\n        earnings[owner] = earnings[owner].add(_bidAmountToFund);\r\n        pot = pot.add(_bidAmountToPot);\r\n        Bid(now, msg.sender, msg.value, pot);\r\n\r\n        if (msg.value >= _minLeaderAmount) {\r\n            leader = msg.sender;\r\n            deadline = computeDeadline();\r\n            NewLeader(now, leader, pot, deadline);\r\n        }\r\n    }\r\n\r\n    function withdraw() public advanceRoundIfNeeded {\r\n        require(earnings[msg.sender] > 0);\r\n        assert(earnings[msg.sender] <= this.balance);\r\n        uint _amount = earnings[msg.sender];\r\n        earnings[msg.sender] = 0;\r\n        msg.sender.transfer(_amount);\r\n        Withdrawal(now, msg.sender, _amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      \tif (a == 0) {\r\n      \t  return 0;\r\n      \t}\r\n      \tuint256 c = a * b;\r\n      \tassert(c / a == b);\r\n      \treturn c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"NEXT_POT_FRAC_BOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FUND_FRAC_TOP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_LEADER_FRAC_TOP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NEXT_POT_FRAC_TOP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FUND_FRAC_BOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DURATION_DECREASE_PER_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_LEADER_FRAC_BOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_initialPot\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newPot\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newDeadline\",\"type\":\"uint256\"}],\"name\":\"NewLeader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_earnings\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"}]","ContractName":"EtherHell","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b3670b26fc029bb99ecc5e6d285ade80f9f08e7f24c1ecc3f416e757e4c1bf30"}]}