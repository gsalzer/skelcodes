{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n    function approve(address spender, uint256 tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract DynamicSKx2 {\r\n\r\n        uint private multiplier;\r\n        uint private payoutOrder = 0;\r\n\r\n        address private owner;\r\n\r\n        function DynamicSKx2(uint multiplierPercent) public {\r\n            owner = msg.sender;\r\n            multiplier = multiplierPercent;\r\n        }\r\n\r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n\r\n        modifier onlyPositiveSend {\r\n            require(msg.value > 0);\r\n            _;\r\n        }\r\n        struct Participant {\r\n            address etherAddress;\r\n            uint payout;\r\n        }\r\n\r\n        Participant[] private participants;\r\n\r\n\r\n        function() public payable onlyPositiveSend {\r\n            participants.push(Participant(msg.sender, (msg.value * multiplier) / 100));\r\n            uint balance = msg.value;\r\n            while (balance > 0) {\r\n                uint payoutToSend = balance < participants[payoutOrder].payout ? balance : participants[payoutOrder].payout;\r\n                participants[payoutOrder].payout -= payoutToSend;\r\n                balance -= payoutToSend;\r\n                participants[payoutOrder].etherAddress.transfer(payoutToSend);\r\n                if(balance > 0){\r\n                    payoutOrder += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        function currentMultiplier() view public returns(uint) {\r\n            return multiplier;\r\n        }\r\n\r\n        function totalParticipants() view public returns(uint count) {\r\n                count = participants.length;\r\n        }\r\n\r\n        function numberOfParticipantsWaitingForPayout() view public returns(uint ) {\r\n                return participants.length - payoutOrder;\r\n        }\r\n\r\n        function participantDetails(uint orderInPyramid) view public returns(address Address, uint Payout) {\r\n                if (orderInPyramid <= participants.length) {\r\n                        Address = participants[orderInPyramid].etherAddress;\r\n                        Payout = participants[orderInPyramid].payout;\r\n                }\r\n        }\r\n        \r\n        function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n            return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n        }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderInPyramid\",\"type\":\"uint256\"}],\"name\":\"participantDetails\",\"outputs\":[{\"name\":\"Address\",\"type\":\"address\"},{\"name\":\"Payout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalParticipants\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfParticipantsWaitingForPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"multiplierPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"DynamicSKx2","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c8","Library":"","SwarmSource":"bzzr://0fa7651da6aa5666b67bf9b1e1c5928d75651a8d27bd3029636580bd4da9e830"}]}