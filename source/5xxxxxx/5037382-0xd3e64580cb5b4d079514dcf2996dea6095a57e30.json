{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n   BURSA DEX              Source code available under GPLv2 license\r\n                          2018  Michael Baynov <m.baynov@gmail.com>\r\n\r\n   BURSA  is a new generation of decentralized exchanges based on\r\n   state storage, not logs (events). It is designed to be used both\r\n   with or without a frontend. A DAPP connected to BURSA contract\r\n   will receive 30% share of trade fee. To have it, just pass the\r\n   refund address as the last argument to buy() and sell() methods.\r\n   Trading without a frontend gives you 30% descount.\r\n   BURSA is recommended to be used with Parity Wallet.\r\n\r\n\r\n   WANT TO TRADE ON BURSA? READ THE DOCS:\r\n   https://github.com/termslang/bursadex\r\n\r\n\r\nBURSA CONTRACT ABI:\r\n[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"price_each\",\"type\":\"uint256\"},{\"name\":\"bid_order_spot\",\"type\":\"uint256\"}],\"name\":\"willbuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updateAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"min_trade_amount\",\"type\":\"uint256\"}],\"name\":\"findBestBid\",\"outputs\":[{\"name\":\"bid_order\",\"type\":\"uint256\"},{\"name\":\"volume\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceApprovedForToken\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"ask_order\",\"type\":\"uint256\"}],\"name\":\"willsellInfo\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"min_price_each\",\"type\":\"uint256\"},{\"name\":\"bid_order\",\"type\":\"uint256\"},{\"name\":\"frontend_refund\",\"type\":\"address\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"min_trade_amount\",\"type\":\"uint256\"}],\"name\":\"findBestAsk\",\"outputs\":[{\"name\":\"ask_order\",\"type\":\"uint256\"},{\"name\":\"volume\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"price_each\",\"type\":\"uint256\"},{\"name\":\"ask_order_spot\",\"type\":\"uint256\"}],\"name\":\"willsell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"bid_order\",\"type\":\"uint256\"}],\"name\":\"willbuyInfo\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"willsellFindSpot\",\"outputs\":[{\"name\":\"ask_order_spot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"willbuyFindSpot\",\"outputs\":[{\"name\":\"bid_order_spot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"max_price_each\",\"type\":\"uint256\"},{\"name\":\"ask_order\",\"type\":\"uint256\"},{\"name\":\"frontend_refund\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price_each\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"Trade\",\"type\":\"event\"}]\r\n\r\n*/\r\npragma solidity ^0.4.19;\r\ncontract Bursa {\r\n\r\n  address private ceo;\r\n  address private admin;\r\n  address public updateAvailable;\r\n  mapping (address => mapping (uint256 => address)) private willsellUser;\r\n  mapping (address => mapping (uint256 => uint256)) private willsellPrice;\r\n  mapping (address => mapping (uint256 => uint256)) private willsellAmount;\r\n  mapping (address => mapping (uint256 => address)) private willbuyUser;\r\n  mapping (address => mapping (uint256 => uint256)) private willbuyPrice;\r\n  mapping (address => mapping (uint256 => uint256)) private willbuyAmount;\r\n  event Trade(uint256 amount, address token, uint256 price_each, address buyer, address seller);\r\n\r\n\r\n  function Bursa() public {\r\n    admin = msg.sender;\r\n    ceo = msg.sender;\r\n  }\r\n  function() public payable {\r\n    if (updateAvailable != 0) revert();\r\n    funds[msg.sender] += msg.value;\r\n  }\r\n  function deposit() public payable returns (bool) {\r\n    if (updateAvailable != 0) revert();\r\n    funds[msg.sender] += msg.value;\r\n    return true;\r\n  }\r\n\r\n\r\n  function buy(uint256 amount, address token, uint256 max_price_each, uint256 ask_order, address frontend_refund) public payable returns (bool) {\r\n    if (msg.value != 0) funds[msg.sender] += msg.value;\r\n    if ((willsellPrice[token][ask_order] > max_price_each && max_price_each != 0)\r\n      || amount == 0\r\n      || token == 0\r\n      || token == address(this)\r\n      || ask_order == 0\r\n      || funds[msg.sender] <= 1e15\r\n    ) revert();\r\n    address buyer = msg.sender;\r\n    address seller = willsellUser[token][ask_order];\r\n    // Cancel your own order\r\n    if (buyer == seller) {\r\n      if (amount >= willsellAmount[token][ask_order]) {\r\n        willsellAmount[token][ask_order] = 0;\r\n        return true;\r\n      }\r\n      willsellAmount[token][ask_order] -= amount;\r\n      return true;\r\n    }\r\n    // Validate amount\r\n    uint256 volume = willsellVolume(token, ask_order);\r\n    if (amount > volume) {\r\n      if (volume == 0) {\r\n        willsellAmount[token][ask_order] = 0;\r\n        return false;\r\n      }\r\n      amount = volume;\r\n    }\r\n    uint256 pay = willsellPrice[token][ask_order] * amount / 1e18;\r\n    // Buyer pays the fee\r\n    uint256 fee;\r\n    if (pay > 1e16 && traded[msg.sender]) {\r\n      if (frontend_refund == 0 || frontend_refund == msg.sender) {\r\n        fee = 7e14;\r\n      }\r\n      else fee = 1e15;\r\n    } // else fee = 0\r\n    // Validate payout\r\n    if (pay + fee > funds[msg.sender]) {\r\n      pay = funds[msg.sender] - fee;\r\n      amount = pay * 1e18 / willsellPrice[token][ask_order];\r\n    }\r\n    // Trade\r\n    if (!Bursa(token).transferFrom(seller, buyer, amount)) return false;\r\n    funds[seller] = funds[seller] + pay;\r\n    funds[buyer] = funds[buyer] - pay - fee;\r\n    if (fee == 1e15) funds[frontend_refund] = funds[frontend_refund] + 3e14;\r\n    if (traded[msg.sender] == false) {\r\n      funds[ceo] = funds[ceo] + pay / 20;\r\n      traded[msg.sender] = true;\r\n    }\r\n    // Drop uncovered order\r\n    if (amount == volume) {\r\n      willsellAmount[token][ask_order] = 0;\r\n    }\r\n    else willsellAmount[token][ask_order] -= amount;\r\n    Trade(amount, token, willsellPrice[token][ask_order], buyer, seller);\r\n    return true;\r\n  }\r\n\r\n\r\n  function sell(uint256 amount, address token, uint256 min_price_each, uint256 bid_order, address frontend_refund) public payable returns (bool) {\r\n    if (msg.value != 0) funds[msg.sender] += msg.value;\r\n    if (willbuyPrice[token][bid_order] < min_price_each\r\n      || amount == 0\r\n      || token == 0\r\n      || token == address(this)\r\n      || bid_order == 0\r\n    ) revert();\r\n    address buyer = willbuyUser[token][bid_order];\r\n    address seller = msg.sender;\r\n    // Cancel your own order\r\n    if (buyer == seller) {\r\n      if (amount >= willbuyAmount[token][bid_order]) {\r\n        willbuyAmount[token][bid_order] = 0;\r\n        return true;\r\n      }\r\n      willbuyAmount[token][bid_order] -= amount;\r\n      return true;\r\n    }\r\n    // Validate amount\r\n    uint256 volume = willbuyVolume(token, bid_order);\r\n    if (amount > volume) {\r\n      if (volume == 0) {\r\n        willbuyAmount[token][bid_order] = 0;\r\n        return false;\r\n      }\r\n      amount = volume;\r\n    }\r\n    uint256 pay = willbuyPrice[token][bid_order] * amount / 1e18;\r\n    // Seller pays the fee\r\n    uint256 fee;\r\n    if (pay > 1e16 && traded[msg.sender]) {\r\n      if (frontend_refund == 0 || frontend_refund == msg.sender) {\r\n        fee = 7e14;\r\n      }\r\n      else fee = 1e15;\r\n    } // else fee = 0\r\n    // Trade\r\n    if (!Bursa(token).transferFrom(seller, buyer, amount)) return false;\r\n    funds[buyer] = funds[buyer] - pay;\r\n    funds[seller] = funds[seller] + pay - fee;\r\n    if (fee == 1e15) funds[frontend_refund] = funds[frontend_refund] + 3e14;\r\n    if (traded[msg.sender] == false) {\r\n      funds[ceo] = funds[ceo] + pay / 20;\r\n      traded[msg.sender] = true;\r\n    }\r\n    // Drop uncovered order\r\n    if (amount == volume) {\r\n      willbuyAmount[token][bid_order] = 0;\r\n    }\r\n    else willbuyAmount[token][bid_order] -= amount;\r\n    Trade(amount, token, willbuyPrice[token][bid_order], buyer, seller);\r\n    return true;\r\n  }\r\n\r\n\r\n  function willbuy(uint256 amount, address token, uint256 price_each, uint256 bid_order_spot) public payable returns (bool) {\r\n    if (msg.value != 0) funds[msg.sender] += msg.value;\r\n    if (updateAvailable != 0\r\n      || amount == 0\r\n      || token == 0\r\n      || token == address(this)\r\n      || price_each == 0\r\n      || bid_order_spot == 0\r\n    ) revert();\r\n    while (willbuyAmount[token][bid_order_spot] != 0 && funds[willbuyUser[token][bid_order_spot]] != 0) ++bid_order_spot;\r\n    willbuyUser[token][bid_order_spot] = msg.sender;\r\n    willbuyPrice[token][bid_order_spot] = price_each;\r\n    willbuyAmount[token][bid_order_spot] = amount;\r\n    return true;\r\n  }\r\n  function willsell(uint256 amount, address token, uint256 price_each, uint256 ask_order_spot) public payable returns (bool) {\r\n    if (msg.value != 0) funds[msg.sender] += msg.value;\r\n    if (updateAvailable != 0\r\n      || amount == 0\r\n      || token == 0\r\n      || token == address(this)\r\n      || price_each == 0\r\n      || ask_order_spot == 0\r\n    ) revert();\r\n    while (willsellAmount[token][ask_order_spot] != 0) {\r\n      address user = willsellUser[token][ask_order_spot];\r\n      uint256 balanceSeller = Bursa(token).balanceOf(user);\r\n      if (balanceSeller == 0) break;\r\n      uint256 allowanceSeller = Bursa(token).allowance(user, address(this));\r\n      if (allowanceSeller == 0) break;\r\n      ++ask_order_spot;\r\n    }\r\n    willsellUser[token][ask_order_spot] = msg.sender;\r\n    willsellPrice[token][ask_order_spot] = price_each;\r\n    willsellAmount[token][ask_order_spot] = amount;\r\n    return true;\r\n  }\r\n  function withdraw(uint256 amount) public {\r\n    if (funds[msg.sender] < amount || amount == 0) amount = funds[msg.sender];\r\n    funds[msg.sender] -= amount;\r\n    msg.sender.transfer(amount);\r\n  }\r\n\r\n\r\n// Constant methods below\r\n\r\n  function name() constant public returns (string) {\r\n    if (updateAvailable != 0) return \"BURSA DEX (deactivated)\";\r\n    return \"BURSA DEX\";\r\n  }\r\n  function balanceOf(address user)\r\n  constant public returns (uint256 balance) {\r\n    return funds[user];\r\n  }\r\n  function balanceApprovedForToken(address token, address user)\r\n  constant public returns (uint256 amount) {\r\n    if (token == 0 || token == address(this)) return funds[user];\r\n    amount = Bursa(token).balanceOf(user);\r\n    uint256 allowance = Bursa(token).allowance(user, address(this));\r\n    if (amount > allowance) amount = allowance;\r\n    return amount;\r\n  }\r\n\r\n\r\n  function findBestAsk(address token, uint256 min_trade_amount) public\r\n  constant returns (uint256 ask_order, uint256 volume, uint256 price) {\r\n    price = (uint256)(-1);\r\n    uint256 i=1;\r\n    while (willsellUser[token][i] != 0) {\r\n      if (willsellPrice[token][i] < price && willsellAmount[token][i] != 0) {\r\n        volume = willsellVolume(token, i);\r\n        if (volume >= min_trade_amount && volume >= 1e15 * 1e18 / (willsellPrice[token][i] + 1)) {\r\n          price = willsellPrice[token][i];\r\n          ask_order = i;\r\n        }\r\n      }\r\n      ++i;\r\n    }\r\n    if (ask_order == 0) return (0,0,0);\r\n    return;\r\n  }\r\n  function findBestBid(address token, uint256 min_trade_amount) public\r\n  constant returns (uint256 bid_order, uint256 volume, uint256 price) {\r\n    uint256 i=1;\r\n    while (willbuyUser[token][i] != 0) {\r\n      if (willbuyPrice[token][i] > price && willbuyAmount[token][i] != 0) {\r\n        volume = willbuyVolume(token, i);\r\n        if (volume >= min_trade_amount && volume >= 1e15 * 1e18 / (willbuyPrice[token][i] + 1)) {\r\n          price = willbuyPrice[token][i];\r\n          bid_order = i;\r\n        }\r\n      }\r\n      ++i;\r\n    }\r\n    if (bid_order == 0) return (0,0,0);\r\n    return;\r\n  }\r\n\r\n  function willbuyFindSpot(address token) public\r\n  constant returns (uint256 bid_order_spot) {\r\n    // is ERC20?\r\n    Bursa(token).symbol();\r\n    uint256 i=1;\r\n    while (willbuyAmount[token][i] >= 1e15 * 1e18 / (willbuyPrice[token][i] + 1) && funds[willbuyUser[token][i]] != 0) ++i;\r\n    return i;\r\n  }\r\n  function willsellFindSpot(address token) public\r\n  constant returns (uint256 ask_order_spot) {\r\n    // is ERC20?\r\n    Bursa(token).symbol();\r\n    uint256 i=1;\r\n    while (willsellAmount[token][i] >= 1e15 * 1e18 / (willsellPrice[token][i] + 1)) {\r\n      uint256 balanceSeller = Bursa(token).balanceOf(willsellUser[token][i]);\r\n      if (balanceSeller == 0) return i;\r\n      uint256 allowanceSeller = Bursa(token).allowance(willsellUser[token][i], address(this));\r\n      if (allowanceSeller == 0) return i;\r\n      ++i;\r\n    }\r\n    return i;\r\n  }\r\n\r\n\r\n// Get info on orders\r\n\r\n  function willbuyInfo(address token, uint256 bid_order) public\r\n  constant returns (address user, uint256 price, uint256 amount) {\r\n    user = willbuyUser[token][bid_order];\r\n    price = willbuyPrice[token][bid_order];\r\n    amount = willbuyAmount[token][bid_order];\r\n    uint256 pay = price * amount / 1e18;\r\n    if (pay > funds[user]) {\r\n      pay = funds[user];\r\n      amount = pay * 1e18 / price;\r\n    }\r\n    return;\r\n  }\r\n  function willbuyVolume(address token, uint256 bid_order) private\r\n  constant returns (uint256) {\r\n    uint256 amount = willbuyAmount[token][bid_order];\r\n    address user = willbuyUser[token][bid_order];\r\n    if (amount == 0 || funds[user] == 0) return 0;\r\n    uint256 price = willbuyPrice[token][bid_order];\r\n    uint256 pay = price * amount / 1e18;\r\n    if (pay > funds[user]) {\r\n      pay = funds[user];\r\n      amount = pay * 1e18 / price;\r\n    }\r\n    return amount;\r\n  }\r\n\r\n  function willsellInfo(address token, uint256 ask_order) public\r\n  constant returns (address user, uint256 price, uint256 amount) {\r\n    user = willsellUser[token][ask_order];\r\n    price = willsellPrice[token][ask_order];\r\n    amount = willsellAmount[token][ask_order];\r\n    uint256 balanceSeller = Bursa(token).balanceOf(user);\r\n    uint256 allowanceSeller = Bursa(token).allowance(user, address(this));\r\n    if (balanceSeller > allowanceSeller) balanceSeller = allowanceSeller;\r\n    if (amount > balanceSeller) amount = balanceSeller;\r\n    return;\r\n  }\r\n  function willsellVolume(address token, uint256 ask_order) private\r\n  constant returns (uint256) {\r\n    uint256 amount = willsellAmount[token][ask_order];\r\n    if (amount == 0) return 0;\r\n    address user = willsellUser[token][ask_order];\r\n    uint256 balanceSeller = Bursa(token).balanceOf(user);\r\n    if (balanceSeller == 0) return 0;\r\n    uint256 allowanceSeller = Bursa(token).allowance(user, address(this));\r\n    if (allowanceSeller == 0) return 0;\r\n    if (balanceSeller > allowanceSeller) balanceSeller = allowanceSeller;\r\n    if (amount > balanceSeller) amount = balanceSeller;\r\n    return amount;\r\n  }\r\n\r\n\r\n// BURSA ether pegged token\r\n// Used to conveniently show user deposit in wallets\r\n\r\n  function symbol() constant public returns (string) {\r\n    if (updateAvailable != 0) return \"exBURSA\";\r\n    return \"BURSA\";\r\n  }\r\n  function decimals() constant public returns (uint256) {\r\n    return 18;\r\n  }\r\n  function totalSupply() constant public returns (uint256 supply) {\r\n    return this.balance;\r\n  }\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n    if (_value > funds[msg.sender]) _value = funds[msg.sender];\r\n    funds[msg.sender] -= _value;\r\n    funds[_to] += _value;\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n    if (_value > funds[msg.sender]) _value = funds[msg.sender];\r\n    if (_value > approved[_from][msg.sender]) _value = approved[_from][msg.sender];\r\n    funds[_from] -= _value;\r\n    funds[_to] += _value;\r\n    approved[_from][msg.sender] -= _value;\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {\r\n    if (_spender == address(this)) return true;\r\n    approved[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n    if (_spender == address(this)) return balanceOf(_owner);\r\n    return approved[_owner][_spender];\r\n  }\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  mapping (address => mapping (address => uint256)) private approved;\r\n  mapping (address => uint256) private funds;\r\n  mapping (address => bool) private traded;\r\n\r\n\r\n//  Admin methods\r\n//  DO NOT EVER TRANSFER TOKENS TO BURSA OR YOU'LL BE BANNED FROM ETHEREUM\r\n\r\n  function refundLostToken(address token, address user) public {\r\n    if (msg.sender != admin && msg.sender != ceo) return;\r\n    uint256 amount = Bursa(token).balanceOf(address(this));\r\n    Bursa(token).transfer(user, amount);\r\n  }\r\n  function rollUpdate(address _updateAvailable) public {\r\n    if (msg.sender == admin || msg.sender == ceo) updateAvailable = _updateAvailable;\r\n  }\r\n  function assignCEO(address _ceo) public {\r\n    if (msg.sender == admin) {\r\n      ceo = _ceo;\r\n    }\r\n    else if (msg.sender == ceo) {\r\n      admin = ceo;\r\n      ceo = _ceo;\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"price_each\",\"type\":\"uint256\"},{\"name\":\"bid_order_spot\",\"type\":\"uint256\"}],\"name\":\"willbuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updateAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ceo\",\"type\":\"address\"}],\"name\":\"assignCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"min_trade_amount\",\"type\":\"uint256\"}],\"name\":\"findBestBid\",\"outputs\":[{\"name\":\"bid_order\",\"type\":\"uint256\"},{\"name\":\"volume\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceApprovedForToken\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"ask_order\",\"type\":\"uint256\"}],\"name\":\"willsellInfo\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_updateAvailable\",\"type\":\"address\"}],\"name\":\"rollUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"min_price_each\",\"type\":\"uint256\"},{\"name\":\"bid_order\",\"type\":\"uint256\"},{\"name\":\"frontend_refund\",\"type\":\"address\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"refundLostToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"min_trade_amount\",\"type\":\"uint256\"}],\"name\":\"findBestAsk\",\"outputs\":[{\"name\":\"ask_order\",\"type\":\"uint256\"},{\"name\":\"volume\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"price_each\",\"type\":\"uint256\"},{\"name\":\"ask_order_spot\",\"type\":\"uint256\"}],\"name\":\"willsell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"bid_order\",\"type\":\"uint256\"}],\"name\":\"willbuyInfo\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"willsellFindSpot\",\"outputs\":[{\"name\":\"ask_order_spot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"willbuyFindSpot\",\"outputs\":[{\"name\":\"bid_order_spot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"max_price_each\",\"type\":\"uint256\"},{\"name\":\"ask_order\",\"type\":\"uint256\"},{\"name\":\"frontend_refund\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price_each\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Bursa","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://60da2c5b4b1fdef9b80fb2e31e71d19fb81aa9356f1f8a34cff9edcae40bc84c"}]}