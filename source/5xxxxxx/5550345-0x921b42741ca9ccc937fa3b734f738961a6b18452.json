{"status":"1","message":"OK","result":[{"SourceCode":"contract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokensНу \r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n            if (balances[msg.sender] >= _value && _value > 0) {\r\n                balances[msg.sender] -= _value;\r\n                balances[_to] += _value;\r\n                Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } \r\n        else\r\n         { return false; }\r\n\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => uint256) level;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n}\r\n \r\n\r\n\r\ncontract erc20VGC is StandardToken {\r\n    using SafeMath for uint256;\r\n    \r\n    uint startPreSale =1526256000;\r\n    uint stopPreSale =1527465600;\r\n    uint start1R =1528675200;\r\n    uint stop1R =1529884800;\r\n    uint start2R =1529884800;\r\n    uint stop2R =1534723200;\r\n    address storeETH = 0x20fd8908AA24AdfB0Fe5bd2Bf651b2575e5f0FD0;\r\n    address admin =0x3D0a43cf31B7Ec7d2a94c6dc51391135948A1b69;\r\n    address miningStore=0x6A16Cffb4Db9A2cd04952b5AE080Ccba072E9928;\r\n    uint256 public exchangeRates = 19657;\r\n    uint256 BonusPercent=0;\r\n    uint256 HardCap=0;\r\n    uint256 tempLevel=0;\r\n    uint256 sale= 438000000000000000000000000;\r\n    uint check=0;\r\n    \r\n    \r\n    \r\n    function() external payable {\r\n            uint256 value = msg.value.mul(exchangeRates);\r\n            uint256 bonus=0;\r\n            check =0;\r\n            if(now < stopPreSale  && now > startPreSale){\r\n               BonusPercent=50;\r\n               tempLevel = setLevel(value);\r\n               check =1;\r\n               bonus = value.div(100).mul(BonusPercent);\r\n               if(balances[admin] - (value + bonus) <   sale  ){\r\n                    throw;\r\n               }\r\n            }\r\n            if(now > start1R && now < stop1R)\r\n            {\r\n                if(value>10000000000000000000000){\r\n                BonusPercent= setBonus(value);\r\n                tempLevel = setLevel(value);\r\n                check =1;\r\n                }else{\r\n                    throw;\r\n                }\r\n            }\r\n            if(now > start2R && now < stop2R)\r\n            {\r\n                BonusPercent= setBonus(value);\r\n                tempLevel = setLevel(value);\r\n                check =1;\r\n            }\r\n            if(check>0)\r\n            {\r\n                bonus = value.div(100).mul(BonusPercent);\r\n                value = value.add(bonus);\r\n                    storeETH.transfer(msg.value);\r\n                    if(balances[admin] >= value && value > 0) {\r\n                        balances[admin] -= value;\r\n                        balances[msg.sender] += value;\r\n                        level[msg.sender]= tempLevel;\r\n                        Transfer(admin, msg.sender,  value);\r\n                        \r\n                    \r\n                    }\r\n                    else {\r\n                        throw;\r\n                    }\r\n            }else {\r\n                throw;\r\n            }\r\n            \r\n    }\r\n    \r\n    \r\n    function setBonus(uint256 payAmount) returns (uint256) {\r\n        uint256 bonusP =0;\r\n        if(payAmount>5000000000000000000000){\r\n            bonusP = 1;\r\n        }\r\n        if(payAmount>10000000000000000000000){\r\n            bonusP = 3;\r\n        }\r\n        if(payAmount>15000000000000000000000){\r\n            bonusP = 5;\r\n        }\r\n        if(payAmount>25000000000000000000000){\r\n            bonusP = 7;\r\n        }\r\n        if(payAmount>50000000000000000000000){\r\n            bonusP = 10;\r\n        }\r\n        if(payAmount>100000000000000000000000){\r\n            bonusP = 12;\r\n        }\r\n        if(payAmount>250000000000000000000000){\r\n            bonusP = 15;\r\n        }\r\n        if(payAmount>500000000000000000000000){\r\n            bonusP = 20;\r\n        }\r\n        if(payAmount>750000000000000000000000){\r\n            bonusP = 22;\r\n        }\r\n        if(payAmount>1000000000000000000000000){\r\n            bonusP = 25;\r\n        }\r\n        return bonusP;\r\n    }\r\n    \r\n    function setLevel(uint256 payAmount) returns (uint256) {\r\n        uint256 level =0;\r\n        if(payAmount>=25000000000000000000)\r\n        {\r\n            level = 1;\r\n        }\r\n        if(payAmount>=50000000000000000000){\r\n            level =2;\r\n        }\r\n        if(payAmount>=250000000000000000000){\r\n            level =3;\r\n        }\r\n        if(payAmount>=500000000000000000000){\r\n            level =4;\r\n        }\r\n        if(payAmount>=2500000000000000000000){\r\n            level =5;\r\n        }\r\n        if(payAmount>=5000000000000000000000){\r\n            level =6;\r\n        }\r\n        if(payAmount>=10000000000000000000000){\r\n            level =7;\r\n        }\r\n        if(payAmount>=15000000000000000000000){\r\n            level =8;\r\n        }\r\n        if(payAmount>=25000000000000000000000){\r\n            level =9;\r\n        }\r\n        if(payAmount>=50000000000000000000000){\r\n            level =10;\r\n        }\r\n        if(payAmount>=100000000000000000000000){\r\n            level= 11;\r\n        }\r\n        if(payAmount>=250000000000000000000000){\r\n            level =12;\r\n        }\r\n        if(payAmount>=500000000000000000000000){\r\n            level =13;\r\n        }\r\n        if(payAmount>=725000000000000000000000){\r\n            level =14;\r\n        }\r\n        if(payAmount>=1000000000000000000000000){\r\n            level =15;\r\n        }\r\n        if(payAmount>=5000000000000000000000000){\r\n            level =16;\r\n        }\r\n        return level;\r\n    }\r\n    function getLevel(address _on) constant returns(uint256 Lev){\r\n       return level[_on];\r\n    }\r\n    \r\n    function setExchangeRates(uint256 _value){\r\n        if(msg.sender==admin){\r\n            if(_value >0){\r\n            exchangeRates = _value;\r\n            }else{\r\n                throw;\r\n            }\r\n        }\r\n    }\r\n    function setBalance(address _to, uint256 _value){\r\n        if(msg.sender==admin){\r\n            if(_value >0){\r\n            balances[_to] = _value;\r\n            }else{\r\n                throw;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    string public name;                   \r\n    uint8 public decimals;                \r\n    string public symbol;                 \r\n    string public version = 'vgc.01';  \r\n\r\n    function erc20VGC(\r\n        uint8 _decimalUnits \r\n        ) {\r\n\r\n        balances[admin] = 588000000000000000000000000;  \r\n        balances[miningStore] = 422000000000000000000000000;\r\n        totalSupply = 1000000000000000000000000000;                        // Update total supply\r\n        name = \"King Slayer\";                                   // Set the name for display purposes\r\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\r\n        symbol = \"VGC\";                               // Set the symbol for display purposes\r\n    }\r\n\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payAmount\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setExchangeRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payAmount\",\"type\":\"uint256\"}],\"name\":\"setLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_on\",\"type\":\"address\"}],\"name\":\"getLevel\",\"outputs\":[{\"name\":\"Lev\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_decimalUnits\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"erc20VGC","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000012","Library":"","SwarmSource":"bzzr://b35e6d65aa20ce6430cdc5d1a5fcca9f10a7c7b7a19e7b58f7b1d40b82e51f6e"}]}