{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Empires is Ownable {\r\n\r\n    uint curr_rate = 50000000000000000; // 0.05 Ether\r\n    uint withraw_balance = 0;\r\n\r\n    struct Flag {\r\n        address[] spotOwner;\r\n        bytes32[] spotTxt;\r\n        uint spotRate;\r\n        uint prize;\r\n        uint16 spotWon;\r\n    }\r\n\r\n    Flag emptyFlag;\r\n\r\n    mapping (uint16 => Flag[]) public cntry_flgs;\r\n\r\n    function getRate () external view returns (uint) {\r\n        return curr_rate;\r\n    }\r\n\r\n    function setRate (uint newRate) external onlyOwner {\r\n        curr_rate = newRate;\r\n    }\r\n\r\n    function regSpot (uint16 cntryId, bytes32 stxt) private {\r\n\r\n        cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotOwner.push(msg.sender);\r\n        cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotTxt.push(stxt);\r\n        cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].prize = cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].prize + (cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotRate * 70 / 100);\r\n        withraw_balance = withraw_balance + cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotRate - (cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotRate * 70 / 100);\r\n\r\n    }\r\n\r\n    function createFlag (uint16 cntryId, uint sRate) private {\r\n\r\n        cntry_flgs[cntryId].push(Flag(new address[](0), new bytes32[](0), sRate, 0, 1000));\r\n\r\n    }\r\n\r\n    function completedFlag (uint16 cntryId) private {\r\n\r\n        //generate spotWon\r\n        uint16 randomSpot = uint16(uint(keccak256(now, msg.sender)) % 600);\r\n\r\n        // transfer to winner\r\n        cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotOwner[randomSpot].transfer(cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].prize);\r\n\r\n        cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotWon = randomSpot;\r\n\r\n    }\r\n\r\n    function regSpots (uint16 cntryId, uint16 numOfSpots, bytes32 stxt) external payable {\r\n\r\n        require (numOfSpots > 0 && numOfSpots <= 600);\r\n\r\n        uint i;\r\n        uint j;\r\n        uint j1;\r\n        uint flagCompleted;\r\n\r\n        // check active flag exists:\r\n        if (cntry_flgs[cntryId].length > 0) {\r\n          \r\n            require(msg.value == cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotRate * numOfSpots);\r\n\r\n            i = cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotOwner.length;\r\n\r\n            if (600-i >= numOfSpots) {\r\n\r\n                j = numOfSpots;\r\n\r\n                while (j > 0) {\r\n\r\n                    regSpot(cntryId, stxt);\r\n                    j --;\r\n                    i ++;\r\n\r\n                }\r\n\r\n            } else {\r\n              // flag spots overflow\r\n\r\n                j1 = 600-i;\r\n                j = numOfSpots - j1;\r\n\r\n                while (j1 > 0) {\r\n\r\n                    regSpot(cntryId, stxt);\r\n                    j1 --;\r\n                    i ++;\r\n\r\n                }\r\n\r\n                uint currRateHolder = cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotRate;\r\n\r\n                // flag completion\r\n                completedFlag (cntryId);\r\n                flagCompleted = 1;\r\n\r\n                // create new flag\r\n                createFlag(cntryId, currRateHolder);\r\n\r\n                i = 0;\r\n\r\n                while (j > 0) {\r\n\r\n                    regSpot(cntryId, stxt);\r\n                    j --;\r\n                    i ++;\r\n                }\r\n\r\n        }\r\n\r\n      } else {\r\n\r\n            require(msg.value == curr_rate * numOfSpots);\r\n\r\n            // create new flag\r\n            createFlag(cntryId, curr_rate);\r\n\r\n            i = 0;\r\n            j = numOfSpots;\r\n\r\n            while (j > 0) {\r\n\r\n                regSpot(cntryId, stxt);\r\n                j --;\r\n                i ++;\r\n            }\r\n\r\n      }\r\n      \r\n      // check flag completion\r\n        if (i==600) {\r\n            completedFlag (cntryId);\r\n            flagCompleted = 1;\r\n            createFlag(cntryId, curr_rate);\r\n        }\r\n\r\n        UpdateFlagList(cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotOwner, cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotTxt, flagCompleted);\r\n\r\n    }\r\n\r\n    event UpdateFlagList(address[] spotOwners,bytes32[] spotTxt, uint flagCompleted);\r\n\r\n    function getActiveFlag(uint16 cntryId) external view returns (address[],bytes32[],uint,uint,uint16) {\r\n      // check active flag exists:\r\n        if (cntry_flgs[cntryId].length > 0) {\r\n            return (cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotOwner, \r\n            cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotTxt, \r\n            cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotRate, \r\n            cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].prize, \r\n            cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotWon);\r\n        } else {\r\n            return (emptyFlag.spotOwner, \r\n            emptyFlag.spotTxt, \r\n            emptyFlag.spotRate, \r\n            emptyFlag.prize, \r\n            emptyFlag.spotWon);      \r\n        }\r\n    }\r\n\r\n    function getCompletedFlag(uint16 cntryId, uint16 flagId) external view returns (address[],bytes32[],uint,uint,uint16) {\r\n        return (cntry_flgs[cntryId][flagId].spotOwner, \r\n        cntry_flgs[cntryId][flagId].spotTxt, \r\n        cntry_flgs[cntryId][flagId].spotRate, \r\n        cntry_flgs[cntryId][flagId].prize, \r\n        cntry_flgs[cntryId][flagId].spotWon);\r\n    }\r\n\r\n\r\n    function getActiveFlagRate(uint16 cntryId) external view returns (uint) {\r\n        // check active flag exists:\r\n        if (cntry_flgs[cntryId].length > 0) {\r\n            return cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotRate;\r\n        } else {\r\n            return curr_rate;\r\n        }\r\n    }\r\n\r\n    function getCountrySpots(uint16 cntryId) external view returns (uint) {\r\n        if (cntry_flgs[cntryId].length > 0) {\r\n            return (cntry_flgs[cntryId].length-1)*600 + cntry_flgs[cntryId][cntry_flgs[cntryId].length-1].spotOwner.length;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        uint tb = withraw_balance;\r\n        owner.transfer(tb);\r\n        withraw_balance = withraw_balance - tb;\r\n    }\r\n\r\n    function getWithdrawBalance () external view onlyOwner returns (uint) {\r\n        return withraw_balance;\r\n    }\r\n\r\n    function() public payable { }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cntry_flgs\",\"outputs\":[{\"name\":\"spotRate\",\"type\":\"uint256\"},{\"name\":\"prize\",\"type\":\"uint256\"},{\"name\":\"spotWon\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cntryId\",\"type\":\"uint16\"}],\"name\":\"getActiveFlagRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cntryId\",\"type\":\"uint16\"}],\"name\":\"getActiveFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cntryId\",\"type\":\"uint16\"}],\"name\":\"getCountrySpots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cntryId\",\"type\":\"uint16\"},{\"name\":\"numOfSpots\",\"type\":\"uint16\"},{\"name\":\"stxt\",\"type\":\"bytes32\"}],\"name\":\"regSpots\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cntryId\",\"type\":\"uint16\"},{\"name\":\"flagId\",\"type\":\"uint16\"}],\"name\":\"getCompletedFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spotOwners\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"spotTxt\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"name\":\"flagCompleted\",\"type\":\"uint256\"}],\"name\":\"UpdateFlagList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Empires","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://14885143bd208d2e856fcb1ad4b2b018541a8efd729053c550db88006512ac5f"}]}