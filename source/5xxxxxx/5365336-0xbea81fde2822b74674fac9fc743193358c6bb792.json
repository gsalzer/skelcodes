{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Authorizable\r\n * @dev The Authorizable contract has authorized addresses, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"multiple user permissions\".\r\n */\r\ncontract Authorizable is Ownable {\r\n    \r\n    mapping(address => bool) public authorized;\r\n    event AuthorizationSet(address indexed addressAuthorized, bool indexed authorization);\r\n\r\n    /**\r\n     * @dev The Authorizable constructor sets the first `authorized` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Authorizable() public {\r\n        authorize(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the authorized.\r\n     */\r\n    modifier onlyAuthorized() {\r\n        require(authorized[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows \r\n     * @param _address The address to change authorization.\r\n     */\r\n    function authorize(address _address) public onlyOwner {\r\n        require(!authorized[_address]);\r\n        emit AuthorizationSet(_address, true);\r\n        authorized[_address] = true;\r\n    }\r\n    /**\r\n     * @dev Disallows\r\n     * @param _address The address to change authorization.\r\n     */\r\n    function deauthorize(address _address) public onlyOwner {\r\n        require(authorized[_address]);\r\n        emit AuthorizationSet(_address, false);\r\n        authorized[_address] = false;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Whitelist interface\r\n */\r\ncontract Whitelist is Authorizable {\r\n    mapping(address => bool) whitelisted;\r\n    event AddToWhitelist(address _beneficiary);\r\n    event RemoveFromWhitelist(address _beneficiary);\r\n   \r\n    function Whitelist() public {\r\n        addToWhitelist(msg.sender);\r\n    }\r\n    \r\n    \r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isWhitelisted(address _address) public view returns (bool) {\r\n        return whitelisted[_address];\r\n    }\r\n\r\n \r\n    function addToWhitelist(address _beneficiary) public onlyAuthorized {\r\n        require(!whitelisted[_beneficiary]);\r\n        emit AddToWhitelist(_beneficiary);\r\n        whitelisted[_beneficiary] = true;\r\n    }\r\n    \r\n    function removeFromWhitelist(address _beneficiary) public onlyAuthorized {\r\n        require(whitelisted[_beneficiary]);\r\n        emit RemoveFromWhitelist(_beneficiary);\r\n        whitelisted[_beneficiary] = false;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"deauthorize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"AddToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"RemoveFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressAuthorized\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"authorization\",\"type\":\"bool\"}],\"name\":\"AuthorizationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Whitelist","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://55f8f59d726d469a50736a50140c46f5931107439a08b4a09fb309beaea83d65"}]}