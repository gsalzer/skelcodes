{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n// Hedgely - The Ethereum Inverted Market\r\n// radamosch@gmail.com\r\n// Contract based investment game\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Syndicate\r\n * @dev Syndicated profit sharing - for early adopters\r\n * Shares are not transferable -\r\n */\r\ncontract Syndicate is Ownable{\r\n\r\n    uint256 public totalSyndicateShares = 20000;\r\n    uint256 public availableEarlyPlayerShares = 5000;\r\n    uint256 public availableBuyInShares = 5000;\r\n    uint256 public minimumBuyIn = 10;\r\n    uint256 public buyInSharePrice = 500000000000000; // wei = 0.0005 ether\r\n    uint256 public shareCycleSessionSize = 1000; // number of sessions in a share cycle\r\n    uint256 public shareCycleIndex = 0; // current position in share cycle\r\n    uint256 public currentSyndicateValue = 0; // total value of syndicate to be divided among members\r\n    uint256 public numberSyndicateMembers = 0;\r\n    uint256 public syndicatePrecision = 1000000000000000;\r\n\r\n    struct member {\r\n        uint256 numShares;\r\n        uint256 profitShare;\r\n     }\r\n\r\n    address[] private syndicateMembers;\r\n    mapping(address => member ) private members;\r\n\r\n    event ProfitShare(\r\n          uint256 _currentSyndicateValue,\r\n          uint256 _numberSyndicateMembers,\r\n          uint256 _totalOwnedShares,\r\n          uint256 _profitPerShare\r\n    );\r\n\r\n    function Syndicate() public {\r\n        members[msg.sender].numShares = 10000; // owner portion\r\n        members[msg.sender].profitShare = 0;\r\n        numberSyndicateMembers = 1;\r\n        syndicateMembers.push(msg.sender);\r\n    }\r\n\r\n    // initiates a dividend of necessary, sends\r\n    function claimProfit() public {\r\n      if (members[msg.sender].numShares==0) revert(); // only syndicate members.\r\n      uint256 profitShare = members[msg.sender].profitShare;\r\n      if (profitShare>0){\r\n        members[msg.sender].profitShare = 0;\r\n        msg.sender.transfer(profitShare);\r\n      }\r\n    }\r\n\r\n    // distribute profit amonge syndicate members on a percentage share basis\r\n    function distributeProfit() internal {\r\n\r\n      uint256 totalOwnedShares = totalSyndicateShares-(availableEarlyPlayerShares+availableBuyInShares);\r\n      uint256 profitPerShare = SafeMath.div(currentSyndicateValue,totalOwnedShares);\r\n\r\n      // foreach member , calculate their profitshare\r\n      for(uint i = 0; i< numberSyndicateMembers; i++)\r\n      {\r\n        // do += so that acrues across share cycles.\r\n        members[syndicateMembers[i]].profitShare+=SafeMath.mul(members[syndicateMembers[i]].numShares,profitPerShare);\r\n      }\r\n\r\n      // emit a profit share event\r\n      ProfitShare(currentSyndicateValue, numberSyndicateMembers, totalOwnedShares , profitPerShare);\r\n\r\n      currentSyndicateValue=0; // all the profit has been divided up\r\n      shareCycleIndex = 0; // restart the share cycle count.\r\n    }\r\n\r\n    // allocate syndicate shares up to the limit.\r\n    function allocateEarlyPlayerShare() internal {\r\n        if (availableEarlyPlayerShares==0) return;\r\n\t\t    availableEarlyPlayerShares--;\r\n       \taddMember(); // possibly add this member to the syndicate\r\n        members[msg.sender].numShares+=1;\r\n\r\n    }\r\n\r\n    // add new member of syndicate\r\n    function addMember() internal {\r\n    \t if (members[msg.sender].numShares == 0){\r\n\t\t          syndicateMembers.push(msg.sender);\r\n\t\t          numberSyndicateMembers++;\r\n\t\t    }\r\n    }\r\n\r\n    // buy into syndicate\r\n    function buyIntoSyndicate() public payable  {\r\n    \t\tif(msg.value==0 || availableBuyInShares==0) revert();\r\n      \t\tif(msg.value < minimumBuyIn*buyInSharePrice) revert();\r\n\r\n     \t\tuint256 value = (msg.value/syndicatePrecision)*syndicatePrecision; // ensure precision\r\n\t\t    uint256 allocation = value/buyInSharePrice;\r\n\r\n\t\t    if (allocation >= availableBuyInShares){\r\n\t\t        allocation = availableBuyInShares; // limit hit\r\n\t\t    }\r\n\t\t    availableBuyInShares-=allocation;\r\n\t\t    addMember(); // possibly add this member to the syndicate\r\n\t      members[msg.sender].numShares+=allocation;\r\n\r\n    }\r\n\r\n    // how many shares?\r\n    function memberShareCount() public  view returns (uint256) {\r\n        return members[msg.sender].numShares;\r\n    }\r\n\r\n    // how much profit?\r\n    function memberProfitShare() public  view returns (uint256) {\r\n        return members[msg.sender].profitShare;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * Core Hedgely Contract\r\n */\r\ncontract Hedgely is Ownable, Syndicate {\r\n\r\n   // Array of players\r\n   address[] private players;\r\n   mapping(address => bool) private activePlayers;\r\n   uint256 numPlayers = 0;\r\n\r\n   // map each player address to their portfolio of investments\r\n   mapping(address => uint256 [10] ) private playerPortfolio;\r\n\r\n   uint256 public totalHedgelyWinnings;\r\n   uint256 public totalHedgelyInvested;\r\n\r\n   uint256[10] private marketOptions;\r\n\r\n   // The total amount of Ether bet for this current market\r\n   uint256 public totalInvested;\r\n   // The amount of Ether used to see the market\r\n   uint256 private seedInvestment;\r\n\r\n   // The total number of investments the users have made\r\n   uint256 public numberOfInvestments;\r\n\r\n   // The number that won the last game\r\n   uint256 public numberWinner;\r\n\r\n   // current session information\r\n   uint256 public startingBlock;\r\n   uint256 public endingBlock;\r\n   uint256 public sessionBlockSize;\r\n   uint256 public sessionNumber;\r\n   uint256 public currentLowest;\r\n   uint256 public currentLowestCount; // should count the number of currentLowest to prevent a tie\r\n\r\n   uint256 public precision = 1000000000000000; // rounding to this will keep it to 1 finney resolution\r\n   uint256 public minimumStake = 1 finney;\r\n\r\n     event Invest(\r\n           address _from,\r\n           uint256 _option,\r\n           uint256 _value,\r\n           uint256[10] _marketOptions,\r\n           uint _blockNumber\r\n     );\r\n\r\n     event EndSession(\r\n           uint256 _sessionNumber,\r\n           uint256 _winningOption,\r\n           uint256[10] _marketOptions,\r\n           uint256 _blockNumber\r\n     );\r\n\r\n     event StartSession(\r\n           uint256 _sessionNumber,\r\n           uint256 _sessionBlockSize,\r\n           uint256[10] _marketOptions,\r\n           uint256 _blockNumber\r\n     );\r\n\r\n    bool locked;\r\n    modifier noReentrancy() {\r\n        require(!locked);\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n   function Hedgely() public {\r\n     owner = msg.sender;\r\n     sessionBlockSize = 100;\r\n     sessionNumber = 0;\r\n     totalHedgelyWinnings = 0;\r\n     totalHedgelyInvested = 0;\r\n     numPlayers = 0;\r\n     resetMarket();\r\n   }\r\n\r\n    // the full amount invested in each option\r\n   function getMarketOptions() public constant returns (uint256[10])\r\n    {\r\n        return marketOptions;\r\n    }\r\n\r\n    // each player can get their own portfolio\r\n   function getPlayerPortfolio() public constant returns (uint256[10])\r\n    {\r\n        return playerPortfolio[msg.sender];\r\n    }\r\n\r\n    // the number of investors this session\r\n    function numberOfInvestors() public constant returns(uint count) {\r\n        return numPlayers;\r\n    }\r\n\r\n    // generate a random number between 1 and 20 to seed a symbol\r\n    function rand() internal returns (uint64) {\r\n      return random(19)+1;\r\n    }\r\n\r\n    // pseudo random - but does that matter?\r\n    uint64 _seed = 0;\r\n    function random(uint64 upper) private returns (uint64 randomNumber) {\r\n       _seed = uint64(keccak256(keccak256(block.blockhash(block.number), _seed), now));\r\n       return _seed % upper;\r\n     }\r\n\r\n    // resets the market conditions\r\n   function resetMarket() internal {\r\n\r\n    sessionNumber ++;\r\n    startingBlock = block.number;\r\n    endingBlock = startingBlock + sessionBlockSize; // approximately every 5 minutes - can play with this\r\n    numPlayers = 0;\r\n\r\n    // randomize the initial market values\r\n    uint256 sumInvested = 0;\r\n    for(uint i=0;i<10;i++)\r\n    {\r\n        uint256 num =  rand();\r\n        marketOptions[i] =num * precision; // wei\r\n        sumInvested+=  marketOptions[i];\r\n    }\r\n\r\n     playerPortfolio[this] = marketOptions;\r\n     totalInvested =  sumInvested;\r\n     seedInvestment = sumInvested;\r\n     insertPlayer(this);\r\n     numPlayers=1;\r\n     numberOfInvestments = 10;\r\n\r\n     currentLowest = findCurrentLowest();\r\n     StartSession(sessionNumber, sessionBlockSize, marketOptions , startingBlock);\r\n\r\n   }\r\n\r\n\r\n    // utility to round to the game precision\r\n    function roundIt(uint256 amount) internal constant returns (uint256)\r\n    {\r\n        // round down to correct preicision\r\n        uint256 result = (amount/precision)*precision;\r\n        return result;\r\n    }\r\n\r\n    // main entry point for investors/players\r\n    function invest(uint256 optionNumber) public payable noReentrancy {\r\n\r\n      // Check that the number is within the range (uints are always>=0 anyway)\r\n      assert(optionNumber <= 9);\r\n      uint256 amount = roundIt(msg.value); // round to precision\r\n      assert(amount >= minimumStake);\r\n\r\n      uint256 holding = playerPortfolio[msg.sender][optionNumber];\r\n      holding = SafeMath.add(holding, amount);\r\n      playerPortfolio[msg.sender][optionNumber] = holding;\r\n\r\n      marketOptions[optionNumber] = SafeMath.add(marketOptions[optionNumber],amount);\r\n\r\n      numberOfInvestments += 1;\r\n      totalInvested += amount;\r\n      totalHedgelyInvested += amount;\r\n      if (!activePlayers[msg.sender]){\r\n                    insertPlayer(msg.sender);\r\n                    activePlayers[msg.sender]=true;\r\n       }\r\n\r\n      Invest(msg.sender, optionNumber, amount, marketOptions, block.number);\r\n\r\n      // possibly allocate syndicate shares\r\n      allocateEarlyPlayerShare(); // allocate a single share per investment for early adopters\r\n\r\n      currentLowest = findCurrentLowest();\r\n      if (block.number >= endingBlock && currentLowestCount==1) distributeWinnings();\r\n\r\n    } // end invest\r\n\r\n\r\n    // find lowest option sets currentLowestCount>1 if there are more than 1 lowest\r\n    function findCurrentLowest() internal returns (uint lowestOption) {\r\n\r\n      uint winner = 0;\r\n      uint lowestTotal = marketOptions[0];\r\n      currentLowestCount = 0;\r\n      for(uint i=0;i<10;i++)\r\n      {\r\n          if (marketOptions [i]<lowestTotal){\r\n              winner = i;\r\n              lowestTotal = marketOptions [i];\r\n              currentLowestCount = 0;\r\n          }\r\n         if (marketOptions [i]==lowestTotal){currentLowestCount+=1;}\r\n      }\r\n      return winner;\r\n    }\r\n\r\n    // distribute winnings at the end of a session\r\n    function distributeWinnings() internal {\r\n\r\n      if (currentLowestCount>1){\r\n      return; // cannot end session because there is no lowest.\r\n      }\r\n\r\n      numberWinner = currentLowest;\r\n\r\n      // record the end of session\r\n      EndSession(sessionNumber, numberWinner, marketOptions , block.number);\r\n\r\n      uint256 sessionWinnings = 0;\r\n      for(uint j=1;j<numPlayers;j++)\r\n      {\r\n      if (playerPortfolio[players[j]][numberWinner]>0){\r\n        uint256 winningAmount =  playerPortfolio[players[j]][numberWinner];\r\n        uint256 winnings = SafeMath.mul(8,winningAmount); // eight times the invested amount.\r\n        totalHedgelyWinnings+=winnings;\r\n        sessionWinnings+=winnings;\r\n        players[j].transfer(winnings); // don't throw here\r\n      }\r\n\r\n      playerPortfolio[players[j]] = [0,0,0,0,0,0,0,0,0,0];\r\n      activePlayers[players[j]]=false;\r\n\r\n      }\r\n\r\n      uint256 playerInvestments = totalInvested-seedInvestment;\r\n\r\n      if (sessionWinnings>playerInvestments){\r\n        uint256 loss = sessionWinnings-playerInvestments; // this is a loss\r\n        if (currentSyndicateValue>=loss){\r\n          currentSyndicateValue-=loss;\r\n        }else{\r\n          currentSyndicateValue = 0;\r\n        }\r\n      }\r\n\r\n      if (playerInvestments>sessionWinnings){\r\n        currentSyndicateValue+=playerInvestments-sessionWinnings; // this is a gain\r\n      }\r\n\r\n      // check if share cycle is complete and if required distribute profits\r\n      shareCycleIndex+=1;\r\n      if (shareCycleIndex >= shareCycleSessionSize){\r\n        distributeProfit();\r\n      }\r\n\r\n      resetMarket();\r\n    } // end distribute winnings\r\n\r\n\r\n    // convenience to manage a growing array\r\n    function insertPlayer(address value) internal {\r\n        if(numPlayers == players.length) {\r\n            players.length += 1;\r\n        }\r\n        players[numPlayers++] = value;\r\n    }\r\n\r\n   // We might vary this at some point\r\n    function setsessionBlockSize (uint256 blockCount) public onlyOwner {\r\n        sessionBlockSize = blockCount;\r\n    }\r\n\r\n    // ----- admin functions in event of an issue --\r\n\r\n    function withdraw(uint256 amount) public onlyOwner {\r\n        require(amount<=this.balance);\r\n        if (amount==0){\r\n            amount=this.balance;\r\n        }\r\n        owner.transfer(amount);\r\n    }\r\n\r\n\r\n   // In the event of catastrophe\r\n    function kill()  public onlyOwner {\r\n         if(msg.sender == owner)\r\n            selfdestruct(owner);\r\n    }\r\n\r\n    // donations, funding, replenish\r\n     function() public payable {}\r\n\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"sessionNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyIntoSyndicate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfInvestors\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayerPortfolio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"optionNumber\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareCycleSessionSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"memberProfitShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSyndicateShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHedgelyWinnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHedgelyInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyInSharePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMarketOptions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"syndicatePrecision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLowestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sessionBlockSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareCycleIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableEarlyPlayerShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endingBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLowest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberSyndicateMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"memberShareCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBuyIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blockCount\",\"type\":\"uint256\"}],\"name\":\"setsessionBlockSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSyndicateValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"precision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startingBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableBuyInShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_option\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_marketOptions\",\"type\":\"uint256[10]\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sessionNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winningOption\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_marketOptions\",\"type\":\"uint256[10]\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"EndSession\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sessionNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sessionBlockSize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_marketOptions\",\"type\":\"uint256[10]\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"StartSession\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_currentSyndicateValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_numberSyndicateMembers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalOwnedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_profitPerShare\",\"type\":\"uint256\"}],\"name\":\"ProfitShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Hedgely","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://58bb168f4f22dcb297ae6ad568dadb7240837341dc63bd33874d7cff68ba3a4c"}]}