{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract Coinflip {\r\n\r\n    uint public minWager = 10000000000000000;\r\n    uint public joinDelta = 10;\r\n    uint public fee = 1; //1%\r\n    uint public cancelFee = 1; //1%\r\n    uint public maxDuration = 86400; //24h\r\n    bool public canCreateGames = true;\r\n\r\n    address public owner = msg.sender;\r\n\r\n    uint public gamesCounter = 0;\r\n    mapping(uint => CoinFlipGame) private games;\r\n    event gameStateChanged(uint gameId, uint state);\r\n    event onWithdraw(uint amount, uint time);\r\n    event onDeposit(uint amount, address from, uint time);\r\n\r\n    struct CoinFlipGame {\r\n        uint state;\r\n        uint createTime;\r\n        uint endTime;\r\n        uint odds;\r\n        uint fee;\r\n        uint hostWager;\r\n        uint opponentWager;\r\n        uint cancelFee;\r\n        uint winAmount;\r\n        address host;\r\n        address opponent;\r\n        address winner;\r\n    }\r\n\r\n    function() public payable {\r\n        onDeposit(msg.value, msg.sender, now);\r\n    }\r\n\r\n    modifier onlyBy(address _account)\r\n    {\r\n        require(msg.sender == _account);\r\n        _;\r\n    }\r\n\r\n    function terminate() public onlyBy(owner) {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function randomize() private view returns (uint) {\r\n        var firstPart =  uint(block.blockhash(block.number-1)) % 25;\r\n        var secondPart =  uint(block.blockhash(block.number-2)) % 25;\r\n        var thirdPart =  uint(block.blockhash(block.number-3)) % 25;\r\n        var fourthPart =  uint(block.blockhash(block.number-4)) % 25;\r\n        return firstPart + secondPart + thirdPart + fourthPart;\r\n    }\r\n\r\n    function withdraw(uint amount) onlyBy(owner) public {\r\n        require(amount > 0);\r\n        owner.transfer(amount);\r\n        onWithdraw(amount, now);\r\n    }\r\n\r\n    function toggleCanCreateGames() onlyBy(owner) public {\r\n        canCreateGames = !canCreateGames;\r\n    }\r\n\r\n    function setCancelFee(uint newCancelFee) onlyBy(owner) public {\r\n        require(newCancelFee > 0 && newCancelFee < 25);\r\n        cancelFee = newCancelFee;\r\n    }\r\n\r\n    function setMinWager(uint newMinWager) onlyBy(owner) public {\r\n        require(newMinWager > 0);\r\n        minWager = newMinWager;\r\n    }\r\n\r\n    function setMaxDuration(uint newMaxDuration) onlyBy(owner) public {\r\n        require(newMaxDuration > 0);\r\n        maxDuration = newMaxDuration;\r\n    }\r\n\r\n    function setFee(uint newFee) onlyBy(owner) public {\r\n        require(newFee < 25);\r\n        fee = newFee;\r\n    }\r\n\r\n    function setJoinDelta(uint newJoinDelta) onlyBy(owner) public {\r\n        require(newJoinDelta > 0);\r\n        require(newJoinDelta < 100);\r\n        joinDelta = newJoinDelta;\r\n    }\r\n\r\n    function getGame(uint id) public constant returns(  uint gameId,\r\n                                                        uint state,\r\n                                                        uint createTime,\r\n                                                        uint endTime,\r\n                                                        uint odds,\r\n                                                        address host,\r\n                                                        uint hostWager,\r\n                                                        address opponent,\r\n                                                        uint opponentWager,\r\n                                                        address winner,\r\n                                                        uint winAmount) {\r\n        require(id <= gamesCounter);\r\n        var game = games[id];\r\n        return (\r\n        id,\r\n        game.state,\r\n        game.createTime,\r\n        game.endTime,\r\n        game.odds,\r\n        game.host,\r\n        game.hostWager,\r\n        game.opponent,\r\n        game.opponentWager,\r\n        game.winner,\r\n        game.winAmount);\r\n    }\r\n\r\n    function getGameFees(uint id) public constant returns(  uint gameId,\r\n        uint feeVal,\r\n        uint cancelFeeVal) {\r\n        require(id <= gamesCounter);\r\n        var game = games[id];\r\n        return (\r\n        id,\r\n        game.fee,\r\n        game.cancelFee);\r\n    }\r\n\r\n    function cancelGame(uint id) public {\r\n        require(id <= gamesCounter);\r\n        CoinFlipGame storage game = games[id];\r\n        if(msg.sender == game.host) {\r\n            game.state = 3; //cacneled\r\n            game.endTime = now;\r\n            game.host.transfer(game.hostWager);\r\n            gameStateChanged(id, 3);\r\n        } else {\r\n            require(game.state == 1); //active\r\n            require((now - game.createTime) >= maxDuration); //outdated\r\n            require(msg.sender == owner); //server cancel\r\n            gameStateChanged(id, 3);\r\n            game.state = 3; //canceled\r\n            game.endTime = now;\r\n            var cancelFeeValue = game.hostWager * cancelFee / 100;\r\n            game.host.transfer(game.hostWager - cancelFeeValue);\r\n            game.cancelFee = cancelFeeValue;\r\n        }\r\n    }\r\n\r\n    function joinGame(uint id) public payable {\r\n        var game = games[id];\r\n        require(game.state == 1);\r\n        require(msg.value >= minWager);\r\n        require((now - game.createTime) < maxDuration); //not outdated\r\n        if(msg.value != game.hostWager) {\r\n            uint delta;\r\n            if( game.hostWager < msg.value ) {\r\n                delta = msg.value - game.hostWager;\r\n            } else {\r\n                delta = game.hostWager - msg.value;\r\n            }\r\n            require( ((delta * 100) / game.hostWager ) <= joinDelta);\r\n        }\r\n\r\n        game.state = 2;\r\n        gameStateChanged(id, 2);\r\n        game.opponent = msg.sender;\r\n        game.opponentWager = msg.value;\r\n        game.endTime = now;\r\n        game.odds = randomize() % 100;\r\n        var totalAmount = (game.hostWager + game.opponentWager);\r\n        var hostWagerPercentage = (100 * game.hostWager) / totalAmount;\r\n        game.fee = (totalAmount * fee) / 100;\r\n        var transferAmount = totalAmount - game.fee;\r\n        require(game.odds >= 0 && game.odds <= 100);\r\n        if(hostWagerPercentage > game.odds) {\r\n            game.winner = game.host;\r\n            game.winAmount = transferAmount;\r\n            game.host.transfer(transferAmount);\r\n        } else {\r\n            game.winner = game.opponent;\r\n            game.winAmount = transferAmount;\r\n            game.opponent.transfer(transferAmount);\r\n        }\r\n    }\r\n\r\n    function startGame() public payable returns(uint) {\r\n        require(canCreateGames == true);\r\n        require(msg.value >= minWager);\r\n        gamesCounter++;\r\n        var game = games[gamesCounter];\r\n        gameStateChanged(gamesCounter, 1);\r\n        game.state = 1;\r\n        game.createTime = now;\r\n        game.host = msg.sender;\r\n        game.hostWager = msg.value;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cancelFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCreateGames\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamesCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleCanCreateGames\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"joinDelta\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newJoinDelta\",\"type\":\"uint256\"}],\"name\":\"setJoinDelta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinWager\",\"type\":\"uint256\"}],\"name\":\"setMinWager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint256\"},{\"name\":\"createTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"odds\",\"type\":\"uint256\"},{\"name\":\"host\",\"type\":\"address\"},{\"name\":\"hostWager\",\"type\":\"uint256\"},{\"name\":\"opponent\",\"type\":\"address\"},{\"name\":\"opponentWager\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"address\"},{\"name\":\"winAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWager\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCancelFee\",\"type\":\"uint256\"}],\"name\":\"setCancelFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getGameFees\",\"outputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"feeVal\",\"type\":\"uint256\"},{\"name\":\"cancelFeeVal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"gameStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"type\":\"event\"}]","ContractName":"Coinflip","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cdf44591ee7f4d4cd73947912762346a0700c33ac1e5c460278492af482cb4a5"}]}