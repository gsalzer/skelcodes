{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/**\r\n\r\n * Math operations with safety checks\r\n\r\n */\r\n\r\ncontract BaseSafeMath {\r\n\r\n\r\n    /*\r\n    standard uint256 functions\r\n     */\r\n\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal \r\n\r\n    returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal \r\n\r\n    returns (uint256) {\r\n\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal \r\n\r\n    returns (uint256) {\r\n\r\n        uint256 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal \r\n\r\n    returns (uint256) {\r\n\r\n\t    assert( b > 0 );\r\n\t\t\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function min(uint256 x, uint256 y) internal \r\n\r\n    returns (uint256 z) {\r\n\r\n        return x <= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n    function max(uint256 x, uint256 y) internal \r\n\r\n    returns (uint256 z) {\r\n\r\n        return x >= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n\r\n    /*\r\n\r\n    uint128 functions\r\n\r\n     */\r\n\r\n\r\n\r\n    function madd(uint128 a, uint128 b) internal \r\n\r\n    returns (uint128) {\r\n\r\n        uint128 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function msub(uint128 a, uint128 b) internal \r\n\r\n    returns (uint128) {\r\n\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n    function mmul(uint128 a, uint128 b) internal \r\n\r\n    returns (uint128) {\r\n\r\n        uint128 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function mdiv(uint128 a, uint128 b) internal \r\n\r\n    returns (uint128) {\r\n\r\n\t    assert( b > 0 );\r\n\t\r\n        uint128 c = a / b;\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function mmin(uint128 x, uint128 y) internal \r\n\r\n    returns (uint128 z) {\r\n\r\n        return x <= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n    function mmax(uint128 x, uint128 y) internal \r\n\r\n    returns (uint128 z) {\r\n\r\n        return x >= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n\r\n    /*\r\n\r\n    uint64 functions\r\n\r\n     */\r\n\r\n\r\n\r\n    function miadd(uint64 a, uint64 b) internal \r\n\r\n    returns (uint64) {\r\n\r\n        uint64 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function misub(uint64 a, uint64 b) internal \r\n\r\n    returns (uint64) {\r\n\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n    function mimul(uint64 a, uint64 b) internal \r\n\r\n    returns (uint64) {\r\n\r\n        uint64 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function midiv(uint64 a, uint64 b) internal \r\n\r\n    returns (uint64) {\r\n\r\n\t    assert( b > 0 );\r\n\t\r\n        uint64 c = a / b;\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function mimin(uint64 x, uint64 y) internal \r\n\r\n    returns (uint64 z) {\r\n\r\n        return x <= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n    function mimax(uint64 x, uint64 y) internal \r\n\r\n    returns (uint64 z) {\r\n\r\n        return x >= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\n\r\n\r\ncontract BaseERC20 {\r\n\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\t\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal;\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n\r\n/**\r\n\r\n * @title Standard ERC20 token\r\n\r\n *\r\n\r\n * @dev Implementation of the basic standard token.\r\n\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n\r\n */\r\n\r\ncontract LightCoinToken is BaseERC20, BaseSafeMath {\r\n\r\n    //The solidity created time\r\n\taddress public owner;\r\n\taddress public lockOwner;\r\n\tuint256 public lockAmount ;\r\n\tuint256 public startTime ;\r\n    function LightCoinToken() public {\r\n\t\towner = 0x9a64fE62837d8E2C0Bd0C2a96bbDdEA609Ab2F19;\r\n\t\tlockOwner = 0x821C05372425709a68090A17075A855dd20371c7;\r\n\t\tstartTime = 1515686400;\r\n        name = \"Lightcoin\";\r\n        symbol = \"Light\";\r\n        decimals = 8;\r\n        totalSupply = 21000000000000000000;\r\n\t\tbalanceOf[owner] = totalSupply * 90 /100 ;\r\n\t\tbalanceOf[0x47388Cb39BE5E8e3049A1E357B03431F70f8af12]=2000000;\r\n\t\tlockAmount = totalSupply / 10 ;\r\n    }\r\n\r\n\t/// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function getBalanceOf(address _owner) public constant returns (uint256 balance) {\r\n\t\t return balanceOf[_owner];\r\n\t}\r\n\t\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = add(balanceOf[_from], balanceOf[_to]);\r\n\t\t\r\n        // Subtract from the sender\r\n        balanceOf[_from] = sub(balanceOf[_from], _value);\r\n        // Add the same to the recipient\r\n        balanceOf[_to] = add(balanceOf[_to], _value);\r\n\t\t\r\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(add(balanceOf[_from], balanceOf[_to]) == previousBalances);\r\n\t\t\r\n        Transfer(_from, _to, _value);\r\n\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success)  {\r\n        _transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        // Check allowance\r\n        allowed[_from][msg.sender] = sub(allowed[_from][msg.sender], _value);\r\n\t\t\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n    returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n\t\t\r\n\t    Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n\t}\r\n\t\r\n\tfunction releaseToken() public{\r\n\t   require(now >= startTime + 2 * 365 * 86400 );\t   \r\n       uint256 i = ((now  - startTime - 2 * 365 * 86400) / (0.5 * 365 * 86400));\r\n\t   uint256  releasevalue = totalSupply /40 ;\r\n\t   require(lockAmount > (4 - i - 1) * releasevalue); \t   \r\n\t   lockAmount -= releasevalue ;\r\n\t   balanceOf[lockOwner] +=  releasevalue ;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LightCoinToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8900e4d7af3be2c610d74193dbe7128545e5f1da543b867590979e33dd1c5a2e"}]}