{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary MathUtils {\r\n    using SafeMath for uint256;\r\n\r\n    // Divisor used for representing percentages\r\n    uint256 public constant PERC_DIVISOR = 1000000;\r\n\r\n    /*\r\n     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\r\n     * @param _amount Amount that is supposed to be a percentage\r\n     */\r\n    function validPerc(uint256 _amount) internal pure returns (bool) {\r\n        return _amount <= PERC_DIVISOR;\r\n    }\r\n\r\n    /*\r\n     * @dev Compute percentage of a value with the percentage represented by a fraction\r\n     * @param _amount Amount to take the percentage of\r\n     * @param _fracNum Numerator of fraction representing the percentage\r\n     * @param _fracDenom Denominator of fraction representing the percentage\r\n     */\r\n    function percOf(uint256 _amount, uint256 _fracNum, uint256 _fracDenom) internal pure returns (uint256) {\r\n        return _amount.mul(percPoints(_fracNum, _fracDenom)).div(PERC_DIVISOR);\r\n    }\r\n\r\n    /*\r\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\r\n     * @param _amount Amount to take the percentage of\r\n     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\r\n     */\r\n    function percOf(uint256 _amount, uint256 _fracNum) internal pure returns (uint256) {\r\n        return _amount.mul(_fracNum).div(PERC_DIVISOR);\r\n    }\r\n\r\n    /*\r\n     * @dev Compute percentage representation of a fraction\r\n     * @param _fracNum Numerator of fraction represeting the percentage\r\n     * @param _fracDenom Denominator of fraction represeting the percentage\r\n     */\r\n    function percPoints(uint256 _fracNum, uint256 _fracDenom) internal pure returns (uint256) {\r\n        return _fracNum.mul(PERC_DIVISOR).div(_fracDenom);\r\n    }\r\n}\r\n\r\ncontract ILivepeerToken is ERC20, Ownable {\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n    function burn(uint256 _amount) public;\r\n}\r\n\r\ncontract IController is Pausable {\r\n    event SetContractInfo(bytes32 id, address contractAddress, bytes20 gitCommitHash);\r\n\r\n    function setContractInfo(bytes32 _id, address _contractAddress, bytes20 _gitCommitHash) external;\r\n    function updateController(bytes32 _id, address _controller) external;\r\n    function getContract(bytes32 _id) public view returns (address);\r\n}\r\n\r\ncontract IManager {\r\n    event SetController(address controller);\r\n    event ParameterUpdate(string param);\r\n\r\n    function setController(address _controller) external;\r\n}\r\n\r\ncontract Manager is IManager {\r\n    // Controller that contract is registered with\r\n    IController public controller;\r\n\r\n    // Check if sender is controller\r\n    modifier onlyController() {\r\n        require(msg.sender == address(controller));\r\n        _;\r\n    }\r\n\r\n    // Check if sender is controller owner\r\n    modifier onlyControllerOwner() {\r\n        require(msg.sender == controller.owner());\r\n        _;\r\n    }\r\n\r\n    // Check if controller is not paused\r\n    modifier whenSystemNotPaused() {\r\n        require(!controller.paused());\r\n        _;\r\n    }\r\n\r\n    // Check if controller is paused\r\n    modifier whenSystemPaused() {\r\n        require(controller.paused());\r\n        _;\r\n    }\r\n\r\n    function Manager(address _controller) public {\r\n        controller = IController(_controller);\r\n    }\r\n\r\n    /*\r\n     * @dev Set controller. Only callable by current controller\r\n     * @param _controller Controller contract address\r\n     */\r\n    function setController(address _controller) external onlyController {\r\n        controller = IController(_controller);\r\n\r\n        SetController(_controller);\r\n    }\r\n}\r\n\r\n/*\r\n * @title Interface for BondingManager\r\n */\r\ncontract IBondingManager {\r\n    event TranscoderUpdate(address indexed transcoder, uint256 pendingRewardCut, uint256 pendingFeeShare, uint256 pendingPricePerSegment, bool registered);\r\n    event TranscoderEvicted(address indexed transcoder);\r\n    event TranscoderResigned(address indexed transcoder);\r\n    event TranscoderSlashed(address indexed transcoder, address finder, uint256 penalty, uint256 finderReward);\r\n    event Reward(address indexed transcoder, uint256 amount);\r\n    event Bond(address indexed delegate, address indexed delegator);\r\n    event Unbond(address indexed delegate, address indexed delegator);\r\n    event WithdrawStake(address indexed delegator);\r\n    event WithdrawFees(address indexed delegator);\r\n\r\n    // External functions\r\n    function setActiveTranscoders() external;\r\n    function updateTranscoderWithFees(address _transcoder, uint256 _fees, uint256 _round) external;\r\n    function slashTranscoder(address _transcoder, address _finder, uint256 _slashAmount, uint256 _finderFee) external;\r\n    function electActiveTranscoder(uint256 _maxPricePerSegment, bytes32 _blockHash, uint256 _round) external view returns (address);\r\n\r\n    // Public functions\r\n    function transcoderTotalStake(address _transcoder) public view returns (uint256);\r\n    function activeTranscoderTotalStake(address _transcoder, uint256 _round) public view returns (uint256);\r\n    function isRegisteredTranscoder(address _transcoder) public view returns (bool);\r\n    function getTotalBonded() public view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title RoundsManager interface\r\n */\r\ncontract IRoundsManager {\r\n    // Events\r\n    event NewRound(uint256 round);\r\n\r\n    // External functions\r\n    function initializeRound() external;\r\n\r\n    // Public functions\r\n    function blockNum() public view returns (uint256);\r\n    function blockHash(uint256 _block) public view returns (bytes32);\r\n    function currentRound() public view returns (uint256);\r\n    function currentRoundStartBlock() public view returns (uint256);\r\n    function currentRoundInitialized() public view returns (bool);\r\n    function currentRoundLocked() public view returns (bool);\r\n}\r\n\r\n/**\r\n * @title Minter interface\r\n */\r\ncontract IMinter {\r\n    // Events\r\n    event SetCurrentRewardTokens(uint256 currentMintableTokens, uint256 currentInflation);\r\n\r\n    // External functions\r\n    function createReward(uint256 _fracNum, uint256 _fracDenom) external returns (uint256);\r\n    function trustedTransferTokens(address _to, uint256 _amount) external;\r\n    function trustedBurnTokens(uint256 _amount) external;\r\n    function trustedWithdrawETH(address _to, uint256 _amount) external;\r\n    function depositETH() external payable returns (bool);\r\n    function setCurrentRewardTokens() external;\r\n\r\n    // Public functions\r\n    function getController() public view returns (IController);\r\n}\r\n\r\n/**\r\n * @title Minter\r\n * @dev Manages inflation rate and the minting of new tokens for each round of the Livepeer protocol\r\n */\r\ncontract Minter is Manager, IMinter {\r\n    using SafeMath for uint256;\r\n\r\n    // Per round inflation rate\r\n    uint256 public inflation;\r\n    // Change in inflation rate per round until the target bonding rate is achieved\r\n    uint256 public inflationChange;\r\n    // Target bonding rate\r\n    uint256 public targetBondingRate;\r\n\r\n    // Current number of mintable tokens. Reset every round\r\n    uint256 public currentMintableTokens;\r\n    // Current number of minted tokens. Reset every round\r\n    uint256 public currentMintedTokens;\r\n\r\n    // Checks if caller is BondingManager\r\n    modifier onlyBondingManager() {\r\n        require(msg.sender == controller.getContract(keccak256(\"BondingManager\")));\r\n        _;\r\n    }\r\n\r\n    // Checks if caller is RoundsManager\r\n    modifier onlyRoundsManager() {\r\n        require(msg.sender == controller.getContract(keccak256(\"RoundsManager\")));\r\n        _;\r\n    }\r\n\r\n    // Checks if caller is either BondingManager or JobsManager\r\n    modifier onlyBondingManagerOrJobsManager() {\r\n        require(msg.sender == controller.getContract(keccak256(\"BondingManager\")) || msg.sender == controller.getContract(keccak256(\"JobsManager\")));\r\n        _;\r\n    }\r\n\r\n    // Checks if caller is either the currently registered Minter or JobsManager\r\n    modifier onlyMinterOrJobsManager() {\r\n        require(msg.sender == controller.getContract(keccak256(\"Minter\")) || msg.sender == controller.getContract(keccak256(\"JobsManager\")));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Minter constructor\r\n     * @param _inflation Base inflation rate as a percentage of current total token supply\r\n     * @param _inflationChange Change in inflation rate each round (increase or decrease) if target bonding rate is not achieved\r\n     * @param _targetBondingRate Target bonding rate as a percentage of total bonded tokens / total token supply\r\n     */\r\n    function Minter(address _controller, uint256 _inflation, uint256 _inflationChange, uint256 _targetBondingRate) public Manager(_controller) {\r\n        // Inflation must be valid percentage\r\n        require(MathUtils.validPerc(_inflation));\r\n        // Inflation change must be valid percentage\r\n        require(MathUtils.validPerc(_inflationChange));\r\n        // Target bonding rate must be valid percentage\r\n        require(MathUtils.validPerc(_targetBondingRate));\r\n\r\n        inflation = _inflation;\r\n        inflationChange = _inflationChange;\r\n        targetBondingRate = _targetBondingRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Set targetBondingRate. Only callable by Controller owner\r\n     * @param _targetBondingRate Target bonding rate as a percentage of total bonded tokens / total token supply\r\n     */\r\n    function setTargetBondingRate(uint256 _targetBondingRate) external onlyControllerOwner {\r\n        // Must be valid percentage\r\n        require(MathUtils.validPerc(_targetBondingRate));\r\n\r\n        targetBondingRate = _targetBondingRate;\r\n\r\n        ParameterUpdate(\"targetBondingRate\");\r\n    }\r\n\r\n    /**\r\n     * @dev Set inflationChange. Only callable by Controller owner\r\n     * @param _inflationChange Inflation change as a percentage of total token supply\r\n     */\r\n    function setInflationChange(uint256 _inflationChange) external onlyControllerOwner {\r\n        // Must be valid percentage\r\n        require(MathUtils.validPerc(_inflationChange));\r\n\r\n        inflationChange = _inflationChange;\r\n\r\n        ParameterUpdate(\"inflationChange\");\r\n    }\r\n\r\n    /**\r\n     * @dev Migrate to a new Minter by transferring ownership of the token as well\r\n     * as the current Minter's token balance to the new Minter. Only callable by Controller when system is paused\r\n     * @param _newMinter Address of new Minter\r\n     */\r\n    function migrateToNewMinter(IMinter _newMinter) external onlyControllerOwner whenSystemPaused {\r\n        // New Minter cannot be the current Minter\r\n        require(_newMinter != this);\r\n        // Check for null address\r\n        require(address(_newMinter) != address(0));\r\n\r\n        IController newMinterController = _newMinter.getController();\r\n        // New Minter must have same Controller as current Minter\r\n        require(newMinterController == controller);\r\n        // New Minter's Controller must have the current Minter registered\r\n        require(newMinterController.getContract(keccak256(\"Minter\")) == address(this));\r\n\r\n        // Transfer ownership of token to new Minter\r\n        livepeerToken().transferOwnership(_newMinter);\r\n        // Transfer current Minter's token balance to new Minter\r\n        livepeerToken().transfer(_newMinter, livepeerToken().balanceOf(this));\r\n        // Transfer current Minter's ETH balance to new Minter\r\n        _newMinter.depositETH.value(this.balance)();\r\n    }\r\n\r\n    /**\r\n     * @dev Create reward based on a fractional portion of the mintable tokens for the current round\r\n     * @param _fracNum Numerator of fraction (active transcoder's stake)\r\n     * @param _fracDenom Denominator of fraction (total active stake)\r\n     */\r\n    function createReward(uint256 _fracNum, uint256 _fracDenom) external onlyBondingManager whenSystemNotPaused returns (uint256) {\r\n        // Compute and mint fraction of mintable tokens to include in reward\r\n        uint256 mintAmount = MathUtils.percOf(currentMintableTokens, _fracNum, _fracDenom);\r\n        // Update amount of minted tokens for round\r\n        currentMintedTokens = currentMintedTokens.add(mintAmount);\r\n        // Minted tokens must not exceed mintable tokens\r\n        require(currentMintedTokens <= currentMintableTokens);\r\n        // Mint new tokens\r\n        livepeerToken().mint(this, mintAmount);\r\n\r\n        // Reward = minted tokens\r\n        return mintAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens to a receipient. Only callable by BondingManager - always trusts BondingManager\r\n     * @param _to Recipient address\r\n     * @param _amount Amount of tokens\r\n     */\r\n    function trustedTransferTokens(address _to, uint256 _amount) external onlyBondingManager whenSystemNotPaused {\r\n        livepeerToken().transfer(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burn tokens. Only callable by BondingManager - always trusts BondingManager\r\n     * @param _amount Amount of tokens to burn\r\n     */\r\n    function trustedBurnTokens(uint256 _amount) external onlyBondingManager whenSystemNotPaused {\r\n        livepeerToken().burn(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw ETH to a recipient. Only callable by BondingManager or JobsManager - always trusts these two contracts\r\n     * @param _to Recipient address\r\n     * @param _amount Amount of ETH\r\n     */\r\n    function trustedWithdrawETH(address _to, uint256 _amount) external onlyBondingManagerOrJobsManager whenSystemNotPaused {\r\n        _to.transfer(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit ETH to this contract. Only callable by the currently registered Minter or JobsManager\r\n     */\r\n    function depositETH() external payable onlyMinterOrJobsManager whenSystemNotPaused returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set inflation and mintable tokens for the round. Only callable by the RoundsManager\r\n     */\r\n    function setCurrentRewardTokens() external onlyRoundsManager whenSystemNotPaused {\r\n        setInflation();\r\n\r\n        // Set mintable tokens based upon current inflation and current total token supply\r\n        currentMintableTokens = MathUtils.percOf(livepeerToken().totalSupply(), inflation);\r\n        currentMintedTokens = 0;\r\n\r\n        SetCurrentRewardTokens(currentMintableTokens, inflation);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Controller interface\r\n     */\r\n    function getController() public view returns (IController) {\r\n        return controller;\r\n    }\r\n\r\n    /**\r\n     * @dev Set inflation based upon the current bonding rate and target bonding rate\r\n     */\r\n    function setInflation() internal {\r\n        uint256 currentBondingRate = 0;\r\n        uint256 totalSupply = livepeerToken().totalSupply();\r\n\r\n        if (totalSupply > 0) {\r\n            uint256 totalBonded = bondingManager().getTotalBonded();\r\n            currentBondingRate = MathUtils.percPoints(totalBonded, totalSupply);\r\n        }\r\n\r\n        if (currentBondingRate < targetBondingRate) {\r\n            // Bonding rate is below the target - increase inflation\r\n            inflation = inflation.add(inflationChange);\r\n        } else if (currentBondingRate > targetBondingRate) {\r\n            // Bonding rate is above the target - decrease inflation\r\n            if (inflationChange > inflation) {\r\n                inflation = 0;\r\n            } else {\r\n                inflation = inflation.sub(inflationChange);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns LivepeerToken interface\r\n     */\r\n    function livepeerToken() internal view returns (ILivepeerToken) {\r\n        return ILivepeerToken(controller.getContract(keccak256(\"LivepeerToken\")));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns BondingManager interface\r\n     */\r\n    function bondingManager() internal view returns (IBondingManager) {\r\n        return IBondingManager(controller.getContract(keccak256(\"BondingManager\")));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_inflationChange\",\"type\":\"uint256\"}],\"name\":\"setInflationChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"migrateToNewMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"trustedWithdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentMintedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetBondingRate\",\"type\":\"uint256\"}],\"name\":\"setTargetBondingRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fracNum\",\"type\":\"uint256\"},{\"name\":\"_fracDenom\",\"type\":\"uint256\"}],\"name\":\"createReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetBondingRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentMintableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inflationChange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inflation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"trustedBurnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"trustedTransferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setCurrentRewardTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"},{\"name\":\"_inflation\",\"type\":\"uint256\"},{\"name\":\"_inflationChange\",\"type\":\"uint256\"},{\"name\":\"_targetBondingRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currentMintableTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentInflation\",\"type\":\"uint256\"}],\"name\":\"SetCurrentRewardTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"param\",\"type\":\"string\"}],\"name\":\"ParameterUpdate\",\"type\":\"event\"}]","ContractName":"Minter","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a94e49bdbb0bfdb920ec1e441b1c408ead94c9bc00000000000000000000000000000000000000000000000000000000000000890000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000007a120","Library":"","SwarmSource":"bzzr://3c09df31724f13ee9a43289804c31b45cfcfd6a9df4b3a67d85543eb2a5fdbe9"}]}