{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Fizzy {\r\n  /*\r\n  * Potential statuses for the Insurance struct\r\n  * 0: ongoing\r\n  * 1: insurance contract resolved normaly and the flight landed before the limit\r\n  * 2: insurance contract resolved normaly and the flight landed after the limit\r\n  * 3: insurance contract resolved because cancelled by the user\r\n  * 4: insurance contract resolved because flight cancelled by the air company\r\n  * 5: insurance contract resolved because flight redirected\r\n  * 6: insurance contract resolved because flight diverted\r\n  */\r\n  struct Insurance {          // all the infos related to a single insurance\r\n    bytes32 productId;           // ID string of the product linked to this insurance\r\n    uint limitArrivalTime;    // maximum arrival time after which we trigger compensation (timestamp in sec)\r\n    uint32 premium;           // amount of the premium\r\n    uint32 indemnity;         // amount of the indemnity\r\n    uint8 status;             // status of this insurance contract. See comment above for potential values\r\n  }\r\n\r\n  event InsuranceCreation(    // event sent when a new insurance contract is added to this smart contract\r\n    bytes32 flightId,         // <carrier_code><flight_number>.<timestamp_in_sec_of_departure_date>\r\n    uint32 premium,           // amount of the premium paid by the user\r\n    uint32 indemnity,         // amount of the potential indemnity\r\n    bytes32 productId            // ID string of the product linked to this insurance\r\n  );\r\n\r\n  /*\r\n   * Potential statuses for the InsuranceUpdate event\r\n   * 1: flight landed before the limit\r\n   * 2: flight landed after the limit\r\n   * 3: insurance contract cancelled by the user\r\n   * 4: flight cancelled\r\n   * 5: flight redirected\r\n   * 6: flight diverted\r\n   */\r\n  event InsuranceUpdate(      // event sent when the situation of a particular insurance contract is resolved\r\n    bytes32 productId,           // id string of the user linked to this account\r\n    bytes32 flightId,         // <carrier_code><flight_number>.<timestamp_in_sec_of_departure_date>\r\n    uint32 premium,           // amount of the premium paid by the user\r\n    uint32 indemnity,         // amount of the potential indemnity\r\n    uint8 status              // new status of the insurance contract. See above comment for potential values\r\n  );\r\n\r\n  address creator;            // address of the creator of the contract\r\n\r\n  // All the insurances handled by this smart contract are contained in this mapping\r\n  // key: a string containing the flight number and the timestamp separated by a dot\r\n  // value: an array of insurance contracts for this flight\r\n  mapping (bytes32 => Insurance[]) insuranceList;\r\n\r\n\r\n  // ------------------------------------------------------------------------------------------ //\r\n  // MODIFIERS / CONSTRUCTOR\r\n  // ------------------------------------------------------------------------------------------ //\r\n\r\n  /**\r\n   * @dev This modifier checks that only the creator of the contract can call this smart contract\r\n   */\r\n  modifier onlyIfCreator {\r\n    if (msg.sender == creator) _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor\r\n   */\r\n  function Fizzy() public {\r\n    creator = msg.sender;\r\n  }\r\n\r\n\r\n  // ------------------------------------------------------------------------------------------ //\r\n  // INTERNAL FUNCTIONS\r\n  // ------------------------------------------------------------------------------------------ //\r\n\r\n  function areStringsEqual (bytes32 a, bytes32 b) private pure returns (bool) {\r\n    // generate a hash for each string and compare them\r\n    return keccak256(a) == keccak256(b);\r\n  }\r\n\r\n\r\n  // ------------------------------------------------------------------------------------------ //\r\n  // FUNCTIONS TRIGGERING TRANSACTIONS\r\n  // ------------------------------------------------------------------------------------------ //\r\n\r\n  /**\r\n   * @dev Add a new insurance for the given flight\r\n   * @param flightId <carrier_code><flight_number>.<timestamp_in_sec_of_departure_date>\r\n   * @param limitArrivalTime Maximum time after which we trigger the compensation (timestamp in sec)\r\n   * @param premium Amount of premium paid by the client\r\n   * @param indemnity Amount (potentialy) perceived by the client\r\n   * @param productId ID string of product linked to the insurance\r\n   */\r\n  function addNewInsurance(\r\n    bytes32 flightId,\r\n    uint limitArrivalTime,\r\n    uint32 premium,\r\n    uint32 indemnity,\r\n    bytes32 productId)\r\n  public\r\n  onlyIfCreator {\r\n\r\n    Insurance memory insuranceToAdd;\r\n    insuranceToAdd.limitArrivalTime = limitArrivalTime;\r\n    insuranceToAdd.premium = premium;\r\n    insuranceToAdd.indemnity = indemnity;\r\n    insuranceToAdd.productId = productId;\r\n    insuranceToAdd.status = 0;\r\n\r\n    insuranceList[flightId].push(insuranceToAdd);\r\n\r\n    // send an event about the creation of this insurance contract\r\n    InsuranceCreation(flightId, premium, indemnity, productId);\r\n  }\r\n\r\n  /**\r\n   * @dev Update the status of a flight\r\n   * @param flightId <carrier_code><flight_number>.<timestamp_in_sec_of_departure_date>\r\n   * @param actualArrivalTime The actual arrival time of the flight (timestamp in sec)\r\n   */\r\n  function updateFlightStatus(\r\n    bytes32 flightId,\r\n    uint actualArrivalTime)\r\n  public\r\n  onlyIfCreator {\r\n\r\n    uint8 newStatus = 1;\r\n\r\n    // go through the list of all insurances related to the given flight\r\n    for (uint i = 0; i < insuranceList[flightId].length; i++) {\r\n\r\n      // we check this contract is still ongoing before updating it\r\n      if (insuranceList[flightId][i].status == 0) {\r\n\r\n        newStatus = 1;\r\n\r\n        // if the actual arrival time is over the limit the user wanted,\r\n        // we trigger the indemnity, which means status = 2\r\n        if (actualArrivalTime > insuranceList[flightId][i].limitArrivalTime) {\r\n          newStatus = 2;\r\n        }\r\n\r\n        // update the status of the insurance contract\r\n        insuranceList[flightId][i].status = newStatus;\r\n\r\n        // send an event about this update for each insurance\r\n        InsuranceUpdate(\r\n          insuranceList[flightId][i].productId,\r\n          flightId,\r\n          insuranceList[flightId][i].premium,\r\n          insuranceList[flightId][i].indemnity,\r\n          newStatus\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Manually resolve an insurance contract\r\n   * @param flightId <carrier_code><flight_number>.<timestamp_in_sec_of_departure_date>\r\n   * @param newStatusId ID of the resolution status for this insurance contract\r\n   * @param productId ID string of the product linked to the insurance\r\n   */\r\n  function manualInsuranceResolution(\r\n    bytes32 flightId,\r\n    uint8 newStatusId,\r\n    bytes32 productId)\r\n  public\r\n  onlyIfCreator {\r\n\r\n    // go through the list of all insurances related to the given flight\r\n    for (uint i = 0; i < insuranceList[flightId].length; i++) {\r\n\r\n      // look for the insurance contract with the correct ID number\r\n      if (areStringsEqual(insuranceList[flightId][i].productId, productId)) {\r\n\r\n        // we check this contract is still ongoing before updating it\r\n        if (insuranceList[flightId][i].status == 0) {\r\n\r\n          // change the status of the insurance contract to the specified one\r\n          insuranceList[flightId][i].status = newStatusId;\r\n\r\n          // send an event about this update\r\n          InsuranceUpdate(\r\n            productId,\r\n            flightId,\r\n            insuranceList[flightId][i].premium,\r\n            insuranceList[flightId][i].indemnity,\r\n            newStatusId\r\n          );\r\n\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function getInsurancesCount(bytes32 flightId) public view onlyIfCreator returns (uint) {\r\n    return insuranceList[flightId].length;\r\n  }\r\n\r\n  function getInsurance(bytes32 flightId, uint index) public view onlyIfCreator returns (bytes32, uint, uint32, uint32, uint8) {\r\n    Insurance memory ins = insuranceList[flightId][index];\r\n    return (ins.productId, ins.limitArrivalTime, ins.premium, ins.indemnity, ins.status);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"flightId\",\"type\":\"bytes32\"},{\"name\":\"newStatusId\",\"type\":\"uint8\"},{\"name\":\"productId\",\"type\":\"bytes32\"}],\"name\":\"manualInsuranceResolution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"flightId\",\"type\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInsurance\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"flightId\",\"type\":\"bytes32\"},{\"name\":\"limitArrivalTime\",\"type\":\"uint256\"},{\"name\":\"premium\",\"type\":\"uint32\"},{\"name\":\"indemnity\",\"type\":\"uint32\"},{\"name\":\"productId\",\"type\":\"bytes32\"}],\"name\":\"addNewInsurance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"flightId\",\"type\":\"bytes32\"},{\"name\":\"actualArrivalTime\",\"type\":\"uint256\"}],\"name\":\"updateFlightStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"flightId\",\"type\":\"bytes32\"}],\"name\":\"getInsurancesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"flightId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"premium\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"indemnity\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"productId\",\"type\":\"bytes32\"}],\"name\":\"InsuranceCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"productId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"flightId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"premium\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"indemnity\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"InsuranceUpdate\",\"type\":\"event\"}]","ContractName":"Fizzy","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://76f8c6529e8a5a617f36f6cd29f5c96f4604a2603a7f3ce75bb53cf149553233"}]}