{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ninterface LandManagementInterface {\r\n    function ownerAddress() external view returns (address);\r\n    function managerAddress() external view returns (address);\r\n    function communityAddress() external view returns (address);\r\n    function dividendManagerAddress() external view returns (address);\r\n    function walletAddress() external view returns (address);\r\n    //    function unicornTokenAddress() external view returns (address);\r\n    function candyToken() external view returns (address);\r\n    function megaCandyToken() external view returns (address);\r\n    function userRankAddress() external view returns (address);\r\n    function candyLandAddress() external view returns (address);\r\n    function candyLandSaleAddress() external view returns (address);\r\n\r\n    function isUnicornContract(address _unicornContractAddress) external view returns (bool);\r\n\r\n    function paused() external view returns (bool);\r\n    function presaleOpen() external view returns (bool);\r\n    function firstRankForFree() external view returns (bool);\r\n\r\n    function ethLandSaleOpen() external view returns (bool);\r\n\r\n    function landPriceWei() external view returns (uint);\r\n    function landPriceCandy() external view returns (uint);\r\n\r\n    function registerInit(address _contract) external;\r\n}\r\n\r\ninterface UserRankInterface  {\r\n    function buyNextRank() external;\r\n    function buyRank(uint _index) external;\r\n    function getIndividualPrice(address _user, uint _index) external view returns (uint);\r\n    function getRankPriceEth(uint _index) external view returns (uint);\r\n    function getRankPriceCandy(uint _index) external view returns (uint);\r\n    function getRankLandLimit(uint _index) external view returns (uint);\r\n    function getRankTitle(uint _index) external view returns (string);\r\n    function getUserRank(address _user) external view returns (uint);\r\n    function getUserLandLimit(address _user) external view returns (uint);\r\n    function ranksCount() external view returns (uint);\r\n    function getNextRank(address _user)  external returns (uint);\r\n    function getPreSaleRank(address owner, uint _index) external;\r\n    function getRank(address owner, uint _index) external;\r\n}\r\n\r\ncontract MegaCandyInterface is ERC20 {\r\n    function transferFromSystem(address _from, address _to, uint256 _value) public returns (bool);\r\n    function burn(address _from, uint256 _value) public returns (bool);\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n}\r\n\r\n\r\ncontract LandAccessControl {\r\n\r\n    LandManagementInterface public landManagement;\r\n\r\n    function LandAccessControl(address _landManagementAddress) public {\r\n        landManagement = LandManagementInterface(_landManagementAddress);\r\n        landManagement.registerInit(this);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == landManagement.ownerAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == landManagement.managerAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyCommunity() {\r\n        require(msg.sender == landManagement.communityAddress());\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!landManagement.paused());\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(landManagement.paused());\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhileEthSaleOpen {\r\n        require(landManagement.ethLandSaleOpen());\r\n        _;\r\n    }\r\n\r\n    modifier onlyLandManagement() {\r\n        require(msg.sender == address(landManagement));\r\n        _;\r\n    }\r\n\r\n    modifier onlyUnicornContract() {\r\n        require(landManagement.isUnicornContract(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyCandyLand() {\r\n        require(msg.sender == address(landManagement.candyLandAddress()));\r\n        _;\r\n    }\r\n\r\n\r\n    modifier whilePresaleOpen() {\r\n        require(landManagement.presaleOpen());\r\n        _;\r\n    }\r\n\r\n    function isGamePaused() external view returns (bool) {\r\n        return landManagement.paused();\r\n    }\r\n}\r\n\r\n\r\ncontract CanReceiveApproval {\r\n    event ReceiveApproval(address from, uint256 value, address token);\r\n\r\n    mapping (bytes4 => bool) allowedFuncs;\r\n\r\n    modifier onlyPayloadSize(uint numwords) {\r\n        assert(msg.data.length >= numwords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    modifier onlySelf(){\r\n        require(msg.sender == address(this));\r\n        _;\r\n    }\r\n\r\n\r\n    function bytesToBytes4(bytes b) internal pure returns (bytes4 out) {\r\n        for (uint i = 0; i < 4; i++) {\r\n            out |= bytes4(b[i] & 0xFF) >> (i << 3);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CandyLand is ERC20, LandAccessControl, CanReceiveApproval {\r\n    using SafeMath for uint256;\r\n\r\n    UserRankInterface public userRank;\r\n    MegaCandyInterface public megaCandy;\r\n    ERC20 public candyToken;\r\n\r\n    struct Gardener {\r\n        uint period;\r\n        uint price;\r\n        bool exists;\r\n    }\r\n\r\n    struct Garden {\r\n        uint count;\r\n        uint startTime;\r\n        address owner;\r\n        uint gardenerId;\r\n        uint lastCropTime;\r\n        uint plantationIndex;\r\n        uint ownerPlantationIndex;\r\n    }\r\n\r\n    string public constant name = \"Unicorn Land\";\r\n    string public constant symbol = \"Land\";\r\n    uint8 public constant decimals = 0;\r\n\r\n    uint256 totalSupply_;\r\n    uint256 public MAX_SUPPLY = 30000;\r\n\r\n    uint public constant plantedTime = 1 hours;\r\n    uint public constant plantedRate = 1 ether;\r\n    //uint public constant priceRate = 1 ether;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) internal allowed;\r\n    mapping(address => uint256) planted;\r\n\r\n    mapping(uint => Gardener) public gardeners;\r\n    // Mapping from garden ID to Garde struct\r\n    mapping(uint => Garden) public gardens;\r\n\r\n    // garden index => gardenId\r\n    mapping(uint => uint) public plantation;\r\n    uint public plantationSize = 0;\r\n\r\n    //user plantations\r\n    // owner => array (index => gardenId)\r\n    mapping(address => mapping(uint => uint)) public ownerPlantation;\r\n    mapping(address => uint) public ownerPlantationSize;\r\n\r\n\r\n    uint gardenerId = 0;\r\n    uint gardenId = 0;\r\n\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MakePlant(address indexed owner, uint gardenId, uint count, uint gardenerId);\r\n    event GetCrop(address indexed owner, uint gardenId, uint  megaCandyCount);\r\n    event NewGardenerAdded(uint gardenerId, uint _period, uint _price);\r\n    event GardenerChange(uint gardenerId, uint _period, uint _price);\r\n    event NewLandLimit(uint newLimit);\r\n    event TokensTransferred(address wallet, uint value);\r\n\r\n    function CandyLand(address _landManagementAddress) LandAccessControl(_landManagementAddress) public {\r\n        allowedFuncs[bytes4(keccak256(\"_receiveMakePlant(address,uint256,uint256)\"))] = true;\r\n\r\n        addGardener(24,   700000000000000000);\r\n        addGardener(120, 3000000000000000000);\r\n        addGardener(240, 5000000000000000000);\r\n        addGardener(720,12000000000000000000);\r\n    }\r\n\r\n\r\n    function init() onlyLandManagement whenPaused external {\r\n        userRank = UserRankInterface(landManagement.userRankAddress());\r\n        megaCandy = MegaCandyInterface(landManagement.megaCandyToken());\r\n        candyToken = ERC20(landManagement.candyToken());\r\n    }\r\n\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender].sub(planted[msg.sender]));\r\n        require(balances[_to].add(_value) <= userRank.getUserLandLimit(_to));\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function plantedOf(address _owner) public view returns (uint256 balance) {\r\n        return planted[_owner];\r\n    }\r\n\r\n    function freeLandsOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner].sub(planted[_owner]);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from].sub(planted[_from]));\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(balances[_to].add(_value) <= userRank.getUserLandLimit(_to));\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function transferFromSystem(address _from, address _to, uint256 _value) onlyUnicornContract public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from].sub(planted[_from]));\r\n        //    require(_value <= balances[_from]);\r\n        require(balances[_to].add(_value) <= userRank.getUserLandLimit(_to));\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) onlyUnicornContract public returns (bool) {\r\n        require(totalSupply_.add(_amount) <= MAX_SUPPLY);\r\n        require(balances[_to].add(_amount) <= userRank.getUserLandLimit(_to));\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function makePlant(uint _count, uint _gardenerId) public {\r\n        _makePlant(msg.sender, _count, _gardenerId);\r\n    }\r\n\r\n\r\n    function _receiveMakePlant(address _beneficiary, uint _count, uint _gardenerId) onlySelf onlyPayloadSize(3) public {\r\n        _makePlant(_beneficiary, _count, _gardenerId);\r\n    }\r\n\r\n\r\n    function _makePlant(address _owner, uint _count, uint _gardenerId) internal {\r\n        require(_count <= balances[_owner].sub(planted[_owner]) && _count > 0);\r\n\r\n        //require(candyToken.transferFrom(msg.sender, this, _count.mul(priceRate)));\r\n\r\n        if (_gardenerId > 0) {\r\n            require(gardeners[_gardenerId].exists);\r\n            require(candyToken.transferFrom(_owner, this, gardeners[_gardenerId].price.mul(_count)));\r\n        }\r\n\r\n        gardens[++gardenId] = Garden({\r\n            count: _count,\r\n            startTime: now,\r\n            owner: _owner,\r\n            gardenerId: _gardenerId,\r\n            lastCropTime: now,\r\n            plantationIndex: plantationSize,\r\n            ownerPlantationIndex: ownerPlantationSize[_owner]\r\n            });\r\n\r\n        planted[_owner] = planted[_owner].add(_count);\r\n        //update global plantation list\r\n        plantation[plantationSize++] = gardenId;\r\n        //update user plantation list\r\n        ownerPlantation[_owner][ownerPlantationSize[_owner]++] = gardenId;\r\n\r\n        emit MakePlant(_owner, gardenId, _count, gardenerId);\r\n    }\r\n\r\n\r\n    function getCrop(uint _gardenId) public {\r\n        require(msg.sender == gardens[_gardenId].owner);\r\n        require(now >= gardens[_gardenId].lastCropTime.add(plantedTime));\r\n\r\n        uint crop = 0;\r\n        uint cropCount = 1;\r\n        uint remainingCrops = 0;\r\n\r\n        if (gardens[_gardenId].gardenerId > 0) {\r\n            uint finishTime = gardens[_gardenId].startTime.add(gardeners[gardens[_gardenId].gardenerId].period);\r\n            //время текущей сбоки урожая\r\n            uint currentCropTime = now < finishTime ? now : finishTime;\r\n            //количество урожаев которое соберем сейчас\r\n            cropCount = currentCropTime.sub(gardens[_gardenId].lastCropTime).div(plantedTime);\r\n            //время последней сборки урожая + время 1 урожая на количество урожаев которое соберем сейчас\r\n            gardens[_gardenId].lastCropTime = gardens[_gardenId].lastCropTime.add(cropCount.mul(plantedTime));\r\n            //количество оставшихся урожаев\r\n            remainingCrops = finishTime.sub(gardens[_gardenId].lastCropTime).div(plantedTime);\r\n        }\r\n\r\n        crop = gardens[_gardenId].count.mul(plantedRate).mul(cropCount);\r\n        if (remainingCrops == 0) {\r\n            planted[msg.sender] = planted[msg.sender].sub(gardens[_gardenId].count);\r\n\r\n            //delete from global plantation list\r\n            gardens[plantation[--plantationSize]].plantationIndex = gardens[_gardenId].plantationIndex;\r\n            plantation[gardens[_gardenId].plantationIndex] = plantation[plantationSize];\r\n            delete plantation[plantationSize];\r\n\r\n            //delete from user plantation list\r\n            gardens[ownerPlantation[msg.sender][--ownerPlantationSize[msg.sender]]].ownerPlantationIndex = gardens[_gardenId].ownerPlantationIndex;\r\n            ownerPlantation[msg.sender][gardens[_gardenId].ownerPlantationIndex] = ownerPlantation[msg.sender][ownerPlantationSize[msg.sender]];\r\n            delete ownerPlantation[msg.sender][ownerPlantationSize[msg.sender]];\r\n\r\n            delete gardens[_gardenId];\r\n\r\n        }\r\n\r\n        megaCandy.mint(msg.sender, crop);\r\n        emit GetCrop(msg.sender, _gardenId, crop);\r\n    }\r\n\r\n\r\n    function addGardener(uint _period, uint _price) onlyOwner public  {\r\n        gardeners[++gardenerId] = Gardener({\r\n            period: _period * 1 hours,\r\n            price: _price,\r\n            exists: true\r\n            });\r\n        emit NewGardenerAdded(gardenerId, _period, _price);\r\n    }\r\n\r\n\r\n    function editGardener(uint _gardenerId, uint _period, uint _price) onlyOwner public  {\r\n        require(gardeners[_gardenerId].exists);\r\n        Gardener storage g = gardeners[_gardenerId];\r\n        g.period = _period;\r\n        g.price = _price;\r\n        emit GardenerChange(_gardenerId, _period, _price);\r\n    }\r\n\r\n\r\n    function getUserLandLimit(address _user) public view returns(uint) {\r\n        return userRank.getRankLandLimit(userRank.getUserRank(_user)).sub(balances[_user]);\r\n    }\r\n\r\n\r\n    function setLandLimit() external onlyCommunity {\r\n        require(totalSupply_ == MAX_SUPPLY);\r\n        MAX_SUPPLY = MAX_SUPPLY.add(1000);\r\n        emit NewLandLimit(MAX_SUPPLY);\r\n    }\r\n\r\n    //1% - 100, 10% - 1000 50% - 5000\r\n    function valueFromPercent(uint _value, uint _percent) internal pure returns (uint amount)    {\r\n        uint _amount = _value.mul(_percent).div(10000);\r\n        return (_amount);\r\n    }\r\n\r\n\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public {\r\n        //require(_token == landManagement.candyToken());\r\n        require(msg.sender == address(candyToken));\r\n        require(allowedFuncs[bytesToBytes4(_extraData)]);\r\n        require(address(this).call(_extraData));\r\n        emit ReceiveApproval(_from, _value, _token);\r\n    }\r\n\r\n\r\n    function withdrawTokens() onlyManager public {\r\n        require(candyToken.balanceOf(this) > 0);\r\n        candyToken.transfer(landManagement.walletAddress(), candyToken.balanceOf(this));\r\n        emit TokensTransferred(landManagement.walletAddress(), candyToken.balanceOf(this));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isGamePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"plantationSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"plantedRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addGardener\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"freeLandsOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"plantedOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_gardenerId\",\"type\":\"uint256\"}],\"name\":\"_receiveMakePlant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"plantedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_gardenerId\",\"type\":\"uint256\"}],\"name\":\"makePlant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromSystem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerPlantation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plantation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLandLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gardeners\",\"outputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerPlantationSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userRank\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"landManagement\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gardenerId\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"editGardener\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gardenId\",\"type\":\"uint256\"}],\"name\":\"getCrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gardens\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"gardenerId\",\"type\":\"uint256\"},{\"name\":\"lastCropTime\",\"type\":\"uint256\"},{\"name\":\"plantationIndex\",\"type\":\"uint256\"},{\"name\":\"ownerPlantationIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"megaCandy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setLandLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_landManagementAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gardenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gardenerId\",\"type\":\"uint256\"}],\"name\":\"MakePlant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gardenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"megaCandyCount\",\"type\":\"uint256\"}],\"name\":\"GetCrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gardenerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_period\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"NewGardenerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gardenerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_period\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"GardenerChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"NewLandLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ReceiveApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CandyLand","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004db129c33d1a56333deeafbae6ae5c8a1598b926","Library":"","SwarmSource":"bzzr://8966007ec699a6ea40b5ff8fd253fd0473f264b18c8e882cf73d3d13ea47ffcb"}]}