{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n * behavior.\r\n */\r\n\r\ncontract Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    ERC20 public token;\r\n\r\n    // Address where funds are collected\r\n    address public wallet;\r\n\r\n    // How many token units a buyer gets per wei\r\n    uint256 public rate;\r\n\r\n    // Amount of wei raised\r\n    uint256 public weiRaised;\r\n\r\n    /**\r\n    * Event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n    * @param _rate Number of token units a buyer gets per wei\r\n    * @param _wallet Address where collected funds will be forwarded to\r\n    * @param _token Address of the token being sold\r\n    */\r\n    function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\r\n        require(_rate > 0);\r\n        require(_wallet != address(0));\r\n        require(_token != address(0));\r\n\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n        token = _token;\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // Crowdsale external interface\r\n    // -----------------------------------------\r\n\r\n    /**\r\n    * @dev fallback function ***DO NOT OVERRIDE***\r\n    */\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev low level token purchase ***DO NOT OVERRIDE***\r\n    * @param _beneficiary Address performing the token purchase\r\n    */\r\n    function buyTokens(address _beneficiary) public payable {\r\n\r\n        uint256 weiAmount = msg.value;\r\n        _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        _processPurchase(_beneficiary, tokens);\r\n        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n\r\n        _updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n        _forwardFunds();\r\n        _postValidatePurchase(_beneficiary, weiAmount);\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // Internal interface (extensible)\r\n    // -----------------------------------------\r\n\r\n    /**\r\n    * @dev Validation of an incoming purchase. Use require statemens to revert state when conditions are not met. Use super to concatenate validations.\r\n    * @param _beneficiary Address performing the token purchase\r\n    * @param _weiAmount Value in wei involved in the purchase\r\n    */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n        require(_beneficiary != address(0));\r\n        require(_weiAmount != 0);\r\n    }\r\n\r\n    /**\r\n    * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n    * @param _beneficiary Address performing the token purchase\r\n    * @param _weiAmount Value in wei involved in the purchase\r\n    */\r\n    function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n        // optional override\r\n    }\r\n\r\n    /**\r\n    * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n    * @param _beneficiary Address performing the token purchase\r\n    * @param _tokenAmount Number of tokens to be emitted\r\n    */\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        token.transfer(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n    * @param _beneficiary Address receiving the tokens\r\n    * @param _tokenAmount Number of tokens to be purchased\r\n    */\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n    * @param _beneficiary Address receiving the tokens\r\n    * @param _weiAmount Value in wei involved in the purchase\r\n    */\r\n    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n        // optional override\r\n    }\r\n\r\n    /**\r\n    * @dev Override to extend the way in which ether is converted to tokens.\r\n    * @param _weiAmount Value in wei to be converted into tokens\r\n    * @return Number of tokens that can be purchased with the specified _weiAmount\r\n    */\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        return _weiAmount.mul(rate);\r\n    }\r\n\r\n    /**\r\n    * @dev Determines how ETH is stored/forwarded on purchases.\r\n    */\r\n    function _forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n}\r\n\r\ncontract WhitelistedCrowdsale is Crowdsale, Ownable {\r\n\r\n    mapping(address => bool) public whitelist;\r\n\r\n    /**\r\n    * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\r\n    */\r\n    modifier isWhitelisted(address _beneficiary) {\r\n        require(whitelist[_beneficiary]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds single address to whitelist.\r\n    * @param _beneficiary Address to be added to the whitelist\r\n    */\r\n    function addToWhitelist(address _beneficiary) external onlyOwner {\r\n        whitelist[_beneficiary] = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\r\n    * @param _beneficiaries Addresses to be added to the whitelist\r\n    */\r\n    function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\r\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n            whitelist[_beneficiaries[i]] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Removes single address from whitelist.\r\n    * @param _beneficiary Address to be removed to the whitelist\r\n    */\r\n    function removeFromWhitelist(address _beneficiary) external onlyOwner {\r\n        whitelist[_beneficiary] = false;\r\n    }\r\n\r\n    /**\r\n    * @dev Extend parent behavior requiring beneficiary to be in whitelist.\r\n    * @param _beneficiary Token beneficiary\r\n    * @param _weiAmount Amount of wei contributed\r\n    */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\r\n        super._preValidatePurchase(_beneficiary, _weiAmount);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    *\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    *\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    *\r\n    * approve should be called when allowed[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract GStarToken is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"GSTAR Token\";\r\n    string public constant symbol = \"GSTAR\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 1600000000 * ((10 ** uint256(decimals)));\r\n    uint256 public currentTotalSupply = 0;\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n\r\n    /**\r\n    * @dev Constructor that gives msg.sender all of existing tokens.\r\n    */\r\n    function GStarToken() public {\r\n        owner = msg.sender;\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[owner] = INITIAL_SUPPLY;\r\n        currentTotalSupply = INITIAL_SUPPLY;\r\n        emit Transfer(address(0), owner, INITIAL_SUPPLY);\r\n    }\r\n\r\n    /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param value The amount of token to be burned.\r\n    */\r\n    function burn(uint256 value) public onlyOwner {\r\n        require(value <= balances[msg.sender]);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(value);\r\n        currentTotalSupply = currentTotalSupply.sub(value);\r\n        emit Burn(burner, value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title GStarCrowdsale\r\n * @dev This contract manages the crowdsale of GStar Tokens.\r\n * The crowdsale will involve two key timings - Start and ending of funding.\r\n * The earlier the contribution, the larger the bonuses. (according to the bonus structure)\r\n * Tokens will be released to the contributors after the crowdsale.\r\n * There is only one owner at any one time. The owner can stop or start the crowdsale at anytime.\r\n */\r\ncontract GStarCrowdsale is WhitelistedCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // Start and end timestamps where contributions are allowed (both inclusive)\r\n    // All timestamps are expressed in seconds instead of block number.\r\n    uint256 constant public presaleStartTime = 1531051200; // 8 Jul 2018 1200h\r\n    uint256 constant public startTime = 1532260800; // 22 Jul 2018 1200h\r\n    uint256 constant public endTime = 1534593600; // 18 Aug 2018 1200h\r\n\r\n    // Keeps track of contributors tokens\r\n    mapping (address => uint256) public depositedTokens;\r\n\r\n    // Minimum amount of ETH contribution during ICO period\r\n    // Minimum of ETH contributed during ICO is 0.1ETH\r\n    uint256 constant public MINIMUM_PRESALE_PURCHASE_AMOUNT_IN_WEI = 1 ether;\r\n    uint256 constant public MINIMUM_PURCHASE_AMOUNT_IN_WEI = 0.1 ether;\r\n\r\n    // Total tokens raised so far, bonus inclusive\r\n    uint256 public tokensWeiRaised = 0;\r\n\r\n    //Funding goal is 76,000 ETH, includes private contributions\r\n    uint256 constant public fundingGoal = 76000 ether;\r\n    uint256 constant public presaleFundingGoal = 1000 ether;\r\n    bool public fundingGoalReached = false;\r\n    bool public presaleFundingGoalReached = false;\r\n\r\n    //private contributions\r\n    uint256 public privateContribution = 0;\r\n\r\n    // Indicates if crowdsale is active\r\n    bool public crowdsaleActive = false;\r\n    bool public isCrowdsaleClosed = false;\r\n\r\n    uint256 public tokensReleasedAmount = 0;\r\n\r\n\r\n    /*==================================================================== */\r\n    /*============================== EVENTS ============================== */\r\n    /*==================================================================== */\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event GoalReached(uint256 totalEtherAmountRaised);\r\n    event PresaleGoalReached(uint256 totalEtherAmountRaised);\r\n    event StartCrowdsale();\r\n    event StopCrowdsale();\r\n    event ReleaseTokens(address[] _beneficiaries);\r\n    event Close();\r\n\r\n    /**\r\n    * @dev Constructor. Checks validity of the time entered.\r\n    */\r\n    function GStarCrowdsale (\r\n        uint256 _rate,\r\n        address _wallet,\r\n        GStarToken token\r\n        ) public Crowdsale(_rate, _wallet, token) {\r\n    }\r\n\r\n\r\n    /*==================================================================== */\r\n    /*========================= PUBLIC FUNCTIONS ========================= */\r\n    /*==================================================================== */\r\n\r\n    /**\r\n    * @dev Override buyTokens function as tokens should only be delivered when released.\r\n    * @param _beneficiary Address receiving the tokens.\r\n    */\r\n    function buyTokens(address _beneficiary) public payable {\r\n\r\n        uint256 weiAmount = msg.value;\r\n        _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        \r\n        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n\r\n        _updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n        _forwardFunds();\r\n        _processPurchase(_beneficiary, weiAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates the token amount per ETH contributed based on the time now.\r\n    * @return Rate of amount of GSTAR per Ether as of current time.\r\n    */\r\n    function getRate() public view returns (uint256) {\r\n        //calculate bonus based on timing\r\n        if (block.timestamp <= startTime) { return ((rate / 100) * 120); } // 20 percent bonus on presale period, returns 12000\r\n        if (block.timestamp <= startTime.add(1 days)) {return ((rate / 100) * 108);} // 8 percent bonus on day one, return 10800\r\n\r\n        return rate;\r\n    }\r\n\r\n\r\n    /*==================================================================== */\r\n    /*======================== EXTERNAL FUNCTIONS ======================== */\r\n    /*==================================================================== */\r\n\r\n    /**\r\n    * @dev Change the private contribution, in ether, wei units.\r\n    * Private contribution amount will be calculated into funding goal.\r\n    */\r\n    function changePrivateContribution(uint256 etherWeiAmount) external onlyOwner {\r\n        privateContribution = etherWeiAmount;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows owner to start/unpause crowdsale.\r\n    */\r\n    function startCrowdsale() external onlyOwner {\r\n        require(!crowdsaleActive);\r\n        require(!isCrowdsaleClosed);\r\n\r\n        crowdsaleActive = true;\r\n        emit StartCrowdsale();\r\n    }\r\n\r\n    /**\r\n    * @dev Allows owner to stop/pause crowdsale.\r\n    */\r\n    function stopCrowdsale() external onlyOwner {\r\n        require(crowdsaleActive);\r\n        crowdsaleActive = false;\r\n        emit StopCrowdsale();\r\n    }\r\n\r\n    /**\r\n    * @dev Release tokens to multiple addresses.\r\n    * @param contributors Addresses to release tokens to\r\n    */\r\n    function releaseTokens(address[] contributors) external onlyOwner {\r\n\r\n        for (uint256 j = 0; j < contributors.length; j++) {\r\n\r\n            // the amount of tokens to be distributed to contributor\r\n            uint256 tokensAmount = depositedTokens[contributors[j]];\r\n\r\n            if (tokensAmount > 0) {\r\n                super._deliverTokens(contributors[j], tokensAmount);\r\n\r\n                depositedTokens[contributors[j]] = 0;\r\n\r\n                //update state of release\r\n                tokensReleasedAmount = tokensReleasedAmount.add(tokensAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Stops crowdsale and release of tokens. Transfer remainining tokens back to owner.\r\n    */\r\n    function close() external onlyOwner {\r\n        crowdsaleActive = false;\r\n        isCrowdsaleClosed = true;\r\n        \r\n        token.transfer(owner, token.balanceOf(address(this)));\r\n        emit Close();\r\n    }\r\n\r\n\r\n    /*==================================================================== */\r\n    /*======================== INTERNAL FUNCTIONS ======================== */\r\n    /*==================================================================== */\r\n\r\n    /**\r\n    * @dev Overrides _preValidatePurchase function in Crowdsale.\r\n    * Requires purchase is made within crowdsale period.\r\n    * Requires contributor to be the beneficiary.\r\n    * Requires purchase value and address to be non-zero.\r\n    * Requires amount not to exceed funding goal.\r\n    * Requires purchase value to be higher or equal to minimum amount.\r\n    * Requires contributor to be whitelisted.\r\n    */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n        bool withinPeriod = now >= presaleStartTime && now <= endTime;\r\n\r\n        bool atLeastMinimumAmount = false;\r\n\r\n        if(block.timestamp <= startTime) {\r\n            // during presale period\r\n\r\n            require(_weiAmount.add(weiRaised.add(privateContribution)) <= presaleFundingGoal);\r\n            atLeastMinimumAmount = _weiAmount >= MINIMUM_PRESALE_PURCHASE_AMOUNT_IN_WEI;\r\n            \r\n        } else {\r\n            // during funding period\r\n            atLeastMinimumAmount = _weiAmount >= MINIMUM_PURCHASE_AMOUNT_IN_WEI;\r\n        }\r\n\r\n        super._preValidatePurchase(_beneficiary, _weiAmount);\r\n        require(msg.sender == _beneficiary);\r\n        require(_weiAmount.add(weiRaised.add(privateContribution)) <= fundingGoal);\r\n        require(withinPeriod);\r\n        require(atLeastMinimumAmount);\r\n        require(crowdsaleActive);\r\n    }\r\n\r\n    /**\r\n    * @dev Overrides _getTokenAmount function in Crowdsale.\r\n    * Calculates token amount, inclusive of bonus, based on ETH contributed.\r\n    * @param _weiAmount Value in wei to be converted into tokens\r\n    * @return Number of tokens that can be purchased with the specified _weiAmount\r\n    */\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        return _weiAmount.mul(getRate());\r\n    }\r\n\r\n    /**\r\n    * @dev Overrides _updatePurchasingState function from Crowdsale.\r\n    * Updates tokenWeiRaised amount and funding goal status.\r\n    */\r\n    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n        tokensWeiRaised = tokensWeiRaised.add(_getTokenAmount(_weiAmount));\r\n        _updateFundingGoal();\r\n    }\r\n\r\n    /**\r\n    * @dev Overrides _processPurchase function from Crowdsale.\r\n    * Adds the tokens purchased to the beneficiary.\r\n    * @param _tokenAmount The token amount in wei before multiplied by the rate.\r\n    */\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        depositedTokens[_beneficiary] = depositedTokens[_beneficiary].add(_getTokenAmount(_tokenAmount));\r\n    }\r\n\r\n    /**\r\n    * @dev Updates fundingGoal status.\r\n    */\r\n    function _updateFundingGoal() internal {\r\n        if (weiRaised.add(privateContribution) >= fundingGoal) {\r\n            fundingGoalReached = true;\r\n            emit GoalReached(weiRaised.add(privateContribution));\r\n        }\r\n\r\n        if(block.timestamp <= startTime) {\r\n            if(weiRaised.add(privateContribution) >= presaleFundingGoal) {\r\n                \r\n                presaleFundingGoalReached = true;\r\n                emit PresaleGoalReached(weiRaised.add(privateContribution));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_PRESALE_PURCHASE_AMOUNT_IN_WEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleFundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleFundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensReleasedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributors\",\"type\":\"address[]\"}],\"name\":\"releaseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addManyToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_PURCHASE_AMOUNT_IN_WEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherWeiAmount\",\"type\":\"uint256\"}],\"name\":\"changePrivateContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalEtherAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalEtherAmountRaised\",\"type\":\"uint256\"}],\"name\":\"PresaleGoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartCrowdsale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StopCrowdsale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"ReleaseTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Close\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GStarCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000002710000000000000000000000000ea2e24b559f0b97867326f648973c9e508a0d6d2000000000000000000000000e64de17ac4c1ada2902c652464bb38d44d95d3f7","Library":"","SwarmSource":"bzzr://4308022a4a1a54507dab4fd19e400561592085bcf31d1113d83b7341abf118ec"}]}