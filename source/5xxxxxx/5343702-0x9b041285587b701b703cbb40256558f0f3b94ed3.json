{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b); \r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public{\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    require(owner==msg.sender);\r\n    _;\r\n }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n      owner = newOwner;\r\n  }\r\n \r\n}\r\n  \r\ncontract ERC20 {\r\n\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n    function approve(address spender, uint256 value) public returns (bool success);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\ncontract CBITToken is Ownable, ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Token properties\r\n    string public name = \"CAMBITUS\";\r\n    string public symbol = \"CBIT\";\r\n    uint256 public decimals = 18;\r\n\r\n    uint256 public _totalSupply = 250000000e18;\r\n    uint256 public _icoSupply = 156250000e18;       //62.5%\r\n    uint256 public _preSaleSupply = 43750000e18;    //17.5%\r\n    uint256 public _phase1Supply = 50000000e18;     //20%\r\n    uint256 public _phase2Supply = 50000000e18;     //20%\r\n    uint256 public _finalSupply = 12500000e18;      //5%\r\n    uint256 public _teamSupply = 43750000e18;       //17.5%\r\n    uint256 public _communitySupply = 12500000e18;  //5%\r\n    uint256 public _bountySupply = 12500000e18;     //5%\r\n    uint256 public _ecosysSupply = 25000000e18;     //10%\r\n\r\n    // Balances for each account\r\n    mapping (address => uint256) balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping (address => mapping(address => uint256)) allowed;\r\n    \r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime; \r\n\r\n    // Wallet Address of Token\r\n    address public multisig;\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public price;\r\n\r\n    uint256 public minContribAmount = 1 ether;\r\n\r\n    uint256 public maxCap = 81000 ether;\r\n    uint256 public minCap = 450 ether;\r\n    \r\n    //number of total tokens sold \r\n    uint256 public totalNumberTokenSold=0;\r\n\r\n    bool public tradable = false;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    modifier canTradable() {\r\n        require(tradable || (now > startTime + 180 days));\r\n        _;\r\n    }\r\n\r\n    // Constructor\r\n    // @notice CBITToken Contract\r\n    // @return the transaction address\r\n    function CBITToken() public{\r\n        multisig = 0xAfC252F597bd592276C6846cD44d1F82d87e63a2;\r\n\r\n        balances[multisig] = _totalSupply;\r\n\r\n        startTime = 1525150800;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Payable method\r\n    // @notice Anyone can buy the tokens on tokensale by paying ether\r\n    function () external payable {\r\n        \r\n        tokensale(msg.sender);\r\n    }\r\n\r\n    // @notice tokensale\r\n    // @param recipient The address of the recipient\r\n    // @return the transaction address and send the event as Transfer\r\n    function tokensale(address recipient) public payable {\r\n        require(recipient != 0x0);\r\n        require(msg.value >= minContribAmount);\r\n        price = getPrice();\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokenToSend = weiAmount.mul(price);\r\n        \r\n        require(tokenToSend > 0);\r\n        require(_icoSupply >= tokenToSend);\r\n        \r\n        balances[multisig] = balances[multisig].sub(tokenToSend);\r\n        balances[recipient] = balances[recipient].add(tokenToSend);\r\n        \r\n        totalNumberTokenSold=totalNumberTokenSold.add(tokenToSend);\r\n        _icoSupply = _icoSupply.sub(tokenToSend);\r\n\r\n\t    multisig.transfer(msg.value);\r\n        TokenPurchase(msg.sender, recipient, weiAmount, tokenToSend);\r\n    }\r\n    \r\n    // Token distribution to Team\r\n    function sendICOSupplyToken(address to, uint256 value) public onlyOwner {\r\n        require (\r\n            to != 0x0 && value > 0 && _icoSupply >= value\r\n        );\r\n\r\n        balances[multisig] = balances[multisig].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        _icoSupply = _icoSupply.sub(value);\r\n        totalNumberTokenSold=totalNumberTokenSold.add(value);\r\n        Transfer(multisig, to, value);\r\n    }\r\n\r\n    // Token distribution to Team\r\n    function sendTeamSupplyToken(address to, uint256 value) public onlyOwner {\r\n        require (\r\n            to != 0x0 && value > 0 && _teamSupply >= value\r\n        );\r\n\r\n        balances[multisig] = balances[multisig].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        totalNumberTokenSold=totalNumberTokenSold.add(value);\r\n        _teamSupply = _teamSupply.sub(value);\r\n        Transfer(multisig, to, value);\r\n    }\r\n    \r\n    // Token distribution to Community\r\n    function sendCommunitySupplyToken(address to, uint256 value) public onlyOwner {\r\n        require (\r\n            to != 0x0 && value > 0 && _communitySupply >= value\r\n        );\r\n\r\n        balances[multisig] = balances[multisig].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        totalNumberTokenSold=totalNumberTokenSold.add(value);\r\n        _communitySupply = _communitySupply.sub(value);\r\n        Transfer(multisig, to, value);\r\n    }\r\n    \r\n    // Token distribution to Bounty\r\n    function sendBountySupplyToken(address to, uint256 value) public onlyOwner {\r\n        require (\r\n            to != 0x0 && value > 0 && _bountySupply >= value\r\n        );\r\n\r\n        balances[multisig] = balances[multisig].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        totalNumberTokenSold=totalNumberTokenSold.add(value);\r\n        _bountySupply = _bountySupply.sub(value);\r\n        Transfer(multisig, to, value);\r\n    }\r\n    \r\n    // Token distribution to Ecosystem\r\n    function sendEcosysSupplyToken(address to, uint256 value) public onlyOwner {\r\n        require (\r\n            to != 0x0 && value > 0 && _ecosysSupply >= value\r\n        );\r\n\r\n        balances[multisig] = balances[multisig].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        totalNumberTokenSold=totalNumberTokenSold.add(value);\r\n        _ecosysSupply = _ecosysSupply.sub(value);\r\n        Transfer(multisig, to, value);\r\n    }\r\n    \r\n    // Start or pause tradable to Transfer token\r\n    function startTradable(bool _tradable) public onlyOwner {\r\n        tradable = _tradable;\r\n    }\r\n\r\n    // @return total tokens supplied\r\n    function totalSupply() public constant returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    // @return total tokens supplied\r\n    function totalNumberTokenSold() public view returns (uint256) {\r\n        return totalNumberTokenSold;\r\n    }\r\n\r\n    // What is the balance of a particular account?\r\n    // @param who The address of the particular account\r\n    // @return the balanace the particular account\r\n    function balanceOf(address who) public constant returns (uint256) {\r\n        return balances[who];\r\n    }\r\n\r\n    // @notice send `value` token to `to` from `msg.sender`\r\n    // @param to The address of the recipient\r\n    // @param value The amount of token to be transferred\r\n    // @return the transaction address and send the event as Transfer\r\n    function transfer(address to, uint256 value) public canTradable returns (bool success)  {\r\n        require (\r\n            balances[msg.sender] >= value && value > 0\r\n        );\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    // @notice send `value` token to `to` from `from`\r\n    // @param from The address of the sender\r\n    // @param to The address of the recipient\r\n    // @param value The amount of token to be transferred\r\n    // @return the transaction address and send the event as Transfer\r\n    function transferFrom(address from, address to, uint256 value) public canTradable returns (bool success)  {\r\n        require (\r\n            allowed[from][msg.sender] >= value && balances[from] >= value && value > 0\r\n        );\r\n        balances[from] = balances[from].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n        Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    // Allow spender to withdraw from your account, multiple times, up to the value amount.\r\n    // If this function is called again it overwrites the current allowance with value.\r\n    // @param spender The address of the sender\r\n    // @param value The amount to be approved\r\n    // @return the transaction address and send the event as Approval\r\n    function approve(address spender, uint256 value) public returns (bool success)  {\r\n        require (\r\n            balances[msg.sender] >= value && value > 0\r\n        );\r\n        allowed[msg.sender][spender] = value;\r\n        Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    // Check the allowed value for the spender to withdraw from owner\r\n    // @param owner The address of the owner\r\n    // @param spender The address of the spender\r\n    // @return the amount which spender is still allowed to withdraw from owner\r\n    function allowance(address _owner, address spender) public constant returns (uint256) {\r\n        return allowed[_owner][spender];\r\n    }\r\n    \r\n        // Get current price of a Token\r\n    // @return the price or token value for a ether\r\n    function getPrice() public view returns (uint result) {\r\n        if ( (now < startTime + 30 days) && (totalNumberTokenSold < _preSaleSupply)) {\r\n            return 7500;\r\n        } else if ( (now < startTime + 60 days) && (totalNumberTokenSold < _preSaleSupply + _phase1Supply) ) {\r\n            return 5000;\r\n        } else if ( (now < startTime + 90 days) && (totalNumberTokenSold < _preSaleSupply + _phase1Supply + _phase2Supply) ) {\r\n            return 3125;\r\n        } else if ( (now < startTime + 99 days) && (totalNumberTokenSold < _preSaleSupply + _phase1Supply + _phase2Supply + _finalSupply) ) {\r\n            return 1500;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function getTokenDetail() public view returns (string, string, uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        return (name, symbol, _totalSupply, totalNumberTokenSold, _icoSupply, _teamSupply, _communitySupply, _bountySupply, _ecosysSupply);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"_teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNumberTokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_icoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_ecosysSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_phase2Supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_phase1Supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendICOSupplyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendCommunitySupplyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_preSaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendBountySupplyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradable\",\"type\":\"bool\"}],\"name\":\"startTradable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"tokensale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendTeamSupplyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendEcosysSupplyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_bountySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_finalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_communitySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CBITToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://59155c2f8e10669369f9ed36485ee795b144095da4a77d513b31ba8602368431"}]}