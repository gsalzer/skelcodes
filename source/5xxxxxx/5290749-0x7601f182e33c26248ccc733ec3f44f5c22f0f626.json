{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\ncontract ERC20Interface {\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function balanceOf(address who) public view returns (uint256);\r\n}\r\n\r\n/* 1. Contract is initiated by storing sender as OWNER and with following arguments:\r\n * deadline : block.number which defines deadline of users authorisation and funds processing\r\n * extendedTime : number of blocks which defines extension of deadline\r\n * maxTime : block.number which defines maximum period for deadline extension\r\n * manager : address which is set as MANAGER.\r\n * Only MANAGER is allowed to perform operational functions:\r\n * - to authorize users in General Token Sale\r\n * - to add Tokens to the List of acceptable tokens\r\n * recipient : multisig contract to collect unclaimed funds\r\n * recipientContainer : multisig contract to collect other funds which remain on contract after deadline */\r\ncontract TokenSaleQueue {\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    /* Struct with  properties of each record for 'deposits' mapping */\r\n    struct Record {\r\n        uint256 balance;\r\n        bool authorized;\r\n    }\r\n    /* Contract has internal mapping `deposits`:\r\n     * Address -> (balance: uint, authorized: bool).\r\n     * It represents balance of everyone whoever used `deposit` method.\r\n     *\r\n     * This is where balances of all participants are stored. Additional flag of\r\n     * whether the participant is authorized investor is stored. This flag\r\n     * determines if the participant has passed AML/KYC check and reservation\r\n     * payment can be transferred to general Token Sale  */\r\n    mapping(address => Record) public deposits;\r\n    address public manager; /* Contract administrator */\r\n    address public recipient; /* Unclaimed funds collector */\r\n    address public recipientContainer; /* Undefined funds collector */\r\n    uint public deadline; /* blocks */\r\n    uint public extendedTime; /* blocks */\r\n    uint public maxTime; /* blocks */\r\n    uint public finalTime; /* deadline + extendedTime - blocks */\r\n\r\n    /* Amount of wei raised */\r\n    uint256 public weiRaised;\r\n\r\n    function() public payable {\r\n        deposit();\r\n    }\r\n\r\n    /* A set of functions to get required variables */\r\n    function balanceOf(address who) public view returns (uint256 balance) {\r\n        return deposits[who].balance;\r\n    }\r\n\r\n    function isAuthorized(address who) public view returns (bool authorized) {\r\n        return deposits[who].authorized;\r\n    }\r\n\r\n    function getDeadline() public view returns (uint) {\r\n        return deadline;\r\n    }\r\n\r\n    function getManager() public view returns (address) {\r\n        return manager;\r\n    }\r\n\r\n    /* Contract has events for integration purposes */\r\n    event Whitelist(address who);\r\n    event Deposit(address who, uint256 amount);\r\n    event Withdrawal(address who);\r\n    event Authorized(address who);\r\n    event Process(address who);\r\n    event Refund(address who);\r\n\r\n    /* `TokenSaleQueue` is executed after the contract deployment, it sets up the Contract */\r\n    function TokenSaleQueue(address _owner, address _manager,  address _recipient, address _recipientContainer, uint _deadline, uint _extendedTime, uint _maxTime) public {\r\n        require(_owner != address(0));\r\n        require(_manager != address(0));\r\n        require(_recipient != address(0));\r\n        require(_recipientContainer != address(0));\r\n\r\n        owner = _owner;\r\n        manager = _manager;\r\n        recipient = _recipient;\r\n        recipientContainer = _recipientContainer;\r\n        deadline = _deadline;\r\n        extendedTime = _extendedTime;\r\n        maxTime = _maxTime;\r\n        finalTime = deadline + extendedTime;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    /* Contract has mapping `whitelist`.\r\n     * It contains participants addresses which have passed AML check and are allowed to deposit funds */\r\n    mapping(address => bool) whitelist;\r\n\r\n    /* Manager adds user to whitelist by executing function `addAddressInWhitelist` */\r\n    /* Contract checks if sender is equal to manager */\r\n    function addAddressInWhitelist(address who) public onlyManager {\r\n        require(who != address(0));\r\n        whitelist[who] = true;\r\n        Whitelist(who);\r\n    }\r\n\r\n    function isInWhiteList(address who) public view returns (bool result) {\r\n        return whitelist[who];\r\n    }\r\n\r\n    /* 3. Contract has payable method deposit\r\n     * Partisipant transfers reservation payment in Ether by executing this method.\r\n     * Participant can withdraw funds at anytime (4.) */\r\n    function deposit() public payable {\r\n        /* Contract checks that method invocation attaches non-zero value. */\r\n        require(msg.value > 0);\r\n\r\n        /* Contract checks whether the user is in whitelist */\r\n        require(whitelist[msg.sender]);\r\n\r\n        /* Contract checks if `finalTime` is not reached.\r\n         * If reached, it returns funds to `sender` and transfers uclaimed Ether to recipient. */\r\n        if (block.number <= finalTime) {\r\n            /* Contract adds value sent to the participant's balance in `deposit` mapping */\r\n            deposits[msg.sender].balance = deposits[msg.sender].balance.add(msg.value);\r\n            weiRaised = weiRaised.add(msg.value);\r\n            Deposit(msg.sender, msg.value);\r\n        } else {\r\n            msg.sender.transfer(msg.value);\r\n            if (weiRaised != 0) {\r\n                uint256 sendToRecepient = weiRaised;\r\n                weiRaised = 0;\r\n                recipient.transfer(sendToRecepient);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* 4. Contract has method withdraw\r\n     * Participant can withdraw reservation payment in Ether deposited with deposit function (1.).\r\n     * This method can be executed at anytime. */\r\n    function withdraw() public {\r\n        /* Contract checks that balance of the sender in `deposits` mapping is a non-zero value */\r\n        Record storage record = deposits[msg.sender];\r\n        require(record.balance > 0);\r\n\r\n        uint256 balance = record.balance;\r\n        /* Contract sets participant's balance to zero in `deposits` mapping */\r\n        record.balance = 0;\r\n\r\n        weiRaised = weiRaised.sub(balance);\r\n        /* Contract transfers sender's ETH balance to his address */\r\n        msg.sender.transfer(balance);\r\n        Withdrawal(msg.sender);\r\n    }\r\n\r\n    /* 5. Contract has method authorize with address argument */\r\n    /* Manager authorizes particular participant to transfer reservation payment to Token Sale */\r\n    function authorize(address who) onlyManager public {\r\n        /* Contract checks if sender is equal to manager */\r\n        require(who != address(0));\r\n\r\n        Record storage record = deposits[who];\r\n\r\n        /* Contract updates value in `whitelist` mapping and flags participant as authorized */\r\n        record.authorized = true;\r\n        Authorized(who);\r\n    }\r\n\r\n    /* 6. Contract has method process */\r\n    /* Sender transfers reservation payment in Ether to owner to be redirected to the Token Sale */\r\n    function process() public {\r\n        Record storage record = deposits[msg.sender];\r\n\r\n        /* Contract checks whether participant's `deposits` balance is a non-zero value and authorized is set to true */\r\n        require(record.authorized);\r\n        require(record.balance > 0);\r\n\r\n        uint256 balance = record.balance;\r\n        /* Contract sets balance of the sender entry to zero in the `deposits` */\r\n        record.balance = 0;\r\n\r\n        weiRaised = weiRaised.sub(balance);\r\n\r\n        /* Contract transfers balance to the owner */\r\n        owner.transfer(balance);\r\n\r\n        Process(msg.sender);\r\n    }\r\n\r\n    /* Contract has internal mapping `tokenDeposits`:\r\n     * Address -> (balance: uint, authorized: bool)\r\n     *\r\n     * It represents token balance of everyone whoever used `tokenDeposit`\r\n     * method and stores token balances of all participants. It stores aditional\r\n     * flag of whether the participant is authorized, which determines if the\r\n     * participant's reservation payment in tokens can be transferred to General Token Sale */\r\n    mapping(address => mapping(address => uint256)) public tokenDeposits;\r\n\r\n    /* Whitelist of tokens which can be accepted as reservation payment */\r\n    mapping(address => bool) public tokenWalletsWhitelist;\r\n    address[] tokenWallets;\r\n    mapping(address => uint256) public tokenRaised;\r\n    bool reclaimTokenLaunch = false;\r\n\r\n    /* Manager can add tokens to whitelist. */\r\n    function addTokenWalletInWhitelist(address tokenWallet) public onlyManager {\r\n        require(tokenWallet != address(0));\r\n        require(!tokenWalletsWhitelist[tokenWallet]);\r\n        tokenWalletsWhitelist[tokenWallet] = true;\r\n        tokenWallets.push(tokenWallet);\r\n        TokenWhitelist(tokenWallet);\r\n    }\r\n\r\n    function tokenInWhiteList(address tokenWallet) public view returns (bool result) {\r\n        return tokenWalletsWhitelist[tokenWallet];\r\n    }\r\n\r\n    function tokenBalanceOf(address tokenWallet, address who) public view returns (uint256 balance) {\r\n        return tokenDeposits[tokenWallet][who];\r\n    }\r\n\r\n    /* Another list of events for integrations */\r\n    event TokenWhitelist(address tokenWallet);\r\n    event TokenDeposit(address tokenWallet, address who, uint256 amount);\r\n    event TokenWithdrawal(address tokenWallet, address who);\r\n    event TokenProcess(address tokenWallet, address who);\r\n    event TokenRefund(address tokenWallet, address who);\r\n\r\n    /* 7. Contract has method tokenDeposit\r\n     * Partisipant transfers reservation payment in tokens by executing this method.\r\n     * Participant can withdraw funds in tokens at anytime (8.) */\r\n    function tokenDeposit(address tokenWallet, uint amount) public {\r\n        /* Contract checks that method invocation attaches non-zero value. */\r\n        require(amount > 0);\r\n\r\n        /* Contract checks whether token wallet in whitelist */\r\n        require(tokenWalletsWhitelist[tokenWallet]);\r\n\r\n        /* Contract checks whether user in whitelist */\r\n        require(whitelist[msg.sender]);\r\n\r\n        /* msg.sender initiates transferFrom function from ERC20 contract */\r\n        ERC20Interface ERC20Token = ERC20Interface(tokenWallet);\r\n\r\n        /* Contract checks if `finalTime` is not reached. */\r\n        if (block.number <= finalTime) {\r\n            require(ERC20Token.transferFrom(msg.sender, this, amount));\r\n\r\n            tokenDeposits[tokenWallet][msg.sender] = tokenDeposits[tokenWallet][msg.sender].add(amount);\r\n            tokenRaised[tokenWallet] = tokenRaised[tokenWallet].add(amount);\r\n            TokenDeposit(tokenWallet, msg.sender, amount);\r\n        } else {\r\n            reclaimTokens(tokenWallets);\r\n        }\r\n    }\r\n\r\n    /* 8. Contract has method tokenWithdraw\r\n     * Participant can withdraw reservation payment in tokens deposited with tokenDeposit function (7.).\r\n     * This method can be executed at anytime. */\r\n    function tokenWithdraw(address tokenWallet) public {\r\n        /* Contract checks whether balance of the sender in `tokenDeposits` mapping is a non-zero value */\r\n        require(tokenDeposits[tokenWallet][msg.sender] > 0);\r\n\r\n        uint256 balance = tokenDeposits[tokenWallet][msg.sender];\r\n        /* Contract sets sender token balance in `tokenDeposits` to zero */\r\n        tokenDeposits[tokenWallet][msg.sender] = 0;\r\n        tokenRaised[tokenWallet] = tokenRaised[tokenWallet].sub(balance);\r\n\r\n        /* Contract transfers tokens to the sender from contract balance */\r\n        ERC20Interface ERC20Token = ERC20Interface(tokenWallet);\r\n        require(ERC20Token.transfer(msg.sender, balance));\r\n\r\n        TokenWithdrawal(tokenWallet, msg.sender);\r\n    }\r\n\r\n    /* 9. Contract has method tokenProcess */\r\n    /* Sender transfers reservation payment in tokens to owner to be redirected to the Token Sale */\r\n    function tokenProcess(address tokenWallet) public {\r\n        /* Contract checks that balance of the sender in `tokenDeposits` mapping\r\n         * is a non-zero value and sender is authorized */\r\n        require(deposits[msg.sender].authorized);\r\n        require(tokenDeposits[tokenWallet][msg.sender] > 0);\r\n\r\n        uint256 balance = tokenDeposits[tokenWallet][msg.sender];\r\n        /* Contract sets sender balance to zero for the specified token */\r\n        tokenDeposits[tokenWallet][msg.sender] = 0;\r\n        tokenRaised[tokenWallet] = tokenRaised[tokenWallet].sub(balance);\r\n\r\n        /* Contract transfers tokens to the owner */\r\n        ERC20Interface ERC20Token = ERC20Interface(tokenWallet);\r\n        require(ERC20Token.transfer(owner, balance));\r\n\r\n        TokenProcess(tokenWallet, msg.sender);\r\n    }\r\n\r\n    /* recipientContainer can transfer undefined funds to itself and terminate\r\n     * the Contract after finalDate */\r\n    function destroy(address[] tokens) public {\r\n        require(msg.sender == recipientContainer);\r\n        require(block.number > finalTime);\r\n\r\n        /* Transfer undefined tokens to recipientContainer */\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            ERC20Interface token = ERC20Interface(tokens[i]);\r\n            uint256 balance = token.balanceOf(this);\r\n            token.transfer(recipientContainer, balance);\r\n        }\r\n\r\n        /* Transfer undefined Eth to recipientContainer and terminate contract */\r\n        selfdestruct(recipientContainer);\r\n    }\r\n\r\n    /* Owner can change extendedTime if required.\r\n     * finalTime = deadline + extendedTime - should not exceed maxTime */\r\n    function changeExtendedTime(uint _extendedTime) public onlyOwner {\r\n        require((deadline + _extendedTime) < maxTime);\r\n        require(_extendedTime > extendedTime);\r\n        extendedTime = _extendedTime;\r\n        finalTime = deadline + extendedTime;\r\n    }\r\n\r\n    /* Internal method which retrieves unclaimed funds in tokens */\r\n    function reclaimTokens(address[] tokens) internal {\r\n        require(!reclaimTokenLaunch);\r\n\r\n        /* Transfer tokens to recipient */\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            ERC20Interface token = ERC20Interface(tokens[i]);\r\n            uint256 balance = tokenRaised[tokens[i]];\r\n            tokenRaised[tokens[i]] = 0;\r\n            token.transfer(recipient, balance);\r\n        }\r\n\r\n        reclaimTokenLaunch = true;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWalletsWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenWallet\",\"type\":\"address\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenWallet\",\"type\":\"address\"}],\"name\":\"tokenInWhiteList\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extendedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenWallet\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recipientContainer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isInWhiteList\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenWallet\",\"type\":\"address\"}],\"name\":\"addTokenWalletInWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenWallet\",\"type\":\"address\"}],\"name\":\"tokenWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"process\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenWallet\",\"type\":\"address\"}],\"name\":\"tokenProcess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"addAddressInWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"authorized\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_extendedTime\",\"type\":\"uint256\"}],\"name\":\"changeExtendedTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"authorized\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_recipientContainer\",\"type\":\"address\"},{\"name\":\"_deadline\",\"type\":\"uint256\"},{\"name\":\"_extendedTime\",\"type\":\"uint256\"},{\"name\":\"_maxTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Process\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenWallet\",\"type\":\"address\"}],\"name\":\"TokenWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"TokenWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"TokenProcess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"TokenRefund\",\"type\":\"event\"}]","ContractName":"TokenSaleQueue","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d9ae56f73db24c1de0cb8c05a310b26f1f33e855000000000000000000000000004d500b3b9b25ea91789d14ee822a1f4a90532e0000000000000000000000006890df87795e29d1cc4d3c8647578639987921a00000000000000000000000008016ebf3ffb1b62e138d577a00029f72bb98a85d00000000000000000000000000000000000000000000000000000000006754a800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000957928","Library":"","SwarmSource":"bzzr://4821ecba5d46633395c8d458f80a145cb87b169b14a265170546a70863984aae"}]}