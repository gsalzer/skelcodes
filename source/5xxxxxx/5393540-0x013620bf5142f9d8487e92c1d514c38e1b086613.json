{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4 .18;\r\n\r\ncontract Etherumble {\r\n\r\n    struct PlayerBets {\r\n        address addPlayer;\r\n        uint amount;\r\n    }\r\n\r\n    PlayerBets[] users;\r\n    \r\n    address[] players = new address[](20);\r\n    uint[] bets = new uint[](20);\r\n\r\n    uint nbUsers = 0;\r\n    uint totalBets = 0;\r\n    uint fees = 0;\r\n    uint endBlock = 0;\r\n\r\n    address owner;\r\n    \r\n    address lastWinner;\r\n    uint lastWinnerTicket=0;\r\n    uint totalGames = 0;\r\n    \r\n    modifier isOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier hasValue() {\r\n        require(msg.value >= 10000000000000000 && nbUsers < 19); //0.01 ether min\r\n        _;\r\n    }\r\n\r\n    modifier onlyIf(bool _condition) {\r\n        require(_condition);\r\n        _;\r\n    }\r\n\r\n    function Lottery() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function getActivePlayers() public constant returns(uint) {\r\n        return nbUsers;\r\n    }\r\n    \r\n    function getPlayerAddress(uint index) public constant returns(address) {\r\n        return players[index];\r\n    }\r\n    \r\n    function getPlayerBet(uint index) public constant returns(uint) {\r\n        return bets[index];\r\n    }\r\n    function getEndBlock() public constant returns(uint) {\r\n        return endBlock;\r\n    }\r\n    function getLastWinner() public constant returns(address) {\r\n        return lastWinner;\r\n    }\r\n    function getLastWinnerTicket() public constant returns(uint) {\r\n        return lastWinnerTicket;\r\n    }\r\n    function getTotalGames() public constant returns(uint) {\r\n        return totalGames;\r\n    }\r\n    \r\n\r\n    function() public payable hasValue {\r\n        checkinter();//first check if it's a good block for ending a game. this way there is no new user after the winner block hash is calculated\r\n        players[nbUsers] = msg.sender;\r\n        bets[nbUsers] = msg.value;\r\n        \r\n        users.push(PlayerBets(msg.sender, msg.value));\r\n        nbUsers++;\r\n        totalBets += msg.value;\r\n        if (nbUsers == 2) { //at the 2nd player it start counting blocks...\r\n            endBlock = block.number + 15;\r\n        }\r\n    }\r\n\r\n    function endLottery() internal {\r\n        uint sum = 0;\r\n        uint winningNumber = uint(block.blockhash(block.number - 1)) % totalBets;\r\n\r\n        for (uint i = 0; i < nbUsers; i++) {\r\n            sum += users[i].amount;\r\n\r\n            if (sum >= winningNumber) {\r\n                // destroy this contract and send the balance to users[i]\r\n                withrawWin(users[i].addPlayer,winningNumber);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function withrawWin(address winner,uint winticket) internal {\r\n        uint tempTot = totalBets;\r\n        lastWinnerTicket = winticket;\r\n        totalGames++;\r\n        \r\n        //reset all values\r\n        nbUsers = 0;\r\n        totalBets = 0;\r\n        endBlock = 0;\r\n        delete users;\r\n        \r\n        fees += tempTot * 5 / 100;\r\n        winner.transfer(tempTot * 95 / 100);\r\n        lastWinner = winner;\r\n    }\r\n    \r\n    function withrawFee() public isOwner {\r\n        owner.transfer(fees);\r\n        fees = 0;\r\n    }\r\n    function destroykill() public isOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function checkinter() internal{ //this can be called by anyone if the timmer freez\r\n        //check block time\r\n        if (endBlock <= block.number && endBlock != 0) {\r\n            endLottery();\r\n        }\r\n    }\r\n    \r\n    function callback() public isOwner{ //this can be called by anyone if the timmer freez\r\n        //check block time\r\n        if (endBlock <= block.number && endBlock != 0) {\r\n            endLottery();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withrawFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActivePlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayerBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Lottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroykill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastWinnerTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalGames\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Etherumble","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2600c91a8cd5fef69819598cfc3f417f57dbad6511db56cb9b86894ff0504dce"}]}