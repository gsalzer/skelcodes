{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\ncontract GPUMining{\r\n    function buyEggs() public payable;\r\n}\r\ncontract AdPotato{\r\n    address ceoAddress;\r\n    GPUMining fundsTarget;\r\n    Advertisement[] ads;\r\n    uint256 NUM_ADS=10;\r\n    uint256 BASE_PRICE=0.005 ether;\r\n    uint256 PERCENT_TAXED=30;\r\n    /***EVENTS***/\r\n    event BoughtAd(address sender, uint256 amount);\r\n    /*** ACCESS MODIFIERS ***/\r\n    modifier onlyCLevel() {\r\n    require(\r\n      msg.sender == ceoAddress\r\n    );\r\n    _;\r\n    }\r\n    /***CONSTRUCTOR***/\r\n    function AdPotato() public{\r\n        ceoAddress=msg.sender;\r\n        initialize(0xa965Fb4db32D8600edcd5CC102a43E798BC3F08f);\r\n    }\r\n    /*** DATATYPES ***/\r\n    struct Advertisement{\r\n        string text;\r\n        string url;\r\n        address owner;\r\n        uint256 startingLevel;\r\n        uint256 startingTime;\r\n        uint256 halfLife;\r\n    }\r\n    /*** PUBLIC FUNCTIONS ***/\r\n    function initialize(address fund) public onlyCLevel{\r\n        fundsTarget=GPUMining(fund);\r\n        for(uint i=0;i<NUM_ADS;i++){\r\n            ads.push(Advertisement({text:\"Your Text Here\",url:\"\",owner:ceoAddress,startingLevel:0,startingTime:now,halfLife:12 hours}));\r\n        }\r\n    }\r\n    function buyAd(uint256 index,string text,string url) public payable{\r\n        require(ads.length>index);\r\n        require(msg.sender==tx.origin);\r\n        Advertisement storage toBuy=ads[index];\r\n        uint256 currentLevel=getCurrentLevel(toBuy.startingLevel,toBuy.startingTime,toBuy.halfLife);\r\n        uint256 currentPrice=getCurrentPrice(currentLevel);\r\n        require(msg.value>=currentPrice);\r\n        uint256 purchaseExcess = SafeMath.sub(msg.value, currentPrice);\r\n        toBuy.text=text;\r\n        toBuy.url=url;\r\n        toBuy.startingLevel=currentLevel+1;\r\n        toBuy.startingTime=now;\r\n        fundsTarget.buyEggs.value(SafeMath.div(SafeMath.mul(currentPrice,PERCENT_TAXED),100))();//send to recipient of ad revenue\r\n        toBuy.owner.transfer(SafeMath.div(SafeMath.mul(currentPrice,100-PERCENT_TAXED),100));//send most of purchase price to previous owner\r\n        toBuy.owner=msg.sender;//change owner\r\n        msg.sender.transfer(purchaseExcess);\r\n        emit BoughtAd(msg.sender,purchaseExcess);\r\n    }\r\n    function getAdText(uint256 index)public view returns(string){\r\n        return ads[index].text;\r\n    }\r\n    function getAdUrl(uint256 index)public view returns(string){\r\n        return ads[index].url;\r\n    }\r\n    function getAdOwner(uint256 index) public view returns(address){\r\n        return ads[index].owner;\r\n    }\r\n    function getAdPrice(uint256 index) public view returns(uint256){\r\n        Advertisement ad=ads[index];\r\n        return getCurrentPrice(getCurrentLevel(ad.startingLevel,ad.startingTime,ad.halfLife));\r\n    }\r\n    function getCurrentPrice(uint256 currentLevel) public view returns(uint256){\r\n        return BASE_PRICE*2**currentLevel; //** is exponent, price doubles every level\r\n    }\r\n    function getCurrentLevel(uint256 startingLevel,uint256 startingTime,uint256 halfLife)public view returns(uint256){\r\n        uint256 timePassed=SafeMath.sub(now,startingTime);\r\n        uint256 levelsPassed=SafeMath.div(timePassed,halfLife);\r\n        if(startingLevel<levelsPassed){\r\n            return 0;\r\n        }\r\n        return SafeMath.sub(startingLevel,levelsPassed);\r\n    }\r\n    /*** PRIVATE FUNCTIONS ***/\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}],\"name\":\"buyAd\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAdOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAdUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fund\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentLevel\",\"type\":\"uint256\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"startingLevel\",\"type\":\"uint256\"},{\"name\":\"startingTime\",\"type\":\"uint256\"},{\"name\":\"halfLife\",\"type\":\"uint256\"}],\"name\":\"getCurrentLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAdPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAdText\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BoughtAd\",\"type\":\"event\"}]","ContractName":"AdPotato","CompilerVersion":"v0.4.25-nightly.2018.5.23+commit.18c651b7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://64e43d6036813b04cc8d0057f8e82a137688bab9bd128876908f661c8a60fd4c"}]}