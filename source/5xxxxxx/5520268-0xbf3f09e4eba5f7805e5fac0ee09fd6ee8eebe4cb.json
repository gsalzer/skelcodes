{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract BGXToken {\r\n    // 以下参数测试时会临时修改，在正式发布时需要修正为正式参数 ======>\r\n    string public name = \"BIT GAME EXCHANGE\";\r\n    string public symbol = \"BGX\";\r\n\r\n    address ethFundAddress = 0x7C235ac7b006d829990384018B0E98fDf0bA5EF7; // 以太坊轉存地址\r\n    address icoAddress = 0xC817a2afe8F6ba1a697dAaA1df834e18Be9403e7; // ICO地址\r\n    address[] foundationAddresses = [0xBc9d9A1EE11dC2803BA2daaAa892483052Ed97f5,\r\n                                     0x3CA55e25C110b175B6622586aC31a6682a916670,\r\n                                     0xF13b2d7c5d6d6E93f79D41FA72cFD33A75c0607d,\r\n                                     0xc321Cf1D0ab11743cB5dDB4d77F6Ede8a08D3281,\r\n                                     0xf7179c8A47F511E4fcAcA9b6187ED4052cBBB7BB,\r\n                                     0x516c06F2A390E62c2F6cB3C2E38c5c6dF5A17141,\r\n                                     0xE71a86f7FFa3E3aA92e5cA6b6df8B56d8600c7D9]; // 基金会地址，7个\r\n    address[] teamAddresses = [0x3CFdEC9041b04a7eEb07a732B964a5B33f9Ebe1F]; // 团队地址，1个\r\n    address[] miningAddresses = [0x710967a31D79BCFBF053292aB21Bbc559e288407,\r\n                                 0x7bF52Ef4b6e8bEeB24c4Dea4c8e94177739561a0]; // 挖矿地址，2个\r\n    address[] angelAddresses = [0x122399734D64d6c4aa46b85959A3304CA812161f]; // 天使地址，1个\r\n    address[] cornerstoneAddresses = [0x9d35F83982A479F611fa893452f6876972Ec6348,\r\n                                      0x1EAf530897EB1D93fF4373889d9cfd5a1E405D1B,\r\n                                      0x377221D5b7776C1Ba4B8e8d11a32CF9a7469A095,\r\n                                      0xc4381bc9dDFaa8A9954CF2615F80F8Fc145E024F,\r\n                                      0x699a3be17F729F3eB965fBb7d71Db185016B1215,\r\n                                      0x9F793B134E41Bb404142B598E05Ea6ed5477D392,\r\n                                      0xA7FF388DAfD240505f9a1d3ca37c15E058B9D4ea]; // 基石地址，7个\r\n    address[] preIcoAddresses = [0x4d1Ffd49d47552adcaf1729b9C4A2320419b81E1]; // PreICO地址，1个\r\n\r\n    uint256 startTime = 1525708800; // 开始时间戳，2018/5/8 0:0:0 UTC-0\r\n    uint256 endTime = 1528473600; // 结束时间戳，2018/6/9 0:0:0 UTC-0\r\n    uint256 lockEndTime = 1528473600; // 锁定结束时间戳，2018/6/9 0:0:0 UTC-0\r\n    // <====== 正式发布需要修正的参数\r\n\r\n    uint256 public decimals = 18;\r\n    uint256 DECIMALSFACTOR = 10 ** decimals;\r\n    uint256 constant weiDECIMALS = 18; // 以太币的小数位\r\n    uint256 weiFACTOR = 10 ** weiDECIMALS; // 以太币的单位换算值\r\n\r\n    uint256[] foundationAmounts = [5 * (10**8) * DECIMALSFACTOR,\r\n                                   5 * (10**8) * DECIMALSFACTOR,\r\n                                   1 * (10**8) * DECIMALSFACTOR,\r\n                                   1 * (10**8) * DECIMALSFACTOR,\r\n                                   1 * (10**8) * DECIMALSFACTOR,\r\n                                   1 * (10**8) * DECIMALSFACTOR,\r\n                                   1 * (10**8) * DECIMALSFACTOR];\r\n    uint256[] teamAmounts = [15 * (10**8) * DECIMALSFACTOR];\r\n    uint256[] miningAmounts = [15 * (10**8) * DECIMALSFACTOR,\r\n                               15 * (10**8) * DECIMALSFACTOR];\r\n    uint256[] angelAmounts = [5 * (10**8) * DECIMALSFACTOR];\r\n    uint256[] cornerstoneAmounts = [1 * (10**8) * DECIMALSFACTOR,\r\n                                    1 * (10**8) * DECIMALSFACTOR,\r\n                                    1 * (10**8) * DECIMALSFACTOR,\r\n                                    1 * (10**8) * DECIMALSFACTOR,\r\n                                    1 * (10**8) * DECIMALSFACTOR,\r\n                                    2 * (10**8) * DECIMALSFACTOR,\r\n                                    3 * (10**8) * DECIMALSFACTOR];\r\n    uint256[] preIcoAmounts = [5 * (10**8) * DECIMALSFACTOR];\r\n\r\n    address contractOwner;\r\n    uint256 ethRaised = 0; // 收到的ETH总数量，单位Wei\r\n    uint256 donationCount; // 参与的总次数\r\n\r\n    uint256 public totalSupply = 100 * (10**8) * DECIMALSFACTOR; // 总量100亿\r\n    uint256 public availableSupply = totalSupply; // 剩余的代币数量\r\n    uint256 hardCap = 30000 * weiFACTOR; // 硬顶3万ETH\r\n    uint256 minimumDonation = 1 * 10 ** (weiDECIMALS - 1); // 最低参与0.1ETH才能参与\r\n\r\n    bool public finalised = false;\r\n\r\n    // 存储所有用户的代币余额值\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    function BGXToken() public {\r\n        contractOwner = msg.sender;\r\n\r\n        // 采用累加方式，防止有地址重复\r\n        uint i = 0;\r\n        for (i = 0; i < foundationAddresses.length; i++){\r\n            balanceOf[foundationAddresses[i]] += foundationAmounts[i];\r\n            availableSupply -= foundationAmounts[i];\r\n            emit Transfer(address(0), foundationAddresses[i], foundationAmounts[i]);\r\n        }\r\n        for (i = 0; i < teamAddresses.length; i++){\r\n            balanceOf[teamAddresses[i]] += teamAmounts[i];\r\n            availableSupply -= teamAmounts[i];\r\n            emit Transfer(address(0), teamAddresses[i], teamAmounts[i]);\r\n        }\r\n        for (i = 0; i < miningAddresses.length; i++){\r\n            balanceOf[miningAddresses[i]] += miningAmounts[i];\r\n            availableSupply -= miningAmounts[i];\r\n            emit Transfer(address(0), miningAddresses[i], miningAmounts[i]);\r\n        }\r\n        for (i = 0; i < angelAddresses.length; i++){\r\n            balanceOf[angelAddresses[i]] += angelAmounts[i];\r\n            availableSupply -= angelAmounts[i];\r\n            emit Transfer(address(0), angelAddresses[i], angelAmounts[i]);\r\n        }\r\n        for (i = 0; i < cornerstoneAddresses.length; i++){\r\n            balanceOf[cornerstoneAddresses[i]] += cornerstoneAmounts[i];\r\n            availableSupply -= cornerstoneAmounts[i];\r\n            emit Transfer(address(0), cornerstoneAddresses[i], cornerstoneAmounts[i]);\r\n        }\r\n        for (i = 0; i < preIcoAddresses.length; i++){\r\n            balanceOf[preIcoAddresses[i]] += preIcoAmounts[i];\r\n            availableSupply -= preIcoAmounts[i];\r\n            emit Transfer(address(0), preIcoAddresses[i], preIcoAmounts[i]);\r\n        }\r\n\r\n        // 剩下的代币初始都存在ICO的地址上\r\n        balanceOf[icoAddress] = availableSupply;\r\n        emit Transfer(address(0), icoAddress, availableSupply);\r\n    }\r\n\r\n    // fallback方法，如果用户未在转账data中添加数据，默认是走这个方法\r\n    function () payable public {\r\n        require(!finalised);\r\n\r\n        // 判断是否在项目规定的时间范围内\r\n        require(block.timestamp >= startTime);\r\n        require(block.timestamp <= endTime);\r\n\r\n        // 判断硬顶\r\n        require(ethRaised < hardCap);\r\n\r\n        // 达到最低捐赠额度才能继续，否则失败\r\n        require(msg.value >= minimumDonation);\r\n\r\n        uint256 etherValue = msg.value;\r\n\r\n        // 边界条件，未超过部分的ETH正常收纳，超过的部分退回给用户\r\n        if (ethRaised + etherValue > hardCap){\r\n            etherValue = hardCap - ethRaised;\r\n            // 超过的部分退回给用户\r\n            assert(msg.value > etherValue);\r\n            msg.sender.transfer(msg.value - etherValue);\r\n        }\r\n\r\n        // 转移ETH到指定ETH存币地址\r\n        ethFundAddress.transfer(etherValue);\r\n\r\n        donationCount += 1;\r\n        ethRaised += etherValue;\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function _isInWhiteAddresses(address _from) internal view returns (bool success) {\r\n        if (icoAddress == _from){\r\n            return true;\r\n        }\r\n        uint i = 0;\r\n        for (i = 0; i < foundationAddresses.length; i++){\r\n            if (foundationAddresses[i] == _from){\r\n                return true;\r\n            }\r\n        }\r\n        for (i = 0; i < teamAddresses.length; i++){\r\n            if (teamAddresses[i] == _from){\r\n                return true;\r\n            }\r\n        }\r\n        for (i = 0; i < miningAddresses.length; i++){\r\n            if (miningAddresses[i] == _from){\r\n                return true;\r\n            }\r\n        }\r\n        for (i = 0; i < angelAddresses.length; i++){\r\n            if (angelAddresses[i] == _from){\r\n                return true;\r\n            }\r\n        }\r\n        for (i = 0; i < cornerstoneAddresses.length; i++){\r\n            if (cornerstoneAddresses[i] == _from){\r\n                return true;\r\n            }\r\n        }\r\n        for (i = 0; i < preIcoAddresses.length; i++){\r\n            if (preIcoAddresses[i] == _from){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        require(block.timestamp > lockEndTime || _isInWhiteAddresses(msg.sender));\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(block.timestamp > lockEndTime || _isInWhiteAddresses(_from));\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(block.timestamp > lockEndTime);\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Update totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(block.timestamp > lockEndTime);\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    function finalise() public {\r\n        require(msg.sender == contractOwner);\r\n        require(!finalised);\r\n\r\n        finalised = true;\r\n    }\r\n\r\n    function setLockEndTime(uint256 t) public {\r\n        require(msg.sender == contractOwner);\r\n        lockEndTime = t;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setLockEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"BGXToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://014d63e92cf21a082ab178b941422340e50654a061f252e8941f7552e27a7bfc"}]}