{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract KahnAirDrop{\r\n    using SafeMath for uint256;\r\n\t\r\n    struct User{\r\n\t\taddress user_address;\r\n\t\tuint signup_time;\r\n\t\tuint256 reward_amount;\r\n\t\tbool blacklisted;\r\n\t\tuint paid_time;\r\n\t\tuint256 paid_token;\r\n\t\tbool status;\r\n\t}\r\n\t\r\n\t/* @dev Contract creator address */\r\n    address public owner;\r\n\t\r\n    /* @dev Assigned wallet where the remaining unclaim tokens to be return */\r\n    address public wallet;\r\n\t\r\n\t/* @dev The minimum either in wei must received to execute the claim function */\r\n    uint256 public mineth = 0;\r\n\r\n\t/* @dev The minimum either in wei must received to execute the claim function */\r\n    uint256 public minsignupeth = 0;\r\n\r\n\t/* @dev Whether or not the contract is pause (in case of a problem is detected) */\r\n\tbool public paused = false;\r\n\t\r\n\t/* @dev Fixed amount payout for each bounty */\r\n\tuint public maxSignup = 1000;\r\n\t\r\n\t/* @dev allows direct signup  */\r\n\tbool public allowsSignup = true;\r\n\t\r\n\t/* @dev bounty address  */\r\n\taddress[] public bountyaddress;\r\n\t\r\n\t/* @dev admin address  */\r\n\taddress[] public adminaddress;\r\n\t\r\n\t/* @dev staff address  */\r\n\taddress[] public staffaddress;\r\n\t\r\n\t/* @dev block time to start the contract */\r\n\tuint public startTimes;\r\n\t\r\n\t/* @dev block time to end the contract */\r\n\tuint public endTimes;\r\n\t\r\n\t/* @dev Whether or not the contract is blacklisted (in case of a problem is detected) */\r\n\tbool public contractbacklist = false;\r\n\r\n    /* @dev Total Signup count */\r\n    uint public userSignupCount = 0;\r\n\t\r\n    /* @dev Total tokens claimed */\r\n    uint256 public userClaimAmt = 0;\r\n\r\n    /* @dev The token being distribute */\r\n    ERC20 public token;\r\n\r\n\t/* \r\n\t* @dev This set how the bounty reward will be paying out \r\n\t* @param 0 = pay evenly\r\n\t* @param 1 = pay fixed amount\r\n\t* @param 2 = pay various amount\r\n\t*/\r\n\tuint public payStyle = 2;\r\n\t\r\n\t/* \r\n\t* @dev False = Free version, contract creator will received the ether\r\n\t* @dev True = Paid version, client will received the ether \r\n\t*/\r\n\tbool public paidversion = true;\r\n\r\n\t/* @dev Setup the payout method\r\n\t* @param 0 = Enabled Signup Disabled Payout\r\n\t* @param 1 = Disable Signup Disable Payout\r\n\t* @param 2 = Disabled Signup Enable Payout\r\n\t* @param 3 = Enabled Signup Enabled Payout\r\n\t* @param 4 = Disabled Signup Immediate Payout\r\n\t*/\r\n\tuint public payoutNow = 4;\r\n\t\r\n\t/* @dev Fixed amount payout for each bounty */\r\n\tuint256 public fixPayAmt = 0;\r\n\t\r\n    /* @dev To record the different reward amount for each bounty  */\r\n    mapping(address => User) public bounties;\r\n\t\r\n    /* @dev to include the bounty in the list */\r\n\tmapping(address => bool) public signups;\r\n\t\r\n    /* @dev Store bounty address to blacklist */\r\n\tmapping(address => bool) public blacklist;\r\n\t\r\n    /* @dev to check is the claim in the process */\r\n\tmapping(address => bool) public isProcess;\r\n\t\r\n    /* @dev Admin with permission to manage the signed up bounty */\r\n    mapping (address => bool) public admins;\r\n\t\r\n    /* @dev Staff with permission to manage the signed up bounty */\r\n    mapping (address => bool) public staffs;\r\n\t\r\n    /**\r\n    * @dev Event for token distribution logging\r\n    * @param _address who claim the tokens\r\n    * @param _amount amount of tokens to be delivery\r\n    */\r\n    event eTokenClaim(address indexed _address, uint256 _amount);   \r\n    event eReClaimToken(uint256 _taBal, address _wallet, address _address);   \r\n    event eWalletChange(address _wallet, address indexed _address);\r\n    event eUpdatePayout(uint _payStyle, uint _payoutNow, uint256 _fixPayAmt, bool _allowsSignup, address indexed _address); \r\n    event eUpdateStartEndTime(uint _startTimes, uint _endTimes, address indexed _address); \r\n\r\n    /* \r\n    * event eAddAdmin(address _newaddress, address indexed _byaddress);   \r\n    * event eRemoveAdmin(address _newaddress, address indexed _byaddress);   \r\n    * event eAddStaff(address _newaddress, address indexed _byaddress);   \r\n    * event eRemoveStaff(address _newaddress, address indexed _byaddress);   \r\n    * event eAddBounty(address _newaddress, address indexed _byaddress);   \r\n    * event eRemoveBounty(address _address, address indexed _byaddress);   \r\n\t*/\r\n\t\r\n    /**\r\n    * @param _token Token smart contract address\r\n    * @param _wallet ETH address to reclaim unclaim tokens\r\n    */\r\n    function KahnAirDrop(ERC20 _token, uint256 _min_eth, uint256 _minsignupeth, uint _paystyle, address _wallet, uint _starttimes, uint _endtimes, uint _payoutnow, uint256 _fixpayamt, uint _maxsignup, bool _allowssignup, bool _paidversion) public {\r\n        require(_token != address(0));\r\n        token = _token;\r\n        admins[msg.sender] = true;\r\n        adminaddress.push(msg.sender) -1;\r\n        owner = msg.sender;\r\n        mineth = _min_eth;\r\n        minsignupeth = _minsignupeth;\r\n        wallet = _wallet;\r\n        payStyle = _paystyle;\r\n        startTimes = _starttimes;\r\n        endTimes = _endtimes;\r\n        payoutNow = _payoutnow;\r\n        fixPayAmt = _fixpayamt;\r\n        maxSignup = _maxsignup;\r\n        allowsSignup = _allowssignup;\r\n        paidversion = _paidversion;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n       require(msg.sender == owner);\r\n       _;\r\n    }\r\n\t\r\n    modifier onlyAdmin {\r\n        require(admins[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyStaffs {\r\n        require(admins[msg.sender] || staffs[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier ifNotPaused {\r\n       require(!paused);\r\n       _;\r\n    }\r\n\r\n    modifier ifNotStartExp {\r\n       require(now >= startTimes && now <= endTimes);\r\n       _;\r\n    }\r\n\r\n    modifier ifNotBlacklisted {\r\n       require(!contractbacklist);\r\n       _;\r\n    }\r\n\r\n\t/*******************/\r\n\t/* Owner Function **/\r\n\t/*******************/\r\n    /* @dev Update Contract Configuration  */\r\n    function ownerUpdateToken(ERC20 _token, address _wallet) public onlyOwner{\r\n        token = _token;\r\n        wallet = _wallet;\r\n        emit eWalletChange(wallet, msg.sender);\r\n    }\r\n\r\n    /* @dev Update Contract Configuration  */\r\n    function ownerUpdateOthers(uint _maxno, bool _isBacklisted, uint256 _min_eth, uint256 _minsignupeth, bool _paidversion) public onlyOwner{\r\n        maxSignup = _maxno;\r\n        contractbacklist = _isBacklisted;\r\n        mineth = _min_eth;\r\n        minsignupeth = _minsignupeth;\r\n        paidversion = _paidversion;\r\n    }\r\n\r\n\t/* @dev Owner Retrieve Contract Configuration */\r\n    function ownerRetrieveTokenDetails() view public onlyOwner returns(ERC20, address, uint256, uint256, bool){\r\n\t\treturn(token, wallet, token.balanceOf(this), userClaimAmt, contractbacklist);\r\n    }\r\n\r\n\t/* @dev Owner Retrieve Contract Configuration */\r\n    function ownerRetrieveContractConfig2() view public onlyOwner returns(uint256, bool, uint, uint, uint, uint, uint256, uint, bool){\r\n\t\treturn(mineth, paidversion, payStyle, startTimes, endTimes, payoutNow, fixPayAmt, maxSignup, allowsSignup);\r\n    }\r\n\r\n\t/*******************/\r\n\t/* Admin Function **/\r\n\t/*******************/\r\n    /* @dev Add admin to whitelist */\r\n\tfunction addAdminWhitelist(address[] _userlist) public onlyOwner onlyAdmin{\r\n\t\trequire(_userlist.length > 0);\r\n\t\tfor (uint256 i = 0; i < _userlist.length; i++) {\r\n\t\t\taddress baddr = _userlist[i];\r\n\t\t\tif(baddr != address(0)){\r\n\t\t\t\tif(!admins[baddr]){\r\n\t\t\t\t\tadmins[baddr] = true;\r\n\t\t\t\t\tadminaddress.push(baddr) -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n    /* @dev Remove admin from whitelist */\r\n\tfunction removeAdminWhitelist(address[] _userlist) public onlyAdmin{\r\n\t\trequire(_userlist.length > 0);\r\n\t\tfor (uint256 i = 0; i < _userlist.length; i++) {\r\n\t\t\taddress baddr = _userlist[i];\r\n\t\t\tif(baddr != address(0)){\r\n\t\t\t\tif(admins[baddr]){\r\n\t\t\t\t\tadmins[baddr] = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n    /* @dev Add staff to whitelist */\r\n\tfunction addStaffWhitelist(address[] _userlist) public onlyAdmin{\r\n\t\trequire(_userlist.length > 0);\r\n\t\tfor (uint256 i = 0; i < _userlist.length; i++) {\r\n\t\t\taddress baddr = _userlist[i];\r\n\t\t\tif(baddr != address(0)){\r\n\t\t\t\tif(!staffs[baddr]){\r\n\t\t\t\t\tstaffs[baddr] = true;\r\n\t\t\t\t\tstaffaddress.push(baddr) -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n    /* @dev Remove staff from whitelist */\r\n\tfunction removeStaffWhitelist(address[] _userlist) public onlyAdmin{\r\n\t\trequire(_userlist.length > 0);\r\n\t\tfor (uint256 i = 0; i < _userlist.length; i++) {\r\n\t\t\taddress baddr = _userlist[i];\r\n\t\t\tif(baddr != address(0)){\r\n\t\t\t\tif(staffs[baddr]){\r\n\t\t\t\t\tstaffs[baddr] = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/* @dev Allow Admin to reclaim all unclaim tokens back to the specified wallet */\r\n\tfunction reClaimBalance() public onlyAdmin{\r\n\t\tuint256 taBal = token.balanceOf(this);\r\n\t\ttoken.transfer(wallet, taBal);\r\n\t\temit eReClaimToken(taBal, wallet, msg.sender);\r\n\t}\r\n\t\r\n\tfunction adminUpdateWallet(address _wallet) public onlyAdmin{\r\n\t\trequire(_wallet != address(0));\r\n\t\twallet = _wallet;\r\n\t\temit eWalletChange(wallet, msg.sender);\r\n\t}\r\n\r\n\tfunction adminUpdateStartEndTime(uint _startTimes, uint _endTimes) public onlyAdmin{\r\n\t\trequire(_startTimes > 0);\r\n\t\trequire(_endTimes > 0);\r\n\t\tstartTimes = _startTimes;\r\n\t\tendTimes = _endTimes;\r\n\t\temit eUpdateStartEndTime(startTimes, endTimes, msg.sender);\r\n\t}\r\n\r\n    /* @dev Update Contract Configuration  */\r\n    function adminUpdMinSign(uint256 _min_eth, uint256 _minsignupeth) public onlyAdmin{\r\n       if(paidversion){\r\n\t\t\tmineth = _min_eth;\r\n\t\t\tminsignupeth = _minsignupeth;\r\n\t   } \r\n    }\r\n\r\n\tfunction adminUpdatePayout(uint _payStyle, uint _payoutNow, uint256 _fixPayAmt, bool _allowsSignup) public onlyAdmin{\r\n\t\tpayStyle = _payStyle;\r\n\t\tpayoutNow = _payoutNow;\r\n\t\tfixPayAmt = _fixPayAmt;\r\n\t\tallowsSignup = _allowsSignup;\r\n\t\temit eUpdatePayout(payStyle, payoutNow, fixPayAmt, allowsSignup, msg.sender);\r\n\t}\r\n\r\n\t/***************************/\r\n\t/* Admin & Staff Function **/\r\n\t/***************************/\r\n\t/* @dev Admin/Staffs Update Contract Configuration */\r\n\r\n    /* @dev Add user to whitelist */\r\n    function signupUserWhitelist(address[] _userlist, uint256[] _amount) public onlyStaffs{\r\n    \trequire(_userlist.length > 0);\r\n\t\trequire(_amount.length > 0);\r\n    \tfor (uint256 i = 0; i < _userlist.length; i++) {\r\n    \t\taddress baddr = _userlist[i];\r\n    \t\tuint256 bval = _amount[i];\r\n    \t\tif(baddr != address(0) && userSignupCount <= maxSignup){\r\n    \t\t\tif(!bounties[baddr].blacklisted && bounties[baddr].user_address != baddr){\r\n\t\t\t\t\tsignups[baddr] = true;\r\n\t\t\t\t\tbountyaddress.push(baddr) -1;\r\n\t\t\t\t\tuserSignupCount++;\r\n\t\t\t\t\tif(payoutNow==4){\r\n\t\t\t\t\t\tbounties[baddr] = User(baddr,now,0,false,now,bval,true);\r\n\t\t\t\t\t\ttoken.transfer(baddr, bval);\r\n\t\t\t\t\t\tuserClaimAmt = userClaimAmt.add(bval);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tbounties[baddr] = User(baddr,now,bval,false,0,0,true);\r\n\t\t\t\t\t}\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n    }\r\n\t\r\n    /* @dev Remove user from whitelist */\r\n    function removeUserWhitelist(address[] _userlist) public onlyStaffs{\r\n\t\trequire(_userlist.length > 0);\r\n\t\tfor (uint256 i = 0; i < _userlist.length; i++) {\r\n\t\t\taddress baddr = _userlist[i];\r\n\t\t\tif(baddr != address(0) && bounties[baddr].user_address == baddr){\r\n\t\t\t\tbounties[baddr].status = false;\r\n            \tsignups[baddr] = false;\r\n            \tuserSignupCount--;\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\t\r\n\tfunction updUserBlackList(address[] _addlist, address[] _removelist) public onlyStaffs{\r\n\t\tif(_addlist.length > 0){\r\n\t\t\tfor (uint256 i = 0; i < _addlist.length; i++) {\r\n\t\t\t\taddress baddr = _addlist[i];\r\n\t\t\t\tif(baddr != address(0) && !bounties[baddr].blacklisted){\r\n\t\t\t\t\tbounties[baddr].blacklisted = true;\r\n\t\t\t\t\tblacklist[baddr] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(_removelist.length > 0){ removeUserFromBlackList(_removelist); }\r\n\t}\r\n\t\r\n\tfunction removeUserFromBlackList(address[] _userlist) internal{\r\n\t\trequire(_userlist.length > 0);\r\n\t\tfor (uint256 i = 0; i < _userlist.length; i++) {\r\n\t\t\taddress baddr = _userlist[i];\r\n\t\t\tif(baddr != address(0) && bounties[baddr].blacklisted){\r\n\t\t\t\tbounties[baddr].blacklisted = false;\r\n\t\t\t\tblacklist[baddr] = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n    /* @dev Update Multiple Users Reward Amount */\r\n    function updateMultipleUsersReward(address[] _userlist, uint256[] _amount) public onlyStaffs{\r\n\t\trequire(_userlist.length > 0);\r\n\t\trequire(_amount.length > 0);\r\n\t\tfor (uint256 i = 0; i < _userlist.length; i++) {\r\n\t\t\taddress baddr = _userlist[i];\r\n\t\t\tuint256 bval = _amount[i];\r\n\t\t\tif(baddr != address(0)){\r\n\t\t\t\tif(bounties[baddr].user_address == baddr){\r\n\t\t\t\t\tbounties[baddr].reward_amount = bval;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(userSignupCount <= maxSignup){\r\n\t\t\t\t\t    bounties[baddr] = User(baddr,now,bval,false,0,0,true);\r\n\t\t\t\t\t    signups[baddr] = true;\r\n\t\t\t\t\t\tbountyaddress.push(baddr) -1;\r\n\t\t\t\t\t    userSignupCount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\t\r\n\t/***************************/\r\n\t/* Query Display Function **/\r\n\t/***************************/\r\n    function adminRetrieveContractConfig() view public onlyStaffs returns(uint, uint, uint256, uint, bool, bool){\r\n\t\treturn(payStyle, payoutNow, fixPayAmt, maxSignup, allowsSignup, paidversion);\r\n    }\r\n\r\n    function adminRetrieveContractConfig2() view public onlyStaffs returns(uint256, uint256, address, uint, uint, uint){\r\n    \treturn(mineth, minsignupeth, wallet, startTimes, endTimes, userSignupCount);\r\n    }\r\n\r\n    function adminRetrieveContractConfig3() view public onlyStaffs returns(ERC20, uint256, uint256, uint, uint){\r\n    \tuint256 taBal = token.balanceOf(this);\r\n\t\treturn(token, taBal,userClaimAmt, now, block.number);\r\n    }\r\n\r\n\t/* @dev Check is the address is in Admin list */\r\n\tfunction chkAdmin(address _address) view public onlyAdmin returns(bool){\r\n\t\treturn admins[_address];\r\n\t}\r\n\t\r\n\t/* @dev Check is the address is in Staff list */\r\n\tfunction chkStaff(address _address) view public onlyAdmin returns(bool){\r\n\t\treturn staffs[_address];\r\n\t}\r\n\r\n\t/* @dev Return admin addresses list */\r\n\tfunction getAllAdmin() view public onlyAdmin returns(address[]){\r\n\t\treturn adminaddress;\r\n\t}\r\n\r\n\t/* @dev Return staff addresses list */\r\n\tfunction getAllStaff() view public onlyAdmin returns(address[]){\r\n\t\treturn staffaddress;\r\n\t}\r\n\r\n\t/* @dev Return list of bounty addresses */\r\n\tfunction getBountyAddress() view public onlyStaffs returns(address[]){\r\n\t\treturn bountyaddress;\r\n\t}\r\n\t\r\n\t/*  \r\n\t* @dev Check is the user is in Signed up list \r\n\t* @dev bool = address is in the signup mapping list\r\n\t* @dev uint256 = the given bounty address reward entitlement amount\r\n\t*/\r\n\tfunction chkUserDetails(address _address) view public onlyStaffs returns(address,uint,uint256,bool,uint,uint256,bool){\r\n\t\trequire(_address != address(0));\r\n\t\treturn(bounties[_address].user_address, bounties[_address].signup_time, bounties[_address].reward_amount, bounties[_address].blacklisted, bounties[_address].paid_time, bounties[_address].paid_token, bounties[_address].status);\r\n\t}\r\n\t\r\n\t/***************************/\r\n\t/* Main Contract Function **/\r\n\t/***************************/\r\n\t/* @dev Bounty send in either to execute the claim */\r\n\tfunction () external payable ifNotStartExp ifNotPaused ifNotBlacklisted{\r\n\t\trequire(!blacklist[msg.sender]);\r\n\t\tif(payoutNow == 0){\r\n\t\t\trequire(allowsSignup);\r\n\t\t\tsingleUserSignUp(msg.sender);\r\n\t\t}else if(payoutNow == 1){\r\n\t\t\trequire(allowsSignup);\r\n\t\t}else if(payoutNow == 2){\r\n\t\t\tclaimTokens(msg.sender);\r\n\t\t}else if(payoutNow == 3){\r\n\t\t\tclaimImmediateTokens(msg.sender);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction singleUserSignUp(address _address) internal ifNotStartExp ifNotPaused ifNotBlacklisted {\r\n\t\tif(userSignupCount <= maxSignup){\r\n\t\t\tif(!signups[_address] && bounties[_address].user_address != _address && msg.value >= minsignupeth){\r\n\t\t\t\tif(payoutNow != 1 || payoutNow != 2){\r\n\t\t\t\t\tsignups[_address] = true;\r\n\t\t\t\t\tuint256 temrew = 0;\r\n\t\t\t\t\tif(payStyle == 1){ temrew = fixPayAmt; }\r\n\t\t\t\t\tbounties[_address] = User(_address,now,temrew,false,0,0,true);\r\n\t\t\t\t\tsignups[_address] = true;\r\n\t\t\t\t\tbountyaddress.push(_address) -1;\r\n\t\t\t\t\tuserSignupCount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tforwardWei();\r\n\t}\r\n\t\r\n    /* @dev Bounty claim their reward tokens by sending zero ETH to this smart contract */\r\n    function claimTokens(address _beneficiary) public payable ifNotStartExp ifNotPaused ifNotBlacklisted {\r\n\t   require(msg.value >= mineth);\r\n\t   require(_beneficiary != address(0));\r\n\t   require(!blacklist[msg.sender]);\r\n\t   \r\n\t   /* @dev Check to ensure the address is not in processing to avoid double claim */\r\n       require(!isProcess[_beneficiary]);\r\n\t   \r\n\t   /* @dev Check to ensure the address is signed up to the airdrop */\r\n       require(signups[_beneficiary]);\r\n\t   \r\n\t   /* @dev Get the reward token for the given address */\r\n\t   uint256 rewardAmount = getReward(_beneficiary);\r\n\t   \r\n\t   /* @dev if the baounty reward amount is less than zero, quit the prorcess */\r\n\t   require(rewardAmount > 0);\r\n\t   \r\n\t   /* @dev get the available balance for airdrop */\r\n\t   uint256 taBal = token.balanceOf(this);\r\n\t   \r\n\t   /* @dev Check is the balance enough to pay for the claim */\r\n\t   require(rewardAmount <= taBal);\r\n\t   \r\n\t   /* @dev Set the address to processing */\r\n\t   isProcess[_beneficiary] = true;\r\n\t   \r\n\t   /* @dev Transer the token to the bounty */\r\n\t   token.transfer(_beneficiary, rewardAmount);\r\n\t   \r\n\t   /* @dev Set the bounty reward entitlement to zero */\r\n\t   bounties[_beneficiary].reward_amount = 0;\r\n\t   bounties[_beneficiary].status = true;\r\n\t   bounties[_beneficiary].paid_time = now;\r\n\t   \r\n\t   /* @dev Set the In Process to false to mark the process is completed */\r\n\t   isProcess[_beneficiary] = false;\r\n\t   \r\n\t   /* @dev Add the claim tokens to total claimed tokens */\r\n\t   userClaimAmt = userClaimAmt.add(rewardAmount);\r\n\t   \r\n\t   /* @dev Transfer the ether */\r\n\t   forwardWei();\r\n\t   \r\n\t   emit eTokenClaim(_beneficiary, rewardAmount);\r\n    }\r\n\t\r\n\t\r\n    /* @dev Bounty claim their reward tokens by sending zero ETH to this smart contract */\r\n    function claimImmediateTokens(address _beneficiary) public payable ifNotStartExp ifNotPaused ifNotBlacklisted {\r\n\t   require(msg.value >= mineth);\r\n\t   require(_beneficiary != address(0));\r\n\t   require(!blacklist[msg.sender]);\r\n\t   require(userSignupCount <= maxSignup);\r\n\t   require(fixPayAmt > 0);\r\n\t   uint256 taBal = token.balanceOf(this);\r\n\t   require(taBal > 0);\r\n\t   require(fixPayAmt <= taBal);\r\n       require(!isProcess[_beneficiary]);\r\n\t   isProcess[_beneficiary] = true;\r\n\t   signups[_beneficiary] = true;\r\n\t   bounties[_beneficiary] = User(_beneficiary,now,0,false,now,fixPayAmt,true);\r\n\t   bountyaddress.push(_beneficiary) -1;\r\n\t   userSignupCount++;\r\n\t   token.transfer(_beneficiary, fixPayAmt);\r\n\t   userClaimAmt = userClaimAmt.add(fixPayAmt);\r\n\t   forwardWei();\r\n\t   emit eTokenClaim(_beneficiary, fixPayAmt);\r\n    }\r\n\r\n    /* @dev Get Reward function based on the payout style */\r\n\tfunction getReward(address _address) internal constant returns(uint256){\r\n\t\tuint256 rtnVal = 0;\r\n\t\tif(payStyle == 0){\r\n\t\t\t/* Reward divided evenly by the total number of signed up bounty */\r\n\t\t\tuint256 taBal = token.balanceOf(this);\r\n\t\t\trtnVal = taBal.div(userSignupCount);\r\n\t\t}else if(payStyle == 1){\r\n\t\t\t// Reward for each bounty is based on Fixed amount\r\n\t\t\trtnVal = fixPayAmt;\r\n\t\t}else if(payStyle == 2){\r\n\t\t\t// Reward for each bounty is based on the amount set by the Admin when adding the bounty\r\n\t\t\trtnVal = bounties[_address].reward_amount;\r\n\t\t}\r\n\t\treturn rtnVal;\r\n\t}\r\n\t\r\n\t/* @dev Function for who will receive the paid ether */\r\n\tfunction forwardWei() internal {\r\n\t\tif(!paidversion){\r\n\t\t\t/* if paidversion is false, this is a free version, client agreed to contract creator to received the either */\r\n\t\t\t/* in exchnage to use the service for free */\r\n\t\t\tif(msg.value > 0)\r\n\t\t\t\towner.transfer(msg.value);\r\n\t\t}else{\r\n\t\t\t/* if paidversion is true, this is a paid version, received ether pay directly to client wallet */\r\n\t\t\tif(msg.value > 0)\r\n\t\t\t\twallet.transfer(msg.value);\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxSignup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllStaff\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payStyle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxno\",\"type\":\"uint256\"},{\"name\":\"_isBacklisted\",\"type\":\"bool\"},{\"name\":\"_min_eth\",\"type\":\"uint256\"},{\"name\":\"_minsignupeth\",\"type\":\"uint256\"},{\"name\":\"_paidversion\",\"type\":\"bool\"}],\"name\":\"ownerUpdateOthers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userSignupCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminRetrieveContractConfig3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTimes\",\"type\":\"uint256\"},{\"name\":\"_endTimes\",\"type\":\"uint256\"}],\"name\":\"adminUpdateStartEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"signups\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userlist\",\"type\":\"address[]\"}],\"name\":\"removeAdminWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isProcess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerRetrieveContractConfig2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"staffaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"adminUpdateWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bountyaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminRetrieveContractConfig\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payStyle\",\"type\":\"uint256\"},{\"name\":\"_payoutNow\",\"type\":\"uint256\"},{\"name\":\"_fixPayAmt\",\"type\":\"uint256\"},{\"name\":\"_allowsSignup\",\"type\":\"bool\"}],\"name\":\"adminUpdatePayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userlist\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"signupUserWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userClaimAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowsSignup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minsignupeth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_min_eth\",\"type\":\"uint256\"},{\"name\":\"_minsignupeth\",\"type\":\"uint256\"}],\"name\":\"adminUpdMinSign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userlist\",\"type\":\"address[]\"}],\"name\":\"removeStaffWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fixPayAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBountyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userlist\",\"type\":\"address[]\"}],\"name\":\"addStaffWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"ownerUpdateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addlist\",\"type\":\"address[]\"},{\"name\":\"_removelist\",\"type\":\"address[]\"}],\"name\":\"updUserBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"chkUserDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userlist\",\"type\":\"address[]\"}],\"name\":\"removeUserWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractbacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mineth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userlist\",\"type\":\"address[]\"}],\"name\":\"addAdminWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"staffs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userlist\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"updateMultipleUsersReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reClaimBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bounties\",\"outputs\":[{\"name\":\"user_address\",\"type\":\"address\"},{\"name\":\"signup_time\",\"type\":\"uint256\"},{\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"name\":\"blacklisted\",\"type\":\"bool\"},{\"name\":\"paid_time\",\"type\":\"uint256\"},{\"name\":\"paid_token\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerRetrieveTokenDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"chkAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"chkStaff\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paidversion\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"claimImmediateTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminRetrieveContractConfig2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_min_eth\",\"type\":\"uint256\"},{\"name\":\"_minsignupeth\",\"type\":\"uint256\"},{\"name\":\"_paystyle\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_starttimes\",\"type\":\"uint256\"},{\"name\":\"_endtimes\",\"type\":\"uint256\"},{\"name\":\"_payoutnow\",\"type\":\"uint256\"},{\"name\":\"_fixpayamt\",\"type\":\"uint256\"},{\"name\":\"_maxsignup\",\"type\":\"uint256\"},{\"name\":\"_allowssignup\",\"type\":\"bool\"},{\"name\":\"_paidversion\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"eTokenClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_taBal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"eReClaimToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"eWalletChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_payStyle\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_payoutNow\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_fixPayAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_allowsSignup\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"eUpdatePayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_startTimes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTimes\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"eUpdateStartEndTime\",\"type\":\"event\"}]","ContractName":"KahnAirDrop","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f89d6765321a2b967aca57b87303904eea973fac0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007cb23e13238bb9d0164eee27b22bfdfc5a1753ce000000000000000000000000000000000000000000000000000000005b1ab9b0000000000000000000000000000000000000000000000000000000005cfafa8000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001869f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://7288b2d8a89d8586d9624700fd2f629fb5c2296e498a4b805ff83b5855bb74ba"}]}