{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n// The GNU General Public License v3\r\n// © Musqogees Tech 2018, Redenom ™\r\n\r\n    \r\n// -------------------- SAFE MATH ----------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Basic ERC20 functions\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract manages Owner and Admin rights.\r\n// Owner is Admin by default and can set other Admin\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    address internal admin;\r\n\r\n    // modifier for Owner functions\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    // modifier for Admin functions\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    event AdminChanged(address indexed _from, address indexed _to);\r\n\r\n    // Constructor\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function setAdmin(address newAdmin) public onlyOwner{\r\n        emit AdminChanged(admin, newAdmin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function showAdmin() public view onlyAdmin returns(address _admin){\r\n        _admin = admin;\r\n        return _admin;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\ncontract Redenom is ERC20Interface, Owned{\r\n    using SafeMath for uint;\r\n    \r\n    //ERC20 params\r\n    string      public name; // ERC20 \r\n    string      public symbol; // ERC20 \r\n    uint        private _totalSupply; // ERC20\r\n    uint        public decimals = 8; // ERC20 \r\n\r\n\r\n    //Redenomination\r\n    uint public round = 1; \r\n    uint public epoch = 1; \r\n\r\n    bool public frozen = false;\r\n\r\n    //dec - sum of every exponent\r\n    uint[8] private dec = [0,0,0,0,0,0,0,0];\r\n    //mul - internal used array for splitting numbers according to round     \r\n    uint[9] private mul = [1,10,100,1000,10000,100000,1000000,10000000,100000000];\r\n    //weight - internal used array (weights of every digit)    \r\n    uint[9] private weight = [uint(0),0,0,0,0,5,10,30,55];\r\n    //current_toadd - After redenominate() it holds an amount to add on each digit.\r\n    uint[9] private current_toadd = [uint(0),0,0,0,0,0,0,0,0];\r\n   \r\n\r\n    //Funds\r\n    uint public total_fund; // All funds for 100 epochs 100 000 000 NOM\r\n    uint public epoch_fund; // All funds for current epoch 100 000 NOM\r\n    uint public team_fund; // Team Fund 10% of all funds paid\r\n    uint public redenom_dao_fund; // DAO Fund 30% of all funds paid\r\n\r\n    struct Account {\r\n        uint balance;\r\n        uint lastRound; // Last round dividens paid\r\n        uint lastEpoch; // Last round dividens paid\r\n        uint lastVotedBallotId; // Last ballot user voted\r\n        uint bitmask;\r\n            // 2 - got 0.55... for phone verif.\r\n            // 4 - got 1 for KYC\r\n            // 1024 - banned\r\n            //\r\n            // [2] [4] 8 16 32 64 128 256 512 [1024] ... - free to use\r\n    }\r\n    \r\n    mapping(address=>Account) accounts; \r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    //Redenom special events\r\n    event Redenomination(uint indexed round);\r\n    event Epoch(uint indexed epoch);\r\n    event VotingOn(uint indexed _ballotId);\r\n    event VotingOff(uint indexed winner);\r\n    event Vote(address indexed voter, uint indexed propId, uint voterBalance, uint indexed curentBallotId);\r\n\r\n    function Redenom() public {\r\n        symbol = \"NOMT\";\r\n        name = \"Redenom_test\";\r\n        _totalSupply = 0; // total NOM's in the game \r\n\r\n        total_fund = 10000000 * 10**decimals; // 100 000 00.00000000, 1Mt\r\n        epoch_fund = 100000 * 10**decimals; // 100 000.00000000, 100 Kt\r\n        total_fund = total_fund.sub(epoch_fund); // Taking 100 Kt from total to epoch_fund\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    // New epoch can be started if:\r\n    // - Current round is 9\r\n    // - Curen epoch < 10\r\n    function StartNewEpoch() public onlyAdmin returns(bool succ){\r\n        require(frozen == false); \r\n        require(round == 9);\r\n        require(epoch < 100);\r\n\r\n        dec = [0,0,0,0,0,0,0,0];  \r\n        round = 1;\r\n        epoch++;\r\n\r\n        epoch_fund = 100000 * 10**decimals; // 100 000.00000000, 100 Kt\r\n        total_fund = total_fund.sub(epoch_fund); // Taking 100 Kt from total to epoch fund\r\n\r\n\r\n        emit Epoch(epoch);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n    ///////////////////////////////////////////B A L L O T////////////////////////////////////////////\r\n\r\n    //Is voting active?\r\n    bool public votingActive = false;\r\n    uint public curentBallotId = 0;\r\n    uint public curentWinner;\r\n\r\n    // Voter requirements:\r\n    modifier onlyVoter {\r\n        require(votingActive == true);\r\n        require(bitmask_check(msg.sender, 4) == true); //passed KYC\r\n        require(bitmask_check(msg.sender, 1024) == false); // banned == false\r\n        require((accounts[msg.sender].lastVotedBallotId < curentBallotId)); \r\n        _;\r\n    }\r\n\r\n    // This is a type for a single Project.\r\n    struct Project {\r\n        uint id;   // Project id\r\n        uint votesWeight; // total weight\r\n        bool active; //active status.\r\n    }\r\n    Project[] public projects;\r\n\r\n    struct Winner {\r\n        uint id;\r\n        uint projId;\r\n    }\r\n    Winner[] public winners;\r\n\r\n\r\n    function addWinner(uint projId) internal {\r\n        winners.push(Winner({\r\n            id: curentBallotId,\r\n            projId: projId\r\n        }));\r\n    }\r\n    function findWinner(uint _ballotId) public constant returns (uint winner){\r\n        for (uint p = 0; p < winners.length; p++) {\r\n            if (winners[p].id == _ballotId) {\r\n                return winners[p].projId;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // Add prop. with id: _id\r\n    function addProject(uint _id) public onlyAdmin {\r\n        require(votingActive == true);\r\n        projects.push(Project({\r\n            id: _id,\r\n            votesWeight: 0,\r\n            active: true\r\n        }));\r\n    }\r\n\r\n    // Turns project ON and OFF\r\n    function swapProject(uint _id) public onlyAdmin {\r\n        for (uint p = 0; p < projects.length; p++){\r\n            if(projects[p].id == _id){\r\n                if(projects[p].active == true){\r\n                    projects[p].active = false;\r\n                }else{\r\n                    projects[p].active = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Returns proj. weight\r\n    function projectWeight(uint _id) public constant returns(uint PW){\r\n        for (uint p = 0; p < projects.length; p++){\r\n            if(projects[p].id == _id){\r\n                return projects[p].votesWeight;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Returns proj. status\r\n    function projectActive(uint _id) public constant returns(bool PA){\r\n        for (uint p = 0; p < projects.length; p++){\r\n            if(projects[p].id == _id){\r\n                return projects[p].active;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Vote for proj. using id: _id\r\n    function vote(uint _id) public onlyVoter returns(bool success){\r\n        require(frozen == false);\r\n\r\n        for (uint p = 0; p < projects.length; p++){\r\n            if(projects[p].id == _id && projects[p].active == true){\r\n                projects[p].votesWeight += sqrt(accounts[msg.sender].balance);\r\n                accounts[msg.sender].lastVotedBallotId = curentBallotId;\r\n            }\r\n        }\r\n        emit Vote(msg.sender, _id, accounts[msg.sender].balance, curentBallotId);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Shows currently winning proj \r\n    function winningProject() public constant returns (uint _winningProject){\r\n        uint winningVoteWeight = 0;\r\n        for (uint p = 0; p < projects.length; p++) {\r\n            if (projects[p].votesWeight > winningVoteWeight && projects[p].active == true) {\r\n                winningVoteWeight = projects[p].votesWeight;\r\n                _winningProject = projects[p].id;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Activates voting\r\n    // Clears projects\r\n    function enableVoting() public onlyAdmin returns(uint ballotId){ \r\n        require(votingActive == false);\r\n        require(frozen == false);\r\n\r\n        curentBallotId++;\r\n        votingActive = true;\r\n\r\n        delete projects;\r\n\r\n        emit VotingOn(curentBallotId);\r\n        return curentBallotId;\r\n    }\r\n\r\n    // Deactivates voting\r\n    function disableVoting() public onlyAdmin returns(uint winner){\r\n        require(votingActive == true);\r\n        require(frozen == false);\r\n        votingActive = false;\r\n\r\n        curentWinner = winningProject();\r\n        addWinner(curentWinner);\r\n        \r\n        emit VotingOff(curentWinner);\r\n        return curentWinner;\r\n    }\r\n\r\n\r\n    // sqrt root func\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n    ///////////////////////////////////////////B A L L O T////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // NOM token emission functions\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Pays 1.00000000 from epoch_fund to KYC-passed user\r\n    // Uses payout(), bitmask_check(), bitmask_add()\r\n    // adds 4 to bitmask\r\n    function pay1(address to) public onlyAdmin returns(bool success){\r\n        require(bitmask_check(to, 4) == false);\r\n        uint new_amount = 100000000;\r\n        payout(to,new_amount);\r\n        bitmask_add(to, 4);\r\n        return true;\r\n    }\r\n\r\n    // Pays .555666XX from epoch_fund to user approved phone;\r\n    // Uses payout(), bitmask_check(), bitmask_add()\r\n    // adds 2 to bitmask\r\n    function pay055(address to) public onlyAdmin returns(bool success){\r\n        require(bitmask_check(to, 2) == false);\r\n        uint new_amount = 55566600 + (block.timestamp%100);       \r\n        payout(to,new_amount);\r\n        bitmask_add(to, 2);\r\n        return true;\r\n    }\r\n\r\n    // Pays .555666XX from epoch_fund to KYC user in new epoch;\r\n    // Uses payout(), bitmask_check(), bitmask_add()\r\n    // adds 2 to bitmask\r\n    function pay055loyal(address to) public onlyAdmin returns(bool success){\r\n        require(epoch > 1);\r\n        require(bitmask_check(to, 4) == true);\r\n        uint new_amount = 55566600 + (block.timestamp%100);       \r\n        payout(to,new_amount);\r\n        return true;\r\n    }\r\n\r\n    // Pays random number from epoch_fund\r\n    // Uses payout()\r\n    function payCustom(address to, uint amount) public onlyOwner returns(bool success){\r\n        payout(to,amount);\r\n        return true;\r\n    }\r\n\r\n    // Pays [amount] of money to [to] account from epoch_fund\r\n    // Counts amount +30% +10%\r\n    // Updating _totalSupply\r\n    // Pays to balance and 2 funds\r\n    // Refreshes dec[]\r\n    // Emits event\r\n    function payout(address to, uint amount) private returns (bool success){\r\n        require(to != address(0));\r\n        require(amount>=current_mul());\r\n        require(bitmask_check(to, 1024) == false); // banned == false\r\n        require(frozen == false); \r\n        \r\n        //Update account balance\r\n        updateAccount(to);\r\n        //fix amount\r\n        uint fixedAmount = fix_amount(amount);\r\n\r\n        renewDec( accounts[to].balance, accounts[to].balance.add(fixedAmount) );\r\n\r\n        uint team_part = (fixedAmount/100)*16;\r\n        uint dao_part = (fixedAmount/10)*6;\r\n        uint total = fixedAmount.add(team_part).add(dao_part);\r\n\r\n        epoch_fund = epoch_fund.sub(total);\r\n        team_fund = team_fund.add(team_part);\r\n        redenom_dao_fund = redenom_dao_fund.add(dao_part);\r\n        accounts[to].balance = accounts[to].balance.add(fixedAmount);\r\n        _totalSupply = _totalSupply.add(total);\r\n\r\n        emit Transfer(address(0), to, fixedAmount);\r\n        return true;\r\n    }\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Withdraw amount from team_fund to given address\r\n    function withdraw_team_fund(address to, uint amount) public onlyOwner returns(bool success){\r\n        require(amount <= team_fund);\r\n        accounts[to].balance = accounts[to].balance.add(amount);\r\n        team_fund = team_fund.sub(amount);\r\n        return true;\r\n    }\r\n    // Withdraw amount from redenom_dao_fund to given address\r\n    function withdraw_dao_fund(address to, uint amount) public onlyOwner returns(bool success){\r\n        require(amount <= redenom_dao_fund);\r\n        accounts[to].balance = accounts[to].balance.add(amount);\r\n        redenom_dao_fund = redenom_dao_fund.sub(amount);\r\n        return true;\r\n    }\r\n\r\n    function freeze_contract() public onlyOwner returns(bool success){\r\n        require(frozen == false);\r\n        frozen = true;\r\n        return true;\r\n    }\r\n    function unfreeze_contract() public onlyOwner returns(bool success){\r\n        require(frozen == true);\r\n        frozen = false;\r\n        return true;\r\n    }\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    // Run this on every change of user balance\r\n    // Refreshes dec[] array\r\n    // Takes initial and new ammount\r\n    // while transaction must be called for each acc.\r\n    function renewDec(uint initSum, uint newSum) internal returns(bool success){\r\n\r\n        if(round < 9){\r\n            uint tempInitSum = initSum; \r\n            uint tempNewSum = newSum; \r\n            uint cnt = 1;\r\n\r\n            while( (tempNewSum > 0 || tempInitSum > 0) && cnt <= decimals ){\r\n\r\n                uint lastInitSum = tempInitSum%10; // 0.0000000 (0)\r\n                tempInitSum = tempInitSum/10; // (0.0000000) 0\r\n\r\n                uint lastNewSum = tempNewSum%10; // 1.5556664 (5)\r\n                tempNewSum = tempNewSum/10; // (1.5556664) 5\r\n\r\n                if(cnt >= round){\r\n                    if(lastNewSum >= lastInitSum){\r\n                        // If new is bigger\r\n                        dec[decimals-cnt] = dec[decimals-cnt].add(lastNewSum - lastInitSum);\r\n                    }else{\r\n                        // If new is smaller\r\n                        dec[decimals-cnt] = dec[decimals-cnt].sub(lastInitSum - lastNewSum);\r\n                    }\r\n                }\r\n\r\n                cnt = cnt+1;\r\n            }\r\n        }//if(round < 9){\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    ////////////////////////////////////////// BITMASK /////////////////////////////////////////////////////\r\n    // Adding bit to bitmask\r\n    // checks if already set\r\n    function bitmask_add(address user, uint _bit) internal returns(bool success){ //todo privat?\r\n        require(bitmask_check(user, _bit) == false);\r\n        accounts[user].bitmask = accounts[user].bitmask.add(_bit);\r\n        return true;\r\n    }\r\n    // Removes bit from bitmask\r\n    // checks if already set\r\n    function bitmask_rm(address user, uint _bit) internal returns(bool success){\r\n        require(bitmask_check(user, _bit) == true);\r\n        accounts[user].bitmask = accounts[user].bitmask.sub(_bit);\r\n        return true;\r\n    }\r\n    // Checks whether some bit is present in BM\r\n    function bitmask_check(address user, uint _bit) public view returns (bool status){\r\n        bool flag;\r\n        accounts[user].bitmask & _bit == 0 ? flag = false : flag = true;\r\n        return flag;\r\n    }\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function ban_user(address user) public onlyAdmin returns(bool success){\r\n        bitmask_add(user, 1024);\r\n        return true;\r\n    }\r\n    function unban_user(address user) public onlyAdmin returns(bool success){\r\n        bitmask_rm(user, 1024);\r\n        return true;\r\n    }\r\n    function is_banned(address user) public view onlyAdmin returns (bool result){\r\n        return bitmask_check(user, 1024);\r\n    }\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n    //Redenominates \r\n    function redenominate() public onlyAdmin returns(uint current_round){\r\n        require(frozen == false); \r\n        require(round<9); // Round must be < 9\r\n\r\n        // Deleting funds rest from TS\r\n        _totalSupply = _totalSupply.sub( team_fund%mul[round] ).sub( redenom_dao_fund%mul[round] ).sub( dec[8-round]*mul[round-1] );\r\n\r\n        // Redenominating 3 vars: _totalSupply team_fund redenom_dao_fund\r\n        _totalSupply = ( _totalSupply / mul[round] ) * mul[round];\r\n        team_fund = ( team_fund / mul[round] ) * mul[round]; // Redenominates team_fund\r\n        redenom_dao_fund = ( redenom_dao_fund / mul[round] ) * mul[round]; // Redenominates redenom_dao_fund\r\n\r\n        if(round>1){\r\n            // decimals burned in last round and not distributed\r\n            uint superold = dec[(8-round)+1]; \r\n\r\n            // Returning them to epoch_fund\r\n            epoch_fund = epoch_fund.add(superold * mul[round-2]);\r\n            dec[(8-round)+1] = 0;\r\n        }\r\n\r\n        \r\n        if(round<8){ // if round between 1 and 7 \r\n\r\n            uint unclimed = dec[8-round]; // total sum of burned decimal\r\n            //[23,32,43,34,34,54,34, ->46<- ]\r\n            uint total_current = dec[8-1-round]; // total sum of last active decimal\r\n            //[23,32,43,34,34,54, ->34<-, 46]\r\n\r\n            // security check\r\n            if(total_current==0){\r\n                current_toadd = [0,0,0,0,0,0,0,0,0]; \r\n                round++;\r\n                emit Redenomination(round);\r\n                return round;\r\n            }\r\n\r\n            // Counting amounts to add on every digit\r\n            uint[9] memory numbers  =[uint(1),2,3,4,5,6,7,8,9]; // \r\n            uint[9] memory ke9  =[uint(0),0,0,0,0,0,0,0,0]; // \r\n            uint[9] memory k2e9  =[uint(0),0,0,0,0,0,0,0,0]; // \r\n\r\n            uint k05summ = 0;\r\n\r\n                for (uint k = 0; k < ke9.length; k++) {\r\n                     \r\n                    ke9[k] = numbers[k]*1e9/total_current;\r\n                    if(k<5) k05summ += ke9[k];\r\n                }             \r\n                for (uint k2 = 5; k2 < k2e9.length; k2++) {\r\n                    k2e9[k2] = uint(ke9[k2])+uint(k05summ)*uint(weight[k2])/uint(100);\r\n                }\r\n                for (uint n = 5; n < current_toadd.length; n++) {\r\n                    current_toadd[n] = k2e9[n]*unclimed/10/1e9;\r\n                }\r\n                // current_toadd now contains all digits\r\n                \r\n        }else{\r\n            if(round==8){\r\n                // Returns last burned decimals to epoch_fund\r\n                epoch_fund = epoch_fund.add(dec[0] * 10000000); //1e7\r\n                dec[0] = 0;\r\n            }\r\n            \r\n        }\r\n\r\n        round++;\r\n        emit Redenomination(round);\r\n        return round;\r\n    }\r\n\r\n\r\n    function actual_balance(address user) public constant returns(uint actual_balance){\r\n        if(epoch > 1 && accounts[user].lastEpoch < epoch){\r\n            return (accounts[user].balance/100000000)*100000000;\r\n        }else{\r\n            return (accounts[user].balance/current_mul())*current_mul();\r\n        }\r\n    }\r\n   \r\n    // Refresh user acc\r\n    // Pays dividends if any\r\n    function updateAccount(address account) public returns(uint new_balance){\r\n        require(frozen == false); \r\n        require(round<=9);\r\n        require(bitmask_check(account, 1024) == false); // banned == false\r\n\r\n        if(epoch > 1 && accounts[account].lastEpoch < epoch){\r\n            uint entire = accounts[account].balance/100000000;\r\n            accounts[account].balance = entire*100000000;\r\n            return accounts[account].balance;\r\n        }\r\n\r\n        if(round > accounts[account].lastRound){\r\n\r\n            if(round >1 && round <=8){\r\n\r\n\r\n                // Splits user bal by current multiplier\r\n                uint tempDividedBalance = accounts[account].balance/current_mul();\r\n                // [1.5556663] 4  (r2)\r\n                uint newFixedBalance = tempDividedBalance*current_mul();\r\n                // [1.55566630]  (r2)\r\n                uint lastActiveDigit = tempDividedBalance%10;\r\n                 // 1.555666 [3] 4  (r2)\r\n                uint diff = accounts[account].balance - newFixedBalance;\r\n                // 1.5556663 [4] (r2)\r\n\r\n                if(diff > 0){\r\n                    accounts[account].balance = newFixedBalance;\r\n                    emit Transfer(account, address(0), diff);\r\n                }\r\n\r\n                uint toBalance = 0;\r\n                if(lastActiveDigit>0 && current_toadd[lastActiveDigit-1]>0){\r\n                    toBalance = current_toadd[lastActiveDigit-1] * current_mul();\r\n                }\r\n\r\n\r\n                if(toBalance > 0 && toBalance < dec[8-round+1]){ // Not enough\r\n\r\n                    renewDec( accounts[account].balance, accounts[account].balance.add(toBalance) );\r\n                    emit Transfer(address(0), account, toBalance);\r\n                    // Refreshing dec arr\r\n                    accounts[account].balance = accounts[account].balance.add(toBalance);\r\n                    // Adding to ball\r\n                    dec[8-round+1] = dec[8-round+1].sub(toBalance);\r\n                    // Taking from burned decimal\r\n                    _totalSupply = _totalSupply.add(toBalance);\r\n                    // Add dividend to _totalSupply\r\n                }\r\n\r\n                accounts[account].lastRound = round;\r\n                // Writting last round in wich user got dividends\r\n                if(accounts[account].lastEpoch != epoch){\r\n                    accounts[account].lastEpoch = epoch;\r\n                }\r\n\r\n\r\n                return accounts[account].balance;\r\n                // returns new balance\r\n            }else{\r\n                if( round == 9){ //100000000 = 9 mul (mul8)\r\n\r\n                    uint newBalance = fix_amount(accounts[account].balance);\r\n                    uint _diff = accounts[account].balance.sub(newBalance);\r\n\r\n                    if(_diff > 0){\r\n                        renewDec( accounts[account].balance, newBalance );\r\n                        accounts[account].balance = newBalance;\r\n                        emit Transfer(account, address(0), _diff);\r\n                    }\r\n\r\n                    accounts[account].lastRound = round;\r\n                    // Writting last round in wich user got dividends\r\n                    if(accounts[account].lastEpoch != epoch){\r\n                        accounts[account].lastEpoch = epoch;\r\n                    }\r\n\r\n\r\n                    return accounts[account].balance;\r\n                    // returns new balance\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Returns current multipl. based on round\r\n    // Returns current multiplier based on round\r\n    function current_mul() internal view returns(uint _current_mul){\r\n        return mul[round-1];\r\n    }\r\n    // Removes burned values 123 -> 120  \r\n    // Returns fixed\r\n    function fix_amount(uint amount) public view returns(uint fixed_amount){\r\n        return ( amount / current_mul() ) * current_mul();\r\n    }\r\n    // Returns rest\r\n    function get_rest(uint amount) internal view returns(uint fixed_amount){\r\n        return amount % current_mul();\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // ERC20 totalSupply: \r\n    //-------------------------------------------------------------------------\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // ERC20 balanceOf: Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return accounts[tokenOwner].balance;\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // ERC20 allowance:\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // ERC20 transfer:\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        require(frozen == false); \r\n        require(to != address(0));\r\n        require(bitmask_check(to, 1024) == false); // banned == false\r\n\r\n        //Fixing amount, deleting burned decimals\r\n        tokens = fix_amount(tokens);\r\n        // Checking if greater then 0\r\n        require(tokens>0);\r\n\r\n        //Refreshing accs, payng dividends\r\n        updateAccount(to);\r\n        updateAccount(msg.sender);\r\n\r\n        uint fromOldBal = accounts[msg.sender].balance;\r\n        uint toOldBal = accounts[to].balance;\r\n\r\n        accounts[msg.sender].balance = accounts[msg.sender].balance.sub(tokens);\r\n        accounts[to].balance = accounts[to].balance.add(tokens);\r\n\r\n        require(renewDec(fromOldBal, accounts[msg.sender].balance));\r\n        require(renewDec(toOldBal, accounts[to].balance));\r\n\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // ERC20 approve:\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        require(frozen == false); \r\n        require(bitmask_check(msg.sender, 1024) == false); // banned == false\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // ERC20 transferFrom:\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        require(frozen == false); \r\n        require(bitmask_check(to, 1024) == false); // banned == false\r\n        updateAccount(from);\r\n        updateAccount(to);\r\n\r\n        uint fromOldBal = accounts[from].balance;\r\n        uint toOldBal = accounts[to].balance;\r\n\r\n        accounts[from].balance = accounts[from].balance.sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        accounts[to].balance = accounts[to].balance.add(tokens);\r\n\r\n        require(renewDec(fromOldBal, accounts[from].balance));\r\n        require(renewDec(toOldBal, accounts[to].balance));\r\n\r\n        emit Transfer(from, to, tokens);\r\n        return true; \r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        require(frozen == false); \r\n        require(bitmask_check(msg.sender, 1024) == false); // banned == false\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH https://github.com/ConsenSys/Ethereum-Development-Best-Practices/wiki/Fallback-functions-and-the-fundamental-limitations-of-using-send()-in-Ethereum-&-Solidity\r\n    // ------------------------------------------------------------------------\r\n    function () public payable {\r\n        revert();\r\n    } // OR function() payable { } to accept ETH \r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        require(frozen == false); \r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n\r\n\r\n\r\n} // © Musqogees Tech 2018, Redenom ™","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableVoting\",\"outputs\":[{\"name\":\"winner\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ballotId\",\"type\":\"uint256\"}],\"name\":\"findWinner\",\"outputs\":[{\"name\":\"winner\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payCustom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"pay1\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ban_user\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"votesWeight\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epoch_fund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"pay055loyal\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team_fund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curentWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateAccount\",\"outputs\":[{\"name\":\"new_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze_contract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showAdmin\",\"outputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redenom_dao_fund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"addProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StartNewEpoch\",\"outputs\":[{\"name\":\"succ\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"pay055\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw_team_fund\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fix_amount\",\"outputs\":[{\"name\":\"fixed_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winningProject\",\"outputs\":[{\"name\":\"_winningProject\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"_bit\",\"type\":\"uint256\"}],\"name\":\"bitmask_check\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_fund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw_dao_fund\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"projId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unban_user\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"is_banned\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redenominate\",\"outputs\":[{\"name\":\"current_round\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze_contract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"projectActive\",\"outputs\":[{\"name\":\"PA\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"actual_balance\",\"outputs\":[{\"name\":\"actual_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"swapProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curentBallotId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableVoting\",\"outputs\":[{\"name\":\"ballotId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"projectWeight\",\"outputs\":[{\"name\":\"PW\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Redenomination\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Epoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_ballotId\",\"type\":\"uint256\"}],\"name\":\"VotingOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winner\",\"type\":\"uint256\"}],\"name\":\"VotingOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"propId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"voterBalance\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"curentBallotId\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Redenom","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6d06dd5d110958eeaa948c2a35f460dfbe7a32ddb3e532fdfea867f542dedc0e"}]}