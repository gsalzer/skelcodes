{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n/**\r\n\r\n * @title ERC20Basic\r\n\r\n * @dev Simpler version of ERC20 interface\r\n\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n\r\n */\r\n\r\ncontract ERC20Basic {\r\n\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  function balanceOf(address who) public view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title SafeMath\r\n\r\n * @dev Math operations with safety checks that throw on error\r\n\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n\r\n  */\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\r\n    if (a == 0) {\r\n\r\n      return 0;\r\n\r\n    }\r\n\r\n    c = a * b;\r\n\r\n    assert(c / a == b);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n\r\n  */\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\r\n    // uint256 c = a / b;\r\n\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return a / b;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\r\n  */\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    assert(b <= a);\r\n\r\n    return a - b;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Adds two numbers, throws on overflow.\r\n\r\n  */\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\r\n    c = a + b;\r\n\r\n    assert(c >= a);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n* @title ERC223 interface\r\n* @dev see https://github.com/ethereum/eips/issues/223\r\n*/\r\ncontract ERC223 {\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success);\r\n    function transfer(address _to, uint _value, bytes _data, string _fallback) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n\r\n/**\r\n * @title Contract that will work with ERC223 tokens.\r\n */\r\n \r\ncontract ERC223ReceivingContract { \r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data);\r\n}\r\n\r\n/**\r\n* @title ERC223Token\r\n* @dev Generic implementation for the required functionality of the ERC223 standard.\r\n* @dev \r\n*/\r\ncontract PGGamePlatform is ERC223, ERC20Basic {\r\n  using SafeMath for uint256;\r\n  \r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n  mapping(address => uint256) public balances;\r\n\r\n  /**\r\n  * @dev Function to access name of token.\r\n  * @return _name string the name of the token.\r\n  */\r\n  function name() public view returns (string _name) {\r\n    return name;\r\n  }\r\n    \r\n  /**\r\n  * @dev Function to access symbol of token.\r\n  * @return _symbol string the symbol of the token.\r\n  */\r\n  function symbol() public view returns (string _symbol) {\r\n    return symbol;\r\n  }\r\n    \r\n  /**\r\n  * @dev Function to access decimals of token.\r\n  * @return _decimals uint8 decimal point of token fractions.\r\n  */\r\n  function decimals() public view returns (uint8 _decimals) {\r\n    return decimals;\r\n  }\r\n  \r\n  /**\r\n  * @dev Function to access total supply of tokens.\r\n  * @return _totalSupply uint256 total token supply.\r\n  */\r\n  function totalSupply() public view returns (uint256 _totalSupply) {\r\n    return totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Function to access the balance of a specific address.\r\n  * @param _owner address the target address to get the balance from.\r\n  * @return _balance uint256 the balance of the target address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 _balance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n  \r\n  function PGGamePlatform() public{\r\n      name = \"PG Game Platform\";\r\n      symbol = \"PGG\";\r\n      decimals = 4;\r\n      totalSupply = 10000000000 * 10 ** uint(decimals);\r\n      balances[msg.sender] = totalSupply;\r\n\r\n  }\r\n\r\n  /**\r\n  * @dev Function that is called when a user or another contract wants to transfer funds using custom fallback.\r\n  * @param _to address to which the tokens are transfered.\r\n  * @param _value uint256 amount of tokens to be transfered.\r\n  * @param _data bytes data along token transaction.\r\n  * @param _fallback string name of the custom fallback function to be called after transaction.\r\n  */\r\n  function transfer(address _to, uint256 _value, bytes _data, string _fallback) public returns (bool _success) {\r\n    if (isContract(_to)) {\r\n      if (balanceOf(msg.sender) < _value)\r\n      revert();\r\n      balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n      balances[_to] = balanceOf(_to).add(_value);\r\n      \r\n      // Calls the custom fallback function.\r\n      // Will fail if not implemented, reverting transaction.\r\n      assert(_to.call.value(0)(bytes4(keccak256(_fallback)), msg.sender, _value, _data));\r\n      \r\n      Transfer(msg.sender, _to, _value, _data);\r\n      return true;\r\n    } else {\r\n      return transferToAddress(_to, _value, _data);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Function that is called when a user or another contract wants to transfer funds using default fallback.\r\n  * @param _to address to which the tokens are transfered.\r\n  * @param _value uint256 amount of tokens to be transfered.\r\n  * @param _data bytes data along token transaction.\r\n  */\r\n  function transfer(address _to, uint256 _value, bytes _data) public returns (bool _success) {\r\n    if (isContract(_to)) {\r\n      return transferToContract(_to, _value, _data);\r\n    } else {\r\n      return transferToAddress(_to, _value, _data);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Standard function transfer similar to ERC20 transfer with no _data.\r\n  * Added due to backwards compatibility reasons.\r\n  * @param _to address to which the tokens are transfered.\r\n  * @param _value uint256 amount of tokens to be transfered.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool _success) {\r\n    // Adds empty bytes to fill _data param in functions\r\n    bytes memory empty;\r\n    if (isContract(_to)) {\r\n      return transferToContract(_to, _value, empty);\r\n    } else {\r\n      return transferToAddress(_to, _value, empty);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Function to test whether target address is a contract.\r\n  * @param _addr address to be tested as a contract address or something else.\r\n  * @return _isContract bool true if target address is a contract false otherwise.\r\n  */\r\n  function isContract(address _addr) private view returns (bool _isContract) {\r\n    uint length;\r\n    assembly {\r\n      length := extcodesize(_addr)\r\n    }\r\n    return (length > 0);\r\n  }\r\n    \r\n  /**\r\n  * @dev Function that is called when transaction target is an address.\r\n  * @param _to address to which the tokens are transfered.\r\n  * @param _value uint256 amount of tokens to be transfered.\r\n  * @param _data bytes data along token transaction.\r\n  */\r\n  function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool _success) {\r\n    if (balanceOf(msg.sender) < _value)\r\n    revert();\r\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Function that is called when transaction target is a contract.\r\n  * @param _to address to which the tokens are transfered.\r\n  * @param _value uint256 amount of tokens to be transfered.\r\n  * @param _data bytes data along token transaction.\r\n  */\r\n  function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool _success) {\r\n    if (balanceOf(msg.sender) < _value) {\r\n        revert();\r\n    }\r\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n\r\n    // Calls the default fallback function.\r\n    // Will fail if not implemented, reverting transaction.\r\n    ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n    receiver.tokenFallback(msg.sender, _value, _data);\r\n\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PGGamePlatform","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9228c837795298d495c9502cda31b807c3b75593c2cd3febb736a6850360f6ca"}]}