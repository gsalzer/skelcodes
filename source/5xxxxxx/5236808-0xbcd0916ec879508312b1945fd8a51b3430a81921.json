{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract IGold {\r\n     function balanceOf(address _owner) constant returns (uint256);\r\n     function issueTokens(address _who, uint _tokens);\r\n     function burnTokens(address _who, uint _tokens);\r\n}\r\n\r\n// StdToken inheritance is commented, because no 'totalSupply' needed\r\ncontract IMNTP { /*is StdToken */\r\n     function balanceOf(address _owner) constant returns (uint256);\r\n// Additional methods that MNTP contract provides\r\n     function lockTransfer(bool _lock);\r\n     function issueTokens(address _who, uint _tokens);\r\n     function burnTokens(address _who, uint _tokens);\r\n}\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n     }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\ncontract CreatorEnabled {\r\n     address public creator = 0x0;\r\n\r\n     modifier onlyCreator() { require(msg.sender == creator); _; }\r\n\r\n     function changeCreator(address _to) public onlyCreator {\r\n          creator = _to;\r\n     }\r\n}\r\n\r\ncontract StringMover {\r\n     function stringToBytes32(string s) constant returns(bytes32){\r\n          bytes32 out;\r\n          assembly {\r\n               out := mload(add(s, 32))\r\n          }\r\n          return out;\r\n     }\r\n\r\n     function stringToBytes64(string s) constant returns(bytes32,bytes32){\r\n          bytes32 out;\r\n          bytes32 out2;\r\n\r\n          assembly {\r\n               out := mload(add(s, 32))\r\n               out2 := mload(add(s, 64))\r\n          }\r\n          return (out,out2);\r\n     }\r\n\r\n     function bytes32ToString(bytes32 x) constant returns (string) {\r\n          bytes memory bytesString = new bytes(32);\r\n          uint charCount = 0;\r\n          for (uint j = 0; j < 32; j++) {\r\n               byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n               if (char != 0) {\r\n                    bytesString[charCount] = char;\r\n                    charCount++;\r\n               }\r\n          }\r\n          bytes memory bytesStringTrimmed = new bytes(charCount);\r\n          for (j = 0; j < charCount; j++) {\r\n               bytesStringTrimmed[j] = bytesString[j];\r\n          }\r\n          return string(bytesStringTrimmed);\r\n     }\r\n\r\n     function bytes64ToString(bytes32 x, bytes32 y) constant returns (string) {\r\n          bytes memory bytesString = new bytes(64);\r\n          uint charCount = 0;\r\n\r\n          for (uint j = 0; j < 32; j++) {\r\n               byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n               if (char != 0) {\r\n                    bytesString[charCount] = char;\r\n                    charCount++;\r\n               }\r\n          }\r\n          for (j = 0; j < 32; j++) {\r\n               char = byte(bytes32(uint(y) * 2 ** (8 * j)));\r\n               if (char != 0) {\r\n                    bytesString[charCount] = char;\r\n                    charCount++;\r\n               }\r\n          }\r\n\r\n          bytes memory bytesStringTrimmed = new bytes(charCount);\r\n          for (j = 0; j < charCount; j++) {\r\n               bytesStringTrimmed[j] = bytesString[j];\r\n          }\r\n          return string(bytesStringTrimmed);\r\n     }\r\n}\r\n\r\n\r\ncontract Storage is SafeMath, StringMover {\r\n     function Storage() public {\r\n          controllerAddress = msg.sender;\r\n     }\r\n\r\n     address public controllerAddress = 0x0;\r\n     modifier onlyController() { require(msg.sender==controllerAddress); _; }\r\n\r\n     function setControllerAddress(address _newController) onlyController {\r\n          controllerAddress = _newController;\r\n     }\r\n\r\n     address public hotWalletAddress = 0x0;\r\n\r\n     function setHotWalletAddress(address _address) onlyController {\r\n         hotWalletAddress = _address;\r\n     }\r\n\r\n// Fields - 1\r\n     mapping(uint => string) docs;\r\n     uint public docCount = 0;\r\n\r\n// Fields - 2 \r\n     mapping(string => mapping(uint => int)) fiatTxs;\r\n     mapping(string => uint) fiatBalancesCents;\r\n     mapping(string => uint) fiatTxCounts;\r\n     uint fiatTxTotal = 0;\r\n\r\n// Fields - 3 \r\n     mapping(string => mapping(uint => int)) goldTxs;\r\n     mapping(string => uint) goldHotBalances;\r\n     mapping(string => uint) goldTxCounts;\r\n     uint goldTxTotal = 0;\r\n\r\n// Fields - 4 \r\n     struct Request {\r\n          address sender;\r\n          string userId;\r\n          string requestHash;\r\n          bool buyRequest;         // otherwise - sell\r\n\r\n          // 0 - init\r\n          // 1 - processed\r\n          // 2 - cancelled\r\n          uint8 state;\r\n     }\r\n     \r\n     mapping (uint=>Request) requests;\r\n     uint public requestsCount = 0;\r\n\r\n///////\r\n     function addDoc(string _ipfsDocLink) public onlyController returns(uint) {\r\n          docs[docCount] = _ipfsDocLink;\r\n          uint out = docCount;\r\n          docCount++;\r\n\r\n          return out;\r\n     }\r\n\r\n     function getDocCount() public constant returns (uint) {\r\n          return docCount; \r\n     }\r\n\r\n     function getDocAsBytes64(uint _index) public constant returns (bytes32,bytes32) {\r\n          require(_index < docCount);\r\n          return stringToBytes64(docs[_index]);\r\n     }\r\n\r\n     function addFiatTransaction(string _userId, int _amountCents) public onlyController returns(uint) {\r\n          require(0 != _amountCents);\r\n\r\n          uint c = fiatTxCounts[_userId];\r\n\r\n          fiatTxs[_userId][c] = _amountCents;\r\n        \r\n          if (_amountCents > 0) {\r\n              fiatBalancesCents[_userId] = safeAdd(fiatBalancesCents[_userId], uint(_amountCents));\r\n          } else {\r\n              fiatBalancesCents[_userId] = safeSub(fiatBalancesCents[_userId], uint(-_amountCents));\r\n          }\r\n\r\n          fiatTxCounts[_userId] = safeAdd(fiatTxCounts[_userId], 1);\r\n\r\n          fiatTxTotal++;\r\n          return c;\r\n     }\r\n\r\n     function getFiatTransactionsCount(string _userId) public constant returns (uint) {\r\n          return fiatTxCounts[_userId];\r\n     }\r\n     \r\n     function getAllFiatTransactionsCount() public constant returns (uint) {\r\n          return fiatTxTotal;\r\n     }\r\n\r\n     function getFiatTransaction(string _userId, uint _index) public constant returns(int) {\r\n          require(_index < fiatTxCounts[_userId]);\r\n          return fiatTxs[_userId][_index];\r\n     }\r\n\r\n     function getUserFiatBalance(string _userId) public constant returns(uint) {\r\n          return fiatBalancesCents[_userId];\r\n     }\r\n\r\n    function addGoldTransaction(string _userId, int _amount) public onlyController returns(uint) {\r\n          require(0 != _amount);\r\n\r\n          uint c = goldTxCounts[_userId];\r\n\r\n          goldTxs[_userId][c] = _amount;\r\n\r\n          if (_amount > 0) {\r\n              goldHotBalances[_userId] = safeAdd(goldHotBalances[_userId], uint(_amount));\r\n          } else {\r\n              goldHotBalances[_userId] = safeSub(goldHotBalances[_userId], uint(-_amount));\r\n          }\r\n\r\n          goldTxCounts[_userId] = safeAdd(goldTxCounts[_userId], 1);\r\n\r\n          goldTxTotal++;\r\n          return c;\r\n     }\r\n\r\n     function getGoldTransactionsCount(string _userId) public constant returns (uint) {\r\n          return goldTxCounts[_userId];\r\n     }\r\n     \r\n     function getAllGoldTransactionsCount() public constant returns (uint) {\r\n          return goldTxTotal;\r\n     }\r\n\r\n     function getGoldTransaction(string _userId, uint _index) public constant returns(int) {\r\n          require(_index < goldTxCounts[_userId]);\r\n          return goldTxs[_userId][_index];\r\n     }\r\n\r\n     function getUserHotGoldBalance(string _userId) public constant returns(uint) {\r\n          return goldHotBalances[_userId];\r\n     }\r\n\r\n     function addBuyTokensRequest(address _who, string _userId, string _requestHash) public onlyController returns(uint) {\r\n          Request memory r;\r\n          r.sender = _who;\r\n          r.userId = _userId;\r\n          r.requestHash = _requestHash;\r\n          r.buyRequest = true;\r\n          r.state = 0;\r\n\r\n          requests[requestsCount] = r;\r\n          uint out = requestsCount;\r\n          requestsCount++;\r\n          return out;\r\n     }\r\n\r\n     function addSellTokensRequest(address _who, string _userId, string _requestHash) onlyController returns(uint) {\r\n          Request memory r;\r\n          r.sender = _who;\r\n          r.userId = _userId;\r\n          r.requestHash = _requestHash;\r\n          r.buyRequest = false;\r\n          r.state = 0;\r\n\r\n          requests[requestsCount] = r;\r\n          uint out = requestsCount;\r\n          requestsCount++;\r\n          return out;\r\n     }\r\n\r\n     function getRequestsCount() public constant returns(uint) {\r\n          return requestsCount;\r\n     }\r\n\r\n     function getRequest(uint _index) public constant returns(\r\n          address a, \r\n          bytes32 userId, \r\n          bytes32 hashA, bytes32 hashB, \r\n          bool buy, uint8 state)\r\n     {\r\n          require(_index < requestsCount);\r\n\r\n          Request memory r = requests[_index];\r\n\r\n          bytes32 userBytes = stringToBytes32(r.userId);\r\n          var (out1, out2) = stringToBytes64(r.requestHash);\r\n\r\n          return (r.sender, userBytes, out1, out2, r.buyRequest, r.state);\r\n     }\r\n\r\n     function cancelRequest(uint _index) onlyController public {\r\n          require(_index < requestsCount);\r\n          require(0==requests[_index].state);\r\n\r\n          requests[_index].state = 2;\r\n     }\r\n     \r\n     function setRequestProcessed(uint _index) onlyController public {\r\n          requests[_index].state = 1;\r\n     }\r\n}\r\n\r\ncontract GoldFiatFee is CreatorEnabled, StringMover {\r\n     string gmUserId = \"\";\r\n\r\n// Functions: \r\n     function GoldFiatFee(string _gmUserId) {\r\n          creator = msg.sender;\r\n          gmUserId = _gmUserId;\r\n     }\r\n\r\n     function getGoldmintFeeAccount() public constant returns(bytes32) {\r\n          bytes32 userBytes = stringToBytes32(gmUserId);\r\n          return userBytes;\r\n     }\r\n\r\n     function setGoldmintFeeAccount(string _gmUserId) public onlyCreator {\r\n          gmUserId = _gmUserId;\r\n     }\r\n     \r\n     function calculateBuyGoldFee(uint _mntpBalance, uint _goldValue) public constant returns(uint) {\r\n          return 0;\r\n     }\r\n\r\n     function calculateSellGoldFee(uint _mntpBalance, uint _goldValue) public constant returns(uint) {\r\n          // If the sender holds 0 MNTP, then the transaction fee is 3% fiat, \r\n          // If the sender holds at least 10 MNTP, then the transaction fee is 2% fiat,\r\n          // If the sender holds at least 1000 MNTP, then the transaction fee is 1.5% fiat,\r\n          // If the sender holds at least 10000 MNTP, then the transaction fee is 1% fiat,\r\n          if (_mntpBalance >= (10000 * 1 ether)) {\r\n               return (75 * _goldValue / 10000);\r\n          }\r\n\r\n          if (_mntpBalance >= (1000 * 1 ether)) {\r\n               return (15 * _goldValue / 1000);\r\n          }\r\n\r\n          if (_mntpBalance >= (10 * 1 ether)) {\r\n               return (25 * _goldValue / 1000);\r\n          }\r\n          \r\n          // 3%\r\n          return (3 * _goldValue / 100);\r\n     }\r\n}\r\n\r\ncontract IGoldFiatFee {\r\n     function getGoldmintFeeAccount()public constant returns(bytes32);\r\n     function calculateBuyGoldFee(uint _mntpBalance, uint _goldValue) public constant returns(uint);\r\n     function calculateSellGoldFee(uint _mntpBalance, uint _goldValue) public constant returns(uint);\r\n}\r\n\r\ncontract StorageController is SafeMath, CreatorEnabled, StringMover {\r\n     Storage public stor;\r\n     IMNTP public mntpToken;\r\n     IGold public goldToken;\r\n     IGoldFiatFee public fiatFee;\r\n\r\n     event NewTokenBuyRequest(address indexed _from, string indexed _userId);\r\n     event NewTokenSellRequest(address indexed _from, string indexed _userId);\r\n     event RequestCancelled(uint indexed _reqId);\r\n     event RequestProcessed(uint indexed _reqId);\r\n\r\n     function StorageController(address _mntpContractAddress, address _goldContractAddress, address _storageAddress, address _fiatFeeContract) {\r\n          creator = msg.sender;\r\n\r\n          if (0 != _storageAddress) {\r\n               // use existing storage\r\n               stor = Storage(_storageAddress);\r\n          } else {\r\n               stor = new Storage();\r\n          }\r\n\r\n          require(0x0!=_mntpContractAddress);\r\n          require(0x0!=_goldContractAddress);\r\n          require(0x0!=_fiatFeeContract);\r\n\r\n          mntpToken = IMNTP(_mntpContractAddress);\r\n          goldToken = IGold(_goldContractAddress);\r\n          fiatFee = IGoldFiatFee(_fiatFeeContract);\r\n     }\r\n\r\n\r\n     // Only old controller can call setControllerAddress\r\n     function changeController(address _newController) public onlyCreator {\r\n          stor.setControllerAddress(_newController);\r\n     }\r\n\r\n     function setHotWalletAddress(address _hotWalletAddress) public onlyCreator {\r\n         stor.setHotWalletAddress(_hotWalletAddress);\r\n     }\r\n\r\n     function getHotWalletAddress() public constant returns (address) {\r\n          return stor.hotWalletAddress();\r\n     }\r\n\r\n     function changeFiatFeeContract(address _newFiatFee) public onlyCreator {\r\n          fiatFee = IGoldFiatFee(_newFiatFee);\r\n     }\r\n\r\n     // 1\r\n     function addDoc(string _ipfsDocLink) public onlyCreator returns(uint) {\r\n          return stor.addDoc(_ipfsDocLink);\r\n     }\r\n\r\n     function getDocCount() public constant returns (uint) {\r\n          return stor.docCount(); \r\n     }\r\n\r\n     function getDoc(uint _index) public constant returns (string) {\r\n          var (x, y) = stor.getDocAsBytes64(_index);\r\n          return bytes64ToString(x,y);\r\n     }\r\n\r\n// 2\r\n     // _amountCents can be negative\r\n     // returns index in user array\r\n     function addFiatTransaction(string _userId, int _amountCents) public onlyCreator returns(uint) {\r\n          return stor.addFiatTransaction(_userId, _amountCents);\r\n     }\r\n\r\n     function getFiatTransactionsCount(string _userId) public constant returns (uint) {\r\n          return stor.getFiatTransactionsCount(_userId);\r\n     }\r\n     \r\n     function getAllFiatTransactionsCount() public constant returns (uint) {\r\n          return stor.getAllFiatTransactionsCount();\r\n     }\r\n\r\n     function getFiatTransaction(string _userId, uint _index) public constant returns(int) {\r\n          return stor.getFiatTransaction(_userId, _index);\r\n     }\r\n\r\n     function getUserFiatBalance(string _userId) public constant returns(uint) {\r\n          return stor.getUserFiatBalance(_userId);\r\n     }\r\n\r\n// 3\r\n\r\n     function addGoldTransaction(string _userId, int _amount) public onlyCreator returns(uint) {\r\n          return stor.addGoldTransaction(_userId, _amount);\r\n     }\r\n\r\n     function getGoldTransactionsCount(string _userId) public constant returns (uint) {\r\n          return stor.getGoldTransactionsCount(_userId);\r\n     }\r\n     \r\n     function getAllGoldTransactionsCount() public constant returns (uint) {\r\n          return stor.getAllGoldTransactionsCount();\r\n     }\r\n\r\n     function getGoldTransaction(string _userId, uint _index) public constant returns(int) {\r\n          return stor.getGoldTransaction(_userId, _index);\r\n     }\r\n\r\n     function getUserHotGoldBalance(string _userId) public constant returns(uint) {\r\n          return stor.getUserHotGoldBalance(_userId);\r\n     }\r\n\r\n// 4:\r\n     function addBuyTokensRequest(string _userId, string _requestHash) public returns(uint) {\r\n          NewTokenBuyRequest(msg.sender, _userId); \r\n          return stor.addBuyTokensRequest(msg.sender, _userId, _requestHash);\r\n     }\r\n\r\n     function addSellTokensRequest(string _userId, string _requestHash) public returns(uint) {\r\n          NewTokenSellRequest(msg.sender, _userId);\r\n\t\treturn stor.addSellTokensRequest(msg.sender, _userId, _requestHash);\r\n     }\r\n\r\n     function getRequestsCount() public constant returns(uint) {\r\n          return stor.getRequestsCount();\r\n     }\r\n\r\n     function getRequest(uint _index) public constant returns(address, string, string, bool, uint8) {\r\n          var (sender, userIdBytes, hashA, hashB, buy, state) = stor.getRequest(_index);\r\n\r\n          string memory userId = bytes32ToString(userIdBytes);\r\n          string memory hash = bytes64ToString(hashA, hashB);\r\n\r\n          return (sender, userId, hash, buy, state);\r\n     }\r\n\r\n     function cancelRequest(uint _index) onlyCreator public {\r\n          RequestCancelled(_index);\r\n          stor.cancelRequest(_index);\r\n     }\r\n     \r\n     function processRequest(uint _index, uint _amountCents, uint _centsPerGold) onlyCreator public {\r\n          require(_index < getRequestsCount());\r\n\r\n          var (sender, userId, hash, isBuy, state) = getRequest(_index);\r\n          require(0 == state);\r\n\r\n          if (isBuy) {\r\n               processBuyRequest(userId, sender, _amountCents, _centsPerGold);\r\n          } else {\r\n               processSellRequest(userId, sender, _amountCents, _centsPerGold);\r\n          }\r\n\r\n          // 3 - update state\r\n          stor.setRequestProcessed(_index);\r\n\r\n          // 4 - send event\r\n          RequestProcessed(_index);\r\n     }\r\n\r\n     function processBuyRequest(string _userId, address _userAddress, uint _amountCents, uint _centsPerGold) internal {\r\n          uint userFiatBalance = getUserFiatBalance(_userId);\r\n          require(userFiatBalance > 0);\r\n\r\n          if (_amountCents > userFiatBalance) {\r\n               _amountCents = userFiatBalance;\r\n          }\r\n\r\n          uint userMntpBalance = mntpToken.balanceOf(_userAddress);\r\n          uint fee = fiatFee.calculateBuyGoldFee(userMntpBalance, _amountCents);\r\n          require(_amountCents > fee);  \r\n\r\n          // 1 - issue tokens minus fee\r\n          uint amountMinusFee = _amountCents;\r\n          if (fee > 0) { \r\n               amountMinusFee = safeSub(_amountCents, fee);\r\n          }\r\n\r\n          require(amountMinusFee > 0);\r\n\r\n          uint tokens = (uint(amountMinusFee) * 1 ether) / _centsPerGold;\r\n          issueGoldTokens(_userAddress, tokens);\r\n        \r\n          // request from hot wallet\r\n          if (isHotWallet(_userAddress)) {\r\n            addGoldTransaction(_userId, int(tokens));\r\n          }\r\n\r\n          // 2 - add fiat tx\r\n          // negative for buy (total amount including fee!)\r\n          addFiatTransaction(_userId, - int(_amountCents));\r\n\r\n          // 3 - send fee to Goldmint\r\n          // positive for sell \r\n          if (fee > 0) {\r\n               string memory gmAccount = bytes32ToString(fiatFee.getGoldmintFeeAccount());\r\n               addFiatTransaction(gmAccount, int(fee));\r\n          }\r\n     }\r\n\r\n     function processSellRequest(string _userId, address _userAddress, uint _amountCents, uint _centsPerGold) internal {\r\n          uint tokens = (uint(_amountCents) * 1 ether) / _centsPerGold;\r\n          uint tokenBalance = goldToken.balanceOf(_userAddress);\r\n\r\n          if (isHotWallet(_userAddress)) {\r\n              tokenBalance = getUserHotGoldBalance(_userId);\r\n          }\r\n\r\n          if (tokenBalance < tokens) {\r\n               tokens = tokenBalance;\r\n               _amountCents = uint((tokens * _centsPerGold) / 1 ether);\r\n          }\r\n\r\n          burnGoldTokens(_userAddress, tokens);\r\n\r\n          // request from hot wallet\r\n          if (isHotWallet(_userAddress)) {\r\n            addGoldTransaction(_userId, - int(tokens));\r\n          }\r\n\r\n          // 2 - add fiat tx\r\n          uint userMntpBalance = mntpToken.balanceOf(_userAddress);\r\n          uint fee = fiatFee.calculateSellGoldFee(userMntpBalance, _amountCents);\r\n          require(_amountCents > fee);  \r\n\r\n          uint amountMinusFee = _amountCents;\r\n\r\n          if (fee > 0) { \r\n               amountMinusFee = safeSub(_amountCents, fee);\r\n          }\r\n\r\n          require(amountMinusFee > 0);\r\n          // positive for sell \r\n          addFiatTransaction(_userId, int(amountMinusFee));\r\n\r\n          // 3 - send fee to Goldmint\r\n          if (fee > 0) {\r\n               string memory gmAccount = bytes32ToString(fiatFee.getGoldmintFeeAccount());\r\n               addFiatTransaction(gmAccount, int(fee));\r\n          }\r\n     }\r\n     \r\n//////// INTERNAL REQUESTS FROM HOT WALLET\r\n\r\n    function processInternalRequest(string _userId, bool _isBuy, uint _amountCents, uint _centsPerGold) onlyCreator public {\r\n        if (_isBuy) {\r\n            processBuyRequest(_userId, getHotWalletAddress(), _amountCents, _centsPerGold);\r\n        } else {\r\n            processSellRequest(_userId, getHotWalletAddress(), _amountCents, _centsPerGold);\r\n        }\r\n    }\r\n\r\n    function transferGoldFromHotWallet(address _to, uint _value, string _userId) onlyCreator public {\r\n        \r\n        uint balance = getUserHotGoldBalance(_userId);\r\n        require(balance >= _value);\r\n\r\n        goldToken.burnTokens(getHotWalletAddress(), _value);\r\n        goldToken.issueTokens(_to, _value);\r\n\r\n        addGoldTransaction(_userId, -int(_value));\r\n    }\r\n\r\n////////\r\n     function issueGoldTokens(address _userAddress, uint _tokenAmount) internal {\r\n          require(0!=_tokenAmount);\r\n          goldToken.issueTokens(_userAddress, _tokenAmount);\r\n     }\r\n\r\n     function burnGoldTokens(address _userAddress, uint _tokenAmount) internal {\r\n          require(0!=_tokenAmount);\r\n          goldToken.burnTokens(_userAddress, _tokenAmount);\r\n     }\r\n\r\n     function isHotWallet(address _address) internal returns(bool) {\r\n         return _address == getHotWalletAddress();\r\n     }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userId\",\"type\":\"string\"}],\"name\":\"getGoldTransactionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFiatFee\",\"type\":\"address\"}],\"name\":\"changeFiatFeeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"},{\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"bytes64ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userId\",\"type\":\"string\"}],\"name\":\"getUserHotGoldBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ipfsDocLink\",\"type\":\"string\"}],\"name\":\"addDoc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiatFee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userId\",\"type\":\"string\"}],\"name\":\"getUserFiatBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDoc\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userId\",\"type\":\"string\"},{\"name\":\"_requestHash\",\"type\":\"string\"}],\"name\":\"addBuyTokensRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"cancelRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequestsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHotWalletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userId\",\"type\":\"string\"},{\"name\":\"_requestHash\",\"type\":\"string\"}],\"name\":\"addSellTokensRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllGoldTransactionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDocCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goldToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userId\",\"type\":\"string\"},{\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"addGoldTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_userId\",\"type\":\"string\"}],\"name\":\"transferGoldFromHotWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userId\",\"type\":\"string\"}],\"name\":\"getFiatTransactionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userId\",\"type\":\"string\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFiatTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userId\",\"type\":\"string\"},{\"name\":\"_isBuy\",\"type\":\"bool\"},{\"name\":\"_amountCents\",\"type\":\"uint256\"},{\"name\":\"_centsPerGold\",\"type\":\"uint256\"}],\"name\":\"processInternalRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mntpToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"s\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllFiatTransactionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_amountCents\",\"type\":\"uint256\"},{\"name\":\"_centsPerGold\",\"type\":\"uint256\"}],\"name\":\"processRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userId\",\"type\":\"string\"},{\"name\":\"_amountCents\",\"type\":\"int256\"}],\"name\":\"addFiatTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"s\",\"type\":\"string\"}],\"name\":\"stringToBytes64\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userId\",\"type\":\"string\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getGoldTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hotWalletAddress\",\"type\":\"address\"}],\"name\":\"setHotWalletAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mntpContractAddress\",\"type\":\"address\"},{\"name\":\"_goldContractAddress\",\"type\":\"address\"},{\"name\":\"_storageAddress\",\"type\":\"address\"},{\"name\":\"_fiatFeeContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_userId\",\"type\":\"string\"}],\"name\":\"NewTokenBuyRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_userId\",\"type\":\"string\"}],\"name\":\"NewTokenSellRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_reqId\",\"type\":\"uint256\"}],\"name\":\"RequestCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_reqId\",\"type\":\"uint256\"}],\"name\":\"RequestProcessed\",\"type\":\"event\"}]","ContractName":"StorageController","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000083cee9e086a77e492ee0bb93c2b0437ad6fdeccc00000000000000000000000042afcf6295c8ba5ca9e772f60a7d28670b0cbfd500000000000000000000000064b31f941a4c3a53aeb4b6e8bc97ca00d226cd2c000000000000000000000000d55fb1a81af292f565cf194a222b4ffe724aa8cf","Library":"","SwarmSource":"bzzr://2350e932b9e88be43cbb5da31d0dcf7cf331abc1c44b3cd964c830e03d26fc6c"}]}