{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n}\r\ncontract ReentrancyHandlingContract{\r\n\r\n    bool locked;\r\n\r\n    modifier noReentrancy() {\r\n        require(!locked);\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\ncontract ERC20TokenInterface {\r\n    function totalSupply() public constant returns (uint256 _totalSupply);\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Crowdsale is ReentrancyHandlingContract, Owned {\r\n    \r\n    enum state { pendingStart, crowdsale, crowdsaleEnded }\r\n    struct ContributorData {\r\n        uint contributionAmount;\r\n        uint tokensIssued;\r\n    }\r\n    struct Tier {\r\n        uint minContribution;\r\n        uint maxContribution;\r\n        uint bonus;\r\n        bool tierActive;\r\n    }\r\n    mapping (address => uint) public verifiedAddresses;\r\n    mapping(uint => Tier) public tierList;\r\n    uint public nextFreeTier = 1;\r\n    \r\n\r\n    state public crowdsaleState = state.pendingStart;\r\n    \r\n    address public multisigAddress;\r\n\r\n    uint public crowdsaleStartBlock;\r\n    uint public crowdsaleEndedBlock;\r\n\r\n    mapping(address => ContributorData) public contributorList;\r\n    uint public nextContributorIndex;\r\n    mapping(uint => address) public contributorIndexes;\r\n\r\n    uint public minCap;\r\n    uint public maxCap;\r\n    uint public ethRaised;\r\n    uint public tokensIssued = 0;\r\n    uint public blocksInADay;\r\n    uint public ethToTokenConversion;\r\n\r\n    event CrowdsaleStarted(uint blockNumber);\r\n    event CrowdsaleEnded(uint blockNumber);\r\n    event ErrorSendingETH(address to, uint amount);\r\n    event MinCapReached(uint blockNumber);\r\n    event MaxCapReached(uint blockNumber);\r\n\r\n    function() noReentrancy payable public {\r\n        require(crowdsaleState != state.crowdsaleEnded);\r\n        require(isAddressVerified(msg.sender));\r\n        \r\n        bool stateChanged = checkCrowdsaleState();\r\n\r\n        if (crowdsaleState == state.crowdsale) {\r\n            processTransaction(msg.sender, msg.value);\r\n        } else {\r\n            refundTransaction(stateChanged);\r\n        }\r\n    }\r\n\r\n    function checkCrowdsaleState() internal returns (bool) {\r\n        if (tokensIssued == maxCap && crowdsaleState != state.crowdsaleEnded) {\r\n            crowdsaleState = state.crowdsaleEnded;\r\n            emit CrowdsaleEnded(block.number);\r\n            return true;\r\n        }\r\n\r\n        if (block.number >= crowdsaleStartBlock && block.number <= crowdsaleEndedBlock) {\r\n            if (crowdsaleState != state.crowdsale) {\r\n                crowdsaleState = state.crowdsale;\r\n                emit CrowdsaleStarted(block.number);\r\n                return true;\r\n            }\r\n        } else {\r\n            if (crowdsaleState != state.crowdsaleEnded && block.number > crowdsaleEndedBlock) {\r\n                crowdsaleState = state.crowdsaleEnded;\r\n                emit CrowdsaleEnded(block.number);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function refundTransaction(bool _stateChanged) internal {\r\n        if (_stateChanged) {\r\n            msg.sender.transfer(msg.value);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function setEthToTokenConversion(uint _ratio) onlyOwner public {\r\n        require(crowdsaleState == state.pendingStart);\r\n        ethToTokenConversion = _ratio;\r\n    }\r\n    \r\n    function setMaxCap(uint _maxCap) onlyOwner public {\r\n        require(crowdsaleState == state.pendingStart);\r\n        maxCap = _maxCap;\r\n    }\r\n    \r\n    function calculateEthToToken(uint _eth, uint _bonus) constant public returns(uint) {\r\n        uint bonusTokens;\r\n        if (_bonus != 0) {\r\n            bonusTokens = ((_eth * ethToTokenConversion) * _bonus) / 100;\r\n        } \r\n        return (_eth * ethToTokenConversion) + bonusTokens;\r\n    }\r\n\r\n    function calculateTokenToEth(uint _token, uint _bonus) constant public returns(uint) {\r\n        uint ethTokenWithBonus = ethToTokenConversion;\r\n        if (_bonus != 0){\r\n            ethTokenWithBonus = ((ethToTokenConversion * _bonus) / 100) + ethToTokenConversion;\r\n        }\r\n        return _token / ethTokenWithBonus;\r\n    }\r\n\r\n    function processTransaction(address _contributor, uint _amount) internal {\r\n        uint contributionAmount = 0;\r\n        uint returnAmount = 0;\r\n        uint tokensToGive = 0;\r\n        uint contributorTier;\r\n        uint minContribution;\r\n        uint maxContribution;\r\n        uint bonus;\r\n        (contributorTier, minContribution, maxContribution, bonus) = getContributorData(_contributor); \r\n\r\n        if (block.number >= crowdsaleStartBlock && block.number < crowdsaleStartBlock + blocksInADay){\r\n            require(_amount >= minContribution);\r\n            require(contributorTier == 1 || contributorTier == 2 || contributorTier == 5 || contributorTier == 6 || contributorTier == 7 || contributorTier == 8);\r\n            if (_amount > maxContribution && maxContribution != 0){\r\n                contributionAmount = maxContribution;\r\n                returnAmount = _amount - maxContribution;\r\n            } else {\r\n                contributionAmount = _amount;\r\n            }\r\n            tokensToGive = calculateEthToToken(contributionAmount, bonus);\r\n        } else if (block.number >= crowdsaleStartBlock + blocksInADay && block.number < crowdsaleStartBlock + 2 * blocksInADay) {\r\n            require(_amount >= minContribution);\r\n            require(contributorTier == 3 || contributorTier == 5 || contributorTier == 6 || contributorTier == 7 || contributorTier == 8);\r\n            if (_amount > maxContribution && maxContribution != 0) {\r\n                contributionAmount = maxContribution;\r\n                returnAmount = _amount - maxContribution;\r\n            } else {\r\n                contributionAmount = _amount;\r\n            }\r\n            tokensToGive = calculateEthToToken(contributionAmount, bonus);\r\n        } else {\r\n            require(_amount >= minContribution);\r\n            if (_amount > maxContribution && maxContribution != 0) {\r\n                contributionAmount = maxContribution;\r\n                returnAmount = _amount - maxContribution;\r\n            } else {\r\n                contributionAmount = _amount;\r\n            }\r\n            if(contributorTier == 5 || contributorTier == 6 || contributorTier == 7 || contributorTier == 8){\r\n                tokensToGive = calculateEthToToken(contributionAmount, bonus);\r\n            }else{\r\n                tokensToGive = calculateEthToToken(contributionAmount, 0);\r\n            }\r\n        }\r\n\r\n        if (tokensToGive > (maxCap - tokensIssued)) {\r\n            if (block.number >= crowdsaleStartBlock && block.number < crowdsaleStartBlock + blocksInADay){\r\n                contributionAmount = calculateTokenToEth(maxCap - tokensIssued, bonus);\r\n            }else if (block.number >= crowdsaleStartBlock + blocksInADay && block.number < crowdsaleStartBlock + 2 * blocksInADay) {\r\n                contributionAmount = calculateTokenToEth(maxCap - tokensIssued, bonus);\r\n            }else{\r\n                if(contributorTier == 5 || contributorTier == 6 || contributorTier == 7 || contributorTier == 8){\r\n                    contributionAmount = calculateTokenToEth(maxCap - tokensIssued, bonus);\r\n                }else{\r\n                    contributionAmount = calculateTokenToEth(maxCap - tokensIssued, 0);\r\n                }\r\n            }\r\n\r\n            returnAmount = _amount - contributionAmount;\r\n            tokensToGive = maxCap - tokensIssued;\r\n            emit MaxCapReached(block.number);\r\n        }\r\n\r\n        if (contributorList[_contributor].contributionAmount == 0) {\r\n            contributorIndexes[nextContributorIndex] = _contributor;\r\n            nextContributorIndex += 1;\r\n        }\r\n\r\n        contributorList[_contributor].contributionAmount += contributionAmount;\r\n        ethRaised += contributionAmount;\r\n\r\n        if (tokensToGive > 0) {\r\n            contributorList[_contributor].tokensIssued += tokensToGive;\r\n            tokensIssued += tokensToGive;\r\n        }\r\n        if (returnAmount != 0) {\r\n            _contributor.transfer(returnAmount);\r\n        } \r\n    }\r\n\r\n    function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner public {\r\n        ERC20TokenInterface(_tokenAddress).transfer(_to, _amount);\r\n    }\r\n\r\n    function withdrawEth() onlyOwner public {\r\n        require(address(this).balance != 0);\r\n        require(tokensIssued >= minCap);\r\n\r\n        multisigAddress.transfer(address(this).balance);\r\n    }\r\n\r\n    function investorCount() constant public returns(uint) {\r\n        return nextContributorIndex;\r\n    }\r\n\r\n    function setCrowdsaleStartBlock(uint _block) onlyOwner public {\r\n        require(crowdsaleState == state.pendingStart);\r\n        crowdsaleStartBlock = _block;\r\n    }\r\n\r\n    function setCrowdsaleEndBlock(uint _block) onlyOwner public {\r\n        require(crowdsaleState == state.pendingStart);\r\n        crowdsaleEndedBlock = _block;\r\n    }\r\n    \r\n    function isAddressVerified(address _address) public view returns (bool) {\r\n        if (verifiedAddresses[_address] == 0){\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function getContributorData(address _contributor) public view returns (uint, uint, uint, uint) {\r\n        uint contributorTier = verifiedAddresses[_contributor];\r\n        return (contributorTier, tierList[contributorTier].minContribution, tierList[contributorTier].maxContribution, tierList[contributorTier].bonus);\r\n    }\r\n    \r\n    function addAddress(address _newAddress, uint _tier) public onlyOwner {\r\n        require(verifiedAddresses[_newAddress] == 0);\r\n        \r\n        verifiedAddresses[_newAddress] = _tier;\r\n    }\r\n    \r\n    function removeAddress(address _oldAddress) public onlyOwner {\r\n        require(verifiedAddresses[_oldAddress] != 0);\r\n        \r\n        verifiedAddresses[_oldAddress] = 0;\r\n    }\r\n    \r\n    function batchAddAddresses(address[] _addresses, uint[] _tiers) public onlyOwner {\r\n        require(_addresses.length == _tiers.length);\r\n        for (uint cnt = 0; cnt < _addresses.length; cnt++) {\r\n            assert(verifiedAddresses[_addresses[cnt]] != 0);\r\n            verifiedAddresses[_addresses[cnt]] = _tiers[cnt];\r\n        }\r\n    }\r\n}\r\n\r\ncontract MoneyRebelCrowdsaleContract is Crowdsale {\r\n  \r\n    constructor() public {\r\n\r\n        crowdsaleStartBlock = 5578000;\r\n        crowdsaleEndedBlock = 5618330;\r\n\r\n        minCap = 0 * 10**18;\r\n        maxCap = 744428391 * 10**18;\r\n\r\n        ethToTokenConversion = 13888;\r\n\r\n        blocksInADay = 5760;\r\n\r\n        multisigAddress = 0x352C30f3092556CD42fE39cbCF585f33CE1C20bc;\r\n \r\n        tierList[1] = Tier(2*10**17,35*10**18,10, true);\r\n        tierList[2] = Tier(2*10**17,35*10**18,10, true);\r\n        tierList[3] = Tier(2*10**17,25*10**18,0, true);\r\n        tierList[4] = Tier(2*10**17,100000*10**18,0, true);\r\n        tierList[5] = Tier(2*10**17,100000*10**18,8, true);\r\n        tierList[6] = Tier(2*10**17,100000*10**18,10, true); \r\n        tierList[7] = Tier(2*10**17,100000*10**18,12, true);\r\n        tierList[8] = Tier(2*10**17,100000*10**18,15, true);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributorIndexes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextFreeTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleEndedBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_tiers\",\"type\":\"uint256[]\"}],\"name\":\"batchAddAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"calculateEthToToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldAddress\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierList\",\"outputs\":[{\"name\":\"minContribution\",\"type\":\"uint256\"},{\"name\":\"maxContribution\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"},{\"name\":\"tierActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"},{\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxCap\",\"type\":\"uint256\"}],\"name\":\"setMaxCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"uint256\"},{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"calculateTokenToEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributorList\",\"outputs\":[{\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"name\":\"tokensIssued\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextContributorIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksInADay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvageTokensFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"verifiedAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"getContributorData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"setEthToTokenConversion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleStartBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethToTokenConversion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAddressVerified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleEndBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ErrorSendingETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"MinCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"MaxCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"MoneyRebelCrowdsaleContract","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0f1c7b7f76d541b0d6b98aaec70385d4577d86fc5ff4e3745446461be4ececbe"}]}