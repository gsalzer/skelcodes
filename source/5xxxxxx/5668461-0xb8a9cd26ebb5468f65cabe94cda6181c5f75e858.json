{"status":"1","message":"OK","result":[{"SourceCode":"contract Partner {\r\n    function exchangeTokensFromOtherContract(address _source, address _recipient, uint256 _RequestedTokens);\r\n}\r\n\r\ncontract Target {\r\n    function transfer(address _to, uint _value);\r\n}\r\n\r\ncontract COE {\r\n\r\n    string public name = \"Coeval by Monkey Capital\";\r\n    uint8 public decimals = 18;\r\n    string public symbol = \"COE\";\r\n\r\n    address public owner;\r\n    address public devFeesAddr = 0x36Bdc3B60dC5491fbc7d74a05709E94d5b554321;\r\n    address tierAdmin;\r\n\r\n    uint256 public totalSupply = 100000000000000000000000;\r\n    uint public tierLevel = 1;\r\n    uint256 public fiatPerEth = 58332000000000000000000;\r\n    uint256 public circulatingSupply = 0;\r\n    uint maxTier = 132;\r\n    uint256 public devFees = 0;\r\n    uint256 fees = 10000;  // the calculation expects % * 100 (so 10% is 1000)\r\n\r\n    bool public receiveEth = false;\r\n    bool payFees = true;\r\n    bool distributionDone = false;\r\n    bool public canExchange = false;\r\n    bool addTiers = true;\r\n    bool public initialTiers = false;\r\n\r\n    // Storage\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => bool) public exchangePartners;\r\n\r\n    // mining schedule\r\n    mapping(uint => uint256) public scheduleTokens;\r\n    mapping(uint => uint256) public scheduleRates;\r\n\r\n    // events\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n\r\n    function COE() {\r\n        owner = msg.sender;\r\n        doPremine();\r\n    }\r\n\r\n    function doPremine() public {\r\n        require(msg.sender == owner);\r\n        require(distributionDone == false);\r\n        balances[owner] = add(balances[owner],32664993546427000000000);\r\n        Transfer(this, owner, 32664993546427000000000);\r\n        circulatingSupply = add(circulatingSupply, 32664993546427000000000);\r\n        totalSupply = sub(totalSupply,32664993546427000000000);\r\n        distributionDone = true;\r\n    }\r\n\r\n    function populateTierTokens() public {\r\n        require((msg.sender == owner) && (initialTiers == false));\r\n        scheduleTokens[1] = 1E21;\r\n        scheduleTokens[2] = 9E20;\r\n        scheduleTokens[3] = 8E20;\r\n        scheduleTokens[4] = 7E20;\r\n        scheduleTokens[5] = 2.3E21;\r\n        scheduleTokens[6] = 6.5E21;\r\n        scheduleTokens[7] = 2E21;\r\n        scheduleTokens[8] = 1.2E21;\r\n        scheduleTokens[9] = 4.5E21;\r\n        scheduleTokens[10] = 7.5E19;\r\n        scheduleTokens[11] = 7.5E19;\r\n        scheduleTokens[12] = 7.5E19;\r\n        scheduleTokens[13] = 7.5E19;\r\n        scheduleTokens[14] = 7.5E19;\r\n        scheduleTokens[15] = 7.5E19;\r\n        scheduleTokens[16] = 7.5E19;\r\n        scheduleTokens[17] = 7.5E19;\r\n        scheduleTokens[18] = 5.6E21;\r\n        scheduleTokens[19] = 7.5E19;\r\n        scheduleTokens[20] = 7.5E19;\r\n        scheduleTokens[21] = 7.5E19;\r\n        scheduleTokens[22] = 7.5E19;\r\n        scheduleTokens[23] = 7.5E19;\r\n        scheduleTokens[24] = 8.2E21;\r\n        scheduleTokens[25] = 2.5E21;\r\n        scheduleTokens[26] = 1.45E22;\r\n        scheduleTokens[27] = 7.5E19;\r\n        scheduleTokens[28] = 7.5E19;\r\n        scheduleTokens[29] = 7.5E19;\r\n        scheduleTokens[30] = 7.5E19;\r\n        scheduleTokens[31] = 7.5E19;\r\n        scheduleTokens[32] = 7.5E19;\r\n        scheduleTokens[33] = 7.5E19;\r\n        scheduleTokens[34] = 7.5E19;\r\n        scheduleTokens[35] = 7.5E19;\r\n        scheduleTokens[36] = 7.5E19;\r\n        scheduleTokens[37] = 7.5E19;\r\n        scheduleTokens[38] = 7.5E19;\r\n        scheduleTokens[39] = 7.5E19;\r\n        scheduleTokens[40] = 7.5E19;\r\n    }\r\n\r\n    function populateTierRates() public {\r\n        require((msg.sender == owner) && (initialTiers == false));\r\n        require(msg.sender == owner);\r\n        scheduleRates[1] = 3.85E23;\r\n        scheduleRates[2] = 6.1E23;\r\n        scheduleRates[3] = 4.15E23;\r\n        scheduleRates[4] = 5.92E23;\r\n        scheduleRates[5] = 9.47E23;\r\n        scheduleRates[6] = 1.1E24;\r\n        scheduleRates[7] = 1.123E24;\r\n        scheduleRates[8] = 1.115E24;\r\n        scheduleRates[9] = 1.135E24;\r\n        scheduleRates[10] = 1.013E24;\r\n        scheduleRates[11] = 8.48E23;\r\n        scheduleRates[12] = 8.17E23;\r\n        scheduleRates[13] = 7.3E23;\r\n        scheduleRates[14] = 9.8E23;\r\n        scheduleRates[15] = 1.007E24;\r\n        scheduleRates[16] = 1.45E24;\r\n        scheduleRates[17] = 1.242E24;\r\n        scheduleRates[18] = 1.383E24;\r\n        scheduleRates[19] = 1.442E24;\r\n        scheduleRates[20] = 2.048E24;\r\n        scheduleRates[21] = 1.358E24;\r\n        scheduleRates[22] = 1.245E24;\r\n        scheduleRates[23] = 9.94E23;\r\n        scheduleRates[24] = 1.14E24;\r\n        scheduleRates[25] = 1.253E24;\r\n        scheduleRates[26] = 1.29E24;\r\n        scheduleRates[27] = 1.126E24;\r\n        scheduleRates[28] = 1.173E24;\r\n        scheduleRates[29] = 1.074E24;\r\n        scheduleRates[30] = 1.127E24;\r\n        scheduleRates[31] = 1.223E24;\r\n        scheduleRates[32] = 1.145E24;\r\n        scheduleRates[33] = 1.199E24;\r\n        scheduleRates[34] = 1.319E24;\r\n        scheduleRates[35] = 1.312E24;\r\n        scheduleRates[36] = 1.287E24;\r\n        scheduleRates[37] = 1.175E24;\r\n        scheduleRates[38] = 1.175E24;\r\n        scheduleRates[39] = 1.146E24;\r\n        scheduleRates[40] = 1.098E24;\r\n        initialTiers = true;\r\n    }\r\n\r\n    function () payable public {\r\n        require((msg.value > 0) && (receiveEth));\r\n\r\n        if(payFees) {\r\n            devFees = add(devFees, ((msg.value * fees) / 10000));\r\n        }\r\n        allocateTokens(convertEthToCents(msg.value), 0);\r\n    }\r\n\r\n    function convertEthToCents(uint256 _incoming) internal returns (uint256) {\r\n        return mul(_incoming, fiatPerEth);\r\n    }\r\n\r\n    function allocateTokens(uint256 _submitted, uint256 tokenCount) internal {\r\n        uint256 _tokensAfforded = 0;\r\n        if((_submitted != 0) && (tierLevel <= maxTier)) {\r\n            _tokensAfforded = div(_submitted, scheduleRates[tierLevel]);\r\n        }\r\n\r\n        if(scheduleTokens[tierLevel] <= _tokensAfforded) {\r\n            scheduleTokens[tierLevel] = sub(scheduleTokens[tierLevel], _tokensAfforded);\r\n            tokenCount = add(tokenCount, _tokensAfforded);\r\n            circulatingSupply = add(circulatingSupply, _tokensAfforded);\r\n            totalSupply = sub(totalSupply, _tokensAfforded);\r\n        }\r\n        else if(_tokensAfforded > 0) {\r\n            scheduleTokens[tierLevel] = sub(scheduleTokens[tierLevel], _tokensAfforded);\r\n            tokenCount = add(tokenCount, _tokensAfforded);\r\n            circulatingSupply = add(circulatingSupply, _tokensAfforded);\r\n            totalSupply = sub(totalSupply, _tokensAfforded);\r\n            tierLevel++;\r\n            uint256 stepOne = _submitted;\r\n            uint256 stepTwo = mul(_tokensAfforded, scheduleRates[tierLevel]);\r\n\r\n            if(stepTwo <= stepOne) {\r\n                _submitted = sub(stepOne, stepTwo);\r\n            }\r\n            else _submitted = 0;\r\n\r\n            allocateTokens(_submitted, tokenCount);\r\n        }\r\n        else {\r\n            balances[msg.sender] = add(balances[msg.sender], tokenCount);\r\n            Transfer(this, msg.sender, tokenCount);\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public {\r\n        require(balances[msg.sender] >= _value);\r\n        totalSupply = add(totalSupply, _value);\r\n        circulatingSupply = sub(circulatingSupply, _value);\r\n\r\n        if(_to == address(this)) {\r\n            // WARNING: if you transfer tokens back to the contract you will lose them\r\n            // use the exchange function to exchange for tokens with approved partner contracts\r\n            balances[msg.sender] = sub(balanceOf(msg.sender), _value);\r\n            Transfer(msg.sender, _to, _value);\r\n        }\r\n        else {\r\n            uint codeLength;\r\n\r\n            assembly {\r\n                codeLength := extcodesize(_to)\r\n            }\r\n\r\n            if(codeLength != 0) {\r\n                if(canExchange == true) {\r\n                    if(exchangePartners[_to]) {\r\n                        // WARNING: exchanging COE into MNY costs more Gas than a normal transfer as we interact directly\r\n                        // with the MNY contract - suggest doubling the recommended gas limit\r\n                        exchange(_to, _value);\r\n                    }\r\n                    else {\r\n                        // WARNING: if you transfer to a contract that cannot handle incoming tokens you may lose them\r\n                        balances[msg.sender] = sub(balanceOf(msg.sender), _value);\r\n                        balances[_to] = add(balances[_to], _value);\r\n                        Transfer(msg.sender, _to, _value);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                balances[msg.sender] = sub(balanceOf(msg.sender), _value);\r\n                balances[_to] = add(balances[_to], _value);\r\n                Transfer(msg.sender, _to, _value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function exchange(address _partner, uint _amount) internal {\r\n        require(exchangePartners[_partner]);\r\n        requestTokensFromOtherContract(_partner, this, msg.sender, _amount);\r\n        balances[msg.sender] = sub(balanceOf(msg.sender), _amount);\r\n        circulatingSupply = sub(circulatingSupply, _amount);\r\n        totalSupply = add(totalSupply, _amount);\r\n        Transfer(msg.sender, this, _amount);\r\n    }\r\n\r\n    function requestTokensFromOtherContract(address _targetContract, address _sourceContract, address _recipient, uint256 _value) internal returns (bool){\r\n        Partner p = Partner(_targetContract);\r\n        p.exchangeTokensFromOtherContract(_sourceContract, _recipient, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _receiver) public constant returns (uint256) {\r\n        return balances[_receiver];\r\n    }\r\n\r\n    function balanceInTier() public constant returns (uint256) {\r\n        return scheduleTokens[tierLevel];\r\n    }\r\n\r\n    function balanceInSpecificTier(uint256 _tier) public constant returns (uint256) {\r\n        return scheduleTokens[_tier];\r\n    }\r\n\r\n    function rateOfSpecificTier(uint256 _tier) public constant returns (uint256) {\r\n        return scheduleRates[_tier];\r\n    }\r\n\r\n    function setFiatPerEthRate(uint256 _newRate) public {\r\n        require(msg.sender == owner);\r\n        fiatPerEth = _newRate;\r\n    }\r\n\r\n    function addExchangePartnerTargetAddress(address _partner) public {\r\n        require(msg.sender == owner);\r\n        exchangePartners[_partner] = true;\r\n    }\r\n\r\n    function canContractExchange(address _contract) public constant returns (bool) {\r\n        return exchangePartners[_contract];\r\n    }\r\n\r\n    function removeExchangePartnerTargetAddress(address _partner) public {\r\n        require(msg.sender == owner);\r\n        exchangePartners[_partner] = false;\r\n    }\r\n\r\n    function withdrawDevFees() public {\r\n        require(payFees);\r\n        devFeesAddr.transfer(devFees);\r\n        devFees = 0;\r\n    }\r\n\r\n    function changeDevFees(address _devFees) public {\r\n        require(msg.sender == owner);\r\n        devFeesAddr = _devFees;\r\n    }\r\n\r\n    function payFeesToggle() public {\r\n        require(msg.sender == owner);\r\n        if(payFees) {\r\n            payFees = false;\r\n        }\r\n        else {\r\n            payFees = true;\r\n        }\r\n    }\r\n\r\n    function safeWithdrawal(address _receiver, uint256 _value) public {\r\n        require(msg.sender == owner);\r\n        withdrawDevFees();\r\n        require(_value <= this.balance);\r\n        _receiver.transfer(_value);\r\n    }\r\n\r\n    // enables fee update - must be between 0 and 100 (%)\r\n    function updateFeeAmount(uint _newFee) public {\r\n        require(msg.sender == owner);\r\n        require((_newFee >= 0) && (_newFee <= 100));\r\n        fees = _newFee * 100;\r\n    }\r\n\r\n    function handleTokensFromOtherContracts(address _contract, address _recipient, uint256 _tokens) public {\r\n        require(msg.sender == owner);\r\n        Target t;\r\n        t = Target(_contract);\r\n        t.transfer(_recipient, _tokens);\r\n    }\r\n\r\n    function changeOwner(address _recipient) public {\r\n        require(msg.sender == owner);\r\n        owner = _recipient;\r\n    }\r\n\r\n    function changeTierAdmin(address _tierAdmin) public {\r\n        require((msg.sender == owner) || (msg.sender == tierAdmin));\r\n        tierAdmin = _tierAdmin;\r\n    }\r\n\r\n    function toggleReceiveEth() public {\r\n        require(msg.sender == owner);\r\n        if(receiveEth == true) {\r\n            receiveEth = false;\r\n        }\r\n        else receiveEth = true;\r\n    }\r\n\r\n    function toggleTokenExchange() public {\r\n        require(msg.sender == owner);\r\n        if(canExchange == true) {\r\n            canExchange = false;\r\n        }\r\n        else canExchange = true;\r\n    }\r\n\r\n    function addTierRateAndTokens(uint256 _rate, uint256 _tokens, uint256 _level) public {\r\n        require(((msg.sender == owner) || (msg.sender == tierAdmin)) && (addTiers == true));\r\n        scheduleTokens[_level] = _tokens;\r\n        scheduleRates[_level] = _rate;\r\n    }\r\n\r\n    // not really needed as we fix the max tiers on contract creation but just for completeness' sake we'll call this\r\n    // when all tiers have been added to the contract (not possible to deploy with all of them)\r\n    function closeTierAddition() public {\r\n        require(msg.sender == owner);\r\n        addTiers = false;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"devFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"scheduleRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiatPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDevFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_devFees\",\"type\":\"address\"}],\"name\":\"changeDevFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"addTierRateAndTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTiers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiveEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"handleTokensFromOtherContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleTokenExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"addExchangePartnerTargetAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleReceiveEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tierLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"rateOfSpecificTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFeesAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tierAdmin\",\"type\":\"address\"}],\"name\":\"changeTierAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updateFeeAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeTierAddition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceInTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"populateTierTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"scheduleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payFeesToggle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"balanceInSpecificTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doPremine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"canContractExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"populateTierRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangePartners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"removeExchangePartnerTargetAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setFiatPerEthRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"COE","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://75f6f758bb5b62b8076f127be3dcfb2c58eafaaff01e60c5e87d8e433426e808"}]}