{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\n \r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n \r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n   constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Interface {\r\n     function totalSupply() public constant returns (uint);\r\n     function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n     function transfer(address to, uint tokens) public returns (bool success);\r\n     function approve(address spender, uint tokens) public returns (bool success);\r\n     function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n     event Transfer(address indexed from, address indexed to, uint tokens);\r\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract Buyers{\r\n   \r\n    struct Buyer{\r\n        \r\n        string   name;  \r\n        string   country;\r\n        string   city; \r\n        string   b_address;\r\n        string   mobile;  \r\n    }\r\n    mapping(address=>Buyer) public registerbuyer;\r\n    event BuyerAdded(address  from, string name,string country,string city,string b_address,string mobile);\r\n    \r\n    \r\n      \r\n    function registerBuyer(string _name,string _country,string _city,string _address,string _mobile) public returns(bool){\r\n      \r\n         require(bytes(_name).length!=0 &&\r\n             bytes(_country).length!=0 &&\r\n             bytes(_city).length!=0 &&\r\n             bytes(_address).length!=0 &&\r\n             bytes(_mobile).length!=0  \r\n             \r\n        );\r\n        registerbuyer[msg.sender]=Buyer(_name,_country,_city,_address,_mobile);\r\n        emit BuyerAdded(msg.sender,_name,_country,_city,_address,_mobile);\r\n        return true;\r\n        \r\n    }\r\n   \r\n    function getBuyer() public constant returns(string name,string country, string city,string _address,string mobile ){\r\n        return (registerbuyer[msg.sender].name,registerbuyer[msg.sender].country,registerbuyer[msg.sender].city,registerbuyer[msg.sender].b_address,registerbuyer[msg.sender].mobile);\r\n    }\r\n    \r\n    function getBuyerbyaddress(address _useraddress) public constant returns(string name,string country, string city,string _address,string mobile ){\r\n        return (registerbuyer[_useraddress].name,registerbuyer[_useraddress].country,registerbuyer[_useraddress].city,registerbuyer[_useraddress].b_address,registerbuyer[_useraddress].mobile);\r\n    }\r\n    \r\n}\r\n\r\ncontract ProductsInterface {\r\n     \r\n    struct Product { // Struct\r\n        uint256  id;\r\n        string   name;  \r\n        string   image;\r\n        uint256  price;\r\n        string   detail;\r\n        address  _seller;\r\n         \r\n    }\r\n    event ProductAdded(uint256 indexed id,address seller, string  name,string  image, uint256  price,string  detail );\r\n   \r\n   \r\n    function addproduct(string _name,string _image,uint256 _price,string _detail)   public   returns (bool success);\r\n    function updateprice(uint _index, uint _price) public returns (bool success);\r\n  \r\n   function getproduuct(uint _index) public constant returns(uint256 id,string name,string image,uint256  price,string detail, address _seller);\r\n   function getproductprices() public constant returns(uint256[]);\r\n   \r\n}\r\n\r\ncontract OrderInterface{\r\n    struct Order { // Struct\r\n        uint256  id;\r\n        uint256   quantity;  \r\n        uint256   product_index;  \r\n        uint256  price;\r\n       \r\n        address  buyer;\r\n        address  seller;\r\n        uint256 status;\r\n         \r\n    }\r\n    uint256 public order_counter;\r\n    mapping (uint => Order) public orders;\r\n     \r\n    function placeorder(  uint256   quantity,uint256   product_index)  public returns(uint256);\r\n    event OrderPlace(uint256 indexed id, uint256   quantity,uint256   product_index,string   name,address  buyer, address  seller );\r\n   \r\n}\r\n\r\ncontract FeedToken is  ProductsInterface,OrderInterface, ERC20Interface,Ownable,Buyers {\r\n\r\n\r\n\r\n   using SafeMath for uint256;\r\n   //------------------------------------------------------------------------\r\n    uint256 public counter=0;\r\n    mapping (uint => Product) public seller_products;\r\n    mapping (uint => uint) public products_price;\r\n    mapping (address=> uint) public seller_total_products;\r\n   //------------------------------------------------------------------------\r\n   string public name;\r\n   string public symbol;\r\n   uint256 public decimals;\r\n\r\n   uint256 public _totalSupply;\r\n   uint256 order_counter=0;\r\n   mapping(address => uint256) tokenBalances;\r\n   address ownerWallet;\r\n   // Owner of account approves the transfer of an amount to another account\r\n   mapping (address => mapping (address => uint256)) allowed;\r\n   \r\n   mapping (address=>uint) privateSaleBuyerTokens;\r\n   address[] privateSaleBuyers;\r\n   \r\n   mapping (address=>uint) preSaleBuyerTokens;\r\n   address[] preSaleBuyers;\r\n   \r\n   mapping(address=>uint) teamMembers;\r\n   \r\n   uint privateSaleEndDate;\r\n   uint preSaleEndDate;\r\n   uint icoEndDate;\r\n   /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens.\r\n   */\r\n    constructor(address wallet) public {\r\n        owner = wallet;\r\n        name  = \"Feed\";\r\n        symbol = \"FEED\";\r\n        decimals = 18;\r\n        _totalSupply = 1000000000 * 10 ** uint(decimals);\r\n        tokenBalances[ msg.sender] = _totalSupply;   //Since we divided the token into 10^18 parts\r\n    }\r\n    \r\n     // Get the token balance for account `tokenOwner`\r\n     function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n         return tokenBalances[tokenOwner];\r\n     }\r\n  \r\n     // Transfer the balance from owner's account to another account\r\n     function transfer(address to, uint tokens) public returns (bool success) {\r\n         require(to != address(0));\r\n         require(tokens <= tokenBalances[msg.sender]);\r\n         checkTokenVesting(msg.sender, tokens);\r\n         tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(tokens);\r\n         tokenBalances[to] = tokenBalances[to].add(tokens);\r\n         emit Transfer(msg.sender, to, tokens);\r\n         return true;\r\n     }\r\n     function checkUser() public constant returns(string ){\r\n         require(bytes(registerbuyer[msg.sender].name).length!=0);\r\n          \r\n             return \"Register User\";\r\n     }\r\n     \r\n     function checkTokenVesting(address sender, uint tokens) internal {\r\n         uint lockupTime;\r\n         uint daysPassedSinceEndDate;\r\n         uint lockedTokens;\r\n         if (preSaleBuyerTokens[sender] > 0 || privateSaleBuyerTokens[sender]>0 || teamMembers[sender]>0)\r\n         {\r\n             if (teamMembers[sender]>0)\r\n             {\r\n                lockupTime = uint(24).mul(uint(30)).mul(1 days);\r\n                if (now<icoEndDate.add(lockupTime))\r\n                {\r\n                    lockedTokens = teamMembers[sender];\r\n                    if (lockedTokens.add(tokens)>tokenBalances[sender])\r\n                        revert();\r\n                }   \r\n             }\r\n             else if (privateSaleBuyerTokens[sender]>0)\r\n             {\r\n                lockupTime = uint(12).mul(uint(30)).mul(1 days);\r\n                uint daysPassedSincePrivateSaleEnd = now.sub(privateSaleEndDate);\r\n                daysPassedSincePrivateSaleEnd = daysPassedSincePrivateSaleEnd.div(1 days);\r\n                uint monthsPassedSinceICOEnd = daysPassedSincePrivateSaleEnd.div(30);\r\n                uint unlockedTokens = privateSaleBuyerTokens[sender].div(12).mul(monthsPassedSinceICOEnd);\r\n                lockedTokens = privateSaleBuyerTokens[sender].sub(unlockedTokens);\r\n                if (lockedTokens.add(tokens)>tokenBalances[sender])\r\n                    revert();\r\n                \r\n             }\r\n             else if (preSaleBuyerTokens[sender]>0)\r\n             {\r\n               lockupTime = uint(3).mul(uint(30)).mul(1 days);\r\n               if (now<preSaleEndDate.add(lockupTime))\r\n                {\r\n                    lockedTokens = preSaleBuyerTokens[sender];\r\n                    if (lockedTokens.add(tokens)>tokenBalances[sender])\r\n                        revert();\r\n                }   \r\n             }\r\n         }\r\n     }\r\n     /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n   \r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= tokenBalances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    checkTokenVesting(_from,_value);\r\n    tokenBalances[_from] = tokenBalances[_from].sub(_value);\r\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n     /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n     // ------------------------------------------------------------------------\r\n     // Total supply\r\n     // ------------------------------------------------------------------------\r\n     function totalSupply() public constant returns (uint) {\r\n         return _totalSupply  - tokenBalances[address(0)];\r\n     }\r\n     \r\n    \r\n     \r\n     // ------------------------------------------------------------------------\r\n     // Returns the amount of tokens approved by the owner that can be\r\n     // transferred to the spender's account\r\n     // ------------------------------------------------------------------------\r\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n         return allowed[tokenOwner][spender];\r\n     }\r\n     \r\n     /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n     \r\n     // ------------------------------------------------------------------------\r\n     // Don't accept ETH\r\n     // ------------------------------------------------------------------------\r\n     function () public payable {\r\n         revert();\r\n     }\r\n \r\n \r\n     // ------------------------------------------------------------------------\r\n     // Owner can transfer out any accidentally sent ERC20 tokens\r\n     // ------------------------------------------------------------------------\r\n     function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n         return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n     }\r\n     \r\n    \r\n     function placeorder( uint256   quantity,uint256   product_index)  public  returns(uint256) {\r\n         \r\n        require(counter>=product_index && product_index>0);\r\n        require(bytes(registerbuyer[msg.sender].name).length!=0);//to place order you first register yourself\r\n         \r\n        transfer(seller_products[product_index]._seller,seller_products[product_index].price*quantity);\r\n        orders[order_counter] = Order(order_counter,quantity,product_index,seller_products[product_index].price, msg.sender,seller_products[product_index]._seller,0);\r\n        \r\n        emit OrderPlace(order_counter,quantity, product_index,  seller_products[product_index].name, msg.sender, seller_products[product_index]._seller );\r\n        order_counter++;\r\n        return counter;\r\n    }\r\n    \r\n    //------------------------------------------------------------------------\r\n    // product methods\r\n    //------------------------------------------------------------------------\r\n   \r\n   \r\n    function addproduct(string _name,string _image,uint256 _price,string _detail)   public   returns (bool success){\r\n          require(bytes(_name).length!=0 &&\r\n             bytes(_image).length!=0 &&\r\n             bytes(_detail).length!=0 \r\n            \r\n             \r\n        );\r\n        counter++;\r\n        seller_products[counter] = Product(counter,_name,_image, _price,_detail,msg.sender);\r\n        products_price[counter]=_price;\r\n        emit ProductAdded(counter,msg.sender,_name,_image,_price,_detail);\r\n        return true;\r\n   }\r\n  \r\n   function updateprice(uint _index, uint _price) public returns (bool success){\r\n      require(seller_products[_index]._seller==msg.sender);\r\n       \r\n     \r\n      seller_products[_index].price=_price;\r\n      products_price[_index]=_price;\r\n      return true;\r\n  }\r\n  \r\n   function getproduuct(uint _index) public constant returns(uint256 ,string ,string ,uint256  ,string , address )\r\n   {\r\n       return(seller_products[_index].id,seller_products[_index].name,seller_products[_index].image,products_price[_index],seller_products[_index].detail,seller_products[_index]._seller);\r\n   }\r\n   function getproductprices() public constant returns(uint256[])\r\n   {\r\n       uint256[] memory price = new uint256[](counter);\r\n        \r\n        for (uint i = 0; i <counter; i++) {\r\n           \r\n            price[i]=products_price[i+1];\r\n             \r\n        }\r\n      return price;\r\n   }\r\n    \r\n    //------------------------------------------------------------------------\r\n    //end Products\r\n    //------------------------------------------------------------------------\r\n    \r\n    function addPrivateSaleEndDate(uint256 endDate) public onlyOwner {\r\n        privateSaleEndDate = endDate;\r\n    }\r\n    \r\n    function addPreSaleEndDate(uint256 endDate) public onlyOwner {\r\n        preSaleEndDate = endDate;\r\n    }\r\n    \r\n    function addICOEndDate(uint256 endDate) public onlyOwner {\r\n        icoEndDate = endDate;\r\n    }\r\n    \r\n    function addTeamAndAdvisoryMembers(address[] members) public onlyOwner \r\n    {\r\n        uint totalTeamShare = uint(100000000).mul(10**uint(decimals));\r\n        uint oneTeamMemberShare = totalTeamShare.div(members.length);\r\n        for (uint i=0;i<members.length;i++)\r\n        {\r\n            teamMembers[members[i]] = oneTeamMemberShare;\r\n            tokenBalances[owner] = tokenBalances[owner].sub(oneTeamMemberShare);\r\n            tokenBalances[members[i]] = tokenBalances[members[i]].add(oneTeamMemberShare);\r\n            emit Transfer(owner,members[i],oneTeamMemberShare);\r\n        }    \r\n    }\r\n    function addPrivateSaleBuyer(address buyer,uint value) public onlyOwner \r\n    {\r\n        privateSaleBuyerTokens[buyer] = value;        \r\n    }\r\n    function addPreSaleBuyer(address buyer,uint value) public onlyOwner \r\n    {\r\n        preSaleBuyerTokens[buyer] = value;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getproduuct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"quantity\",\"type\":\"uint256\"},{\"name\":\"product_index\",\"type\":\"uint256\"}],\"name\":\"placeorder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addPrivateSaleBuyer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"addPreSaleEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"seller_total_products\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBuyer\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"string\"},{\"name\":\"mobile\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"products_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateprice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"members\",\"type\":\"address[]\"}],\"name\":\"addTeamAndAdvisoryMembers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addPreSaleBuyer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getproductprices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"quantity\",\"type\":\"uint256\"},{\"name\":\"product_index\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"order_counter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seller_products\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"image\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"detail\",\"type\":\"string\"},{\"name\":\"_seller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkUser\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_image\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_detail\",\"type\":\"string\"}],\"name\":\"addproduct\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"addPrivateSaleEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_country\",\"type\":\"string\"},{\"name\":\"_city\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"string\"},{\"name\":\"_mobile\",\"type\":\"string\"}],\"name\":\"registerBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_useraddress\",\"type\":\"address\"}],\"name\":\"getBuyerbyaddress\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"string\"},{\"name\":\"mobile\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registerbuyer\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"b_address\",\"type\":\"string\"},{\"name\":\"mobile\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"addICOEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"country\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"city\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b_address\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"mobile\",\"type\":\"string\"}],\"name\":\"BuyerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"product_index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"OrderPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"image\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"detail\",\"type\":\"string\"}],\"name\":\"ProductAdded\",\"type\":\"event\"}]","ContractName":"FeedToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ed64942a47ade01406854c6b2e010dd31c8d3a6f","Library":"","SwarmSource":"bzzr://050ad01d3db680f54ebe683c18300fcdbe5f309ac25ed1cc7d511a28ea0907bb"}]}