{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC721 interface\r\n * @dev see https://github.com/ethereum/eips/issues/721\r\n */\r\ncontract ERC721 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  \r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract CountryToken {\r\n  function getCountryData (uint256 _tokenId) external view returns (address _owner, uint256 _startingPrice, uint256 _price, uint256 _nextPrice, uint256 _payout);\r\n}\r\n\r\n/**\r\n * @title ERC721Token\r\n * Generic implementation for the required functionality of the ERC721 standard\r\n */\r\ncontract CityToken is ERC721, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  address cAddress = 0x0c507D48C0cd1232B82aA950d487d01Cfc6442Db;\r\n  \r\n  CountryToken countryContract = CountryToken(cAddress);\r\n\r\n  //CountryToken private countryContract;\r\n  uint32 constant COUNTRY_IDX = 100;\r\n  uint256 constant COUNTRY_PAYOUT = 15; // 15%\r\n\r\n  // Total amount of tokens\r\n  uint256 private totalTokens;\r\n  uint256[] private listedCities;\r\n  uint256 public devOwed;\r\n  uint256 public poolTotal;\r\n  uint256 public lastPurchase;\r\n\r\n  // City Data\r\n  mapping (uint256 => City) public cityData;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private tokenApprovals;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) private ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private ownedTokensIndex;\r\n\r\n  // Balances from % payouts.\r\n  mapping (address => uint256) private payoutBalances; \r\n\r\n  // The amount of Eth this country has withdrawn from the pool.\r\n  mapping (uint256 => uint256) private countryWithdrawn;\r\n\r\n  // Events\r\n  event CityPurchased(uint256 indexed _tokenId, address indexed _owner, uint256 _purchasePrice);\r\n\r\n  // Purchasing Caps for Determining Next Pool Cut\r\n  uint256 private firstCap  = 0.12 ether;\r\n  uint256 private secondCap = 0.5 ether;\r\n  uint256 private thirdCap  = 1.5 ether;\r\n\r\n  // Struct to store City Data\r\n  struct City {\r\n      uint256 price;         // Current price of the item.\r\n      uint256 lastPrice;     // lastPrice this was sold for, used for adding to pool.\r\n      uint256 payout;        // The percent of the pool rewarded.\r\n      uint256 withdrawn;     // The amount of Eth this city has withdrawn from the pool.\r\n      address owner;         // Current owner of the item.\r\n  }\r\n\r\n  /**\r\n   * @param _tokenId uint256 ID of new token\r\n   * @param _payoutPercentage uint256 payout percentage (divisible by 10)\r\n   */\r\n   function createPromoListing(uint256 _tokenId, uint256 _startingPrice, uint256 _payoutPercentage) onlyOwner() public {\r\n     uint256 countryId = _tokenId % COUNTRY_IDX;\r\n     address countryOwner;\r\n     uint256 price;\r\n     (countryOwner,,price,,) = countryContract.getCountryData(countryId);\r\n     require (countryOwner != address(0));\r\n\r\n     if (_startingPrice == 0) {\r\n       if (price >= thirdCap) _startingPrice = price.div(80);\r\n       else if (price >= secondCap) _startingPrice = price.div(75);\r\n       else _startingPrice = 0.002 ether;\r\n     }\r\n\r\n     createListing(_tokenId, _startingPrice, _payoutPercentage, countryOwner);\r\n   }\r\n\r\n  /**\r\n  * @dev createListing Adds new ERC721 Token\r\n  * @param _tokenId uint256 ID of new token\r\n  * @param _payoutPercentage uint256 payout percentage (divisible by 10)\r\n  * @param _owner address of new owner\r\n  */\r\n  function createListing(uint256 _tokenId, uint256 _startingPrice, uint256 _payoutPercentage, address _owner) onlyOwner() public {\r\n\r\n    // make sure price > 0\r\n    require(_startingPrice > 0);\r\n    // make sure token hasn't been used yet\r\n    require(cityData[_tokenId].price == 0);\r\n    \r\n    // create new token\r\n    City storage newCity = cityData[_tokenId];\r\n\r\n    newCity.owner = _owner;\r\n    newCity.price = _startingPrice;\r\n    newCity.lastPrice = 0;\r\n    newCity.payout = _payoutPercentage;\r\n\r\n    // store city in storage\r\n    listedCities.push(_tokenId);\r\n    \r\n    // mint new token\r\n    _mint(_owner, _tokenId);\r\n  }\r\n\r\n  function createMultiple (uint256[] _itemIds, uint256[] _prices, uint256[] _payouts, address _owner) onlyOwner() external {\r\n    for (uint256 i = 0; i < _itemIds.length; i++) {\r\n      createListing(_itemIds[i], _prices[i], _payouts[i], _owner);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Determines next price of token\r\n  * @param _price uint256 ID of current price\r\n  */\r\n  function getNextPrice (uint256 _price) private view returns (uint256 _nextPrice) {\r\n    if (_price < firstCap) {\r\n      return _price.mul(200).div(94);\r\n    } else if (_price < secondCap) {\r\n      return _price.mul(135).div(95);\r\n    } else if (_price < thirdCap) {\r\n      return _price.mul(118).div(96);\r\n    } else {\r\n      return _price.mul(115).div(97);\r\n    }\r\n  }\r\n\r\n  function calculatePoolCut (uint256 _price) public view returns (uint256 _poolCut) {\r\n    if (_price < firstCap) {\r\n      return _price.mul(10).div(100); // 10%\r\n    } else if (_price < secondCap) {\r\n      return _price.mul(9).div(100); // 9%\r\n    } else if (_price < thirdCap) {\r\n      return _price.mul(8).div(100); // 8%\r\n    } else {\r\n      return _price.mul(7).div(100); // 7%\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Purchase city from previous owner\r\n  * @param _tokenId uint256 of token\r\n  */\r\n  function purchaseCity(uint256 _tokenId) public \r\n    payable\r\n    isNotContract(msg.sender)\r\n  {\r\n\r\n    // get data from storage\r\n    City storage city = cityData[_tokenId];\r\n    uint256 price = city.price;\r\n    address oldOwner = city.owner;\r\n    address newOwner = msg.sender;\r\n\r\n    // revert checks\r\n    require(price > 0);\r\n    require(msg.value >= price);\r\n    require(oldOwner != msg.sender);\r\n\r\n    uint256 excess = msg.value.sub(price);\r\n\r\n    // Calculate pool cut for taxes.\r\n    uint256 profit = price.sub(city.lastPrice);\r\n    uint256 poolCut = calculatePoolCut(profit);\r\n    poolTotal += poolCut;\r\n\r\n    // 3% goes to developers\r\n    uint256 devCut = price.mul(3).div(100);\r\n    devOwed = devOwed.add(devCut);\r\n\r\n    transferCity(oldOwner, newOwner, _tokenId);\r\n\r\n    // set new prices\r\n    city.lastPrice = price;\r\n    city.price = getNextPrice(price);\r\n\r\n    // raise event\r\n    CityPurchased(_tokenId, newOwner, price);\r\n\r\n    // Transfer payment to old owner minus the developer's and pool's cut.\r\n    oldOwner.transfer(price.sub(devCut.add(poolCut)));\r\n\r\n    // Transfer 10% profit to current country owner\r\n    uint256 countryId = _tokenId % COUNTRY_IDX;\r\n    address countryOwner;\r\n    (countryOwner,,,,) = countryContract.getCountryData(countryId);\r\n    require (countryOwner != address(0));\r\n    countryOwner.transfer(poolCut.mul(COUNTRY_PAYOUT).div(100));\r\n\r\n    // Send refund to owner if needed\r\n    if (excess > 0) {\r\n      newOwner.transfer(excess);\r\n    }\r\n\r\n    // set last purchase price to storage\r\n    lastPurchase = now;\r\n\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer City from Previous Owner to New Owner\r\n  * @param _from previous owner address\r\n  * @param _to new owner address\r\n  * @param _tokenId uint256 ID of token\r\n  */\r\n  function transferCity(address _from, address _to, uint256 _tokenId) internal {\r\n\r\n    // check token exists\r\n    require(tokenExists(_tokenId));\r\n\r\n    // make sure previous owner is correct\r\n    require(cityData[_tokenId].owner == _from);\r\n\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n\r\n    // pay any unpaid payouts to previous owner of city\r\n    updateSinglePayout(_from, _tokenId);\r\n\r\n    // clear approvals linked to this token\r\n    clearApproval(_from, _tokenId);\r\n\r\n    // remove token from previous owner\r\n    removeToken(_from, _tokenId);\r\n\r\n    // update owner and add token to new owner\r\n    cityData[_tokenId].owner = _to;\r\n    addToken(_to, _tokenId);\r\n\r\n   //raise event\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Withdraw dev's cut\r\n  */\r\n  function withdraw() onlyOwner public {\r\n    owner.transfer(devOwed);\r\n    devOwed = 0;\r\n  }\r\n\r\n  /**\r\n  * @dev Sets item's payout\r\n  * @param _itemId itemId to be changed\r\n  */\r\n  function setPayout(uint256 _itemId, uint256 _newPayout) onlyOwner public {\r\n    City storage city = cityData[_itemId];\r\n    city.payout = _newPayout;\r\n  }\r\n\r\n  /**\r\n  * @dev Updates the payout for the cities the owner has\r\n  * @param _owner address of token owner\r\n  */\r\n  function updatePayout(address _owner) public {\r\n    uint256[] memory cities = ownedTokens[_owner];\r\n    uint256 owed;\r\n    for (uint256 i = 0; i < cities.length; i++) {\r\n        uint256 totalCityOwed = poolTotal * cityData[cities[i]].payout / 10000;\r\n        uint256 cityOwed = totalCityOwed.sub(cityData[cities[i]].withdrawn);\r\n        owed += cityOwed;\r\n        \r\n        cityData[cities[i]].withdrawn += cityOwed;\r\n    }\r\n    payoutBalances[_owner] += owed;\r\n  }\r\n\r\n  /**\r\n   * @dev Update a single city payout for transfers.\r\n   * @param _owner Address of the owner of the city.\r\n   * @param _itemId Unique Id of the token.\r\n  **/\r\n  function updateSinglePayout(address _owner, uint256 _itemId) internal {\r\n    uint256 totalCityOwed = poolTotal * cityData[_itemId].payout / 10000;\r\n    uint256 cityOwed = totalCityOwed.sub(cityData[_itemId].withdrawn);\r\n        \r\n    cityData[_itemId].withdrawn += cityOwed;\r\n    payoutBalances[_owner] += cityOwed;\r\n  }\r\n\r\n  /**\r\n  * @dev Owner can withdraw their accumulated payouts\r\n  * @param _owner address of token owner\r\n  */\r\n  function withdrawRent(address _owner) public {\r\n      updatePayout(_owner);\r\n      uint256 payout = payoutBalances[_owner];\r\n      payoutBalances[_owner] = 0;\r\n      _owner.transfer(payout);\r\n  }\r\n\r\n  function getRentOwed(address _owner) public view returns (uint256 owed) {\r\n    updatePayout(_owner);\r\n    return payoutBalances[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Return all city data\r\n  * @param _tokenId uint256 of token\r\n  */\r\n  function getCityData (uint256 _tokenId) external view \r\n  returns (address _owner, uint256 _price, uint256 _nextPrice, uint256 _payout, address _cOwner, uint256 _cPrice, uint256 _cPayout) \r\n  {\r\n    City memory city = cityData[_tokenId];\r\n    address countryOwner;\r\n    uint256 countryPrice;\r\n    uint256 countryPayout;\r\n    (countryOwner,,countryPrice,,countryPayout) = countryContract.getCountryData(_tokenId % COUNTRY_IDX);\r\n    return (city.owner, city.price, getNextPrice(city.price), city.payout, countryOwner, countryPrice, countryPayout);\r\n  }\r\n\r\n  /**\r\n  * @dev Determines if token exists by checking it's price\r\n  * @param _tokenId uint256 ID of token\r\n  */\r\n  function tokenExists (uint256 _tokenId) public view returns (bool _exists) {\r\n    return cityData[_tokenId].price > 0;\r\n  }\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is owner of the given token\r\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n  */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is not a contract\r\n  * @param _buyer address of person buying city\r\n  */\r\n  modifier isNotContract(address _buyer) {\r\n    uint size;\r\n    assembly { size := extcodesize(_buyer) }\r\n    require(size == 0);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the total amount of tokens stored by the contract\r\n  * @return uint256 representing the total amount of tokens\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalTokens;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return ownedTokens[_owner].length;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the list of tokens owned by a given address\r\n  * @param _owner address to query the tokens of\r\n  * @return uint256[] representing the list of tokens owned by the passed address\r\n  */\r\n  function tokensOf(address _owner) public view returns (uint256[]) {\r\n    return ownedTokens[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the owner of the specified token ID\r\n  * @param _tokenId uint256 ID of the token to query the owner of\r\n  * @return owner address currently marked as the owner of the given token ID\r\n  */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address to take ownership of a given token ID\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved to take ownership of the given token ID\r\n   */\r\n  function approvedFor(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers the ownership of a given token ID to another address\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Approves another address to claim for the ownership of the given token ID\r\n  * @param _to address to be approved for the given token ID\r\n  * @param _tokenId uint256 ID of the token to be approved\r\n  */\r\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Claims the ownership of a given token ID\r\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\r\n  */\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    require(isApprovedFor(msg.sender, _tokenId));\r\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\r\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\r\n   * @param _owner address of the owner to query the approval of\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return bool whether the msg.sender is approved for the given token ID or not\r\n   */\r\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\r\n    return approvedFor(_tokenId) == _owner;\r\n  }\r\n  \r\n  /**\r\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\r\n  * @param _from address which you want to send tokens from\r\n  * @param _to address which you want to transfer the token to\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal isNotContract(_to) {\r\n    require(_to != address(0));\r\n    require(_to != ownerOf(_tokenId));\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    clearApproval(_from, _tokenId);\r\n    updateSinglePayout(_from, _tokenId);\r\n    removeToken(_from, _tokenId);\r\n    addToken(_to, _tokenId);\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval of a given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApproval(address _owner, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    tokenApprovals[_tokenId] = 0;\r\n    Approval(_owner, 0, _tokenId);\r\n  }\r\n\r\n\r\n    /**\r\n  * @dev Mint token function\r\n  * @param _to The address that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addToken(_to, _tokenId);\r\n    Transfer(0x0, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addToken(address _to, uint256 _tokenId) private {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    cityData[_tokenId].owner = _to;\r\n    uint256 length = balanceOf(_to);\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n    totalTokens = totalTokens.add(1);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeToken(address _from, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    tokenOwner[_tokenId] = 0;\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n    totalTokens = totalTokens.sub(1);\r\n  }\r\n\r\n  function name() public pure returns (string _name) {\r\n    return \"EtherCities.io City\";\r\n  }\r\n\r\n  function symbol() public pure returns (string _symbol) {\r\n    return \"EC\";\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"name\":\"_exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getRentOwed\",\"outputs\":[{\"name\":\"owed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cityData\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"name\":\"payout\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculatePoolCut\",\"outputs\":[{\"name\":\"_poolCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"name\":\"_payouts\",\"type\":\"uint256[]\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawRent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCityData\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"name\":\"_payout\",\"type\":\"uint256\"},{\"name\":\"_cOwner\",\"type\":\"address\"},{\"name\":\"_cPrice\",\"type\":\"uint256\"},{\"name\":\"_cPayout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_payoutPercentage\",\"type\":\"uint256\"}],\"name\":\"createPromoListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_payoutPercentage\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devOwed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"updatePayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_newPayout\",\"type\":\"uint256\"}],\"name\":\"setPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseCity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_purchasePrice\",\"type\":\"uint256\"}],\"name\":\"CityPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CityToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fc7549c0f8bb36ac95b2109f21815b097100a5ecdd99235a4df90c7d91aa100b"}]}