{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n}\r\n\r\ncontract BasicToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n\r\n    /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n}\r\n\r\n\r\n    /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract TalentToken is BasicToken {\r\n\r\nusing SafeMath for uint256;\r\n\r\nstring public name = \"Talent Token\";              \r\nstring public symbol = \"TAL\";                               // Token's Symbol\r\nuint8 public decimals = 18;                                 // How Many Decimals for Token\r\nuint256 public totalSupply = 98000000 * 10**18;             // The total supply.\r\n\r\n// variables\r\nuint256 public TotalTokens;                // variable to keep track of funds allocated\r\nuint256 public LongTermProjectTokens;      // Funds to be used in the long term for the development of future projects.\r\nuint256 public TeamFundsTokens;            // Funds for the team.\r\nuint256 public IcoTokens;                  // Funds to be used for the ICO\r\nuint256 public platformTokens;             // Tokens to be retained for future sale by various platforms.\r\n\r\n// addresses    \r\naddress public owner;                               // Owner of the Contract\r\naddress public crowdFundAddress;                    // Crowdfund Contract Address\r\naddress public founderAddress = 0xe3f38940A588922F2082FE30bCAe6bB0aa633a7b;\r\naddress public LongTermProjectTokensAddress = 0x689Aff79dCAbdFd611273703C62821baBb39823a;\r\naddress public teamFundsAddress = 0x2dd75A9A6C99B824811e3aCe16a63882Ff4C1C03;\r\naddress public platformTokensAddress = 0x5F0Be8081692a3A96d2ad10Ae5ce14488a045B10;\r\n\r\n//events\r\n\r\nevent ChangeFoundersWalletAddress(uint256  _blockTimeStamp, address indexed _foundersWalletAddress);\r\n\r\n//modifiers\r\n\r\n  modifier onlyCrowdFundAddress() {\r\n    require(msg.sender == crowdFundAddress);\r\n    _;\r\n  }\r\n\r\n  modifier nonZeroAddress(address _to) {\r\n    require(_to != 0x0);\r\n    _;\r\n  }\r\n\r\n  modifier onlyFounders() {\r\n    require(msg.sender == founderAddress);\r\n    _;\r\n  }\r\n  \r\n   // creation of the token contract \r\n   function TalentToken (address _crowdFundAddress) {\r\n    owner = msg.sender;\r\n    crowdFundAddress = _crowdFundAddress;\r\n\r\n    // Token Distribution \r\n    LongTermProjectTokens = 22540000 * 10**18;    // 23 % allocation of totalSupply. Used for further development of projects.\r\n    TeamFundsTokens = 1960000 * 10**18;           // 2% of total tokens.\r\n    platformTokens = 19600000 * 10**18;           // 20% of total tokens.\r\n    IcoTokens = 53900000 * 10**18;                // ICO Tokens = 55% allocation of totalSupply\r\n\r\n    //Assigned budget\r\n    balances[crowdFundAddress] = IcoTokens;\r\n    balances[LongTermProjectTokensAddress] = LongTermProjectTokens;\r\n    balances[teamFundsAddress] = TeamFundsTokens;\r\n    balances[platformTokensAddress] = platformTokens;\r\n\r\n  }\r\n\r\n\r\n// fallback function to restrict direct sending of ether\r\n  function () {\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\ncontract TalentICO {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    TalentToken public token;                                 // Token contract reference\r\n         \r\n    uint256 public IcoStartDate = 1519862400;                 // March 1st, 2018, 00:00:00\r\n    uint256 public IcoEndDate = 1546300799;                   // 31st Dec, 11:59:59\r\n    uint256 public WeiRaised;                                 // Counter to track the amount raised\r\n    uint256 public initialExchangeRateForETH = 15000;         // Initial Number of Token per Ether\r\n    uint256 internal IcoTotalTokensSold = 0;\r\n    uint256 internal minAmount = 1 * 10 ** 17;                //The minimum amount to trade.\r\n    bool internal isTokenDeployed = false;                    // Flag to track the token deployment -- only can be set once\r\n\r\n\r\n     // Founder's Address\r\n    address public founderAddress = 0xe3f38940A588922F2082FE30bCAe6bB0aa633a7b;                            \r\n    // Owner of the contract\r\n    address public owner;                                              \r\n    \r\n    enum State {Crowdfund, Finish}\r\n\r\n    //events\r\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount); \r\n    event CrowdFundClosed(uint256 _blockTimeStamp);\r\n    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\r\n   \r\n    //Modifiers\r\n    modifier tokenIsDeployed() {\r\n        require(isTokenDeployed == true);\r\n        _;\r\n    }\r\n    modifier nonZeroEth() {\r\n        require(msg.value > 0);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroAddress(address _to) {\r\n        require(_to != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFounders() {\r\n        require(msg.sender == founderAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPublic() {\r\n        require(msg.sender != founderAddress);\r\n        _;\r\n    }\r\n\r\n    modifier inState(State state) {\r\n        require(getState() == state); \r\n        _;\r\n    }\r\n\r\n     // Constructor\r\n    function TalentICO () {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner returns (bool) {\r\n        owner = newOwner;\r\n    }\r\n\r\n    // Used to attach the token's contract.\r\n    function setTokenAddress(address _tokenAddress) external onlyFounders nonZeroAddress(_tokenAddress) {\r\n        require(isTokenDeployed == false);\r\n        token = TalentToken(_tokenAddress);\r\n        isTokenDeployed = true;\r\n    }\r\n\r\n\r\n    // Used to change founder's address.\r\n     function setfounderAddress(address _newFounderAddress) onlyFounders  nonZeroAddress(_newFounderAddress) {\r\n        founderAddress = _newFounderAddress;\r\n        ChangeFoundersWalletAddress(now, founderAddress);\r\n    }\r\n\r\n    // function call after ICO ends.\r\n    // Transfers Remaining Tokens to holder.\r\n    function ICOend() onlyFounders inState(State.Finish) returns (bool) {\r\n        require(now > IcoEndDate);\r\n        uint256 remainingToken = token.balanceOf(this);  // remaining tokens\r\n        if (remainingToken != 0) \r\n          token.transfer(founderAddress, remainingToken); \r\n        CrowdFundClosed(now);\r\n        return true; \r\n    }\r\n\r\n    // Allows users to buy tokens.\r\n    function buyTokens(address beneficiary) \r\n    nonZeroEth \r\n    tokenIsDeployed \r\n    onlyPublic \r\n    nonZeroAddress(beneficiary) \r\n    payable \r\n    returns(bool) \r\n    {\r\n        require(msg.value >= minAmount);\r\n\r\n        require(now >= IcoStartDate && now <= IcoEndDate);\r\n        fundTransfer(msg.value);\r\n\r\n        uint256 amount = numberOfTokens(getCurrentExchangeRate(), msg.value);\r\n            \r\n        if (token.transfer(beneficiary, amount)) {\r\n            IcoTotalTokensSold = IcoTotalTokensSold.add(amount);\r\n            WeiRaised = WeiRaised.add(msg.value);\r\n            TokenPurchase(beneficiary, msg.value, amount);\r\n            return true;\r\n        } \r\n\r\n    return false;\r\n       \r\n    }\r\n\r\n    // Function determines current exchange rate.\r\n    // This increases the price of the token, as time passes.\r\n    function getCurrentExchangeRate() internal view returns (uint256) {\r\n\r\n        uint256 timeDiff = IcoEndDate - IcoStartDate;\r\n\r\n        uint256 etherDiff = 11250; //Difference of exchange rate between start date and end date.\r\n\r\n        uint256 initialTimeDiff = now - IcoStartDate;\r\n\r\n        uint256 exchangeRateLess = (initialTimeDiff * etherDiff) / timeDiff;\r\n\r\n        return (initialExchangeRateForETH - exchangeRateLess);    \r\n\r\n    }\r\n           \r\n\r\n// Calculates total number of tokens.\r\n    function numberOfTokens(uint256 _exchangeRate, uint256 _amount) internal constant returns (uint256) {\r\n         uint256 noOfToken = _amount.mul(_exchangeRate);\r\n         return noOfToken;\r\n    }\r\n\r\n    // Transfers funds to founder's account.\r\n    function fundTransfer(uint256 weiAmount) internal {\r\n        founderAddress.transfer(weiAmount);\r\n    }\r\n\r\n\r\n// Get functions \r\n\r\n    // Gets the current state of the crowdsale\r\n    function getState() public constant returns(State) {\r\n\r\n        if (now >= IcoStartDate && now <= IcoEndDate) {\r\n            return State.Crowdfund;\r\n        } \r\n        return State.Finish;\r\n    }\r\n\r\n    // GET functions\r\n\r\n    function getExchangeRate() public constant returns (uint256 _exchangeRateForETH) {\r\n\r\n        return getCurrentExchangeRate();\r\n    \r\n    }\r\n\r\n    function getNoOfSoldToken() public constant returns (uint256 _IcoTotalTokensSold) {\r\n        return (IcoTotalTokensSold);\r\n    }\r\n\r\n    function getWeiRaised() public constant returns (uint256 _WeiRaised) {\r\n        return WeiRaised;\r\n    }\r\n\r\n    //Sends ether to founder's address.\r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformTokensAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TeamFundsTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamFundsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IcoTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LongTermProjectTokensAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LongTermProjectTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdFundAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockTimeStamp\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_foundersWalletAddress\",\"type\":\"address\"}],\"name\":\"ChangeFoundersWalletAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TalentToken","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000056acc1b1d15db819a9aaf5ef420ed6af29463ff3","Library":"","SwarmSource":"bzzr://efbb0137ecc90342dca6e9fed0493525b958c9aea21e91a91b5e779dfb6dcddc"}]}